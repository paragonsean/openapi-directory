/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorEndpointFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorEndpointFilter::OAIConnectionMonitorEndpointFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorEndpointFilter::OAIConnectionMonitorEndpointFilter() {
    this->initializeModel();
}

OAIConnectionMonitorEndpointFilter::~OAIConnectionMonitorEndpointFilter() {}

void OAIConnectionMonitorEndpointFilter::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConnectionMonitorEndpointFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorEndpointFilter::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConnectionMonitorEndpointFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorEndpointFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIConnectionMonitorEndpointFilterItem> OAIConnectionMonitorEndpointFilter::getItems() const {
    return m_items;
}
void OAIConnectionMonitorEndpointFilter::setItems(const QList<OAIConnectionMonitorEndpointFilterItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIConnectionMonitorEndpointFilter::is_items_Set() const{
    return m_items_isSet;
}

bool OAIConnectionMonitorEndpointFilter::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIConnectionMonitorEndpointFilter::getType() const {
    return m_type;
}
void OAIConnectionMonitorEndpointFilter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnectionMonitorEndpointFilter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnectionMonitorEndpointFilter::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConnectionMonitorEndpointFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorEndpointFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
