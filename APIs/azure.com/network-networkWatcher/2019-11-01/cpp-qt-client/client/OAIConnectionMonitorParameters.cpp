/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorParameters::OAIConnectionMonitorParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorParameters::OAIConnectionMonitorParameters() {
    this->initializeModel();
}

OAIConnectionMonitorParameters::~OAIConnectionMonitorParameters() {}

void OAIConnectionMonitorParameters::initializeModel() {

    m_auto_start_isSet = false;
    m_auto_start_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_monitoring_interval_in_seconds_isSet = false;
    m_monitoring_interval_in_seconds_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_test_configurations_isSet = false;
    m_test_configurations_isValid = false;

    m_test_groups_isSet = false;
    m_test_groups_isValid = false;
}

void OAIConnectionMonitorParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorParameters::fromJsonObject(QJsonObject json) {

    m_auto_start_isValid = ::OpenAPI::fromJsonValue(m_auto_start, json[QString("autoStart")]);
    m_auto_start_isSet = !json[QString("autoStart")].isNull() && m_auto_start_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_monitoring_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_monitoring_interval_in_seconds, json[QString("monitoringIntervalInSeconds")]);
    m_monitoring_interval_in_seconds_isSet = !json[QString("monitoringIntervalInSeconds")].isNull() && m_monitoring_interval_in_seconds_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_test_configurations_isValid = ::OpenAPI::fromJsonValue(m_test_configurations, json[QString("testConfigurations")]);
    m_test_configurations_isSet = !json[QString("testConfigurations")].isNull() && m_test_configurations_isValid;

    m_test_groups_isValid = ::OpenAPI::fromJsonValue(m_test_groups, json[QString("testGroups")]);
    m_test_groups_isSet = !json[QString("testGroups")].isNull() && m_test_groups_isValid;
}

QString OAIConnectionMonitorParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_start_isSet) {
        obj.insert(QString("autoStart"), ::OpenAPI::toJsonValue(m_auto_start));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_monitoring_interval_in_seconds_isSet) {
        obj.insert(QString("monitoringIntervalInSeconds"), ::OpenAPI::toJsonValue(m_monitoring_interval_in_seconds));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_test_configurations.size() > 0) {
        obj.insert(QString("testConfigurations"), ::OpenAPI::toJsonValue(m_test_configurations));
    }
    if (m_test_groups.size() > 0) {
        obj.insert(QString("testGroups"), ::OpenAPI::toJsonValue(m_test_groups));
    }
    return obj;
}

bool OAIConnectionMonitorParameters::isAutoStart() const {
    return m_auto_start;
}
void OAIConnectionMonitorParameters::setAutoStart(const bool &auto_start) {
    m_auto_start = auto_start;
    m_auto_start_isSet = true;
}

bool OAIConnectionMonitorParameters::is_auto_start_Set() const{
    return m_auto_start_isSet;
}

bool OAIConnectionMonitorParameters::is_auto_start_Valid() const{
    return m_auto_start_isValid;
}

OAIConnectionMonitorDestination OAIConnectionMonitorParameters::getDestination() const {
    return m_destination;
}
void OAIConnectionMonitorParameters::setDestination(const OAIConnectionMonitorDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIConnectionMonitorParameters::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIConnectionMonitorParameters::is_destination_Valid() const{
    return m_destination_isValid;
}

QList<OAIConnectionMonitorEndpoint> OAIConnectionMonitorParameters::getEndpoints() const {
    return m_endpoints;
}
void OAIConnectionMonitorParameters::setEndpoints(const QList<OAIConnectionMonitorEndpoint> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIConnectionMonitorParameters::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIConnectionMonitorParameters::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

qint32 OAIConnectionMonitorParameters::getMonitoringIntervalInSeconds() const {
    return m_monitoring_interval_in_seconds;
}
void OAIConnectionMonitorParameters::setMonitoringIntervalInSeconds(const qint32 &monitoring_interval_in_seconds) {
    m_monitoring_interval_in_seconds = monitoring_interval_in_seconds;
    m_monitoring_interval_in_seconds_isSet = true;
}

bool OAIConnectionMonitorParameters::is_monitoring_interval_in_seconds_Set() const{
    return m_monitoring_interval_in_seconds_isSet;
}

bool OAIConnectionMonitorParameters::is_monitoring_interval_in_seconds_Valid() const{
    return m_monitoring_interval_in_seconds_isValid;
}

QString OAIConnectionMonitorParameters::getNotes() const {
    return m_notes;
}
void OAIConnectionMonitorParameters::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIConnectionMonitorParameters::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIConnectionMonitorParameters::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAIConnectionMonitorOutput> OAIConnectionMonitorParameters::getOutputs() const {
    return m_outputs;
}
void OAIConnectionMonitorParameters::setOutputs(const QList<OAIConnectionMonitorOutput> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIConnectionMonitorParameters::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIConnectionMonitorParameters::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAIConnectionMonitorSource OAIConnectionMonitorParameters::getSource() const {
    return m_source;
}
void OAIConnectionMonitorParameters::setSource(const OAIConnectionMonitorSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIConnectionMonitorParameters::is_source_Set() const{
    return m_source_isSet;
}

bool OAIConnectionMonitorParameters::is_source_Valid() const{
    return m_source_isValid;
}

QList<OAIConnectionMonitorTestConfiguration> OAIConnectionMonitorParameters::getTestConfigurations() const {
    return m_test_configurations;
}
void OAIConnectionMonitorParameters::setTestConfigurations(const QList<OAIConnectionMonitorTestConfiguration> &test_configurations) {
    m_test_configurations = test_configurations;
    m_test_configurations_isSet = true;
}

bool OAIConnectionMonitorParameters::is_test_configurations_Set() const{
    return m_test_configurations_isSet;
}

bool OAIConnectionMonitorParameters::is_test_configurations_Valid() const{
    return m_test_configurations_isValid;
}

QList<OAIConnectionMonitorTestGroup> OAIConnectionMonitorParameters::getTestGroups() const {
    return m_test_groups;
}
void OAIConnectionMonitorParameters::setTestGroups(const QList<OAIConnectionMonitorTestGroup> &test_groups) {
    m_test_groups = test_groups;
    m_test_groups_isSet = true;
}

bool OAIConnectionMonitorParameters::is_test_groups_Set() const{
    return m_test_groups_isSet;
}

bool OAIConnectionMonitorParameters::is_test_groups_Valid() const{
    return m_test_groups_isValid;
}

bool OAIConnectionMonitorParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
