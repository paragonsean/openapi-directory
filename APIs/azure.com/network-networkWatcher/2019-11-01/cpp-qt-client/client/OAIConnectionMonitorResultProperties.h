/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnectionMonitorResultProperties.h
 *
 * Describes the properties of a connection monitor.
 */

#ifndef OAIConnectionMonitorResultProperties_H
#define OAIConnectionMonitorResultProperties_H

#include <QJsonObject>

#include "OAIConnectionMonitorDestination.h"
#include "OAIConnectionMonitorEndpoint.h"
#include "OAIConnectionMonitorOutput.h"
#include "OAIConnectionMonitorSource.h"
#include "OAIConnectionMonitorTestConfiguration.h"
#include "OAIConnectionMonitorTestGroup.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConnectionMonitorDestination;
class OAIConnectionMonitorEndpoint;
class OAIConnectionMonitorOutput;
class OAIConnectionMonitorSource;
class OAIConnectionMonitorTestConfiguration;
class OAIConnectionMonitorTestGroup;

class OAIConnectionMonitorResultProperties : public OAIObject {
public:
    OAIConnectionMonitorResultProperties();
    OAIConnectionMonitorResultProperties(QString json);
    ~OAIConnectionMonitorResultProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectionMonitorType() const;
    void setConnectionMonitorType(const QString &connection_monitor_type);
    bool is_connection_monitor_type_Set() const;
    bool is_connection_monitor_type_Valid() const;

    QString getMonitoringStatus() const;
    void setMonitoringStatus(const QString &monitoring_status);
    bool is_monitoring_status_Set() const;
    bool is_monitoring_status_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    bool isAutoStart() const;
    void setAutoStart(const bool &auto_start);
    bool is_auto_start_Set() const;
    bool is_auto_start_Valid() const;

    OAIConnectionMonitorDestination getDestination() const;
    void setDestination(const OAIConnectionMonitorDestination &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    QList<OAIConnectionMonitorEndpoint> getEndpoints() const;
    void setEndpoints(const QList<OAIConnectionMonitorEndpoint> &endpoints);
    bool is_endpoints_Set() const;
    bool is_endpoints_Valid() const;

    qint32 getMonitoringIntervalInSeconds() const;
    void setMonitoringIntervalInSeconds(const qint32 &monitoring_interval_in_seconds);
    bool is_monitoring_interval_in_seconds_Set() const;
    bool is_monitoring_interval_in_seconds_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QList<OAIConnectionMonitorOutput> getOutputs() const;
    void setOutputs(const QList<OAIConnectionMonitorOutput> &outputs);
    bool is_outputs_Set() const;
    bool is_outputs_Valid() const;

    OAIConnectionMonitorSource getSource() const;
    void setSource(const OAIConnectionMonitorSource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QList<OAIConnectionMonitorTestConfiguration> getTestConfigurations() const;
    void setTestConfigurations(const QList<OAIConnectionMonitorTestConfiguration> &test_configurations);
    bool is_test_configurations_Set() const;
    bool is_test_configurations_Valid() const;

    QList<OAIConnectionMonitorTestGroup> getTestGroups() const;
    void setTestGroups(const QList<OAIConnectionMonitorTestGroup> &test_groups);
    bool is_test_groups_Set() const;
    bool is_test_groups_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connection_monitor_type;
    bool m_connection_monitor_type_isSet;
    bool m_connection_monitor_type_isValid;

    QString m_monitoring_status;
    bool m_monitoring_status_isSet;
    bool m_monitoring_status_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    bool m_auto_start;
    bool m_auto_start_isSet;
    bool m_auto_start_isValid;

    OAIConnectionMonitorDestination m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    QList<OAIConnectionMonitorEndpoint> m_endpoints;
    bool m_endpoints_isSet;
    bool m_endpoints_isValid;

    qint32 m_monitoring_interval_in_seconds;
    bool m_monitoring_interval_in_seconds_isSet;
    bool m_monitoring_interval_in_seconds_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QList<OAIConnectionMonitorOutput> m_outputs;
    bool m_outputs_isSet;
    bool m_outputs_isValid;

    OAIConnectionMonitorSource m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QList<OAIConnectionMonitorTestConfiguration> m_test_configurations;
    bool m_test_configurations_isSet;
    bool m_test_configurations_isValid;

    QList<OAIConnectionMonitorTestGroup> m_test_groups;
    bool m_test_groups_isSet;
    bool m_test_groups_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnectionMonitorResultProperties)

#endif // OAIConnectionMonitorResultProperties_H
