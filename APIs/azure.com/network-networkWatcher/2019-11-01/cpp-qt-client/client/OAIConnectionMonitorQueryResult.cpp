/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorQueryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorQueryResult::OAIConnectionMonitorQueryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorQueryResult::OAIConnectionMonitorQueryResult() {
    this->initializeModel();
}

OAIConnectionMonitorQueryResult::~OAIConnectionMonitorQueryResult() {}

void OAIConnectionMonitorQueryResult::initializeModel() {

    m_source_status_isSet = false;
    m_source_status_isValid = false;

    m_states_isSet = false;
    m_states_isValid = false;
}

void OAIConnectionMonitorQueryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorQueryResult::fromJsonObject(QJsonObject json) {

    m_source_status_isValid = ::OpenAPI::fromJsonValue(m_source_status, json[QString("sourceStatus")]);
    m_source_status_isSet = !json[QString("sourceStatus")].isNull() && m_source_status_isValid;

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;
}

QString OAIConnectionMonitorQueryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorQueryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_source_status_isSet) {
        obj.insert(QString("sourceStatus"), ::OpenAPI::toJsonValue(m_source_status));
    }
    if (m_states.size() > 0) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    return obj;
}

QString OAIConnectionMonitorQueryResult::getSourceStatus() const {
    return m_source_status;
}
void OAIConnectionMonitorQueryResult::setSourceStatus(const QString &source_status) {
    m_source_status = source_status;
    m_source_status_isSet = true;
}

bool OAIConnectionMonitorQueryResult::is_source_status_Set() const{
    return m_source_status_isSet;
}

bool OAIConnectionMonitorQueryResult::is_source_status_Valid() const{
    return m_source_status_isValid;
}

QList<OAIConnectionStateSnapshot> OAIConnectionMonitorQueryResult::getStates() const {
    return m_states;
}
void OAIConnectionMonitorQueryResult::setStates(const QList<OAIConnectionStateSnapshot> &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAIConnectionMonitorQueryResult::is_states_Set() const{
    return m_states_isSet;
}

bool OAIConnectionMonitorQueryResult::is_states_Valid() const{
    return m_states_isValid;
}

bool OAIConnectionMonitorQueryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorQueryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
