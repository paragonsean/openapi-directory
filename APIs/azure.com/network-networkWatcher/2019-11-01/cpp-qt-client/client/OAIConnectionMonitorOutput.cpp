/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorOutput::OAIConnectionMonitorOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorOutput::OAIConnectionMonitorOutput() {
    this->initializeModel();
}

OAIConnectionMonitorOutput::~OAIConnectionMonitorOutput() {}

void OAIConnectionMonitorOutput::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_workspace_settings_isSet = false;
    m_workspace_settings_isValid = false;
}

void OAIConnectionMonitorOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorOutput::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_workspace_settings_isValid = ::OpenAPI::fromJsonValue(m_workspace_settings, json[QString("workspaceSettings")]);
    m_workspace_settings_isSet = !json[QString("workspaceSettings")].isNull() && m_workspace_settings_isValid;
}

QString OAIConnectionMonitorOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_workspace_settings.isSet()) {
        obj.insert(QString("workspaceSettings"), ::OpenAPI::toJsonValue(m_workspace_settings));
    }
    return obj;
}

QString OAIConnectionMonitorOutput::getType() const {
    return m_type;
}
void OAIConnectionMonitorOutput::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnectionMonitorOutput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnectionMonitorOutput::is_type_Valid() const{
    return m_type_isValid;
}

OAIConnectionMonitorWorkspaceSettings OAIConnectionMonitorOutput::getWorkspaceSettings() const {
    return m_workspace_settings;
}
void OAIConnectionMonitorOutput::setWorkspaceSettings(const OAIConnectionMonitorWorkspaceSettings &workspace_settings) {
    m_workspace_settings = workspace_settings;
    m_workspace_settings_isSet = true;
}

bool OAIConnectionMonitorOutput::is_workspace_settings_Set() const{
    return m_workspace_settings_isSet;
}

bool OAIConnectionMonitorOutput::is_workspace_settings_Valid() const{
    return m_workspace_settings_isValid;
}

bool OAIConnectionMonitorOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
