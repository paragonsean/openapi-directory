/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorTcpConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorTcpConfiguration::OAIConnectionMonitorTcpConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorTcpConfiguration::OAIConnectionMonitorTcpConfiguration() {
    this->initializeModel();
}

OAIConnectionMonitorTcpConfiguration::~OAIConnectionMonitorTcpConfiguration() {}

void OAIConnectionMonitorTcpConfiguration::initializeModel() {

    m_disable_trace_route_isSet = false;
    m_disable_trace_route_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAIConnectionMonitorTcpConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorTcpConfiguration::fromJsonObject(QJsonObject json) {

    m_disable_trace_route_isValid = ::OpenAPI::fromJsonValue(m_disable_trace_route, json[QString("disableTraceRoute")]);
    m_disable_trace_route_isSet = !json[QString("disableTraceRoute")].isNull() && m_disable_trace_route_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;
}

QString OAIConnectionMonitorTcpConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorTcpConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_trace_route_isSet) {
        obj.insert(QString("disableTraceRoute"), ::OpenAPI::toJsonValue(m_disable_trace_route));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

bool OAIConnectionMonitorTcpConfiguration::isDisableTraceRoute() const {
    return m_disable_trace_route;
}
void OAIConnectionMonitorTcpConfiguration::setDisableTraceRoute(const bool &disable_trace_route) {
    m_disable_trace_route = disable_trace_route;
    m_disable_trace_route_isSet = true;
}

bool OAIConnectionMonitorTcpConfiguration::is_disable_trace_route_Set() const{
    return m_disable_trace_route_isSet;
}

bool OAIConnectionMonitorTcpConfiguration::is_disable_trace_route_Valid() const{
    return m_disable_trace_route_isValid;
}

qint32 OAIConnectionMonitorTcpConfiguration::getPort() const {
    return m_port;
}
void OAIConnectionMonitorTcpConfiguration::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConnectionMonitorTcpConfiguration::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConnectionMonitorTcpConfiguration::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIConnectionMonitorTcpConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_trace_route_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorTcpConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
