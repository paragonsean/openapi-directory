/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkSecurityRulesEvaluationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkSecurityRulesEvaluationResult::OAINetworkSecurityRulesEvaluationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkSecurityRulesEvaluationResult::OAINetworkSecurityRulesEvaluationResult() {
    this->initializeModel();
}

OAINetworkSecurityRulesEvaluationResult::~OAINetworkSecurityRulesEvaluationResult() {}

void OAINetworkSecurityRulesEvaluationResult::initializeModel() {

    m_destination_matched_isSet = false;
    m_destination_matched_isValid = false;

    m_destination_port_matched_isSet = false;
    m_destination_port_matched_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_matched_isSet = false;
    m_protocol_matched_isValid = false;

    m_source_matched_isSet = false;
    m_source_matched_isValid = false;

    m_source_port_matched_isSet = false;
    m_source_port_matched_isValid = false;
}

void OAINetworkSecurityRulesEvaluationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkSecurityRulesEvaluationResult::fromJsonObject(QJsonObject json) {

    m_destination_matched_isValid = ::OpenAPI::fromJsonValue(m_destination_matched, json[QString("destinationMatched")]);
    m_destination_matched_isSet = !json[QString("destinationMatched")].isNull() && m_destination_matched_isValid;

    m_destination_port_matched_isValid = ::OpenAPI::fromJsonValue(m_destination_port_matched, json[QString("destinationPortMatched")]);
    m_destination_port_matched_isSet = !json[QString("destinationPortMatched")].isNull() && m_destination_port_matched_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protocol_matched_isValid = ::OpenAPI::fromJsonValue(m_protocol_matched, json[QString("protocolMatched")]);
    m_protocol_matched_isSet = !json[QString("protocolMatched")].isNull() && m_protocol_matched_isValid;

    m_source_matched_isValid = ::OpenAPI::fromJsonValue(m_source_matched, json[QString("sourceMatched")]);
    m_source_matched_isSet = !json[QString("sourceMatched")].isNull() && m_source_matched_isValid;

    m_source_port_matched_isValid = ::OpenAPI::fromJsonValue(m_source_port_matched, json[QString("sourcePortMatched")]);
    m_source_port_matched_isSet = !json[QString("sourcePortMatched")].isNull() && m_source_port_matched_isValid;
}

QString OAINetworkSecurityRulesEvaluationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkSecurityRulesEvaluationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_matched_isSet) {
        obj.insert(QString("destinationMatched"), ::OpenAPI::toJsonValue(m_destination_matched));
    }
    if (m_destination_port_matched_isSet) {
        obj.insert(QString("destinationPortMatched"), ::OpenAPI::toJsonValue(m_destination_port_matched));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol_matched_isSet) {
        obj.insert(QString("protocolMatched"), ::OpenAPI::toJsonValue(m_protocol_matched));
    }
    if (m_source_matched_isSet) {
        obj.insert(QString("sourceMatched"), ::OpenAPI::toJsonValue(m_source_matched));
    }
    if (m_source_port_matched_isSet) {
        obj.insert(QString("sourcePortMatched"), ::OpenAPI::toJsonValue(m_source_port_matched));
    }
    return obj;
}

bool OAINetworkSecurityRulesEvaluationResult::isDestinationMatched() const {
    return m_destination_matched;
}
void OAINetworkSecurityRulesEvaluationResult::setDestinationMatched(const bool &destination_matched) {
    m_destination_matched = destination_matched;
    m_destination_matched_isSet = true;
}

bool OAINetworkSecurityRulesEvaluationResult::is_destination_matched_Set() const{
    return m_destination_matched_isSet;
}

bool OAINetworkSecurityRulesEvaluationResult::is_destination_matched_Valid() const{
    return m_destination_matched_isValid;
}

bool OAINetworkSecurityRulesEvaluationResult::isDestinationPortMatched() const {
    return m_destination_port_matched;
}
void OAINetworkSecurityRulesEvaluationResult::setDestinationPortMatched(const bool &destination_port_matched) {
    m_destination_port_matched = destination_port_matched;
    m_destination_port_matched_isSet = true;
}

bool OAINetworkSecurityRulesEvaluationResult::is_destination_port_matched_Set() const{
    return m_destination_port_matched_isSet;
}

bool OAINetworkSecurityRulesEvaluationResult::is_destination_port_matched_Valid() const{
    return m_destination_port_matched_isValid;
}

QString OAINetworkSecurityRulesEvaluationResult::getName() const {
    return m_name;
}
void OAINetworkSecurityRulesEvaluationResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINetworkSecurityRulesEvaluationResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAINetworkSecurityRulesEvaluationResult::is_name_Valid() const{
    return m_name_isValid;
}

bool OAINetworkSecurityRulesEvaluationResult::isProtocolMatched() const {
    return m_protocol_matched;
}
void OAINetworkSecurityRulesEvaluationResult::setProtocolMatched(const bool &protocol_matched) {
    m_protocol_matched = protocol_matched;
    m_protocol_matched_isSet = true;
}

bool OAINetworkSecurityRulesEvaluationResult::is_protocol_matched_Set() const{
    return m_protocol_matched_isSet;
}

bool OAINetworkSecurityRulesEvaluationResult::is_protocol_matched_Valid() const{
    return m_protocol_matched_isValid;
}

bool OAINetworkSecurityRulesEvaluationResult::isSourceMatched() const {
    return m_source_matched;
}
void OAINetworkSecurityRulesEvaluationResult::setSourceMatched(const bool &source_matched) {
    m_source_matched = source_matched;
    m_source_matched_isSet = true;
}

bool OAINetworkSecurityRulesEvaluationResult::is_source_matched_Set() const{
    return m_source_matched_isSet;
}

bool OAINetworkSecurityRulesEvaluationResult::is_source_matched_Valid() const{
    return m_source_matched_isValid;
}

bool OAINetworkSecurityRulesEvaluationResult::isSourcePortMatched() const {
    return m_source_port_matched;
}
void OAINetworkSecurityRulesEvaluationResult::setSourcePortMatched(const bool &source_port_matched) {
    m_source_port_matched = source_port_matched;
    m_source_port_matched_isSet = true;
}

bool OAINetworkSecurityRulesEvaluationResult::is_source_port_matched_Set() const{
    return m_source_port_matched_isSet;
}

bool OAINetworkSecurityRulesEvaluationResult::is_source_port_matched_Valid() const{
    return m_source_port_matched_isValid;
}

bool OAINetworkSecurityRulesEvaluationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_port_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_port_matched_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkSecurityRulesEvaluationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
