/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFlowLogsApi_H
#define OAI_OAIFlowLogsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionMonitors_List_default_response.h"
#include "OAIErrorResponse.h"
#include "OAIFlowLog.h"
#include "OAIFlowLogListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFlowLogsApi : public QObject {
    Q_OBJECT

public:
    OAIFlowLogsApi(const int timeOut = 0);
    ~OAIFlowLogsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  flow_log_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIFlowLog [required]
    */
    virtual void flowLogsCreateOrUpdate(const QString &resource_group_name, const QString &network_watcher_name, const QString &flow_log_name, const QString &api_version, const QString &subscription_id, const OAIFlowLog &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  flow_log_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void flowLogsDelete(const QString &resource_group_name, const QString &network_watcher_name, const QString &flow_log_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  flow_log_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void flowLogsGet(const QString &resource_group_name, const QString &network_watcher_name, const QString &flow_log_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void flowLogsList(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void flowLogsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void flowLogsDeleteCallback(OAIHttpRequestWorker *worker);
    void flowLogsGetCallback(OAIHttpRequestWorker *worker);
    void flowLogsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void flowLogsCreateOrUpdateSignal(OAIFlowLog summary);
    void flowLogsDeleteSignal();
    void flowLogsGetSignal(OAIFlowLog summary);
    void flowLogsListSignal(OAIFlowLogListResult summary);


    void flowLogsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFlowLog summary);
    void flowLogsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void flowLogsGetSignalFull(OAIHttpRequestWorker *worker, OAIFlowLog summary);
    void flowLogsListSignalFull(OAIHttpRequestWorker *worker, OAIFlowLogListResult summary);

    Q_DECL_DEPRECATED_X("Use flowLogsCreateOrUpdateSignalError() instead")
    void flowLogsCreateOrUpdateSignalE(OAIFlowLog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flowLogsCreateOrUpdateSignalError(OAIFlowLog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flowLogsDeleteSignalError() instead")
    void flowLogsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void flowLogsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flowLogsGetSignalError() instead")
    void flowLogsGetSignalE(OAIFlowLog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flowLogsGetSignalError(OAIFlowLog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flowLogsListSignalError() instead")
    void flowLogsListSignalE(OAIFlowLogListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flowLogsListSignalError(OAIFlowLogListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use flowLogsCreateOrUpdateSignalErrorFull() instead")
    void flowLogsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flowLogsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flowLogsDeleteSignalErrorFull() instead")
    void flowLogsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flowLogsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flowLogsGetSignalErrorFull() instead")
    void flowLogsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flowLogsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flowLogsListSignalErrorFull() instead")
    void flowLogsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flowLogsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
