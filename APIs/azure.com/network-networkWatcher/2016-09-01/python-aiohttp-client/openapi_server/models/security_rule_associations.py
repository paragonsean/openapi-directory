# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_interface_association import NetworkInterfaceAssociation
from openapi_server.models.network_interface_association_security_rules_inner import NetworkInterfaceAssociationSecurityRulesInner
from openapi_server.models.security_rule_associations_effective_security_rules_inner import SecurityRuleAssociationsEffectiveSecurityRulesInner
from openapi_server.models.subnet_association import SubnetAssociation
from openapi_server import util


class SecurityRuleAssociations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_security_rules: List[NetworkInterfaceAssociationSecurityRulesInner]=None, effective_security_rules: List[SecurityRuleAssociationsEffectiveSecurityRulesInner]=None, network_interface_association: NetworkInterfaceAssociation=None, subnet_association: SubnetAssociation=None):
        """SecurityRuleAssociations - a model defined in OpenAPI

        :param default_security_rules: The default_security_rules of this SecurityRuleAssociations.
        :param effective_security_rules: The effective_security_rules of this SecurityRuleAssociations.
        :param network_interface_association: The network_interface_association of this SecurityRuleAssociations.
        :param subnet_association: The subnet_association of this SecurityRuleAssociations.
        """
        self.openapi_types = {
            'default_security_rules': List[NetworkInterfaceAssociationSecurityRulesInner],
            'effective_security_rules': List[SecurityRuleAssociationsEffectiveSecurityRulesInner],
            'network_interface_association': NetworkInterfaceAssociation,
            'subnet_association': SubnetAssociation
        }

        self.attribute_map = {
            'default_security_rules': 'defaultSecurityRules',
            'effective_security_rules': 'effectiveSecurityRules',
            'network_interface_association': 'networkInterfaceAssociation',
            'subnet_association': 'subnetAssociation'
        }

        self._default_security_rules = default_security_rules
        self._effective_security_rules = effective_security_rules
        self._network_interface_association = network_interface_association
        self._subnet_association = subnet_association

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityRuleAssociations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityRuleAssociations of this SecurityRuleAssociations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_security_rules(self):
        """Gets the default_security_rules of this SecurityRuleAssociations.

        Collection of default security rules of the network security group.

        :return: The default_security_rules of this SecurityRuleAssociations.
        :rtype: List[NetworkInterfaceAssociationSecurityRulesInner]
        """
        return self._default_security_rules

    @default_security_rules.setter
    def default_security_rules(self, default_security_rules):
        """Sets the default_security_rules of this SecurityRuleAssociations.

        Collection of default security rules of the network security group.

        :param default_security_rules: The default_security_rules of this SecurityRuleAssociations.
        :type default_security_rules: List[NetworkInterfaceAssociationSecurityRulesInner]
        """

        self._default_security_rules = default_security_rules

    @property
    def effective_security_rules(self):
        """Gets the effective_security_rules of this SecurityRuleAssociations.

        Collection of effective security rules.

        :return: The effective_security_rules of this SecurityRuleAssociations.
        :rtype: List[SecurityRuleAssociationsEffectiveSecurityRulesInner]
        """
        return self._effective_security_rules

    @effective_security_rules.setter
    def effective_security_rules(self, effective_security_rules):
        """Sets the effective_security_rules of this SecurityRuleAssociations.

        Collection of effective security rules.

        :param effective_security_rules: The effective_security_rules of this SecurityRuleAssociations.
        :type effective_security_rules: List[SecurityRuleAssociationsEffectiveSecurityRulesInner]
        """

        self._effective_security_rules = effective_security_rules

    @property
    def network_interface_association(self):
        """Gets the network_interface_association of this SecurityRuleAssociations.


        :return: The network_interface_association of this SecurityRuleAssociations.
        :rtype: NetworkInterfaceAssociation
        """
        return self._network_interface_association

    @network_interface_association.setter
    def network_interface_association(self, network_interface_association):
        """Sets the network_interface_association of this SecurityRuleAssociations.


        :param network_interface_association: The network_interface_association of this SecurityRuleAssociations.
        :type network_interface_association: NetworkInterfaceAssociation
        """

        self._network_interface_association = network_interface_association

    @property
    def subnet_association(self):
        """Gets the subnet_association of this SecurityRuleAssociations.


        :return: The subnet_association of this SecurityRuleAssociations.
        :rtype: SubnetAssociation
        """
        return self._subnet_association

    @subnet_association.setter
    def subnet_association(self, subnet_association):
        """Sets the subnet_association of this SecurityRuleAssociations.


        :param subnet_association: The subnet_association of this SecurityRuleAssociations.
        :type subnet_association: SubnetAssociation
        """

        self._subnet_association = subnet_association
