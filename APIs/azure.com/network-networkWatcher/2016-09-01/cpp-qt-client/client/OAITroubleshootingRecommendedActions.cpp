/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITroubleshootingRecommendedActions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITroubleshootingRecommendedActions::OAITroubleshootingRecommendedActions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITroubleshootingRecommendedActions::OAITroubleshootingRecommendedActions() {
    this->initializeModel();
}

OAITroubleshootingRecommendedActions::~OAITroubleshootingRecommendedActions() {}

void OAITroubleshootingRecommendedActions::initializeModel() {

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_action_text_isSet = false;
    m_action_text_isValid = false;

    m_action_uri_isSet = false;
    m_action_uri_isValid = false;

    m_action_uri_text_isSet = false;
    m_action_uri_text_isValid = false;
}

void OAITroubleshootingRecommendedActions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITroubleshootingRecommendedActions::fromJsonObject(QJsonObject json) {

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("actionId")]);
    m_action_id_isSet = !json[QString("actionId")].isNull() && m_action_id_isValid;

    m_action_text_isValid = ::OpenAPI::fromJsonValue(m_action_text, json[QString("actionText")]);
    m_action_text_isSet = !json[QString("actionText")].isNull() && m_action_text_isValid;

    m_action_uri_isValid = ::OpenAPI::fromJsonValue(m_action_uri, json[QString("actionUri")]);
    m_action_uri_isSet = !json[QString("actionUri")].isNull() && m_action_uri_isValid;

    m_action_uri_text_isValid = ::OpenAPI::fromJsonValue(m_action_uri_text, json[QString("actionUriText")]);
    m_action_uri_text_isSet = !json[QString("actionUriText")].isNull() && m_action_uri_text_isValid;
}

QString OAITroubleshootingRecommendedActions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITroubleshootingRecommendedActions::asJsonObject() const {
    QJsonObject obj;
    if (m_action_id_isSet) {
        obj.insert(QString("actionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_action_text_isSet) {
        obj.insert(QString("actionText"), ::OpenAPI::toJsonValue(m_action_text));
    }
    if (m_action_uri_isSet) {
        obj.insert(QString("actionUri"), ::OpenAPI::toJsonValue(m_action_uri));
    }
    if (m_action_uri_text_isSet) {
        obj.insert(QString("actionUriText"), ::OpenAPI::toJsonValue(m_action_uri_text));
    }
    return obj;
}

QString OAITroubleshootingRecommendedActions::getActionId() const {
    return m_action_id;
}
void OAITroubleshootingRecommendedActions::setActionId(const QString &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAITroubleshootingRecommendedActions::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAITroubleshootingRecommendedActions::is_action_id_Valid() const{
    return m_action_id_isValid;
}

QString OAITroubleshootingRecommendedActions::getActionText() const {
    return m_action_text;
}
void OAITroubleshootingRecommendedActions::setActionText(const QString &action_text) {
    m_action_text = action_text;
    m_action_text_isSet = true;
}

bool OAITroubleshootingRecommendedActions::is_action_text_Set() const{
    return m_action_text_isSet;
}

bool OAITroubleshootingRecommendedActions::is_action_text_Valid() const{
    return m_action_text_isValid;
}

QString OAITroubleshootingRecommendedActions::getActionUri() const {
    return m_action_uri;
}
void OAITroubleshootingRecommendedActions::setActionUri(const QString &action_uri) {
    m_action_uri = action_uri;
    m_action_uri_isSet = true;
}

bool OAITroubleshootingRecommendedActions::is_action_uri_Set() const{
    return m_action_uri_isSet;
}

bool OAITroubleshootingRecommendedActions::is_action_uri_Valid() const{
    return m_action_uri_isValid;
}

QString OAITroubleshootingRecommendedActions::getActionUriText() const {
    return m_action_uri_text;
}
void OAITroubleshootingRecommendedActions::setActionUriText(const QString &action_uri_text) {
    m_action_uri_text = action_uri_text;
    m_action_uri_text_isSet = true;
}

bool OAITroubleshootingRecommendedActions::is_action_uri_text_Set() const{
    return m_action_uri_text_isSet;
}

bool OAITroubleshootingRecommendedActions::is_action_uri_text_Valid() const{
    return m_action_uri_text_isValid;
}

bool OAITroubleshootingRecommendedActions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_uri_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITroubleshootingRecommendedActions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
