# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_monitor_destination import ConnectionMonitorDestination
from openapi_server.models.connection_monitor_source import ConnectionMonitorSource
from openapi_server import util


class ConnectionMonitorResultProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, monitoring_status: str=None, provisioning_state: str=None, start_time: datetime=None, auto_start: bool=True, destination: ConnectionMonitorDestination=None, monitoring_interval_in_seconds: int=None, source: ConnectionMonitorSource=None):
        """ConnectionMonitorResultProperties - a model defined in OpenAPI

        :param monitoring_status: The monitoring_status of this ConnectionMonitorResultProperties.
        :param provisioning_state: The provisioning_state of this ConnectionMonitorResultProperties.
        :param start_time: The start_time of this ConnectionMonitorResultProperties.
        :param auto_start: The auto_start of this ConnectionMonitorResultProperties.
        :param destination: The destination of this ConnectionMonitorResultProperties.
        :param monitoring_interval_in_seconds: The monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.
        :param source: The source of this ConnectionMonitorResultProperties.
        """
        self.openapi_types = {
            'monitoring_status': str,
            'provisioning_state': str,
            'start_time': datetime,
            'auto_start': bool,
            'destination': ConnectionMonitorDestination,
            'monitoring_interval_in_seconds': int,
            'source': ConnectionMonitorSource
        }

        self.attribute_map = {
            'monitoring_status': 'monitoringStatus',
            'provisioning_state': 'provisioningState',
            'start_time': 'startTime',
            'auto_start': 'autoStart',
            'destination': 'destination',
            'monitoring_interval_in_seconds': 'monitoringIntervalInSeconds',
            'source': 'source'
        }

        self._monitoring_status = monitoring_status
        self._provisioning_state = provisioning_state
        self._start_time = start_time
        self._auto_start = auto_start
        self._destination = destination
        self._monitoring_interval_in_seconds = monitoring_interval_in_seconds
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorResultProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorResultProperties of this ConnectionMonitorResultProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monitoring_status(self):
        """Gets the monitoring_status of this ConnectionMonitorResultProperties.

        The monitoring status of the connection monitor.

        :return: The monitoring_status of this ConnectionMonitorResultProperties.
        :rtype: str
        """
        return self._monitoring_status

    @monitoring_status.setter
    def monitoring_status(self, monitoring_status):
        """Sets the monitoring_status of this ConnectionMonitorResultProperties.

        The monitoring status of the connection monitor.

        :param monitoring_status: The monitoring_status of this ConnectionMonitorResultProperties.
        :type monitoring_status: str
        """

        self._monitoring_status = monitoring_status

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ConnectionMonitorResultProperties.

        The provisioning state of the connection monitor.

        :return: The provisioning_state of this ConnectionMonitorResultProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ConnectionMonitorResultProperties.

        The provisioning state of the connection monitor.

        :param provisioning_state: The provisioning_state of this ConnectionMonitorResultProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def start_time(self):
        """Gets the start_time of this ConnectionMonitorResultProperties.

        The date and time when the connection monitor was started.

        :return: The start_time of this ConnectionMonitorResultProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ConnectionMonitorResultProperties.

        The date and time when the connection monitor was started.

        :param start_time: The start_time of this ConnectionMonitorResultProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def auto_start(self):
        """Gets the auto_start of this ConnectionMonitorResultProperties.

        Determines if the connection monitor will start automatically once created.

        :return: The auto_start of this ConnectionMonitorResultProperties.
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start):
        """Sets the auto_start of this ConnectionMonitorResultProperties.

        Determines if the connection monitor will start automatically once created.

        :param auto_start: The auto_start of this ConnectionMonitorResultProperties.
        :type auto_start: bool
        """

        self._auto_start = auto_start

    @property
    def destination(self):
        """Gets the destination of this ConnectionMonitorResultProperties.


        :return: The destination of this ConnectionMonitorResultProperties.
        :rtype: ConnectionMonitorDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ConnectionMonitorResultProperties.


        :param destination: The destination of this ConnectionMonitorResultProperties.
        :type destination: ConnectionMonitorDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def monitoring_interval_in_seconds(self):
        """Gets the monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.

        Monitoring interval in seconds.

        :return: The monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.
        :rtype: int
        """
        return self._monitoring_interval_in_seconds

    @monitoring_interval_in_seconds.setter
    def monitoring_interval_in_seconds(self, monitoring_interval_in_seconds):
        """Sets the monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.

        Monitoring interval in seconds.

        :param monitoring_interval_in_seconds: The monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.
        :type monitoring_interval_in_seconds: int
        """

        self._monitoring_interval_in_seconds = monitoring_interval_in_seconds

    @property
    def source(self):
        """Gets the source of this ConnectionMonitorResultProperties.


        :return: The source of this ConnectionMonitorResultProperties.
        :rtype: ConnectionMonitorSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConnectionMonitorResultProperties.


        :param source: The source of this ConnectionMonitorResultProperties.
        :type source: ConnectionMonitorSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
