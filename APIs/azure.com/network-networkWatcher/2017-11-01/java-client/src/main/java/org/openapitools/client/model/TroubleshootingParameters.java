/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TroubleshootingProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that define the resource to troubleshoot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:52.194140-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TroubleshootingParameters {
  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private TroubleshootingProperties properties;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_ID = "targetResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_ID)
  private String targetResourceId;

  public TroubleshootingParameters() {
  }

  public TroubleshootingParameters properties(TroubleshootingProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nonnull
  public TroubleshootingProperties getProperties() {
    return properties;
  }

  public void setProperties(TroubleshootingProperties properties) {
    this.properties = properties;
  }


  public TroubleshootingParameters targetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
    return this;
  }

  /**
   * The target resource to troubleshoot.
   * @return targetResourceId
   */
  @javax.annotation.Nonnull
  public String getTargetResourceId() {
    return targetResourceId;
  }

  public void setTargetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TroubleshootingParameters troubleshootingParameters = (TroubleshootingParameters) o;
    return Objects.equals(this.properties, troubleshootingParameters.properties) &&
        Objects.equals(this.targetResourceId, troubleshootingParameters.targetResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, targetResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TroubleshootingParameters {\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    targetResourceId: ").append(toIndentedString(targetResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("properties");
    openapiFields.add("targetResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("properties");
    openapiRequiredFields.add("targetResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TroubleshootingParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TroubleshootingParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TroubleshootingParameters is not found in the empty JSON string", TroubleshootingParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TroubleshootingParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TroubleshootingParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TroubleshootingParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `properties`
      TroubleshootingProperties.validateJsonElement(jsonObj.get("properties"));
      if (!jsonObj.get("targetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TroubleshootingParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TroubleshootingParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TroubleshootingParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TroubleshootingParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<TroubleshootingParameters>() {
           @Override
           public void write(JsonWriter out, TroubleshootingParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TroubleshootingParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TroubleshootingParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TroubleshootingParameters
   * @throws IOException if the JSON string is invalid with respect to TroubleshootingParameters
   */
  public static TroubleshootingParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TroubleshootingParameters.class);
  }

  /**
   * Convert an instance of TroubleshootingParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

