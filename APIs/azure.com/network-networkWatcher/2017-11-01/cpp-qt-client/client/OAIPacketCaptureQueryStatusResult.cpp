/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPacketCaptureQueryStatusResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPacketCaptureQueryStatusResult::OAIPacketCaptureQueryStatusResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPacketCaptureQueryStatusResult::OAIPacketCaptureQueryStatusResult() {
    this->initializeModel();
}

OAIPacketCaptureQueryStatusResult::~OAIPacketCaptureQueryStatusResult() {}

void OAIPacketCaptureQueryStatusResult::initializeModel() {

    m_capture_start_time_isSet = false;
    m_capture_start_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_packet_capture_error_isSet = false;
    m_packet_capture_error_isValid = false;

    m_packet_capture_status_isSet = false;
    m_packet_capture_status_isValid = false;

    m_stop_reason_isSet = false;
    m_stop_reason_isValid = false;
}

void OAIPacketCaptureQueryStatusResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPacketCaptureQueryStatusResult::fromJsonObject(QJsonObject json) {

    m_capture_start_time_isValid = ::OpenAPI::fromJsonValue(m_capture_start_time, json[QString("captureStartTime")]);
    m_capture_start_time_isSet = !json[QString("captureStartTime")].isNull() && m_capture_start_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_packet_capture_error_isValid = ::OpenAPI::fromJsonValue(m_packet_capture_error, json[QString("packetCaptureError")]);
    m_packet_capture_error_isSet = !json[QString("packetCaptureError")].isNull() && m_packet_capture_error_isValid;

    m_packet_capture_status_isValid = ::OpenAPI::fromJsonValue(m_packet_capture_status, json[QString("packetCaptureStatus")]);
    m_packet_capture_status_isSet = !json[QString("packetCaptureStatus")].isNull() && m_packet_capture_status_isValid;

    m_stop_reason_isValid = ::OpenAPI::fromJsonValue(m_stop_reason, json[QString("stopReason")]);
    m_stop_reason_isSet = !json[QString("stopReason")].isNull() && m_stop_reason_isValid;
}

QString OAIPacketCaptureQueryStatusResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPacketCaptureQueryStatusResult::asJsonObject() const {
    QJsonObject obj;
    if (m_capture_start_time_isSet) {
        obj.insert(QString("captureStartTime"), ::OpenAPI::toJsonValue(m_capture_start_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_packet_capture_error.size() > 0) {
        obj.insert(QString("packetCaptureError"), ::OpenAPI::toJsonValue(m_packet_capture_error));
    }
    if (m_packet_capture_status_isSet) {
        obj.insert(QString("packetCaptureStatus"), ::OpenAPI::toJsonValue(m_packet_capture_status));
    }
    if (m_stop_reason_isSet) {
        obj.insert(QString("stopReason"), ::OpenAPI::toJsonValue(m_stop_reason));
    }
    return obj;
}

QDateTime OAIPacketCaptureQueryStatusResult::getCaptureStartTime() const {
    return m_capture_start_time;
}
void OAIPacketCaptureQueryStatusResult::setCaptureStartTime(const QDateTime &capture_start_time) {
    m_capture_start_time = capture_start_time;
    m_capture_start_time_isSet = true;
}

bool OAIPacketCaptureQueryStatusResult::is_capture_start_time_Set() const{
    return m_capture_start_time_isSet;
}

bool OAIPacketCaptureQueryStatusResult::is_capture_start_time_Valid() const{
    return m_capture_start_time_isValid;
}

QString OAIPacketCaptureQueryStatusResult::getId() const {
    return m_id;
}
void OAIPacketCaptureQueryStatusResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPacketCaptureQueryStatusResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPacketCaptureQueryStatusResult::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPacketCaptureQueryStatusResult::getName() const {
    return m_name;
}
void OAIPacketCaptureQueryStatusResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPacketCaptureQueryStatusResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPacketCaptureQueryStatusResult::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIPacketCaptureQueryStatusResult::getPacketCaptureError() const {
    return m_packet_capture_error;
}
void OAIPacketCaptureQueryStatusResult::setPacketCaptureError(const QList<QString> &packet_capture_error) {
    m_packet_capture_error = packet_capture_error;
    m_packet_capture_error_isSet = true;
}

bool OAIPacketCaptureQueryStatusResult::is_packet_capture_error_Set() const{
    return m_packet_capture_error_isSet;
}

bool OAIPacketCaptureQueryStatusResult::is_packet_capture_error_Valid() const{
    return m_packet_capture_error_isValid;
}

QString OAIPacketCaptureQueryStatusResult::getPacketCaptureStatus() const {
    return m_packet_capture_status;
}
void OAIPacketCaptureQueryStatusResult::setPacketCaptureStatus(const QString &packet_capture_status) {
    m_packet_capture_status = packet_capture_status;
    m_packet_capture_status_isSet = true;
}

bool OAIPacketCaptureQueryStatusResult::is_packet_capture_status_Set() const{
    return m_packet_capture_status_isSet;
}

bool OAIPacketCaptureQueryStatusResult::is_packet_capture_status_Valid() const{
    return m_packet_capture_status_isValid;
}

QString OAIPacketCaptureQueryStatusResult::getStopReason() const {
    return m_stop_reason;
}
void OAIPacketCaptureQueryStatusResult::setStopReason(const QString &stop_reason) {
    m_stop_reason = stop_reason;
    m_stop_reason_isSet = true;
}

bool OAIPacketCaptureQueryStatusResult::is_stop_reason_Set() const{
    return m_stop_reason_isSet;
}

bool OAIPacketCaptureQueryStatusResult::is_stop_reason_Valid() const{
    return m_stop_reason_isValid;
}

bool OAIPacketCaptureQueryStatusResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capture_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packet_capture_error.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_packet_capture_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPacketCaptureQueryStatusResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
