/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowLogProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowLogProperties::OAIFlowLogProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowLogProperties::OAIFlowLogProperties() {
    this->initializeModel();
}

OAIFlowLogProperties::~OAIFlowLogProperties() {}

void OAIFlowLogProperties::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_retention_policy_isSet = false;
    m_retention_policy_isValid = false;

    m_storage_id_isSet = false;
    m_storage_id_isValid = false;
}

void OAIFlowLogProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlowLogProperties::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_retention_policy_isValid = ::OpenAPI::fromJsonValue(m_retention_policy, json[QString("retentionPolicy")]);
    m_retention_policy_isSet = !json[QString("retentionPolicy")].isNull() && m_retention_policy_isValid;

    m_storage_id_isValid = ::OpenAPI::fromJsonValue(m_storage_id, json[QString("storageId")]);
    m_storage_id_isSet = !json[QString("storageId")].isNull() && m_storage_id_isValid;
}

QString OAIFlowLogProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlowLogProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_retention_policy.isSet()) {
        obj.insert(QString("retentionPolicy"), ::OpenAPI::toJsonValue(m_retention_policy));
    }
    if (m_storage_id_isSet) {
        obj.insert(QString("storageId"), ::OpenAPI::toJsonValue(m_storage_id));
    }
    return obj;
}

bool OAIFlowLogProperties::isEnabled() const {
    return m_enabled;
}
void OAIFlowLogProperties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIFlowLogProperties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIFlowLogProperties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIRetentionPolicyParameters OAIFlowLogProperties::getRetentionPolicy() const {
    return m_retention_policy;
}
void OAIFlowLogProperties::setRetentionPolicy(const OAIRetentionPolicyParameters &retention_policy) {
    m_retention_policy = retention_policy;
    m_retention_policy_isSet = true;
}

bool OAIFlowLogProperties::is_retention_policy_Set() const{
    return m_retention_policy_isSet;
}

bool OAIFlowLogProperties::is_retention_policy_Valid() const{
    return m_retention_policy_isValid;
}

QString OAIFlowLogProperties::getStorageId() const {
    return m_storage_id;
}
void OAIFlowLogProperties::setStorageId(const QString &storage_id) {
    m_storage_id = storage_id;
    m_storage_id_isSet = true;
}

bool OAIFlowLogProperties::is_storage_id_Set() const{
    return m_storage_id_isSet;
}

bool OAIFlowLogProperties::is_storage_id_Valid() const{
    return m_storage_id_isValid;
}

bool OAIFlowLogProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlowLogProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_storage_id_isValid && true;
}

} // namespace OpenAPI
