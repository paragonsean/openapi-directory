/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectivityIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectivityIssue::OAIConnectivityIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectivityIssue::OAIConnectivityIssue() {
    this->initializeModel();
}

OAIConnectivityIssue::~OAIConnectivityIssue() {}

void OAIConnectivityIssue::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConnectivityIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectivityIssue::fromJsonObject(QJsonObject json) {

    if(json["context"].isArray()){
        auto arr = json["context"].toArray();
        m_context_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QString> item;
                m_context_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_context_isSet = !jval.isNull() && m_context_isValid;
                m_context.push_back(item);
            }
        }
    }

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConnectivityIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectivityIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_context.size() > 0) {
        
        obj.insert(QString("context"), toJsonValue(m_context));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QMap> OAIConnectivityIssue::getContext() const {
    return m_context;
}
void OAIConnectivityIssue::setContext(const QList<QMap> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIConnectivityIssue::is_context_Set() const{
    return m_context_isSet;
}

bool OAIConnectivityIssue::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIConnectivityIssue::getOrigin() const {
    return m_origin;
}
void OAIConnectivityIssue::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIConnectivityIssue::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIConnectivityIssue::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIConnectivityIssue::getSeverity() const {
    return m_severity;
}
void OAIConnectivityIssue::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIConnectivityIssue::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIConnectivityIssue::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIConnectivityIssue::getType() const {
    return m_type;
}
void OAIConnectivityIssue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnectivityIssue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnectivityIssue::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConnectivityIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectivityIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
