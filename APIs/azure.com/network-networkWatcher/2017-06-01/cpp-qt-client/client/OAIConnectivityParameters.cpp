/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectivityParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectivityParameters::OAIConnectivityParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectivityParameters::OAIConnectivityParameters() {
    this->initializeModel();
}

OAIConnectivityParameters::~OAIConnectivityParameters() {}

void OAIConnectivityParameters::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIConnectivityParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectivityParameters::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIConnectivityParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectivityParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIConnectivityDestination OAIConnectivityParameters::getDestination() const {
    return m_destination;
}
void OAIConnectivityParameters::setDestination(const OAIConnectivityDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIConnectivityParameters::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIConnectivityParameters::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIConnectivitySource OAIConnectivityParameters::getSource() const {
    return m_source;
}
void OAIConnectivityParameters::setSource(const OAIConnectivitySource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIConnectivityParameters::is_source_Set() const{
    return m_source_isSet;
}

bool OAIConnectivityParameters::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIConnectivityParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectivityParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
