/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Effective network security rules.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:47.039946-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecurityRuleAssociationsEffectiveSecurityRulesInner {
  /**
   * Whether network traffic is allowed or denied. Possible values are: &#39;Allow&#39; and &#39;Deny&#39;.
   */
  @JsonAdapter(AccessEnum.Adapter.class)
  public enum AccessEnum {
    ALLOW("Allow"),
    
    DENY("Deny");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String value) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private AccessEnum access;

  public static final String SERIALIZED_NAME_DESTINATION_ADDRESS_PREFIX = "destinationAddressPrefix";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ADDRESS_PREFIX)
  private String destinationAddressPrefix;

  public static final String SERIALIZED_NAME_DESTINATION_ADDRESS_PREFIXES = "destinationAddressPrefixes";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ADDRESS_PREFIXES)
  private List<String> destinationAddressPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_PORT_RANGE = "destinationPortRange";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORT_RANGE)
  private String destinationPortRange;

  public static final String SERIALIZED_NAME_DESTINATION_PORT_RANGES = "destinationPortRanges";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORT_RANGES)
  private List<String> destinationPortRanges = new ArrayList<>();

  /**
   * The direction of the rule. Possible values are: &#39;Inbound and Outbound&#39;.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INBOUND("Inbound"),
    
    OUTBOUND("Outbound");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_EXPANDED_DESTINATION_ADDRESS_PREFIX = "expandedDestinationAddressPrefix";
  @SerializedName(SERIALIZED_NAME_EXPANDED_DESTINATION_ADDRESS_PREFIX)
  private List<String> expandedDestinationAddressPrefix = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPANDED_SOURCE_ADDRESS_PREFIX = "expandedSourceAddressPrefix";
  @SerializedName(SERIALIZED_NAME_EXPANDED_SOURCE_ADDRESS_PREFIX)
  private List<String> expandedSourceAddressPrefix = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  /**
   * The network protocol this rule applies to. Possible values are: &#39;Tcp&#39;, &#39;Udp&#39;, and &#39;All&#39;.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("Tcp"),
    
    UDP("Udp"),
    
    ALL("All");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_SOURCE_ADDRESS_PREFIX = "sourceAddressPrefix";
  @SerializedName(SERIALIZED_NAME_SOURCE_ADDRESS_PREFIX)
  private String sourceAddressPrefix;

  public static final String SERIALIZED_NAME_SOURCE_ADDRESS_PREFIXES = "sourceAddressPrefixes";
  @SerializedName(SERIALIZED_NAME_SOURCE_ADDRESS_PREFIXES)
  private List<String> sourceAddressPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_PORT_RANGE = "sourcePortRange";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORT_RANGE)
  private String sourcePortRange;

  public static final String SERIALIZED_NAME_SOURCE_PORT_RANGES = "sourcePortRanges";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORT_RANGES)
  private List<String> sourcePortRanges = new ArrayList<>();

  public SecurityRuleAssociationsEffectiveSecurityRulesInner() {
  }

  public SecurityRuleAssociationsEffectiveSecurityRulesInner access(AccessEnum access) {
    this.access = access;
    return this;
  }

  /**
   * Whether network traffic is allowed or denied. Possible values are: &#39;Allow&#39; and &#39;Deny&#39;.
   * @return access
   */
  @javax.annotation.Nullable
  public AccessEnum getAccess() {
    return access;
  }

  public void setAccess(AccessEnum access) {
    this.access = access;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner destinationAddressPrefix(String destinationAddressPrefix) {
    this.destinationAddressPrefix = destinationAddressPrefix;
    return this;
  }

  /**
   * The destination address prefix.
   * @return destinationAddressPrefix
   */
  @javax.annotation.Nullable
  public String getDestinationAddressPrefix() {
    return destinationAddressPrefix;
  }

  public void setDestinationAddressPrefix(String destinationAddressPrefix) {
    this.destinationAddressPrefix = destinationAddressPrefix;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner destinationAddressPrefixes(List<String> destinationAddressPrefixes) {
    this.destinationAddressPrefixes = destinationAddressPrefixes;
    return this;
  }

  public SecurityRuleAssociationsEffectiveSecurityRulesInner addDestinationAddressPrefixesItem(String destinationAddressPrefixesItem) {
    if (this.destinationAddressPrefixes == null) {
      this.destinationAddressPrefixes = new ArrayList<>();
    }
    this.destinationAddressPrefixes.add(destinationAddressPrefixesItem);
    return this;
  }

  /**
   * The destination address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
   * @return destinationAddressPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getDestinationAddressPrefixes() {
    return destinationAddressPrefixes;
  }

  public void setDestinationAddressPrefixes(List<String> destinationAddressPrefixes) {
    this.destinationAddressPrefixes = destinationAddressPrefixes;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner destinationPortRange(String destinationPortRange) {
    this.destinationPortRange = destinationPortRange;
    return this;
  }

  /**
   * The destination port or range.
   * @return destinationPortRange
   */
  @javax.annotation.Nullable
  public String getDestinationPortRange() {
    return destinationPortRange;
  }

  public void setDestinationPortRange(String destinationPortRange) {
    this.destinationPortRange = destinationPortRange;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner destinationPortRanges(List<String> destinationPortRanges) {
    this.destinationPortRanges = destinationPortRanges;
    return this;
  }

  public SecurityRuleAssociationsEffectiveSecurityRulesInner addDestinationPortRangesItem(String destinationPortRangesItem) {
    if (this.destinationPortRanges == null) {
      this.destinationPortRanges = new ArrayList<>();
    }
    this.destinationPortRanges.add(destinationPortRangesItem);
    return this;
  }

  /**
   * The destination port ranges. Expected values include a single integer between 0 and 65535, a range using &#39;-&#39; as separator (e.g. 100-400), or an asterisk (*)
   * @return destinationPortRanges
   */
  @javax.annotation.Nullable
  public List<String> getDestinationPortRanges() {
    return destinationPortRanges;
  }

  public void setDestinationPortRanges(List<String> destinationPortRanges) {
    this.destinationPortRanges = destinationPortRanges;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * The direction of the rule. Possible values are: &#39;Inbound and Outbound&#39;.
   * @return direction
   */
  @javax.annotation.Nullable
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner expandedDestinationAddressPrefix(List<String> expandedDestinationAddressPrefix) {
    this.expandedDestinationAddressPrefix = expandedDestinationAddressPrefix;
    return this;
  }

  public SecurityRuleAssociationsEffectiveSecurityRulesInner addExpandedDestinationAddressPrefixItem(String expandedDestinationAddressPrefixItem) {
    if (this.expandedDestinationAddressPrefix == null) {
      this.expandedDestinationAddressPrefix = new ArrayList<>();
    }
    this.expandedDestinationAddressPrefix.add(expandedDestinationAddressPrefixItem);
    return this;
  }

  /**
   * Expanded destination address prefix.
   * @return expandedDestinationAddressPrefix
   */
  @javax.annotation.Nullable
  public List<String> getExpandedDestinationAddressPrefix() {
    return expandedDestinationAddressPrefix;
  }

  public void setExpandedDestinationAddressPrefix(List<String> expandedDestinationAddressPrefix) {
    this.expandedDestinationAddressPrefix = expandedDestinationAddressPrefix;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner expandedSourceAddressPrefix(List<String> expandedSourceAddressPrefix) {
    this.expandedSourceAddressPrefix = expandedSourceAddressPrefix;
    return this;
  }

  public SecurityRuleAssociationsEffectiveSecurityRulesInner addExpandedSourceAddressPrefixItem(String expandedSourceAddressPrefixItem) {
    if (this.expandedSourceAddressPrefix == null) {
      this.expandedSourceAddressPrefix = new ArrayList<>();
    }
    this.expandedSourceAddressPrefix.add(expandedSourceAddressPrefixItem);
    return this;
  }

  /**
   * The expanded source address prefix.
   * @return expandedSourceAddressPrefix
   */
  @javax.annotation.Nullable
  public List<String> getExpandedSourceAddressPrefix() {
    return expandedSourceAddressPrefix;
  }

  public void setExpandedSourceAddressPrefix(List<String> expandedSourceAddressPrefix) {
    this.expandedSourceAddressPrefix = expandedSourceAddressPrefix;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the security rule specified by the user (if created by the user).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The priority of the rule.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The network protocol this rule applies to. Possible values are: &#39;Tcp&#39;, &#39;Udp&#39;, and &#39;All&#39;.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner sourceAddressPrefix(String sourceAddressPrefix) {
    this.sourceAddressPrefix = sourceAddressPrefix;
    return this;
  }

  /**
   * The source address prefix.
   * @return sourceAddressPrefix
   */
  @javax.annotation.Nullable
  public String getSourceAddressPrefix() {
    return sourceAddressPrefix;
  }

  public void setSourceAddressPrefix(String sourceAddressPrefix) {
    this.sourceAddressPrefix = sourceAddressPrefix;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner sourceAddressPrefixes(List<String> sourceAddressPrefixes) {
    this.sourceAddressPrefixes = sourceAddressPrefixes;
    return this;
  }

  public SecurityRuleAssociationsEffectiveSecurityRulesInner addSourceAddressPrefixesItem(String sourceAddressPrefixesItem) {
    if (this.sourceAddressPrefixes == null) {
      this.sourceAddressPrefixes = new ArrayList<>();
    }
    this.sourceAddressPrefixes.add(sourceAddressPrefixesItem);
    return this;
  }

  /**
   * The source address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
   * @return sourceAddressPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getSourceAddressPrefixes() {
    return sourceAddressPrefixes;
  }

  public void setSourceAddressPrefixes(List<String> sourceAddressPrefixes) {
    this.sourceAddressPrefixes = sourceAddressPrefixes;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner sourcePortRange(String sourcePortRange) {
    this.sourcePortRange = sourcePortRange;
    return this;
  }

  /**
   * The source port or range.
   * @return sourcePortRange
   */
  @javax.annotation.Nullable
  public String getSourcePortRange() {
    return sourcePortRange;
  }

  public void setSourcePortRange(String sourcePortRange) {
    this.sourcePortRange = sourcePortRange;
  }


  public SecurityRuleAssociationsEffectiveSecurityRulesInner sourcePortRanges(List<String> sourcePortRanges) {
    this.sourcePortRanges = sourcePortRanges;
    return this;
  }

  public SecurityRuleAssociationsEffectiveSecurityRulesInner addSourcePortRangesItem(String sourcePortRangesItem) {
    if (this.sourcePortRanges == null) {
      this.sourcePortRanges = new ArrayList<>();
    }
    this.sourcePortRanges.add(sourcePortRangesItem);
    return this;
  }

  /**
   * The source port ranges. Expected values include a single integer between 0 and 65535, a range using &#39;-&#39; as separator (e.g. 100-400), or an asterisk (*)
   * @return sourcePortRanges
   */
  @javax.annotation.Nullable
  public List<String> getSourcePortRanges() {
    return sourcePortRanges;
  }

  public void setSourcePortRanges(List<String> sourcePortRanges) {
    this.sourcePortRanges = sourcePortRanges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityRuleAssociationsEffectiveSecurityRulesInner securityRuleAssociationsEffectiveSecurityRulesInner = (SecurityRuleAssociationsEffectiveSecurityRulesInner) o;
    return Objects.equals(this.access, securityRuleAssociationsEffectiveSecurityRulesInner.access) &&
        Objects.equals(this.destinationAddressPrefix, securityRuleAssociationsEffectiveSecurityRulesInner.destinationAddressPrefix) &&
        Objects.equals(this.destinationAddressPrefixes, securityRuleAssociationsEffectiveSecurityRulesInner.destinationAddressPrefixes) &&
        Objects.equals(this.destinationPortRange, securityRuleAssociationsEffectiveSecurityRulesInner.destinationPortRange) &&
        Objects.equals(this.destinationPortRanges, securityRuleAssociationsEffectiveSecurityRulesInner.destinationPortRanges) &&
        Objects.equals(this.direction, securityRuleAssociationsEffectiveSecurityRulesInner.direction) &&
        Objects.equals(this.expandedDestinationAddressPrefix, securityRuleAssociationsEffectiveSecurityRulesInner.expandedDestinationAddressPrefix) &&
        Objects.equals(this.expandedSourceAddressPrefix, securityRuleAssociationsEffectiveSecurityRulesInner.expandedSourceAddressPrefix) &&
        Objects.equals(this.name, securityRuleAssociationsEffectiveSecurityRulesInner.name) &&
        Objects.equals(this.priority, securityRuleAssociationsEffectiveSecurityRulesInner.priority) &&
        Objects.equals(this.protocol, securityRuleAssociationsEffectiveSecurityRulesInner.protocol) &&
        Objects.equals(this.sourceAddressPrefix, securityRuleAssociationsEffectiveSecurityRulesInner.sourceAddressPrefix) &&
        Objects.equals(this.sourceAddressPrefixes, securityRuleAssociationsEffectiveSecurityRulesInner.sourceAddressPrefixes) &&
        Objects.equals(this.sourcePortRange, securityRuleAssociationsEffectiveSecurityRulesInner.sourcePortRange) &&
        Objects.equals(this.sourcePortRanges, securityRuleAssociationsEffectiveSecurityRulesInner.sourcePortRanges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, destinationAddressPrefix, destinationAddressPrefixes, destinationPortRange, destinationPortRanges, direction, expandedDestinationAddressPrefix, expandedSourceAddressPrefix, name, priority, protocol, sourceAddressPrefix, sourceAddressPrefixes, sourcePortRange, sourcePortRanges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityRuleAssociationsEffectiveSecurityRulesInner {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    destinationAddressPrefix: ").append(toIndentedString(destinationAddressPrefix)).append("\n");
    sb.append("    destinationAddressPrefixes: ").append(toIndentedString(destinationAddressPrefixes)).append("\n");
    sb.append("    destinationPortRange: ").append(toIndentedString(destinationPortRange)).append("\n");
    sb.append("    destinationPortRanges: ").append(toIndentedString(destinationPortRanges)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    expandedDestinationAddressPrefix: ").append(toIndentedString(expandedDestinationAddressPrefix)).append("\n");
    sb.append("    expandedSourceAddressPrefix: ").append(toIndentedString(expandedSourceAddressPrefix)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sourceAddressPrefix: ").append(toIndentedString(sourceAddressPrefix)).append("\n");
    sb.append("    sourceAddressPrefixes: ").append(toIndentedString(sourceAddressPrefixes)).append("\n");
    sb.append("    sourcePortRange: ").append(toIndentedString(sourcePortRange)).append("\n");
    sb.append("    sourcePortRanges: ").append(toIndentedString(sourcePortRanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("destinationAddressPrefix");
    openapiFields.add("destinationAddressPrefixes");
    openapiFields.add("destinationPortRange");
    openapiFields.add("destinationPortRanges");
    openapiFields.add("direction");
    openapiFields.add("expandedDestinationAddressPrefix");
    openapiFields.add("expandedSourceAddressPrefix");
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("protocol");
    openapiFields.add("sourceAddressPrefix");
    openapiFields.add("sourceAddressPrefixes");
    openapiFields.add("sourcePortRange");
    openapiFields.add("sourcePortRanges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecurityRuleAssociationsEffectiveSecurityRulesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityRuleAssociationsEffectiveSecurityRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityRuleAssociationsEffectiveSecurityRulesInner is not found in the empty JSON string", SecurityRuleAssociationsEffectiveSecurityRulesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityRuleAssociationsEffectiveSecurityRulesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityRuleAssociationsEffectiveSecurityRulesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull()) && !jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // validate the optional field `access`
      if (jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull()) {
        AccessEnum.validateJsonElement(jsonObj.get("access"));
      }
      if ((jsonObj.get("destinationAddressPrefix") != null && !jsonObj.get("destinationAddressPrefix").isJsonNull()) && !jsonObj.get("destinationAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAddressPrefix").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationAddressPrefixes") != null && !jsonObj.get("destinationAddressPrefixes").isJsonNull() && !jsonObj.get("destinationAddressPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAddressPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("destinationAddressPrefixes").toString()));
      }
      if ((jsonObj.get("destinationPortRange") != null && !jsonObj.get("destinationPortRange").isJsonNull()) && !jsonObj.get("destinationPortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationPortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationPortRange").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationPortRanges") != null && !jsonObj.get("destinationPortRanges").isJsonNull() && !jsonObj.get("destinationPortRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationPortRanges` to be an array in the JSON string but got `%s`", jsonObj.get("destinationPortRanges").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expandedDestinationAddressPrefix") != null && !jsonObj.get("expandedDestinationAddressPrefix").isJsonNull() && !jsonObj.get("expandedDestinationAddressPrefix").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expandedDestinationAddressPrefix` to be an array in the JSON string but got `%s`", jsonObj.get("expandedDestinationAddressPrefix").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expandedSourceAddressPrefix") != null && !jsonObj.get("expandedSourceAddressPrefix").isJsonNull() && !jsonObj.get("expandedSourceAddressPrefix").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expandedSourceAddressPrefix` to be an array in the JSON string but got `%s`", jsonObj.get("expandedSourceAddressPrefix").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("sourceAddressPrefix") != null && !jsonObj.get("sourceAddressPrefix").isJsonNull()) && !jsonObj.get("sourceAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAddressPrefix").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceAddressPrefixes") != null && !jsonObj.get("sourceAddressPrefixes").isJsonNull() && !jsonObj.get("sourceAddressPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAddressPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("sourceAddressPrefixes").toString()));
      }
      if ((jsonObj.get("sourcePortRange") != null && !jsonObj.get("sourcePortRange").isJsonNull()) && !jsonObj.get("sourcePortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePortRange").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourcePortRanges") != null && !jsonObj.get("sourcePortRanges").isJsonNull() && !jsonObj.get("sourcePortRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePortRanges` to be an array in the JSON string but got `%s`", jsonObj.get("sourcePortRanges").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityRuleAssociationsEffectiveSecurityRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityRuleAssociationsEffectiveSecurityRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityRuleAssociationsEffectiveSecurityRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityRuleAssociationsEffectiveSecurityRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityRuleAssociationsEffectiveSecurityRulesInner>() {
           @Override
           public void write(JsonWriter out, SecurityRuleAssociationsEffectiveSecurityRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityRuleAssociationsEffectiveSecurityRulesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecurityRuleAssociationsEffectiveSecurityRulesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecurityRuleAssociationsEffectiveSecurityRulesInner
   * @throws IOException if the JSON string is invalid with respect to SecurityRuleAssociationsEffectiveSecurityRulesInner
   */
  public static SecurityRuleAssociationsEffectiveSecurityRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityRuleAssociationsEffectiveSecurityRulesInner.class);
  }

  /**
   * Convert an instance of SecurityRuleAssociationsEffectiveSecurityRulesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

