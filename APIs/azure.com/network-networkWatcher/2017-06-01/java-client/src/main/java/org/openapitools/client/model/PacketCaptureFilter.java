/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filter that is applied to packet capture request. Multiple filters can be applied.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:47.039946-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PacketCaptureFilter {
  public static final String SERIALIZED_NAME_LOCAL_I_P_ADDRESS = "localIPAddress";
  @SerializedName(SERIALIZED_NAME_LOCAL_I_P_ADDRESS)
  private String localIPAddress;

  public static final String SERIALIZED_NAME_LOCAL_PORT = "localPort";
  @SerializedName(SERIALIZED_NAME_LOCAL_PORT)
  private String localPort;

  /**
   * Protocol to be filtered on.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("TCP"),
    
    UDP("UDP"),
    
    ANY("Any");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol = ProtocolEnum.ANY;

  public static final String SERIALIZED_NAME_REMOTE_I_P_ADDRESS = "remoteIPAddress";
  @SerializedName(SERIALIZED_NAME_REMOTE_I_P_ADDRESS)
  private String remoteIPAddress;

  public static final String SERIALIZED_NAME_REMOTE_PORT = "remotePort";
  @SerializedName(SERIALIZED_NAME_REMOTE_PORT)
  private String remotePort;

  public PacketCaptureFilter() {
  }

  public PacketCaptureFilter localIPAddress(String localIPAddress) {
    this.localIPAddress = localIPAddress;
    return this;
  }

  /**
   * Local IP Address to be filtered on. Notation: \&quot;127.0.0.1\&quot; for single address entry. \&quot;127.0.0.1-127.0.0.255\&quot; for range. \&quot;127.0.0.1;127.0.0.5\&quot;? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default &#x3D; null.
   * @return localIPAddress
   */
  @javax.annotation.Nullable
  public String getLocalIPAddress() {
    return localIPAddress;
  }

  public void setLocalIPAddress(String localIPAddress) {
    this.localIPAddress = localIPAddress;
  }


  public PacketCaptureFilter localPort(String localPort) {
    this.localPort = localPort;
    return this;
  }

  /**
   * Local port to be filtered on. Notation: \&quot;80\&quot; for single port entry.\&quot;80-85\&quot; for range. \&quot;80;443;\&quot; for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default &#x3D; null.
   * @return localPort
   */
  @javax.annotation.Nullable
  public String getLocalPort() {
    return localPort;
  }

  public void setLocalPort(String localPort) {
    this.localPort = localPort;
  }


  public PacketCaptureFilter protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Protocol to be filtered on.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public PacketCaptureFilter remoteIPAddress(String remoteIPAddress) {
    this.remoteIPAddress = remoteIPAddress;
    return this;
  }

  /**
   * Local IP Address to be filtered on. Notation: \&quot;127.0.0.1\&quot; for single address entry. \&quot;127.0.0.1-127.0.0.255\&quot; for range. \&quot;127.0.0.1;127.0.0.5;\&quot; for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default &#x3D; null.
   * @return remoteIPAddress
   */
  @javax.annotation.Nullable
  public String getRemoteIPAddress() {
    return remoteIPAddress;
  }

  public void setRemoteIPAddress(String remoteIPAddress) {
    this.remoteIPAddress = remoteIPAddress;
  }


  public PacketCaptureFilter remotePort(String remotePort) {
    this.remotePort = remotePort;
    return this;
  }

  /**
   * Remote port to be filtered on. Notation: \&quot;80\&quot; for single port entry.\&quot;80-85\&quot; for range. \&quot;80;443;\&quot; for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default &#x3D; null.
   * @return remotePort
   */
  @javax.annotation.Nullable
  public String getRemotePort() {
    return remotePort;
  }

  public void setRemotePort(String remotePort) {
    this.remotePort = remotePort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PacketCaptureFilter packetCaptureFilter = (PacketCaptureFilter) o;
    return Objects.equals(this.localIPAddress, packetCaptureFilter.localIPAddress) &&
        Objects.equals(this.localPort, packetCaptureFilter.localPort) &&
        Objects.equals(this.protocol, packetCaptureFilter.protocol) &&
        Objects.equals(this.remoteIPAddress, packetCaptureFilter.remoteIPAddress) &&
        Objects.equals(this.remotePort, packetCaptureFilter.remotePort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localIPAddress, localPort, protocol, remoteIPAddress, remotePort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PacketCaptureFilter {\n");
    sb.append("    localIPAddress: ").append(toIndentedString(localIPAddress)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    remoteIPAddress: ").append(toIndentedString(remoteIPAddress)).append("\n");
    sb.append("    remotePort: ").append(toIndentedString(remotePort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localIPAddress");
    openapiFields.add("localPort");
    openapiFields.add("protocol");
    openapiFields.add("remoteIPAddress");
    openapiFields.add("remotePort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PacketCaptureFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PacketCaptureFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PacketCaptureFilter is not found in the empty JSON string", PacketCaptureFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PacketCaptureFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PacketCaptureFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("localIPAddress") != null && !jsonObj.get("localIPAddress").isJsonNull()) && !jsonObj.get("localIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localIPAddress").toString()));
      }
      if ((jsonObj.get("localPort") != null && !jsonObj.get("localPort").isJsonNull()) && !jsonObj.get("localPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localPort").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("remoteIPAddress") != null && !jsonObj.get("remoteIPAddress").isJsonNull()) && !jsonObj.get("remoteIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteIPAddress").toString()));
      }
      if ((jsonObj.get("remotePort") != null && !jsonObj.get("remotePort").isJsonNull()) && !jsonObj.get("remotePort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remotePort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remotePort").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PacketCaptureFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PacketCaptureFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PacketCaptureFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PacketCaptureFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<PacketCaptureFilter>() {
           @Override
           public void write(JsonWriter out, PacketCaptureFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PacketCaptureFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PacketCaptureFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PacketCaptureFilter
   * @throws IOException if the JSON string is invalid with respect to PacketCaptureFilter
   */
  public static PacketCaptureFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PacketCaptureFilter.class);
  }

  /**
   * Convert an instance of PacketCaptureFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

