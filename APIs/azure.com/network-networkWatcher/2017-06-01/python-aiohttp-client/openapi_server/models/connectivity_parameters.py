# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connectivity_destination import ConnectivityDestination
from openapi_server.models.connectivity_source import ConnectivitySource
from openapi_server import util


class ConnectivityParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: ConnectivityDestination=None, source: ConnectivitySource=None):
        """ConnectivityParameters - a model defined in OpenAPI

        :param destination: The destination of this ConnectivityParameters.
        :param source: The source of this ConnectivityParameters.
        """
        self.openapi_types = {
            'destination': ConnectivityDestination,
            'source': ConnectivitySource
        }

        self.attribute_map = {
            'destination': 'destination',
            'source': 'source'
        }

        self._destination = destination
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectivityParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectivityParameters of this ConnectivityParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this ConnectivityParameters.


        :return: The destination of this ConnectivityParameters.
        :rtype: ConnectivityDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ConnectivityParameters.


        :param destination: The destination of this ConnectivityParameters.
        :type destination: ConnectivityDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def source(self):
        """Gets the source of this ConnectivityParameters.


        :return: The source of this ConnectivityParameters.
        :rtype: ConnectivitySource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConnectivityParameters.


        :param source: The source of this ConnectivityParameters.
        :type source: ConnectivitySource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
