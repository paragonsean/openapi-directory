/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorSource::OAIConnectionMonitorSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorSource::OAIConnectionMonitorSource() {
    this->initializeModel();
}

OAIConnectionMonitorSource::~OAIConnectionMonitorSource() {}

void OAIConnectionMonitorSource::initializeModel() {

    m_port_isSet = false;
    m_port_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIConnectionMonitorSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorSource::fromJsonObject(QJsonObject json) {

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIConnectionMonitorSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorSource::asJsonObject() const {
    QJsonObject obj;
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

qint32 OAIConnectionMonitorSource::getPort() const {
    return m_port;
}
void OAIConnectionMonitorSource::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConnectionMonitorSource::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConnectionMonitorSource::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIConnectionMonitorSource::getResourceId() const {
    return m_resource_id;
}
void OAIConnectionMonitorSource::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIConnectionMonitorSource::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIConnectionMonitorSource::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIConnectionMonitorSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_id_isValid && true;
}

} // namespace OpenAPI
