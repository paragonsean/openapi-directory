/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectivityDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectivityDestination::OAIConnectivityDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectivityDestination::OAIConnectivityDestination() {
    this->initializeModel();
}

OAIConnectivityDestination::~OAIConnectivityDestination() {}

void OAIConnectivityDestination::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIConnectivityDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectivityDestination::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIConnectivityDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectivityDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAIConnectivityDestination::getAddress() const {
    return m_address;
}
void OAIConnectivityDestination::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIConnectivityDestination::is_address_Set() const{
    return m_address_isSet;
}

bool OAIConnectivityDestination::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIConnectivityDestination::getPort() const {
    return m_port;
}
void OAIConnectivityDestination::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConnectivityDestination::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConnectivityDestination::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIConnectivityDestination::getResourceId() const {
    return m_resource_id;
}
void OAIConnectivityDestination::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIConnectivityDestination::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIConnectivityDestination::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIConnectivityDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectivityDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
