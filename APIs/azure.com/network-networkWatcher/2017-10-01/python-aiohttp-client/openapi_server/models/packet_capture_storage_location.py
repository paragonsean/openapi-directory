# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PacketCaptureStorageLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_path: str=None, storage_id: str=None, storage_path: str=None):
        """PacketCaptureStorageLocation - a model defined in OpenAPI

        :param file_path: The file_path of this PacketCaptureStorageLocation.
        :param storage_id: The storage_id of this PacketCaptureStorageLocation.
        :param storage_path: The storage_path of this PacketCaptureStorageLocation.
        """
        self.openapi_types = {
            'file_path': str,
            'storage_id': str,
            'storage_path': str
        }

        self.attribute_map = {
            'file_path': 'filePath',
            'storage_id': 'storageId',
            'storage_path': 'storagePath'
        }

        self._file_path = file_path
        self._storage_id = storage_id
        self._storage_path = storage_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PacketCaptureStorageLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PacketCaptureStorageLocation of this PacketCaptureStorageLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self):
        """Gets the file_path of this PacketCaptureStorageLocation.

        A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if no storage ID is provided, otherwise optional.

        :return: The file_path of this PacketCaptureStorageLocation.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this PacketCaptureStorageLocation.

        A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if no storage ID is provided, otherwise optional.

        :param file_path: The file_path of this PacketCaptureStorageLocation.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def storage_id(self):
        """Gets the storage_id of this PacketCaptureStorageLocation.

        The ID of the storage account to save the packet capture session. Required if no local file path is provided.

        :return: The storage_id of this PacketCaptureStorageLocation.
        :rtype: str
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this PacketCaptureStorageLocation.

        The ID of the storage account to save the packet capture session. Required if no local file path is provided.

        :param storage_id: The storage_id of this PacketCaptureStorageLocation.
        :type storage_id: str
        """

        self._storage_id = storage_id

    @property
    def storage_path(self):
        """Gets the storage_path of this PacketCaptureStorageLocation.

        The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.

        :return: The storage_path of this PacketCaptureStorageLocation.
        :rtype: str
        """
        return self._storage_path

    @storage_path.setter
    def storage_path(self, storage_path):
        """Sets the storage_path of this PacketCaptureStorageLocation.

        The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.

        :param storage_path: The storage_path of this PacketCaptureStorageLocation.
        :type storage_path: str
        """

        self._storage_path = storage_path
