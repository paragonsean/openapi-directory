/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that define the source and destination endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:58.788087-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NextHopParameters {
  public static final String SERIALIZED_NAME_DESTINATION_I_P_ADDRESS = "destinationIPAddress";
  @SerializedName(SERIALIZED_NAME_DESTINATION_I_P_ADDRESS)
  private String destinationIPAddress;

  public static final String SERIALIZED_NAME_SOURCE_I_P_ADDRESS = "sourceIPAddress";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_P_ADDRESS)
  private String sourceIPAddress;

  public static final String SERIALIZED_NAME_TARGET_NIC_RESOURCE_ID = "targetNicResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_NIC_RESOURCE_ID)
  private String targetNicResourceId;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_ID = "targetResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_ID)
  private String targetResourceId;

  public NextHopParameters() {
  }

  public NextHopParameters destinationIPAddress(String destinationIPAddress) {
    this.destinationIPAddress = destinationIPAddress;
    return this;
  }

  /**
   * The destination IP address.
   * @return destinationIPAddress
   */
  @javax.annotation.Nonnull
  public String getDestinationIPAddress() {
    return destinationIPAddress;
  }

  public void setDestinationIPAddress(String destinationIPAddress) {
    this.destinationIPAddress = destinationIPAddress;
  }


  public NextHopParameters sourceIPAddress(String sourceIPAddress) {
    this.sourceIPAddress = sourceIPAddress;
    return this;
  }

  /**
   * The source IP address.
   * @return sourceIPAddress
   */
  @javax.annotation.Nonnull
  public String getSourceIPAddress() {
    return sourceIPAddress;
  }

  public void setSourceIPAddress(String sourceIPAddress) {
    this.sourceIPAddress = sourceIPAddress;
  }


  public NextHopParameters targetNicResourceId(String targetNicResourceId) {
    this.targetNicResourceId = targetNicResourceId;
    return this;
  }

  /**
   * The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of the nics, then this parameter must be specified. Otherwise optional).
   * @return targetNicResourceId
   */
  @javax.annotation.Nullable
  public String getTargetNicResourceId() {
    return targetNicResourceId;
  }

  public void setTargetNicResourceId(String targetNicResourceId) {
    this.targetNicResourceId = targetNicResourceId;
  }


  public NextHopParameters targetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
    return this;
  }

  /**
   * The resource identifier of the target resource against which the action is to be performed.
   * @return targetResourceId
   */
  @javax.annotation.Nonnull
  public String getTargetResourceId() {
    return targetResourceId;
  }

  public void setTargetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NextHopParameters nextHopParameters = (NextHopParameters) o;
    return Objects.equals(this.destinationIPAddress, nextHopParameters.destinationIPAddress) &&
        Objects.equals(this.sourceIPAddress, nextHopParameters.sourceIPAddress) &&
        Objects.equals(this.targetNicResourceId, nextHopParameters.targetNicResourceId) &&
        Objects.equals(this.targetResourceId, nextHopParameters.targetResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationIPAddress, sourceIPAddress, targetNicResourceId, targetResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NextHopParameters {\n");
    sb.append("    destinationIPAddress: ").append(toIndentedString(destinationIPAddress)).append("\n");
    sb.append("    sourceIPAddress: ").append(toIndentedString(sourceIPAddress)).append("\n");
    sb.append("    targetNicResourceId: ").append(toIndentedString(targetNicResourceId)).append("\n");
    sb.append("    targetResourceId: ").append(toIndentedString(targetResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationIPAddress");
    openapiFields.add("sourceIPAddress");
    openapiFields.add("targetNicResourceId");
    openapiFields.add("targetResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationIPAddress");
    openapiRequiredFields.add("sourceIPAddress");
    openapiRequiredFields.add("targetResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NextHopParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NextHopParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NextHopParameters is not found in the empty JSON string", NextHopParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NextHopParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NextHopParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NextHopParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("destinationIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationIPAddress").toString()));
      }
      if (!jsonObj.get("sourceIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIPAddress").toString()));
      }
      if ((jsonObj.get("targetNicResourceId") != null && !jsonObj.get("targetNicResourceId").isJsonNull()) && !jsonObj.get("targetNicResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNicResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNicResourceId").toString()));
      }
      if (!jsonObj.get("targetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NextHopParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NextHopParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NextHopParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NextHopParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<NextHopParameters>() {
           @Override
           public void write(JsonWriter out, NextHopParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NextHopParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NextHopParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NextHopParameters
   * @throws IOException if the JSON string is invalid with respect to NextHopParameters
   */
  public static NextHopParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NextHopParameters.class);
  }

  /**
   * Convert an instance of NextHopParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

