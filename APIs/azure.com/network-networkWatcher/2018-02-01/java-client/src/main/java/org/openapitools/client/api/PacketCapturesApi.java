/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PacketCapture;
import org.openapitools.client.model.PacketCaptureListResult;
import org.openapitools.client.model.PacketCaptureQueryStatusResult;
import org.openapitools.client.model.PacketCaptureResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PacketCapturesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PacketCapturesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PacketCapturesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for packetCapturesCreate
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the create packet capture operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request successful. The operation returns the resulting packet capture session. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesCreateCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, PacketCapture parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "packetCaptureName" + "}", localVarApiClient.escapeString(packetCaptureName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packetCapturesCreateValidateBeforeCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, PacketCapture parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling packetCapturesCreate(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling packetCapturesCreate(Async)");
        }

        // verify the required parameter 'packetCaptureName' is set
        if (packetCaptureName == null) {
            throw new ApiException("Missing the required parameter 'packetCaptureName' when calling packetCapturesCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling packetCapturesCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling packetCapturesCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling packetCapturesCreate(Async)");
        }

        return packetCapturesCreateCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Create and start a packet capture on the specified VM.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the create packet capture operation. (required)
     * @return PacketCaptureResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request successful. The operation returns the resulting packet capture session. </td><td>  -  </td></tr>
     </table>
     */
    public PacketCaptureResult packetCapturesCreate(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, PacketCapture parameters) throws ApiException {
        ApiResponse<PacketCaptureResult> localVarResp = packetCapturesCreateWithHttpInfo(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create and start a packet capture on the specified VM.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the create packet capture operation. (required)
     * @return ApiResponse&lt;PacketCaptureResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request successful. The operation returns the resulting packet capture session. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PacketCaptureResult> packetCapturesCreateWithHttpInfo(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, PacketCapture parameters) throws ApiException {
        okhttp3.Call localVarCall = packetCapturesCreateValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<PacketCaptureResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create and start a packet capture on the specified VM.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the create packet capture operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request successful. The operation returns the resulting packet capture session. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesCreateAsync(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, PacketCapture parameters, final ApiCallback<PacketCaptureResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = packetCapturesCreateValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<PacketCaptureResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packetCapturesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesDeleteCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "packetCaptureName" + "}", localVarApiClient.escapeString(packetCaptureName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packetCapturesDeleteValidateBeforeCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling packetCapturesDelete(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling packetCapturesDelete(Async)");
        }

        // verify the required parameter 'packetCaptureName' is set
        if (packetCaptureName == null) {
            throw new ApiException("Missing the required parameter 'packetCaptureName' when calling packetCapturesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling packetCapturesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling packetCapturesDelete(Async)");
        }

        return packetCapturesDeleteCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public void packetCapturesDelete(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId) throws ApiException {
        packetCapturesDeleteWithHttpInfo(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> packetCapturesDeleteWithHttpInfo(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = packetCapturesDeleteValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesDeleteAsync(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = packetCapturesDeleteValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for packetCapturesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a packet capture session. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesGetCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "packetCaptureName" + "}", localVarApiClient.escapeString(packetCaptureName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packetCapturesGetValidateBeforeCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling packetCapturesGet(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling packetCapturesGet(Async)");
        }

        // verify the required parameter 'packetCaptureName' is set
        if (packetCaptureName == null) {
            throw new ApiException("Missing the required parameter 'packetCaptureName' when calling packetCapturesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling packetCapturesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling packetCapturesGet(Async)");
        }

        return packetCapturesGetCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a packet capture session by name.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PacketCaptureResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a packet capture session. </td><td>  -  </td></tr>
     </table>
     */
    public PacketCaptureResult packetCapturesGet(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PacketCaptureResult> localVarResp = packetCapturesGetWithHttpInfo(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a packet capture session by name.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PacketCaptureResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a packet capture session. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PacketCaptureResult> packetCapturesGetWithHttpInfo(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = packetCapturesGetValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PacketCaptureResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a packet capture session by name.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a packet capture session. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesGetAsync(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback<PacketCaptureResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = packetCapturesGetValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PacketCaptureResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packetCapturesGetStatus
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param packetCaptureName The name given to the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query of packet capture status. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted query status of packet capture. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesGetStatusCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/queryStatus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "packetCaptureName" + "}", localVarApiClient.escapeString(packetCaptureName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packetCapturesGetStatusValidateBeforeCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling packetCapturesGetStatus(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling packetCapturesGetStatus(Async)");
        }

        // verify the required parameter 'packetCaptureName' is set
        if (packetCaptureName == null) {
            throw new ApiException("Missing the required parameter 'packetCaptureName' when calling packetCapturesGetStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling packetCapturesGetStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling packetCapturesGetStatus(Async)");
        }

        return packetCapturesGetStatusCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Query the status of a running packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param packetCaptureName The name given to the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PacketCaptureQueryStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query of packet capture status. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted query status of packet capture. </td><td>  -  </td></tr>
     </table>
     */
    public PacketCaptureQueryStatusResult packetCapturesGetStatus(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PacketCaptureQueryStatusResult> localVarResp = packetCapturesGetStatusWithHttpInfo(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Query the status of a running packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param packetCaptureName The name given to the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PacketCaptureQueryStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query of packet capture status. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted query status of packet capture. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PacketCaptureQueryStatusResult> packetCapturesGetStatusWithHttpInfo(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = packetCapturesGetStatusValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PacketCaptureQueryStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query the status of a running packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param packetCaptureName The name given to the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query of packet capture status. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted query status of packet capture. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesGetStatusAsync(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback<PacketCaptureQueryStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = packetCapturesGetStatusValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PacketCaptureQueryStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packetCapturesList
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful packet capture enumeration request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesListCall(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packetCapturesListValidateBeforeCall(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling packetCapturesList(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling packetCapturesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling packetCapturesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling packetCapturesList(Async)");
        }

        return packetCapturesListCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all packet capture sessions within the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PacketCaptureListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful packet capture enumeration request. </td><td>  -  </td></tr>
     </table>
     */
    public PacketCaptureListResult packetCapturesList(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PacketCaptureListResult> localVarResp = packetCapturesListWithHttpInfo(resourceGroupName, networkWatcherName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all packet capture sessions within the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PacketCaptureListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful packet capture enumeration request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PacketCaptureListResult> packetCapturesListWithHttpInfo(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = packetCapturesListValidateBeforeCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PacketCaptureListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all packet capture sessions within the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful packet capture enumeration request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesListAsync(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback<PacketCaptureListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = packetCapturesListValidateBeforeCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PacketCaptureListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packetCapturesStop
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the packet capture session. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesStopCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "packetCaptureName" + "}", localVarApiClient.escapeString(packetCaptureName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packetCapturesStopValidateBeforeCall(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling packetCapturesStop(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling packetCapturesStop(Async)");
        }

        // verify the required parameter 'packetCaptureName' is set
        if (packetCaptureName == null) {
            throw new ApiException("Missing the required parameter 'packetCaptureName' when calling packetCapturesStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling packetCapturesStop(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling packetCapturesStop(Async)");
        }

        return packetCapturesStopCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Stops a specified packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the packet capture session. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public void packetCapturesStop(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId) throws ApiException {
        packetCapturesStopWithHttpInfo(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Stops a specified packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the packet capture session. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> packetCapturesStopWithHttpInfo(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = packetCapturesStopValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stops a specified packet capture session.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param packetCaptureName The name of the packet capture session. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the packet capture session. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packetCapturesStopAsync(String resourceGroupName, String networkWatcherName, String packetCaptureName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = packetCapturesStopValidateBeforeCall(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
