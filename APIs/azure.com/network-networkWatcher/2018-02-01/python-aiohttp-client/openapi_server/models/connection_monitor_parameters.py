# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_monitor_destination import ConnectionMonitorDestination
from openapi_server.models.connection_monitor_source import ConnectionMonitorSource
from openapi_server import util


class ConnectionMonitorParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_start: bool=True, destination: ConnectionMonitorDestination=None, monitoring_interval_in_seconds: int=None, source: ConnectionMonitorSource=None):
        """ConnectionMonitorParameters - a model defined in OpenAPI

        :param auto_start: The auto_start of this ConnectionMonitorParameters.
        :param destination: The destination of this ConnectionMonitorParameters.
        :param monitoring_interval_in_seconds: The monitoring_interval_in_seconds of this ConnectionMonitorParameters.
        :param source: The source of this ConnectionMonitorParameters.
        """
        self.openapi_types = {
            'auto_start': bool,
            'destination': ConnectionMonitorDestination,
            'monitoring_interval_in_seconds': int,
            'source': ConnectionMonitorSource
        }

        self.attribute_map = {
            'auto_start': 'autoStart',
            'destination': 'destination',
            'monitoring_interval_in_seconds': 'monitoringIntervalInSeconds',
            'source': 'source'
        }

        self._auto_start = auto_start
        self._destination = destination
        self._monitoring_interval_in_seconds = monitoring_interval_in_seconds
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorParameters of this ConnectionMonitorParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_start(self):
        """Gets the auto_start of this ConnectionMonitorParameters.

        Determines if the connection monitor will start automatically once created.

        :return: The auto_start of this ConnectionMonitorParameters.
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start):
        """Sets the auto_start of this ConnectionMonitorParameters.

        Determines if the connection monitor will start automatically once created.

        :param auto_start: The auto_start of this ConnectionMonitorParameters.
        :type auto_start: bool
        """

        self._auto_start = auto_start

    @property
    def destination(self):
        """Gets the destination of this ConnectionMonitorParameters.


        :return: The destination of this ConnectionMonitorParameters.
        :rtype: ConnectionMonitorDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ConnectionMonitorParameters.


        :param destination: The destination of this ConnectionMonitorParameters.
        :type destination: ConnectionMonitorDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def monitoring_interval_in_seconds(self):
        """Gets the monitoring_interval_in_seconds of this ConnectionMonitorParameters.

        Monitoring interval in seconds.

        :return: The monitoring_interval_in_seconds of this ConnectionMonitorParameters.
        :rtype: int
        """
        return self._monitoring_interval_in_seconds

    @monitoring_interval_in_seconds.setter
    def monitoring_interval_in_seconds(self, monitoring_interval_in_seconds):
        """Sets the monitoring_interval_in_seconds of this ConnectionMonitorParameters.

        Monitoring interval in seconds.

        :param monitoring_interval_in_seconds: The monitoring_interval_in_seconds of this ConnectionMonitorParameters.
        :type monitoring_interval_in_seconds: int
        """

        self._monitoring_interval_in_seconds = monitoring_interval_in_seconds

    @property
    def source(self):
        """Gets the source of this ConnectionMonitorParameters.


        :return: The source of this ConnectionMonitorParameters.
        :rtype: ConnectionMonitorSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConnectionMonitorParameters.


        :param source: The source of this ConnectionMonitorParameters.
        :type source: ConnectionMonitorSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
