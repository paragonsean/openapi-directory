/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHTTPConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHTTPConfiguration::OAIHTTPConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHTTPConfiguration::OAIHTTPConfiguration() {
    this->initializeModel();
}

OAIHTTPConfiguration::~OAIHTTPConfiguration() {}

void OAIHTTPConfiguration::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_valid_status_codes_isSet = false;
    m_valid_status_codes_isValid = false;
}

void OAIHTTPConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHTTPConfiguration::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_valid_status_codes_isValid = ::OpenAPI::fromJsonValue(m_valid_status_codes, json[QString("validStatusCodes")]);
    m_valid_status_codes_isSet = !json[QString("validStatusCodes")].isNull() && m_valid_status_codes_isValid;
}

QString OAIHTTPConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHTTPConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_valid_status_codes.size() > 0) {
        obj.insert(QString("validStatusCodes"), ::OpenAPI::toJsonValue(m_valid_status_codes));
    }
    return obj;
}

QList<OAIHTTPHeader> OAIHTTPConfiguration::getHeaders() const {
    return m_headers;
}
void OAIHTTPConfiguration::setHeaders(const QList<OAIHTTPHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIHTTPConfiguration::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIHTTPConfiguration::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIHTTPConfiguration::getMethod() const {
    return m_method;
}
void OAIHTTPConfiguration::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIHTTPConfiguration::is_method_Set() const{
    return m_method_isSet;
}

bool OAIHTTPConfiguration::is_method_Valid() const{
    return m_method_isValid;
}

QList<qint32> OAIHTTPConfiguration::getValidStatusCodes() const {
    return m_valid_status_codes;
}
void OAIHTTPConfiguration::setValidStatusCodes(const QList<qint32> &valid_status_codes) {
    m_valid_status_codes = valid_status_codes;
    m_valid_status_codes_isSet = true;
}

bool OAIHTTPConfiguration::is_valid_status_codes_Set() const{
    return m_valid_status_codes_isSet;
}

bool OAIHTTPConfiguration::is_valid_status_codes_Valid() const{
    return m_valid_status_codes_isValid;
}

bool OAIHTTPConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_status_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHTTPConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
