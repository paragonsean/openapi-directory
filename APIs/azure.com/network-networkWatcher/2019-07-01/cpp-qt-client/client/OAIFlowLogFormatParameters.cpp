/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowLogFormatParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowLogFormatParameters::OAIFlowLogFormatParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowLogFormatParameters::OAIFlowLogFormatParameters() {
    this->initializeModel();
}

OAIFlowLogFormatParameters::~OAIFlowLogFormatParameters() {}

void OAIFlowLogFormatParameters::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIFlowLogFormatParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlowLogFormatParameters::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIFlowLogFormatParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlowLogFormatParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIFlowLogFormatParameters::getType() const {
    return m_type;
}
void OAIFlowLogFormatParameters::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFlowLogFormatParameters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFlowLogFormatParameters::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIFlowLogFormatParameters::getVersion() const {
    return m_version;
}
void OAIFlowLogFormatParameters::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFlowLogFormatParameters::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFlowLogFormatParameters::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIFlowLogFormatParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlowLogFormatParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
