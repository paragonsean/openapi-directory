/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPacketCaptureFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPacketCaptureFilter::OAIPacketCaptureFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPacketCaptureFilter::OAIPacketCaptureFilter() {
    this->initializeModel();
}

OAIPacketCaptureFilter::~OAIPacketCaptureFilter() {}

void OAIPacketCaptureFilter::initializeModel() {

    m_local_ip_address_isSet = false;
    m_local_ip_address_isValid = false;

    m_local_port_isSet = false;
    m_local_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_remote_ip_address_isSet = false;
    m_remote_ip_address_isValid = false;

    m_remote_port_isSet = false;
    m_remote_port_isValid = false;
}

void OAIPacketCaptureFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPacketCaptureFilter::fromJsonObject(QJsonObject json) {

    m_local_ip_address_isValid = ::OpenAPI::fromJsonValue(m_local_ip_address, json[QString("localIPAddress")]);
    m_local_ip_address_isSet = !json[QString("localIPAddress")].isNull() && m_local_ip_address_isValid;

    m_local_port_isValid = ::OpenAPI::fromJsonValue(m_local_port, json[QString("localPort")]);
    m_local_port_isSet = !json[QString("localPort")].isNull() && m_local_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_remote_ip_address_isValid = ::OpenAPI::fromJsonValue(m_remote_ip_address, json[QString("remoteIPAddress")]);
    m_remote_ip_address_isSet = !json[QString("remoteIPAddress")].isNull() && m_remote_ip_address_isValid;

    m_remote_port_isValid = ::OpenAPI::fromJsonValue(m_remote_port, json[QString("remotePort")]);
    m_remote_port_isSet = !json[QString("remotePort")].isNull() && m_remote_port_isValid;
}

QString OAIPacketCaptureFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPacketCaptureFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_local_ip_address_isSet) {
        obj.insert(QString("localIPAddress"), ::OpenAPI::toJsonValue(m_local_ip_address));
    }
    if (m_local_port_isSet) {
        obj.insert(QString("localPort"), ::OpenAPI::toJsonValue(m_local_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_remote_ip_address_isSet) {
        obj.insert(QString("remoteIPAddress"), ::OpenAPI::toJsonValue(m_remote_ip_address));
    }
    if (m_remote_port_isSet) {
        obj.insert(QString("remotePort"), ::OpenAPI::toJsonValue(m_remote_port));
    }
    return obj;
}

QString OAIPacketCaptureFilter::getLocalIpAddress() const {
    return m_local_ip_address;
}
void OAIPacketCaptureFilter::setLocalIpAddress(const QString &local_ip_address) {
    m_local_ip_address = local_ip_address;
    m_local_ip_address_isSet = true;
}

bool OAIPacketCaptureFilter::is_local_ip_address_Set() const{
    return m_local_ip_address_isSet;
}

bool OAIPacketCaptureFilter::is_local_ip_address_Valid() const{
    return m_local_ip_address_isValid;
}

QString OAIPacketCaptureFilter::getLocalPort() const {
    return m_local_port;
}
void OAIPacketCaptureFilter::setLocalPort(const QString &local_port) {
    m_local_port = local_port;
    m_local_port_isSet = true;
}

bool OAIPacketCaptureFilter::is_local_port_Set() const{
    return m_local_port_isSet;
}

bool OAIPacketCaptureFilter::is_local_port_Valid() const{
    return m_local_port_isValid;
}

QString OAIPacketCaptureFilter::getProtocol() const {
    return m_protocol;
}
void OAIPacketCaptureFilter::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIPacketCaptureFilter::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIPacketCaptureFilter::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIPacketCaptureFilter::getRemoteIpAddress() const {
    return m_remote_ip_address;
}
void OAIPacketCaptureFilter::setRemoteIpAddress(const QString &remote_ip_address) {
    m_remote_ip_address = remote_ip_address;
    m_remote_ip_address_isSet = true;
}

bool OAIPacketCaptureFilter::is_remote_ip_address_Set() const{
    return m_remote_ip_address_isSet;
}

bool OAIPacketCaptureFilter::is_remote_ip_address_Valid() const{
    return m_remote_ip_address_isValid;
}

QString OAIPacketCaptureFilter::getRemotePort() const {
    return m_remote_port;
}
void OAIPacketCaptureFilter::setRemotePort(const QString &remote_port) {
    m_remote_port = remote_port;
    m_remote_port_isSet = true;
}

bool OAIPacketCaptureFilter::is_remote_port_Set() const{
    return m_remote_port_isSet;
}

bool OAIPacketCaptureFilter::is_remote_port_Valid() const{
    return m_remote_port_isValid;
}

bool OAIPacketCaptureFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_local_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPacketCaptureFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
