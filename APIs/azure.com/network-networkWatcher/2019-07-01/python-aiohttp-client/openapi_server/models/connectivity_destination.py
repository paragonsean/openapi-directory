# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectivityDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, port: int=None, resource_id: str=None):
        """ConnectivityDestination - a model defined in OpenAPI

        :param address: The address of this ConnectivityDestination.
        :param port: The port of this ConnectivityDestination.
        :param resource_id: The resource_id of this ConnectivityDestination.
        """
        self.openapi_types = {
            'address': str,
            'port': int,
            'resource_id': str
        }

        self.attribute_map = {
            'address': 'address',
            'port': 'port',
            'resource_id': 'resourceId'
        }

        self._address = address
        self._port = port
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectivityDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectivityDestination of this ConnectivityDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ConnectivityDestination.

        The IP address or URI the resource to which a connection attempt will be made.

        :return: The address of this ConnectivityDestination.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConnectivityDestination.

        The IP address or URI the resource to which a connection attempt will be made.

        :param address: The address of this ConnectivityDestination.
        :type address: str
        """

        self._address = address

    @property
    def port(self):
        """Gets the port of this ConnectivityDestination.

        Port on which check connectivity will be performed.

        :return: The port of this ConnectivityDestination.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConnectivityDestination.

        Port on which check connectivity will be performed.

        :param port: The port of this ConnectivityDestination.
        :type port: int
        """

        self._port = port

    @property
    def resource_id(self):
        """Gets the resource_id of this ConnectivityDestination.

        The ID of the resource to which a connection attempt will be made.

        :return: The resource_id of this ConnectivityDestination.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ConnectivityDestination.

        The ID of the resource to which a connection attempt will be made.

        :param resource_id: The resource_id of this ConnectivityDestination.
        :type resource_id: str
        """

        self._resource_id = resource_id
