# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkSecurityRulesEvaluationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_matched: bool=None, destination_port_matched: bool=None, name: str=None, protocol_matched: bool=None, source_matched: bool=None, source_port_matched: bool=None):
        """NetworkSecurityRulesEvaluationResult - a model defined in OpenAPI

        :param destination_matched: The destination_matched of this NetworkSecurityRulesEvaluationResult.
        :param destination_port_matched: The destination_port_matched of this NetworkSecurityRulesEvaluationResult.
        :param name: The name of this NetworkSecurityRulesEvaluationResult.
        :param protocol_matched: The protocol_matched of this NetworkSecurityRulesEvaluationResult.
        :param source_matched: The source_matched of this NetworkSecurityRulesEvaluationResult.
        :param source_port_matched: The source_port_matched of this NetworkSecurityRulesEvaluationResult.
        """
        self.openapi_types = {
            'destination_matched': bool,
            'destination_port_matched': bool,
            'name': str,
            'protocol_matched': bool,
            'source_matched': bool,
            'source_port_matched': bool
        }

        self.attribute_map = {
            'destination_matched': 'destinationMatched',
            'destination_port_matched': 'destinationPortMatched',
            'name': 'name',
            'protocol_matched': 'protocolMatched',
            'source_matched': 'sourceMatched',
            'source_port_matched': 'sourcePortMatched'
        }

        self._destination_matched = destination_matched
        self._destination_port_matched = destination_port_matched
        self._name = name
        self._protocol_matched = protocol_matched
        self._source_matched = source_matched
        self._source_port_matched = source_port_matched

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkSecurityRulesEvaluationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkSecurityRulesEvaluationResult of this NetworkSecurityRulesEvaluationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_matched(self):
        """Gets the destination_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether destination is matched.

        :return: The destination_matched of this NetworkSecurityRulesEvaluationResult.
        :rtype: bool
        """
        return self._destination_matched

    @destination_matched.setter
    def destination_matched(self, destination_matched):
        """Sets the destination_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether destination is matched.

        :param destination_matched: The destination_matched of this NetworkSecurityRulesEvaluationResult.
        :type destination_matched: bool
        """

        self._destination_matched = destination_matched

    @property
    def destination_port_matched(self):
        """Gets the destination_port_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether destination port is matched.

        :return: The destination_port_matched of this NetworkSecurityRulesEvaluationResult.
        :rtype: bool
        """
        return self._destination_port_matched

    @destination_port_matched.setter
    def destination_port_matched(self, destination_port_matched):
        """Sets the destination_port_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether destination port is matched.

        :param destination_port_matched: The destination_port_matched of this NetworkSecurityRulesEvaluationResult.
        :type destination_port_matched: bool
        """

        self._destination_port_matched = destination_port_matched

    @property
    def name(self):
        """Gets the name of this NetworkSecurityRulesEvaluationResult.

        Name of the network security rule.

        :return: The name of this NetworkSecurityRulesEvaluationResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkSecurityRulesEvaluationResult.

        Name of the network security rule.

        :param name: The name of this NetworkSecurityRulesEvaluationResult.
        :type name: str
        """

        self._name = name

    @property
    def protocol_matched(self):
        """Gets the protocol_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether protocol is matched.

        :return: The protocol_matched of this NetworkSecurityRulesEvaluationResult.
        :rtype: bool
        """
        return self._protocol_matched

    @protocol_matched.setter
    def protocol_matched(self, protocol_matched):
        """Sets the protocol_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether protocol is matched.

        :param protocol_matched: The protocol_matched of this NetworkSecurityRulesEvaluationResult.
        :type protocol_matched: bool
        """

        self._protocol_matched = protocol_matched

    @property
    def source_matched(self):
        """Gets the source_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether source is matched.

        :return: The source_matched of this NetworkSecurityRulesEvaluationResult.
        :rtype: bool
        """
        return self._source_matched

    @source_matched.setter
    def source_matched(self, source_matched):
        """Sets the source_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether source is matched.

        :param source_matched: The source_matched of this NetworkSecurityRulesEvaluationResult.
        :type source_matched: bool
        """

        self._source_matched = source_matched

    @property
    def source_port_matched(self):
        """Gets the source_port_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether source port is matched.

        :return: The source_port_matched of this NetworkSecurityRulesEvaluationResult.
        :rtype: bool
        """
        return self._source_port_matched

    @source_port_matched.setter
    def source_port_matched(self, source_port_matched):
        """Sets the source_port_matched of this NetworkSecurityRulesEvaluationResult.

        Value indicating whether source port is matched.

        :param source_port_matched: The source_port_matched of this NetworkSecurityRulesEvaluationResult.
        :type source_port_matched: bool
        """

        self._source_port_matched = source_port_matched
