# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server import util


class VerificationIPFlowParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: Direction=None, local_ip_address: str=None, local_port: str=None, protocol: str=None, remote_ip_address: str=None, remote_port: str=None, target_nic_resource_id: str=None, target_resource_id: str=None):
        """VerificationIPFlowParameters - a model defined in OpenAPI

        :param direction: The direction of this VerificationIPFlowParameters.
        :param local_ip_address: The local_ip_address of this VerificationIPFlowParameters.
        :param local_port: The local_port of this VerificationIPFlowParameters.
        :param protocol: The protocol of this VerificationIPFlowParameters.
        :param remote_ip_address: The remote_ip_address of this VerificationIPFlowParameters.
        :param remote_port: The remote_port of this VerificationIPFlowParameters.
        :param target_nic_resource_id: The target_nic_resource_id of this VerificationIPFlowParameters.
        :param target_resource_id: The target_resource_id of this VerificationIPFlowParameters.
        """
        self.openapi_types = {
            'direction': Direction,
            'local_ip_address': str,
            'local_port': str,
            'protocol': str,
            'remote_ip_address': str,
            'remote_port': str,
            'target_nic_resource_id': str,
            'target_resource_id': str
        }

        self.attribute_map = {
            'direction': 'direction',
            'local_ip_address': 'localIPAddress',
            'local_port': 'localPort',
            'protocol': 'protocol',
            'remote_ip_address': 'remoteIPAddress',
            'remote_port': 'remotePort',
            'target_nic_resource_id': 'targetNicResourceId',
            'target_resource_id': 'targetResourceId'
        }

        self._direction = direction
        self._local_ip_address = local_ip_address
        self._local_port = local_port
        self._protocol = protocol
        self._remote_ip_address = remote_ip_address
        self._remote_port = remote_port
        self._target_nic_resource_id = target_nic_resource_id
        self._target_resource_id = target_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerificationIPFlowParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerificationIPFlowParameters of this VerificationIPFlowParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this VerificationIPFlowParameters.


        :return: The direction of this VerificationIPFlowParameters.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this VerificationIPFlowParameters.


        :param direction: The direction of this VerificationIPFlowParameters.
        :type direction: Direction
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def local_ip_address(self):
        """Gets the local_ip_address of this VerificationIPFlowParameters.

        The local IP address. Acceptable values are valid IPv4 addresses.

        :return: The local_ip_address of this VerificationIPFlowParameters.
        :rtype: str
        """
        return self._local_ip_address

    @local_ip_address.setter
    def local_ip_address(self, local_ip_address):
        """Sets the local_ip_address of this VerificationIPFlowParameters.

        The local IP address. Acceptable values are valid IPv4 addresses.

        :param local_ip_address: The local_ip_address of this VerificationIPFlowParameters.
        :type local_ip_address: str
        """
        if local_ip_address is None:
            raise ValueError("Invalid value for `local_ip_address`, must not be `None`")

        self._local_ip_address = local_ip_address

    @property
    def local_port(self):
        """Gets the local_port of this VerificationIPFlowParameters.

        The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.

        :return: The local_port of this VerificationIPFlowParameters.
        :rtype: str
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this VerificationIPFlowParameters.

        The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.

        :param local_port: The local_port of this VerificationIPFlowParameters.
        :type local_port: str
        """
        if local_port is None:
            raise ValueError("Invalid value for `local_port`, must not be `None`")

        self._local_port = local_port

    @property
    def protocol(self):
        """Gets the protocol of this VerificationIPFlowParameters.

        Protocol to be verified on.

        :return: The protocol of this VerificationIPFlowParameters.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this VerificationIPFlowParameters.

        Protocol to be verified on.

        :param protocol: The protocol of this VerificationIPFlowParameters.
        :type protocol: str
        """
        allowed_values = ["TCP", "UDP"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def remote_ip_address(self):
        """Gets the remote_ip_address of this VerificationIPFlowParameters.

        The remote IP address. Acceptable values are valid IPv4 addresses.

        :return: The remote_ip_address of this VerificationIPFlowParameters.
        :rtype: str
        """
        return self._remote_ip_address

    @remote_ip_address.setter
    def remote_ip_address(self, remote_ip_address):
        """Sets the remote_ip_address of this VerificationIPFlowParameters.

        The remote IP address. Acceptable values are valid IPv4 addresses.

        :param remote_ip_address: The remote_ip_address of this VerificationIPFlowParameters.
        :type remote_ip_address: str
        """
        if remote_ip_address is None:
            raise ValueError("Invalid value for `remote_ip_address`, must not be `None`")

        self._remote_ip_address = remote_ip_address

    @property
    def remote_port(self):
        """Gets the remote_port of this VerificationIPFlowParameters.

        The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.

        :return: The remote_port of this VerificationIPFlowParameters.
        :rtype: str
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this VerificationIPFlowParameters.

        The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.

        :param remote_port: The remote_port of this VerificationIPFlowParameters.
        :type remote_port: str
        """
        if remote_port is None:
            raise ValueError("Invalid value for `remote_port`, must not be `None`")

        self._remote_port = remote_port

    @property
    def target_nic_resource_id(self):
        """Gets the target_nic_resource_id of this VerificationIPFlowParameters.

        The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).

        :return: The target_nic_resource_id of this VerificationIPFlowParameters.
        :rtype: str
        """
        return self._target_nic_resource_id

    @target_nic_resource_id.setter
    def target_nic_resource_id(self, target_nic_resource_id):
        """Sets the target_nic_resource_id of this VerificationIPFlowParameters.

        The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).

        :param target_nic_resource_id: The target_nic_resource_id of this VerificationIPFlowParameters.
        :type target_nic_resource_id: str
        """

        self._target_nic_resource_id = target_nic_resource_id

    @property
    def target_resource_id(self):
        """Gets the target_resource_id of this VerificationIPFlowParameters.

        The ID of the target resource to perform next-hop on.

        :return: The target_resource_id of this VerificationIPFlowParameters.
        :rtype: str
        """
        return self._target_resource_id

    @target_resource_id.setter
    def target_resource_id(self, target_resource_id):
        """Sets the target_resource_id of this VerificationIPFlowParameters.

        The ID of the target resource to perform next-hop on.

        :param target_resource_id: The target_resource_id of this VerificationIPFlowParameters.
        :type target_resource_id: str
        """
        if target_resource_id is None:
            raise ValueError("Invalid value for `target_resource_id`, must not be `None`")

        self._target_resource_id = target_resource_id
