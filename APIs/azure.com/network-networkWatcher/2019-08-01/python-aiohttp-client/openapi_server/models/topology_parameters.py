# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.topology_parameters_target_subnet import TopologyParametersTargetSubnet
from openapi_server import util


class TopologyParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_resource_group_name: str=None, target_subnet: TopologyParametersTargetSubnet=None, target_virtual_network: TopologyParametersTargetSubnet=None):
        """TopologyParameters - a model defined in OpenAPI

        :param target_resource_group_name: The target_resource_group_name of this TopologyParameters.
        :param target_subnet: The target_subnet of this TopologyParameters.
        :param target_virtual_network: The target_virtual_network of this TopologyParameters.
        """
        self.openapi_types = {
            'target_resource_group_name': str,
            'target_subnet': TopologyParametersTargetSubnet,
            'target_virtual_network': TopologyParametersTargetSubnet
        }

        self.attribute_map = {
            'target_resource_group_name': 'targetResourceGroupName',
            'target_subnet': 'targetSubnet',
            'target_virtual_network': 'targetVirtualNetwork'
        }

        self._target_resource_group_name = target_resource_group_name
        self._target_subnet = target_subnet
        self._target_virtual_network = target_virtual_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopologyParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopologyParameters of this TopologyParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_resource_group_name(self):
        """Gets the target_resource_group_name of this TopologyParameters.

        The name of the target resource group to perform topology on.

        :return: The target_resource_group_name of this TopologyParameters.
        :rtype: str
        """
        return self._target_resource_group_name

    @target_resource_group_name.setter
    def target_resource_group_name(self, target_resource_group_name):
        """Sets the target_resource_group_name of this TopologyParameters.

        The name of the target resource group to perform topology on.

        :param target_resource_group_name: The target_resource_group_name of this TopologyParameters.
        :type target_resource_group_name: str
        """

        self._target_resource_group_name = target_resource_group_name

    @property
    def target_subnet(self):
        """Gets the target_subnet of this TopologyParameters.


        :return: The target_subnet of this TopologyParameters.
        :rtype: TopologyParametersTargetSubnet
        """
        return self._target_subnet

    @target_subnet.setter
    def target_subnet(self, target_subnet):
        """Sets the target_subnet of this TopologyParameters.


        :param target_subnet: The target_subnet of this TopologyParameters.
        :type target_subnet: TopologyParametersTargetSubnet
        """

        self._target_subnet = target_subnet

    @property
    def target_virtual_network(self):
        """Gets the target_virtual_network of this TopologyParameters.


        :return: The target_virtual_network of this TopologyParameters.
        :rtype: TopologyParametersTargetSubnet
        """
        return self._target_virtual_network

    @target_virtual_network.setter
    def target_virtual_network(self, target_virtual_network):
        """Sets the target_virtual_network of this TopologyParameters.


        :param target_virtual_network: The target_virtual_network of this TopologyParameters.
        :type target_virtual_network: TopologyParametersTargetSubnet
        """

        self._target_virtual_network = target_virtual_network
