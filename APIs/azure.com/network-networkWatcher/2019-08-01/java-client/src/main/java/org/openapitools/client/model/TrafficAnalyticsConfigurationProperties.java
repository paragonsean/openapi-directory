/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that define the configuration of traffic analytics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:58.178276-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrafficAnalyticsConfigurationProperties {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_TRAFFIC_ANALYTICS_INTERVAL = "trafficAnalyticsInterval";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_ANALYTICS_INTERVAL)
  private Integer trafficAnalyticsInterval;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public static final String SERIALIZED_NAME_WORKSPACE_REGION = "workspaceRegion";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_REGION)
  private String workspaceRegion;

  public static final String SERIALIZED_NAME_WORKSPACE_RESOURCE_ID = "workspaceResourceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_RESOURCE_ID)
  private String workspaceResourceId;

  public TrafficAnalyticsConfigurationProperties() {
  }

  public TrafficAnalyticsConfigurationProperties enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Flag to enable/disable traffic analytics.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public TrafficAnalyticsConfigurationProperties trafficAnalyticsInterval(Integer trafficAnalyticsInterval) {
    this.trafficAnalyticsInterval = trafficAnalyticsInterval;
    return this;
  }

  /**
   * The interval in minutes which would decide how frequently TA service should do flow analytics.
   * @return trafficAnalyticsInterval
   */
  @javax.annotation.Nullable
  public Integer getTrafficAnalyticsInterval() {
    return trafficAnalyticsInterval;
  }

  public void setTrafficAnalyticsInterval(Integer trafficAnalyticsInterval) {
    this.trafficAnalyticsInterval = trafficAnalyticsInterval;
  }


  public TrafficAnalyticsConfigurationProperties workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * The resource guid of the attached workspace.
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }


  public TrafficAnalyticsConfigurationProperties workspaceRegion(String workspaceRegion) {
    this.workspaceRegion = workspaceRegion;
    return this;
  }

  /**
   * The location of the attached workspace.
   * @return workspaceRegion
   */
  @javax.annotation.Nullable
  public String getWorkspaceRegion() {
    return workspaceRegion;
  }

  public void setWorkspaceRegion(String workspaceRegion) {
    this.workspaceRegion = workspaceRegion;
  }


  public TrafficAnalyticsConfigurationProperties workspaceResourceId(String workspaceResourceId) {
    this.workspaceResourceId = workspaceResourceId;
    return this;
  }

  /**
   * Resource Id of the attached workspace.
   * @return workspaceResourceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceResourceId() {
    return workspaceResourceId;
  }

  public void setWorkspaceResourceId(String workspaceResourceId) {
    this.workspaceResourceId = workspaceResourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficAnalyticsConfigurationProperties trafficAnalyticsConfigurationProperties = (TrafficAnalyticsConfigurationProperties) o;
    return Objects.equals(this.enabled, trafficAnalyticsConfigurationProperties.enabled) &&
        Objects.equals(this.trafficAnalyticsInterval, trafficAnalyticsConfigurationProperties.trafficAnalyticsInterval) &&
        Objects.equals(this.workspaceId, trafficAnalyticsConfigurationProperties.workspaceId) &&
        Objects.equals(this.workspaceRegion, trafficAnalyticsConfigurationProperties.workspaceRegion) &&
        Objects.equals(this.workspaceResourceId, trafficAnalyticsConfigurationProperties.workspaceResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, trafficAnalyticsInterval, workspaceId, workspaceRegion, workspaceResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficAnalyticsConfigurationProperties {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    trafficAnalyticsInterval: ").append(toIndentedString(trafficAnalyticsInterval)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    workspaceRegion: ").append(toIndentedString(workspaceRegion)).append("\n");
    sb.append("    workspaceResourceId: ").append(toIndentedString(workspaceResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("trafficAnalyticsInterval");
    openapiFields.add("workspaceId");
    openapiFields.add("workspaceRegion");
    openapiFields.add("workspaceResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrafficAnalyticsConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrafficAnalyticsConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrafficAnalyticsConfigurationProperties is not found in the empty JSON string", TrafficAnalyticsConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrafficAnalyticsConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrafficAnalyticsConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrafficAnalyticsConfigurationProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("workspaceId") != null && !jsonObj.get("workspaceId").isJsonNull()) && !jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
      if ((jsonObj.get("workspaceRegion") != null && !jsonObj.get("workspaceRegion").isJsonNull()) && !jsonObj.get("workspaceRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceRegion").toString()));
      }
      if ((jsonObj.get("workspaceResourceId") != null && !jsonObj.get("workspaceResourceId").isJsonNull()) && !jsonObj.get("workspaceResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrafficAnalyticsConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrafficAnalyticsConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrafficAnalyticsConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrafficAnalyticsConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TrafficAnalyticsConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, TrafficAnalyticsConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrafficAnalyticsConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrafficAnalyticsConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrafficAnalyticsConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to TrafficAnalyticsConfigurationProperties
   */
  public static TrafficAnalyticsConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrafficAnalyticsConfigurationProperties.class);
  }

  /**
   * Convert an instance of TrafficAnalyticsConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

