/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PacketCaptureFilter;
import org.openapitools.client.model.PacketCaptureStorageLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a packet capture session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:28.250577-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PacketCaptureResultProperties {
  /**
   * The provisioning state of the packet capture session.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_BYTES_TO_CAPTURE_PER_PACKET = "bytesToCapturePerPacket";
  @SerializedName(SERIALIZED_NAME_BYTES_TO_CAPTURE_PER_PACKET)
  private Integer bytesToCapturePerPacket;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<PacketCaptureFilter> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_LOCATION = "storageLocation";
  @SerializedName(SERIALIZED_NAME_STORAGE_LOCATION)
  private PacketCaptureStorageLocation storageLocation;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TIME_LIMIT_IN_SECONDS = "timeLimitInSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_LIMIT_IN_SECONDS)
  private Integer timeLimitInSeconds;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_PER_SESSION = "totalBytesPerSession";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_PER_SESSION)
  private Integer totalBytesPerSession;

  public PacketCaptureResultProperties() {
  }

  public PacketCaptureResultProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the packet capture session.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public PacketCaptureResultProperties bytesToCapturePerPacket(Integer bytesToCapturePerPacket) {
    this.bytesToCapturePerPacket = bytesToCapturePerPacket;
    return this;
  }

  /**
   * Number of bytes captured per packet, the remaining bytes are truncated.
   * @return bytesToCapturePerPacket
   */
  @javax.annotation.Nullable
  public Integer getBytesToCapturePerPacket() {
    return bytesToCapturePerPacket;
  }

  public void setBytesToCapturePerPacket(Integer bytesToCapturePerPacket) {
    this.bytesToCapturePerPacket = bytesToCapturePerPacket;
  }


  public PacketCaptureResultProperties filters(List<PacketCaptureFilter> filters) {
    this.filters = filters;
    return this;
  }

  public PacketCaptureResultProperties addFiltersItem(PacketCaptureFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List<PacketCaptureFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<PacketCaptureFilter> filters) {
    this.filters = filters;
  }


  public PacketCaptureResultProperties storageLocation(PacketCaptureStorageLocation storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

  /**
   * Get storageLocation
   * @return storageLocation
   */
  @javax.annotation.Nonnull
  public PacketCaptureStorageLocation getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(PacketCaptureStorageLocation storageLocation) {
    this.storageLocation = storageLocation;
  }


  public PacketCaptureResultProperties target(String target) {
    this.target = target;
    return this;
  }

  /**
   * The ID of the targeted resource, only VM is currently supported.
   * @return target
   */
  @javax.annotation.Nonnull
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public PacketCaptureResultProperties timeLimitInSeconds(Integer timeLimitInSeconds) {
    this.timeLimitInSeconds = timeLimitInSeconds;
    return this;
  }

  /**
   * Maximum duration of the capture session in seconds.
   * @return timeLimitInSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeLimitInSeconds() {
    return timeLimitInSeconds;
  }

  public void setTimeLimitInSeconds(Integer timeLimitInSeconds) {
    this.timeLimitInSeconds = timeLimitInSeconds;
  }


  public PacketCaptureResultProperties totalBytesPerSession(Integer totalBytesPerSession) {
    this.totalBytesPerSession = totalBytesPerSession;
    return this;
  }

  /**
   * Maximum size of the capture output.
   * @return totalBytesPerSession
   */
  @javax.annotation.Nullable
  public Integer getTotalBytesPerSession() {
    return totalBytesPerSession;
  }

  public void setTotalBytesPerSession(Integer totalBytesPerSession) {
    this.totalBytesPerSession = totalBytesPerSession;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PacketCaptureResultProperties packetCaptureResultProperties = (PacketCaptureResultProperties) o;
    return Objects.equals(this.provisioningState, packetCaptureResultProperties.provisioningState) &&
        Objects.equals(this.bytesToCapturePerPacket, packetCaptureResultProperties.bytesToCapturePerPacket) &&
        Objects.equals(this.filters, packetCaptureResultProperties.filters) &&
        Objects.equals(this.storageLocation, packetCaptureResultProperties.storageLocation) &&
        Objects.equals(this.target, packetCaptureResultProperties.target) &&
        Objects.equals(this.timeLimitInSeconds, packetCaptureResultProperties.timeLimitInSeconds) &&
        Objects.equals(this.totalBytesPerSession, packetCaptureResultProperties.totalBytesPerSession);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningState, bytesToCapturePerPacket, filters, storageLocation, target, timeLimitInSeconds, totalBytesPerSession);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PacketCaptureResultProperties {\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    bytesToCapturePerPacket: ").append(toIndentedString(bytesToCapturePerPacket)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    timeLimitInSeconds: ").append(toIndentedString(timeLimitInSeconds)).append("\n");
    sb.append("    totalBytesPerSession: ").append(toIndentedString(totalBytesPerSession)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytesToCapturePerPacket");
    openapiFields.add("filters");
    openapiFields.add("storageLocation");
    openapiFields.add("target");
    openapiFields.add("timeLimitInSeconds");
    openapiFields.add("totalBytesPerSession");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("storageLocation");
    openapiRequiredFields.add("target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PacketCaptureResultProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PacketCaptureResultProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PacketCaptureResultProperties is not found in the empty JSON string", PacketCaptureResultProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PacketCaptureResultProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PacketCaptureResultProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PacketCaptureResultProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            PacketCaptureFilter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      // validate the required field `storageLocation`
      PacketCaptureStorageLocation.validateJsonElement(jsonObj.get("storageLocation"));
      if (!jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PacketCaptureResultProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PacketCaptureResultProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PacketCaptureResultProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PacketCaptureResultProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PacketCaptureResultProperties>() {
           @Override
           public void write(JsonWriter out, PacketCaptureResultProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PacketCaptureResultProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PacketCaptureResultProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PacketCaptureResultProperties
   * @throws IOException if the JSON string is invalid with respect to PacketCaptureResultProperties
   */
  public static PacketCaptureResultProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PacketCaptureResultProperties.class);
  }

  /**
   * Convert an instance of PacketCaptureResultProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

