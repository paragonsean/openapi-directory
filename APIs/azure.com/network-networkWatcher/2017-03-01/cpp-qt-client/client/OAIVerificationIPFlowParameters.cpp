/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationIPFlowParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationIPFlowParameters::OAIVerificationIPFlowParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationIPFlowParameters::OAIVerificationIPFlowParameters() {
    this->initializeModel();
}

OAIVerificationIPFlowParameters::~OAIVerificationIPFlowParameters() {}

void OAIVerificationIPFlowParameters::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_local_ip_address_isSet = false;
    m_local_ip_address_isValid = false;

    m_local_port_isSet = false;
    m_local_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_remote_ip_address_isSet = false;
    m_remote_ip_address_isValid = false;

    m_remote_port_isSet = false;
    m_remote_port_isValid = false;

    m_target_nic_resource_id_isSet = false;
    m_target_nic_resource_id_isValid = false;

    m_target_resource_id_isSet = false;
    m_target_resource_id_isValid = false;
}

void OAIVerificationIPFlowParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationIPFlowParameters::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_local_ip_address_isValid = ::OpenAPI::fromJsonValue(m_local_ip_address, json[QString("localIPAddress")]);
    m_local_ip_address_isSet = !json[QString("localIPAddress")].isNull() && m_local_ip_address_isValid;

    m_local_port_isValid = ::OpenAPI::fromJsonValue(m_local_port, json[QString("localPort")]);
    m_local_port_isSet = !json[QString("localPort")].isNull() && m_local_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_remote_ip_address_isValid = ::OpenAPI::fromJsonValue(m_remote_ip_address, json[QString("remoteIPAddress")]);
    m_remote_ip_address_isSet = !json[QString("remoteIPAddress")].isNull() && m_remote_ip_address_isValid;

    m_remote_port_isValid = ::OpenAPI::fromJsonValue(m_remote_port, json[QString("remotePort")]);
    m_remote_port_isSet = !json[QString("remotePort")].isNull() && m_remote_port_isValid;

    m_target_nic_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_nic_resource_id, json[QString("targetNicResourceId")]);
    m_target_nic_resource_id_isSet = !json[QString("targetNicResourceId")].isNull() && m_target_nic_resource_id_isValid;

    m_target_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_id, json[QString("targetResourceId")]);
    m_target_resource_id_isSet = !json[QString("targetResourceId")].isNull() && m_target_resource_id_isValid;
}

QString OAIVerificationIPFlowParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationIPFlowParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_local_ip_address_isSet) {
        obj.insert(QString("localIPAddress"), ::OpenAPI::toJsonValue(m_local_ip_address));
    }
    if (m_local_port_isSet) {
        obj.insert(QString("localPort"), ::OpenAPI::toJsonValue(m_local_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_remote_ip_address_isSet) {
        obj.insert(QString("remoteIPAddress"), ::OpenAPI::toJsonValue(m_remote_ip_address));
    }
    if (m_remote_port_isSet) {
        obj.insert(QString("remotePort"), ::OpenAPI::toJsonValue(m_remote_port));
    }
    if (m_target_nic_resource_id_isSet) {
        obj.insert(QString("targetNicResourceId"), ::OpenAPI::toJsonValue(m_target_nic_resource_id));
    }
    if (m_target_resource_id_isSet) {
        obj.insert(QString("targetResourceId"), ::OpenAPI::toJsonValue(m_target_resource_id));
    }
    return obj;
}

QString OAIVerificationIPFlowParameters::getDirection() const {
    return m_direction;
}
void OAIVerificationIPFlowParameters::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIVerificationIPFlowParameters::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIVerificationIPFlowParameters::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIVerificationIPFlowParameters::getLocalIpAddress() const {
    return m_local_ip_address;
}
void OAIVerificationIPFlowParameters::setLocalIpAddress(const QString &local_ip_address) {
    m_local_ip_address = local_ip_address;
    m_local_ip_address_isSet = true;
}

bool OAIVerificationIPFlowParameters::is_local_ip_address_Set() const{
    return m_local_ip_address_isSet;
}

bool OAIVerificationIPFlowParameters::is_local_ip_address_Valid() const{
    return m_local_ip_address_isValid;
}

QString OAIVerificationIPFlowParameters::getLocalPort() const {
    return m_local_port;
}
void OAIVerificationIPFlowParameters::setLocalPort(const QString &local_port) {
    m_local_port = local_port;
    m_local_port_isSet = true;
}

bool OAIVerificationIPFlowParameters::is_local_port_Set() const{
    return m_local_port_isSet;
}

bool OAIVerificationIPFlowParameters::is_local_port_Valid() const{
    return m_local_port_isValid;
}

QString OAIVerificationIPFlowParameters::getProtocol() const {
    return m_protocol;
}
void OAIVerificationIPFlowParameters::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIVerificationIPFlowParameters::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIVerificationIPFlowParameters::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIVerificationIPFlowParameters::getRemoteIpAddress() const {
    return m_remote_ip_address;
}
void OAIVerificationIPFlowParameters::setRemoteIpAddress(const QString &remote_ip_address) {
    m_remote_ip_address = remote_ip_address;
    m_remote_ip_address_isSet = true;
}

bool OAIVerificationIPFlowParameters::is_remote_ip_address_Set() const{
    return m_remote_ip_address_isSet;
}

bool OAIVerificationIPFlowParameters::is_remote_ip_address_Valid() const{
    return m_remote_ip_address_isValid;
}

QString OAIVerificationIPFlowParameters::getRemotePort() const {
    return m_remote_port;
}
void OAIVerificationIPFlowParameters::setRemotePort(const QString &remote_port) {
    m_remote_port = remote_port;
    m_remote_port_isSet = true;
}

bool OAIVerificationIPFlowParameters::is_remote_port_Set() const{
    return m_remote_port_isSet;
}

bool OAIVerificationIPFlowParameters::is_remote_port_Valid() const{
    return m_remote_port_isValid;
}

QString OAIVerificationIPFlowParameters::getTargetNicResourceId() const {
    return m_target_nic_resource_id;
}
void OAIVerificationIPFlowParameters::setTargetNicResourceId(const QString &target_nic_resource_id) {
    m_target_nic_resource_id = target_nic_resource_id;
    m_target_nic_resource_id_isSet = true;
}

bool OAIVerificationIPFlowParameters::is_target_nic_resource_id_Set() const{
    return m_target_nic_resource_id_isSet;
}

bool OAIVerificationIPFlowParameters::is_target_nic_resource_id_Valid() const{
    return m_target_nic_resource_id_isValid;
}

QString OAIVerificationIPFlowParameters::getTargetResourceId() const {
    return m_target_resource_id;
}
void OAIVerificationIPFlowParameters::setTargetResourceId(const QString &target_resource_id) {
    m_target_resource_id = target_resource_id;
    m_target_resource_id_isSet = true;
}

bool OAIVerificationIPFlowParameters::is_target_resource_id_Set() const{
    return m_target_resource_id_isSet;
}

bool OAIVerificationIPFlowParameters::is_target_resource_id_Valid() const{
    return m_target_resource_id_isValid;
}

bool OAIVerificationIPFlowParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_nic_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationIPFlowParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_direction_isValid && m_local_ip_address_isValid && m_local_port_isValid && m_protocol_isValid && m_remote_ip_address_isValid && m_remote_port_isValid && m_target_resource_id_isValid && true;
}

} // namespace OpenAPI
