/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINextHopParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINextHopParameters::OAINextHopParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINextHopParameters::OAINextHopParameters() {
    this->initializeModel();
}

OAINextHopParameters::~OAINextHopParameters() {}

void OAINextHopParameters::initializeModel() {

    m_destination_ip_address_isSet = false;
    m_destination_ip_address_isValid = false;

    m_source_ip_address_isSet = false;
    m_source_ip_address_isValid = false;

    m_target_nic_resource_id_isSet = false;
    m_target_nic_resource_id_isValid = false;

    m_target_resource_id_isSet = false;
    m_target_resource_id_isValid = false;
}

void OAINextHopParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINextHopParameters::fromJsonObject(QJsonObject json) {

    m_destination_ip_address_isValid = ::OpenAPI::fromJsonValue(m_destination_ip_address, json[QString("destinationIPAddress")]);
    m_destination_ip_address_isSet = !json[QString("destinationIPAddress")].isNull() && m_destination_ip_address_isValid;

    m_source_ip_address_isValid = ::OpenAPI::fromJsonValue(m_source_ip_address, json[QString("sourceIPAddress")]);
    m_source_ip_address_isSet = !json[QString("sourceIPAddress")].isNull() && m_source_ip_address_isValid;

    m_target_nic_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_nic_resource_id, json[QString("targetNicResourceId")]);
    m_target_nic_resource_id_isSet = !json[QString("targetNicResourceId")].isNull() && m_target_nic_resource_id_isValid;

    m_target_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_id, json[QString("targetResourceId")]);
    m_target_resource_id_isSet = !json[QString("targetResourceId")].isNull() && m_target_resource_id_isValid;
}

QString OAINextHopParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINextHopParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_ip_address_isSet) {
        obj.insert(QString("destinationIPAddress"), ::OpenAPI::toJsonValue(m_destination_ip_address));
    }
    if (m_source_ip_address_isSet) {
        obj.insert(QString("sourceIPAddress"), ::OpenAPI::toJsonValue(m_source_ip_address));
    }
    if (m_target_nic_resource_id_isSet) {
        obj.insert(QString("targetNicResourceId"), ::OpenAPI::toJsonValue(m_target_nic_resource_id));
    }
    if (m_target_resource_id_isSet) {
        obj.insert(QString("targetResourceId"), ::OpenAPI::toJsonValue(m_target_resource_id));
    }
    return obj;
}

QString OAINextHopParameters::getDestinationIpAddress() const {
    return m_destination_ip_address;
}
void OAINextHopParameters::setDestinationIpAddress(const QString &destination_ip_address) {
    m_destination_ip_address = destination_ip_address;
    m_destination_ip_address_isSet = true;
}

bool OAINextHopParameters::is_destination_ip_address_Set() const{
    return m_destination_ip_address_isSet;
}

bool OAINextHopParameters::is_destination_ip_address_Valid() const{
    return m_destination_ip_address_isValid;
}

QString OAINextHopParameters::getSourceIpAddress() const {
    return m_source_ip_address;
}
void OAINextHopParameters::setSourceIpAddress(const QString &source_ip_address) {
    m_source_ip_address = source_ip_address;
    m_source_ip_address_isSet = true;
}

bool OAINextHopParameters::is_source_ip_address_Set() const{
    return m_source_ip_address_isSet;
}

bool OAINextHopParameters::is_source_ip_address_Valid() const{
    return m_source_ip_address_isValid;
}

QString OAINextHopParameters::getTargetNicResourceId() const {
    return m_target_nic_resource_id;
}
void OAINextHopParameters::setTargetNicResourceId(const QString &target_nic_resource_id) {
    m_target_nic_resource_id = target_nic_resource_id;
    m_target_nic_resource_id_isSet = true;
}

bool OAINextHopParameters::is_target_nic_resource_id_Set() const{
    return m_target_nic_resource_id_isSet;
}

bool OAINextHopParameters::is_target_nic_resource_id_Valid() const{
    return m_target_nic_resource_id_isValid;
}

QString OAINextHopParameters::getTargetResourceId() const {
    return m_target_resource_id;
}
void OAINextHopParameters::setTargetResourceId(const QString &target_resource_id) {
    m_target_resource_id = target_resource_id;
    m_target_resource_id_isSet = true;
}

bool OAINextHopParameters::is_target_resource_id_Set() const{
    return m_target_resource_id_isSet;
}

bool OAINextHopParameters::is_target_resource_id_Valid() const{
    return m_target_resource_id_isValid;
}

bool OAINextHopParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_nic_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINextHopParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_ip_address_isValid && m_source_ip_address_isValid && m_target_resource_id_isValid && true;
}

} // namespace OpenAPI
