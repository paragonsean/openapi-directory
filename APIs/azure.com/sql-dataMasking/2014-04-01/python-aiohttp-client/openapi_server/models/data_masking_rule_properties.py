# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataMaskingRuleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_name: str=None, column_name: str=None, id: str=None, masking_function: str=None, number_from: str=None, number_to: str=None, prefix_size: str=None, replacement_string: str=None, rule_state: str=None, schema_name: str=None, suffix_size: str=None, table_name: str=None):
        """DataMaskingRuleProperties - a model defined in OpenAPI

        :param alias_name: The alias_name of this DataMaskingRuleProperties.
        :param column_name: The column_name of this DataMaskingRuleProperties.
        :param id: The id of this DataMaskingRuleProperties.
        :param masking_function: The masking_function of this DataMaskingRuleProperties.
        :param number_from: The number_from of this DataMaskingRuleProperties.
        :param number_to: The number_to of this DataMaskingRuleProperties.
        :param prefix_size: The prefix_size of this DataMaskingRuleProperties.
        :param replacement_string: The replacement_string of this DataMaskingRuleProperties.
        :param rule_state: The rule_state of this DataMaskingRuleProperties.
        :param schema_name: The schema_name of this DataMaskingRuleProperties.
        :param suffix_size: The suffix_size of this DataMaskingRuleProperties.
        :param table_name: The table_name of this DataMaskingRuleProperties.
        """
        self.openapi_types = {
            'alias_name': str,
            'column_name': str,
            'id': str,
            'masking_function': str,
            'number_from': str,
            'number_to': str,
            'prefix_size': str,
            'replacement_string': str,
            'rule_state': str,
            'schema_name': str,
            'suffix_size': str,
            'table_name': str
        }

        self.attribute_map = {
            'alias_name': 'aliasName',
            'column_name': 'columnName',
            'id': 'id',
            'masking_function': 'maskingFunction',
            'number_from': 'numberFrom',
            'number_to': 'numberTo',
            'prefix_size': 'prefixSize',
            'replacement_string': 'replacementString',
            'rule_state': 'ruleState',
            'schema_name': 'schemaName',
            'suffix_size': 'suffixSize',
            'table_name': 'tableName'
        }

        self._alias_name = alias_name
        self._column_name = column_name
        self._id = id
        self._masking_function = masking_function
        self._number_from = number_from
        self._number_to = number_to
        self._prefix_size = prefix_size
        self._replacement_string = replacement_string
        self._rule_state = rule_state
        self._schema_name = schema_name
        self._suffix_size = suffix_size
        self._table_name = table_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataMaskingRuleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataMaskingRuleProperties of this DataMaskingRuleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_name(self):
        """Gets the alias_name of this DataMaskingRuleProperties.

        The alias name. This is a legacy parameter and is no longer used.

        :return: The alias_name of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._alias_name

    @alias_name.setter
    def alias_name(self, alias_name):
        """Sets the alias_name of this DataMaskingRuleProperties.

        The alias name. This is a legacy parameter and is no longer used.

        :param alias_name: The alias_name of this DataMaskingRuleProperties.
        :type alias_name: str
        """

        self._alias_name = alias_name

    @property
    def column_name(self):
        """Gets the column_name of this DataMaskingRuleProperties.

        The column name on which the data masking rule is applied.

        :return: The column_name of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this DataMaskingRuleProperties.

        The column name on which the data masking rule is applied.

        :param column_name: The column_name of this DataMaskingRuleProperties.
        :type column_name: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")

        self._column_name = column_name

    @property
    def id(self):
        """Gets the id of this DataMaskingRuleProperties.

        The rule Id.

        :return: The id of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataMaskingRuleProperties.

        The rule Id.

        :param id: The id of this DataMaskingRuleProperties.
        :type id: str
        """

        self._id = id

    @property
    def masking_function(self):
        """Gets the masking_function of this DataMaskingRuleProperties.

        The masking function that is used for the data masking rule.

        :return: The masking_function of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._masking_function

    @masking_function.setter
    def masking_function(self, masking_function):
        """Sets the masking_function of this DataMaskingRuleProperties.

        The masking function that is used for the data masking rule.

        :param masking_function: The masking_function of this DataMaskingRuleProperties.
        :type masking_function: str
        """
        allowed_values = ["Default", "CCN", "Email", "Number", "SSN", "Text"]  # noqa: E501
        if masking_function not in allowed_values:
            raise ValueError(
                "Invalid value for `masking_function` ({0}), must be one of {1}"
                .format(masking_function, allowed_values)
            )

        self._masking_function = masking_function

    @property
    def number_from(self):
        """Gets the number_from of this DataMaskingRuleProperties.

        The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.

        :return: The number_from of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._number_from

    @number_from.setter
    def number_from(self, number_from):
        """Sets the number_from of this DataMaskingRuleProperties.

        The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.

        :param number_from: The number_from of this DataMaskingRuleProperties.
        :type number_from: str
        """

        self._number_from = number_from

    @property
    def number_to(self):
        """Gets the number_to of this DataMaskingRuleProperties.

        The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.

        :return: The number_to of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._number_to

    @number_to.setter
    def number_to(self, number_to):
        """Sets the number_to of this DataMaskingRuleProperties.

        The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.

        :param number_to: The number_to of this DataMaskingRuleProperties.
        :type number_to: str
        """

        self._number_to = number_to

    @property
    def prefix_size(self):
        """Gets the prefix_size of this DataMaskingRuleProperties.

        If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored.

        :return: The prefix_size of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._prefix_size

    @prefix_size.setter
    def prefix_size(self, prefix_size):
        """Sets the prefix_size of this DataMaskingRuleProperties.

        If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored.

        :param prefix_size: The prefix_size of this DataMaskingRuleProperties.
        :type prefix_size: str
        """

        self._prefix_size = prefix_size

    @property
    def replacement_string(self):
        """Gets the replacement_string of this DataMaskingRuleProperties.

        If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored.

        :return: The replacement_string of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._replacement_string

    @replacement_string.setter
    def replacement_string(self, replacement_string):
        """Sets the replacement_string of this DataMaskingRuleProperties.

        If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored.

        :param replacement_string: The replacement_string of this DataMaskingRuleProperties.
        :type replacement_string: str
        """

        self._replacement_string = replacement_string

    @property
    def rule_state(self):
        """Gets the rule_state of this DataMaskingRuleProperties.

        The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.

        :return: The rule_state of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._rule_state

    @rule_state.setter
    def rule_state(self, rule_state):
        """Sets the rule_state of this DataMaskingRuleProperties.

        The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.

        :param rule_state: The rule_state of this DataMaskingRuleProperties.
        :type rule_state: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if rule_state not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_state` ({0}), must be one of {1}"
                .format(rule_state, allowed_values)
            )

        self._rule_state = rule_state

    @property
    def schema_name(self):
        """Gets the schema_name of this DataMaskingRuleProperties.

        The schema name on which the data masking rule is applied.

        :return: The schema_name of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this DataMaskingRuleProperties.

        The schema name on which the data masking rule is applied.

        :param schema_name: The schema_name of this DataMaskingRuleProperties.
        :type schema_name: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")

        self._schema_name = schema_name

    @property
    def suffix_size(self):
        """Gets the suffix_size of this DataMaskingRuleProperties.

        If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored.

        :return: The suffix_size of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._suffix_size

    @suffix_size.setter
    def suffix_size(self, suffix_size):
        """Sets the suffix_size of this DataMaskingRuleProperties.

        If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored.

        :param suffix_size: The suffix_size of this DataMaskingRuleProperties.
        :type suffix_size: str
        """

        self._suffix_size = suffix_size

    @property
    def table_name(self):
        """Gets the table_name of this DataMaskingRuleProperties.

        The table name on which the data masking rule is applied.

        :return: The table_name of this DataMaskingRuleProperties.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DataMaskingRuleProperties.

        The table name on which the data masking rule is applied.

        :param table_name: The table_name of this DataMaskingRuleProperties.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name
