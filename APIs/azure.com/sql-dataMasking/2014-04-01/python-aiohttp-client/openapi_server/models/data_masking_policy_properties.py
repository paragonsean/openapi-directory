# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataMaskingPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_principals: str=None, data_masking_state: str=None, exempt_principals: str=None, masking_level: str=None):
        """DataMaskingPolicyProperties - a model defined in OpenAPI

        :param application_principals: The application_principals of this DataMaskingPolicyProperties.
        :param data_masking_state: The data_masking_state of this DataMaskingPolicyProperties.
        :param exempt_principals: The exempt_principals of this DataMaskingPolicyProperties.
        :param masking_level: The masking_level of this DataMaskingPolicyProperties.
        """
        self.openapi_types = {
            'application_principals': str,
            'data_masking_state': str,
            'exempt_principals': str,
            'masking_level': str
        }

        self.attribute_map = {
            'application_principals': 'applicationPrincipals',
            'data_masking_state': 'dataMaskingState',
            'exempt_principals': 'exemptPrincipals',
            'masking_level': 'maskingLevel'
        }

        self._application_principals = application_principals
        self._data_masking_state = data_masking_state
        self._exempt_principals = exempt_principals
        self._masking_level = masking_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataMaskingPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataMaskingPolicyProperties of this DataMaskingPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_principals(self):
        """Gets the application_principals of this DataMaskingPolicyProperties.

        The list of the application principals. This is a legacy parameter and is no longer used.

        :return: The application_principals of this DataMaskingPolicyProperties.
        :rtype: str
        """
        return self._application_principals

    @application_principals.setter
    def application_principals(self, application_principals):
        """Sets the application_principals of this DataMaskingPolicyProperties.

        The list of the application principals. This is a legacy parameter and is no longer used.

        :param application_principals: The application_principals of this DataMaskingPolicyProperties.
        :type application_principals: str
        """

        self._application_principals = application_principals

    @property
    def data_masking_state(self):
        """Gets the data_masking_state of this DataMaskingPolicyProperties.

        The state of the data masking policy.

        :return: The data_masking_state of this DataMaskingPolicyProperties.
        :rtype: str
        """
        return self._data_masking_state

    @data_masking_state.setter
    def data_masking_state(self, data_masking_state):
        """Sets the data_masking_state of this DataMaskingPolicyProperties.

        The state of the data masking policy.

        :param data_masking_state: The data_masking_state of this DataMaskingPolicyProperties.
        :type data_masking_state: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if data_masking_state not in allowed_values:
            raise ValueError(
                "Invalid value for `data_masking_state` ({0}), must be one of {1}"
                .format(data_masking_state, allowed_values)
            )

        self._data_masking_state = data_masking_state

    @property
    def exempt_principals(self):
        """Gets the exempt_principals of this DataMaskingPolicyProperties.

        The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.

        :return: The exempt_principals of this DataMaskingPolicyProperties.
        :rtype: str
        """
        return self._exempt_principals

    @exempt_principals.setter
    def exempt_principals(self, exempt_principals):
        """Sets the exempt_principals of this DataMaskingPolicyProperties.

        The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.

        :param exempt_principals: The exempt_principals of this DataMaskingPolicyProperties.
        :type exempt_principals: str
        """

        self._exempt_principals = exempt_principals

    @property
    def masking_level(self):
        """Gets the masking_level of this DataMaskingPolicyProperties.

        The masking level. This is a legacy parameter and is no longer used.

        :return: The masking_level of this DataMaskingPolicyProperties.
        :rtype: str
        """
        return self._masking_level

    @masking_level.setter
    def masking_level(self, masking_level):
        """Sets the masking_level of this DataMaskingPolicyProperties.

        The masking level. This is a legacy parameter and is no longer used.

        :param masking_level: The masking_level of this DataMaskingPolicyProperties.
        :type masking_level: str
        """

        self._masking_level = masking_level
