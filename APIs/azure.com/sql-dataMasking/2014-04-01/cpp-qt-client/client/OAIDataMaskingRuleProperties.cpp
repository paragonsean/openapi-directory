/**
 * Azure SQL Database Datamasking Policies and Rules
 * Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataMaskingRuleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataMaskingRuleProperties::OAIDataMaskingRuleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataMaskingRuleProperties::OAIDataMaskingRuleProperties() {
    this->initializeModel();
}

OAIDataMaskingRuleProperties::~OAIDataMaskingRuleProperties() {}

void OAIDataMaskingRuleProperties::initializeModel() {

    m_alias_name_isSet = false;
    m_alias_name_isValid = false;

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_masking_function_isSet = false;
    m_masking_function_isValid = false;

    m_number_from_isSet = false;
    m_number_from_isValid = false;

    m_number_to_isSet = false;
    m_number_to_isValid = false;

    m_prefix_size_isSet = false;
    m_prefix_size_isValid = false;

    m_replacement_string_isSet = false;
    m_replacement_string_isValid = false;

    m_rule_state_isSet = false;
    m_rule_state_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_suffix_size_isSet = false;
    m_suffix_size_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;
}

void OAIDataMaskingRuleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataMaskingRuleProperties::fromJsonObject(QJsonObject json) {

    m_alias_name_isValid = ::OpenAPI::fromJsonValue(m_alias_name, json[QString("aliasName")]);
    m_alias_name_isSet = !json[QString("aliasName")].isNull() && m_alias_name_isValid;

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("columnName")]);
    m_column_name_isSet = !json[QString("columnName")].isNull() && m_column_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_masking_function_isValid = ::OpenAPI::fromJsonValue(m_masking_function, json[QString("maskingFunction")]);
    m_masking_function_isSet = !json[QString("maskingFunction")].isNull() && m_masking_function_isValid;

    m_number_from_isValid = ::OpenAPI::fromJsonValue(m_number_from, json[QString("numberFrom")]);
    m_number_from_isSet = !json[QString("numberFrom")].isNull() && m_number_from_isValid;

    m_number_to_isValid = ::OpenAPI::fromJsonValue(m_number_to, json[QString("numberTo")]);
    m_number_to_isSet = !json[QString("numberTo")].isNull() && m_number_to_isValid;

    m_prefix_size_isValid = ::OpenAPI::fromJsonValue(m_prefix_size, json[QString("prefixSize")]);
    m_prefix_size_isSet = !json[QString("prefixSize")].isNull() && m_prefix_size_isValid;

    m_replacement_string_isValid = ::OpenAPI::fromJsonValue(m_replacement_string, json[QString("replacementString")]);
    m_replacement_string_isSet = !json[QString("replacementString")].isNull() && m_replacement_string_isValid;

    m_rule_state_isValid = ::OpenAPI::fromJsonValue(m_rule_state, json[QString("ruleState")]);
    m_rule_state_isSet = !json[QString("ruleState")].isNull() && m_rule_state_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_suffix_size_isValid = ::OpenAPI::fromJsonValue(m_suffix_size, json[QString("suffixSize")]);
    m_suffix_size_isSet = !json[QString("suffixSize")].isNull() && m_suffix_size_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;
}

QString OAIDataMaskingRuleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataMaskingRuleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_name_isSet) {
        obj.insert(QString("aliasName"), ::OpenAPI::toJsonValue(m_alias_name));
    }
    if (m_column_name_isSet) {
        obj.insert(QString("columnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_masking_function_isSet) {
        obj.insert(QString("maskingFunction"), ::OpenAPI::toJsonValue(m_masking_function));
    }
    if (m_number_from_isSet) {
        obj.insert(QString("numberFrom"), ::OpenAPI::toJsonValue(m_number_from));
    }
    if (m_number_to_isSet) {
        obj.insert(QString("numberTo"), ::OpenAPI::toJsonValue(m_number_to));
    }
    if (m_prefix_size_isSet) {
        obj.insert(QString("prefixSize"), ::OpenAPI::toJsonValue(m_prefix_size));
    }
    if (m_replacement_string_isSet) {
        obj.insert(QString("replacementString"), ::OpenAPI::toJsonValue(m_replacement_string));
    }
    if (m_rule_state_isSet) {
        obj.insert(QString("ruleState"), ::OpenAPI::toJsonValue(m_rule_state));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_suffix_size_isSet) {
        obj.insert(QString("suffixSize"), ::OpenAPI::toJsonValue(m_suffix_size));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    return obj;
}

QString OAIDataMaskingRuleProperties::getAliasName() const {
    return m_alias_name;
}
void OAIDataMaskingRuleProperties::setAliasName(const QString &alias_name) {
    m_alias_name = alias_name;
    m_alias_name_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_alias_name_Set() const{
    return m_alias_name_isSet;
}

bool OAIDataMaskingRuleProperties::is_alias_name_Valid() const{
    return m_alias_name_isValid;
}

QString OAIDataMaskingRuleProperties::getColumnName() const {
    return m_column_name;
}
void OAIDataMaskingRuleProperties::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIDataMaskingRuleProperties::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAIDataMaskingRuleProperties::getId() const {
    return m_id;
}
void OAIDataMaskingRuleProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataMaskingRuleProperties::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDataMaskingRuleProperties::getMaskingFunction() const {
    return m_masking_function;
}
void OAIDataMaskingRuleProperties::setMaskingFunction(const QString &masking_function) {
    m_masking_function = masking_function;
    m_masking_function_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_masking_function_Set() const{
    return m_masking_function_isSet;
}

bool OAIDataMaskingRuleProperties::is_masking_function_Valid() const{
    return m_masking_function_isValid;
}

QString OAIDataMaskingRuleProperties::getNumberFrom() const {
    return m_number_from;
}
void OAIDataMaskingRuleProperties::setNumberFrom(const QString &number_from) {
    m_number_from = number_from;
    m_number_from_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_number_from_Set() const{
    return m_number_from_isSet;
}

bool OAIDataMaskingRuleProperties::is_number_from_Valid() const{
    return m_number_from_isValid;
}

QString OAIDataMaskingRuleProperties::getNumberTo() const {
    return m_number_to;
}
void OAIDataMaskingRuleProperties::setNumberTo(const QString &number_to) {
    m_number_to = number_to;
    m_number_to_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_number_to_Set() const{
    return m_number_to_isSet;
}

bool OAIDataMaskingRuleProperties::is_number_to_Valid() const{
    return m_number_to_isValid;
}

QString OAIDataMaskingRuleProperties::getPrefixSize() const {
    return m_prefix_size;
}
void OAIDataMaskingRuleProperties::setPrefixSize(const QString &prefix_size) {
    m_prefix_size = prefix_size;
    m_prefix_size_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_prefix_size_Set() const{
    return m_prefix_size_isSet;
}

bool OAIDataMaskingRuleProperties::is_prefix_size_Valid() const{
    return m_prefix_size_isValid;
}

QString OAIDataMaskingRuleProperties::getReplacementString() const {
    return m_replacement_string;
}
void OAIDataMaskingRuleProperties::setReplacementString(const QString &replacement_string) {
    m_replacement_string = replacement_string;
    m_replacement_string_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_replacement_string_Set() const{
    return m_replacement_string_isSet;
}

bool OAIDataMaskingRuleProperties::is_replacement_string_Valid() const{
    return m_replacement_string_isValid;
}

QString OAIDataMaskingRuleProperties::getRuleState() const {
    return m_rule_state;
}
void OAIDataMaskingRuleProperties::setRuleState(const QString &rule_state) {
    m_rule_state = rule_state;
    m_rule_state_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_rule_state_Set() const{
    return m_rule_state_isSet;
}

bool OAIDataMaskingRuleProperties::is_rule_state_Valid() const{
    return m_rule_state_isValid;
}

QString OAIDataMaskingRuleProperties::getSchemaName() const {
    return m_schema_name;
}
void OAIDataMaskingRuleProperties::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIDataMaskingRuleProperties::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIDataMaskingRuleProperties::getSuffixSize() const {
    return m_suffix_size;
}
void OAIDataMaskingRuleProperties::setSuffixSize(const QString &suffix_size) {
    m_suffix_size = suffix_size;
    m_suffix_size_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_suffix_size_Set() const{
    return m_suffix_size_isSet;
}

bool OAIDataMaskingRuleProperties::is_suffix_size_Valid() const{
    return m_suffix_size_isValid;
}

QString OAIDataMaskingRuleProperties::getTableName() const {
    return m_table_name;
}
void OAIDataMaskingRuleProperties::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDataMaskingRuleProperties::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDataMaskingRuleProperties::is_table_name_Valid() const{
    return m_table_name_isValid;
}

bool OAIDataMaskingRuleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masking_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataMaskingRuleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_masking_function_isValid && m_schema_name_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
