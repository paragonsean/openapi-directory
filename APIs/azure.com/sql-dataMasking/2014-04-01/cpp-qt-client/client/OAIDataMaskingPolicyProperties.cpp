/**
 * Azure SQL Database Datamasking Policies and Rules
 * Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataMaskingPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataMaskingPolicyProperties::OAIDataMaskingPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataMaskingPolicyProperties::OAIDataMaskingPolicyProperties() {
    this->initializeModel();
}

OAIDataMaskingPolicyProperties::~OAIDataMaskingPolicyProperties() {}

void OAIDataMaskingPolicyProperties::initializeModel() {

    m_application_principals_isSet = false;
    m_application_principals_isValid = false;

    m_data_masking_state_isSet = false;
    m_data_masking_state_isValid = false;

    m_exempt_principals_isSet = false;
    m_exempt_principals_isValid = false;

    m_masking_level_isSet = false;
    m_masking_level_isValid = false;
}

void OAIDataMaskingPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataMaskingPolicyProperties::fromJsonObject(QJsonObject json) {

    m_application_principals_isValid = ::OpenAPI::fromJsonValue(m_application_principals, json[QString("applicationPrincipals")]);
    m_application_principals_isSet = !json[QString("applicationPrincipals")].isNull() && m_application_principals_isValid;

    m_data_masking_state_isValid = ::OpenAPI::fromJsonValue(m_data_masking_state, json[QString("dataMaskingState")]);
    m_data_masking_state_isSet = !json[QString("dataMaskingState")].isNull() && m_data_masking_state_isValid;

    m_exempt_principals_isValid = ::OpenAPI::fromJsonValue(m_exempt_principals, json[QString("exemptPrincipals")]);
    m_exempt_principals_isSet = !json[QString("exemptPrincipals")].isNull() && m_exempt_principals_isValid;

    m_masking_level_isValid = ::OpenAPI::fromJsonValue(m_masking_level, json[QString("maskingLevel")]);
    m_masking_level_isSet = !json[QString("maskingLevel")].isNull() && m_masking_level_isValid;
}

QString OAIDataMaskingPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataMaskingPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_principals_isSet) {
        obj.insert(QString("applicationPrincipals"), ::OpenAPI::toJsonValue(m_application_principals));
    }
    if (m_data_masking_state_isSet) {
        obj.insert(QString("dataMaskingState"), ::OpenAPI::toJsonValue(m_data_masking_state));
    }
    if (m_exempt_principals_isSet) {
        obj.insert(QString("exemptPrincipals"), ::OpenAPI::toJsonValue(m_exempt_principals));
    }
    if (m_masking_level_isSet) {
        obj.insert(QString("maskingLevel"), ::OpenAPI::toJsonValue(m_masking_level));
    }
    return obj;
}

QString OAIDataMaskingPolicyProperties::getApplicationPrincipals() const {
    return m_application_principals;
}
void OAIDataMaskingPolicyProperties::setApplicationPrincipals(const QString &application_principals) {
    m_application_principals = application_principals;
    m_application_principals_isSet = true;
}

bool OAIDataMaskingPolicyProperties::is_application_principals_Set() const{
    return m_application_principals_isSet;
}

bool OAIDataMaskingPolicyProperties::is_application_principals_Valid() const{
    return m_application_principals_isValid;
}

QString OAIDataMaskingPolicyProperties::getDataMaskingState() const {
    return m_data_masking_state;
}
void OAIDataMaskingPolicyProperties::setDataMaskingState(const QString &data_masking_state) {
    m_data_masking_state = data_masking_state;
    m_data_masking_state_isSet = true;
}

bool OAIDataMaskingPolicyProperties::is_data_masking_state_Set() const{
    return m_data_masking_state_isSet;
}

bool OAIDataMaskingPolicyProperties::is_data_masking_state_Valid() const{
    return m_data_masking_state_isValid;
}

QString OAIDataMaskingPolicyProperties::getExemptPrincipals() const {
    return m_exempt_principals;
}
void OAIDataMaskingPolicyProperties::setExemptPrincipals(const QString &exempt_principals) {
    m_exempt_principals = exempt_principals;
    m_exempt_principals_isSet = true;
}

bool OAIDataMaskingPolicyProperties::is_exempt_principals_Set() const{
    return m_exempt_principals_isSet;
}

bool OAIDataMaskingPolicyProperties::is_exempt_principals_Valid() const{
    return m_exempt_principals_isValid;
}

QString OAIDataMaskingPolicyProperties::getMaskingLevel() const {
    return m_masking_level;
}
void OAIDataMaskingPolicyProperties::setMaskingLevel(const QString &masking_level) {
    m_masking_level = masking_level;
    m_masking_level_isSet = true;
}

bool OAIDataMaskingPolicyProperties::is_masking_level_Set() const{
    return m_masking_level_isSet;
}

bool OAIDataMaskingPolicyProperties::is_masking_level_Valid() const{
    return m_masking_level_isValid;
}

bool OAIDataMaskingPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_principals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_masking_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exempt_principals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masking_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataMaskingPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_masking_state_isValid && true;
}

} // namespace OpenAPI
