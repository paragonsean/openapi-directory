/*
 * Azure SQL Database Datamasking Policies and Rules
 * Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a database data masking policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:17.633425-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataMaskingPolicyProperties {
  public static final String SERIALIZED_NAME_APPLICATION_PRINCIPALS = "applicationPrincipals";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PRINCIPALS)
  private String applicationPrincipals;

  /**
   * The state of the data masking policy.
   */
  @JsonAdapter(DataMaskingStateEnum.Adapter.class)
  public enum DataMaskingStateEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    DataMaskingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataMaskingStateEnum fromValue(String value) {
      for (DataMaskingStateEnum b : DataMaskingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataMaskingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataMaskingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataMaskingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataMaskingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataMaskingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_MASKING_STATE = "dataMaskingState";
  @SerializedName(SERIALIZED_NAME_DATA_MASKING_STATE)
  private DataMaskingStateEnum dataMaskingState;

  public static final String SERIALIZED_NAME_EXEMPT_PRINCIPALS = "exemptPrincipals";
  @SerializedName(SERIALIZED_NAME_EXEMPT_PRINCIPALS)
  private String exemptPrincipals;

  public static final String SERIALIZED_NAME_MASKING_LEVEL = "maskingLevel";
  @SerializedName(SERIALIZED_NAME_MASKING_LEVEL)
  private String maskingLevel;

  public DataMaskingPolicyProperties() {
  }

  public DataMaskingPolicyProperties(
     String applicationPrincipals, 
     String maskingLevel
  ) {
    this();
    this.applicationPrincipals = applicationPrincipals;
    this.maskingLevel = maskingLevel;
  }

  /**
   * The list of the application principals. This is a legacy parameter and is no longer used.
   * @return applicationPrincipals
   */
  @javax.annotation.Nullable
  public String getApplicationPrincipals() {
    return applicationPrincipals;
  }



  public DataMaskingPolicyProperties dataMaskingState(DataMaskingStateEnum dataMaskingState) {
    this.dataMaskingState = dataMaskingState;
    return this;
  }

  /**
   * The state of the data masking policy.
   * @return dataMaskingState
   */
  @javax.annotation.Nonnull
  public DataMaskingStateEnum getDataMaskingState() {
    return dataMaskingState;
  }

  public void setDataMaskingState(DataMaskingStateEnum dataMaskingState) {
    this.dataMaskingState = dataMaskingState;
  }


  public DataMaskingPolicyProperties exemptPrincipals(String exemptPrincipals) {
    this.exemptPrincipals = exemptPrincipals;
    return this;
  }

  /**
   * The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.
   * @return exemptPrincipals
   */
  @javax.annotation.Nullable
  public String getExemptPrincipals() {
    return exemptPrincipals;
  }

  public void setExemptPrincipals(String exemptPrincipals) {
    this.exemptPrincipals = exemptPrincipals;
  }


  /**
   * The masking level. This is a legacy parameter and is no longer used.
   * @return maskingLevel
   */
  @javax.annotation.Nullable
  public String getMaskingLevel() {
    return maskingLevel;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataMaskingPolicyProperties dataMaskingPolicyProperties = (DataMaskingPolicyProperties) o;
    return Objects.equals(this.applicationPrincipals, dataMaskingPolicyProperties.applicationPrincipals) &&
        Objects.equals(this.dataMaskingState, dataMaskingPolicyProperties.dataMaskingState) &&
        Objects.equals(this.exemptPrincipals, dataMaskingPolicyProperties.exemptPrincipals) &&
        Objects.equals(this.maskingLevel, dataMaskingPolicyProperties.maskingLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationPrincipals, dataMaskingState, exemptPrincipals, maskingLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataMaskingPolicyProperties {\n");
    sb.append("    applicationPrincipals: ").append(toIndentedString(applicationPrincipals)).append("\n");
    sb.append("    dataMaskingState: ").append(toIndentedString(dataMaskingState)).append("\n");
    sb.append("    exemptPrincipals: ").append(toIndentedString(exemptPrincipals)).append("\n");
    sb.append("    maskingLevel: ").append(toIndentedString(maskingLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationPrincipals");
    openapiFields.add("dataMaskingState");
    openapiFields.add("exemptPrincipals");
    openapiFields.add("maskingLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataMaskingState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataMaskingPolicyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataMaskingPolicyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataMaskingPolicyProperties is not found in the empty JSON string", DataMaskingPolicyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataMaskingPolicyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataMaskingPolicyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataMaskingPolicyProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationPrincipals") != null && !jsonObj.get("applicationPrincipals").isJsonNull()) && !jsonObj.get("applicationPrincipals").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationPrincipals` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationPrincipals").toString()));
      }
      if (!jsonObj.get("dataMaskingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataMaskingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataMaskingState").toString()));
      }
      // validate the required field `dataMaskingState`
      DataMaskingStateEnum.validateJsonElement(jsonObj.get("dataMaskingState"));
      if ((jsonObj.get("exemptPrincipals") != null && !jsonObj.get("exemptPrincipals").isJsonNull()) && !jsonObj.get("exemptPrincipals").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exemptPrincipals` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exemptPrincipals").toString()));
      }
      if ((jsonObj.get("maskingLevel") != null && !jsonObj.get("maskingLevel").isJsonNull()) && !jsonObj.get("maskingLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskingLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskingLevel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataMaskingPolicyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataMaskingPolicyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataMaskingPolicyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataMaskingPolicyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataMaskingPolicyProperties>() {
           @Override
           public void write(JsonWriter out, DataMaskingPolicyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataMaskingPolicyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataMaskingPolicyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataMaskingPolicyProperties
   * @throws IOException if the JSON string is invalid with respect to DataMaskingPolicyProperties
   */
  public static DataMaskingPolicyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataMaskingPolicyProperties.class);
  }

  /**
   * Convert an instance of DataMaskingPolicyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

