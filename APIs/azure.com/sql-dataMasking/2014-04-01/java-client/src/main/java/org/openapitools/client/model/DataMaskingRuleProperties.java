/*
 * Azure SQL Database Datamasking Policies and Rules
 * Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a database data masking rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:17.633425-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataMaskingRuleProperties {
  public static final String SERIALIZED_NAME_ALIAS_NAME = "aliasName";
  @SerializedName(SERIALIZED_NAME_ALIAS_NAME)
  private String aliasName;

  public static final String SERIALIZED_NAME_COLUMN_NAME = "columnName";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAME)
  private String columnName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The masking function that is used for the data masking rule.
   */
  @JsonAdapter(MaskingFunctionEnum.Adapter.class)
  public enum MaskingFunctionEnum {
    DEFAULT("Default"),
    
    CCN("CCN"),
    
    EMAIL("Email"),
    
    NUMBER("Number"),
    
    SSN("SSN"),
    
    TEXT("Text");

    private String value;

    MaskingFunctionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaskingFunctionEnum fromValue(String value) {
      for (MaskingFunctionEnum b : MaskingFunctionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaskingFunctionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaskingFunctionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaskingFunctionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaskingFunctionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaskingFunctionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MASKING_FUNCTION = "maskingFunction";
  @SerializedName(SERIALIZED_NAME_MASKING_FUNCTION)
  private MaskingFunctionEnum maskingFunction;

  public static final String SERIALIZED_NAME_NUMBER_FROM = "numberFrom";
  @SerializedName(SERIALIZED_NAME_NUMBER_FROM)
  private String numberFrom;

  public static final String SERIALIZED_NAME_NUMBER_TO = "numberTo";
  @SerializedName(SERIALIZED_NAME_NUMBER_TO)
  private String numberTo;

  public static final String SERIALIZED_NAME_PREFIX_SIZE = "prefixSize";
  @SerializedName(SERIALIZED_NAME_PREFIX_SIZE)
  private String prefixSize;

  public static final String SERIALIZED_NAME_REPLACEMENT_STRING = "replacementString";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_STRING)
  private String replacementString;

  /**
   * The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn&#39;t already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.
   */
  @JsonAdapter(RuleStateEnum.Adapter.class)
  public enum RuleStateEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    RuleStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleStateEnum fromValue(String value) {
      for (RuleStateEnum b : RuleStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_STATE = "ruleState";
  @SerializedName(SERIALIZED_NAME_RULE_STATE)
  private RuleStateEnum ruleState;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_SUFFIX_SIZE = "suffixSize";
  @SerializedName(SERIALIZED_NAME_SUFFIX_SIZE)
  private String suffixSize;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public DataMaskingRuleProperties() {
  }

  public DataMaskingRuleProperties(
     String id
  ) {
    this();
    this.id = id;
  }

  public DataMaskingRuleProperties aliasName(String aliasName) {
    this.aliasName = aliasName;
    return this;
  }

  /**
   * The alias name. This is a legacy parameter and is no longer used.
   * @return aliasName
   */
  @javax.annotation.Nullable
  public String getAliasName() {
    return aliasName;
  }

  public void setAliasName(String aliasName) {
    this.aliasName = aliasName;
  }


  public DataMaskingRuleProperties columnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

  /**
   * The column name on which the data masking rule is applied.
   * @return columnName
   */
  @javax.annotation.Nonnull
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }


  /**
   * The rule Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DataMaskingRuleProperties maskingFunction(MaskingFunctionEnum maskingFunction) {
    this.maskingFunction = maskingFunction;
    return this;
  }

  /**
   * The masking function that is used for the data masking rule.
   * @return maskingFunction
   */
  @javax.annotation.Nonnull
  public MaskingFunctionEnum getMaskingFunction() {
    return maskingFunction;
  }

  public void setMaskingFunction(MaskingFunctionEnum maskingFunction) {
    this.maskingFunction = maskingFunction;
  }


  public DataMaskingRuleProperties numberFrom(String numberFrom) {
    this.numberFrom = numberFrom;
    return this;
  }

  /**
   * The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
   * @return numberFrom
   */
  @javax.annotation.Nullable
  public String getNumberFrom() {
    return numberFrom;
  }

  public void setNumberFrom(String numberFrom) {
    this.numberFrom = numberFrom;
  }


  public DataMaskingRuleProperties numberTo(String numberTo) {
    this.numberTo = numberTo;
    return this;
  }

  /**
   * The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
   * @return numberTo
   */
  @javax.annotation.Nullable
  public String getNumberTo() {
    return numberTo;
  }

  public void setNumberTo(String numberTo) {
    this.numberTo = numberTo;
  }


  public DataMaskingRuleProperties prefixSize(String prefixSize) {
    this.prefixSize = prefixSize;
    return this;
  }

  /**
   * If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored.
   * @return prefixSize
   */
  @javax.annotation.Nullable
  public String getPrefixSize() {
    return prefixSize;
  }

  public void setPrefixSize(String prefixSize) {
    this.prefixSize = prefixSize;
  }


  public DataMaskingRuleProperties replacementString(String replacementString) {
    this.replacementString = replacementString;
    return this;
  }

  /**
   * If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored.
   * @return replacementString
   */
  @javax.annotation.Nullable
  public String getReplacementString() {
    return replacementString;
  }

  public void setReplacementString(String replacementString) {
    this.replacementString = replacementString;
  }


  public DataMaskingRuleProperties ruleState(RuleStateEnum ruleState) {
    this.ruleState = ruleState;
    return this;
  }

  /**
   * The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn&#39;t already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.
   * @return ruleState
   */
  @javax.annotation.Nullable
  public RuleStateEnum getRuleState() {
    return ruleState;
  }

  public void setRuleState(RuleStateEnum ruleState) {
    this.ruleState = ruleState;
  }


  public DataMaskingRuleProperties schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * The schema name on which the data masking rule is applied.
   * @return schemaName
   */
  @javax.annotation.Nonnull
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public DataMaskingRuleProperties suffixSize(String suffixSize) {
    this.suffixSize = suffixSize;
    return this;
  }

  /**
   * If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored.
   * @return suffixSize
   */
  @javax.annotation.Nullable
  public String getSuffixSize() {
    return suffixSize;
  }

  public void setSuffixSize(String suffixSize) {
    this.suffixSize = suffixSize;
  }


  public DataMaskingRuleProperties tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The table name on which the data masking rule is applied.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataMaskingRuleProperties dataMaskingRuleProperties = (DataMaskingRuleProperties) o;
    return Objects.equals(this.aliasName, dataMaskingRuleProperties.aliasName) &&
        Objects.equals(this.columnName, dataMaskingRuleProperties.columnName) &&
        Objects.equals(this.id, dataMaskingRuleProperties.id) &&
        Objects.equals(this.maskingFunction, dataMaskingRuleProperties.maskingFunction) &&
        Objects.equals(this.numberFrom, dataMaskingRuleProperties.numberFrom) &&
        Objects.equals(this.numberTo, dataMaskingRuleProperties.numberTo) &&
        Objects.equals(this.prefixSize, dataMaskingRuleProperties.prefixSize) &&
        Objects.equals(this.replacementString, dataMaskingRuleProperties.replacementString) &&
        Objects.equals(this.ruleState, dataMaskingRuleProperties.ruleState) &&
        Objects.equals(this.schemaName, dataMaskingRuleProperties.schemaName) &&
        Objects.equals(this.suffixSize, dataMaskingRuleProperties.suffixSize) &&
        Objects.equals(this.tableName, dataMaskingRuleProperties.tableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliasName, columnName, id, maskingFunction, numberFrom, numberTo, prefixSize, replacementString, ruleState, schemaName, suffixSize, tableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataMaskingRuleProperties {\n");
    sb.append("    aliasName: ").append(toIndentedString(aliasName)).append("\n");
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maskingFunction: ").append(toIndentedString(maskingFunction)).append("\n");
    sb.append("    numberFrom: ").append(toIndentedString(numberFrom)).append("\n");
    sb.append("    numberTo: ").append(toIndentedString(numberTo)).append("\n");
    sb.append("    prefixSize: ").append(toIndentedString(prefixSize)).append("\n");
    sb.append("    replacementString: ").append(toIndentedString(replacementString)).append("\n");
    sb.append("    ruleState: ").append(toIndentedString(ruleState)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    suffixSize: ").append(toIndentedString(suffixSize)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliasName");
    openapiFields.add("columnName");
    openapiFields.add("id");
    openapiFields.add("maskingFunction");
    openapiFields.add("numberFrom");
    openapiFields.add("numberTo");
    openapiFields.add("prefixSize");
    openapiFields.add("replacementString");
    openapiFields.add("ruleState");
    openapiFields.add("schemaName");
    openapiFields.add("suffixSize");
    openapiFields.add("tableName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("columnName");
    openapiRequiredFields.add("maskingFunction");
    openapiRequiredFields.add("schemaName");
    openapiRequiredFields.add("tableName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataMaskingRuleProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataMaskingRuleProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataMaskingRuleProperties is not found in the empty JSON string", DataMaskingRuleProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataMaskingRuleProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataMaskingRuleProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataMaskingRuleProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aliasName") != null && !jsonObj.get("aliasName").isJsonNull()) && !jsonObj.get("aliasName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aliasName").toString()));
      }
      if (!jsonObj.get("columnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("maskingFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskingFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskingFunction").toString()));
      }
      // validate the required field `maskingFunction`
      MaskingFunctionEnum.validateJsonElement(jsonObj.get("maskingFunction"));
      if ((jsonObj.get("numberFrom") != null && !jsonObj.get("numberFrom").isJsonNull()) && !jsonObj.get("numberFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberFrom").toString()));
      }
      if ((jsonObj.get("numberTo") != null && !jsonObj.get("numberTo").isJsonNull()) && !jsonObj.get("numberTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberTo").toString()));
      }
      if ((jsonObj.get("prefixSize") != null && !jsonObj.get("prefixSize").isJsonNull()) && !jsonObj.get("prefixSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefixSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefixSize").toString()));
      }
      if ((jsonObj.get("replacementString") != null && !jsonObj.get("replacementString").isJsonNull()) && !jsonObj.get("replacementString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacementString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replacementString").toString()));
      }
      if ((jsonObj.get("ruleState") != null && !jsonObj.get("ruleState").isJsonNull()) && !jsonObj.get("ruleState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleState").toString()));
      }
      // validate the optional field `ruleState`
      if (jsonObj.get("ruleState") != null && !jsonObj.get("ruleState").isJsonNull()) {
        RuleStateEnum.validateJsonElement(jsonObj.get("ruleState"));
      }
      if (!jsonObj.get("schemaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaName").toString()));
      }
      if ((jsonObj.get("suffixSize") != null && !jsonObj.get("suffixSize").isJsonNull()) && !jsonObj.get("suffixSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffixSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffixSize").toString()));
      }
      if (!jsonObj.get("tableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataMaskingRuleProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataMaskingRuleProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataMaskingRuleProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataMaskingRuleProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataMaskingRuleProperties>() {
           @Override
           public void write(JsonWriter out, DataMaskingRuleProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataMaskingRuleProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataMaskingRuleProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataMaskingRuleProperties
   * @throws IOException if the JSON string is invalid with respect to DataMaskingRuleProperties
   */
  public static DataMaskingRuleProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataMaskingRuleProperties.class);
  }

  /**
   * Convert an instance of DataMaskingRuleProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

