/**
 * Azure SQL Database Datamasking Policies and Rules
 * Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataMaskingRule from '../model/DataMaskingRule';
import DataMaskingRuleListResult from '../model/DataMaskingRuleListResult';

/**
* DataMaskingRules service.
* @module api/DataMaskingRulesApi
* @version 2014-04-01
*/
export default class DataMaskingRulesApi {

    /**
    * Constructs a new DataMaskingRulesApi. 
    * @alias module:api/DataMaskingRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataMaskingRulesCreateOrUpdate operation.
     * @callback module:api/DataMaskingRulesApi~dataMaskingRulesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataMaskingRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a database data masking rule.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} dataMaskingPolicyName The name of the database for which the data masking rule applies.
     * @param {String} dataMaskingRuleName The name of the data masking rule.
     * @param {module:model/DataMaskingRule} parameters The required parameters for creating or updating a data masking rule.
     * @param {module:api/DataMaskingRulesApi~dataMaskingRulesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataMaskingRule}
     */
    dataMaskingRulesCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, dataMaskingPolicyName, dataMaskingRuleName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataMaskingRulesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataMaskingRulesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataMaskingRulesCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling dataMaskingRulesCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataMaskingRulesCreateOrUpdate");
      }
      // verify the required parameter 'dataMaskingPolicyName' is set
      if (dataMaskingPolicyName === undefined || dataMaskingPolicyName === null) {
        throw new Error("Missing the required parameter 'dataMaskingPolicyName' when calling dataMaskingRulesCreateOrUpdate");
      }
      // verify the required parameter 'dataMaskingRuleName' is set
      if (dataMaskingRuleName === undefined || dataMaskingRuleName === null) {
        throw new Error("Missing the required parameter 'dataMaskingRuleName' when calling dataMaskingRulesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dataMaskingRulesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'dataMaskingPolicyName': dataMaskingPolicyName,
        'dataMaskingRuleName': dataMaskingRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataMaskingRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataMaskingRulesListByDatabase operation.
     * @callback module:api/DataMaskingRulesApi~dataMaskingRulesListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataMaskingRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of database data masking rules.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} dataMaskingPolicyName The name of the database for which the data masking rule applies.
     * @param {module:api/DataMaskingRulesApi~dataMaskingRulesListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataMaskingRuleListResult}
     */
    dataMaskingRulesListByDatabase(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, dataMaskingPolicyName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataMaskingRulesListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataMaskingRulesListByDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataMaskingRulesListByDatabase");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling dataMaskingRulesListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataMaskingRulesListByDatabase");
      }
      // verify the required parameter 'dataMaskingPolicyName' is set
      if (dataMaskingPolicyName === undefined || dataMaskingPolicyName === null) {
        throw new Error("Missing the required parameter 'dataMaskingPolicyName' when calling dataMaskingRulesListByDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'dataMaskingPolicyName': dataMaskingPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataMaskingRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
