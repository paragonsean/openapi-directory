/**
 * Azure SQL Database Datamasking Policies and Rules
 * Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataMaskingPolicyProperties model module.
 * @module model/DataMaskingPolicyProperties
 * @version 2014-04-01
 */
class DataMaskingPolicyProperties {
    /**
     * Constructs a new <code>DataMaskingPolicyProperties</code>.
     * The properties of a database data masking policy.
     * @alias module:model/DataMaskingPolicyProperties
     * @param dataMaskingState {module:model/DataMaskingPolicyProperties.DataMaskingStateEnum} The state of the data masking policy.
     */
    constructor(dataMaskingState) { 
        
        DataMaskingPolicyProperties.initialize(this, dataMaskingState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataMaskingState) { 
        obj['dataMaskingState'] = dataMaskingState;
    }

    /**
     * Constructs a <code>DataMaskingPolicyProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataMaskingPolicyProperties} obj Optional instance to populate.
     * @return {module:model/DataMaskingPolicyProperties} The populated <code>DataMaskingPolicyProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataMaskingPolicyProperties();

            if (data.hasOwnProperty('applicationPrincipals')) {
                obj['applicationPrincipals'] = ApiClient.convertToType(data['applicationPrincipals'], 'String');
            }
            if (data.hasOwnProperty('dataMaskingState')) {
                obj['dataMaskingState'] = ApiClient.convertToType(data['dataMaskingState'], 'String');
            }
            if (data.hasOwnProperty('exemptPrincipals')) {
                obj['exemptPrincipals'] = ApiClient.convertToType(data['exemptPrincipals'], 'String');
            }
            if (data.hasOwnProperty('maskingLevel')) {
                obj['maskingLevel'] = ApiClient.convertToType(data['maskingLevel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataMaskingPolicyProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataMaskingPolicyProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataMaskingPolicyProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['applicationPrincipals'] && !(typeof data['applicationPrincipals'] === 'string' || data['applicationPrincipals'] instanceof String)) {
            throw new Error("Expected the field `applicationPrincipals` to be a primitive type in the JSON string but got " + data['applicationPrincipals']);
        }
        // ensure the json data is a string
        if (data['dataMaskingState'] && !(typeof data['dataMaskingState'] === 'string' || data['dataMaskingState'] instanceof String)) {
            throw new Error("Expected the field `dataMaskingState` to be a primitive type in the JSON string but got " + data['dataMaskingState']);
        }
        // ensure the json data is a string
        if (data['exemptPrincipals'] && !(typeof data['exemptPrincipals'] === 'string' || data['exemptPrincipals'] instanceof String)) {
            throw new Error("Expected the field `exemptPrincipals` to be a primitive type in the JSON string but got " + data['exemptPrincipals']);
        }
        // ensure the json data is a string
        if (data['maskingLevel'] && !(typeof data['maskingLevel'] === 'string' || data['maskingLevel'] instanceof String)) {
            throw new Error("Expected the field `maskingLevel` to be a primitive type in the JSON string but got " + data['maskingLevel']);
        }

        return true;
    }


}

DataMaskingPolicyProperties.RequiredProperties = ["dataMaskingState"];

/**
 * The list of the application principals. This is a legacy parameter and is no longer used.
 * @member {String} applicationPrincipals
 */
DataMaskingPolicyProperties.prototype['applicationPrincipals'] = undefined;

/**
 * The state of the data masking policy.
 * @member {module:model/DataMaskingPolicyProperties.DataMaskingStateEnum} dataMaskingState
 */
DataMaskingPolicyProperties.prototype['dataMaskingState'] = undefined;

/**
 * The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.
 * @member {String} exemptPrincipals
 */
DataMaskingPolicyProperties.prototype['exemptPrincipals'] = undefined;

/**
 * The masking level. This is a legacy parameter and is no longer used.
 * @member {String} maskingLevel
 */
DataMaskingPolicyProperties.prototype['maskingLevel'] = undefined;





/**
 * Allowed values for the <code>dataMaskingState</code> property.
 * @enum {String}
 * @readonly
 */
DataMaskingPolicyProperties['DataMaskingStateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};



export default DataMaskingPolicyProperties;

