/**
 * Azure SQL Database Datamasking Policies and Rules
 * Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataMaskingRuleProperties model module.
 * @module model/DataMaskingRuleProperties
 * @version 2014-04-01
 */
class DataMaskingRuleProperties {
    /**
     * Constructs a new <code>DataMaskingRuleProperties</code>.
     * The properties of a database data masking rule.
     * @alias module:model/DataMaskingRuleProperties
     * @param columnName {String} The column name on which the data masking rule is applied.
     * @param maskingFunction {module:model/DataMaskingRuleProperties.MaskingFunctionEnum} The masking function that is used for the data masking rule.
     * @param schemaName {String} The schema name on which the data masking rule is applied.
     * @param tableName {String} The table name on which the data masking rule is applied.
     */
    constructor(columnName, maskingFunction, schemaName, tableName) { 
        
        DataMaskingRuleProperties.initialize(this, columnName, maskingFunction, schemaName, tableName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, columnName, maskingFunction, schemaName, tableName) { 
        obj['columnName'] = columnName;
        obj['maskingFunction'] = maskingFunction;
        obj['schemaName'] = schemaName;
        obj['tableName'] = tableName;
    }

    /**
     * Constructs a <code>DataMaskingRuleProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataMaskingRuleProperties} obj Optional instance to populate.
     * @return {module:model/DataMaskingRuleProperties} The populated <code>DataMaskingRuleProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataMaskingRuleProperties();

            if (data.hasOwnProperty('aliasName')) {
                obj['aliasName'] = ApiClient.convertToType(data['aliasName'], 'String');
            }
            if (data.hasOwnProperty('columnName')) {
                obj['columnName'] = ApiClient.convertToType(data['columnName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('maskingFunction')) {
                obj['maskingFunction'] = ApiClient.convertToType(data['maskingFunction'], 'String');
            }
            if (data.hasOwnProperty('numberFrom')) {
                obj['numberFrom'] = ApiClient.convertToType(data['numberFrom'], 'String');
            }
            if (data.hasOwnProperty('numberTo')) {
                obj['numberTo'] = ApiClient.convertToType(data['numberTo'], 'String');
            }
            if (data.hasOwnProperty('prefixSize')) {
                obj['prefixSize'] = ApiClient.convertToType(data['prefixSize'], 'String');
            }
            if (data.hasOwnProperty('replacementString')) {
                obj['replacementString'] = ApiClient.convertToType(data['replacementString'], 'String');
            }
            if (data.hasOwnProperty('ruleState')) {
                obj['ruleState'] = ApiClient.convertToType(data['ruleState'], 'String');
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('suffixSize')) {
                obj['suffixSize'] = ApiClient.convertToType(data['suffixSize'], 'String');
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataMaskingRuleProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataMaskingRuleProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataMaskingRuleProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aliasName'] && !(typeof data['aliasName'] === 'string' || data['aliasName'] instanceof String)) {
            throw new Error("Expected the field `aliasName` to be a primitive type in the JSON string but got " + data['aliasName']);
        }
        // ensure the json data is a string
        if (data['columnName'] && !(typeof data['columnName'] === 'string' || data['columnName'] instanceof String)) {
            throw new Error("Expected the field `columnName` to be a primitive type in the JSON string but got " + data['columnName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['maskingFunction'] && !(typeof data['maskingFunction'] === 'string' || data['maskingFunction'] instanceof String)) {
            throw new Error("Expected the field `maskingFunction` to be a primitive type in the JSON string but got " + data['maskingFunction']);
        }
        // ensure the json data is a string
        if (data['numberFrom'] && !(typeof data['numberFrom'] === 'string' || data['numberFrom'] instanceof String)) {
            throw new Error("Expected the field `numberFrom` to be a primitive type in the JSON string but got " + data['numberFrom']);
        }
        // ensure the json data is a string
        if (data['numberTo'] && !(typeof data['numberTo'] === 'string' || data['numberTo'] instanceof String)) {
            throw new Error("Expected the field `numberTo` to be a primitive type in the JSON string but got " + data['numberTo']);
        }
        // ensure the json data is a string
        if (data['prefixSize'] && !(typeof data['prefixSize'] === 'string' || data['prefixSize'] instanceof String)) {
            throw new Error("Expected the field `prefixSize` to be a primitive type in the JSON string but got " + data['prefixSize']);
        }
        // ensure the json data is a string
        if (data['replacementString'] && !(typeof data['replacementString'] === 'string' || data['replacementString'] instanceof String)) {
            throw new Error("Expected the field `replacementString` to be a primitive type in the JSON string but got " + data['replacementString']);
        }
        // ensure the json data is a string
        if (data['ruleState'] && !(typeof data['ruleState'] === 'string' || data['ruleState'] instanceof String)) {
            throw new Error("Expected the field `ruleState` to be a primitive type in the JSON string but got " + data['ruleState']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // ensure the json data is a string
        if (data['suffixSize'] && !(typeof data['suffixSize'] === 'string' || data['suffixSize'] instanceof String)) {
            throw new Error("Expected the field `suffixSize` to be a primitive type in the JSON string but got " + data['suffixSize']);
        }
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }

        return true;
    }


}

DataMaskingRuleProperties.RequiredProperties = ["columnName", "maskingFunction", "schemaName", "tableName"];

/**
 * The alias name. This is a legacy parameter and is no longer used.
 * @member {String} aliasName
 */
DataMaskingRuleProperties.prototype['aliasName'] = undefined;

/**
 * The column name on which the data masking rule is applied.
 * @member {String} columnName
 */
DataMaskingRuleProperties.prototype['columnName'] = undefined;

/**
 * The rule Id.
 * @member {String} id
 */
DataMaskingRuleProperties.prototype['id'] = undefined;

/**
 * The masking function that is used for the data masking rule.
 * @member {module:model/DataMaskingRuleProperties.MaskingFunctionEnum} maskingFunction
 */
DataMaskingRuleProperties.prototype['maskingFunction'] = undefined;

/**
 * The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
 * @member {String} numberFrom
 */
DataMaskingRuleProperties.prototype['numberFrom'] = undefined;

/**
 * The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
 * @member {String} numberTo
 */
DataMaskingRuleProperties.prototype['numberTo'] = undefined;

/**
 * If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored.
 * @member {String} prefixSize
 */
DataMaskingRuleProperties.prototype['prefixSize'] = undefined;

/**
 * If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored.
 * @member {String} replacementString
 */
DataMaskingRuleProperties.prototype['replacementString'] = undefined;

/**
 * The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.
 * @member {module:model/DataMaskingRuleProperties.RuleStateEnum} ruleState
 */
DataMaskingRuleProperties.prototype['ruleState'] = undefined;

/**
 * The schema name on which the data masking rule is applied.
 * @member {String} schemaName
 */
DataMaskingRuleProperties.prototype['schemaName'] = undefined;

/**
 * If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored.
 * @member {String} suffixSize
 */
DataMaskingRuleProperties.prototype['suffixSize'] = undefined;

/**
 * The table name on which the data masking rule is applied.
 * @member {String} tableName
 */
DataMaskingRuleProperties.prototype['tableName'] = undefined;





/**
 * Allowed values for the <code>maskingFunction</code> property.
 * @enum {String}
 * @readonly
 */
DataMaskingRuleProperties['MaskingFunctionEnum'] = {

    /**
     * value: "Default"
     * @const
     */
    "Default": "Default",

    /**
     * value: "CCN"
     * @const
     */
    "CCN": "CCN",

    /**
     * value: "Email"
     * @const
     */
    "Email": "Email",

    /**
     * value: "Number"
     * @const
     */
    "Number": "Number",

    /**
     * value: "SSN"
     * @const
     */
    "SSN": "SSN",

    /**
     * value: "Text"
     * @const
     */
    "Text": "Text"
};


/**
 * Allowed values for the <code>ruleState</code> property.
 * @enum {String}
 * @readonly
 */
DataMaskingRuleProperties['RuleStateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};



export default DataMaskingRuleProperties;

