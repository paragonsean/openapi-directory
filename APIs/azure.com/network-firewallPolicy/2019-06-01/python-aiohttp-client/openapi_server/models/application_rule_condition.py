# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_policy_rule_condition import FirewallPolicyRuleCondition
from openapi_server.models.firewall_policy_rule_condition_application_protocol import FirewallPolicyRuleConditionApplicationProtocol
from openapi_server import util


class ApplicationRuleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_addresses: List[str]=None, fqdn_tags: List[str]=None, protocols: List[FirewallPolicyRuleConditionApplicationProtocol]=None, source_addresses: List[str]=None, target_fqdns: List[str]=None, description: str=None, name: str=None, rule_condition_type: str=None):
        """ApplicationRuleCondition - a model defined in OpenAPI

        :param destination_addresses: The destination_addresses of this ApplicationRuleCondition.
        :param fqdn_tags: The fqdn_tags of this ApplicationRuleCondition.
        :param protocols: The protocols of this ApplicationRuleCondition.
        :param source_addresses: The source_addresses of this ApplicationRuleCondition.
        :param target_fqdns: The target_fqdns of this ApplicationRuleCondition.
        :param description: The description of this ApplicationRuleCondition.
        :param name: The name of this ApplicationRuleCondition.
        :param rule_condition_type: The rule_condition_type of this ApplicationRuleCondition.
        """
        self.openapi_types = {
            'destination_addresses': List[str],
            'fqdn_tags': List[str],
            'protocols': List[FirewallPolicyRuleConditionApplicationProtocol],
            'source_addresses': List[str],
            'target_fqdns': List[str],
            'description': str,
            'name': str,
            'rule_condition_type': str
        }

        self.attribute_map = {
            'destination_addresses': 'destinationAddresses',
            'fqdn_tags': 'fqdnTags',
            'protocols': 'protocols',
            'source_addresses': 'sourceAddresses',
            'target_fqdns': 'targetFqdns',
            'description': 'description',
            'name': 'name',
            'rule_condition_type': 'ruleConditionType'
        }

        self._destination_addresses = destination_addresses
        self._fqdn_tags = fqdn_tags
        self._protocols = protocols
        self._source_addresses = source_addresses
        self._target_fqdns = target_fqdns
        self._description = description
        self._name = name
        self._rule_condition_type = rule_condition_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationRuleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationRuleCondition of this ApplicationRuleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_addresses(self):
        """Gets the destination_addresses of this ApplicationRuleCondition.

        List of destination IP addresses or Service Tags.

        :return: The destination_addresses of this ApplicationRuleCondition.
        :rtype: List[str]
        """
        return self._destination_addresses

    @destination_addresses.setter
    def destination_addresses(self, destination_addresses):
        """Sets the destination_addresses of this ApplicationRuleCondition.

        List of destination IP addresses or Service Tags.

        :param destination_addresses: The destination_addresses of this ApplicationRuleCondition.
        :type destination_addresses: List[str]
        """

        self._destination_addresses = destination_addresses

    @property
    def fqdn_tags(self):
        """Gets the fqdn_tags of this ApplicationRuleCondition.

        List of FQDN Tags for this rule condition.

        :return: The fqdn_tags of this ApplicationRuleCondition.
        :rtype: List[str]
        """
        return self._fqdn_tags

    @fqdn_tags.setter
    def fqdn_tags(self, fqdn_tags):
        """Sets the fqdn_tags of this ApplicationRuleCondition.

        List of FQDN Tags for this rule condition.

        :param fqdn_tags: The fqdn_tags of this ApplicationRuleCondition.
        :type fqdn_tags: List[str]
        """

        self._fqdn_tags = fqdn_tags

    @property
    def protocols(self):
        """Gets the protocols of this ApplicationRuleCondition.

        Array of Application Protocols.

        :return: The protocols of this ApplicationRuleCondition.
        :rtype: List[FirewallPolicyRuleConditionApplicationProtocol]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ApplicationRuleCondition.

        Array of Application Protocols.

        :param protocols: The protocols of this ApplicationRuleCondition.
        :type protocols: List[FirewallPolicyRuleConditionApplicationProtocol]
        """

        self._protocols = protocols

    @property
    def source_addresses(self):
        """Gets the source_addresses of this ApplicationRuleCondition.

        List of source IP addresses for this rule.

        :return: The source_addresses of this ApplicationRuleCondition.
        :rtype: List[str]
        """
        return self._source_addresses

    @source_addresses.setter
    def source_addresses(self, source_addresses):
        """Sets the source_addresses of this ApplicationRuleCondition.

        List of source IP addresses for this rule.

        :param source_addresses: The source_addresses of this ApplicationRuleCondition.
        :type source_addresses: List[str]
        """

        self._source_addresses = source_addresses

    @property
    def target_fqdns(self):
        """Gets the target_fqdns of this ApplicationRuleCondition.

        List of FQDNs for this rule condition.

        :return: The target_fqdns of this ApplicationRuleCondition.
        :rtype: List[str]
        """
        return self._target_fqdns

    @target_fqdns.setter
    def target_fqdns(self, target_fqdns):
        """Sets the target_fqdns of this ApplicationRuleCondition.

        List of FQDNs for this rule condition.

        :param target_fqdns: The target_fqdns of this ApplicationRuleCondition.
        :type target_fqdns: List[str]
        """

        self._target_fqdns = target_fqdns

    @property
    def description(self):
        """Gets the description of this ApplicationRuleCondition.

        Description of the rule condition.

        :return: The description of this ApplicationRuleCondition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationRuleCondition.

        Description of the rule condition.

        :param description: The description of this ApplicationRuleCondition.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ApplicationRuleCondition.

        Name of the rule condition.

        :return: The name of this ApplicationRuleCondition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationRuleCondition.

        Name of the rule condition.

        :param name: The name of this ApplicationRuleCondition.
        :type name: str
        """

        self._name = name

    @property
    def rule_condition_type(self):
        """Gets the rule_condition_type of this ApplicationRuleCondition.

        Rule Condition Type

        :return: The rule_condition_type of this ApplicationRuleCondition.
        :rtype: str
        """
        return self._rule_condition_type

    @rule_condition_type.setter
    def rule_condition_type(self, rule_condition_type):
        """Sets the rule_condition_type of this ApplicationRuleCondition.

        Rule Condition Type

        :param rule_condition_type: The rule_condition_type of this ApplicationRuleCondition.
        :type rule_condition_type: str
        """
        allowed_values = ["ApplicationRuleCondition", "NetworkRuleCondition"]  # noqa: E501
        if rule_condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_condition_type` ({0}), must be one of {1}"
                .format(rule_condition_type, allowed_values)
            )

        self._rule_condition_type = rule_condition_type
