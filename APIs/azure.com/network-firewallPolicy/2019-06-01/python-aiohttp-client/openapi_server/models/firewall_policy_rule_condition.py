# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirewallPolicyRuleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, rule_condition_type: str=None):
        """FirewallPolicyRuleCondition - a model defined in OpenAPI

        :param description: The description of this FirewallPolicyRuleCondition.
        :param name: The name of this FirewallPolicyRuleCondition.
        :param rule_condition_type: The rule_condition_type of this FirewallPolicyRuleCondition.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'rule_condition_type': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'rule_condition_type': 'ruleConditionType'
        }

        self._description = description
        self._name = name
        self._rule_condition_type = rule_condition_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirewallPolicyRuleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirewallPolicyRuleCondition of this FirewallPolicyRuleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this FirewallPolicyRuleCondition.

        Description of the rule condition.

        :return: The description of this FirewallPolicyRuleCondition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FirewallPolicyRuleCondition.

        Description of the rule condition.

        :param description: The description of this FirewallPolicyRuleCondition.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this FirewallPolicyRuleCondition.

        Name of the rule condition.

        :return: The name of this FirewallPolicyRuleCondition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirewallPolicyRuleCondition.

        Name of the rule condition.

        :param name: The name of this FirewallPolicyRuleCondition.
        :type name: str
        """

        self._name = name

    @property
    def rule_condition_type(self):
        """Gets the rule_condition_type of this FirewallPolicyRuleCondition.

        Rule Condition Type

        :return: The rule_condition_type of this FirewallPolicyRuleCondition.
        :rtype: str
        """
        return self._rule_condition_type

    @rule_condition_type.setter
    def rule_condition_type(self, rule_condition_type):
        """Sets the rule_condition_type of this FirewallPolicyRuleCondition.

        Rule Condition Type

        :param rule_condition_type: The rule_condition_type of this FirewallPolicyRuleCondition.
        :type rule_condition_type: str
        """
        allowed_values = ["ApplicationRuleCondition", "NetworkRuleCondition"]  # noqa: E501
        if rule_condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_condition_type` ({0}), must be one of {1}"
                .format(rule_condition_type, allowed_values)
            )

        self._rule_condition_type = rule_condition_type
