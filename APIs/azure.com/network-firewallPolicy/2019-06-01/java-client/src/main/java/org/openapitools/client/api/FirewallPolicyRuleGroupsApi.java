/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FirewallPolicyRuleGroup;
import org.openapitools.client.model.FirewallPolicyRuleGroupListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FirewallPolicyRuleGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FirewallPolicyRuleGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FirewallPolicyRuleGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for firewallPolicyRuleGroupsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update FirewallPolicyRuleGroup operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. The operation returns the resulting FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPolicyRuleGroupsCreateOrUpdateCall(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, FirewallPolicyRuleGroup parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/ruleGroups/{ruleGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "firewallPolicyName" + "}", localVarApiClient.escapeString(firewallPolicyName.toString()))
            .replace("{" + "ruleGroupName" + "}", localVarApiClient.escapeString(ruleGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPolicyRuleGroupsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, FirewallPolicyRuleGroup parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPolicyRuleGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'firewallPolicyName' is set
        if (firewallPolicyName == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyName' when calling firewallPolicyRuleGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'ruleGroupName' is set
        if (ruleGroupName == null) {
            throw new ApiException("Missing the required parameter 'ruleGroupName' when calling firewallPolicyRuleGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPolicyRuleGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPolicyRuleGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling firewallPolicyRuleGroupsCreateOrUpdate(Async)");
        }

        return firewallPolicyRuleGroupsCreateOrUpdateCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update FirewallPolicyRuleGroup operation. (required)
     * @return FirewallPolicyRuleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. The operation returns the resulting FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
     </table>
     */
    public FirewallPolicyRuleGroup firewallPolicyRuleGroupsCreateOrUpdate(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, FirewallPolicyRuleGroup parameters) throws ApiException {
        ApiResponse<FirewallPolicyRuleGroup> localVarResp = firewallPolicyRuleGroupsCreateOrUpdateWithHttpInfo(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update FirewallPolicyRuleGroup operation. (required)
     * @return ApiResponse&lt;FirewallPolicyRuleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. The operation returns the resulting FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallPolicyRuleGroup> firewallPolicyRuleGroupsCreateOrUpdateWithHttpInfo(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, FirewallPolicyRuleGroup parameters) throws ApiException {
        okhttp3.Call localVarCall = firewallPolicyRuleGroupsCreateOrUpdateValidateBeforeCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<FirewallPolicyRuleGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update FirewallPolicyRuleGroup operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. The operation returns the resulting FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPolicyRuleGroupsCreateOrUpdateAsync(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, FirewallPolicyRuleGroup parameters, final ApiCallback<FirewallPolicyRuleGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPolicyRuleGroupsCreateOrUpdateValidateBeforeCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<FirewallPolicyRuleGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallPolicyRuleGroupsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPolicyRuleGroupsDeleteCall(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/ruleGroups/{ruleGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "firewallPolicyName" + "}", localVarApiClient.escapeString(firewallPolicyName.toString()))
            .replace("{" + "ruleGroupName" + "}", localVarApiClient.escapeString(ruleGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPolicyRuleGroupsDeleteValidateBeforeCall(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPolicyRuleGroupsDelete(Async)");
        }

        // verify the required parameter 'firewallPolicyName' is set
        if (firewallPolicyName == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyName' when calling firewallPolicyRuleGroupsDelete(Async)");
        }

        // verify the required parameter 'ruleGroupName' is set
        if (ruleGroupName == null) {
            throw new ApiException("Missing the required parameter 'ruleGroupName' when calling firewallPolicyRuleGroupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPolicyRuleGroupsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPolicyRuleGroupsDelete(Async)");
        }

        return firewallPolicyRuleGroupsDeleteCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void firewallPolicyRuleGroupsDelete(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId) throws ApiException {
        firewallPolicyRuleGroupsDeleteWithHttpInfo(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> firewallPolicyRuleGroupsDeleteWithHttpInfo(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = firewallPolicyRuleGroupsDeleteValidateBeforeCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPolicyRuleGroupsDeleteAsync(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPolicyRuleGroupsDeleteValidateBeforeCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallPolicyRuleGroupsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPolicyRuleGroupsGetCall(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/ruleGroups/{ruleGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "firewallPolicyName" + "}", localVarApiClient.escapeString(firewallPolicyName.toString()))
            .replace("{" + "ruleGroupName" + "}", localVarApiClient.escapeString(ruleGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPolicyRuleGroupsGetValidateBeforeCall(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPolicyRuleGroupsGet(Async)");
        }

        // verify the required parameter 'firewallPolicyName' is set
        if (firewallPolicyName == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyName' when calling firewallPolicyRuleGroupsGet(Async)");
        }

        // verify the required parameter 'ruleGroupName' is set
        if (ruleGroupName == null) {
            throw new ApiException("Missing the required parameter 'ruleGroupName' when calling firewallPolicyRuleGroupsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPolicyRuleGroupsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPolicyRuleGroupsGet(Async)");
        }

        return firewallPolicyRuleGroupsGetCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return FirewallPolicyRuleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
     </table>
     */
    public FirewallPolicyRuleGroup firewallPolicyRuleGroupsGet(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<FirewallPolicyRuleGroup> localVarResp = firewallPolicyRuleGroupsGetWithHttpInfo(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;FirewallPolicyRuleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallPolicyRuleGroup> firewallPolicyRuleGroupsGetWithHttpInfo(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = firewallPolicyRuleGroupsGetValidateBeforeCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<FirewallPolicyRuleGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified FirewallPolicyRuleGroup.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param ruleGroupName The name of the FirewallPolicyRuleGroup. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a FirewallPolicyRuleGroup resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPolicyRuleGroupsGetAsync(String resourceGroupName, String firewallPolicyName, String ruleGroupName, String apiVersion, String subscriptionId, final ApiCallback<FirewallPolicyRuleGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPolicyRuleGroupsGetValidateBeforeCall(resourceGroupName, firewallPolicyName, ruleGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<FirewallPolicyRuleGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallPolicyRuleGroupsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicyRuleGroup resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPolicyRuleGroupsListCall(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/ruleGroups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "firewallPolicyName" + "}", localVarApiClient.escapeString(firewallPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPolicyRuleGroupsListValidateBeforeCall(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPolicyRuleGroupsList(Async)");
        }

        // verify the required parameter 'firewallPolicyName' is set
        if (firewallPolicyName == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyName' when calling firewallPolicyRuleGroupsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPolicyRuleGroupsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPolicyRuleGroupsList(Async)");
        }

        return firewallPolicyRuleGroupsListCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all FirewallPolicyRuleGroups in a FirewallPolicy resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return FirewallPolicyRuleGroupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicyRuleGroup resources. </td><td>  -  </td></tr>
     </table>
     */
    public FirewallPolicyRuleGroupListResult firewallPolicyRuleGroupsList(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<FirewallPolicyRuleGroupListResult> localVarResp = firewallPolicyRuleGroupsListWithHttpInfo(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all FirewallPolicyRuleGroups in a FirewallPolicy resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;FirewallPolicyRuleGroupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicyRuleGroup resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallPolicyRuleGroupListResult> firewallPolicyRuleGroupsListWithHttpInfo(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = firewallPolicyRuleGroupsListValidateBeforeCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<FirewallPolicyRuleGroupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all FirewallPolicyRuleGroups in a FirewallPolicy resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicyRuleGroup resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPolicyRuleGroupsListAsync(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, final ApiCallback<FirewallPolicyRuleGroupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPolicyRuleGroupsListValidateBeforeCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<FirewallPolicyRuleGroupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
