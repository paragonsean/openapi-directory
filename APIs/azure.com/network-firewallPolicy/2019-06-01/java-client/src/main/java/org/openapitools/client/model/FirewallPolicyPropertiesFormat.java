/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FirewallPolicyPropertiesFormatBasePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Firewall Policy definition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:14.291083-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirewallPolicyPropertiesFormat {
  public static final String SERIALIZED_NAME_BASE_POLICY = "basePolicy";
  @SerializedName(SERIALIZED_NAME_BASE_POLICY)
  private FirewallPolicyPropertiesFormatBasePolicy basePolicy;

  public static final String SERIALIZED_NAME_CHILD_POLICIES = "childPolicies";
  @SerializedName(SERIALIZED_NAME_CHILD_POLICIES)
  private List<FirewallPolicyPropertiesFormatBasePolicy> childPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIREWALLS = "firewalls";
  @SerializedName(SERIALIZED_NAME_FIREWALLS)
  private List<FirewallPolicyPropertiesFormatBasePolicy> firewalls = new ArrayList<>();

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RULE_GROUPS = "ruleGroups";
  @SerializedName(SERIALIZED_NAME_RULE_GROUPS)
  private List<FirewallPolicyPropertiesFormatBasePolicy> ruleGroups = new ArrayList<>();

  /**
   * The operation mode for Threat Intel.
   */
  @JsonAdapter(ThreatIntelModeEnum.Adapter.class)
  public enum ThreatIntelModeEnum {
    ALERT("Alert"),
    
    DENY("Deny"),
    
    OFF("Off");

    private String value;

    ThreatIntelModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThreatIntelModeEnum fromValue(String value) {
      for (ThreatIntelModeEnum b : ThreatIntelModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThreatIntelModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThreatIntelModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThreatIntelModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThreatIntelModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThreatIntelModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THREAT_INTEL_MODE = "threatIntelMode";
  @SerializedName(SERIALIZED_NAME_THREAT_INTEL_MODE)
  private ThreatIntelModeEnum threatIntelMode;

  public FirewallPolicyPropertiesFormat() {
  }

  public FirewallPolicyPropertiesFormat(
     List<FirewallPolicyPropertiesFormatBasePolicy> childPolicies, 
     List<FirewallPolicyPropertiesFormatBasePolicy> firewalls, 
     ProvisioningStateEnum provisioningState, 
     List<FirewallPolicyPropertiesFormatBasePolicy> ruleGroups
  ) {
    this();
    this.childPolicies = childPolicies;
    this.firewalls = firewalls;
    this.provisioningState = provisioningState;
    this.ruleGroups = ruleGroups;
  }

  public FirewallPolicyPropertiesFormat basePolicy(FirewallPolicyPropertiesFormatBasePolicy basePolicy) {
    this.basePolicy = basePolicy;
    return this;
  }

  /**
   * Get basePolicy
   * @return basePolicy
   */
  @javax.annotation.Nullable
  public FirewallPolicyPropertiesFormatBasePolicy getBasePolicy() {
    return basePolicy;
  }

  public void setBasePolicy(FirewallPolicyPropertiesFormatBasePolicy basePolicy) {
    this.basePolicy = basePolicy;
  }


  /**
   * List of references to Child Firewall Policies
   * @return childPolicies
   */
  @javax.annotation.Nullable
  public List<FirewallPolicyPropertiesFormatBasePolicy> getChildPolicies() {
    return childPolicies;
  }



  /**
   * List of references to Azure Firewalls that this Firewall Policy is associated with
   * @return firewalls
   */
  @javax.annotation.Nullable
  public List<FirewallPolicyPropertiesFormatBasePolicy> getFirewalls() {
    return firewalls;
  }



  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * List of references to FirewallPolicyRuleGroups
   * @return ruleGroups
   */
  @javax.annotation.Nullable
  public List<FirewallPolicyPropertiesFormatBasePolicy> getRuleGroups() {
    return ruleGroups;
  }



  public FirewallPolicyPropertiesFormat threatIntelMode(ThreatIntelModeEnum threatIntelMode) {
    this.threatIntelMode = threatIntelMode;
    return this;
  }

  /**
   * The operation mode for Threat Intel.
   * @return threatIntelMode
   */
  @javax.annotation.Nullable
  public ThreatIntelModeEnum getThreatIntelMode() {
    return threatIntelMode;
  }

  public void setThreatIntelMode(ThreatIntelModeEnum threatIntelMode) {
    this.threatIntelMode = threatIntelMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallPolicyPropertiesFormat firewallPolicyPropertiesFormat = (FirewallPolicyPropertiesFormat) o;
    return Objects.equals(this.basePolicy, firewallPolicyPropertiesFormat.basePolicy) &&
        Objects.equals(this.childPolicies, firewallPolicyPropertiesFormat.childPolicies) &&
        Objects.equals(this.firewalls, firewallPolicyPropertiesFormat.firewalls) &&
        Objects.equals(this.provisioningState, firewallPolicyPropertiesFormat.provisioningState) &&
        Objects.equals(this.ruleGroups, firewallPolicyPropertiesFormat.ruleGroups) &&
        Objects.equals(this.threatIntelMode, firewallPolicyPropertiesFormat.threatIntelMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePolicy, childPolicies, firewalls, provisioningState, ruleGroups, threatIntelMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallPolicyPropertiesFormat {\n");
    sb.append("    basePolicy: ").append(toIndentedString(basePolicy)).append("\n");
    sb.append("    childPolicies: ").append(toIndentedString(childPolicies)).append("\n");
    sb.append("    firewalls: ").append(toIndentedString(firewalls)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    ruleGroups: ").append(toIndentedString(ruleGroups)).append("\n");
    sb.append("    threatIntelMode: ").append(toIndentedString(threatIntelMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basePolicy");
    openapiFields.add("childPolicies");
    openapiFields.add("firewalls");
    openapiFields.add("provisioningState");
    openapiFields.add("ruleGroups");
    openapiFields.add("threatIntelMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirewallPolicyPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallPolicyPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallPolicyPropertiesFormat is not found in the empty JSON string", FirewallPolicyPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallPolicyPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallPolicyPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basePolicy`
      if (jsonObj.get("basePolicy") != null && !jsonObj.get("basePolicy").isJsonNull()) {
        FirewallPolicyPropertiesFormatBasePolicy.validateJsonElement(jsonObj.get("basePolicy"));
      }
      if (jsonObj.get("childPolicies") != null && !jsonObj.get("childPolicies").isJsonNull()) {
        JsonArray jsonArraychildPolicies = jsonObj.getAsJsonArray("childPolicies");
        if (jsonArraychildPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("childPolicies").toString()));
          }

          // validate the optional field `childPolicies` (array)
          for (int i = 0; i < jsonArraychildPolicies.size(); i++) {
            FirewallPolicyPropertiesFormatBasePolicy.validateJsonElement(jsonArraychildPolicies.get(i));
          };
        }
      }
      if (jsonObj.get("firewalls") != null && !jsonObj.get("firewalls").isJsonNull()) {
        JsonArray jsonArrayfirewalls = jsonObj.getAsJsonArray("firewalls");
        if (jsonArrayfirewalls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("firewalls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `firewalls` to be an array in the JSON string but got `%s`", jsonObj.get("firewalls").toString()));
          }

          // validate the optional field `firewalls` (array)
          for (int i = 0; i < jsonArrayfirewalls.size(); i++) {
            FirewallPolicyPropertiesFormatBasePolicy.validateJsonElement(jsonArrayfirewalls.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (jsonObj.get("ruleGroups") != null && !jsonObj.get("ruleGroups").isJsonNull()) {
        JsonArray jsonArrayruleGroups = jsonObj.getAsJsonArray("ruleGroups");
        if (jsonArrayruleGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ruleGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ruleGroups` to be an array in the JSON string but got `%s`", jsonObj.get("ruleGroups").toString()));
          }

          // validate the optional field `ruleGroups` (array)
          for (int i = 0; i < jsonArrayruleGroups.size(); i++) {
            FirewallPolicyPropertiesFormatBasePolicy.validateJsonElement(jsonArrayruleGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("threatIntelMode") != null && !jsonObj.get("threatIntelMode").isJsonNull()) && !jsonObj.get("threatIntelMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threatIntelMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threatIntelMode").toString()));
      }
      // validate the optional field `threatIntelMode`
      if (jsonObj.get("threatIntelMode") != null && !jsonObj.get("threatIntelMode").isJsonNull()) {
        ThreatIntelModeEnum.validateJsonElement(jsonObj.get("threatIntelMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallPolicyPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallPolicyPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallPolicyPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallPolicyPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallPolicyPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, FirewallPolicyPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallPolicyPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FirewallPolicyPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirewallPolicyPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to FirewallPolicyPropertiesFormat
   */
  public static FirewallPolicyPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallPolicyPropertiesFormat.class);
  }

  /**
   * Convert an instance of FirewallPolicyPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

