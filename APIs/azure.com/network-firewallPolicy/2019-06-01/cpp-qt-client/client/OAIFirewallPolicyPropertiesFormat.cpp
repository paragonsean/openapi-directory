/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirewallPolicyPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirewallPolicyPropertiesFormat::OAIFirewallPolicyPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirewallPolicyPropertiesFormat::OAIFirewallPolicyPropertiesFormat() {
    this->initializeModel();
}

OAIFirewallPolicyPropertiesFormat::~OAIFirewallPolicyPropertiesFormat() {}

void OAIFirewallPolicyPropertiesFormat::initializeModel() {

    m_base_policy_isSet = false;
    m_base_policy_isValid = false;

    m_child_policies_isSet = false;
    m_child_policies_isValid = false;

    m_firewalls_isSet = false;
    m_firewalls_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_rule_groups_isSet = false;
    m_rule_groups_isValid = false;

    m_threat_intel_mode_isSet = false;
    m_threat_intel_mode_isValid = false;
}

void OAIFirewallPolicyPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirewallPolicyPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_base_policy_isValid = ::OpenAPI::fromJsonValue(m_base_policy, json[QString("basePolicy")]);
    m_base_policy_isSet = !json[QString("basePolicy")].isNull() && m_base_policy_isValid;

    m_child_policies_isValid = ::OpenAPI::fromJsonValue(m_child_policies, json[QString("childPolicies")]);
    m_child_policies_isSet = !json[QString("childPolicies")].isNull() && m_child_policies_isValid;

    m_firewalls_isValid = ::OpenAPI::fromJsonValue(m_firewalls, json[QString("firewalls")]);
    m_firewalls_isSet = !json[QString("firewalls")].isNull() && m_firewalls_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_rule_groups_isValid = ::OpenAPI::fromJsonValue(m_rule_groups, json[QString("ruleGroups")]);
    m_rule_groups_isSet = !json[QString("ruleGroups")].isNull() && m_rule_groups_isValid;

    m_threat_intel_mode_isValid = ::OpenAPI::fromJsonValue(m_threat_intel_mode, json[QString("threatIntelMode")]);
    m_threat_intel_mode_isSet = !json[QString("threatIntelMode")].isNull() && m_threat_intel_mode_isValid;
}

QString OAIFirewallPolicyPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirewallPolicyPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_base_policy.isSet()) {
        obj.insert(QString("basePolicy"), ::OpenAPI::toJsonValue(m_base_policy));
    }
    if (m_child_policies.size() > 0) {
        obj.insert(QString("childPolicies"), ::OpenAPI::toJsonValue(m_child_policies));
    }
    if (m_firewalls.size() > 0) {
        obj.insert(QString("firewalls"), ::OpenAPI::toJsonValue(m_firewalls));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_rule_groups.size() > 0) {
        obj.insert(QString("ruleGroups"), ::OpenAPI::toJsonValue(m_rule_groups));
    }
    if (m_threat_intel_mode_isSet) {
        obj.insert(QString("threatIntelMode"), ::OpenAPI::toJsonValue(m_threat_intel_mode));
    }
    return obj;
}

OAIFirewallPolicyPropertiesFormat_basePolicy OAIFirewallPolicyPropertiesFormat::getBasePolicy() const {
    return m_base_policy;
}
void OAIFirewallPolicyPropertiesFormat::setBasePolicy(const OAIFirewallPolicyPropertiesFormat_basePolicy &base_policy) {
    m_base_policy = base_policy;
    m_base_policy_isSet = true;
}

bool OAIFirewallPolicyPropertiesFormat::is_base_policy_Set() const{
    return m_base_policy_isSet;
}

bool OAIFirewallPolicyPropertiesFormat::is_base_policy_Valid() const{
    return m_base_policy_isValid;
}

QList<OAIFirewallPolicyPropertiesFormat_basePolicy> OAIFirewallPolicyPropertiesFormat::getChildPolicies() const {
    return m_child_policies;
}
void OAIFirewallPolicyPropertiesFormat::setChildPolicies(const QList<OAIFirewallPolicyPropertiesFormat_basePolicy> &child_policies) {
    m_child_policies = child_policies;
    m_child_policies_isSet = true;
}

bool OAIFirewallPolicyPropertiesFormat::is_child_policies_Set() const{
    return m_child_policies_isSet;
}

bool OAIFirewallPolicyPropertiesFormat::is_child_policies_Valid() const{
    return m_child_policies_isValid;
}

QList<OAIFirewallPolicyPropertiesFormat_basePolicy> OAIFirewallPolicyPropertiesFormat::getFirewalls() const {
    return m_firewalls;
}
void OAIFirewallPolicyPropertiesFormat::setFirewalls(const QList<OAIFirewallPolicyPropertiesFormat_basePolicy> &firewalls) {
    m_firewalls = firewalls;
    m_firewalls_isSet = true;
}

bool OAIFirewallPolicyPropertiesFormat::is_firewalls_Set() const{
    return m_firewalls_isSet;
}

bool OAIFirewallPolicyPropertiesFormat::is_firewalls_Valid() const{
    return m_firewalls_isValid;
}

QString OAIFirewallPolicyPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIFirewallPolicyPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIFirewallPolicyPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIFirewallPolicyPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIFirewallPolicyPropertiesFormat_basePolicy> OAIFirewallPolicyPropertiesFormat::getRuleGroups() const {
    return m_rule_groups;
}
void OAIFirewallPolicyPropertiesFormat::setRuleGroups(const QList<OAIFirewallPolicyPropertiesFormat_basePolicy> &rule_groups) {
    m_rule_groups = rule_groups;
    m_rule_groups_isSet = true;
}

bool OAIFirewallPolicyPropertiesFormat::is_rule_groups_Set() const{
    return m_rule_groups_isSet;
}

bool OAIFirewallPolicyPropertiesFormat::is_rule_groups_Valid() const{
    return m_rule_groups_isValid;
}

QString OAIFirewallPolicyPropertiesFormat::getThreatIntelMode() const {
    return m_threat_intel_mode;
}
void OAIFirewallPolicyPropertiesFormat::setThreatIntelMode(const QString &threat_intel_mode) {
    m_threat_intel_mode = threat_intel_mode;
    m_threat_intel_mode_isSet = true;
}

bool OAIFirewallPolicyPropertiesFormat::is_threat_intel_mode_Set() const{
    return m_threat_intel_mode_isSet;
}

bool OAIFirewallPolicyPropertiesFormat::is_threat_intel_mode_Valid() const{
    return m_threat_intel_mode_isValid;
}

bool OAIFirewallPolicyPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewalls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_threat_intel_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirewallPolicyPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
