/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FirewallPoliciesUpdateTagsDefaultResponse;
import org.openapitools.client.model.FirewallPoliciesUpdateTagsRequest;
import org.openapitools.client.model.FirewallPolicy;
import org.openapitools.client.model.FirewallPolicyListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FirewallPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FirewallPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FirewallPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for firewallPoliciesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update Firewall Policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting FirewallPolicy resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. The operation returns the resulting FirewallPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesCreateOrUpdateCall(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, FirewallPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "firewallPolicyName" + "}", localVarApiClient.escapeString(firewallPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPoliciesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, FirewallPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'firewallPolicyName' is set
        if (firewallPolicyName == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyName' when calling firewallPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling firewallPoliciesCreateOrUpdate(Async)");
        }

        return firewallPoliciesCreateOrUpdateCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update Firewall Policy operation. (required)
     * @return FirewallPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting FirewallPolicy resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. The operation returns the resulting FirewallPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public FirewallPolicy firewallPoliciesCreateOrUpdate(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, FirewallPolicy parameters) throws ApiException {
        ApiResponse<FirewallPolicy> localVarResp = firewallPoliciesCreateOrUpdateWithHttpInfo(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update Firewall Policy operation. (required)
     * @return ApiResponse&lt;FirewallPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting FirewallPolicy resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. The operation returns the resulting FirewallPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallPolicy> firewallPoliciesCreateOrUpdateWithHttpInfo(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, FirewallPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = firewallPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<FirewallPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update Firewall Policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting FirewallPolicy resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request received successfully. The operation returns the resulting FirewallPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesCreateOrUpdateAsync(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, FirewallPolicy parameters, final ApiCallback<FirewallPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<FirewallPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallPoliciesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesDeleteCall(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "firewallPolicyName" + "}", localVarApiClient.escapeString(firewallPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPoliciesDeleteValidateBeforeCall(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPoliciesDelete(Async)");
        }

        // verify the required parameter 'firewallPolicyName' is set
        if (firewallPolicyName == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyName' when calling firewallPoliciesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPoliciesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPoliciesDelete(Async)");
        }

        return firewallPoliciesDeleteCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void firewallPoliciesDelete(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        firewallPoliciesDeleteWithHttpInfo(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> firewallPoliciesDeleteWithHttpInfo(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = firewallPoliciesDeleteValidateBeforeCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource with the specified name does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesDeleteAsync(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPoliciesDeleteValidateBeforeCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallPoliciesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a Firewall Policy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesGetCall(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "firewallPolicyName" + "}", localVarApiClient.escapeString(firewallPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPoliciesGetValidateBeforeCall(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPoliciesGet(Async)");
        }

        // verify the required parameter 'firewallPolicyName' is set
        if (firewallPolicyName == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyName' when calling firewallPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPoliciesGet(Async)");
        }

        return firewallPoliciesGetCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, $expand, _callback);

    }

    /**
     * 
     * Gets the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @return FirewallPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a Firewall Policy resource. </td><td>  -  </td></tr>
     </table>
     */
    public FirewallPolicy firewallPoliciesGet(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        ApiResponse<FirewallPolicy> localVarResp = firewallPoliciesGetWithHttpInfo(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @return ApiResponse&lt;FirewallPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a Firewall Policy resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallPolicy> firewallPoliciesGetWithHttpInfo(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        okhttp3.Call localVarCall = firewallPoliciesGetValidateBeforeCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, $expand, null);
        Type localVarReturnType = new TypeToken<FirewallPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified Firewall Policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param firewallPolicyName The name of the Firewall Policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a Firewall Policy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesGetAsync(String resourceGroupName, String firewallPolicyName, String apiVersion, String subscriptionId, String $expand, final ApiCallback<FirewallPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPoliciesGetValidateBeforeCall(resourceGroupName, firewallPolicyName, apiVersion, subscriptionId, $expand, _callback);
        Type localVarReturnType = new TypeToken<FirewallPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallPoliciesList
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesListCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPoliciesListValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPoliciesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPoliciesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPoliciesList(Async)");
        }

        return firewallPoliciesListCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all Firewall Policies in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return FirewallPolicyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public FirewallPolicyListResult firewallPoliciesList(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<FirewallPolicyListResult> localVarResp = firewallPoliciesListWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all Firewall Policies in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;FirewallPolicyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallPolicyListResult> firewallPoliciesListWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = firewallPoliciesListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<FirewallPolicyListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all Firewall Policies in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesListAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<FirewallPolicyListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPoliciesListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<FirewallPolicyListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallPoliciesListAll
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesListAllCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/firewallPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPoliciesListAllValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPoliciesListAll(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPoliciesListAll(Async)");
        }

        return firewallPoliciesListAllCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the Firewall Policies in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return FirewallPolicyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public FirewallPolicyListResult firewallPoliciesListAll(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<FirewallPolicyListResult> localVarResp = firewallPoliciesListAllWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the Firewall Policies in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;FirewallPolicyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallPolicyListResult> firewallPoliciesListAllWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = firewallPoliciesListAllValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<FirewallPolicyListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the Firewall Policies in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The operation returns a list of FirewallPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesListAllAsync(String apiVersion, String subscriptionId, final ApiCallback<FirewallPolicyListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPoliciesListAllValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<FirewallPolicyListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallPoliciesUpdateTags
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the Firewall Policy. (required)
     * @param firewallPolicyName The name of the Firewall Policy being updated. (required)
     * @param apiVersion Client API version. (required)
     * @param firewallPolicyParameters Parameters supplied to Update Firewall Policy tags. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the Firewall Policy updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesUpdateTagsCall(String subscriptionId, String resourceGroupName, String firewallPolicyName, String apiVersion, FirewallPoliciesUpdateTagsRequest firewallPolicyParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = firewallPolicyParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "firewallPolicyName" + "}", localVarApiClient.escapeString(firewallPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallPoliciesUpdateTagsValidateBeforeCall(String subscriptionId, String resourceGroupName, String firewallPolicyName, String apiVersion, FirewallPoliciesUpdateTagsRequest firewallPolicyParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallPoliciesUpdateTags(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallPoliciesUpdateTags(Async)");
        }

        // verify the required parameter 'firewallPolicyName' is set
        if (firewallPolicyName == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyName' when calling firewallPoliciesUpdateTags(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallPoliciesUpdateTags(Async)");
        }

        // verify the required parameter 'firewallPolicyParameters' is set
        if (firewallPolicyParameters == null) {
            throw new ApiException("Missing the required parameter 'firewallPolicyParameters' when calling firewallPoliciesUpdateTags(Async)");
        }

        return firewallPoliciesUpdateTagsCall(subscriptionId, resourceGroupName, firewallPolicyName, apiVersion, firewallPolicyParameters, _callback);

    }

    /**
     * 
     * Updates a Firewall Policy Tags.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the Firewall Policy. (required)
     * @param firewallPolicyName The name of the Firewall Policy being updated. (required)
     * @param apiVersion Client API version. (required)
     * @param firewallPolicyParameters Parameters supplied to Update Firewall Policy tags. (required)
     * @return FirewallPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the Firewall Policy updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public FirewallPolicy firewallPoliciesUpdateTags(String subscriptionId, String resourceGroupName, String firewallPolicyName, String apiVersion, FirewallPoliciesUpdateTagsRequest firewallPolicyParameters) throws ApiException {
        ApiResponse<FirewallPolicy> localVarResp = firewallPoliciesUpdateTagsWithHttpInfo(subscriptionId, resourceGroupName, firewallPolicyName, apiVersion, firewallPolicyParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Firewall Policy Tags.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the Firewall Policy. (required)
     * @param firewallPolicyName The name of the Firewall Policy being updated. (required)
     * @param apiVersion Client API version. (required)
     * @param firewallPolicyParameters Parameters supplied to Update Firewall Policy tags. (required)
     * @return ApiResponse&lt;FirewallPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the Firewall Policy updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirewallPolicy> firewallPoliciesUpdateTagsWithHttpInfo(String subscriptionId, String resourceGroupName, String firewallPolicyName, String apiVersion, FirewallPoliciesUpdateTagsRequest firewallPolicyParameters) throws ApiException {
        okhttp3.Call localVarCall = firewallPoliciesUpdateTagsValidateBeforeCall(subscriptionId, resourceGroupName, firewallPolicyName, apiVersion, firewallPolicyParameters, null);
        Type localVarReturnType = new TypeToken<FirewallPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Firewall Policy Tags.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The resource group name of the Firewall Policy. (required)
     * @param firewallPolicyName The name of the Firewall Policy being updated. (required)
     * @param apiVersion Client API version. (required)
     * @param firewallPolicyParameters Parameters supplied to Update Firewall Policy tags. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns the details of the Firewall Policy updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallPoliciesUpdateTagsAsync(String subscriptionId, String resourceGroupName, String firewallPolicyName, String apiVersion, FirewallPoliciesUpdateTagsRequest firewallPolicyParameters, final ApiCallback<FirewallPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallPoliciesUpdateTagsValidateBeforeCall(subscriptionId, resourceGroupName, firewallPolicyName, apiVersion, firewallPolicyParameters, _callback);
        Type localVarReturnType = new TypeToken<FirewallPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
