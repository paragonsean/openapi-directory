/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FirewallPolicyFilterRuleAction;
import org.openapitools.client.model.FirewallPolicyRule;
import org.openapitools.client.model.FirewallPolicyRuleCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Firewall Policy Filter Rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:11.020568-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirewallPolicyFilterRule extends FirewallPolicyRule {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private FirewallPolicyFilterRuleAction action;

  public static final String SERIALIZED_NAME_RULE_CONDITIONS = "ruleConditions";
  @SerializedName(SERIALIZED_NAME_RULE_CONDITIONS)
  private List<FirewallPolicyRuleCondition> ruleConditions = new ArrayList<>();

  public FirewallPolicyFilterRule() {
    this.ruleType = this.getClass().getSimpleName();
  }

  public FirewallPolicyFilterRule action(FirewallPolicyFilterRuleAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public FirewallPolicyFilterRuleAction getAction() {
    return action;
  }

  public void setAction(FirewallPolicyFilterRuleAction action) {
    this.action = action;
  }


  public FirewallPolicyFilterRule ruleConditions(List<FirewallPolicyRuleCondition> ruleConditions) {
    this.ruleConditions = ruleConditions;
    return this;
  }

  public FirewallPolicyFilterRule addRuleConditionsItem(FirewallPolicyRuleCondition ruleConditionsItem) {
    if (this.ruleConditions == null) {
      this.ruleConditions = new ArrayList<>();
    }
    this.ruleConditions.add(ruleConditionsItem);
    return this;
  }

  /**
   * Collection of rule conditions used by a rule.
   * @return ruleConditions
   */
  @javax.annotation.Nullable
  public List<FirewallPolicyRuleCondition> getRuleConditions() {
    return ruleConditions;
  }

  public void setRuleConditions(List<FirewallPolicyRuleCondition> ruleConditions) {
    this.ruleConditions = ruleConditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallPolicyFilterRule firewallPolicyFilterRule = (FirewallPolicyFilterRule) o;
    return Objects.equals(this.action, firewallPolicyFilterRule.action) &&
        Objects.equals(this.ruleConditions, firewallPolicyFilterRule.ruleConditions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, ruleConditions, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallPolicyFilterRule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    ruleConditions: ").append(toIndentedString(ruleConditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("ruleType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ruleType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirewallPolicyFilterRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallPolicyFilterRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallPolicyFilterRule is not found in the empty JSON string", FirewallPolicyFilterRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallPolicyFilterRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallPolicyFilterRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FirewallPolicyFilterRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallPolicyFilterRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallPolicyFilterRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallPolicyFilterRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallPolicyFilterRule.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallPolicyFilterRule>() {
           @Override
           public void write(JsonWriter out, FirewallPolicyFilterRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallPolicyFilterRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FirewallPolicyFilterRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirewallPolicyFilterRule
   * @throws IOException if the JSON string is invalid with respect to FirewallPolicyFilterRule
   */
  public static FirewallPolicyFilterRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallPolicyFilterRule.class);
  }

  /**
   * Convert an instance of FirewallPolicyFilterRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

