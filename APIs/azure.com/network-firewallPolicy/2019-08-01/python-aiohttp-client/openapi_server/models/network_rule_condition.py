# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_policy_rule_condition import FirewallPolicyRuleCondition
from openapi_server.models.firewall_policy_rule_condition_network_protocol import FirewallPolicyRuleConditionNetworkProtocol
from openapi_server import util


class NetworkRuleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_addresses: List[str]=None, destination_ports: List[str]=None, ip_protocols: List[FirewallPolicyRuleConditionNetworkProtocol]=None, source_addresses: List[str]=None, description: str=None, name: str=None, rule_condition_type: str=None):
        """NetworkRuleCondition - a model defined in OpenAPI

        :param destination_addresses: The destination_addresses of this NetworkRuleCondition.
        :param destination_ports: The destination_ports of this NetworkRuleCondition.
        :param ip_protocols: The ip_protocols of this NetworkRuleCondition.
        :param source_addresses: The source_addresses of this NetworkRuleCondition.
        :param description: The description of this NetworkRuleCondition.
        :param name: The name of this NetworkRuleCondition.
        :param rule_condition_type: The rule_condition_type of this NetworkRuleCondition.
        """
        self.openapi_types = {
            'destination_addresses': List[str],
            'destination_ports': List[str],
            'ip_protocols': List[FirewallPolicyRuleConditionNetworkProtocol],
            'source_addresses': List[str],
            'description': str,
            'name': str,
            'rule_condition_type': str
        }

        self.attribute_map = {
            'destination_addresses': 'destinationAddresses',
            'destination_ports': 'destinationPorts',
            'ip_protocols': 'ipProtocols',
            'source_addresses': 'sourceAddresses',
            'description': 'description',
            'name': 'name',
            'rule_condition_type': 'ruleConditionType'
        }

        self._destination_addresses = destination_addresses
        self._destination_ports = destination_ports
        self._ip_protocols = ip_protocols
        self._source_addresses = source_addresses
        self._description = description
        self._name = name
        self._rule_condition_type = rule_condition_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkRuleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkRuleCondition of this NetworkRuleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_addresses(self):
        """Gets the destination_addresses of this NetworkRuleCondition.

        List of destination IP addresses or Service Tags.

        :return: The destination_addresses of this NetworkRuleCondition.
        :rtype: List[str]
        """
        return self._destination_addresses

    @destination_addresses.setter
    def destination_addresses(self, destination_addresses):
        """Sets the destination_addresses of this NetworkRuleCondition.

        List of destination IP addresses or Service Tags.

        :param destination_addresses: The destination_addresses of this NetworkRuleCondition.
        :type destination_addresses: List[str]
        """

        self._destination_addresses = destination_addresses

    @property
    def destination_ports(self):
        """Gets the destination_ports of this NetworkRuleCondition.

        List of destination ports.

        :return: The destination_ports of this NetworkRuleCondition.
        :rtype: List[str]
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this NetworkRuleCondition.

        List of destination ports.

        :param destination_ports: The destination_ports of this NetworkRuleCondition.
        :type destination_ports: List[str]
        """

        self._destination_ports = destination_ports

    @property
    def ip_protocols(self):
        """Gets the ip_protocols of this NetworkRuleCondition.

        Array of FirewallPolicyRuleConditionNetworkProtocols.

        :return: The ip_protocols of this NetworkRuleCondition.
        :rtype: List[FirewallPolicyRuleConditionNetworkProtocol]
        """
        return self._ip_protocols

    @ip_protocols.setter
    def ip_protocols(self, ip_protocols):
        """Sets the ip_protocols of this NetworkRuleCondition.

        Array of FirewallPolicyRuleConditionNetworkProtocols.

        :param ip_protocols: The ip_protocols of this NetworkRuleCondition.
        :type ip_protocols: List[FirewallPolicyRuleConditionNetworkProtocol]
        """

        self._ip_protocols = ip_protocols

    @property
    def source_addresses(self):
        """Gets the source_addresses of this NetworkRuleCondition.

        List of source IP addresses for this rule.

        :return: The source_addresses of this NetworkRuleCondition.
        :rtype: List[str]
        """
        return self._source_addresses

    @source_addresses.setter
    def source_addresses(self, source_addresses):
        """Sets the source_addresses of this NetworkRuleCondition.

        List of source IP addresses for this rule.

        :param source_addresses: The source_addresses of this NetworkRuleCondition.
        :type source_addresses: List[str]
        """

        self._source_addresses = source_addresses

    @property
    def description(self):
        """Gets the description of this NetworkRuleCondition.

        Description of the rule condition.

        :return: The description of this NetworkRuleCondition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetworkRuleCondition.

        Description of the rule condition.

        :param description: The description of this NetworkRuleCondition.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this NetworkRuleCondition.

        Name of the rule condition.

        :return: The name of this NetworkRuleCondition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkRuleCondition.

        Name of the rule condition.

        :param name: The name of this NetworkRuleCondition.
        :type name: str
        """

        self._name = name

    @property
    def rule_condition_type(self):
        """Gets the rule_condition_type of this NetworkRuleCondition.

        Rule Condition Type.

        :return: The rule_condition_type of this NetworkRuleCondition.
        :rtype: str
        """
        return self._rule_condition_type

    @rule_condition_type.setter
    def rule_condition_type(self, rule_condition_type):
        """Sets the rule_condition_type of this NetworkRuleCondition.

        Rule Condition Type.

        :param rule_condition_type: The rule_condition_type of this NetworkRuleCondition.
        :type rule_condition_type: str
        """
        allowed_values = ["ApplicationRuleCondition", "NetworkRuleCondition"]  # noqa: E501
        if rule_condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_condition_type` ({0}), must be one of {1}"
                .format(rule_condition_type, allowed_values)
            )

        self._rule_condition_type = rule_condition_type
