/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFirewallPolicyRuleGroupsApi_H
#define OAI_OAIFirewallPolicyRuleGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFirewallPolicyRuleGroup.h"
#include "OAIFirewallPolicyRuleGroupListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFirewallPolicyRuleGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIFirewallPolicyRuleGroupsApi(const int timeOut = 0);
    ~OAIFirewallPolicyRuleGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  firewall_policy_name QString [required]
    * @param[in]  rule_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIFirewallPolicyRuleGroup [required]
    */
    virtual void firewallPolicyRuleGroupsCreateOrUpdate(const QString &resource_group_name, const QString &firewall_policy_name, const QString &rule_group_name, const QString &api_version, const QString &subscription_id, const OAIFirewallPolicyRuleGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  firewall_policy_name QString [required]
    * @param[in]  rule_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void firewallPolicyRuleGroupsDelete(const QString &resource_group_name, const QString &firewall_policy_name, const QString &rule_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  firewall_policy_name QString [required]
    * @param[in]  rule_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void firewallPolicyRuleGroupsGet(const QString &resource_group_name, const QString &firewall_policy_name, const QString &rule_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  firewall_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void firewallPolicyRuleGroupsList(const QString &resource_group_name, const QString &firewall_policy_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void firewallPolicyRuleGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void firewallPolicyRuleGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void firewallPolicyRuleGroupsGetCallback(OAIHttpRequestWorker *worker);
    void firewallPolicyRuleGroupsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void firewallPolicyRuleGroupsCreateOrUpdateSignal(OAIFirewallPolicyRuleGroup summary);
    void firewallPolicyRuleGroupsDeleteSignal();
    void firewallPolicyRuleGroupsGetSignal(OAIFirewallPolicyRuleGroup summary);
    void firewallPolicyRuleGroupsListSignal(OAIFirewallPolicyRuleGroupListResult summary);


    void firewallPolicyRuleGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFirewallPolicyRuleGroup summary);
    void firewallPolicyRuleGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void firewallPolicyRuleGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIFirewallPolicyRuleGroup summary);
    void firewallPolicyRuleGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIFirewallPolicyRuleGroupListResult summary);

    Q_DECL_DEPRECATED_X("Use firewallPolicyRuleGroupsCreateOrUpdateSignalError() instead")
    void firewallPolicyRuleGroupsCreateOrUpdateSignalE(OAIFirewallPolicyRuleGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPolicyRuleGroupsCreateOrUpdateSignalError(OAIFirewallPolicyRuleGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPolicyRuleGroupsDeleteSignalError() instead")
    void firewallPolicyRuleGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPolicyRuleGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPolicyRuleGroupsGetSignalError() instead")
    void firewallPolicyRuleGroupsGetSignalE(OAIFirewallPolicyRuleGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPolicyRuleGroupsGetSignalError(OAIFirewallPolicyRuleGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPolicyRuleGroupsListSignalError() instead")
    void firewallPolicyRuleGroupsListSignalE(OAIFirewallPolicyRuleGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPolicyRuleGroupsListSignalError(OAIFirewallPolicyRuleGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use firewallPolicyRuleGroupsCreateOrUpdateSignalErrorFull() instead")
    void firewallPolicyRuleGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPolicyRuleGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPolicyRuleGroupsDeleteSignalErrorFull() instead")
    void firewallPolicyRuleGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPolicyRuleGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPolicyRuleGroupsGetSignalErrorFull() instead")
    void firewallPolicyRuleGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPolicyRuleGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPolicyRuleGroupsListSignalErrorFull() instead")
    void firewallPolicyRuleGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPolicyRuleGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
