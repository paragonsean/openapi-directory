/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkRuleCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkRuleCondition::OAINetworkRuleCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkRuleCondition::OAINetworkRuleCondition() {
    this->initializeModel();
}

OAINetworkRuleCondition::~OAINetworkRuleCondition() {}

void OAINetworkRuleCondition::initializeModel() {

    m_destination_addresses_isSet = false;
    m_destination_addresses_isValid = false;

    m_destination_ports_isSet = false;
    m_destination_ports_isValid = false;

    m_ip_protocols_isSet = false;
    m_ip_protocols_isValid = false;

    m_source_addresses_isSet = false;
    m_source_addresses_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_condition_type_isSet = false;
    m_rule_condition_type_isValid = false;
}

void OAINetworkRuleCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkRuleCondition::fromJsonObject(QJsonObject json) {

    m_destination_addresses_isValid = ::OpenAPI::fromJsonValue(m_destination_addresses, json[QString("destinationAddresses")]);
    m_destination_addresses_isSet = !json[QString("destinationAddresses")].isNull() && m_destination_addresses_isValid;

    m_destination_ports_isValid = ::OpenAPI::fromJsonValue(m_destination_ports, json[QString("destinationPorts")]);
    m_destination_ports_isSet = !json[QString("destinationPorts")].isNull() && m_destination_ports_isValid;

    m_ip_protocols_isValid = ::OpenAPI::fromJsonValue(m_ip_protocols, json[QString("ipProtocols")]);
    m_ip_protocols_isSet = !json[QString("ipProtocols")].isNull() && m_ip_protocols_isValid;

    m_source_addresses_isValid = ::OpenAPI::fromJsonValue(m_source_addresses, json[QString("sourceAddresses")]);
    m_source_addresses_isSet = !json[QString("sourceAddresses")].isNull() && m_source_addresses_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rule_condition_type_isValid = ::OpenAPI::fromJsonValue(m_rule_condition_type, json[QString("ruleConditionType")]);
    m_rule_condition_type_isSet = !json[QString("ruleConditionType")].isNull() && m_rule_condition_type_isValid;
}

QString OAINetworkRuleCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkRuleCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_addresses.size() > 0) {
        obj.insert(QString("destinationAddresses"), ::OpenAPI::toJsonValue(m_destination_addresses));
    }
    if (m_destination_ports.size() > 0) {
        obj.insert(QString("destinationPorts"), ::OpenAPI::toJsonValue(m_destination_ports));
    }
    if (m_ip_protocols.size() > 0) {
        obj.insert(QString("ipProtocols"), ::OpenAPI::toJsonValue(m_ip_protocols));
    }
    if (m_source_addresses.size() > 0) {
        obj.insert(QString("sourceAddresses"), ::OpenAPI::toJsonValue(m_source_addresses));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule_condition_type_isSet) {
        obj.insert(QString("ruleConditionType"), ::OpenAPI::toJsonValue(m_rule_condition_type));
    }
    return obj;
}

QList<QString> OAINetworkRuleCondition::getDestinationAddresses() const {
    return m_destination_addresses;
}
void OAINetworkRuleCondition::setDestinationAddresses(const QList<QString> &destination_addresses) {
    m_destination_addresses = destination_addresses;
    m_destination_addresses_isSet = true;
}

bool OAINetworkRuleCondition::is_destination_addresses_Set() const{
    return m_destination_addresses_isSet;
}

bool OAINetworkRuleCondition::is_destination_addresses_Valid() const{
    return m_destination_addresses_isValid;
}

QList<QString> OAINetworkRuleCondition::getDestinationPorts() const {
    return m_destination_ports;
}
void OAINetworkRuleCondition::setDestinationPorts(const QList<QString> &destination_ports) {
    m_destination_ports = destination_ports;
    m_destination_ports_isSet = true;
}

bool OAINetworkRuleCondition::is_destination_ports_Set() const{
    return m_destination_ports_isSet;
}

bool OAINetworkRuleCondition::is_destination_ports_Valid() const{
    return m_destination_ports_isValid;
}

QList<OAIFirewallPolicyRuleConditionNetworkProtocol> OAINetworkRuleCondition::getIpProtocols() const {
    return m_ip_protocols;
}
void OAINetworkRuleCondition::setIpProtocols(const QList<OAIFirewallPolicyRuleConditionNetworkProtocol> &ip_protocols) {
    m_ip_protocols = ip_protocols;
    m_ip_protocols_isSet = true;
}

bool OAINetworkRuleCondition::is_ip_protocols_Set() const{
    return m_ip_protocols_isSet;
}

bool OAINetworkRuleCondition::is_ip_protocols_Valid() const{
    return m_ip_protocols_isValid;
}

QList<QString> OAINetworkRuleCondition::getSourceAddresses() const {
    return m_source_addresses;
}
void OAINetworkRuleCondition::setSourceAddresses(const QList<QString> &source_addresses) {
    m_source_addresses = source_addresses;
    m_source_addresses_isSet = true;
}

bool OAINetworkRuleCondition::is_source_addresses_Set() const{
    return m_source_addresses_isSet;
}

bool OAINetworkRuleCondition::is_source_addresses_Valid() const{
    return m_source_addresses_isValid;
}

QString OAINetworkRuleCondition::getDescription() const {
    return m_description;
}
void OAINetworkRuleCondition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINetworkRuleCondition::is_description_Set() const{
    return m_description_isSet;
}

bool OAINetworkRuleCondition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINetworkRuleCondition::getName() const {
    return m_name;
}
void OAINetworkRuleCondition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINetworkRuleCondition::is_name_Set() const{
    return m_name_isSet;
}

bool OAINetworkRuleCondition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINetworkRuleCondition::getRuleConditionType() const {
    return m_rule_condition_type;
}
void OAINetworkRuleCondition::setRuleConditionType(const QString &rule_condition_type) {
    m_rule_condition_type = rule_condition_type;
    m_rule_condition_type_isSet = true;
}

bool OAINetworkRuleCondition::is_rule_condition_type_Set() const{
    return m_rule_condition_type_isSet;
}

bool OAINetworkRuleCondition::is_rule_condition_type_Valid() const{
    return m_rule_condition_type_isValid;
}

bool OAINetworkRuleCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_condition_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkRuleCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_condition_type_isValid && true;
}

} // namespace OpenAPI
