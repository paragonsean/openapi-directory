/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirewallPolicyNatRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirewallPolicyNatRule::OAIFirewallPolicyNatRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirewallPolicyNatRule::OAIFirewallPolicyNatRule() {
    this->initializeModel();
}

OAIFirewallPolicyNatRule::~OAIFirewallPolicyNatRule() {}

void OAIFirewallPolicyNatRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_rule_condition_isSet = false;
    m_rule_condition_isValid = false;

    m_translated_address_isSet = false;
    m_translated_address_isValid = false;

    m_translated_port_isSet = false;
    m_translated_port_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_rule_type_isSet = false;
    m_rule_type_isValid = false;
}

void OAIFirewallPolicyNatRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirewallPolicyNatRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_rule_condition_isValid = ::OpenAPI::fromJsonValue(m_rule_condition, json[QString("ruleCondition")]);
    m_rule_condition_isSet = !json[QString("ruleCondition")].isNull() && m_rule_condition_isValid;

    m_translated_address_isValid = ::OpenAPI::fromJsonValue(m_translated_address, json[QString("translatedAddress")]);
    m_translated_address_isSet = !json[QString("translatedAddress")].isNull() && m_translated_address_isValid;

    m_translated_port_isValid = ::OpenAPI::fromJsonValue(m_translated_port, json[QString("translatedPort")]);
    m_translated_port_isSet = !json[QString("translatedPort")].isNull() && m_translated_port_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_rule_type_isValid = ::OpenAPI::fromJsonValue(m_rule_type, json[QString("ruleType")]);
    m_rule_type_isSet = !json[QString("ruleType")].isNull() && m_rule_type_isValid;
}

QString OAIFirewallPolicyNatRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirewallPolicyNatRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_rule_condition.isSet()) {
        obj.insert(QString("ruleCondition"), ::OpenAPI::toJsonValue(m_rule_condition));
    }
    if (m_translated_address_isSet) {
        obj.insert(QString("translatedAddress"), ::OpenAPI::toJsonValue(m_translated_address));
    }
    if (m_translated_port_isSet) {
        obj.insert(QString("translatedPort"), ::OpenAPI::toJsonValue(m_translated_port));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_rule_type_isSet) {
        obj.insert(QString("ruleType"), ::OpenAPI::toJsonValue(m_rule_type));
    }
    return obj;
}

OAIFirewallPolicyNatRuleAction OAIFirewallPolicyNatRule::getAction() const {
    return m_action;
}
void OAIFirewallPolicyNatRule::setAction(const OAIFirewallPolicyNatRuleAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIFirewallPolicyNatRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIFirewallPolicyNatRule::is_action_Valid() const{
    return m_action_isValid;
}

OAIFirewallPolicyRuleCondition OAIFirewallPolicyNatRule::getRuleCondition() const {
    return m_rule_condition;
}
void OAIFirewallPolicyNatRule::setRuleCondition(const OAIFirewallPolicyRuleCondition &rule_condition) {
    m_rule_condition = rule_condition;
    m_rule_condition_isSet = true;
}

bool OAIFirewallPolicyNatRule::is_rule_condition_Set() const{
    return m_rule_condition_isSet;
}

bool OAIFirewallPolicyNatRule::is_rule_condition_Valid() const{
    return m_rule_condition_isValid;
}

QString OAIFirewallPolicyNatRule::getTranslatedAddress() const {
    return m_translated_address;
}
void OAIFirewallPolicyNatRule::setTranslatedAddress(const QString &translated_address) {
    m_translated_address = translated_address;
    m_translated_address_isSet = true;
}

bool OAIFirewallPolicyNatRule::is_translated_address_Set() const{
    return m_translated_address_isSet;
}

bool OAIFirewallPolicyNatRule::is_translated_address_Valid() const{
    return m_translated_address_isValid;
}

QString OAIFirewallPolicyNatRule::getTranslatedPort() const {
    return m_translated_port;
}
void OAIFirewallPolicyNatRule::setTranslatedPort(const QString &translated_port) {
    m_translated_port = translated_port;
    m_translated_port_isSet = true;
}

bool OAIFirewallPolicyNatRule::is_translated_port_Set() const{
    return m_translated_port_isSet;
}

bool OAIFirewallPolicyNatRule::is_translated_port_Valid() const{
    return m_translated_port_isValid;
}

QString OAIFirewallPolicyNatRule::getName() const {
    return m_name;
}
void OAIFirewallPolicyNatRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFirewallPolicyNatRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFirewallPolicyNatRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIFirewallPolicyNatRule::getPriority() const {
    return m_priority;
}
void OAIFirewallPolicyNatRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIFirewallPolicyNatRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIFirewallPolicyNatRule::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIFirewallPolicyNatRule::getRuleType() const {
    return m_rule_type;
}
void OAIFirewallPolicyNatRule::setRuleType(const QString &rule_type) {
    m_rule_type = rule_type;
    m_rule_type_isSet = true;
}

bool OAIFirewallPolicyNatRule::is_rule_type_Set() const{
    return m_rule_type_isSet;
}

bool OAIFirewallPolicyNatRule::is_rule_type_Valid() const{
    return m_rule_type_isValid;
}

bool OAIFirewallPolicyNatRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirewallPolicyNatRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_type_isValid && true;
}

} // namespace OpenAPI
