/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirewallPolicyRuleConditionApplicationProtocolType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirewallPolicyRuleConditionApplicationProtocolType::OAIFirewallPolicyRuleConditionApplicationProtocolType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirewallPolicyRuleConditionApplicationProtocolType::OAIFirewallPolicyRuleConditionApplicationProtocolType() {
    this->initializeModel();
}

OAIFirewallPolicyRuleConditionApplicationProtocolType::~OAIFirewallPolicyRuleConditionApplicationProtocolType() {}

void OAIFirewallPolicyRuleConditionApplicationProtocolType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFirewallPolicyRuleConditionApplicationProtocolType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFirewallPolicyRuleConditionApplicationProtocolType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Http", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFirewallPolicyRuleConditionApplicationProtocolType::HTTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Https", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFirewallPolicyRuleConditionApplicationProtocolType::HTTPS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFirewallPolicyRuleConditionApplicationProtocolType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFirewallPolicyRuleConditionApplicationProtocolType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFirewallPolicyRuleConditionApplicationProtocolType::HTTP:
            val = "Http";
            break;
        case eOAIFirewallPolicyRuleConditionApplicationProtocolType::HTTPS:
            val = "Https";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFirewallPolicyRuleConditionApplicationProtocolType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFirewallPolicyRuleConditionApplicationProtocolType::eOAIFirewallPolicyRuleConditionApplicationProtocolType OAIFirewallPolicyRuleConditionApplicationProtocolType::getValue() const {
    return m_value;
}

void OAIFirewallPolicyRuleConditionApplicationProtocolType::setValue(const OAIFirewallPolicyRuleConditionApplicationProtocolType::eOAIFirewallPolicyRuleConditionApplicationProtocolType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFirewallPolicyRuleConditionApplicationProtocolType::isSet() const {
    
    return m_value_isSet;
}

bool OAIFirewallPolicyRuleConditionApplicationProtocolType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
