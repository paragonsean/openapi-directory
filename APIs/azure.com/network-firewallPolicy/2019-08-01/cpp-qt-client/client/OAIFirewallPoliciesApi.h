/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFirewallPoliciesApi_H
#define OAI_OAIFirewallPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFirewallPolicies_UpdateTags_default_response.h"
#include "OAIFirewallPolicies_UpdateTags_request.h"
#include "OAIFirewallPolicy.h"
#include "OAIFirewallPolicyListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFirewallPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIFirewallPoliciesApi(const int timeOut = 0);
    ~OAIFirewallPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  firewall_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIFirewallPolicy [required]
    */
    virtual void firewallPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &firewall_policy_name, const QString &api_version, const QString &subscription_id, const OAIFirewallPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  firewall_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void firewallPoliciesDelete(const QString &resource_group_name, const QString &firewall_policy_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  firewall_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void firewallPoliciesGet(const QString &resource_group_name, const QString &firewall_policy_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void firewallPoliciesList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void firewallPoliciesListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  firewall_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  firewall_policy_parameters OAIFirewallPolicies_UpdateTags_request [required]
    */
    virtual void firewallPoliciesUpdateTags(const QString &subscription_id, const QString &resource_group_name, const QString &firewall_policy_name, const QString &api_version, const OAIFirewallPolicies_UpdateTags_request &firewall_policy_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void firewallPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void firewallPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void firewallPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void firewallPoliciesListCallback(OAIHttpRequestWorker *worker);
    void firewallPoliciesListAllCallback(OAIHttpRequestWorker *worker);
    void firewallPoliciesUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void firewallPoliciesCreateOrUpdateSignal(OAIFirewallPolicy summary);
    void firewallPoliciesDeleteSignal();
    void firewallPoliciesGetSignal(OAIFirewallPolicy summary);
    void firewallPoliciesListSignal(OAIFirewallPolicyListResult summary);
    void firewallPoliciesListAllSignal(OAIFirewallPolicyListResult summary);
    void firewallPoliciesUpdateTagsSignal(OAIFirewallPolicy summary);


    void firewallPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFirewallPolicy summary);
    void firewallPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void firewallPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIFirewallPolicy summary);
    void firewallPoliciesListSignalFull(OAIHttpRequestWorker *worker, OAIFirewallPolicyListResult summary);
    void firewallPoliciesListAllSignalFull(OAIHttpRequestWorker *worker, OAIFirewallPolicyListResult summary);
    void firewallPoliciesUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIFirewallPolicy summary);

    Q_DECL_DEPRECATED_X("Use firewallPoliciesCreateOrUpdateSignalError() instead")
    void firewallPoliciesCreateOrUpdateSignalE(OAIFirewallPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesCreateOrUpdateSignalError(OAIFirewallPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesDeleteSignalError() instead")
    void firewallPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesGetSignalError() instead")
    void firewallPoliciesGetSignalE(OAIFirewallPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesGetSignalError(OAIFirewallPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesListSignalError() instead")
    void firewallPoliciesListSignalE(OAIFirewallPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesListSignalError(OAIFirewallPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesListAllSignalError() instead")
    void firewallPoliciesListAllSignalE(OAIFirewallPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesListAllSignalError(OAIFirewallPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesUpdateTagsSignalError() instead")
    void firewallPoliciesUpdateTagsSignalE(OAIFirewallPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesUpdateTagsSignalError(OAIFirewallPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use firewallPoliciesCreateOrUpdateSignalErrorFull() instead")
    void firewallPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesDeleteSignalErrorFull() instead")
    void firewallPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesGetSignalErrorFull() instead")
    void firewallPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesListSignalErrorFull() instead")
    void firewallPoliciesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesListAllSignalErrorFull() instead")
    void firewallPoliciesListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallPoliciesUpdateTagsSignalErrorFull() instead")
    void firewallPoliciesUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallPoliciesUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
