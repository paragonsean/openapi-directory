/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FirewallPolicyRuleCondition;
import org.openapitools.client.model.FirewallPolicyRuleConditionNetworkProtocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rule condition of type network.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:12.907001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkRuleCondition extends FirewallPolicyRuleCondition {
  public static final String SERIALIZED_NAME_DESTINATION_ADDRESSES = "destinationAddresses";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ADDRESSES)
  private List<String> destinationAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_PORTS = "destinationPorts";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORTS)
  private List<String> destinationPorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_PROTOCOLS = "ipProtocols";
  @SerializedName(SERIALIZED_NAME_IP_PROTOCOLS)
  private List<FirewallPolicyRuleConditionNetworkProtocol> ipProtocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_ADDRESSES = "sourceAddresses";
  @SerializedName(SERIALIZED_NAME_SOURCE_ADDRESSES)
  private List<String> sourceAddresses = new ArrayList<>();

  public NetworkRuleCondition() {
    this.ruleConditionType = this.getClass().getSimpleName();
  }

  public NetworkRuleCondition destinationAddresses(List<String> destinationAddresses) {
    this.destinationAddresses = destinationAddresses;
    return this;
  }

  public NetworkRuleCondition addDestinationAddressesItem(String destinationAddressesItem) {
    if (this.destinationAddresses == null) {
      this.destinationAddresses = new ArrayList<>();
    }
    this.destinationAddresses.add(destinationAddressesItem);
    return this;
  }

  /**
   * List of destination IP addresses or Service Tags.
   * @return destinationAddresses
   */
  @javax.annotation.Nullable
  public List<String> getDestinationAddresses() {
    return destinationAddresses;
  }

  public void setDestinationAddresses(List<String> destinationAddresses) {
    this.destinationAddresses = destinationAddresses;
  }


  public NetworkRuleCondition destinationPorts(List<String> destinationPorts) {
    this.destinationPorts = destinationPorts;
    return this;
  }

  public NetworkRuleCondition addDestinationPortsItem(String destinationPortsItem) {
    if (this.destinationPorts == null) {
      this.destinationPorts = new ArrayList<>();
    }
    this.destinationPorts.add(destinationPortsItem);
    return this;
  }

  /**
   * List of destination ports.
   * @return destinationPorts
   */
  @javax.annotation.Nullable
  public List<String> getDestinationPorts() {
    return destinationPorts;
  }

  public void setDestinationPorts(List<String> destinationPorts) {
    this.destinationPorts = destinationPorts;
  }


  public NetworkRuleCondition ipProtocols(List<FirewallPolicyRuleConditionNetworkProtocol> ipProtocols) {
    this.ipProtocols = ipProtocols;
    return this;
  }

  public NetworkRuleCondition addIpProtocolsItem(FirewallPolicyRuleConditionNetworkProtocol ipProtocolsItem) {
    if (this.ipProtocols == null) {
      this.ipProtocols = new ArrayList<>();
    }
    this.ipProtocols.add(ipProtocolsItem);
    return this;
  }

  /**
   * Array of FirewallPolicyRuleConditionNetworkProtocols.
   * @return ipProtocols
   */
  @javax.annotation.Nullable
  public List<FirewallPolicyRuleConditionNetworkProtocol> getIpProtocols() {
    return ipProtocols;
  }

  public void setIpProtocols(List<FirewallPolicyRuleConditionNetworkProtocol> ipProtocols) {
    this.ipProtocols = ipProtocols;
  }


  public NetworkRuleCondition sourceAddresses(List<String> sourceAddresses) {
    this.sourceAddresses = sourceAddresses;
    return this;
  }

  public NetworkRuleCondition addSourceAddressesItem(String sourceAddressesItem) {
    if (this.sourceAddresses == null) {
      this.sourceAddresses = new ArrayList<>();
    }
    this.sourceAddresses.add(sourceAddressesItem);
    return this;
  }

  /**
   * List of source IP addresses for this rule.
   * @return sourceAddresses
   */
  @javax.annotation.Nullable
  public List<String> getSourceAddresses() {
    return sourceAddresses;
  }

  public void setSourceAddresses(List<String> sourceAddresses) {
    this.sourceAddresses = sourceAddresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkRuleCondition networkRuleCondition = (NetworkRuleCondition) o;
    return Objects.equals(this.destinationAddresses, networkRuleCondition.destinationAddresses) &&
        Objects.equals(this.destinationPorts, networkRuleCondition.destinationPorts) &&
        Objects.equals(this.ipProtocols, networkRuleCondition.ipProtocols) &&
        Objects.equals(this.sourceAddresses, networkRuleCondition.sourceAddresses) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationAddresses, destinationPorts, ipProtocols, sourceAddresses, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkRuleCondition {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    destinationAddresses: ").append(toIndentedString(destinationAddresses)).append("\n");
    sb.append("    destinationPorts: ").append(toIndentedString(destinationPorts)).append("\n");
    sb.append("    ipProtocols: ").append(toIndentedString(ipProtocols)).append("\n");
    sb.append("    sourceAddresses: ").append(toIndentedString(sourceAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("ruleConditionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ruleConditionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkRuleCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkRuleCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkRuleCondition is not found in the empty JSON string", NetworkRuleCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkRuleCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkRuleCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NetworkRuleCondition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkRuleCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkRuleCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkRuleCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkRuleCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkRuleCondition>() {
           @Override
           public void write(JsonWriter out, NetworkRuleCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkRuleCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkRuleCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkRuleCondition
   * @throws IOException if the JSON string is invalid with respect to NetworkRuleCondition
   */
  public static NetworkRuleCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkRuleCondition.class);
  }

  /**
   * Convert an instance of NetworkRuleCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

