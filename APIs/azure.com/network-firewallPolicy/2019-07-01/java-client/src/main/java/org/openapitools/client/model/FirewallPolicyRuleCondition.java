/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:12.907001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirewallPolicyRuleCondition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Rule Condition Type.
   */
  @JsonAdapter(RuleConditionTypeEnum.Adapter.class)
  public enum RuleConditionTypeEnum {
    APPLICATION_RULE_CONDITION("ApplicationRuleCondition"),
    
    NETWORK_RULE_CONDITION("NetworkRuleCondition");

    private String value;

    RuleConditionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleConditionTypeEnum fromValue(String value) {
      for (RuleConditionTypeEnum b : RuleConditionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleConditionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleConditionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleConditionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleConditionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleConditionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_CONDITION_TYPE = "ruleConditionType";
  @SerializedName(SERIALIZED_NAME_RULE_CONDITION_TYPE)
  protected RuleConditionTypeEnum ruleConditionType;

  public FirewallPolicyRuleCondition() {
  }

  public FirewallPolicyRuleCondition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the rule condition.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FirewallPolicyRuleCondition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the rule condition.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FirewallPolicyRuleCondition ruleConditionType(RuleConditionTypeEnum ruleConditionType) {
    this.ruleConditionType = ruleConditionType;
    return this;
  }

  /**
   * Rule Condition Type.
   * @return ruleConditionType
   */
  @javax.annotation.Nonnull
  public RuleConditionTypeEnum getRuleConditionType() {
    return ruleConditionType;
  }

  public void setRuleConditionType(RuleConditionTypeEnum ruleConditionType) {
    this.ruleConditionType = ruleConditionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallPolicyRuleCondition firewallPolicyRuleCondition = (FirewallPolicyRuleCondition) o;
    return Objects.equals(this.description, firewallPolicyRuleCondition.description) &&
        Objects.equals(this.name, firewallPolicyRuleCondition.name) &&
        Objects.equals(this.ruleConditionType, firewallPolicyRuleCondition.ruleConditionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, ruleConditionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallPolicyRuleCondition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ruleConditionType: ").append(toIndentedString(ruleConditionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("ruleConditionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ruleConditionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirewallPolicyRuleCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallPolicyRuleCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallPolicyRuleCondition is not found in the empty JSON string", FirewallPolicyRuleCondition.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("ruleConditionType").getAsString();
      switch (discriminatorValue) {
        case "ApplicationRuleCondition":
          ApplicationRuleCondition.validateJsonElement(jsonElement);
          break;
        case "NetworkRuleCondition":
          NetworkRuleCondition.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `ruleConditionType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of FirewallPolicyRuleCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirewallPolicyRuleCondition
   * @throws IOException if the JSON string is invalid with respect to FirewallPolicyRuleCondition
   */
  public static FirewallPolicyRuleCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallPolicyRuleCondition.class);
  }

  /**
   * Convert an instance of FirewallPolicyRuleCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

