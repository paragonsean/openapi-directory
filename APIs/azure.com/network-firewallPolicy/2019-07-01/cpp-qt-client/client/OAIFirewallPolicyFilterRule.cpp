/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirewallPolicyFilterRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirewallPolicyFilterRule::OAIFirewallPolicyFilterRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirewallPolicyFilterRule::OAIFirewallPolicyFilterRule() {
    this->initializeModel();
}

OAIFirewallPolicyFilterRule::~OAIFirewallPolicyFilterRule() {}

void OAIFirewallPolicyFilterRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_rule_conditions_isSet = false;
    m_rule_conditions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_rule_type_isSet = false;
    m_rule_type_isValid = false;
}

void OAIFirewallPolicyFilterRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirewallPolicyFilterRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_rule_conditions_isValid = ::OpenAPI::fromJsonValue(m_rule_conditions, json[QString("ruleConditions")]);
    m_rule_conditions_isSet = !json[QString("ruleConditions")].isNull() && m_rule_conditions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_rule_type_isValid = ::OpenAPI::fromJsonValue(m_rule_type, json[QString("ruleType")]);
    m_rule_type_isSet = !json[QString("ruleType")].isNull() && m_rule_type_isValid;
}

QString OAIFirewallPolicyFilterRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirewallPolicyFilterRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_rule_conditions.size() > 0) {
        obj.insert(QString("ruleConditions"), ::OpenAPI::toJsonValue(m_rule_conditions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_rule_type_isSet) {
        obj.insert(QString("ruleType"), ::OpenAPI::toJsonValue(m_rule_type));
    }
    return obj;
}

OAIFirewallPolicyFilterRuleAction OAIFirewallPolicyFilterRule::getAction() const {
    return m_action;
}
void OAIFirewallPolicyFilterRule::setAction(const OAIFirewallPolicyFilterRuleAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIFirewallPolicyFilterRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIFirewallPolicyFilterRule::is_action_Valid() const{
    return m_action_isValid;
}

QList<OAIFirewallPolicyRuleCondition> OAIFirewallPolicyFilterRule::getRuleConditions() const {
    return m_rule_conditions;
}
void OAIFirewallPolicyFilterRule::setRuleConditions(const QList<OAIFirewallPolicyRuleCondition> &rule_conditions) {
    m_rule_conditions = rule_conditions;
    m_rule_conditions_isSet = true;
}

bool OAIFirewallPolicyFilterRule::is_rule_conditions_Set() const{
    return m_rule_conditions_isSet;
}

bool OAIFirewallPolicyFilterRule::is_rule_conditions_Valid() const{
    return m_rule_conditions_isValid;
}

QString OAIFirewallPolicyFilterRule::getName() const {
    return m_name;
}
void OAIFirewallPolicyFilterRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFirewallPolicyFilterRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFirewallPolicyFilterRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIFirewallPolicyFilterRule::getPriority() const {
    return m_priority;
}
void OAIFirewallPolicyFilterRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIFirewallPolicyFilterRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIFirewallPolicyFilterRule::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIFirewallPolicyFilterRule::getRuleType() const {
    return m_rule_type;
}
void OAIFirewallPolicyFilterRule::setRuleType(const QString &rule_type) {
    m_rule_type = rule_type;
    m_rule_type_isSet = true;
}

bool OAIFirewallPolicyFilterRule::is_rule_type_Set() const{
    return m_rule_type_isSet;
}

bool OAIFirewallPolicyFilterRule::is_rule_type_Valid() const{
    return m_rule_type_isValid;
}

bool OAIFirewallPolicyFilterRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirewallPolicyFilterRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_type_isValid && true;
}

} // namespace OpenAPI
