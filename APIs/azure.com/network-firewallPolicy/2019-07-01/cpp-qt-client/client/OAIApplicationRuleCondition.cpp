/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationRuleCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationRuleCondition::OAIApplicationRuleCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationRuleCondition::OAIApplicationRuleCondition() {
    this->initializeModel();
}

OAIApplicationRuleCondition::~OAIApplicationRuleCondition() {}

void OAIApplicationRuleCondition::initializeModel() {

    m_destination_addresses_isSet = false;
    m_destination_addresses_isValid = false;

    m_fqdn_tags_isSet = false;
    m_fqdn_tags_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_source_addresses_isSet = false;
    m_source_addresses_isValid = false;

    m_target_fqdns_isSet = false;
    m_target_fqdns_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_condition_type_isSet = false;
    m_rule_condition_type_isValid = false;
}

void OAIApplicationRuleCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationRuleCondition::fromJsonObject(QJsonObject json) {

    m_destination_addresses_isValid = ::OpenAPI::fromJsonValue(m_destination_addresses, json[QString("destinationAddresses")]);
    m_destination_addresses_isSet = !json[QString("destinationAddresses")].isNull() && m_destination_addresses_isValid;

    m_fqdn_tags_isValid = ::OpenAPI::fromJsonValue(m_fqdn_tags, json[QString("fqdnTags")]);
    m_fqdn_tags_isSet = !json[QString("fqdnTags")].isNull() && m_fqdn_tags_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;

    m_source_addresses_isValid = ::OpenAPI::fromJsonValue(m_source_addresses, json[QString("sourceAddresses")]);
    m_source_addresses_isSet = !json[QString("sourceAddresses")].isNull() && m_source_addresses_isValid;

    m_target_fqdns_isValid = ::OpenAPI::fromJsonValue(m_target_fqdns, json[QString("targetFqdns")]);
    m_target_fqdns_isSet = !json[QString("targetFqdns")].isNull() && m_target_fqdns_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rule_condition_type_isValid = ::OpenAPI::fromJsonValue(m_rule_condition_type, json[QString("ruleConditionType")]);
    m_rule_condition_type_isSet = !json[QString("ruleConditionType")].isNull() && m_rule_condition_type_isValid;
}

QString OAIApplicationRuleCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationRuleCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_addresses.size() > 0) {
        obj.insert(QString("destinationAddresses"), ::OpenAPI::toJsonValue(m_destination_addresses));
    }
    if (m_fqdn_tags.size() > 0) {
        obj.insert(QString("fqdnTags"), ::OpenAPI::toJsonValue(m_fqdn_tags));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_source_addresses.size() > 0) {
        obj.insert(QString("sourceAddresses"), ::OpenAPI::toJsonValue(m_source_addresses));
    }
    if (m_target_fqdns.size() > 0) {
        obj.insert(QString("targetFqdns"), ::OpenAPI::toJsonValue(m_target_fqdns));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule_condition_type_isSet) {
        obj.insert(QString("ruleConditionType"), ::OpenAPI::toJsonValue(m_rule_condition_type));
    }
    return obj;
}

QList<QString> OAIApplicationRuleCondition::getDestinationAddresses() const {
    return m_destination_addresses;
}
void OAIApplicationRuleCondition::setDestinationAddresses(const QList<QString> &destination_addresses) {
    m_destination_addresses = destination_addresses;
    m_destination_addresses_isSet = true;
}

bool OAIApplicationRuleCondition::is_destination_addresses_Set() const{
    return m_destination_addresses_isSet;
}

bool OAIApplicationRuleCondition::is_destination_addresses_Valid() const{
    return m_destination_addresses_isValid;
}

QList<QString> OAIApplicationRuleCondition::getFqdnTags() const {
    return m_fqdn_tags;
}
void OAIApplicationRuleCondition::setFqdnTags(const QList<QString> &fqdn_tags) {
    m_fqdn_tags = fqdn_tags;
    m_fqdn_tags_isSet = true;
}

bool OAIApplicationRuleCondition::is_fqdn_tags_Set() const{
    return m_fqdn_tags_isSet;
}

bool OAIApplicationRuleCondition::is_fqdn_tags_Valid() const{
    return m_fqdn_tags_isValid;
}

QList<OAIFirewallPolicyRuleConditionApplicationProtocol> OAIApplicationRuleCondition::getProtocols() const {
    return m_protocols;
}
void OAIApplicationRuleCondition::setProtocols(const QList<OAIFirewallPolicyRuleConditionApplicationProtocol> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIApplicationRuleCondition::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIApplicationRuleCondition::is_protocols_Valid() const{
    return m_protocols_isValid;
}

QList<QString> OAIApplicationRuleCondition::getSourceAddresses() const {
    return m_source_addresses;
}
void OAIApplicationRuleCondition::setSourceAddresses(const QList<QString> &source_addresses) {
    m_source_addresses = source_addresses;
    m_source_addresses_isSet = true;
}

bool OAIApplicationRuleCondition::is_source_addresses_Set() const{
    return m_source_addresses_isSet;
}

bool OAIApplicationRuleCondition::is_source_addresses_Valid() const{
    return m_source_addresses_isValid;
}

QList<QString> OAIApplicationRuleCondition::getTargetFqdns() const {
    return m_target_fqdns;
}
void OAIApplicationRuleCondition::setTargetFqdns(const QList<QString> &target_fqdns) {
    m_target_fqdns = target_fqdns;
    m_target_fqdns_isSet = true;
}

bool OAIApplicationRuleCondition::is_target_fqdns_Set() const{
    return m_target_fqdns_isSet;
}

bool OAIApplicationRuleCondition::is_target_fqdns_Valid() const{
    return m_target_fqdns_isValid;
}

QString OAIApplicationRuleCondition::getDescription() const {
    return m_description;
}
void OAIApplicationRuleCondition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationRuleCondition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationRuleCondition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplicationRuleCondition::getName() const {
    return m_name;
}
void OAIApplicationRuleCondition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationRuleCondition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationRuleCondition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationRuleCondition::getRuleConditionType() const {
    return m_rule_condition_type;
}
void OAIApplicationRuleCondition::setRuleConditionType(const QString &rule_condition_type) {
    m_rule_condition_type = rule_condition_type;
    m_rule_condition_type_isSet = true;
}

bool OAIApplicationRuleCondition::is_rule_condition_type_Set() const{
    return m_rule_condition_type_isSet;
}

bool OAIApplicationRuleCondition::is_rule_condition_type_Valid() const{
    return m_rule_condition_type_isValid;
}

bool OAIApplicationRuleCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_fqdns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_condition_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationRuleCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_condition_type_isValid && true;
}

} // namespace OpenAPI
