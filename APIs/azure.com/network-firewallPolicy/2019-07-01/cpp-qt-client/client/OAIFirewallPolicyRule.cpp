/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirewallPolicyRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirewallPolicyRule::OAIFirewallPolicyRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirewallPolicyRule::OAIFirewallPolicyRule() {
    this->initializeModel();
}

OAIFirewallPolicyRule::~OAIFirewallPolicyRule() {}

void OAIFirewallPolicyRule::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_rule_type_isSet = false;
    m_rule_type_isValid = false;
}

void OAIFirewallPolicyRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirewallPolicyRule::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_rule_type_isValid = ::OpenAPI::fromJsonValue(m_rule_type, json[QString("ruleType")]);
    m_rule_type_isSet = !json[QString("ruleType")].isNull() && m_rule_type_isValid;
}

QString OAIFirewallPolicyRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirewallPolicyRule::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_rule_type_isSet) {
        obj.insert(QString("ruleType"), ::OpenAPI::toJsonValue(m_rule_type));
    }
    return obj;
}

QString OAIFirewallPolicyRule::getName() const {
    return m_name;
}
void OAIFirewallPolicyRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFirewallPolicyRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFirewallPolicyRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIFirewallPolicyRule::getPriority() const {
    return m_priority;
}
void OAIFirewallPolicyRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIFirewallPolicyRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIFirewallPolicyRule::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIFirewallPolicyRule::getRuleType() const {
    return m_rule_type;
}
void OAIFirewallPolicyRule::setRuleType(const QString &rule_type) {
    m_rule_type = rule_type;
    m_rule_type_isSet = true;
}

bool OAIFirewallPolicyRule::is_rule_type_Set() const{
    return m_rule_type_isSet;
}

bool OAIFirewallPolicyRule::is_rule_type_Valid() const{
    return m_rule_type_isValid;
}

bool OAIFirewallPolicyRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirewallPolicyRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_type_isValid && true;
}

} // namespace OpenAPI
