# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_policy_nat_rule_action import FirewallPolicyNatRuleAction
from openapi_server.models.firewall_policy_rule import FirewallPolicyRule
from openapi_server.models.firewall_policy_rule_condition import FirewallPolicyRuleCondition
from openapi_server import util


class FirewallPolicyNatRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: FirewallPolicyNatRuleAction=None, rule_condition: FirewallPolicyRuleCondition=None, translated_address: str=None, translated_port: str=None, name: str=None, priority: int=None, rule_type: str=None):
        """FirewallPolicyNatRule - a model defined in OpenAPI

        :param action: The action of this FirewallPolicyNatRule.
        :param rule_condition: The rule_condition of this FirewallPolicyNatRule.
        :param translated_address: The translated_address of this FirewallPolicyNatRule.
        :param translated_port: The translated_port of this FirewallPolicyNatRule.
        :param name: The name of this FirewallPolicyNatRule.
        :param priority: The priority of this FirewallPolicyNatRule.
        :param rule_type: The rule_type of this FirewallPolicyNatRule.
        """
        self.openapi_types = {
            'action': FirewallPolicyNatRuleAction,
            'rule_condition': FirewallPolicyRuleCondition,
            'translated_address': str,
            'translated_port': str,
            'name': str,
            'priority': int,
            'rule_type': str
        }

        self.attribute_map = {
            'action': 'action',
            'rule_condition': 'ruleCondition',
            'translated_address': 'translatedAddress',
            'translated_port': 'translatedPort',
            'name': 'name',
            'priority': 'priority',
            'rule_type': 'ruleType'
        }

        self._action = action
        self._rule_condition = rule_condition
        self._translated_address = translated_address
        self._translated_port = translated_port
        self._name = name
        self._priority = priority
        self._rule_type = rule_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirewallPolicyNatRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirewallPolicyNatRule of this FirewallPolicyNatRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this FirewallPolicyNatRule.


        :return: The action of this FirewallPolicyNatRule.
        :rtype: FirewallPolicyNatRuleAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this FirewallPolicyNatRule.


        :param action: The action of this FirewallPolicyNatRule.
        :type action: FirewallPolicyNatRuleAction
        """

        self._action = action

    @property
    def rule_condition(self):
        """Gets the rule_condition of this FirewallPolicyNatRule.


        :return: The rule_condition of this FirewallPolicyNatRule.
        :rtype: FirewallPolicyRuleCondition
        """
        return self._rule_condition

    @rule_condition.setter
    def rule_condition(self, rule_condition):
        """Sets the rule_condition of this FirewallPolicyNatRule.


        :param rule_condition: The rule_condition of this FirewallPolicyNatRule.
        :type rule_condition: FirewallPolicyRuleCondition
        """

        self._rule_condition = rule_condition

    @property
    def translated_address(self):
        """Gets the translated_address of this FirewallPolicyNatRule.

        The translated address for this NAT rule.

        :return: The translated_address of this FirewallPolicyNatRule.
        :rtype: str
        """
        return self._translated_address

    @translated_address.setter
    def translated_address(self, translated_address):
        """Sets the translated_address of this FirewallPolicyNatRule.

        The translated address for this NAT rule.

        :param translated_address: The translated_address of this FirewallPolicyNatRule.
        :type translated_address: str
        """

        self._translated_address = translated_address

    @property
    def translated_port(self):
        """Gets the translated_port of this FirewallPolicyNatRule.

        The translated port for this NAT rule.

        :return: The translated_port of this FirewallPolicyNatRule.
        :rtype: str
        """
        return self._translated_port

    @translated_port.setter
    def translated_port(self, translated_port):
        """Sets the translated_port of this FirewallPolicyNatRule.

        The translated port for this NAT rule.

        :param translated_port: The translated_port of this FirewallPolicyNatRule.
        :type translated_port: str
        """

        self._translated_port = translated_port

    @property
    def name(self):
        """Gets the name of this FirewallPolicyNatRule.

        The name of the rule.

        :return: The name of this FirewallPolicyNatRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirewallPolicyNatRule.

        The name of the rule.

        :param name: The name of this FirewallPolicyNatRule.
        :type name: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this FirewallPolicyNatRule.

        Priority of the Firewall Policy Rule resource.

        :return: The priority of this FirewallPolicyNatRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this FirewallPolicyNatRule.

        Priority of the Firewall Policy Rule resource.

        :param priority: The priority of this FirewallPolicyNatRule.
        :type priority: int
        """
        if priority is not None and priority > 65000:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65000`")
        if priority is not None and priority < 100:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `100`")

        self._priority = priority

    @property
    def rule_type(self):
        """Gets the rule_type of this FirewallPolicyNatRule.

        The type of the rule.

        :return: The rule_type of this FirewallPolicyNatRule.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this FirewallPolicyNatRule.

        The type of the rule.

        :param rule_type: The rule_type of this FirewallPolicyNatRule.
        :type rule_type: str
        """
        allowed_values = ["FirewallPolicyNatRule", "FirewallPolicyFilterRule"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type
