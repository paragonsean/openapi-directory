# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_policy_properties_format_base_policy import FirewallPolicyPropertiesFormatBasePolicy
from openapi_server import util


class FirewallPolicyPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_policy: FirewallPolicyPropertiesFormatBasePolicy=None, child_policies: List[FirewallPolicyPropertiesFormatBasePolicy]=None, firewalls: List[FirewallPolicyPropertiesFormatBasePolicy]=None, provisioning_state: str=None, rule_groups: List[FirewallPolicyPropertiesFormatBasePolicy]=None, threat_intel_mode: str=None):
        """FirewallPolicyPropertiesFormat - a model defined in OpenAPI

        :param base_policy: The base_policy of this FirewallPolicyPropertiesFormat.
        :param child_policies: The child_policies of this FirewallPolicyPropertiesFormat.
        :param firewalls: The firewalls of this FirewallPolicyPropertiesFormat.
        :param provisioning_state: The provisioning_state of this FirewallPolicyPropertiesFormat.
        :param rule_groups: The rule_groups of this FirewallPolicyPropertiesFormat.
        :param threat_intel_mode: The threat_intel_mode of this FirewallPolicyPropertiesFormat.
        """
        self.openapi_types = {
            'base_policy': FirewallPolicyPropertiesFormatBasePolicy,
            'child_policies': List[FirewallPolicyPropertiesFormatBasePolicy],
            'firewalls': List[FirewallPolicyPropertiesFormatBasePolicy],
            'provisioning_state': str,
            'rule_groups': List[FirewallPolicyPropertiesFormatBasePolicy],
            'threat_intel_mode': str
        }

        self.attribute_map = {
            'base_policy': 'basePolicy',
            'child_policies': 'childPolicies',
            'firewalls': 'firewalls',
            'provisioning_state': 'provisioningState',
            'rule_groups': 'ruleGroups',
            'threat_intel_mode': 'threatIntelMode'
        }

        self._base_policy = base_policy
        self._child_policies = child_policies
        self._firewalls = firewalls
        self._provisioning_state = provisioning_state
        self._rule_groups = rule_groups
        self._threat_intel_mode = threat_intel_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirewallPolicyPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirewallPolicyPropertiesFormat of this FirewallPolicyPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_policy(self):
        """Gets the base_policy of this FirewallPolicyPropertiesFormat.


        :return: The base_policy of this FirewallPolicyPropertiesFormat.
        :rtype: FirewallPolicyPropertiesFormatBasePolicy
        """
        return self._base_policy

    @base_policy.setter
    def base_policy(self, base_policy):
        """Sets the base_policy of this FirewallPolicyPropertiesFormat.


        :param base_policy: The base_policy of this FirewallPolicyPropertiesFormat.
        :type base_policy: FirewallPolicyPropertiesFormatBasePolicy
        """

        self._base_policy = base_policy

    @property
    def child_policies(self):
        """Gets the child_policies of this FirewallPolicyPropertiesFormat.

        List of references to Child Firewall Policies.

        :return: The child_policies of this FirewallPolicyPropertiesFormat.
        :rtype: List[FirewallPolicyPropertiesFormatBasePolicy]
        """
        return self._child_policies

    @child_policies.setter
    def child_policies(self, child_policies):
        """Sets the child_policies of this FirewallPolicyPropertiesFormat.

        List of references to Child Firewall Policies.

        :param child_policies: The child_policies of this FirewallPolicyPropertiesFormat.
        :type child_policies: List[FirewallPolicyPropertiesFormatBasePolicy]
        """

        self._child_policies = child_policies

    @property
    def firewalls(self):
        """Gets the firewalls of this FirewallPolicyPropertiesFormat.

        List of references to Azure Firewalls that this Firewall Policy is associated with.

        :return: The firewalls of this FirewallPolicyPropertiesFormat.
        :rtype: List[FirewallPolicyPropertiesFormatBasePolicy]
        """
        return self._firewalls

    @firewalls.setter
    def firewalls(self, firewalls):
        """Sets the firewalls of this FirewallPolicyPropertiesFormat.

        List of references to Azure Firewalls that this Firewall Policy is associated with.

        :param firewalls: The firewalls of this FirewallPolicyPropertiesFormat.
        :type firewalls: List[FirewallPolicyPropertiesFormatBasePolicy]
        """

        self._firewalls = firewalls

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this FirewallPolicyPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this FirewallPolicyPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this FirewallPolicyPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this FirewallPolicyPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def rule_groups(self):
        """Gets the rule_groups of this FirewallPolicyPropertiesFormat.

        List of references to FirewallPolicyRuleGroups.

        :return: The rule_groups of this FirewallPolicyPropertiesFormat.
        :rtype: List[FirewallPolicyPropertiesFormatBasePolicy]
        """
        return self._rule_groups

    @rule_groups.setter
    def rule_groups(self, rule_groups):
        """Sets the rule_groups of this FirewallPolicyPropertiesFormat.

        List of references to FirewallPolicyRuleGroups.

        :param rule_groups: The rule_groups of this FirewallPolicyPropertiesFormat.
        :type rule_groups: List[FirewallPolicyPropertiesFormatBasePolicy]
        """

        self._rule_groups = rule_groups

    @property
    def threat_intel_mode(self):
        """Gets the threat_intel_mode of this FirewallPolicyPropertiesFormat.

        The operation mode for Threat Intel.

        :return: The threat_intel_mode of this FirewallPolicyPropertiesFormat.
        :rtype: str
        """
        return self._threat_intel_mode

    @threat_intel_mode.setter
    def threat_intel_mode(self, threat_intel_mode):
        """Sets the threat_intel_mode of this FirewallPolicyPropertiesFormat.

        The operation mode for Threat Intel.

        :param threat_intel_mode: The threat_intel_mode of this FirewallPolicyPropertiesFormat.
        :type threat_intel_mode: str
        """
        allowed_values = ["Alert", "Deny", "Off"]  # noqa: E501
        if threat_intel_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `threat_intel_mode` ({0}), must be one of {1}"
                .format(threat_intel_mode, allowed_values)
            )

        self._threat_intel_mode = threat_intel_mode
