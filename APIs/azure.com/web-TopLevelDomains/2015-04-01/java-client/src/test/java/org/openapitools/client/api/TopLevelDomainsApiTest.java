/*
 * TopLevelDomains API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.TldLegalAgreementCollection;
import org.openapitools.client.model.TopLevelDomain;
import org.openapitools.client.model.TopLevelDomainAgreementOption;
import org.openapitools.client.model.TopLevelDomainCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TopLevelDomainsApi
 */
@Disabled
public class TopLevelDomainsApiTest {

    private final TopLevelDomainsApi api = new TopLevelDomainsApi();

    /**
     * Get details of a top-level domain.
     *
     * Get details of a top-level domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topLevelDomainsGetTest() throws ApiException {
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        TopLevelDomain response = api.topLevelDomainsGet(name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all top-level domains supported for registration.
     *
     * Get all top-level domains supported for registration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topLevelDomainsListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        TopLevelDomainCollection response = api.topLevelDomainsList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all legal agreements that user needs to accept before purchasing a domain.
     *
     * Gets all legal agreements that user needs to accept before purchasing a domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topLevelDomainsListAgreementsTest() throws ApiException {
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        TopLevelDomainAgreementOption agreementOption = null;
        TldLegalAgreementCollection response = api.topLevelDomainsListAgreements(name, subscriptionId, apiVersion, agreementOption);
        // TODO: test validations
    }

}
