/**
 * TopLevelDomains API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopLevelDomainAgreementOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopLevelDomainAgreementOption::OAITopLevelDomainAgreementOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopLevelDomainAgreementOption::OAITopLevelDomainAgreementOption() {
    this->initializeModel();
}

OAITopLevelDomainAgreementOption::~OAITopLevelDomainAgreementOption() {}

void OAITopLevelDomainAgreementOption::initializeModel() {

    m_for_transfer_isSet = false;
    m_for_transfer_isValid = false;

    m_include_privacy_isSet = false;
    m_include_privacy_isValid = false;
}

void OAITopLevelDomainAgreementOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopLevelDomainAgreementOption::fromJsonObject(QJsonObject json) {

    m_for_transfer_isValid = ::OpenAPI::fromJsonValue(m_for_transfer, json[QString("forTransfer")]);
    m_for_transfer_isSet = !json[QString("forTransfer")].isNull() && m_for_transfer_isValid;

    m_include_privacy_isValid = ::OpenAPI::fromJsonValue(m_include_privacy, json[QString("includePrivacy")]);
    m_include_privacy_isSet = !json[QString("includePrivacy")].isNull() && m_include_privacy_isValid;
}

QString OAITopLevelDomainAgreementOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopLevelDomainAgreementOption::asJsonObject() const {
    QJsonObject obj;
    if (m_for_transfer_isSet) {
        obj.insert(QString("forTransfer"), ::OpenAPI::toJsonValue(m_for_transfer));
    }
    if (m_include_privacy_isSet) {
        obj.insert(QString("includePrivacy"), ::OpenAPI::toJsonValue(m_include_privacy));
    }
    return obj;
}

bool OAITopLevelDomainAgreementOption::isForTransfer() const {
    return m_for_transfer;
}
void OAITopLevelDomainAgreementOption::setForTransfer(const bool &for_transfer) {
    m_for_transfer = for_transfer;
    m_for_transfer_isSet = true;
}

bool OAITopLevelDomainAgreementOption::is_for_transfer_Set() const{
    return m_for_transfer_isSet;
}

bool OAITopLevelDomainAgreementOption::is_for_transfer_Valid() const{
    return m_for_transfer_isValid;
}

bool OAITopLevelDomainAgreementOption::isIncludePrivacy() const {
    return m_include_privacy;
}
void OAITopLevelDomainAgreementOption::setIncludePrivacy(const bool &include_privacy) {
    m_include_privacy = include_privacy;
    m_include_privacy_isSet = true;
}

bool OAITopLevelDomainAgreementOption::is_include_privacy_Set() const{
    return m_include_privacy_isSet;
}

bool OAITopLevelDomainAgreementOption::is_include_privacy_Valid() const{
    return m_include_privacy_isValid;
}

bool OAITopLevelDomainAgreementOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_for_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopLevelDomainAgreementOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
