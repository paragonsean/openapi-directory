# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TopLevelDomainAgreementOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, for_transfer: bool=None, include_privacy: bool=None):
        """TopLevelDomainAgreementOption - a model defined in OpenAPI

        :param for_transfer: The for_transfer of this TopLevelDomainAgreementOption.
        :param include_privacy: The include_privacy of this TopLevelDomainAgreementOption.
        """
        self.openapi_types = {
            'for_transfer': bool,
            'include_privacy': bool
        }

        self.attribute_map = {
            'for_transfer': 'forTransfer',
            'include_privacy': 'includePrivacy'
        }

        self._for_transfer = for_transfer
        self._include_privacy = include_privacy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopLevelDomainAgreementOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopLevelDomainAgreementOption of this TopLevelDomainAgreementOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def for_transfer(self):
        """Gets the for_transfer of this TopLevelDomainAgreementOption.

        If <code>true</code>, then the list of agreements will include agreements for domain transfer as well; otherwise, <code>false</code>.

        :return: The for_transfer of this TopLevelDomainAgreementOption.
        :rtype: bool
        """
        return self._for_transfer

    @for_transfer.setter
    def for_transfer(self, for_transfer):
        """Sets the for_transfer of this TopLevelDomainAgreementOption.

        If <code>true</code>, then the list of agreements will include agreements for domain transfer as well; otherwise, <code>false</code>.

        :param for_transfer: The for_transfer of this TopLevelDomainAgreementOption.
        :type for_transfer: bool
        """

        self._for_transfer = for_transfer

    @property
    def include_privacy(self):
        """Gets the include_privacy of this TopLevelDomainAgreementOption.

        If <code>true</code>, then the list of agreements will include agreements for domain privacy as well; otherwise, <code>false</code>.

        :return: The include_privacy of this TopLevelDomainAgreementOption.
        :rtype: bool
        """
        return self._include_privacy

    @include_privacy.setter
    def include_privacy(self, include_privacy):
        """Sets the include_privacy of this TopLevelDomainAgreementOption.

        If <code>true</code>, then the list of agreements will include agreements for domain privacy as well; otherwise, <code>false</code>.

        :param include_privacy: The include_privacy of this TopLevelDomainAgreementOption.
        :type include_privacy: bool
        """

        self._include_privacy = include_privacy
