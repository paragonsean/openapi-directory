# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdminOverviewResourceHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_resource_count: int=None, health_unknown_count: int=None, healthy_resource_count: int=None, total_resource_count: int=None, warning_resource_count: int=None):
        """AdminOverviewResourceHealth - a model defined in OpenAPI

        :param error_resource_count: The error_resource_count of this AdminOverviewResourceHealth.
        :param health_unknown_count: The health_unknown_count of this AdminOverviewResourceHealth.
        :param healthy_resource_count: The healthy_resource_count of this AdminOverviewResourceHealth.
        :param total_resource_count: The total_resource_count of this AdminOverviewResourceHealth.
        :param warning_resource_count: The warning_resource_count of this AdminOverviewResourceHealth.
        """
        self.openapi_types = {
            'error_resource_count': int,
            'health_unknown_count': int,
            'healthy_resource_count': int,
            'total_resource_count': int,
            'warning_resource_count': int
        }

        self.attribute_map = {
            'error_resource_count': 'errorResourceCount',
            'health_unknown_count': 'healthUnknownCount',
            'healthy_resource_count': 'healthyResourceCount',
            'total_resource_count': 'totalResourceCount',
            'warning_resource_count': 'warningResourceCount'
        }

        self._error_resource_count = error_resource_count
        self._health_unknown_count = health_unknown_count
        self._healthy_resource_count = healthy_resource_count
        self._total_resource_count = total_resource_count
        self._warning_resource_count = warning_resource_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminOverviewResourceHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminOverviewResourceHealth of this AdminOverviewResourceHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_resource_count(self):
        """Gets the error_resource_count of this AdminOverviewResourceHealth.

        Number of resources in the error state.

        :return: The error_resource_count of this AdminOverviewResourceHealth.
        :rtype: int
        """
        return self._error_resource_count

    @error_resource_count.setter
    def error_resource_count(self, error_resource_count):
        """Sets the error_resource_count of this AdminOverviewResourceHealth.

        Number of resources in the error state.

        :param error_resource_count: The error_resource_count of this AdminOverviewResourceHealth.
        :type error_resource_count: int
        """

        self._error_resource_count = error_resource_count

    @property
    def health_unknown_count(self):
        """Gets the health_unknown_count of this AdminOverviewResourceHealth.

        Number of resources in an unknown state.

        :return: The health_unknown_count of this AdminOverviewResourceHealth.
        :rtype: int
        """
        return self._health_unknown_count

    @health_unknown_count.setter
    def health_unknown_count(self, health_unknown_count):
        """Sets the health_unknown_count of this AdminOverviewResourceHealth.

        Number of resources in an unknown state.

        :param health_unknown_count: The health_unknown_count of this AdminOverviewResourceHealth.
        :type health_unknown_count: int
        """

        self._health_unknown_count = health_unknown_count

    @property
    def healthy_resource_count(self):
        """Gets the healthy_resource_count of this AdminOverviewResourceHealth.

        Number of resources in the success state.

        :return: The healthy_resource_count of this AdminOverviewResourceHealth.
        :rtype: int
        """
        return self._healthy_resource_count

    @healthy_resource_count.setter
    def healthy_resource_count(self, healthy_resource_count):
        """Sets the healthy_resource_count of this AdminOverviewResourceHealth.

        Number of resources in the success state.

        :param healthy_resource_count: The healthy_resource_count of this AdminOverviewResourceHealth.
        :type healthy_resource_count: int
        """

        self._healthy_resource_count = healthy_resource_count

    @property
    def total_resource_count(self):
        """Gets the total_resource_count of this AdminOverviewResourceHealth.

        Total number of resources.

        :return: The total_resource_count of this AdminOverviewResourceHealth.
        :rtype: int
        """
        return self._total_resource_count

    @total_resource_count.setter
    def total_resource_count(self, total_resource_count):
        """Sets the total_resource_count of this AdminOverviewResourceHealth.

        Total number of resources.

        :param total_resource_count: The total_resource_count of this AdminOverviewResourceHealth.
        :type total_resource_count: int
        """

        self._total_resource_count = total_resource_count

    @property
    def warning_resource_count(self):
        """Gets the warning_resource_count of this AdminOverviewResourceHealth.

        Number of resources in the warning state.

        :return: The warning_resource_count of this AdminOverviewResourceHealth.
        :rtype: int
        """
        return self._warning_resource_count

    @warning_resource_count.setter
    def warning_resource_count(self, warning_resource_count):
        """Sets the warning_resource_count of this AdminOverviewResourceHealth.

        Number of resources in the warning state.

        :param warning_resource_count: The warning_resource_count of this AdminOverviewResourceHealth.
        :type warning_resource_count: int
        """

        self._warning_resource_count = warning_resource_count
