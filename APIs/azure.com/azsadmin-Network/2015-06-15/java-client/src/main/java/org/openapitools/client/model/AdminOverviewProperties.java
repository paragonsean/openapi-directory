/*
 * NetworkAdminManagementClient
 * Network admin operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdminOverviewResourceHealth;
import org.openapitools.client.model.AdminOverviewResourceUsage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Admin overview properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:06.130042-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminOverviewProperties {
  public static final String SERIALIZED_NAME_BACKEND_IP_USAGE = "backendIpUsage";
  @SerializedName(SERIALIZED_NAME_BACKEND_IP_USAGE)
  private AdminOverviewResourceUsage backendIpUsage;

  public static final String SERIALIZED_NAME_LOAD_BALANCER_MUX_HEALTH = "loadBalancerMuxHealth";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_MUX_HEALTH)
  private AdminOverviewResourceHealth loadBalancerMuxHealth;

  public static final String SERIALIZED_NAME_MAC_ADDRESS_USAGE = "macAddressUsage";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS_USAGE)
  private AdminOverviewResourceUsage macAddressUsage;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESS_USAGE = "publicIpAddressUsage";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESS_USAGE)
  private AdminOverviewResourceUsage publicIpAddressUsage;

  public static final String SERIALIZED_NAME_VIRTUAL_GATEWAY_HEALTH = "virtualGatewayHealth";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_GATEWAY_HEALTH)
  private AdminOverviewResourceHealth virtualGatewayHealth;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_HEALTH = "virtualNetworkHealth";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_HEALTH)
  private AdminOverviewResourceHealth virtualNetworkHealth;

  public AdminOverviewProperties() {
  }

  public AdminOverviewProperties(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public AdminOverviewProperties backendIpUsage(AdminOverviewResourceUsage backendIpUsage) {
    this.backendIpUsage = backendIpUsage;
    return this;
  }

  /**
   * Get backendIpUsage
   * @return backendIpUsage
   */
  @javax.annotation.Nullable
  public AdminOverviewResourceUsage getBackendIpUsage() {
    return backendIpUsage;
  }

  public void setBackendIpUsage(AdminOverviewResourceUsage backendIpUsage) {
    this.backendIpUsage = backendIpUsage;
  }


  public AdminOverviewProperties loadBalancerMuxHealth(AdminOverviewResourceHealth loadBalancerMuxHealth) {
    this.loadBalancerMuxHealth = loadBalancerMuxHealth;
    return this;
  }

  /**
   * Get loadBalancerMuxHealth
   * @return loadBalancerMuxHealth
   */
  @javax.annotation.Nullable
  public AdminOverviewResourceHealth getLoadBalancerMuxHealth() {
    return loadBalancerMuxHealth;
  }

  public void setLoadBalancerMuxHealth(AdminOverviewResourceHealth loadBalancerMuxHealth) {
    this.loadBalancerMuxHealth = loadBalancerMuxHealth;
  }


  public AdminOverviewProperties macAddressUsage(AdminOverviewResourceUsage macAddressUsage) {
    this.macAddressUsage = macAddressUsage;
    return this;
  }

  /**
   * Get macAddressUsage
   * @return macAddressUsage
   */
  @javax.annotation.Nullable
  public AdminOverviewResourceUsage getMacAddressUsage() {
    return macAddressUsage;
  }

  public void setMacAddressUsage(AdminOverviewResourceUsage macAddressUsage) {
    this.macAddressUsage = macAddressUsage;
  }


  /**
   * The provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public AdminOverviewProperties publicIpAddressUsage(AdminOverviewResourceUsage publicIpAddressUsage) {
    this.publicIpAddressUsage = publicIpAddressUsage;
    return this;
  }

  /**
   * Get publicIpAddressUsage
   * @return publicIpAddressUsage
   */
  @javax.annotation.Nullable
  public AdminOverviewResourceUsage getPublicIpAddressUsage() {
    return publicIpAddressUsage;
  }

  public void setPublicIpAddressUsage(AdminOverviewResourceUsage publicIpAddressUsage) {
    this.publicIpAddressUsage = publicIpAddressUsage;
  }


  public AdminOverviewProperties virtualGatewayHealth(AdminOverviewResourceHealth virtualGatewayHealth) {
    this.virtualGatewayHealth = virtualGatewayHealth;
    return this;
  }

  /**
   * Get virtualGatewayHealth
   * @return virtualGatewayHealth
   */
  @javax.annotation.Nullable
  public AdminOverviewResourceHealth getVirtualGatewayHealth() {
    return virtualGatewayHealth;
  }

  public void setVirtualGatewayHealth(AdminOverviewResourceHealth virtualGatewayHealth) {
    this.virtualGatewayHealth = virtualGatewayHealth;
  }


  public AdminOverviewProperties virtualNetworkHealth(AdminOverviewResourceHealth virtualNetworkHealth) {
    this.virtualNetworkHealth = virtualNetworkHealth;
    return this;
  }

  /**
   * Get virtualNetworkHealth
   * @return virtualNetworkHealth
   */
  @javax.annotation.Nullable
  public AdminOverviewResourceHealth getVirtualNetworkHealth() {
    return virtualNetworkHealth;
  }

  public void setVirtualNetworkHealth(AdminOverviewResourceHealth virtualNetworkHealth) {
    this.virtualNetworkHealth = virtualNetworkHealth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminOverviewProperties adminOverviewProperties = (AdminOverviewProperties) o;
    return Objects.equals(this.backendIpUsage, adminOverviewProperties.backendIpUsage) &&
        Objects.equals(this.loadBalancerMuxHealth, adminOverviewProperties.loadBalancerMuxHealth) &&
        Objects.equals(this.macAddressUsage, adminOverviewProperties.macAddressUsage) &&
        Objects.equals(this.provisioningState, adminOverviewProperties.provisioningState) &&
        Objects.equals(this.publicIpAddressUsage, adminOverviewProperties.publicIpAddressUsage) &&
        Objects.equals(this.virtualGatewayHealth, adminOverviewProperties.virtualGatewayHealth) &&
        Objects.equals(this.virtualNetworkHealth, adminOverviewProperties.virtualNetworkHealth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendIpUsage, loadBalancerMuxHealth, macAddressUsage, provisioningState, publicIpAddressUsage, virtualGatewayHealth, virtualNetworkHealth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminOverviewProperties {\n");
    sb.append("    backendIpUsage: ").append(toIndentedString(backendIpUsage)).append("\n");
    sb.append("    loadBalancerMuxHealth: ").append(toIndentedString(loadBalancerMuxHealth)).append("\n");
    sb.append("    macAddressUsage: ").append(toIndentedString(macAddressUsage)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIpAddressUsage: ").append(toIndentedString(publicIpAddressUsage)).append("\n");
    sb.append("    virtualGatewayHealth: ").append(toIndentedString(virtualGatewayHealth)).append("\n");
    sb.append("    virtualNetworkHealth: ").append(toIndentedString(virtualNetworkHealth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendIpUsage");
    openapiFields.add("loadBalancerMuxHealth");
    openapiFields.add("macAddressUsage");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIpAddressUsage");
    openapiFields.add("virtualGatewayHealth");
    openapiFields.add("virtualNetworkHealth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminOverviewProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminOverviewProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminOverviewProperties is not found in the empty JSON string", AdminOverviewProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminOverviewProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminOverviewProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendIpUsage`
      if (jsonObj.get("backendIpUsage") != null && !jsonObj.get("backendIpUsage").isJsonNull()) {
        AdminOverviewResourceUsage.validateJsonElement(jsonObj.get("backendIpUsage"));
      }
      // validate the optional field `loadBalancerMuxHealth`
      if (jsonObj.get("loadBalancerMuxHealth") != null && !jsonObj.get("loadBalancerMuxHealth").isJsonNull()) {
        AdminOverviewResourceHealth.validateJsonElement(jsonObj.get("loadBalancerMuxHealth"));
      }
      // validate the optional field `macAddressUsage`
      if (jsonObj.get("macAddressUsage") != null && !jsonObj.get("macAddressUsage").isJsonNull()) {
        AdminOverviewResourceUsage.validateJsonElement(jsonObj.get("macAddressUsage"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `publicIpAddressUsage`
      if (jsonObj.get("publicIpAddressUsage") != null && !jsonObj.get("publicIpAddressUsage").isJsonNull()) {
        AdminOverviewResourceUsage.validateJsonElement(jsonObj.get("publicIpAddressUsage"));
      }
      // validate the optional field `virtualGatewayHealth`
      if (jsonObj.get("virtualGatewayHealth") != null && !jsonObj.get("virtualGatewayHealth").isJsonNull()) {
        AdminOverviewResourceHealth.validateJsonElement(jsonObj.get("virtualGatewayHealth"));
      }
      // validate the optional field `virtualNetworkHealth`
      if (jsonObj.get("virtualNetworkHealth") != null && !jsonObj.get("virtualNetworkHealth").isJsonNull()) {
        AdminOverviewResourceHealth.validateJsonElement(jsonObj.get("virtualNetworkHealth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminOverviewProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminOverviewProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminOverviewProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminOverviewProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminOverviewProperties>() {
           @Override
           public void write(JsonWriter out, AdminOverviewProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminOverviewProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminOverviewProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminOverviewProperties
   * @throws IOException if the JSON string is invalid with respect to AdminOverviewProperties
   */
  public static AdminOverviewProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminOverviewProperties.class);
  }

  /**
   * Convert an instance of AdminOverviewProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

