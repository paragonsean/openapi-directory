/**
 * NetworkAdminManagementClient
 * Network admin operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminOverview from '../model/AdminOverview';
import LocationsList from '../model/LocationsList';
import OperationList from '../model/OperationList';
import OperationResultList from '../model/OperationResultList';

/**
* Network service.
* @module api/NetworkApi
* @version 2015-06-15
*/
export default class NetworkApi {

    /**
    * Constructs a new NetworkApi. 
    * @alias module:api/NetworkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the locationsOperationResultsList operation.
     * @callback module:api/NetworkApi~locationsOperationResultsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of operation results for a location
     * @param {String} apiVersion Client API Version.
     * @param {String} location Location of the resource.
     * @param {module:api/NetworkApi~locationsOperationResultsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResultList}
     */
    locationsOperationResultsList(apiVersion, location, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling locationsOperationResultsList");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling locationsOperationResultsList");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResultList;
      return this.apiClient.callApi(
        '/providers/Microsoft.Network.Admin/locations/{location}/operationResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsOperationsList operation.
     * @callback module:api/NetworkApi~locationsOperationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of support REST operations.
     * @param {String} apiVersion Client API Version.
     * @param {String} location Location of the resource.
     * @param {module:api/NetworkApi~locationsOperationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationList}
     */
    locationsOperationsList(apiVersion, location, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling locationsOperationsList");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling locationsOperationsList");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationList;
      return this.apiClient.callApi(
        '/providers/Microsoft.Network.Admin/locations/{location}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onPremLocationsList operation.
     * @callback module:api/NetworkApi~onPremLocationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of supported locations
     * @param {String} apiVersion Client API Version.
     * @param {module:api/NetworkApi~onPremLocationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationsList}
     */
    onPremLocationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling onPremLocationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LocationsList;
      return this.apiClient.callApi(
        '/providers/Microsoft.Network.Admin/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/NetworkApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of support REST operations.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/NetworkApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationList}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationList;
      return this.apiClient.callApi(
        '/providers/Microsoft.Network.Admin/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourceProviderStateGet operation.
     * @callback module:api/NetworkApi~resourceProviderStateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an overview of the state of the network resource provider.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/NetworkApi~resourceProviderStateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminOverview}
     */
    resourceProviderStateGet(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourceProviderStateGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourceProviderStateGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminOverview;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network.Admin/adminOverview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
