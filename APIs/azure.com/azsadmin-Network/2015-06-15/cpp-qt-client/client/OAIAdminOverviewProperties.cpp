/**
 * NetworkAdminManagementClient
 * Network admin operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2015-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminOverviewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminOverviewProperties::OAIAdminOverviewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminOverviewProperties::OAIAdminOverviewProperties() {
    this->initializeModel();
}

OAIAdminOverviewProperties::~OAIAdminOverviewProperties() {}

void OAIAdminOverviewProperties::initializeModel() {

    m_backend_ip_usage_isSet = false;
    m_backend_ip_usage_isValid = false;

    m_load_balancer_mux_health_isSet = false;
    m_load_balancer_mux_health_isValid = false;

    m_mac_address_usage_isSet = false;
    m_mac_address_usage_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_address_usage_isSet = false;
    m_public_ip_address_usage_isValid = false;

    m_virtual_gateway_health_isSet = false;
    m_virtual_gateway_health_isValid = false;

    m_virtual_network_health_isSet = false;
    m_virtual_network_health_isValid = false;
}

void OAIAdminOverviewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminOverviewProperties::fromJsonObject(QJsonObject json) {

    m_backend_ip_usage_isValid = ::OpenAPI::fromJsonValue(m_backend_ip_usage, json[QString("backendIpUsage")]);
    m_backend_ip_usage_isSet = !json[QString("backendIpUsage")].isNull() && m_backend_ip_usage_isValid;

    m_load_balancer_mux_health_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_mux_health, json[QString("loadBalancerMuxHealth")]);
    m_load_balancer_mux_health_isSet = !json[QString("loadBalancerMuxHealth")].isNull() && m_load_balancer_mux_health_isValid;

    m_mac_address_usage_isValid = ::OpenAPI::fromJsonValue(m_mac_address_usage, json[QString("macAddressUsage")]);
    m_mac_address_usage_isSet = !json[QString("macAddressUsage")].isNull() && m_mac_address_usage_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_address_usage_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address_usage, json[QString("publicIpAddressUsage")]);
    m_public_ip_address_usage_isSet = !json[QString("publicIpAddressUsage")].isNull() && m_public_ip_address_usage_isValid;

    m_virtual_gateway_health_isValid = ::OpenAPI::fromJsonValue(m_virtual_gateway_health, json[QString("virtualGatewayHealth")]);
    m_virtual_gateway_health_isSet = !json[QString("virtualGatewayHealth")].isNull() && m_virtual_gateway_health_isValid;

    m_virtual_network_health_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_health, json[QString("virtualNetworkHealth")]);
    m_virtual_network_health_isSet = !json[QString("virtualNetworkHealth")].isNull() && m_virtual_network_health_isValid;
}

QString OAIAdminOverviewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminOverviewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_ip_usage.isSet()) {
        obj.insert(QString("backendIpUsage"), ::OpenAPI::toJsonValue(m_backend_ip_usage));
    }
    if (m_load_balancer_mux_health.isSet()) {
        obj.insert(QString("loadBalancerMuxHealth"), ::OpenAPI::toJsonValue(m_load_balancer_mux_health));
    }
    if (m_mac_address_usage.isSet()) {
        obj.insert(QString("macAddressUsage"), ::OpenAPI::toJsonValue(m_mac_address_usage));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_address_usage.isSet()) {
        obj.insert(QString("publicIpAddressUsage"), ::OpenAPI::toJsonValue(m_public_ip_address_usage));
    }
    if (m_virtual_gateway_health.isSet()) {
        obj.insert(QString("virtualGatewayHealth"), ::OpenAPI::toJsonValue(m_virtual_gateway_health));
    }
    if (m_virtual_network_health.isSet()) {
        obj.insert(QString("virtualNetworkHealth"), ::OpenAPI::toJsonValue(m_virtual_network_health));
    }
    return obj;
}

OAIAdminOverviewResourceUsage OAIAdminOverviewProperties::getBackendIpUsage() const {
    return m_backend_ip_usage;
}
void OAIAdminOverviewProperties::setBackendIpUsage(const OAIAdminOverviewResourceUsage &backend_ip_usage) {
    m_backend_ip_usage = backend_ip_usage;
    m_backend_ip_usage_isSet = true;
}

bool OAIAdminOverviewProperties::is_backend_ip_usage_Set() const{
    return m_backend_ip_usage_isSet;
}

bool OAIAdminOverviewProperties::is_backend_ip_usage_Valid() const{
    return m_backend_ip_usage_isValid;
}

OAIAdminOverviewResourceHealth OAIAdminOverviewProperties::getLoadBalancerMuxHealth() const {
    return m_load_balancer_mux_health;
}
void OAIAdminOverviewProperties::setLoadBalancerMuxHealth(const OAIAdminOverviewResourceHealth &load_balancer_mux_health) {
    m_load_balancer_mux_health = load_balancer_mux_health;
    m_load_balancer_mux_health_isSet = true;
}

bool OAIAdminOverviewProperties::is_load_balancer_mux_health_Set() const{
    return m_load_balancer_mux_health_isSet;
}

bool OAIAdminOverviewProperties::is_load_balancer_mux_health_Valid() const{
    return m_load_balancer_mux_health_isValid;
}

OAIAdminOverviewResourceUsage OAIAdminOverviewProperties::getMacAddressUsage() const {
    return m_mac_address_usage;
}
void OAIAdminOverviewProperties::setMacAddressUsage(const OAIAdminOverviewResourceUsage &mac_address_usage) {
    m_mac_address_usage = mac_address_usage;
    m_mac_address_usage_isSet = true;
}

bool OAIAdminOverviewProperties::is_mac_address_usage_Set() const{
    return m_mac_address_usage_isSet;
}

bool OAIAdminOverviewProperties::is_mac_address_usage_Valid() const{
    return m_mac_address_usage_isValid;
}

QString OAIAdminOverviewProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAdminOverviewProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAdminOverviewProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAdminOverviewProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIAdminOverviewResourceUsage OAIAdminOverviewProperties::getPublicIpAddressUsage() const {
    return m_public_ip_address_usage;
}
void OAIAdminOverviewProperties::setPublicIpAddressUsage(const OAIAdminOverviewResourceUsage &public_ip_address_usage) {
    m_public_ip_address_usage = public_ip_address_usage;
    m_public_ip_address_usage_isSet = true;
}

bool OAIAdminOverviewProperties::is_public_ip_address_usage_Set() const{
    return m_public_ip_address_usage_isSet;
}

bool OAIAdminOverviewProperties::is_public_ip_address_usage_Valid() const{
    return m_public_ip_address_usage_isValid;
}

OAIAdminOverviewResourceHealth OAIAdminOverviewProperties::getVirtualGatewayHealth() const {
    return m_virtual_gateway_health;
}
void OAIAdminOverviewProperties::setVirtualGatewayHealth(const OAIAdminOverviewResourceHealth &virtual_gateway_health) {
    m_virtual_gateway_health = virtual_gateway_health;
    m_virtual_gateway_health_isSet = true;
}

bool OAIAdminOverviewProperties::is_virtual_gateway_health_Set() const{
    return m_virtual_gateway_health_isSet;
}

bool OAIAdminOverviewProperties::is_virtual_gateway_health_Valid() const{
    return m_virtual_gateway_health_isValid;
}

OAIAdminOverviewResourceHealth OAIAdminOverviewProperties::getVirtualNetworkHealth() const {
    return m_virtual_network_health;
}
void OAIAdminOverviewProperties::setVirtualNetworkHealth(const OAIAdminOverviewResourceHealth &virtual_network_health) {
    m_virtual_network_health = virtual_network_health;
    m_virtual_network_health_isSet = true;
}

bool OAIAdminOverviewProperties::is_virtual_network_health_Set() const{
    return m_virtual_network_health_isSet;
}

bool OAIAdminOverviewProperties::is_virtual_network_health_Valid() const{
    return m_virtual_network_health_isValid;
}

bool OAIAdminOverviewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_ip_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_mux_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_gateway_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_health.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminOverviewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
