/**
 * NetworkAdminManagementClient
 * Network admin operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2015-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminOverviewResourceUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminOverviewResourceUsage::OAIAdminOverviewResourceUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminOverviewResourceUsage::OAIAdminOverviewResourceUsage() {
    this->initializeModel();
}

OAIAdminOverviewResourceUsage::~OAIAdminOverviewResourceUsage() {}

void OAIAdminOverviewResourceUsage::initializeModel() {

    m_in_use_resource_count_isSet = false;
    m_in_use_resource_count_isValid = false;

    m_total_resource_count_isSet = false;
    m_total_resource_count_isValid = false;
}

void OAIAdminOverviewResourceUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminOverviewResourceUsage::fromJsonObject(QJsonObject json) {

    m_in_use_resource_count_isValid = ::OpenAPI::fromJsonValue(m_in_use_resource_count, json[QString("inUseResourceCount")]);
    m_in_use_resource_count_isSet = !json[QString("inUseResourceCount")].isNull() && m_in_use_resource_count_isValid;

    m_total_resource_count_isValid = ::OpenAPI::fromJsonValue(m_total_resource_count, json[QString("totalResourceCount")]);
    m_total_resource_count_isSet = !json[QString("totalResourceCount")].isNull() && m_total_resource_count_isValid;
}

QString OAIAdminOverviewResourceUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminOverviewResourceUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_in_use_resource_count_isSet) {
        obj.insert(QString("inUseResourceCount"), ::OpenAPI::toJsonValue(m_in_use_resource_count));
    }
    if (m_total_resource_count_isSet) {
        obj.insert(QString("totalResourceCount"), ::OpenAPI::toJsonValue(m_total_resource_count));
    }
    return obj;
}

qint64 OAIAdminOverviewResourceUsage::getInUseResourceCount() const {
    return m_in_use_resource_count;
}
void OAIAdminOverviewResourceUsage::setInUseResourceCount(const qint64 &in_use_resource_count) {
    m_in_use_resource_count = in_use_resource_count;
    m_in_use_resource_count_isSet = true;
}

bool OAIAdminOverviewResourceUsage::is_in_use_resource_count_Set() const{
    return m_in_use_resource_count_isSet;
}

bool OAIAdminOverviewResourceUsage::is_in_use_resource_count_Valid() const{
    return m_in_use_resource_count_isValid;
}

qint64 OAIAdminOverviewResourceUsage::getTotalResourceCount() const {
    return m_total_resource_count;
}
void OAIAdminOverviewResourceUsage::setTotalResourceCount(const qint64 &total_resource_count) {
    m_total_resource_count = total_resource_count;
    m_total_resource_count_isSet = true;
}

bool OAIAdminOverviewResourceUsage::is_total_resource_count_Set() const{
    return m_total_resource_count_isSet;
}

bool OAIAdminOverviewResourceUsage::is_total_resource_count_Valid() const{
    return m_total_resource_count_isValid;
}

bool OAIAdminOverviewResourceUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_use_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminOverviewResourceUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
