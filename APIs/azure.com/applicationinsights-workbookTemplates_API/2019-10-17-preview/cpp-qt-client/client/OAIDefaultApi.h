/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights workbook template type.
 *
 * The version of the OpenAPI document: 2019-10-17-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWorkbookError.h"
#include "OAIWorkbookTemplate.h"
#include "OAIWorkbookTemplateUpdateParameters.h"
#include "OAIWorkbookTemplatesListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  workbook_template_properties OAIWorkbookTemplate [required]
    */
    virtual void workbookTemplatesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version, const OAIWorkbookTemplate &workbook_template_properties);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workbookTemplatesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workbookTemplatesGet(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workbookTemplatesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  workbook_template_update_parameters OAIWorkbookTemplateUpdateParameters [optional]
    */
    virtual void workbookTemplatesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version, const ::OpenAPI::OptionalParam<OAIWorkbookTemplateUpdateParameters> &workbook_template_update_parameters = ::OpenAPI::OptionalParam<OAIWorkbookTemplateUpdateParameters>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workbookTemplatesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void workbookTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void workbookTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void workbookTemplatesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void workbookTemplatesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workbookTemplatesCreateOrUpdateSignal(OAIWorkbookTemplate summary);
    void workbookTemplatesDeleteSignal();
    void workbookTemplatesGetSignal(OAIWorkbookTemplate summary);
    void workbookTemplatesListByResourceGroupSignal(OAIWorkbookTemplatesListResult summary);
    void workbookTemplatesUpdateSignal(OAIWorkbookTemplate summary);


    void workbookTemplatesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkbookTemplate summary);
    void workbookTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workbookTemplatesGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkbookTemplate summary);
    void workbookTemplatesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkbookTemplatesListResult summary);
    void workbookTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkbookTemplate summary);

    Q_DECL_DEPRECATED_X("Use workbookTemplatesCreateOrUpdateSignalError() instead")
    void workbookTemplatesCreateOrUpdateSignalE(OAIWorkbookTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesCreateOrUpdateSignalError(OAIWorkbookTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbookTemplatesDeleteSignalError() instead")
    void workbookTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbookTemplatesGetSignalError() instead")
    void workbookTemplatesGetSignalE(OAIWorkbookTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesGetSignalError(OAIWorkbookTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbookTemplatesListByResourceGroupSignalError() instead")
    void workbookTemplatesListByResourceGroupSignalE(OAIWorkbookTemplatesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesListByResourceGroupSignalError(OAIWorkbookTemplatesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbookTemplatesUpdateSignalError() instead")
    void workbookTemplatesUpdateSignalE(OAIWorkbookTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesUpdateSignalError(OAIWorkbookTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workbookTemplatesCreateOrUpdateSignalErrorFull() instead")
    void workbookTemplatesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbookTemplatesDeleteSignalErrorFull() instead")
    void workbookTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbookTemplatesGetSignalErrorFull() instead")
    void workbookTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbookTemplatesListByResourceGroupSignalErrorFull() instead")
    void workbookTemplatesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbookTemplatesUpdateSignalErrorFull() instead")
    void workbookTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbookTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
