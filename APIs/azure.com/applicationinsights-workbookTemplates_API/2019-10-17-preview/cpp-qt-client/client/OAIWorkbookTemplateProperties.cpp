/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights workbook template type.
 *
 * The version of the OpenAPI document: 2019-10-17-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkbookTemplateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkbookTemplateProperties::OAIWorkbookTemplateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkbookTemplateProperties::OAIWorkbookTemplateProperties() {
    this->initializeModel();
}

OAIWorkbookTemplateProperties::~OAIWorkbookTemplateProperties() {}

void OAIWorkbookTemplateProperties::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_galleries_isSet = false;
    m_galleries_isValid = false;

    m_localized_isSet = false;
    m_localized_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_template_data_isSet = false;
    m_template_data_isValid = false;
}

void OAIWorkbookTemplateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkbookTemplateProperties::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_galleries_isValid = ::OpenAPI::fromJsonValue(m_galleries, json[QString("galleries")]);
    m_galleries_isSet = !json[QString("galleries")].isNull() && m_galleries_isValid;

    if(json["localized"].isObject()){
        auto varmap = json["localized"].toObject().toVariantMap();
        m_localized_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIWorkbookTemplateLocalizedGallery> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_localized_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_localized_isSet &= !jval.isNull() && m_localized_isValid;
                m_localized.insert(m_localized.end(), val, item);
            }
        }
    }

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_template_data_isValid = ::OpenAPI::fromJsonValue(m_template_data, json[QString("templateData")]);
    m_template_data_isSet = !json[QString("templateData")].isNull() && m_template_data_isValid;
}

QString OAIWorkbookTemplateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkbookTemplateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_galleries.size() > 0) {
        obj.insert(QString("galleries"), ::OpenAPI::toJsonValue(m_galleries));
    }
    if (m_localized.size() > 0) {
        
        obj.insert(QString("localized"), toJsonValue(m_localized));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_template_data_isSet) {
        obj.insert(QString("templateData"), ::OpenAPI::toJsonValue(m_template_data));
    }
    return obj;
}

QString OAIWorkbookTemplateProperties::getAuthor() const {
    return m_author;
}
void OAIWorkbookTemplateProperties::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIWorkbookTemplateProperties::is_author_Set() const{
    return m_author_isSet;
}

bool OAIWorkbookTemplateProperties::is_author_Valid() const{
    return m_author_isValid;
}

QList<OAIWorkbookTemplateGallery> OAIWorkbookTemplateProperties::getGalleries() const {
    return m_galleries;
}
void OAIWorkbookTemplateProperties::setGalleries(const QList<OAIWorkbookTemplateGallery> &galleries) {
    m_galleries = galleries;
    m_galleries_isSet = true;
}

bool OAIWorkbookTemplateProperties::is_galleries_Set() const{
    return m_galleries_isSet;
}

bool OAIWorkbookTemplateProperties::is_galleries_Valid() const{
    return m_galleries_isValid;
}

QMap<QString, QList<OAIWorkbookTemplateLocalizedGallery>> OAIWorkbookTemplateProperties::getLocalized() const {
    return m_localized;
}
void OAIWorkbookTemplateProperties::setLocalized(const QMap<QString, QList<OAIWorkbookTemplateLocalizedGallery>> &localized) {
    m_localized = localized;
    m_localized_isSet = true;
}

bool OAIWorkbookTemplateProperties::is_localized_Set() const{
    return m_localized_isSet;
}

bool OAIWorkbookTemplateProperties::is_localized_Valid() const{
    return m_localized_isValid;
}

qint32 OAIWorkbookTemplateProperties::getPriority() const {
    return m_priority;
}
void OAIWorkbookTemplateProperties::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIWorkbookTemplateProperties::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIWorkbookTemplateProperties::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIObject OAIWorkbookTemplateProperties::getTemplateData() const {
    return m_template_data;
}
void OAIWorkbookTemplateProperties::setTemplateData(const OAIObject &template_data) {
    m_template_data = template_data;
    m_template_data_isSet = true;
}

bool OAIWorkbookTemplateProperties::is_template_data_Set() const{
    return m_template_data_isSet;
}

bool OAIWorkbookTemplateProperties::is_template_data_Valid() const{
    return m_template_data_isValid;
}

bool OAIWorkbookTemplateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_galleries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkbookTemplateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_galleries_isValid && m_template_data_isValid && true;
}

} // namespace OpenAPI
