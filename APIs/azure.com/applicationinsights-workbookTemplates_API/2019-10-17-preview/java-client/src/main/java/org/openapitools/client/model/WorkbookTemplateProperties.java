/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights workbook template type.
 *
 * The version of the OpenAPI document: 2019-10-17-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.WorkbookTemplateGallery;
import org.openapitools.client.model.WorkbookTemplateLocalizedGallery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties that contain a workbook template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:52.020162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkbookTemplateProperties {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_GALLERIES = "galleries";
  @SerializedName(SERIALIZED_NAME_GALLERIES)
  private List<WorkbookTemplateGallery> galleries = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCALIZED = "localized";
  @SerializedName(SERIALIZED_NAME_LOCALIZED)
  private Map<String, List<WorkbookTemplateLocalizedGallery>> localized = new HashMap<>();

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_TEMPLATE_DATA = "templateData";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DATA)
  private Object templateData;

  public WorkbookTemplateProperties() {
  }

  public WorkbookTemplateProperties author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Information about the author of the workbook template.
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public WorkbookTemplateProperties galleries(List<WorkbookTemplateGallery> galleries) {
    this.galleries = galleries;
    return this;
  }

  public WorkbookTemplateProperties addGalleriesItem(WorkbookTemplateGallery galleriesItem) {
    if (this.galleries == null) {
      this.galleries = new ArrayList<>();
    }
    this.galleries.add(galleriesItem);
    return this;
  }

  /**
   * Workbook galleries supported by the template.
   * @return galleries
   */
  @javax.annotation.Nonnull
  public List<WorkbookTemplateGallery> getGalleries() {
    return galleries;
  }

  public void setGalleries(List<WorkbookTemplateGallery> galleries) {
    this.galleries = galleries;
  }


  public WorkbookTemplateProperties localized(Map<String, List<WorkbookTemplateLocalizedGallery>> localized) {
    this.localized = localized;
    return this;
  }

  public WorkbookTemplateProperties putLocalizedItem(String key, List<WorkbookTemplateLocalizedGallery> localizedItem) {
    if (this.localized == null) {
      this.localized = new HashMap<>();
    }
    this.localized.put(key, localizedItem);
    return this;
  }

  /**
   * Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.
   * @return localized
   */
  @javax.annotation.Nullable
  public Map<String, List<WorkbookTemplateLocalizedGallery>> getLocalized() {
    return localized;
  }

  public void setLocalized(Map<String, List<WorkbookTemplateLocalizedGallery>> localized) {
    this.localized = localized;
  }


  public WorkbookTemplateProperties priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public WorkbookTemplateProperties templateData(Object templateData) {
    this.templateData = templateData;
    return this;
  }

  /**
   * Valid JSON object containing workbook template payload.
   * @return templateData
   */
  @javax.annotation.Nonnull
  public Object getTemplateData() {
    return templateData;
  }

  public void setTemplateData(Object templateData) {
    this.templateData = templateData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkbookTemplateProperties workbookTemplateProperties = (WorkbookTemplateProperties) o;
    return Objects.equals(this.author, workbookTemplateProperties.author) &&
        Objects.equals(this.galleries, workbookTemplateProperties.galleries) &&
        Objects.equals(this.localized, workbookTemplateProperties.localized) &&
        Objects.equals(this.priority, workbookTemplateProperties.priority) &&
        Objects.equals(this.templateData, workbookTemplateProperties.templateData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, galleries, localized, priority, templateData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkbookTemplateProperties {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    galleries: ").append(toIndentedString(galleries)).append("\n");
    sb.append("    localized: ").append(toIndentedString(localized)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    templateData: ").append(toIndentedString(templateData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("galleries");
    openapiFields.add("localized");
    openapiFields.add("priority");
    openapiFields.add("templateData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("galleries");
    openapiRequiredFields.add("templateData");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkbookTemplateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkbookTemplateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkbookTemplateProperties is not found in the empty JSON string", WorkbookTemplateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkbookTemplateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkbookTemplateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkbookTemplateProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("galleries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `galleries` to be an array in the JSON string but got `%s`", jsonObj.get("galleries").toString()));
      }

      JsonArray jsonArraygalleries = jsonObj.getAsJsonArray("galleries");
      // validate the required field `galleries` (array)
      for (int i = 0; i < jsonArraygalleries.size(); i++) {
        WorkbookTemplateGallery.validateJsonElement(jsonArraygalleries.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkbookTemplateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkbookTemplateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkbookTemplateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkbookTemplateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkbookTemplateProperties>() {
           @Override
           public void write(JsonWriter out, WorkbookTemplateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkbookTemplateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkbookTemplateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkbookTemplateProperties
   * @throws IOException if the JSON string is invalid with respect to WorkbookTemplateProperties
   */
  public static WorkbookTemplateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkbookTemplateProperties.class);
  }

  /**
   * Convert an instance of WorkbookTemplateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

