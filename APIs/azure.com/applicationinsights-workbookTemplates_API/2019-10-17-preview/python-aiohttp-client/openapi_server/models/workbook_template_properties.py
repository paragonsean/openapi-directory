# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workbook_template_gallery import WorkbookTemplateGallery
from openapi_server.models.workbook_template_localized_gallery import WorkbookTemplateLocalizedGallery
from openapi_server import util


class WorkbookTemplateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, galleries: List[WorkbookTemplateGallery]=None, localized: Dict[str, List[WorkbookTemplateLocalizedGallery]]=None, priority: int=None, template_data: object=None):
        """WorkbookTemplateProperties - a model defined in OpenAPI

        :param author: The author of this WorkbookTemplateProperties.
        :param galleries: The galleries of this WorkbookTemplateProperties.
        :param localized: The localized of this WorkbookTemplateProperties.
        :param priority: The priority of this WorkbookTemplateProperties.
        :param template_data: The template_data of this WorkbookTemplateProperties.
        """
        self.openapi_types = {
            'author': str,
            'galleries': List[WorkbookTemplateGallery],
            'localized': Dict[str, List[WorkbookTemplateLocalizedGallery]],
            'priority': int,
            'template_data': object
        }

        self.attribute_map = {
            'author': 'author',
            'galleries': 'galleries',
            'localized': 'localized',
            'priority': 'priority',
            'template_data': 'templateData'
        }

        self._author = author
        self._galleries = galleries
        self._localized = localized
        self._priority = priority
        self._template_data = template_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkbookTemplateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkbookTemplateProperties of this WorkbookTemplateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this WorkbookTemplateProperties.

        Information about the author of the workbook template.

        :return: The author of this WorkbookTemplateProperties.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this WorkbookTemplateProperties.

        Information about the author of the workbook template.

        :param author: The author of this WorkbookTemplateProperties.
        :type author: str
        """

        self._author = author

    @property
    def galleries(self):
        """Gets the galleries of this WorkbookTemplateProperties.

        Workbook galleries supported by the template.

        :return: The galleries of this WorkbookTemplateProperties.
        :rtype: List[WorkbookTemplateGallery]
        """
        return self._galleries

    @galleries.setter
    def galleries(self, galleries):
        """Sets the galleries of this WorkbookTemplateProperties.

        Workbook galleries supported by the template.

        :param galleries: The galleries of this WorkbookTemplateProperties.
        :type galleries: List[WorkbookTemplateGallery]
        """
        if galleries is None:
            raise ValueError("Invalid value for `galleries`, must not be `None`")

        self._galleries = galleries

    @property
    def localized(self):
        """Gets the localized of this WorkbookTemplateProperties.

        Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.

        :return: The localized of this WorkbookTemplateProperties.
        :rtype: Dict[str, List[WorkbookTemplateLocalizedGallery]]
        """
        return self._localized

    @localized.setter
    def localized(self, localized):
        """Sets the localized of this WorkbookTemplateProperties.

        Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.

        :param localized: The localized of this WorkbookTemplateProperties.
        :type localized: Dict[str, List[WorkbookTemplateLocalizedGallery]]
        """

        self._localized = localized

    @property
    def priority(self):
        """Gets the priority of this WorkbookTemplateProperties.

        Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.

        :return: The priority of this WorkbookTemplateProperties.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this WorkbookTemplateProperties.

        Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.

        :param priority: The priority of this WorkbookTemplateProperties.
        :type priority: int
        """

        self._priority = priority

    @property
    def template_data(self):
        """Gets the template_data of this WorkbookTemplateProperties.

        Valid JSON object containing workbook template payload.

        :return: The template_data of this WorkbookTemplateProperties.
        :rtype: object
        """
        return self._template_data

    @template_data.setter
    def template_data(self, template_data):
        """Sets the template_data of this WorkbookTemplateProperties.

        Valid JSON object containing workbook template payload.

        :param template_data: The template_data of this WorkbookTemplateProperties.
        :type template_data: object
        """
        if template_data is None:
            raise ValueError("Invalid value for `template_data`, must not be `None`")

        self._template_data = template_data
