# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetEligibilityErrorMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, resolution: str=None, result_code: str=None):
        """TargetEligibilityErrorMessage - a model defined in OpenAPI

        :param message: The message of this TargetEligibilityErrorMessage.
        :param resolution: The resolution of this TargetEligibilityErrorMessage.
        :param result_code: The result_code of this TargetEligibilityErrorMessage.
        """
        self.openapi_types = {
            'message': str,
            'resolution': str,
            'result_code': str
        }

        self.attribute_map = {
            'message': 'message',
            'resolution': 'resolution',
            'result_code': 'resultCode'
        }

        self._message = message
        self._resolution = resolution
        self._result_code = result_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetEligibilityErrorMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetEligibilityErrorMessage of this TargetEligibilityErrorMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this TargetEligibilityErrorMessage.

        The localized error message stating the reason why the device is not eligible as a target device.

        :return: The message of this TargetEligibilityErrorMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TargetEligibilityErrorMessage.

        The localized error message stating the reason why the device is not eligible as a target device.

        :param message: The message of this TargetEligibilityErrorMessage.
        :type message: str
        """

        self._message = message

    @property
    def resolution(self):
        """Gets the resolution of this TargetEligibilityErrorMessage.

        The localized resolution message for the error.

        :return: The resolution of this TargetEligibilityErrorMessage.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this TargetEligibilityErrorMessage.

        The localized resolution message for the error.

        :param resolution: The resolution of this TargetEligibilityErrorMessage.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def result_code(self):
        """Gets the result_code of this TargetEligibilityErrorMessage.

        The result code for the error, due to which the device does not qualify as a failover target device.

        :return: The result_code of this TargetEligibilityErrorMessage.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this TargetEligibilityErrorMessage.

        The result code for the error, due to which the device does not qualify as a failover target device.

        :param result_code: The result_code of this TargetEligibilityErrorMessage.
        :type result_code: str
        """
        allowed_values = ["TargetAndSourceCannotBeSameError", "TargetIsNotOnlineError", "TargetSourceIncompatibleVersionError", "LocalToTieredVolumesConversionWarning", "TargetInsufficientCapacityError", "TargetInsufficientLocalVolumeMemoryError", "TargetInsufficientTieredVolumeMemoryError"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code
