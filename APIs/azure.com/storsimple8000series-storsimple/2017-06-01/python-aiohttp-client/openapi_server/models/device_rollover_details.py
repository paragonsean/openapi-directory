# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceRolloverDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_eligibility: str=None, authorization_status: str=None, in_eligibility_reason: str=None):
        """DeviceRolloverDetails - a model defined in OpenAPI

        :param authorization_eligibility: The authorization_eligibility of this DeviceRolloverDetails.
        :param authorization_status: The authorization_status of this DeviceRolloverDetails.
        :param in_eligibility_reason: The in_eligibility_reason of this DeviceRolloverDetails.
        """
        self.openapi_types = {
            'authorization_eligibility': str,
            'authorization_status': str,
            'in_eligibility_reason': str
        }

        self.attribute_map = {
            'authorization_eligibility': 'authorizationEligibility',
            'authorization_status': 'authorizationStatus',
            'in_eligibility_reason': 'inEligibilityReason'
        }

        self._authorization_eligibility = authorization_eligibility
        self._authorization_status = authorization_status
        self._in_eligibility_reason = in_eligibility_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceRolloverDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceRolloverDetails of this DeviceRolloverDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_eligibility(self):
        """Gets the authorization_eligibility of this DeviceRolloverDetails.

        The eligibility status of device for service data encryption key rollover.

        :return: The authorization_eligibility of this DeviceRolloverDetails.
        :rtype: str
        """
        return self._authorization_eligibility

    @authorization_eligibility.setter
    def authorization_eligibility(self, authorization_eligibility):
        """Sets the authorization_eligibility of this DeviceRolloverDetails.

        The eligibility status of device for service data encryption key rollover.

        :param authorization_eligibility: The authorization_eligibility of this DeviceRolloverDetails.
        :type authorization_eligibility: str
        """
        allowed_values = ["InEligible", "Eligible"]  # noqa: E501
        if authorization_eligibility not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_eligibility` ({0}), must be one of {1}"
                .format(authorization_eligibility, allowed_values)
            )

        self._authorization_eligibility = authorization_eligibility

    @property
    def authorization_status(self):
        """Gets the authorization_status of this DeviceRolloverDetails.

        The authorization status of the device for service data encryption key rollover.

        :return: The authorization_status of this DeviceRolloverDetails.
        :rtype: str
        """
        return self._authorization_status

    @authorization_status.setter
    def authorization_status(self, authorization_status):
        """Sets the authorization_status of this DeviceRolloverDetails.

        The authorization status of the device for service data encryption key rollover.

        :param authorization_status: The authorization_status of this DeviceRolloverDetails.
        :type authorization_status: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if authorization_status not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_status` ({0}), must be one of {1}"
                .format(authorization_status, allowed_values)
            )

        self._authorization_status = authorization_status

    @property
    def in_eligibility_reason(self):
        """Gets the in_eligibility_reason of this DeviceRolloverDetails.

        The reason for inEligibility of device, in case it's not eligible for service data encryption key rollover.

        :return: The in_eligibility_reason of this DeviceRolloverDetails.
        :rtype: str
        """
        return self._in_eligibility_reason

    @in_eligibility_reason.setter
    def in_eligibility_reason(self, in_eligibility_reason):
        """Sets the in_eligibility_reason of this DeviceRolloverDetails.

        The reason for inEligibility of device, in case it's not eligible for service data encryption key rollover.

        :param in_eligibility_reason: The in_eligibility_reason of this DeviceRolloverDetails.
        :type in_eligibility_reason: str
        """
        allowed_values = ["DeviceNotOnline", "NotSupportedAppliance", "RolloverPending"]  # noqa: E501
        if in_eligibility_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `in_eligibility_reason` ({0}), must be one of {1}"
                .format(in_eligibility_reason, allowed_values)
            )

        self._in_eligibility_reason = in_eligibility_reason
