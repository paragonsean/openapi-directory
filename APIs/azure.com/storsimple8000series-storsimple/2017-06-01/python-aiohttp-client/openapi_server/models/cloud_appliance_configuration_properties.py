# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acs_configuration import AcsConfiguration
from openapi_server.models.vm_image import VmImage
from openapi_server import util


class CloudApplianceConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acs_configuration: AcsConfiguration=None, cloud_platform: str=None, model_number: str=None, supported_regions: List[str]=None, supported_storage_account_types: List[str]=None, supported_vm_images: List[VmImage]=None, supported_vm_types: List[str]=None):
        """CloudApplianceConfigurationProperties - a model defined in OpenAPI

        :param acs_configuration: The acs_configuration of this CloudApplianceConfigurationProperties.
        :param cloud_platform: The cloud_platform of this CloudApplianceConfigurationProperties.
        :param model_number: The model_number of this CloudApplianceConfigurationProperties.
        :param supported_regions: The supported_regions of this CloudApplianceConfigurationProperties.
        :param supported_storage_account_types: The supported_storage_account_types of this CloudApplianceConfigurationProperties.
        :param supported_vm_images: The supported_vm_images of this CloudApplianceConfigurationProperties.
        :param supported_vm_types: The supported_vm_types of this CloudApplianceConfigurationProperties.
        """
        self.openapi_types = {
            'acs_configuration': AcsConfiguration,
            'cloud_platform': str,
            'model_number': str,
            'supported_regions': List[str],
            'supported_storage_account_types': List[str],
            'supported_vm_images': List[VmImage],
            'supported_vm_types': List[str]
        }

        self.attribute_map = {
            'acs_configuration': 'acsConfiguration',
            'cloud_platform': 'cloudPlatform',
            'model_number': 'modelNumber',
            'supported_regions': 'supportedRegions',
            'supported_storage_account_types': 'supportedStorageAccountTypes',
            'supported_vm_images': 'supportedVmImages',
            'supported_vm_types': 'supportedVmTypes'
        }

        self._acs_configuration = acs_configuration
        self._cloud_platform = cloud_platform
        self._model_number = model_number
        self._supported_regions = supported_regions
        self._supported_storage_account_types = supported_storage_account_types
        self._supported_vm_images = supported_vm_images
        self._supported_vm_types = supported_vm_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudApplianceConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudApplianceConfigurationProperties of this CloudApplianceConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acs_configuration(self):
        """Gets the acs_configuration of this CloudApplianceConfigurationProperties.


        :return: The acs_configuration of this CloudApplianceConfigurationProperties.
        :rtype: AcsConfiguration
        """
        return self._acs_configuration

    @acs_configuration.setter
    def acs_configuration(self, acs_configuration):
        """Sets the acs_configuration of this CloudApplianceConfigurationProperties.


        :param acs_configuration: The acs_configuration of this CloudApplianceConfigurationProperties.
        :type acs_configuration: AcsConfiguration
        """
        if acs_configuration is None:
            raise ValueError("Invalid value for `acs_configuration`, must not be `None`")

        self._acs_configuration = acs_configuration

    @property
    def cloud_platform(self):
        """Gets the cloud_platform of this CloudApplianceConfigurationProperties.

        The cloud platform.

        :return: The cloud_platform of this CloudApplianceConfigurationProperties.
        :rtype: str
        """
        return self._cloud_platform

    @cloud_platform.setter
    def cloud_platform(self, cloud_platform):
        """Sets the cloud_platform of this CloudApplianceConfigurationProperties.

        The cloud platform.

        :param cloud_platform: The cloud_platform of this CloudApplianceConfigurationProperties.
        :type cloud_platform: str
        """
        if cloud_platform is None:
            raise ValueError("Invalid value for `cloud_platform`, must not be `None`")

        self._cloud_platform = cloud_platform

    @property
    def model_number(self):
        """Gets the model_number of this CloudApplianceConfigurationProperties.

        The model number.

        :return: The model_number of this CloudApplianceConfigurationProperties.
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this CloudApplianceConfigurationProperties.

        The model number.

        :param model_number: The model_number of this CloudApplianceConfigurationProperties.
        :type model_number: str
        """
        if model_number is None:
            raise ValueError("Invalid value for `model_number`, must not be `None`")

        self._model_number = model_number

    @property
    def supported_regions(self):
        """Gets the supported_regions of this CloudApplianceConfigurationProperties.

        The supported regions.

        :return: The supported_regions of this CloudApplianceConfigurationProperties.
        :rtype: List[str]
        """
        return self._supported_regions

    @supported_regions.setter
    def supported_regions(self, supported_regions):
        """Sets the supported_regions of this CloudApplianceConfigurationProperties.

        The supported regions.

        :param supported_regions: The supported_regions of this CloudApplianceConfigurationProperties.
        :type supported_regions: List[str]
        """
        if supported_regions is None:
            raise ValueError("Invalid value for `supported_regions`, must not be `None`")

        self._supported_regions = supported_regions

    @property
    def supported_storage_account_types(self):
        """Gets the supported_storage_account_types of this CloudApplianceConfigurationProperties.

        The supported storage account types.

        :return: The supported_storage_account_types of this CloudApplianceConfigurationProperties.
        :rtype: List[str]
        """
        return self._supported_storage_account_types

    @supported_storage_account_types.setter
    def supported_storage_account_types(self, supported_storage_account_types):
        """Sets the supported_storage_account_types of this CloudApplianceConfigurationProperties.

        The supported storage account types.

        :param supported_storage_account_types: The supported_storage_account_types of this CloudApplianceConfigurationProperties.
        :type supported_storage_account_types: List[str]
        """
        if supported_storage_account_types is None:
            raise ValueError("Invalid value for `supported_storage_account_types`, must not be `None`")

        self._supported_storage_account_types = supported_storage_account_types

    @property
    def supported_vm_images(self):
        """Gets the supported_vm_images of this CloudApplianceConfigurationProperties.

        The supported virtual machine images.

        :return: The supported_vm_images of this CloudApplianceConfigurationProperties.
        :rtype: List[VmImage]
        """
        return self._supported_vm_images

    @supported_vm_images.setter
    def supported_vm_images(self, supported_vm_images):
        """Sets the supported_vm_images of this CloudApplianceConfigurationProperties.

        The supported virtual machine images.

        :param supported_vm_images: The supported_vm_images of this CloudApplianceConfigurationProperties.
        :type supported_vm_images: List[VmImage]
        """
        if supported_vm_images is None:
            raise ValueError("Invalid value for `supported_vm_images`, must not be `None`")

        self._supported_vm_images = supported_vm_images

    @property
    def supported_vm_types(self):
        """Gets the supported_vm_types of this CloudApplianceConfigurationProperties.

        The supported virtual machine types.

        :return: The supported_vm_types of this CloudApplianceConfigurationProperties.
        :rtype: List[str]
        """
        return self._supported_vm_types

    @supported_vm_types.setter
    def supported_vm_types(self, supported_vm_types):
        """Sets the supported_vm_types of this CloudApplianceConfigurationProperties.

        The supported virtual machine types.

        :param supported_vm_types: The supported_vm_types of this CloudApplianceConfigurationProperties.
        :type supported_vm_types: List[str]
        """
        if supported_vm_types is None:
            raise ValueError("Invalid value for `supported_vm_types`, must not be `None`")

        self._supported_vm_types = supported_vm_types
