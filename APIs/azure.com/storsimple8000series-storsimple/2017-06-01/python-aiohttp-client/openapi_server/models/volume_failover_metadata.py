# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeFailoverMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_created_date: datetime=None, backup_element_id: str=None, backup_id: str=None, backup_policy_id: str=None, size_in_bytes: int=None, volume_id: str=None, volume_type: str=None):
        """VolumeFailoverMetadata - a model defined in OpenAPI

        :param backup_created_date: The backup_created_date of this VolumeFailoverMetadata.
        :param backup_element_id: The backup_element_id of this VolumeFailoverMetadata.
        :param backup_id: The backup_id of this VolumeFailoverMetadata.
        :param backup_policy_id: The backup_policy_id of this VolumeFailoverMetadata.
        :param size_in_bytes: The size_in_bytes of this VolumeFailoverMetadata.
        :param volume_id: The volume_id of this VolumeFailoverMetadata.
        :param volume_type: The volume_type of this VolumeFailoverMetadata.
        """
        self.openapi_types = {
            'backup_created_date': datetime,
            'backup_element_id': str,
            'backup_id': str,
            'backup_policy_id': str,
            'size_in_bytes': int,
            'volume_id': str,
            'volume_type': str
        }

        self.attribute_map = {
            'backup_created_date': 'backupCreatedDate',
            'backup_element_id': 'backupElementId',
            'backup_id': 'backupId',
            'backup_policy_id': 'backupPolicyId',
            'size_in_bytes': 'sizeInBytes',
            'volume_id': 'volumeId',
            'volume_type': 'volumeType'
        }

        self._backup_created_date = backup_created_date
        self._backup_element_id = backup_element_id
        self._backup_id = backup_id
        self._backup_policy_id = backup_policy_id
        self._size_in_bytes = size_in_bytes
        self._volume_id = volume_id
        self._volume_type = volume_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeFailoverMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeFailoverMetadata of this VolumeFailoverMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_created_date(self):
        """Gets the backup_created_date of this VolumeFailoverMetadata.

        The date at which the snapshot was taken.

        :return: The backup_created_date of this VolumeFailoverMetadata.
        :rtype: datetime
        """
        return self._backup_created_date

    @backup_created_date.setter
    def backup_created_date(self, backup_created_date):
        """Sets the backup_created_date of this VolumeFailoverMetadata.

        The date at which the snapshot was taken.

        :param backup_created_date: The backup_created_date of this VolumeFailoverMetadata.
        :type backup_created_date: datetime
        """

        self._backup_created_date = backup_created_date

    @property
    def backup_element_id(self):
        """Gets the backup_element_id of this VolumeFailoverMetadata.

        The path ID of the backup-element for this volume, inside the backup set.

        :return: The backup_element_id of this VolumeFailoverMetadata.
        :rtype: str
        """
        return self._backup_element_id

    @backup_element_id.setter
    def backup_element_id(self, backup_element_id):
        """Sets the backup_element_id of this VolumeFailoverMetadata.

        The path ID of the backup-element for this volume, inside the backup set.

        :param backup_element_id: The backup_element_id of this VolumeFailoverMetadata.
        :type backup_element_id: str
        """

        self._backup_element_id = backup_element_id

    @property
    def backup_id(self):
        """Gets the backup_id of this VolumeFailoverMetadata.

        The path ID of the backup set.

        :return: The backup_id of this VolumeFailoverMetadata.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this VolumeFailoverMetadata.

        The path ID of the backup set.

        :param backup_id: The backup_id of this VolumeFailoverMetadata.
        :type backup_id: str
        """

        self._backup_id = backup_id

    @property
    def backup_policy_id(self):
        """Gets the backup_policy_id of this VolumeFailoverMetadata.

        The path ID of the backup policy using which the snapshot was taken.

        :return: The backup_policy_id of this VolumeFailoverMetadata.
        :rtype: str
        """
        return self._backup_policy_id

    @backup_policy_id.setter
    def backup_policy_id(self, backup_policy_id):
        """Sets the backup_policy_id of this VolumeFailoverMetadata.

        The path ID of the backup policy using which the snapshot was taken.

        :param backup_policy_id: The backup_policy_id of this VolumeFailoverMetadata.
        :type backup_policy_id: str
        """

        self._backup_policy_id = backup_policy_id

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this VolumeFailoverMetadata.

        The size of the volume in bytes at the time the snapshot was taken.

        :return: The size_in_bytes of this VolumeFailoverMetadata.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this VolumeFailoverMetadata.

        The size of the volume in bytes at the time the snapshot was taken.

        :param size_in_bytes: The size_in_bytes of this VolumeFailoverMetadata.
        :type size_in_bytes: int
        """

        self._size_in_bytes = size_in_bytes

    @property
    def volume_id(self):
        """Gets the volume_id of this VolumeFailoverMetadata.

        The path ID of the volume.

        :return: The volume_id of this VolumeFailoverMetadata.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this VolumeFailoverMetadata.

        The path ID of the volume.

        :param volume_id: The volume_id of this VolumeFailoverMetadata.
        :type volume_id: str
        """

        self._volume_id = volume_id

    @property
    def volume_type(self):
        """Gets the volume_type of this VolumeFailoverMetadata.

        The type of the volume.

        :return: The volume_type of this VolumeFailoverMetadata.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this VolumeFailoverMetadata.

        The type of the volume.

        :param volume_type: The volume_type of this VolumeFailoverMetadata.
        :type volume_type: str
        """
        allowed_values = ["Tiered", "Archival", "LocallyPinned"]  # noqa: E501
        if volume_type not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_type` ({0}), must be one of {1}"
                .format(volume_type, allowed_values)
            )

        self._volume_type = volume_type
