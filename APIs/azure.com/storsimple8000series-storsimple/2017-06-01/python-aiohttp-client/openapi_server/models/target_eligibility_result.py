# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_eligibility_error_message import TargetEligibilityErrorMessage
from openapi_server import util


class TargetEligibilityResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eligibility_status: str=None, messages: List[TargetEligibilityErrorMessage]=None):
        """TargetEligibilityResult - a model defined in OpenAPI

        :param eligibility_status: The eligibility_status of this TargetEligibilityResult.
        :param messages: The messages of this TargetEligibilityResult.
        """
        self.openapi_types = {
            'eligibility_status': str,
            'messages': List[TargetEligibilityErrorMessage]
        }

        self.attribute_map = {
            'eligibility_status': 'eligibilityStatus',
            'messages': 'messages'
        }

        self._eligibility_status = eligibility_status
        self._messages = messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetEligibilityResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetEligibilityResult of this TargetEligibilityResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eligibility_status(self):
        """Gets the eligibility_status of this TargetEligibilityResult.

        The eligibility status of device, as a failover target device.

        :return: The eligibility_status of this TargetEligibilityResult.
        :rtype: str
        """
        return self._eligibility_status

    @eligibility_status.setter
    def eligibility_status(self, eligibility_status):
        """Sets the eligibility_status of this TargetEligibilityResult.

        The eligibility status of device, as a failover target device.

        :param eligibility_status: The eligibility_status of this TargetEligibilityResult.
        :type eligibility_status: str
        """
        allowed_values = ["NotEligible", "Eligible"]  # noqa: E501
        if eligibility_status not in allowed_values:
            raise ValueError(
                "Invalid value for `eligibility_status` ({0}), must be one of {1}"
                .format(eligibility_status, allowed_values)
            )

        self._eligibility_status = eligibility_status

    @property
    def messages(self):
        """Gets the messages of this TargetEligibilityResult.

        The list of error messages, if a device does not qualify as a failover target device.

        :return: The messages of this TargetEligibilityResult.
        :rtype: List[TargetEligibilityErrorMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this TargetEligibilityResult.

        The list of error messages, if a device does not qualify as a failover target device.

        :param messages: The messages of this TargetEligibilityResult.
        :type messages: List[TargetEligibilityErrorMessage]
        """

        self._messages = messages
