# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoteManagementSettingsPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, remote_management_mode: str=None):
        """RemoteManagementSettingsPatch - a model defined in OpenAPI

        :param remote_management_mode: The remote_management_mode of this RemoteManagementSettingsPatch.
        """
        self.openapi_types = {
            'remote_management_mode': str
        }

        self.attribute_map = {
            'remote_management_mode': 'remoteManagementMode'
        }

        self._remote_management_mode = remote_management_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteManagementSettingsPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteManagementSettingsPatch of this RemoteManagementSettingsPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def remote_management_mode(self):
        """Gets the remote_management_mode of this RemoteManagementSettingsPatch.

        The remote management mode.

        :return: The remote_management_mode of this RemoteManagementSettingsPatch.
        :rtype: str
        """
        return self._remote_management_mode

    @remote_management_mode.setter
    def remote_management_mode(self, remote_management_mode):
        """Sets the remote_management_mode of this RemoteManagementSettingsPatch.

        The remote management mode.

        :param remote_management_mode: The remote_management_mode of this RemoteManagementSettingsPatch.
        :type remote_management_mode: str
        """
        allowed_values = ["Unknown", "Disabled", "HttpsEnabled", "HttpsAndHttpEnabled"]  # noqa: E501
        if remote_management_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_management_mode` ({0}), must be one of {1}"
                .format(remote_management_mode, allowed_values)
            )

        self._remote_management_mode = remote_management_mode
