# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nic_ipv4 import NicIPv4
from openapi_server.models.nic_ipv6 import NicIPv6
from openapi_server import util


class NetworkAdapters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interface_id: str=None, is_default: bool=None, iscsi_and_cloud_status: str=None, mode: str=None, net_interface_status: str=None, nic_ipv4_settings: NicIPv4=None, nic_ipv6_settings: NicIPv6=None, speed: int=None):
        """NetworkAdapters - a model defined in OpenAPI

        :param interface_id: The interface_id of this NetworkAdapters.
        :param is_default: The is_default of this NetworkAdapters.
        :param iscsi_and_cloud_status: The iscsi_and_cloud_status of this NetworkAdapters.
        :param mode: The mode of this NetworkAdapters.
        :param net_interface_status: The net_interface_status of this NetworkAdapters.
        :param nic_ipv4_settings: The nic_ipv4_settings of this NetworkAdapters.
        :param nic_ipv6_settings: The nic_ipv6_settings of this NetworkAdapters.
        :param speed: The speed of this NetworkAdapters.
        """
        self.openapi_types = {
            'interface_id': str,
            'is_default': bool,
            'iscsi_and_cloud_status': str,
            'mode': str,
            'net_interface_status': str,
            'nic_ipv4_settings': NicIPv4,
            'nic_ipv6_settings': NicIPv6,
            'speed': int
        }

        self.attribute_map = {
            'interface_id': 'interfaceId',
            'is_default': 'isDefault',
            'iscsi_and_cloud_status': 'iscsiAndCloudStatus',
            'mode': 'mode',
            'net_interface_status': 'netInterfaceStatus',
            'nic_ipv4_settings': 'nicIpv4Settings',
            'nic_ipv6_settings': 'nicIpv6Settings',
            'speed': 'speed'
        }

        self._interface_id = interface_id
        self._is_default = is_default
        self._iscsi_and_cloud_status = iscsi_and_cloud_status
        self._mode = mode
        self._net_interface_status = net_interface_status
        self._nic_ipv4_settings = nic_ipv4_settings
        self._nic_ipv6_settings = nic_ipv6_settings
        self._speed = speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkAdapters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkAdapters of this NetworkAdapters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interface_id(self):
        """Gets the interface_id of this NetworkAdapters.

        The ID of the network adapter.

        :return: The interface_id of this NetworkAdapters.
        :rtype: str
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this NetworkAdapters.

        The ID of the network adapter.

        :param interface_id: The interface_id of this NetworkAdapters.
        :type interface_id: str
        """
        allowed_values = ["Invalid", "Data0", "Data1", "Data2", "Data3", "Data4", "Data5"]  # noqa: E501
        if interface_id not in allowed_values:
            raise ValueError(
                "Invalid value for `interface_id` ({0}), must be one of {1}"
                .format(interface_id, allowed_values)
            )

        self._interface_id = interface_id

    @property
    def is_default(self):
        """Gets the is_default of this NetworkAdapters.

        Value indicating whether this instance is default.

        :return: The is_default of this NetworkAdapters.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this NetworkAdapters.

        Value indicating whether this instance is default.

        :param is_default: The is_default of this NetworkAdapters.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def iscsi_and_cloud_status(self):
        """Gets the iscsi_and_cloud_status of this NetworkAdapters.

        Value indicating cloud and ISCSI status of network adapter.

        :return: The iscsi_and_cloud_status of this NetworkAdapters.
        :rtype: str
        """
        return self._iscsi_and_cloud_status

    @iscsi_and_cloud_status.setter
    def iscsi_and_cloud_status(self, iscsi_and_cloud_status):
        """Sets the iscsi_and_cloud_status of this NetworkAdapters.

        Value indicating cloud and ISCSI status of network adapter.

        :param iscsi_and_cloud_status: The iscsi_and_cloud_status of this NetworkAdapters.
        :type iscsi_and_cloud_status: str
        """
        allowed_values = ["Disabled", "IscsiEnabled", "CloudEnabled", "IscsiAndCloudEnabled"]  # noqa: E501
        if iscsi_and_cloud_status not in allowed_values:
            raise ValueError(
                "Invalid value for `iscsi_and_cloud_status` ({0}), must be one of {1}"
                .format(iscsi_and_cloud_status, allowed_values)
            )

        self._iscsi_and_cloud_status = iscsi_and_cloud_status

    @property
    def mode(self):
        """Gets the mode of this NetworkAdapters.

        The mode of network adapter, either IPv4, IPv6 or both.

        :return: The mode of this NetworkAdapters.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this NetworkAdapters.

        The mode of network adapter, either IPv4, IPv6 or both.

        :param mode: The mode of this NetworkAdapters.
        :type mode: str
        """
        allowed_values = ["Invalid", "IPV4", "IPV6", "BOTH"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def net_interface_status(self):
        """Gets the net_interface_status of this NetworkAdapters.

        Value indicating status of network adapter.

        :return: The net_interface_status of this NetworkAdapters.
        :rtype: str
        """
        return self._net_interface_status

    @net_interface_status.setter
    def net_interface_status(self, net_interface_status):
        """Sets the net_interface_status of this NetworkAdapters.

        Value indicating status of network adapter.

        :param net_interface_status: The net_interface_status of this NetworkAdapters.
        :type net_interface_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if net_interface_status not in allowed_values:
            raise ValueError(
                "Invalid value for `net_interface_status` ({0}), must be one of {1}"
                .format(net_interface_status, allowed_values)
            )

        self._net_interface_status = net_interface_status

    @property
    def nic_ipv4_settings(self):
        """Gets the nic_ipv4_settings of this NetworkAdapters.


        :return: The nic_ipv4_settings of this NetworkAdapters.
        :rtype: NicIPv4
        """
        return self._nic_ipv4_settings

    @nic_ipv4_settings.setter
    def nic_ipv4_settings(self, nic_ipv4_settings):
        """Sets the nic_ipv4_settings of this NetworkAdapters.


        :param nic_ipv4_settings: The nic_ipv4_settings of this NetworkAdapters.
        :type nic_ipv4_settings: NicIPv4
        """

        self._nic_ipv4_settings = nic_ipv4_settings

    @property
    def nic_ipv6_settings(self):
        """Gets the nic_ipv6_settings of this NetworkAdapters.


        :return: The nic_ipv6_settings of this NetworkAdapters.
        :rtype: NicIPv6
        """
        return self._nic_ipv6_settings

    @nic_ipv6_settings.setter
    def nic_ipv6_settings(self, nic_ipv6_settings):
        """Sets the nic_ipv6_settings of this NetworkAdapters.


        :param nic_ipv6_settings: The nic_ipv6_settings of this NetworkAdapters.
        :type nic_ipv6_settings: NicIPv6
        """

        self._nic_ipv6_settings = nic_ipv6_settings

    @property
    def speed(self):
        """Gets the speed of this NetworkAdapters.

        The speed of the network adapter.

        :return: The speed of this NetworkAdapters.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this NetworkAdapters.

        The speed of the network adapter.

        :param speed: The speed of this NetworkAdapters.
        :type speed: int
        """

        self._speed = speed
