# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessControlRecordProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, initiator_name: str=None, volume_count: int=None):
        """AccessControlRecordProperties - a model defined in OpenAPI

        :param initiator_name: The initiator_name of this AccessControlRecordProperties.
        :param volume_count: The volume_count of this AccessControlRecordProperties.
        """
        self.openapi_types = {
            'initiator_name': str,
            'volume_count': int
        }

        self.attribute_map = {
            'initiator_name': 'initiatorName',
            'volume_count': 'volumeCount'
        }

        self._initiator_name = initiator_name
        self._volume_count = volume_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessControlRecordProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessControlRecordProperties of this AccessControlRecordProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def initiator_name(self):
        """Gets the initiator_name of this AccessControlRecordProperties.

        The iSCSI initiator name (IQN).

        :return: The initiator_name of this AccessControlRecordProperties.
        :rtype: str
        """
        return self._initiator_name

    @initiator_name.setter
    def initiator_name(self, initiator_name):
        """Sets the initiator_name of this AccessControlRecordProperties.

        The iSCSI initiator name (IQN).

        :param initiator_name: The initiator_name of this AccessControlRecordProperties.
        :type initiator_name: str
        """
        if initiator_name is None:
            raise ValueError("Invalid value for `initiator_name`, must not be `None`")

        self._initiator_name = initiator_name

    @property
    def volume_count(self):
        """Gets the volume_count of this AccessControlRecordProperties.

        The number of volumes using the access control record.

        :return: The volume_count of this AccessControlRecordProperties.
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this AccessControlRecordProperties.

        The number of volumes using the access control record.

        :param volume_count: The volume_count of this AccessControlRecordProperties.
        :type volume_count: int
        """

        self._volume_count = volume_count
