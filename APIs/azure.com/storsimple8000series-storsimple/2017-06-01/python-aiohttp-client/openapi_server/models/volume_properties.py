# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_control_record_ids: List[str]=None, backup_policy_ids: List[str]=None, backup_status: str=None, monitoring_status: str=None, operation_status: str=None, size_in_bytes: int=None, volume_container_id: str=None, volume_status: str=None, volume_type: str=None):
        """VolumeProperties - a model defined in OpenAPI

        :param access_control_record_ids: The access_control_record_ids of this VolumeProperties.
        :param backup_policy_ids: The backup_policy_ids of this VolumeProperties.
        :param backup_status: The backup_status of this VolumeProperties.
        :param monitoring_status: The monitoring_status of this VolumeProperties.
        :param operation_status: The operation_status of this VolumeProperties.
        :param size_in_bytes: The size_in_bytes of this VolumeProperties.
        :param volume_container_id: The volume_container_id of this VolumeProperties.
        :param volume_status: The volume_status of this VolumeProperties.
        :param volume_type: The volume_type of this VolumeProperties.
        """
        self.openapi_types = {
            'access_control_record_ids': List[str],
            'backup_policy_ids': List[str],
            'backup_status': str,
            'monitoring_status': str,
            'operation_status': str,
            'size_in_bytes': int,
            'volume_container_id': str,
            'volume_status': str,
            'volume_type': str
        }

        self.attribute_map = {
            'access_control_record_ids': 'accessControlRecordIds',
            'backup_policy_ids': 'backupPolicyIds',
            'backup_status': 'backupStatus',
            'monitoring_status': 'monitoringStatus',
            'operation_status': 'operationStatus',
            'size_in_bytes': 'sizeInBytes',
            'volume_container_id': 'volumeContainerId',
            'volume_status': 'volumeStatus',
            'volume_type': 'volumeType'
        }

        self._access_control_record_ids = access_control_record_ids
        self._backup_policy_ids = backup_policy_ids
        self._backup_status = backup_status
        self._monitoring_status = monitoring_status
        self._operation_status = operation_status
        self._size_in_bytes = size_in_bytes
        self._volume_container_id = volume_container_id
        self._volume_status = volume_status
        self._volume_type = volume_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeProperties of this VolumeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_control_record_ids(self):
        """Gets the access_control_record_ids of this VolumeProperties.

        The IDs of the access control records, associated with the volume.

        :return: The access_control_record_ids of this VolumeProperties.
        :rtype: List[str]
        """
        return self._access_control_record_ids

    @access_control_record_ids.setter
    def access_control_record_ids(self, access_control_record_ids):
        """Sets the access_control_record_ids of this VolumeProperties.

        The IDs of the access control records, associated with the volume.

        :param access_control_record_ids: The access_control_record_ids of this VolumeProperties.
        :type access_control_record_ids: List[str]
        """
        if access_control_record_ids is None:
            raise ValueError("Invalid value for `access_control_record_ids`, must not be `None`")

        self._access_control_record_ids = access_control_record_ids

    @property
    def backup_policy_ids(self):
        """Gets the backup_policy_ids of this VolumeProperties.

        The IDs of the backup policies, in which this volume is part of.

        :return: The backup_policy_ids of this VolumeProperties.
        :rtype: List[str]
        """
        return self._backup_policy_ids

    @backup_policy_ids.setter
    def backup_policy_ids(self, backup_policy_ids):
        """Sets the backup_policy_ids of this VolumeProperties.

        The IDs of the backup policies, in which this volume is part of.

        :param backup_policy_ids: The backup_policy_ids of this VolumeProperties.
        :type backup_policy_ids: List[str]
        """

        self._backup_policy_ids = backup_policy_ids

    @property
    def backup_status(self):
        """Gets the backup_status of this VolumeProperties.

        The backup status of the volume.

        :return: The backup_status of this VolumeProperties.
        :rtype: str
        """
        return self._backup_status

    @backup_status.setter
    def backup_status(self, backup_status):
        """Sets the backup_status of this VolumeProperties.

        The backup status of the volume.

        :param backup_status: The backup_status of this VolumeProperties.
        :type backup_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if backup_status not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_status` ({0}), must be one of {1}"
                .format(backup_status, allowed_values)
            )

        self._backup_status = backup_status

    @property
    def monitoring_status(self):
        """Gets the monitoring_status of this VolumeProperties.

        The monitoring status of the volume.

        :return: The monitoring_status of this VolumeProperties.
        :rtype: str
        """
        return self._monitoring_status

    @monitoring_status.setter
    def monitoring_status(self, monitoring_status):
        """Sets the monitoring_status of this VolumeProperties.

        The monitoring status of the volume.

        :param monitoring_status: The monitoring_status of this VolumeProperties.
        :type monitoring_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if monitoring_status not in allowed_values:
            raise ValueError(
                "Invalid value for `monitoring_status` ({0}), must be one of {1}"
                .format(monitoring_status, allowed_values)
            )

        self._monitoring_status = monitoring_status

    @property
    def operation_status(self):
        """Gets the operation_status of this VolumeProperties.

        The operation status on the volume.

        :return: The operation_status of this VolumeProperties.
        :rtype: str
        """
        return self._operation_status

    @operation_status.setter
    def operation_status(self, operation_status):
        """Sets the operation_status of this VolumeProperties.

        The operation status on the volume.

        :param operation_status: The operation_status of this VolumeProperties.
        :type operation_status: str
        """
        allowed_values = ["None", "Updating", "Deleting", "Restoring"]  # noqa: E501
        if operation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_status` ({0}), must be one of {1}"
                .format(operation_status, allowed_values)
            )

        self._operation_status = operation_status

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this VolumeProperties.

        The size of the volume in bytes.

        :return: The size_in_bytes of this VolumeProperties.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this VolumeProperties.

        The size of the volume in bytes.

        :param size_in_bytes: The size_in_bytes of this VolumeProperties.
        :type size_in_bytes: int
        """
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")

        self._size_in_bytes = size_in_bytes

    @property
    def volume_container_id(self):
        """Gets the volume_container_id of this VolumeProperties.

        The ID of the volume container, in which this volume is created.

        :return: The volume_container_id of this VolumeProperties.
        :rtype: str
        """
        return self._volume_container_id

    @volume_container_id.setter
    def volume_container_id(self, volume_container_id):
        """Sets the volume_container_id of this VolumeProperties.

        The ID of the volume container, in which this volume is created.

        :param volume_container_id: The volume_container_id of this VolumeProperties.
        :type volume_container_id: str
        """

        self._volume_container_id = volume_container_id

    @property
    def volume_status(self):
        """Gets the volume_status of this VolumeProperties.

        The volume status.

        :return: The volume_status of this VolumeProperties.
        :rtype: str
        """
        return self._volume_status

    @volume_status.setter
    def volume_status(self, volume_status):
        """Sets the volume_status of this VolumeProperties.

        The volume status.

        :param volume_status: The volume_status of this VolumeProperties.
        :type volume_status: str
        """
        allowed_values = ["Online", "Offline"]  # noqa: E501
        if volume_status not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_status` ({0}), must be one of {1}"
                .format(volume_status, allowed_values)
            )

        self._volume_status = volume_status

    @property
    def volume_type(self):
        """Gets the volume_type of this VolumeProperties.

        The type of the volume.

        :return: The volume_type of this VolumeProperties.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this VolumeProperties.

        The type of the volume.

        :param volume_type: The volume_type of this VolumeProperties.
        :type volume_type: str
        """
        allowed_values = ["Tiered", "Archival", "LocallyPinned"]  # noqa: E501
        if volume_type not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_type` ({0}), must be one of {1}"
                .format(volume_type, allowed_values)
            )

        self._volume_type = volume_type
