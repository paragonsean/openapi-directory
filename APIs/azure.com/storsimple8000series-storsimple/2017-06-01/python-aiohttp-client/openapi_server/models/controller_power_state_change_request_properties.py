# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ControllerPowerStateChangeRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, active_controller: str=None, controller0_state: str=None, controller1_state: str=None):
        """ControllerPowerStateChangeRequestProperties - a model defined in OpenAPI

        :param action: The action of this ControllerPowerStateChangeRequestProperties.
        :param active_controller: The active_controller of this ControllerPowerStateChangeRequestProperties.
        :param controller0_state: The controller0_state of this ControllerPowerStateChangeRequestProperties.
        :param controller1_state: The controller1_state of this ControllerPowerStateChangeRequestProperties.
        """
        self.openapi_types = {
            'action': str,
            'active_controller': str,
            'controller0_state': str,
            'controller1_state': str
        }

        self.attribute_map = {
            'action': 'action',
            'active_controller': 'activeController',
            'controller0_state': 'controller0State',
            'controller1_state': 'controller1State'
        }

        self._action = action
        self._active_controller = active_controller
        self._controller0_state = controller0_state
        self._controller1_state = controller1_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ControllerPowerStateChangeRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ControllerPowerStateChangeRequestProperties of this ControllerPowerStateChangeRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ControllerPowerStateChangeRequestProperties.

        The power state that the request is expecting for the controller of the device.

        :return: The action of this ControllerPowerStateChangeRequestProperties.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ControllerPowerStateChangeRequestProperties.

        The power state that the request is expecting for the controller of the device.

        :param action: The action of this ControllerPowerStateChangeRequestProperties.
        :type action: str
        """
        allowed_values = ["Start", "Restart", "Shutdown"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def active_controller(self):
        """Gets the active_controller of this ControllerPowerStateChangeRequestProperties.

        The active controller that the request is expecting on the device.

        :return: The active_controller of this ControllerPowerStateChangeRequestProperties.
        :rtype: str
        """
        return self._active_controller

    @active_controller.setter
    def active_controller(self, active_controller):
        """Sets the active_controller of this ControllerPowerStateChangeRequestProperties.

        The active controller that the request is expecting on the device.

        :param active_controller: The active_controller of this ControllerPowerStateChangeRequestProperties.
        :type active_controller: str
        """
        allowed_values = ["Unknown", "None", "Controller0", "Controller1"]  # noqa: E501
        if active_controller not in allowed_values:
            raise ValueError(
                "Invalid value for `active_controller` ({0}), must be one of {1}"
                .format(active_controller, allowed_values)
            )

        self._active_controller = active_controller

    @property
    def controller0_state(self):
        """Gets the controller0_state of this ControllerPowerStateChangeRequestProperties.

        The controller 0's status that the request is expecting on the device.

        :return: The controller0_state of this ControllerPowerStateChangeRequestProperties.
        :rtype: str
        """
        return self._controller0_state

    @controller0_state.setter
    def controller0_state(self, controller0_state):
        """Sets the controller0_state of this ControllerPowerStateChangeRequestProperties.

        The controller 0's status that the request is expecting on the device.

        :param controller0_state: The controller0_state of this ControllerPowerStateChangeRequestProperties.
        :type controller0_state: str
        """
        allowed_values = ["NotPresent", "PoweredOff", "Ok", "Recovering", "Warning", "Failure"]  # noqa: E501
        if controller0_state not in allowed_values:
            raise ValueError(
                "Invalid value for `controller0_state` ({0}), must be one of {1}"
                .format(controller0_state, allowed_values)
            )

        self._controller0_state = controller0_state

    @property
    def controller1_state(self):
        """Gets the controller1_state of this ControllerPowerStateChangeRequestProperties.

        The controller 1's status that the request is expecting on the device.

        :return: The controller1_state of this ControllerPowerStateChangeRequestProperties.
        :rtype: str
        """
        return self._controller1_state

    @controller1_state.setter
    def controller1_state(self, controller1_state):
        """Sets the controller1_state of this ControllerPowerStateChangeRequestProperties.

        The controller 1's status that the request is expecting on the device.

        :param controller1_state: The controller1_state of this ControllerPowerStateChangeRequestProperties.
        :type controller1_state: str
        """
        allowed_values = ["NotPresent", "PoweredOff", "Ok", "Recovering", "Warning", "Failure"]  # noqa: E501
        if controller1_state not in allowed_values:
            raise ValueError(
                "Invalid value for `controller1_state` ({0}), must be one of {1}"
                .format(controller1_state, allowed_values)
            )

        self._controller1_state = controller1_state
