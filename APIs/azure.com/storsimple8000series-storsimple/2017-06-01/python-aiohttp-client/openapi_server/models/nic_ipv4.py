# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NicIPv4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, controller0_ipv4_address: str=None, controller1_ipv4_address: str=None, ipv4_address: str=None, ipv4_gateway: str=None, ipv4_netmask: str=None):
        """NicIPv4 - a model defined in OpenAPI

        :param controller0_ipv4_address: The controller0_ipv4_address of this NicIPv4.
        :param controller1_ipv4_address: The controller1_ipv4_address of this NicIPv4.
        :param ipv4_address: The ipv4_address of this NicIPv4.
        :param ipv4_gateway: The ipv4_gateway of this NicIPv4.
        :param ipv4_netmask: The ipv4_netmask of this NicIPv4.
        """
        self.openapi_types = {
            'controller0_ipv4_address': str,
            'controller1_ipv4_address': str,
            'ipv4_address': str,
            'ipv4_gateway': str,
            'ipv4_netmask': str
        }

        self.attribute_map = {
            'controller0_ipv4_address': 'controller0Ipv4Address',
            'controller1_ipv4_address': 'controller1Ipv4Address',
            'ipv4_address': 'ipv4Address',
            'ipv4_gateway': 'ipv4Gateway',
            'ipv4_netmask': 'ipv4Netmask'
        }

        self._controller0_ipv4_address = controller0_ipv4_address
        self._controller1_ipv4_address = controller1_ipv4_address
        self._ipv4_address = ipv4_address
        self._ipv4_gateway = ipv4_gateway
        self._ipv4_netmask = ipv4_netmask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NicIPv4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NicIPv4 of this NicIPv4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def controller0_ipv4_address(self):
        """Gets the controller0_ipv4_address of this NicIPv4.

        The IPv4 address of Controller0.

        :return: The controller0_ipv4_address of this NicIPv4.
        :rtype: str
        """
        return self._controller0_ipv4_address

    @controller0_ipv4_address.setter
    def controller0_ipv4_address(self, controller0_ipv4_address):
        """Sets the controller0_ipv4_address of this NicIPv4.

        The IPv4 address of Controller0.

        :param controller0_ipv4_address: The controller0_ipv4_address of this NicIPv4.
        :type controller0_ipv4_address: str
        """

        self._controller0_ipv4_address = controller0_ipv4_address

    @property
    def controller1_ipv4_address(self):
        """Gets the controller1_ipv4_address of this NicIPv4.

        The IPv4 address of Controller1.

        :return: The controller1_ipv4_address of this NicIPv4.
        :rtype: str
        """
        return self._controller1_ipv4_address

    @controller1_ipv4_address.setter
    def controller1_ipv4_address(self, controller1_ipv4_address):
        """Sets the controller1_ipv4_address of this NicIPv4.

        The IPv4 address of Controller1.

        :param controller1_ipv4_address: The controller1_ipv4_address of this NicIPv4.
        :type controller1_ipv4_address: str
        """

        self._controller1_ipv4_address = controller1_ipv4_address

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this NicIPv4.

        The IPv4 address of the network adapter.

        :return: The ipv4_address of this NicIPv4.
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this NicIPv4.

        The IPv4 address of the network adapter.

        :param ipv4_address: The ipv4_address of this NicIPv4.
        :type ipv4_address: str
        """

        self._ipv4_address = ipv4_address

    @property
    def ipv4_gateway(self):
        """Gets the ipv4_gateway of this NicIPv4.

        The IPv4 gateway of the network adapter.

        :return: The ipv4_gateway of this NicIPv4.
        :rtype: str
        """
        return self._ipv4_gateway

    @ipv4_gateway.setter
    def ipv4_gateway(self, ipv4_gateway):
        """Sets the ipv4_gateway of this NicIPv4.

        The IPv4 gateway of the network adapter.

        :param ipv4_gateway: The ipv4_gateway of this NicIPv4.
        :type ipv4_gateway: str
        """

        self._ipv4_gateway = ipv4_gateway

    @property
    def ipv4_netmask(self):
        """Gets the ipv4_netmask of this NicIPv4.

        The IPv4 netmask of the network adapter.

        :return: The ipv4_netmask of this NicIPv4.
        :rtype: str
        """
        return self._ipv4_netmask

    @ipv4_netmask.setter
    def ipv4_netmask(self, ipv4_netmask):
        """Sets the ipv4_netmask of this NicIPv4.

        The IPv4 netmask of the network adapter.

        :param ipv4_netmask: The ipv4_netmask of this NicIPv4.
        :type ipv4_netmask: str
        """

        self._ipv4_netmask = ipv4_netmask
