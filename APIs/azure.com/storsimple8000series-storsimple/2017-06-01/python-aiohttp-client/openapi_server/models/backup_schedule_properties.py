# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schedule_recurrence import ScheduleRecurrence
from openapi_server import util


class BackupScheduleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_type: str=None, last_successful_run: datetime=None, retention_count: int=None, schedule_recurrence: ScheduleRecurrence=None, schedule_status: str=None, start_time: datetime=None):
        """BackupScheduleProperties - a model defined in OpenAPI

        :param backup_type: The backup_type of this BackupScheduleProperties.
        :param last_successful_run: The last_successful_run of this BackupScheduleProperties.
        :param retention_count: The retention_count of this BackupScheduleProperties.
        :param schedule_recurrence: The schedule_recurrence of this BackupScheduleProperties.
        :param schedule_status: The schedule_status of this BackupScheduleProperties.
        :param start_time: The start_time of this BackupScheduleProperties.
        """
        self.openapi_types = {
            'backup_type': str,
            'last_successful_run': datetime,
            'retention_count': int,
            'schedule_recurrence': ScheduleRecurrence,
            'schedule_status': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'backup_type': 'backupType',
            'last_successful_run': 'lastSuccessfulRun',
            'retention_count': 'retentionCount',
            'schedule_recurrence': 'scheduleRecurrence',
            'schedule_status': 'scheduleStatus',
            'start_time': 'startTime'
        }

        self._backup_type = backup_type
        self._last_successful_run = last_successful_run
        self._retention_count = retention_count
        self._schedule_recurrence = schedule_recurrence
        self._schedule_status = schedule_status
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupScheduleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupScheduleProperties of this BackupScheduleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_type(self):
        """Gets the backup_type of this BackupScheduleProperties.

        The type of backup which needs to be taken.

        :return: The backup_type of this BackupScheduleProperties.
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this BackupScheduleProperties.

        The type of backup which needs to be taken.

        :param backup_type: The backup_type of this BackupScheduleProperties.
        :type backup_type: str
        """
        allowed_values = ["LocalSnapshot", "CloudSnapshot"]  # noqa: E501
        if backup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_type` ({0}), must be one of {1}"
                .format(backup_type, allowed_values)
            )

        self._backup_type = backup_type

    @property
    def last_successful_run(self):
        """Gets the last_successful_run of this BackupScheduleProperties.

        The last successful backup run which was triggered for the schedule.

        :return: The last_successful_run of this BackupScheduleProperties.
        :rtype: datetime
        """
        return self._last_successful_run

    @last_successful_run.setter
    def last_successful_run(self, last_successful_run):
        """Sets the last_successful_run of this BackupScheduleProperties.

        The last successful backup run which was triggered for the schedule.

        :param last_successful_run: The last_successful_run of this BackupScheduleProperties.
        :type last_successful_run: datetime
        """

        self._last_successful_run = last_successful_run

    @property
    def retention_count(self):
        """Gets the retention_count of this BackupScheduleProperties.

        The number of backups to be retained.

        :return: The retention_count of this BackupScheduleProperties.
        :rtype: int
        """
        return self._retention_count

    @retention_count.setter
    def retention_count(self, retention_count):
        """Sets the retention_count of this BackupScheduleProperties.

        The number of backups to be retained.

        :param retention_count: The retention_count of this BackupScheduleProperties.
        :type retention_count: int
        """
        if retention_count is None:
            raise ValueError("Invalid value for `retention_count`, must not be `None`")

        self._retention_count = retention_count

    @property
    def schedule_recurrence(self):
        """Gets the schedule_recurrence of this BackupScheduleProperties.


        :return: The schedule_recurrence of this BackupScheduleProperties.
        :rtype: ScheduleRecurrence
        """
        return self._schedule_recurrence

    @schedule_recurrence.setter
    def schedule_recurrence(self, schedule_recurrence):
        """Sets the schedule_recurrence of this BackupScheduleProperties.


        :param schedule_recurrence: The schedule_recurrence of this BackupScheduleProperties.
        :type schedule_recurrence: ScheduleRecurrence
        """
        if schedule_recurrence is None:
            raise ValueError("Invalid value for `schedule_recurrence`, must not be `None`")

        self._schedule_recurrence = schedule_recurrence

    @property
    def schedule_status(self):
        """Gets the schedule_status of this BackupScheduleProperties.

        The schedule status.

        :return: The schedule_status of this BackupScheduleProperties.
        :rtype: str
        """
        return self._schedule_status

    @schedule_status.setter
    def schedule_status(self, schedule_status):
        """Sets the schedule_status of this BackupScheduleProperties.

        The schedule status.

        :param schedule_status: The schedule_status of this BackupScheduleProperties.
        :type schedule_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if schedule_status not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_status` ({0}), must be one of {1}"
                .format(schedule_status, allowed_values)
            )

        self._schedule_status = schedule_status

    @property
    def start_time(self):
        """Gets the start_time of this BackupScheduleProperties.

        The start time of the schedule.

        :return: The start_time of this BackupScheduleProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BackupScheduleProperties.

        The start time of the schedule.

        :param start_time: The start_time of this BackupScheduleProperties.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time
