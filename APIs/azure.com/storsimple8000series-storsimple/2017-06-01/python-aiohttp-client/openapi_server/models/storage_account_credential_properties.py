# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asymmetric_encrypted_secret import AsymmetricEncryptedSecret
from openapi_server import util


class StorageAccountCredentialProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key: AsymmetricEncryptedSecret=None, end_point: str=None, ssl_status: str=None, volumes_count: int=None):
        """StorageAccountCredentialProperties - a model defined in OpenAPI

        :param access_key: The access_key of this StorageAccountCredentialProperties.
        :param end_point: The end_point of this StorageAccountCredentialProperties.
        :param ssl_status: The ssl_status of this StorageAccountCredentialProperties.
        :param volumes_count: The volumes_count of this StorageAccountCredentialProperties.
        """
        self.openapi_types = {
            'access_key': AsymmetricEncryptedSecret,
            'end_point': str,
            'ssl_status': str,
            'volumes_count': int
        }

        self.attribute_map = {
            'access_key': 'accessKey',
            'end_point': 'endPoint',
            'ssl_status': 'sslStatus',
            'volumes_count': 'volumesCount'
        }

        self._access_key = access_key
        self._end_point = end_point
        self._ssl_status = ssl_status
        self._volumes_count = volumes_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountCredentialProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountCredentialProperties of this StorageAccountCredentialProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key(self):
        """Gets the access_key of this StorageAccountCredentialProperties.


        :return: The access_key of this StorageAccountCredentialProperties.
        :rtype: AsymmetricEncryptedSecret
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this StorageAccountCredentialProperties.


        :param access_key: The access_key of this StorageAccountCredentialProperties.
        :type access_key: AsymmetricEncryptedSecret
        """

        self._access_key = access_key

    @property
    def end_point(self):
        """Gets the end_point of this StorageAccountCredentialProperties.

        The storage endpoint

        :return: The end_point of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._end_point

    @end_point.setter
    def end_point(self, end_point):
        """Sets the end_point of this StorageAccountCredentialProperties.

        The storage endpoint

        :param end_point: The end_point of this StorageAccountCredentialProperties.
        :type end_point: str
        """
        if end_point is None:
            raise ValueError("Invalid value for `end_point`, must not be `None`")

        self._end_point = end_point

    @property
    def ssl_status(self):
        """Gets the ssl_status of this StorageAccountCredentialProperties.

        Signifies whether SSL needs to be enabled or not.

        :return: The ssl_status of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._ssl_status

    @ssl_status.setter
    def ssl_status(self, ssl_status):
        """Sets the ssl_status of this StorageAccountCredentialProperties.

        Signifies whether SSL needs to be enabled or not.

        :param ssl_status: The ssl_status of this StorageAccountCredentialProperties.
        :type ssl_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if ssl_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_status` ({0}), must be one of {1}"
                .format(ssl_status, allowed_values)
            )

        self._ssl_status = ssl_status

    @property
    def volumes_count(self):
        """Gets the volumes_count of this StorageAccountCredentialProperties.

        The count of volumes using this storage account credential.

        :return: The volumes_count of this StorageAccountCredentialProperties.
        :rtype: int
        """
        return self._volumes_count

    @volumes_count.setter
    def volumes_count(self, volumes_count):
        """Sets the volumes_count of this StorageAccountCredentialProperties.

        The count of volumes using this storage account credential.

        :param volumes_count: The volumes_count of this StorageAccountCredentialProperties.
        :type volumes_count: int
        """

        self._volumes_count = volumes_count
