# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appeared_on_time: datetime=None, severity: str=None, source_name: str=None, source_type: str=None, status: str=None):
        """AlertFilter - a model defined in OpenAPI

        :param appeared_on_time: The appeared_on_time of this AlertFilter.
        :param severity: The severity of this AlertFilter.
        :param source_name: The source_name of this AlertFilter.
        :param source_type: The source_type of this AlertFilter.
        :param status: The status of this AlertFilter.
        """
        self.openapi_types = {
            'appeared_on_time': datetime,
            'severity': str,
            'source_name': str,
            'source_type': str,
            'status': str
        }

        self.attribute_map = {
            'appeared_on_time': 'appearedOnTime',
            'severity': 'severity',
            'source_name': 'sourceName',
            'source_type': 'sourceType',
            'status': 'status'
        }

        self._appeared_on_time = appeared_on_time
        self._severity = severity
        self._source_name = source_name
        self._source_type = source_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertFilter of this AlertFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appeared_on_time(self):
        """Gets the appeared_on_time of this AlertFilter.

        Specifies the appeared time (in UTC) of the alerts to be filtered. Only 'Greater-Than' and 'Lesser-Than' operators are supported for this property.

        :return: The appeared_on_time of this AlertFilter.
        :rtype: datetime
        """
        return self._appeared_on_time

    @appeared_on_time.setter
    def appeared_on_time(self, appeared_on_time):
        """Sets the appeared_on_time of this AlertFilter.

        Specifies the appeared time (in UTC) of the alerts to be filtered. Only 'Greater-Than' and 'Lesser-Than' operators are supported for this property.

        :param appeared_on_time: The appeared_on_time of this AlertFilter.
        :type appeared_on_time: datetime
        """

        self._appeared_on_time = appeared_on_time

    @property
    def severity(self):
        """Gets the severity of this AlertFilter.

        Specifies the severity of the alerts to be filtered. Only 'Equality' operator is supported for this property.

        :return: The severity of this AlertFilter.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertFilter.

        Specifies the severity of the alerts to be filtered. Only 'Equality' operator is supported for this property.

        :param severity: The severity of this AlertFilter.
        :type severity: str
        """
        allowed_values = ["Informational", "Warning", "Critical"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source_name(self):
        """Gets the source_name of this AlertFilter.

        Specifies the source name of the alerts to be filtered. Only 'Equality' operator is supported for this property.

        :return: The source_name of this AlertFilter.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this AlertFilter.

        Specifies the source name of the alerts to be filtered. Only 'Equality' operator is supported for this property.

        :param source_name: The source_name of this AlertFilter.
        :type source_name: str
        """

        self._source_name = source_name

    @property
    def source_type(self):
        """Gets the source_type of this AlertFilter.

        Specifies the source type of the alerts to be filtered. Only 'Equality' operator is supported for this property.

        :return: The source_type of this AlertFilter.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AlertFilter.

        Specifies the source type of the alerts to be filtered. Only 'Equality' operator is supported for this property.

        :param source_type: The source_type of this AlertFilter.
        :type source_type: str
        """
        allowed_values = ["Resource", "Device"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this AlertFilter.

        Specifies the status of the alerts to be filtered. Only 'Equality' operator is supported for this property.

        :return: The status of this AlertFilter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertFilter.

        Specifies the status of the alerts to be filtered. Only 'Equality' operator is supported for this property.

        :param status: The status of this AlertFilter.
        :type status: str
        """
        allowed_values = ["Active", "Cleared"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
