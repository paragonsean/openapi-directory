# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time import Time
from openapi_server import util


class BandwidthSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days: List[str]=None, rate_in_mbps: int=None, start: Time=None, stop: Time=None):
        """BandwidthSchedule - a model defined in OpenAPI

        :param days: The days of this BandwidthSchedule.
        :param rate_in_mbps: The rate_in_mbps of this BandwidthSchedule.
        :param start: The start of this BandwidthSchedule.
        :param stop: The stop of this BandwidthSchedule.
        """
        self.openapi_types = {
            'days': List[str],
            'rate_in_mbps': int,
            'start': Time,
            'stop': Time
        }

        self.attribute_map = {
            'days': 'days',
            'rate_in_mbps': 'rateInMbps',
            'start': 'start',
            'stop': 'stop'
        }

        self._days = days
        self._rate_in_mbps = rate_in_mbps
        self._start = start
        self._stop = stop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BandwidthSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BandwidthSchedule of this BandwidthSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days(self):
        """Gets the days of this BandwidthSchedule.

        The days of the week when this schedule is applicable.

        :return: The days of this BandwidthSchedule.
        :rtype: List[str]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this BandwidthSchedule.

        The days of the week when this schedule is applicable.

        :param days: The days of this BandwidthSchedule.
        :type days: List[str]
        """
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if not set(days).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `days` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(days) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._days = days

    @property
    def rate_in_mbps(self):
        """Gets the rate_in_mbps of this BandwidthSchedule.

        The rate in Mbps.

        :return: The rate_in_mbps of this BandwidthSchedule.
        :rtype: int
        """
        return self._rate_in_mbps

    @rate_in_mbps.setter
    def rate_in_mbps(self, rate_in_mbps):
        """Sets the rate_in_mbps of this BandwidthSchedule.

        The rate in Mbps.

        :param rate_in_mbps: The rate_in_mbps of this BandwidthSchedule.
        :type rate_in_mbps: int
        """
        if rate_in_mbps is None:
            raise ValueError("Invalid value for `rate_in_mbps`, must not be `None`")

        self._rate_in_mbps = rate_in_mbps

    @property
    def start(self):
        """Gets the start of this BandwidthSchedule.


        :return: The start of this BandwidthSchedule.
        :rtype: Time
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BandwidthSchedule.


        :param start: The start of this BandwidthSchedule.
        :type start: Time
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def stop(self):
        """Gets the stop of this BandwidthSchedule.


        :return: The stop of this BandwidthSchedule.
        :rtype: Time
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this BandwidthSchedule.


        :param stop: The stop of this BandwidthSchedule.
        :type stop: Time
        """
        if stop is None:
            raise ValueError("Invalid value for `stop`, must not be `None`")

        self._stop = stop
