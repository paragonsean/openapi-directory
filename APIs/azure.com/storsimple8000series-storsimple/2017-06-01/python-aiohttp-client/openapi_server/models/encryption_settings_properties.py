# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionSettingsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_status: str=None, key_rollover_status: str=None):
        """EncryptionSettingsProperties - a model defined in OpenAPI

        :param encryption_status: The encryption_status of this EncryptionSettingsProperties.
        :param key_rollover_status: The key_rollover_status of this EncryptionSettingsProperties.
        """
        self.openapi_types = {
            'encryption_status': str,
            'key_rollover_status': str
        }

        self.attribute_map = {
            'encryption_status': 'encryptionStatus',
            'key_rollover_status': 'keyRolloverStatus'
        }

        self._encryption_status = encryption_status
        self._key_rollover_status = key_rollover_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionSettingsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionSettingsProperties of this EncryptionSettingsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_status(self):
        """Gets the encryption_status of this EncryptionSettingsProperties.

        The encryption status to indicates if encryption is enabled or not.

        :return: The encryption_status of this EncryptionSettingsProperties.
        :rtype: str
        """
        return self._encryption_status

    @encryption_status.setter
    def encryption_status(self, encryption_status):
        """Sets the encryption_status of this EncryptionSettingsProperties.

        The encryption status to indicates if encryption is enabled or not.

        :param encryption_status: The encryption_status of this EncryptionSettingsProperties.
        :type encryption_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if encryption_status not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_status` ({0}), must be one of {1}"
                .format(encryption_status, allowed_values)
            )

        self._encryption_status = encryption_status

    @property
    def key_rollover_status(self):
        """Gets the key_rollover_status of this EncryptionSettingsProperties.

        The key rollover status to indicates if key rollover is required or not. If secret's encryption has been upgraded, then it requires key rollover.

        :return: The key_rollover_status of this EncryptionSettingsProperties.
        :rtype: str
        """
        return self._key_rollover_status

    @key_rollover_status.setter
    def key_rollover_status(self, key_rollover_status):
        """Sets the key_rollover_status of this EncryptionSettingsProperties.

        The key rollover status to indicates if key rollover is required or not. If secret's encryption has been upgraded, then it requires key rollover.

        :param key_rollover_status: The key_rollover_status of this EncryptionSettingsProperties.
        :type key_rollover_status: str
        """
        allowed_values = ["Required", "NotRequired"]  # noqa: E501
        if key_rollover_status not in allowed_values:
            raise ValueError(
                "Invalid value for `key_rollover_status` ({0}), must be one of {1}"
                .format(key_rollover_status, allowed_values)
            )

        self._key_rollover_status = key_rollover_status
