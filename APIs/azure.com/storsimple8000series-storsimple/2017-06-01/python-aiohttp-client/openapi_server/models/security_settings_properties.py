# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chap_settings import ChapSettings
from openapi_server.models.remote_management_settings import RemoteManagementSettings
from openapi_server import util


class SecuritySettingsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chap_settings: ChapSettings=None, remote_management_settings: RemoteManagementSettings=None):
        """SecuritySettingsProperties - a model defined in OpenAPI

        :param chap_settings: The chap_settings of this SecuritySettingsProperties.
        :param remote_management_settings: The remote_management_settings of this SecuritySettingsProperties.
        """
        self.openapi_types = {
            'chap_settings': ChapSettings,
            'remote_management_settings': RemoteManagementSettings
        }

        self.attribute_map = {
            'chap_settings': 'chapSettings',
            'remote_management_settings': 'remoteManagementSettings'
        }

        self._chap_settings = chap_settings
        self._remote_management_settings = remote_management_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecuritySettingsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecuritySettingsProperties of this SecuritySettingsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chap_settings(self):
        """Gets the chap_settings of this SecuritySettingsProperties.


        :return: The chap_settings of this SecuritySettingsProperties.
        :rtype: ChapSettings
        """
        return self._chap_settings

    @chap_settings.setter
    def chap_settings(self, chap_settings):
        """Sets the chap_settings of this SecuritySettingsProperties.


        :param chap_settings: The chap_settings of this SecuritySettingsProperties.
        :type chap_settings: ChapSettings
        """
        if chap_settings is None:
            raise ValueError("Invalid value for `chap_settings`, must not be `None`")

        self._chap_settings = chap_settings

    @property
    def remote_management_settings(self):
        """Gets the remote_management_settings of this SecuritySettingsProperties.


        :return: The remote_management_settings of this SecuritySettingsProperties.
        :rtype: RemoteManagementSettings
        """
        return self._remote_management_settings

    @remote_management_settings.setter
    def remote_management_settings(self, remote_management_settings):
        """Sets the remote_management_settings of this SecuritySettingsProperties.


        :param remote_management_settings: The remote_management_settings of this SecuritySettingsProperties.
        :type remote_management_settings: RemoteManagementSettings
        """
        if remote_management_settings is None:
            raise ValueError("Invalid value for `remote_management_settings`, must not be `None`")

        self._remote_management_settings = remote_management_settings
