# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Time(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hours: int=None, minutes: int=None, seconds: int=None):
        """Time - a model defined in OpenAPI

        :param hours: The hours of this Time.
        :param minutes: The minutes of this Time.
        :param seconds: The seconds of this Time.
        """
        self.openapi_types = {
            'hours': int,
            'minutes': int,
            'seconds': int
        }

        self.attribute_map = {
            'hours': 'hours',
            'minutes': 'minutes',
            'seconds': 'seconds'
        }

        self._hours = hours
        self._minutes = minutes
        self._seconds = seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Time':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Time of this Time.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hours(self):
        """Gets the hours of this Time.

        The hour.

        :return: The hours of this Time.
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this Time.

        The hour.

        :param hours: The hours of this Time.
        :type hours: int
        """
        if hours is None:
            raise ValueError("Invalid value for `hours`, must not be `None`")
        if hours is not None and hours > 23:
            raise ValueError("Invalid value for `hours`, must be a value less than or equal to `23`")
        if hours is not None and hours < 0:
            raise ValueError("Invalid value for `hours`, must be a value greater than or equal to `0`")

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this Time.

        The minute.

        :return: The minutes of this Time.
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this Time.

        The minute.

        :param minutes: The minutes of this Time.
        :type minutes: int
        """
        if minutes is None:
            raise ValueError("Invalid value for `minutes`, must not be `None`")
        if minutes is not None and minutes > 59:
            raise ValueError("Invalid value for `minutes`, must be a value less than or equal to `59`")
        if minutes is not None and minutes < 0:
            raise ValueError("Invalid value for `minutes`, must be a value greater than or equal to `0`")

        self._minutes = minutes

    @property
    def seconds(self):
        """Gets the seconds of this Time.

        The second.

        :return: The seconds of this Time.
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this Time.

        The second.

        :param seconds: The seconds of this Time.
        :type seconds: int
        """
        if seconds is None:
            raise ValueError("Invalid value for `seconds`, must not be `None`")
        if seconds is not None and seconds > 59:
            raise ValueError("Invalid value for `seconds`, must be a value less than or equal to `59`")
        if seconds is not None and seconds < 0:
            raise ValueError("Invalid value for `seconds`, must be a value greater than or equal to `0`")

        self._seconds = seconds
