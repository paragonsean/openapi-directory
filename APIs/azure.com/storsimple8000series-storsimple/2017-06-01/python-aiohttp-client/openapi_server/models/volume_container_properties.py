# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asymmetric_encrypted_secret import AsymmetricEncryptedSecret
from openapi_server import util


class VolumeContainerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, band_width_rate_in_mbps: int=None, bandwidth_setting_id: str=None, encryption_key: AsymmetricEncryptedSecret=None, encryption_status: str=None, owner_ship_status: str=None, storage_account_credential_id: str=None, total_cloud_storage_usage_in_bytes: int=None, volume_count: int=None):
        """VolumeContainerProperties - a model defined in OpenAPI

        :param band_width_rate_in_mbps: The band_width_rate_in_mbps of this VolumeContainerProperties.
        :param bandwidth_setting_id: The bandwidth_setting_id of this VolumeContainerProperties.
        :param encryption_key: The encryption_key of this VolumeContainerProperties.
        :param encryption_status: The encryption_status of this VolumeContainerProperties.
        :param owner_ship_status: The owner_ship_status of this VolumeContainerProperties.
        :param storage_account_credential_id: The storage_account_credential_id of this VolumeContainerProperties.
        :param total_cloud_storage_usage_in_bytes: The total_cloud_storage_usage_in_bytes of this VolumeContainerProperties.
        :param volume_count: The volume_count of this VolumeContainerProperties.
        """
        self.openapi_types = {
            'band_width_rate_in_mbps': int,
            'bandwidth_setting_id': str,
            'encryption_key': AsymmetricEncryptedSecret,
            'encryption_status': str,
            'owner_ship_status': str,
            'storage_account_credential_id': str,
            'total_cloud_storage_usage_in_bytes': int,
            'volume_count': int
        }

        self.attribute_map = {
            'band_width_rate_in_mbps': 'bandWidthRateInMbps',
            'bandwidth_setting_id': 'bandwidthSettingId',
            'encryption_key': 'encryptionKey',
            'encryption_status': 'encryptionStatus',
            'owner_ship_status': 'ownerShipStatus',
            'storage_account_credential_id': 'storageAccountCredentialId',
            'total_cloud_storage_usage_in_bytes': 'totalCloudStorageUsageInBytes',
            'volume_count': 'volumeCount'
        }

        self._band_width_rate_in_mbps = band_width_rate_in_mbps
        self._bandwidth_setting_id = bandwidth_setting_id
        self._encryption_key = encryption_key
        self._encryption_status = encryption_status
        self._owner_ship_status = owner_ship_status
        self._storage_account_credential_id = storage_account_credential_id
        self._total_cloud_storage_usage_in_bytes = total_cloud_storage_usage_in_bytes
        self._volume_count = volume_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeContainerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeContainerProperties of this VolumeContainerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def band_width_rate_in_mbps(self):
        """Gets the band_width_rate_in_mbps of this VolumeContainerProperties.

        The bandwidth-rate set on the volume container.

        :return: The band_width_rate_in_mbps of this VolumeContainerProperties.
        :rtype: int
        """
        return self._band_width_rate_in_mbps

    @band_width_rate_in_mbps.setter
    def band_width_rate_in_mbps(self, band_width_rate_in_mbps):
        """Sets the band_width_rate_in_mbps of this VolumeContainerProperties.

        The bandwidth-rate set on the volume container.

        :param band_width_rate_in_mbps: The band_width_rate_in_mbps of this VolumeContainerProperties.
        :type band_width_rate_in_mbps: int
        """

        self._band_width_rate_in_mbps = band_width_rate_in_mbps

    @property
    def bandwidth_setting_id(self):
        """Gets the bandwidth_setting_id of this VolumeContainerProperties.

        The ID of the bandwidth setting associated with the volume container.

        :return: The bandwidth_setting_id of this VolumeContainerProperties.
        :rtype: str
        """
        return self._bandwidth_setting_id

    @bandwidth_setting_id.setter
    def bandwidth_setting_id(self, bandwidth_setting_id):
        """Sets the bandwidth_setting_id of this VolumeContainerProperties.

        The ID of the bandwidth setting associated with the volume container.

        :param bandwidth_setting_id: The bandwidth_setting_id of this VolumeContainerProperties.
        :type bandwidth_setting_id: str
        """

        self._bandwidth_setting_id = bandwidth_setting_id

    @property
    def encryption_key(self):
        """Gets the encryption_key of this VolumeContainerProperties.


        :return: The encryption_key of this VolumeContainerProperties.
        :rtype: AsymmetricEncryptedSecret
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this VolumeContainerProperties.


        :param encryption_key: The encryption_key of this VolumeContainerProperties.
        :type encryption_key: AsymmetricEncryptedSecret
        """

        self._encryption_key = encryption_key

    @property
    def encryption_status(self):
        """Gets the encryption_status of this VolumeContainerProperties.

        The flag to denote whether encryption is enabled or not.

        :return: The encryption_status of this VolumeContainerProperties.
        :rtype: str
        """
        return self._encryption_status

    @encryption_status.setter
    def encryption_status(self, encryption_status):
        """Sets the encryption_status of this VolumeContainerProperties.

        The flag to denote whether encryption is enabled or not.

        :param encryption_status: The encryption_status of this VolumeContainerProperties.
        :type encryption_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if encryption_status not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_status` ({0}), must be one of {1}"
                .format(encryption_status, allowed_values)
            )

        self._encryption_status = encryption_status

    @property
    def owner_ship_status(self):
        """Gets the owner_ship_status of this VolumeContainerProperties.

        The owner ship status of the volume container. Only when the status is \"NotOwned\", the delete operation on the volume container is permitted.

        :return: The owner_ship_status of this VolumeContainerProperties.
        :rtype: str
        """
        return self._owner_ship_status

    @owner_ship_status.setter
    def owner_ship_status(self, owner_ship_status):
        """Sets the owner_ship_status of this VolumeContainerProperties.

        The owner ship status of the volume container. Only when the status is \"NotOwned\", the delete operation on the volume container is permitted.

        :param owner_ship_status: The owner_ship_status of this VolumeContainerProperties.
        :type owner_ship_status: str
        """
        allowed_values = ["Owned", "NotOwned"]  # noqa: E501
        if owner_ship_status not in allowed_values:
            raise ValueError(
                "Invalid value for `owner_ship_status` ({0}), must be one of {1}"
                .format(owner_ship_status, allowed_values)
            )

        self._owner_ship_status = owner_ship_status

    @property
    def storage_account_credential_id(self):
        """Gets the storage_account_credential_id of this VolumeContainerProperties.

        The path ID of storage account associated with the volume container.

        :return: The storage_account_credential_id of this VolumeContainerProperties.
        :rtype: str
        """
        return self._storage_account_credential_id

    @storage_account_credential_id.setter
    def storage_account_credential_id(self, storage_account_credential_id):
        """Sets the storage_account_credential_id of this VolumeContainerProperties.

        The path ID of storage account associated with the volume container.

        :param storage_account_credential_id: The storage_account_credential_id of this VolumeContainerProperties.
        :type storage_account_credential_id: str
        """
        if storage_account_credential_id is None:
            raise ValueError("Invalid value for `storage_account_credential_id`, must not be `None`")

        self._storage_account_credential_id = storage_account_credential_id

    @property
    def total_cloud_storage_usage_in_bytes(self):
        """Gets the total_cloud_storage_usage_in_bytes of this VolumeContainerProperties.

        The total cloud storage for the volume container.

        :return: The total_cloud_storage_usage_in_bytes of this VolumeContainerProperties.
        :rtype: int
        """
        return self._total_cloud_storage_usage_in_bytes

    @total_cloud_storage_usage_in_bytes.setter
    def total_cloud_storage_usage_in_bytes(self, total_cloud_storage_usage_in_bytes):
        """Sets the total_cloud_storage_usage_in_bytes of this VolumeContainerProperties.

        The total cloud storage for the volume container.

        :param total_cloud_storage_usage_in_bytes: The total_cloud_storage_usage_in_bytes of this VolumeContainerProperties.
        :type total_cloud_storage_usage_in_bytes: int
        """

        self._total_cloud_storage_usage_in_bytes = total_cloud_storage_usage_in_bytes

    @property
    def volume_count(self):
        """Gets the volume_count of this VolumeContainerProperties.

        The number of volumes in the volume Container.

        :return: The volume_count of this VolumeContainerProperties.
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this VolumeContainerProperties.

        The number of volumes in the volume Container.

        :param volume_count: The volume_count of this VolumeContainerProperties.
        :type volume_count: int
        """

        self._volume_count = volume_count
