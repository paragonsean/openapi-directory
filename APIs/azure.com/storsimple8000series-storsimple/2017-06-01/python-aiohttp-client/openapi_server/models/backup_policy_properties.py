# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_policy_creation_type: str=None, last_backup_time: datetime=None, next_backup_time: datetime=None, scheduled_backup_status: str=None, schedules_count: int=None, ssm_host_name: str=None, volume_ids: List[str]=None):
        """BackupPolicyProperties - a model defined in OpenAPI

        :param backup_policy_creation_type: The backup_policy_creation_type of this BackupPolicyProperties.
        :param last_backup_time: The last_backup_time of this BackupPolicyProperties.
        :param next_backup_time: The next_backup_time of this BackupPolicyProperties.
        :param scheduled_backup_status: The scheduled_backup_status of this BackupPolicyProperties.
        :param schedules_count: The schedules_count of this BackupPolicyProperties.
        :param ssm_host_name: The ssm_host_name of this BackupPolicyProperties.
        :param volume_ids: The volume_ids of this BackupPolicyProperties.
        """
        self.openapi_types = {
            'backup_policy_creation_type': str,
            'last_backup_time': datetime,
            'next_backup_time': datetime,
            'scheduled_backup_status': str,
            'schedules_count': int,
            'ssm_host_name': str,
            'volume_ids': List[str]
        }

        self.attribute_map = {
            'backup_policy_creation_type': 'backupPolicyCreationType',
            'last_backup_time': 'lastBackupTime',
            'next_backup_time': 'nextBackupTime',
            'scheduled_backup_status': 'scheduledBackupStatus',
            'schedules_count': 'schedulesCount',
            'ssm_host_name': 'ssmHostName',
            'volume_ids': 'volumeIds'
        }

        self._backup_policy_creation_type = backup_policy_creation_type
        self._last_backup_time = last_backup_time
        self._next_backup_time = next_backup_time
        self._scheduled_backup_status = scheduled_backup_status
        self._schedules_count = schedules_count
        self._ssm_host_name = ssm_host_name
        self._volume_ids = volume_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupPolicyProperties of this BackupPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_policy_creation_type(self):
        """Gets the backup_policy_creation_type of this BackupPolicyProperties.

        The backup policy creation type. Indicates whether this was created through SaaS or through StorSimple Snapshot Manager.

        :return: The backup_policy_creation_type of this BackupPolicyProperties.
        :rtype: str
        """
        return self._backup_policy_creation_type

    @backup_policy_creation_type.setter
    def backup_policy_creation_type(self, backup_policy_creation_type):
        """Sets the backup_policy_creation_type of this BackupPolicyProperties.

        The backup policy creation type. Indicates whether this was created through SaaS or through StorSimple Snapshot Manager.

        :param backup_policy_creation_type: The backup_policy_creation_type of this BackupPolicyProperties.
        :type backup_policy_creation_type: str
        """
        allowed_values = ["BySaaS", "BySSM"]  # noqa: E501
        if backup_policy_creation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_policy_creation_type` ({0}), must be one of {1}"
                .format(backup_policy_creation_type, allowed_values)
            )

        self._backup_policy_creation_type = backup_policy_creation_type

    @property
    def last_backup_time(self):
        """Gets the last_backup_time of this BackupPolicyProperties.

        The time of the last backup for the backup policy.

        :return: The last_backup_time of this BackupPolicyProperties.
        :rtype: datetime
        """
        return self._last_backup_time

    @last_backup_time.setter
    def last_backup_time(self, last_backup_time):
        """Sets the last_backup_time of this BackupPolicyProperties.

        The time of the last backup for the backup policy.

        :param last_backup_time: The last_backup_time of this BackupPolicyProperties.
        :type last_backup_time: datetime
        """

        self._last_backup_time = last_backup_time

    @property
    def next_backup_time(self):
        """Gets the next_backup_time of this BackupPolicyProperties.

        The time of the next backup for the backup policy.

        :return: The next_backup_time of this BackupPolicyProperties.
        :rtype: datetime
        """
        return self._next_backup_time

    @next_backup_time.setter
    def next_backup_time(self, next_backup_time):
        """Sets the next_backup_time of this BackupPolicyProperties.

        The time of the next backup for the backup policy.

        :param next_backup_time: The next_backup_time of this BackupPolicyProperties.
        :type next_backup_time: datetime
        """

        self._next_backup_time = next_backup_time

    @property
    def scheduled_backup_status(self):
        """Gets the scheduled_backup_status of this BackupPolicyProperties.

        Indicates whether at least one of the schedules in the backup policy is active or not.

        :return: The scheduled_backup_status of this BackupPolicyProperties.
        :rtype: str
        """
        return self._scheduled_backup_status

    @scheduled_backup_status.setter
    def scheduled_backup_status(self, scheduled_backup_status):
        """Sets the scheduled_backup_status of this BackupPolicyProperties.

        Indicates whether at least one of the schedules in the backup policy is active or not.

        :param scheduled_backup_status: The scheduled_backup_status of this BackupPolicyProperties.
        :type scheduled_backup_status: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if scheduled_backup_status not in allowed_values:
            raise ValueError(
                "Invalid value for `scheduled_backup_status` ({0}), must be one of {1}"
                .format(scheduled_backup_status, allowed_values)
            )

        self._scheduled_backup_status = scheduled_backup_status

    @property
    def schedules_count(self):
        """Gets the schedules_count of this BackupPolicyProperties.

        The count of schedules the backup policy contains.

        :return: The schedules_count of this BackupPolicyProperties.
        :rtype: int
        """
        return self._schedules_count

    @schedules_count.setter
    def schedules_count(self, schedules_count):
        """Sets the schedules_count of this BackupPolicyProperties.

        The count of schedules the backup policy contains.

        :param schedules_count: The schedules_count of this BackupPolicyProperties.
        :type schedules_count: int
        """

        self._schedules_count = schedules_count

    @property
    def ssm_host_name(self):
        """Gets the ssm_host_name of this BackupPolicyProperties.

        If the backup policy was created by StorSimple Snapshot Manager, then this field indicates the hostname of the StorSimple Snapshot Manager.

        :return: The ssm_host_name of this BackupPolicyProperties.
        :rtype: str
        """
        return self._ssm_host_name

    @ssm_host_name.setter
    def ssm_host_name(self, ssm_host_name):
        """Sets the ssm_host_name of this BackupPolicyProperties.

        If the backup policy was created by StorSimple Snapshot Manager, then this field indicates the hostname of the StorSimple Snapshot Manager.

        :param ssm_host_name: The ssm_host_name of this BackupPolicyProperties.
        :type ssm_host_name: str
        """

        self._ssm_host_name = ssm_host_name

    @property
    def volume_ids(self):
        """Gets the volume_ids of this BackupPolicyProperties.

        The path IDs of the volumes which are part of the backup policy.

        :return: The volume_ids of this BackupPolicyProperties.
        :rtype: List[str]
        """
        return self._volume_ids

    @volume_ids.setter
    def volume_ids(self, volume_ids):
        """Sets the volume_ids of this BackupPolicyProperties.

        The path IDs of the volumes which are part of the backup policy.

        :param volume_ids: The volume_ids of this BackupPolicyProperties.
        :type volume_ids: List[str]
        """
        if volume_ids is None:
            raise ValueError("Invalid value for `volume_ids`, must not be `None`")

        self._volume_ids = volume_ids
