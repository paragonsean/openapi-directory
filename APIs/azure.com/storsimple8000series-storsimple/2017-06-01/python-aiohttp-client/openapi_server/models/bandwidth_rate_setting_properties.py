# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bandwidth_schedule import BandwidthSchedule
from openapi_server import util


class BandwidthRateSettingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schedules: List[BandwidthSchedule]=None, volume_count: int=None):
        """BandwidthRateSettingProperties - a model defined in OpenAPI

        :param schedules: The schedules of this BandwidthRateSettingProperties.
        :param volume_count: The volume_count of this BandwidthRateSettingProperties.
        """
        self.openapi_types = {
            'schedules': List[BandwidthSchedule],
            'volume_count': int
        }

        self.attribute_map = {
            'schedules': 'schedules',
            'volume_count': 'volumeCount'
        }

        self._schedules = schedules
        self._volume_count = volume_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BandwidthRateSettingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BandwidthRateSettingProperties of this BandwidthRateSettingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schedules(self):
        """Gets the schedules of this BandwidthRateSettingProperties.

        The schedules.

        :return: The schedules of this BandwidthRateSettingProperties.
        :rtype: List[BandwidthSchedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this BandwidthRateSettingProperties.

        The schedules.

        :param schedules: The schedules of this BandwidthRateSettingProperties.
        :type schedules: List[BandwidthSchedule]
        """
        if schedules is None:
            raise ValueError("Invalid value for `schedules`, must not be `None`")

        self._schedules = schedules

    @property
    def volume_count(self):
        """Gets the volume_count of this BandwidthRateSettingProperties.

        The number of volumes that uses the bandwidth setting.

        :return: The volume_count of this BandwidthRateSettingProperties.
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this BandwidthRateSettingProperties.

        The number of volumes that uses the bandwidth setting.

        :param volume_count: The volume_count of this BandwidthRateSettingProperties.
        :type volume_count: int
        """

        self._volume_count = volume_count
