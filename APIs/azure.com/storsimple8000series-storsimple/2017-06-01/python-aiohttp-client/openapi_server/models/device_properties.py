# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_details import DeviceDetails
from openapi_server.models.device_rollover_details import DeviceRolloverDetails
from openapi_server import util


class DeviceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_time: datetime=None, active_controller: str=None, agent_group_version: int=None, available_local_storage_in_bytes: int=None, available_tiered_storage_in_bytes: int=None, culture: str=None, details: DeviceDetails=None, device_configuration_status: str=None, device_description: str=None, device_location: str=None, device_software_version: str=None, device_type: str=None, friendly_name: str=None, friendly_software_name: str=None, friendly_software_version: str=None, model_description: str=None, network_interface_card_count: int=None, provisioned_local_storage_in_bytes: int=None, provisioned_tiered_storage_in_bytes: int=None, provisioned_volume_size_in_bytes: int=None, rollover_details: DeviceRolloverDetails=None, serial_number: str=None, status: str=None, target_iqn: str=None, total_tiered_storage_in_bytes: int=None, using_storage_in_bytes: int=None, virtual_machine_api_type: str=None):
        """DeviceProperties - a model defined in OpenAPI

        :param activation_time: The activation_time of this DeviceProperties.
        :param active_controller: The active_controller of this DeviceProperties.
        :param agent_group_version: The agent_group_version of this DeviceProperties.
        :param available_local_storage_in_bytes: The available_local_storage_in_bytes of this DeviceProperties.
        :param available_tiered_storage_in_bytes: The available_tiered_storage_in_bytes of this DeviceProperties.
        :param culture: The culture of this DeviceProperties.
        :param details: The details of this DeviceProperties.
        :param device_configuration_status: The device_configuration_status of this DeviceProperties.
        :param device_description: The device_description of this DeviceProperties.
        :param device_location: The device_location of this DeviceProperties.
        :param device_software_version: The device_software_version of this DeviceProperties.
        :param device_type: The device_type of this DeviceProperties.
        :param friendly_name: The friendly_name of this DeviceProperties.
        :param friendly_software_name: The friendly_software_name of this DeviceProperties.
        :param friendly_software_version: The friendly_software_version of this DeviceProperties.
        :param model_description: The model_description of this DeviceProperties.
        :param network_interface_card_count: The network_interface_card_count of this DeviceProperties.
        :param provisioned_local_storage_in_bytes: The provisioned_local_storage_in_bytes of this DeviceProperties.
        :param provisioned_tiered_storage_in_bytes: The provisioned_tiered_storage_in_bytes of this DeviceProperties.
        :param provisioned_volume_size_in_bytes: The provisioned_volume_size_in_bytes of this DeviceProperties.
        :param rollover_details: The rollover_details of this DeviceProperties.
        :param serial_number: The serial_number of this DeviceProperties.
        :param status: The status of this DeviceProperties.
        :param target_iqn: The target_iqn of this DeviceProperties.
        :param total_tiered_storage_in_bytes: The total_tiered_storage_in_bytes of this DeviceProperties.
        :param using_storage_in_bytes: The using_storage_in_bytes of this DeviceProperties.
        :param virtual_machine_api_type: The virtual_machine_api_type of this DeviceProperties.
        """
        self.openapi_types = {
            'activation_time': datetime,
            'active_controller': str,
            'agent_group_version': int,
            'available_local_storage_in_bytes': int,
            'available_tiered_storage_in_bytes': int,
            'culture': str,
            'details': DeviceDetails,
            'device_configuration_status': str,
            'device_description': str,
            'device_location': str,
            'device_software_version': str,
            'device_type': str,
            'friendly_name': str,
            'friendly_software_name': str,
            'friendly_software_version': str,
            'model_description': str,
            'network_interface_card_count': int,
            'provisioned_local_storage_in_bytes': int,
            'provisioned_tiered_storage_in_bytes': int,
            'provisioned_volume_size_in_bytes': int,
            'rollover_details': DeviceRolloverDetails,
            'serial_number': str,
            'status': str,
            'target_iqn': str,
            'total_tiered_storage_in_bytes': int,
            'using_storage_in_bytes': int,
            'virtual_machine_api_type': str
        }

        self.attribute_map = {
            'activation_time': 'activationTime',
            'active_controller': 'activeController',
            'agent_group_version': 'agentGroupVersion',
            'available_local_storage_in_bytes': 'availableLocalStorageInBytes',
            'available_tiered_storage_in_bytes': 'availableTieredStorageInBytes',
            'culture': 'culture',
            'details': 'details',
            'device_configuration_status': 'deviceConfigurationStatus',
            'device_description': 'deviceDescription',
            'device_location': 'deviceLocation',
            'device_software_version': 'deviceSoftwareVersion',
            'device_type': 'deviceType',
            'friendly_name': 'friendlyName',
            'friendly_software_name': 'friendlySoftwareName',
            'friendly_software_version': 'friendlySoftwareVersion',
            'model_description': 'modelDescription',
            'network_interface_card_count': 'networkInterfaceCardCount',
            'provisioned_local_storage_in_bytes': 'provisionedLocalStorageInBytes',
            'provisioned_tiered_storage_in_bytes': 'provisionedTieredStorageInBytes',
            'provisioned_volume_size_in_bytes': 'provisionedVolumeSizeInBytes',
            'rollover_details': 'rolloverDetails',
            'serial_number': 'serialNumber',
            'status': 'status',
            'target_iqn': 'targetIqn',
            'total_tiered_storage_in_bytes': 'totalTieredStorageInBytes',
            'using_storage_in_bytes': 'usingStorageInBytes',
            'virtual_machine_api_type': 'virtualMachineApiType'
        }

        self._activation_time = activation_time
        self._active_controller = active_controller
        self._agent_group_version = agent_group_version
        self._available_local_storage_in_bytes = available_local_storage_in_bytes
        self._available_tiered_storage_in_bytes = available_tiered_storage_in_bytes
        self._culture = culture
        self._details = details
        self._device_configuration_status = device_configuration_status
        self._device_description = device_description
        self._device_location = device_location
        self._device_software_version = device_software_version
        self._device_type = device_type
        self._friendly_name = friendly_name
        self._friendly_software_name = friendly_software_name
        self._friendly_software_version = friendly_software_version
        self._model_description = model_description
        self._network_interface_card_count = network_interface_card_count
        self._provisioned_local_storage_in_bytes = provisioned_local_storage_in_bytes
        self._provisioned_tiered_storage_in_bytes = provisioned_tiered_storage_in_bytes
        self._provisioned_volume_size_in_bytes = provisioned_volume_size_in_bytes
        self._rollover_details = rollover_details
        self._serial_number = serial_number
        self._status = status
        self._target_iqn = target_iqn
        self._total_tiered_storage_in_bytes = total_tiered_storage_in_bytes
        self._using_storage_in_bytes = using_storage_in_bytes
        self._virtual_machine_api_type = virtual_machine_api_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceProperties of this DeviceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_time(self):
        """Gets the activation_time of this DeviceProperties.

        The UTC time at which the device was activated

        :return: The activation_time of this DeviceProperties.
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this DeviceProperties.

        The UTC time at which the device was activated

        :param activation_time: The activation_time of this DeviceProperties.
        :type activation_time: datetime
        """
        if activation_time is None:
            raise ValueError("Invalid value for `activation_time`, must not be `None`")

        self._activation_time = activation_time

    @property
    def active_controller(self):
        """Gets the active_controller of this DeviceProperties.

        The identifier of the active controller of the device.

        :return: The active_controller of this DeviceProperties.
        :rtype: str
        """
        return self._active_controller

    @active_controller.setter
    def active_controller(self, active_controller):
        """Sets the active_controller of this DeviceProperties.

        The identifier of the active controller of the device.

        :param active_controller: The active_controller of this DeviceProperties.
        :type active_controller: str
        """
        allowed_values = ["Unknown", "None", "Controller0", "Controller1"]  # noqa: E501
        if active_controller not in allowed_values:
            raise ValueError(
                "Invalid value for `active_controller` ({0}), must be one of {1}"
                .format(active_controller, allowed_values)
            )

        self._active_controller = active_controller

    @property
    def agent_group_version(self):
        """Gets the agent_group_version of this DeviceProperties.

        The device agent group version.

        :return: The agent_group_version of this DeviceProperties.
        :rtype: int
        """
        return self._agent_group_version

    @agent_group_version.setter
    def agent_group_version(self, agent_group_version):
        """Sets the agent_group_version of this DeviceProperties.

        The device agent group version.

        :param agent_group_version: The agent_group_version of this DeviceProperties.
        :type agent_group_version: int
        """

        self._agent_group_version = agent_group_version

    @property
    def available_local_storage_in_bytes(self):
        """Gets the available_local_storage_in_bytes of this DeviceProperties.

        The storage in bytes that is available locally on the device.

        :return: The available_local_storage_in_bytes of this DeviceProperties.
        :rtype: int
        """
        return self._available_local_storage_in_bytes

    @available_local_storage_in_bytes.setter
    def available_local_storage_in_bytes(self, available_local_storage_in_bytes):
        """Sets the available_local_storage_in_bytes of this DeviceProperties.

        The storage in bytes that is available locally on the device.

        :param available_local_storage_in_bytes: The available_local_storage_in_bytes of this DeviceProperties.
        :type available_local_storage_in_bytes: int
        """

        self._available_local_storage_in_bytes = available_local_storage_in_bytes

    @property
    def available_tiered_storage_in_bytes(self):
        """Gets the available_tiered_storage_in_bytes of this DeviceProperties.

        The storage in bytes that is available on the device for tiered volumes.

        :return: The available_tiered_storage_in_bytes of this DeviceProperties.
        :rtype: int
        """
        return self._available_tiered_storage_in_bytes

    @available_tiered_storage_in_bytes.setter
    def available_tiered_storage_in_bytes(self, available_tiered_storage_in_bytes):
        """Sets the available_tiered_storage_in_bytes of this DeviceProperties.

        The storage in bytes that is available on the device for tiered volumes.

        :param available_tiered_storage_in_bytes: The available_tiered_storage_in_bytes of this DeviceProperties.
        :type available_tiered_storage_in_bytes: int
        """

        self._available_tiered_storage_in_bytes = available_tiered_storage_in_bytes

    @property
    def culture(self):
        """Gets the culture of this DeviceProperties.

        The language culture setting on the device. For eg: \"en-US\"

        :return: The culture of this DeviceProperties.
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this DeviceProperties.

        The language culture setting on the device. For eg: \"en-US\"

        :param culture: The culture of this DeviceProperties.
        :type culture: str
        """
        if culture is None:
            raise ValueError("Invalid value for `culture`, must not be `None`")

        self._culture = culture

    @property
    def details(self):
        """Gets the details of this DeviceProperties.


        :return: The details of this DeviceProperties.
        :rtype: DeviceDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DeviceProperties.


        :param details: The details of this DeviceProperties.
        :type details: DeviceDetails
        """

        self._details = details

    @property
    def device_configuration_status(self):
        """Gets the device_configuration_status of this DeviceProperties.

        The current configuration status of the device.

        :return: The device_configuration_status of this DeviceProperties.
        :rtype: str
        """
        return self._device_configuration_status

    @device_configuration_status.setter
    def device_configuration_status(self, device_configuration_status):
        """Sets the device_configuration_status of this DeviceProperties.

        The current configuration status of the device.

        :param device_configuration_status: The device_configuration_status of this DeviceProperties.
        :type device_configuration_status: str
        """
        allowed_values = ["Complete", "Pending"]  # noqa: E501
        if device_configuration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `device_configuration_status` ({0}), must be one of {1}"
                .format(device_configuration_status, allowed_values)
            )

        self._device_configuration_status = device_configuration_status

    @property
    def device_description(self):
        """Gets the device_description of this DeviceProperties.

        The device description.

        :return: The device_description of this DeviceProperties.
        :rtype: str
        """
        return self._device_description

    @device_description.setter
    def device_description(self, device_description):
        """Sets the device_description of this DeviceProperties.

        The device description.

        :param device_description: The device_description of this DeviceProperties.
        :type device_description: str
        """
        if device_description is None:
            raise ValueError("Invalid value for `device_description`, must not be `None`")

        self._device_description = device_description

    @property
    def device_location(self):
        """Gets the device_location of this DeviceProperties.

        The location of the virtual appliance.

        :return: The device_location of this DeviceProperties.
        :rtype: str
        """
        return self._device_location

    @device_location.setter
    def device_location(self, device_location):
        """Sets the device_location of this DeviceProperties.

        The location of the virtual appliance.

        :param device_location: The device_location of this DeviceProperties.
        :type device_location: str
        """

        self._device_location = device_location

    @property
    def device_software_version(self):
        """Gets the device_software_version of this DeviceProperties.

        The version number of the software running on the device.

        :return: The device_software_version of this DeviceProperties.
        :rtype: str
        """
        return self._device_software_version

    @device_software_version.setter
    def device_software_version(self, device_software_version):
        """Sets the device_software_version of this DeviceProperties.

        The version number of the software running on the device.

        :param device_software_version: The device_software_version of this DeviceProperties.
        :type device_software_version: str
        """
        if device_software_version is None:
            raise ValueError("Invalid value for `device_software_version`, must not be `None`")

        self._device_software_version = device_software_version

    @property
    def device_type(self):
        """Gets the device_type of this DeviceProperties.

        The type of the device.

        :return: The device_type of this DeviceProperties.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceProperties.

        The type of the device.

        :param device_type: The device_type of this DeviceProperties.
        :type device_type: str
        """
        allowed_values = ["Invalid", "Series8000VirtualAppliance", "Series8000PhysicalAppliance"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DeviceProperties.

        The friendly name of the device.

        :return: The friendly_name of this DeviceProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DeviceProperties.

        The friendly name of the device.

        :param friendly_name: The friendly_name of this DeviceProperties.
        :type friendly_name: str
        """
        if friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")

        self._friendly_name = friendly_name

    @property
    def friendly_software_name(self):
        """Gets the friendly_software_name of this DeviceProperties.

        The friendly name of the software running on the device.

        :return: The friendly_software_name of this DeviceProperties.
        :rtype: str
        """
        return self._friendly_software_name

    @friendly_software_name.setter
    def friendly_software_name(self, friendly_software_name):
        """Sets the friendly_software_name of this DeviceProperties.

        The friendly name of the software running on the device.

        :param friendly_software_name: The friendly_software_name of this DeviceProperties.
        :type friendly_software_name: str
        """

        self._friendly_software_name = friendly_software_name

    @property
    def friendly_software_version(self):
        """Gets the friendly_software_version of this DeviceProperties.

        The device friendly software version.

        :return: The friendly_software_version of this DeviceProperties.
        :rtype: str
        """
        return self._friendly_software_version

    @friendly_software_version.setter
    def friendly_software_version(self, friendly_software_version):
        """Sets the friendly_software_version of this DeviceProperties.

        The device friendly software version.

        :param friendly_software_version: The friendly_software_version of this DeviceProperties.
        :type friendly_software_version: str
        """
        if friendly_software_version is None:
            raise ValueError("Invalid value for `friendly_software_version`, must not be `None`")

        self._friendly_software_version = friendly_software_version

    @property
    def model_description(self):
        """Gets the model_description of this DeviceProperties.

        The device model.

        :return: The model_description of this DeviceProperties.
        :rtype: str
        """
        return self._model_description

    @model_description.setter
    def model_description(self, model_description):
        """Sets the model_description of this DeviceProperties.

        The device model.

        :param model_description: The model_description of this DeviceProperties.
        :type model_description: str
        """
        if model_description is None:
            raise ValueError("Invalid value for `model_description`, must not be `None`")

        self._model_description = model_description

    @property
    def network_interface_card_count(self):
        """Gets the network_interface_card_count of this DeviceProperties.

        The number of network interface cards

        :return: The network_interface_card_count of this DeviceProperties.
        :rtype: int
        """
        return self._network_interface_card_count

    @network_interface_card_count.setter
    def network_interface_card_count(self, network_interface_card_count):
        """Sets the network_interface_card_count of this DeviceProperties.

        The number of network interface cards

        :param network_interface_card_count: The network_interface_card_count of this DeviceProperties.
        :type network_interface_card_count: int
        """

        self._network_interface_card_count = network_interface_card_count

    @property
    def provisioned_local_storage_in_bytes(self):
        """Gets the provisioned_local_storage_in_bytes of this DeviceProperties.

        The storage in bytes used for locally pinned volumes on the device (including additional local reservation).

        :return: The provisioned_local_storage_in_bytes of this DeviceProperties.
        :rtype: int
        """
        return self._provisioned_local_storage_in_bytes

    @provisioned_local_storage_in_bytes.setter
    def provisioned_local_storage_in_bytes(self, provisioned_local_storage_in_bytes):
        """Sets the provisioned_local_storage_in_bytes of this DeviceProperties.

        The storage in bytes used for locally pinned volumes on the device (including additional local reservation).

        :param provisioned_local_storage_in_bytes: The provisioned_local_storage_in_bytes of this DeviceProperties.
        :type provisioned_local_storage_in_bytes: int
        """

        self._provisioned_local_storage_in_bytes = provisioned_local_storage_in_bytes

    @property
    def provisioned_tiered_storage_in_bytes(self):
        """Gets the provisioned_tiered_storage_in_bytes of this DeviceProperties.

        The storage in bytes that has been provisioned on the device for tiered volumes.

        :return: The provisioned_tiered_storage_in_bytes of this DeviceProperties.
        :rtype: int
        """
        return self._provisioned_tiered_storage_in_bytes

    @provisioned_tiered_storage_in_bytes.setter
    def provisioned_tiered_storage_in_bytes(self, provisioned_tiered_storage_in_bytes):
        """Sets the provisioned_tiered_storage_in_bytes of this DeviceProperties.

        The storage in bytes that has been provisioned on the device for tiered volumes.

        :param provisioned_tiered_storage_in_bytes: The provisioned_tiered_storage_in_bytes of this DeviceProperties.
        :type provisioned_tiered_storage_in_bytes: int
        """

        self._provisioned_tiered_storage_in_bytes = provisioned_tiered_storage_in_bytes

    @property
    def provisioned_volume_size_in_bytes(self):
        """Gets the provisioned_volume_size_in_bytes of this DeviceProperties.

        Total capacity in bytes of tiered and locally pinned volumes on the device

        :return: The provisioned_volume_size_in_bytes of this DeviceProperties.
        :rtype: int
        """
        return self._provisioned_volume_size_in_bytes

    @provisioned_volume_size_in_bytes.setter
    def provisioned_volume_size_in_bytes(self, provisioned_volume_size_in_bytes):
        """Sets the provisioned_volume_size_in_bytes of this DeviceProperties.

        Total capacity in bytes of tiered and locally pinned volumes on the device

        :param provisioned_volume_size_in_bytes: The provisioned_volume_size_in_bytes of this DeviceProperties.
        :type provisioned_volume_size_in_bytes: int
        """

        self._provisioned_volume_size_in_bytes = provisioned_volume_size_in_bytes

    @property
    def rollover_details(self):
        """Gets the rollover_details of this DeviceProperties.


        :return: The rollover_details of this DeviceProperties.
        :rtype: DeviceRolloverDetails
        """
        return self._rollover_details

    @rollover_details.setter
    def rollover_details(self, rollover_details):
        """Sets the rollover_details of this DeviceProperties.


        :param rollover_details: The rollover_details of this DeviceProperties.
        :type rollover_details: DeviceRolloverDetails
        """

        self._rollover_details = rollover_details

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceProperties.

        The serial number.

        :return: The serial_number of this DeviceProperties.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceProperties.

        The serial number.

        :param serial_number: The serial_number of this DeviceProperties.
        :type serial_number: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")

        self._serial_number = serial_number

    @property
    def status(self):
        """Gets the status of this DeviceProperties.

        The current status of the device.

        :return: The status of this DeviceProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceProperties.

        The current status of the device.

        :param status: The status of this DeviceProperties.
        :type status: str
        """
        allowed_values = ["Unknown", "Online", "Offline", "Deactivated", "RequiresAttention", "MaintenanceMode", "Creating", "Provisioning", "Deactivating", "Deleted", "ReadyToSetup"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_iqn(self):
        """Gets the target_iqn of this DeviceProperties.

        The target IQN.

        :return: The target_iqn of this DeviceProperties.
        :rtype: str
        """
        return self._target_iqn

    @target_iqn.setter
    def target_iqn(self, target_iqn):
        """Sets the target_iqn of this DeviceProperties.

        The target IQN.

        :param target_iqn: The target_iqn of this DeviceProperties.
        :type target_iqn: str
        """
        if target_iqn is None:
            raise ValueError("Invalid value for `target_iqn`, must not be `None`")

        self._target_iqn = target_iqn

    @property
    def total_tiered_storage_in_bytes(self):
        """Gets the total_tiered_storage_in_bytes of this DeviceProperties.

        The total tiered storage available on the device in bytes.

        :return: The total_tiered_storage_in_bytes of this DeviceProperties.
        :rtype: int
        """
        return self._total_tiered_storage_in_bytes

    @total_tiered_storage_in_bytes.setter
    def total_tiered_storage_in_bytes(self, total_tiered_storage_in_bytes):
        """Sets the total_tiered_storage_in_bytes of this DeviceProperties.

        The total tiered storage available on the device in bytes.

        :param total_tiered_storage_in_bytes: The total_tiered_storage_in_bytes of this DeviceProperties.
        :type total_tiered_storage_in_bytes: int
        """

        self._total_tiered_storage_in_bytes = total_tiered_storage_in_bytes

    @property
    def using_storage_in_bytes(self):
        """Gets the using_storage_in_bytes of this DeviceProperties.

        The storage in bytes that is currently being used on the device, including both local and cloud.

        :return: The using_storage_in_bytes of this DeviceProperties.
        :rtype: int
        """
        return self._using_storage_in_bytes

    @using_storage_in_bytes.setter
    def using_storage_in_bytes(self, using_storage_in_bytes):
        """Sets the using_storage_in_bytes of this DeviceProperties.

        The storage in bytes that is currently being used on the device, including both local and cloud.

        :param using_storage_in_bytes: The using_storage_in_bytes of this DeviceProperties.
        :type using_storage_in_bytes: int
        """

        self._using_storage_in_bytes = using_storage_in_bytes

    @property
    def virtual_machine_api_type(self):
        """Gets the virtual_machine_api_type of this DeviceProperties.

        The virtual machine API type.

        :return: The virtual_machine_api_type of this DeviceProperties.
        :rtype: str
        """
        return self._virtual_machine_api_type

    @virtual_machine_api_type.setter
    def virtual_machine_api_type(self, virtual_machine_api_type):
        """Sets the virtual_machine_api_type of this DeviceProperties.

        The virtual machine API type.

        :param virtual_machine_api_type: The virtual_machine_api_type of this DeviceProperties.
        :type virtual_machine_api_type: str
        """
        allowed_values = ["Classic", "Arm"]  # noqa: E501
        if virtual_machine_api_type not in allowed_values:
            raise ValueError(
                "Invalid value for `virtual_machine_api_type` ({0}), must be one of {1}"
                .format(virtual_machine_api_type, allowed_values)
            )

        self._virtual_machine_api_type = virtual_machine_api_type
