# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HardwareComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_id: str=None, display_name: str=None, status: str=None, status_display_name: str=None):
        """HardwareComponent - a model defined in OpenAPI

        :param component_id: The component_id of this HardwareComponent.
        :param display_name: The display_name of this HardwareComponent.
        :param status: The status of this HardwareComponent.
        :param status_display_name: The status_display_name of this HardwareComponent.
        """
        self.openapi_types = {
            'component_id': str,
            'display_name': str,
            'status': str,
            'status_display_name': str
        }

        self.attribute_map = {
            'component_id': 'componentId',
            'display_name': 'displayName',
            'status': 'status',
            'status_display_name': 'statusDisplayName'
        }

        self._component_id = component_id
        self._display_name = display_name
        self._status = status
        self._status_display_name = status_display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HardwareComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HardwareComponent of this HardwareComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_id(self):
        """Gets the component_id of this HardwareComponent.

        The component ID.

        :return: The component_id of this HardwareComponent.
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this HardwareComponent.

        The component ID.

        :param component_id: The component_id of this HardwareComponent.
        :type component_id: str
        """
        if component_id is None:
            raise ValueError("Invalid value for `component_id`, must not be `None`")

        self._component_id = component_id

    @property
    def display_name(self):
        """Gets the display_name of this HardwareComponent.

        The display name of the hardware component.

        :return: The display_name of this HardwareComponent.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this HardwareComponent.

        The display name of the hardware component.

        :param display_name: The display_name of this HardwareComponent.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def status(self):
        """Gets the status of this HardwareComponent.

        The status of the hardware component.

        :return: The status of this HardwareComponent.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HardwareComponent.

        The status of the hardware component.

        :param status: The status of this HardwareComponent.
        :type status: str
        """
        allowed_values = ["Unknown", "NotPresent", "PoweredOff", "Ok", "Recovering", "Warning", "Failure"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_display_name(self):
        """Gets the status_display_name of this HardwareComponent.

        The display name of the status of hardware component.

        :return: The status_display_name of this HardwareComponent.
        :rtype: str
        """
        return self._status_display_name

    @status_display_name.setter
    def status_display_name(self, status_display_name):
        """Sets the status_display_name of this HardwareComponent.

        The display name of the status of hardware component.

        :param status_display_name: The status_display_name of this HardwareComponent.
        :type status_display_name: str
        """
        if status_display_name is None:
            raise ValueError("Invalid value for `status_display_name`, must not be `None`")

        self._status_display_name = status_display_name
