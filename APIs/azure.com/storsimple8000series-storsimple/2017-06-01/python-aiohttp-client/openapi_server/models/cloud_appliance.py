# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudAppliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_vnet_dns_configured: bool=None, is_vnet_express_configured: bool=None, model_number: str=None, name: str=None, storage_account_name: str=None, storage_account_type: str=None, subnet_name: str=None, vm_image_name: str=None, vm_type: str=None, vnet_name: str=None, vnet_region: str=None):
        """CloudAppliance - a model defined in OpenAPI

        :param is_vnet_dns_configured: The is_vnet_dns_configured of this CloudAppliance.
        :param is_vnet_express_configured: The is_vnet_express_configured of this CloudAppliance.
        :param model_number: The model_number of this CloudAppliance.
        :param name: The name of this CloudAppliance.
        :param storage_account_name: The storage_account_name of this CloudAppliance.
        :param storage_account_type: The storage_account_type of this CloudAppliance.
        :param subnet_name: The subnet_name of this CloudAppliance.
        :param vm_image_name: The vm_image_name of this CloudAppliance.
        :param vm_type: The vm_type of this CloudAppliance.
        :param vnet_name: The vnet_name of this CloudAppliance.
        :param vnet_region: The vnet_region of this CloudAppliance.
        """
        self.openapi_types = {
            'is_vnet_dns_configured': bool,
            'is_vnet_express_configured': bool,
            'model_number': str,
            'name': str,
            'storage_account_name': str,
            'storage_account_type': str,
            'subnet_name': str,
            'vm_image_name': str,
            'vm_type': str,
            'vnet_name': str,
            'vnet_region': str
        }

        self.attribute_map = {
            'is_vnet_dns_configured': 'isVnetDnsConfigured',
            'is_vnet_express_configured': 'isVnetExpressConfigured',
            'model_number': 'modelNumber',
            'name': 'name',
            'storage_account_name': 'storageAccountName',
            'storage_account_type': 'storageAccountType',
            'subnet_name': 'subnetName',
            'vm_image_name': 'vmImageName',
            'vm_type': 'vmType',
            'vnet_name': 'vnetName',
            'vnet_region': 'vnetRegion'
        }

        self._is_vnet_dns_configured = is_vnet_dns_configured
        self._is_vnet_express_configured = is_vnet_express_configured
        self._model_number = model_number
        self._name = name
        self._storage_account_name = storage_account_name
        self._storage_account_type = storage_account_type
        self._subnet_name = subnet_name
        self._vm_image_name = vm_image_name
        self._vm_type = vm_type
        self._vnet_name = vnet_name
        self._vnet_region = vnet_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudAppliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudAppliance of this CloudAppliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_vnet_dns_configured(self):
        """Gets the is_vnet_dns_configured of this CloudAppliance.

        Indicates whether virtual network used is configured with DNS or not.

        :return: The is_vnet_dns_configured of this CloudAppliance.
        :rtype: bool
        """
        return self._is_vnet_dns_configured

    @is_vnet_dns_configured.setter
    def is_vnet_dns_configured(self, is_vnet_dns_configured):
        """Sets the is_vnet_dns_configured of this CloudAppliance.

        Indicates whether virtual network used is configured with DNS or not.

        :param is_vnet_dns_configured: The is_vnet_dns_configured of this CloudAppliance.
        :type is_vnet_dns_configured: bool
        """

        self._is_vnet_dns_configured = is_vnet_dns_configured

    @property
    def is_vnet_express_configured(self):
        """Gets the is_vnet_express_configured of this CloudAppliance.

        Indicates whether virtual network used is configured with express route or not.

        :return: The is_vnet_express_configured of this CloudAppliance.
        :rtype: bool
        """
        return self._is_vnet_express_configured

    @is_vnet_express_configured.setter
    def is_vnet_express_configured(self, is_vnet_express_configured):
        """Sets the is_vnet_express_configured of this CloudAppliance.

        Indicates whether virtual network used is configured with express route or not.

        :param is_vnet_express_configured: The is_vnet_express_configured of this CloudAppliance.
        :type is_vnet_express_configured: bool
        """

        self._is_vnet_express_configured = is_vnet_express_configured

    @property
    def model_number(self):
        """Gets the model_number of this CloudAppliance.

        The model number.

        :return: The model_number of this CloudAppliance.
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this CloudAppliance.

        The model number.

        :param model_number: The model_number of this CloudAppliance.
        :type model_number: str
        """

        self._model_number = model_number

    @property
    def name(self):
        """Gets the name of this CloudAppliance.

        The name.

        :return: The name of this CloudAppliance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudAppliance.

        The name.

        :param name: The name of this CloudAppliance.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this CloudAppliance.

        The name of the storage account.

        :return: The storage_account_name of this CloudAppliance.
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this CloudAppliance.

        The name of the storage account.

        :param storage_account_name: The storage_account_name of this CloudAppliance.
        :type storage_account_name: str
        """

        self._storage_account_name = storage_account_name

    @property
    def storage_account_type(self):
        """Gets the storage_account_type of this CloudAppliance.

        The type of the storage account.

        :return: The storage_account_type of this CloudAppliance.
        :rtype: str
        """
        return self._storage_account_type

    @storage_account_type.setter
    def storage_account_type(self, storage_account_type):
        """Sets the storage_account_type of this CloudAppliance.

        The type of the storage account.

        :param storage_account_type: The storage_account_type of this CloudAppliance.
        :type storage_account_type: str
        """

        self._storage_account_type = storage_account_type

    @property
    def subnet_name(self):
        """Gets the subnet_name of this CloudAppliance.

        The name of the subnet.

        :return: The subnet_name of this CloudAppliance.
        :rtype: str
        """
        return self._subnet_name

    @subnet_name.setter
    def subnet_name(self, subnet_name):
        """Sets the subnet_name of this CloudAppliance.

        The name of the subnet.

        :param subnet_name: The subnet_name of this CloudAppliance.
        :type subnet_name: str
        """

        self._subnet_name = subnet_name

    @property
    def vm_image_name(self):
        """Gets the vm_image_name of this CloudAppliance.

        The name of the virtual machine image.

        :return: The vm_image_name of this CloudAppliance.
        :rtype: str
        """
        return self._vm_image_name

    @vm_image_name.setter
    def vm_image_name(self, vm_image_name):
        """Sets the vm_image_name of this CloudAppliance.

        The name of the virtual machine image.

        :param vm_image_name: The vm_image_name of this CloudAppliance.
        :type vm_image_name: str
        """

        self._vm_image_name = vm_image_name

    @property
    def vm_type(self):
        """Gets the vm_type of this CloudAppliance.

        The type of the virtual machine.

        :return: The vm_type of this CloudAppliance.
        :rtype: str
        """
        return self._vm_type

    @vm_type.setter
    def vm_type(self, vm_type):
        """Sets the vm_type of this CloudAppliance.

        The type of the virtual machine.

        :param vm_type: The vm_type of this CloudAppliance.
        :type vm_type: str
        """

        self._vm_type = vm_type

    @property
    def vnet_name(self):
        """Gets the vnet_name of this CloudAppliance.

        The name of the virtual network.

        :return: The vnet_name of this CloudAppliance.
        :rtype: str
        """
        return self._vnet_name

    @vnet_name.setter
    def vnet_name(self, vnet_name):
        """Sets the vnet_name of this CloudAppliance.

        The name of the virtual network.

        :param vnet_name: The vnet_name of this CloudAppliance.
        :type vnet_name: str
        """

        self._vnet_name = vnet_name

    @property
    def vnet_region(self):
        """Gets the vnet_region of this CloudAppliance.

        The virtual network region.

        :return: The vnet_region of this CloudAppliance.
        :rtype: str
        """
        return self._vnet_region

    @vnet_region.setter
    def vnet_region(self, vnet_region):
        """Sets the vnet_region of this CloudAppliance.

        The virtual network region.

        :param vnet_region: The vnet_region of this CloudAppliance.
        :type vnet_region: str
        """
        if vnet_region is None:
            raise ValueError("Invalid value for `vnet_region`, must not be `None`")

        self._vnet_region = vnet_region
