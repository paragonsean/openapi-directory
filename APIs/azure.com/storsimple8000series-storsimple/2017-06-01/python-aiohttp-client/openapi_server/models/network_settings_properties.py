# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_settings import DNSSettings
from openapi_server.models.network_adapter_list import NetworkAdapterList
from openapi_server.models.webproxy_settings import WebproxySettings
from openapi_server import util


class NetworkSettingsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_settings: DNSSettings=None, network_adapters: NetworkAdapterList=None, webproxy_settings: WebproxySettings=None):
        """NetworkSettingsProperties - a model defined in OpenAPI

        :param dns_settings: The dns_settings of this NetworkSettingsProperties.
        :param network_adapters: The network_adapters of this NetworkSettingsProperties.
        :param webproxy_settings: The webproxy_settings of this NetworkSettingsProperties.
        """
        self.openapi_types = {
            'dns_settings': DNSSettings,
            'network_adapters': NetworkAdapterList,
            'webproxy_settings': WebproxySettings
        }

        self.attribute_map = {
            'dns_settings': 'dnsSettings',
            'network_adapters': 'networkAdapters',
            'webproxy_settings': 'webproxySettings'
        }

        self._dns_settings = dns_settings
        self._network_adapters = network_adapters
        self._webproxy_settings = webproxy_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkSettingsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkSettingsProperties of this NetworkSettingsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_settings(self):
        """Gets the dns_settings of this NetworkSettingsProperties.


        :return: The dns_settings of this NetworkSettingsProperties.
        :rtype: DNSSettings
        """
        return self._dns_settings

    @dns_settings.setter
    def dns_settings(self, dns_settings):
        """Sets the dns_settings of this NetworkSettingsProperties.


        :param dns_settings: The dns_settings of this NetworkSettingsProperties.
        :type dns_settings: DNSSettings
        """
        if dns_settings is None:
            raise ValueError("Invalid value for `dns_settings`, must not be `None`")

        self._dns_settings = dns_settings

    @property
    def network_adapters(self):
        """Gets the network_adapters of this NetworkSettingsProperties.


        :return: The network_adapters of this NetworkSettingsProperties.
        :rtype: NetworkAdapterList
        """
        return self._network_adapters

    @network_adapters.setter
    def network_adapters(self, network_adapters):
        """Sets the network_adapters of this NetworkSettingsProperties.


        :param network_adapters: The network_adapters of this NetworkSettingsProperties.
        :type network_adapters: NetworkAdapterList
        """
        if network_adapters is None:
            raise ValueError("Invalid value for `network_adapters`, must not be `None`")

        self._network_adapters = network_adapters

    @property
    def webproxy_settings(self):
        """Gets the webproxy_settings of this NetworkSettingsProperties.


        :return: The webproxy_settings of this NetworkSettingsProperties.
        :rtype: WebproxySettings
        """
        return self._webproxy_settings

    @webproxy_settings.setter
    def webproxy_settings(self, webproxy_settings):
        """Sets the webproxy_settings of this NetworkSettingsProperties.


        :param webproxy_settings: The webproxy_settings of this NetworkSettingsProperties.
        :type webproxy_settings: WebproxySettings
        """
        if webproxy_settings is None:
            raise ValueError("Invalid value for `webproxy_settings`, must not be `None`")

        self._webproxy_settings = webproxy_settings
