# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_statistics import DataStatistics
from openapi_server.models.job_stage import JobStage
from openapi_server import util


class JobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_point_in_time: datetime=None, backup_type: str=None, data_stats: DataStatistics=None, device_id: str=None, entity_label: str=None, entity_type: str=None, is_cancellable: bool=None, job_stages: List[JobStage]=None, job_type: str=None, source_device_id: str=None):
        """JobProperties - a model defined in OpenAPI

        :param backup_point_in_time: The backup_point_in_time of this JobProperties.
        :param backup_type: The backup_type of this JobProperties.
        :param data_stats: The data_stats of this JobProperties.
        :param device_id: The device_id of this JobProperties.
        :param entity_label: The entity_label of this JobProperties.
        :param entity_type: The entity_type of this JobProperties.
        :param is_cancellable: The is_cancellable of this JobProperties.
        :param job_stages: The job_stages of this JobProperties.
        :param job_type: The job_type of this JobProperties.
        :param source_device_id: The source_device_id of this JobProperties.
        """
        self.openapi_types = {
            'backup_point_in_time': datetime,
            'backup_type': str,
            'data_stats': DataStatistics,
            'device_id': str,
            'entity_label': str,
            'entity_type': str,
            'is_cancellable': bool,
            'job_stages': List[JobStage],
            'job_type': str,
            'source_device_id': str
        }

        self.attribute_map = {
            'backup_point_in_time': 'backupPointInTime',
            'backup_type': 'backupType',
            'data_stats': 'dataStats',
            'device_id': 'deviceId',
            'entity_label': 'entityLabel',
            'entity_type': 'entityType',
            'is_cancellable': 'isCancellable',
            'job_stages': 'jobStages',
            'job_type': 'jobType',
            'source_device_id': 'sourceDeviceId'
        }

        self._backup_point_in_time = backup_point_in_time
        self._backup_type = backup_type
        self._data_stats = data_stats
        self._device_id = device_id
        self._entity_label = entity_label
        self._entity_type = entity_type
        self._is_cancellable = is_cancellable
        self._job_stages = job_stages
        self._job_type = job_type
        self._source_device_id = source_device_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobProperties of this JobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_point_in_time(self):
        """Gets the backup_point_in_time of this JobProperties.

        The time of the backup used for the failover.

        :return: The backup_point_in_time of this JobProperties.
        :rtype: datetime
        """
        return self._backup_point_in_time

    @backup_point_in_time.setter
    def backup_point_in_time(self, backup_point_in_time):
        """Sets the backup_point_in_time of this JobProperties.

        The time of the backup used for the failover.

        :param backup_point_in_time: The backup_point_in_time of this JobProperties.
        :type backup_point_in_time: datetime
        """

        self._backup_point_in_time = backup_point_in_time

    @property
    def backup_type(self):
        """Gets the backup_type of this JobProperties.

        The backup type (CloudSnapshot | LocalSnapshot). Applicable only for backup jobs.

        :return: The backup_type of this JobProperties.
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this JobProperties.

        The backup type (CloudSnapshot | LocalSnapshot). Applicable only for backup jobs.

        :param backup_type: The backup_type of this JobProperties.
        :type backup_type: str
        """
        allowed_values = ["LocalSnapshot", "CloudSnapshot"]  # noqa: E501
        if backup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_type` ({0}), must be one of {1}"
                .format(backup_type, allowed_values)
            )

        self._backup_type = backup_type

    @property
    def data_stats(self):
        """Gets the data_stats of this JobProperties.


        :return: The data_stats of this JobProperties.
        :rtype: DataStatistics
        """
        return self._data_stats

    @data_stats.setter
    def data_stats(self, data_stats):
        """Sets the data_stats of this JobProperties.


        :param data_stats: The data_stats of this JobProperties.
        :type data_stats: DataStatistics
        """

        self._data_stats = data_stats

    @property
    def device_id(self):
        """Gets the device_id of this JobProperties.

        The device ID in which the job ran.

        :return: The device_id of this JobProperties.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this JobProperties.

        The device ID in which the job ran.

        :param device_id: The device_id of this JobProperties.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def entity_label(self):
        """Gets the entity_label of this JobProperties.

        The entity identifier for which the job ran.

        :return: The entity_label of this JobProperties.
        :rtype: str
        """
        return self._entity_label

    @entity_label.setter
    def entity_label(self, entity_label):
        """Sets the entity_label of this JobProperties.

        The entity identifier for which the job ran.

        :param entity_label: The entity_label of this JobProperties.
        :type entity_label: str
        """

        self._entity_label = entity_label

    @property
    def entity_type(self):
        """Gets the entity_type of this JobProperties.

        The entity type for which the job ran.

        :return: The entity_type of this JobProperties.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this JobProperties.

        The entity type for which the job ran.

        :param entity_type: The entity_type of this JobProperties.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def is_cancellable(self):
        """Gets the is_cancellable of this JobProperties.

        Represents whether the job is cancellable or not.

        :return: The is_cancellable of this JobProperties.
        :rtype: bool
        """
        return self._is_cancellable

    @is_cancellable.setter
    def is_cancellable(self, is_cancellable):
        """Sets the is_cancellable of this JobProperties.

        Represents whether the job is cancellable or not.

        :param is_cancellable: The is_cancellable of this JobProperties.
        :type is_cancellable: bool
        """

        self._is_cancellable = is_cancellable

    @property
    def job_stages(self):
        """Gets the job_stages of this JobProperties.

        The job stages.

        :return: The job_stages of this JobProperties.
        :rtype: List[JobStage]
        """
        return self._job_stages

    @job_stages.setter
    def job_stages(self, job_stages):
        """Sets the job_stages of this JobProperties.

        The job stages.

        :param job_stages: The job_stages of this JobProperties.
        :type job_stages: List[JobStage]
        """

        self._job_stages = job_stages

    @property
    def job_type(self):
        """Gets the job_type of this JobProperties.

        The type of the job.

        :return: The job_type of this JobProperties.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobProperties.

        The type of the job.

        :param job_type: The job_type of this JobProperties.
        :type job_type: str
        """
        allowed_values = ["ScheduledBackup", "ManualBackup", "RestoreBackup", "CloneVolume", "FailoverVolumeContainers", "CreateLocallyPinnedVolume", "ModifyVolume", "InstallUpdates", "SupportPackageLogs", "CreateCloudAppliance"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def source_device_id(self):
        """Gets the source_device_id of this JobProperties.

        The source device ID of the failover job.

        :return: The source_device_id of this JobProperties.
        :rtype: str
        """
        return self._source_device_id

    @source_device_id.setter
    def source_device_id(self, source_device_id):
        """Sets the source_device_id of this JobProperties.

        The source device ID of the failover job.

        :param source_device_id: The source_device_id of this JobProperties.
        :type source_device_id: str
        """

        self._source_device_id = source_device_id
