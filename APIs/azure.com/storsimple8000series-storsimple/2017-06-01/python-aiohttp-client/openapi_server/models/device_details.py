# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_count: int=None, volume_container_count: int=None):
        """DeviceDetails - a model defined in OpenAPI

        :param endpoint_count: The endpoint_count of this DeviceDetails.
        :param volume_container_count: The volume_container_count of this DeviceDetails.
        """
        self.openapi_types = {
            'endpoint_count': int,
            'volume_container_count': int
        }

        self.attribute_map = {
            'endpoint_count': 'endpointCount',
            'volume_container_count': 'volumeContainerCount'
        }

        self._endpoint_count = endpoint_count
        self._volume_container_count = volume_container_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceDetails of this DeviceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_count(self):
        """Gets the endpoint_count of this DeviceDetails.

        The total number of endpoints that are currently on the device ( i.e. number of volumes).

        :return: The endpoint_count of this DeviceDetails.
        :rtype: int
        """
        return self._endpoint_count

    @endpoint_count.setter
    def endpoint_count(self, endpoint_count):
        """Sets the endpoint_count of this DeviceDetails.

        The total number of endpoints that are currently on the device ( i.e. number of volumes).

        :param endpoint_count: The endpoint_count of this DeviceDetails.
        :type endpoint_count: int
        """

        self._endpoint_count = endpoint_count

    @property
    def volume_container_count(self):
        """Gets the volume_container_count of this DeviceDetails.

        The total number of volume containers on the device.

        :return: The volume_container_count of this DeviceDetails.
        :rtype: int
        """
        return self._volume_container_count

    @volume_container_count.setter
    def volume_container_count(self, volume_container_count):
        """Sets the volume_container_count of this DeviceDetails.

        The total number of volume containers on the device.

        :param volume_container_count: The volume_container_count of this DeviceDetails.
        :type volume_container_count: int
        """

        self._volume_container_count = volume_container_count
