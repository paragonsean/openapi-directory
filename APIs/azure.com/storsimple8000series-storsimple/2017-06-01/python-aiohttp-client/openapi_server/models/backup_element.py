# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, element_id: str=None, element_name: str=None, element_type: str=None, size_in_bytes: int=None, volume_container_id: str=None, volume_name: str=None, volume_type: str=None):
        """BackupElement - a model defined in OpenAPI

        :param element_id: The element_id of this BackupElement.
        :param element_name: The element_name of this BackupElement.
        :param element_type: The element_type of this BackupElement.
        :param size_in_bytes: The size_in_bytes of this BackupElement.
        :param volume_container_id: The volume_container_id of this BackupElement.
        :param volume_name: The volume_name of this BackupElement.
        :param volume_type: The volume_type of this BackupElement.
        """
        self.openapi_types = {
            'element_id': str,
            'element_name': str,
            'element_type': str,
            'size_in_bytes': int,
            'volume_container_id': str,
            'volume_name': str,
            'volume_type': str
        }

        self.attribute_map = {
            'element_id': 'elementId',
            'element_name': 'elementName',
            'element_type': 'elementType',
            'size_in_bytes': 'sizeInBytes',
            'volume_container_id': 'volumeContainerId',
            'volume_name': 'volumeName',
            'volume_type': 'volumeType'
        }

        self._element_id = element_id
        self._element_name = element_name
        self._element_type = element_type
        self._size_in_bytes = size_in_bytes
        self._volume_container_id = volume_container_id
        self._volume_name = volume_name
        self._volume_type = volume_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupElement of this BackupElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def element_id(self):
        """Gets the element_id of this BackupElement.

        The path ID that uniquely identifies the backup element.

        :return: The element_id of this BackupElement.
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this BackupElement.

        The path ID that uniquely identifies the backup element.

        :param element_id: The element_id of this BackupElement.
        :type element_id: str
        """
        if element_id is None:
            raise ValueError("Invalid value for `element_id`, must not be `None`")

        self._element_id = element_id

    @property
    def element_name(self):
        """Gets the element_name of this BackupElement.

        The name of the backup element.

        :return: The element_name of this BackupElement.
        :rtype: str
        """
        return self._element_name

    @element_name.setter
    def element_name(self, element_name):
        """Sets the element_name of this BackupElement.

        The name of the backup element.

        :param element_name: The element_name of this BackupElement.
        :type element_name: str
        """
        if element_name is None:
            raise ValueError("Invalid value for `element_name`, must not be `None`")

        self._element_name = element_name

    @property
    def element_type(self):
        """Gets the element_type of this BackupElement.

        The hierarchical type of the backup element.

        :return: The element_type of this BackupElement.
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this BackupElement.

        The hierarchical type of the backup element.

        :param element_type: The element_type of this BackupElement.
        :type element_type: str
        """
        if element_type is None:
            raise ValueError("Invalid value for `element_type`, must not be `None`")

        self._element_type = element_type

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this BackupElement.

        The size in bytes.

        :return: The size_in_bytes of this BackupElement.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this BackupElement.

        The size in bytes.

        :param size_in_bytes: The size_in_bytes of this BackupElement.
        :type size_in_bytes: int
        """
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")

        self._size_in_bytes = size_in_bytes

    @property
    def volume_container_id(self):
        """Gets the volume_container_id of this BackupElement.

        The path ID of the volume container.

        :return: The volume_container_id of this BackupElement.
        :rtype: str
        """
        return self._volume_container_id

    @volume_container_id.setter
    def volume_container_id(self, volume_container_id):
        """Sets the volume_container_id of this BackupElement.

        The path ID of the volume container.

        :param volume_container_id: The volume_container_id of this BackupElement.
        :type volume_container_id: str
        """
        if volume_container_id is None:
            raise ValueError("Invalid value for `volume_container_id`, must not be `None`")

        self._volume_container_id = volume_container_id

    @property
    def volume_name(self):
        """Gets the volume_name of this BackupElement.

        The name of the volume.

        :return: The volume_name of this BackupElement.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this BackupElement.

        The name of the volume.

        :param volume_name: The volume_name of this BackupElement.
        :type volume_name: str
        """
        if volume_name is None:
            raise ValueError("Invalid value for `volume_name`, must not be `None`")

        self._volume_name = volume_name

    @property
    def volume_type(self):
        """Gets the volume_type of this BackupElement.

        The volume type.

        :return: The volume_type of this BackupElement.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this BackupElement.

        The volume type.

        :param volume_type: The volume_type of this BackupElement.
        :type volume_type: str
        """
        allowed_values = ["Tiered", "Archival", "LocallyPinned"]  # noqa: E501
        if volume_type not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_type` ({0}), must be one of {1}"
                .format(volume_type, allowed_values)
            )

        self._volume_type = volume_type
