# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_element import BackupElement
from openapi_server import util


class BackupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_job_creation_type: str=None, backup_policy_id: str=None, backup_type: str=None, created_on: datetime=None, elements: List[BackupElement]=None, size_in_bytes: int=None, ssm_host_name: str=None):
        """BackupProperties - a model defined in OpenAPI

        :param backup_job_creation_type: The backup_job_creation_type of this BackupProperties.
        :param backup_policy_id: The backup_policy_id of this BackupProperties.
        :param backup_type: The backup_type of this BackupProperties.
        :param created_on: The created_on of this BackupProperties.
        :param elements: The elements of this BackupProperties.
        :param size_in_bytes: The size_in_bytes of this BackupProperties.
        :param ssm_host_name: The ssm_host_name of this BackupProperties.
        """
        self.openapi_types = {
            'backup_job_creation_type': str,
            'backup_policy_id': str,
            'backup_type': str,
            'created_on': datetime,
            'elements': List[BackupElement],
            'size_in_bytes': int,
            'ssm_host_name': str
        }

        self.attribute_map = {
            'backup_job_creation_type': 'backupJobCreationType',
            'backup_policy_id': 'backupPolicyId',
            'backup_type': 'backupType',
            'created_on': 'createdOn',
            'elements': 'elements',
            'size_in_bytes': 'sizeInBytes',
            'ssm_host_name': 'ssmHostName'
        }

        self._backup_job_creation_type = backup_job_creation_type
        self._backup_policy_id = backup_policy_id
        self._backup_type = backup_type
        self._created_on = created_on
        self._elements = elements
        self._size_in_bytes = size_in_bytes
        self._ssm_host_name = ssm_host_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupProperties of this BackupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_job_creation_type(self):
        """Gets the backup_job_creation_type of this BackupProperties.

        The backup job creation type.

        :return: The backup_job_creation_type of this BackupProperties.
        :rtype: str
        """
        return self._backup_job_creation_type

    @backup_job_creation_type.setter
    def backup_job_creation_type(self, backup_job_creation_type):
        """Sets the backup_job_creation_type of this BackupProperties.

        The backup job creation type.

        :param backup_job_creation_type: The backup_job_creation_type of this BackupProperties.
        :type backup_job_creation_type: str
        """
        allowed_values = ["Adhoc", "BySchedule", "BySSM"]  # noqa: E501
        if backup_job_creation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_job_creation_type` ({0}), must be one of {1}"
                .format(backup_job_creation_type, allowed_values)
            )

        self._backup_job_creation_type = backup_job_creation_type

    @property
    def backup_policy_id(self):
        """Gets the backup_policy_id of this BackupProperties.

        The path ID of the backup policy.

        :return: The backup_policy_id of this BackupProperties.
        :rtype: str
        """
        return self._backup_policy_id

    @backup_policy_id.setter
    def backup_policy_id(self, backup_policy_id):
        """Sets the backup_policy_id of this BackupProperties.

        The path ID of the backup policy.

        :param backup_policy_id: The backup_policy_id of this BackupProperties.
        :type backup_policy_id: str
        """

        self._backup_policy_id = backup_policy_id

    @property
    def backup_type(self):
        """Gets the backup_type of this BackupProperties.

        The type of the backup.

        :return: The backup_type of this BackupProperties.
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this BackupProperties.

        The type of the backup.

        :param backup_type: The backup_type of this BackupProperties.
        :type backup_type: str
        """
        allowed_values = ["LocalSnapshot", "CloudSnapshot"]  # noqa: E501
        if backup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_type` ({0}), must be one of {1}"
                .format(backup_type, allowed_values)
            )

        self._backup_type = backup_type

    @property
    def created_on(self):
        """Gets the created_on of this BackupProperties.

        The time when the backup was created.

        :return: The created_on of this BackupProperties.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this BackupProperties.

        The time when the backup was created.

        :param created_on: The created_on of this BackupProperties.
        :type created_on: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")

        self._created_on = created_on

    @property
    def elements(self):
        """Gets the elements of this BackupProperties.

        The backup elements.

        :return: The elements of this BackupProperties.
        :rtype: List[BackupElement]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this BackupProperties.

        The backup elements.

        :param elements: The elements of this BackupProperties.
        :type elements: List[BackupElement]
        """
        if elements is None:
            raise ValueError("Invalid value for `elements`, must not be `None`")

        self._elements = elements

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this BackupProperties.

        The backup size in bytes.

        :return: The size_in_bytes of this BackupProperties.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this BackupProperties.

        The backup size in bytes.

        :param size_in_bytes: The size_in_bytes of this BackupProperties.
        :type size_in_bytes: int
        """
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")

        self._size_in_bytes = size_in_bytes

    @property
    def ssm_host_name(self):
        """Gets the ssm_host_name of this BackupProperties.

        The StorSimple Snapshot Manager host name.

        :return: The ssm_host_name of this BackupProperties.
        :rtype: str
        """
        return self._ssm_host_name

    @ssm_host_name.setter
    def ssm_host_name(self, ssm_host_name):
        """Sets the ssm_host_name of this BackupProperties.

        The StorSimple Snapshot Manager host name.

        :param ssm_host_name: The ssm_host_name of this BackupProperties.
        :type ssm_host_name: str
        """

        self._ssm_host_name = ssm_host_name
