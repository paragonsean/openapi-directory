# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_element import BackupElement
from openapi_server import util


class CloneRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_element: BackupElement=None, target_access_control_record_ids: List[str]=None, target_device_id: str=None, target_volume_name: str=None):
        """CloneRequest - a model defined in OpenAPI

        :param backup_element: The backup_element of this CloneRequest.
        :param target_access_control_record_ids: The target_access_control_record_ids of this CloneRequest.
        :param target_device_id: The target_device_id of this CloneRequest.
        :param target_volume_name: The target_volume_name of this CloneRequest.
        """
        self.openapi_types = {
            'backup_element': BackupElement,
            'target_access_control_record_ids': List[str],
            'target_device_id': str,
            'target_volume_name': str
        }

        self.attribute_map = {
            'backup_element': 'backupElement',
            'target_access_control_record_ids': 'targetAccessControlRecordIds',
            'target_device_id': 'targetDeviceId',
            'target_volume_name': 'targetVolumeName'
        }

        self._backup_element = backup_element
        self._target_access_control_record_ids = target_access_control_record_ids
        self._target_device_id = target_device_id
        self._target_volume_name = target_volume_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloneRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloneRequest of this CloneRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_element(self):
        """Gets the backup_element of this CloneRequest.


        :return: The backup_element of this CloneRequest.
        :rtype: BackupElement
        """
        return self._backup_element

    @backup_element.setter
    def backup_element(self, backup_element):
        """Sets the backup_element of this CloneRequest.


        :param backup_element: The backup_element of this CloneRequest.
        :type backup_element: BackupElement
        """
        if backup_element is None:
            raise ValueError("Invalid value for `backup_element`, must not be `None`")

        self._backup_element = backup_element

    @property
    def target_access_control_record_ids(self):
        """Gets the target_access_control_record_ids of this CloneRequest.

        The list of path IDs of the access control records to be associated to the new cloned volume.

        :return: The target_access_control_record_ids of this CloneRequest.
        :rtype: List[str]
        """
        return self._target_access_control_record_ids

    @target_access_control_record_ids.setter
    def target_access_control_record_ids(self, target_access_control_record_ids):
        """Sets the target_access_control_record_ids of this CloneRequest.

        The list of path IDs of the access control records to be associated to the new cloned volume.

        :param target_access_control_record_ids: The target_access_control_record_ids of this CloneRequest.
        :type target_access_control_record_ids: List[str]
        """
        if target_access_control_record_ids is None:
            raise ValueError("Invalid value for `target_access_control_record_ids`, must not be `None`")

        self._target_access_control_record_ids = target_access_control_record_ids

    @property
    def target_device_id(self):
        """Gets the target_device_id of this CloneRequest.

        The path ID of the device which will act as the clone target.

        :return: The target_device_id of this CloneRequest.
        :rtype: str
        """
        return self._target_device_id

    @target_device_id.setter
    def target_device_id(self, target_device_id):
        """Sets the target_device_id of this CloneRequest.

        The path ID of the device which will act as the clone target.

        :param target_device_id: The target_device_id of this CloneRequest.
        :type target_device_id: str
        """
        if target_device_id is None:
            raise ValueError("Invalid value for `target_device_id`, must not be `None`")

        self._target_device_id = target_device_id

    @property
    def target_volume_name(self):
        """Gets the target_volume_name of this CloneRequest.

        The name of the new volume which will be created and the backup will be cloned into.

        :return: The target_volume_name of this CloneRequest.
        :rtype: str
        """
        return self._target_volume_name

    @target_volume_name.setter
    def target_volume_name(self, target_volume_name):
        """Sets the target_volume_name of this CloneRequest.

        The name of the new volume which will be created and the backup will be cloned into.

        :param target_volume_name: The target_volume_name of this CloneRequest.
        :type target_volume_name: str
        """
        if target_volume_name is None:
            raise ValueError("Invalid value for `target_volume_name`, must not be `None`")

        self._target_volume_name = target_volume_name
