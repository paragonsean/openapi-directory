# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClearAlertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts: List[str]=None, resolution_message: str=None):
        """ClearAlertRequest - a model defined in OpenAPI

        :param alerts: The alerts of this ClearAlertRequest.
        :param resolution_message: The resolution_message of this ClearAlertRequest.
        """
        self.openapi_types = {
            'alerts': List[str],
            'resolution_message': str
        }

        self.attribute_map = {
            'alerts': 'alerts',
            'resolution_message': 'resolutionMessage'
        }

        self._alerts = alerts
        self._resolution_message = resolution_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClearAlertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClearAlertRequest of this ClearAlertRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts(self):
        """Gets the alerts of this ClearAlertRequest.

        The list of alert IDs to be cleared

        :return: The alerts of this ClearAlertRequest.
        :rtype: List[str]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this ClearAlertRequest.

        The list of alert IDs to be cleared

        :param alerts: The alerts of this ClearAlertRequest.
        :type alerts: List[str]
        """
        if alerts is None:
            raise ValueError("Invalid value for `alerts`, must not be `None`")

        self._alerts = alerts

    @property
    def resolution_message(self):
        """Gets the resolution_message of this ClearAlertRequest.

        The resolution message while clearing the alert

        :return: The resolution_message of this ClearAlertRequest.
        :rtype: str
        """
        return self._resolution_message

    @resolution_message.setter
    def resolution_message(self, resolution_message):
        """Sets the resolution_message of this ClearAlertRequest.

        The resolution message while clearing the alert

        :param resolution_message: The resolution_message of this ClearAlertRequest.
        :type resolution_message: str
        """

        self._resolution_message = resolution_message
