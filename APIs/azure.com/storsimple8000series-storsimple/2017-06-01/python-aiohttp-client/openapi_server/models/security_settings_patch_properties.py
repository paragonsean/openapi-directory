# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asymmetric_encrypted_secret import AsymmetricEncryptedSecret
from openapi_server.models.chap_settings import ChapSettings
from openapi_server.models.cloud_appliance_settings import CloudApplianceSettings
from openapi_server.models.remote_management_settings_patch import RemoteManagementSettingsPatch
from openapi_server import util


class SecuritySettingsPatchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chap_settings: ChapSettings=None, cloud_appliance_settings: CloudApplianceSettings=None, device_admin_password: AsymmetricEncryptedSecret=None, remote_management_settings: RemoteManagementSettingsPatch=None, snapshot_password: AsymmetricEncryptedSecret=None):
        """SecuritySettingsPatchProperties - a model defined in OpenAPI

        :param chap_settings: The chap_settings of this SecuritySettingsPatchProperties.
        :param cloud_appliance_settings: The cloud_appliance_settings of this SecuritySettingsPatchProperties.
        :param device_admin_password: The device_admin_password of this SecuritySettingsPatchProperties.
        :param remote_management_settings: The remote_management_settings of this SecuritySettingsPatchProperties.
        :param snapshot_password: The snapshot_password of this SecuritySettingsPatchProperties.
        """
        self.openapi_types = {
            'chap_settings': ChapSettings,
            'cloud_appliance_settings': CloudApplianceSettings,
            'device_admin_password': AsymmetricEncryptedSecret,
            'remote_management_settings': RemoteManagementSettingsPatch,
            'snapshot_password': AsymmetricEncryptedSecret
        }

        self.attribute_map = {
            'chap_settings': 'chapSettings',
            'cloud_appliance_settings': 'cloudApplianceSettings',
            'device_admin_password': 'deviceAdminPassword',
            'remote_management_settings': 'remoteManagementSettings',
            'snapshot_password': 'snapshotPassword'
        }

        self._chap_settings = chap_settings
        self._cloud_appliance_settings = cloud_appliance_settings
        self._device_admin_password = device_admin_password
        self._remote_management_settings = remote_management_settings
        self._snapshot_password = snapshot_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecuritySettingsPatchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecuritySettingsPatchProperties of this SecuritySettingsPatchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chap_settings(self):
        """Gets the chap_settings of this SecuritySettingsPatchProperties.


        :return: The chap_settings of this SecuritySettingsPatchProperties.
        :rtype: ChapSettings
        """
        return self._chap_settings

    @chap_settings.setter
    def chap_settings(self, chap_settings):
        """Sets the chap_settings of this SecuritySettingsPatchProperties.


        :param chap_settings: The chap_settings of this SecuritySettingsPatchProperties.
        :type chap_settings: ChapSettings
        """

        self._chap_settings = chap_settings

    @property
    def cloud_appliance_settings(self):
        """Gets the cloud_appliance_settings of this SecuritySettingsPatchProperties.


        :return: The cloud_appliance_settings of this SecuritySettingsPatchProperties.
        :rtype: CloudApplianceSettings
        """
        return self._cloud_appliance_settings

    @cloud_appliance_settings.setter
    def cloud_appliance_settings(self, cloud_appliance_settings):
        """Sets the cloud_appliance_settings of this SecuritySettingsPatchProperties.


        :param cloud_appliance_settings: The cloud_appliance_settings of this SecuritySettingsPatchProperties.
        :type cloud_appliance_settings: CloudApplianceSettings
        """

        self._cloud_appliance_settings = cloud_appliance_settings

    @property
    def device_admin_password(self):
        """Gets the device_admin_password of this SecuritySettingsPatchProperties.


        :return: The device_admin_password of this SecuritySettingsPatchProperties.
        :rtype: AsymmetricEncryptedSecret
        """
        return self._device_admin_password

    @device_admin_password.setter
    def device_admin_password(self, device_admin_password):
        """Sets the device_admin_password of this SecuritySettingsPatchProperties.


        :param device_admin_password: The device_admin_password of this SecuritySettingsPatchProperties.
        :type device_admin_password: AsymmetricEncryptedSecret
        """

        self._device_admin_password = device_admin_password

    @property
    def remote_management_settings(self):
        """Gets the remote_management_settings of this SecuritySettingsPatchProperties.


        :return: The remote_management_settings of this SecuritySettingsPatchProperties.
        :rtype: RemoteManagementSettingsPatch
        """
        return self._remote_management_settings

    @remote_management_settings.setter
    def remote_management_settings(self, remote_management_settings):
        """Sets the remote_management_settings of this SecuritySettingsPatchProperties.


        :param remote_management_settings: The remote_management_settings of this SecuritySettingsPatchProperties.
        :type remote_management_settings: RemoteManagementSettingsPatch
        """

        self._remote_management_settings = remote_management_settings

    @property
    def snapshot_password(self):
        """Gets the snapshot_password of this SecuritySettingsPatchProperties.


        :return: The snapshot_password of this SecuritySettingsPatchProperties.
        :rtype: AsymmetricEncryptedSecret
        """
        return self._snapshot_password

    @snapshot_password.setter
    def snapshot_password(self, snapshot_password):
        """Sets the snapshot_password of this SecuritySettingsPatchProperties.


        :param snapshot_password: The snapshot_password of this SecuritySettingsPatchProperties.
        :type snapshot_password: AsymmetricEncryptedSecret
        """

        self._snapshot_password = snapshot_password
