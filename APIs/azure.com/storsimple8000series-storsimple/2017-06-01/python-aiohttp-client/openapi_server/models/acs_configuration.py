# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, realm: str=None, service_url: str=None):
        """AcsConfiguration - a model defined in OpenAPI

        :param namespace: The namespace of this AcsConfiguration.
        :param realm: The realm of this AcsConfiguration.
        :param service_url: The service_url of this AcsConfiguration.
        """
        self.openapi_types = {
            'namespace': str,
            'realm': str,
            'service_url': str
        }

        self.attribute_map = {
            'namespace': 'namespace',
            'realm': 'realm',
            'service_url': 'serviceUrl'
        }

        self._namespace = namespace
        self._realm = realm
        self._service_url = service_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcsConfiguration of this AcsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this AcsConfiguration.

        The namespace.

        :return: The namespace of this AcsConfiguration.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AcsConfiguration.

        The namespace.

        :param namespace: The namespace of this AcsConfiguration.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def realm(self):
        """Gets the realm of this AcsConfiguration.

        The realm.

        :return: The realm of this AcsConfiguration.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this AcsConfiguration.

        The realm.

        :param realm: The realm of this AcsConfiguration.
        :type realm: str
        """
        if realm is None:
            raise ValueError("Invalid value for `realm`, must not be `None`")

        self._realm = realm

    @property
    def service_url(self):
        """Gets the service_url of this AcsConfiguration.

        The service URL.

        :return: The service_url of this AcsConfiguration.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this AcsConfiguration.

        The service URL.

        :param service_url: The service_url of this AcsConfiguration.
        :type service_url: str
        """
        if service_url is None:
            raise ValueError("Invalid value for `service_url`, must not be `None`")

        self._service_url = service_url
