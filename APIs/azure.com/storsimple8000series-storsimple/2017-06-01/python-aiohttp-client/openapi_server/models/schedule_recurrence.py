# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleRecurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recurrence_type: str=None, recurrence_value: int=None, weekly_days_list: List[str]=None):
        """ScheduleRecurrence - a model defined in OpenAPI

        :param recurrence_type: The recurrence_type of this ScheduleRecurrence.
        :param recurrence_value: The recurrence_value of this ScheduleRecurrence.
        :param weekly_days_list: The weekly_days_list of this ScheduleRecurrence.
        """
        self.openapi_types = {
            'recurrence_type': str,
            'recurrence_value': int,
            'weekly_days_list': List[str]
        }

        self.attribute_map = {
            'recurrence_type': 'recurrenceType',
            'recurrence_value': 'recurrenceValue',
            'weekly_days_list': 'weeklyDaysList'
        }

        self._recurrence_type = recurrence_type
        self._recurrence_value = recurrence_value
        self._weekly_days_list = weekly_days_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleRecurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleRecurrence of this ScheduleRecurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this ScheduleRecurrence.

        The recurrence type.

        :return: The recurrence_type of this ScheduleRecurrence.
        :rtype: str
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this ScheduleRecurrence.

        The recurrence type.

        :param recurrence_type: The recurrence_type of this ScheduleRecurrence.
        :type recurrence_type: str
        """
        allowed_values = ["Minutes", "Hourly", "Daily", "Weekly"]  # noqa: E501
        if recurrence_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence_type` ({0}), must be one of {1}"
                .format(recurrence_type, allowed_values)
            )

        self._recurrence_type = recurrence_type

    @property
    def recurrence_value(self):
        """Gets the recurrence_value of this ScheduleRecurrence.

        The recurrence value.

        :return: The recurrence_value of this ScheduleRecurrence.
        :rtype: int
        """
        return self._recurrence_value

    @recurrence_value.setter
    def recurrence_value(self, recurrence_value):
        """Sets the recurrence_value of this ScheduleRecurrence.

        The recurrence value.

        :param recurrence_value: The recurrence_value of this ScheduleRecurrence.
        :type recurrence_value: int
        """
        if recurrence_value is None:
            raise ValueError("Invalid value for `recurrence_value`, must not be `None`")

        self._recurrence_value = recurrence_value

    @property
    def weekly_days_list(self):
        """Gets the weekly_days_list of this ScheduleRecurrence.

        The week days list. Applicable only for schedules of recurrence type 'weekly'.

        :return: The weekly_days_list of this ScheduleRecurrence.
        :rtype: List[str]
        """
        return self._weekly_days_list

    @weekly_days_list.setter
    def weekly_days_list(self, weekly_days_list):
        """Sets the weekly_days_list of this ScheduleRecurrence.

        The week days list. Applicable only for schedules of recurrence type 'weekly'.

        :param weekly_days_list: The weekly_days_list of this ScheduleRecurrence.
        :type weekly_days_list: List[str]
        """
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if not set(weekly_days_list).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `weekly_days_list` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(weekly_days_list) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._weekly_days_list = weekly_days_list
