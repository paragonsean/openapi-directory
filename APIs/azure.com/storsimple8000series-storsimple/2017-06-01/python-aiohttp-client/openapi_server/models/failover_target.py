# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_eligibility_result import TargetEligibilityResult
from openapi_server import util


class FailoverTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_local_storage_in_bytes: int=None, available_tiered_storage_in_bytes: int=None, data_containers_count: int=None, device_id: str=None, device_location: str=None, device_software_version: str=None, device_status: str=None, eligibility_result: TargetEligibilityResult=None, friendly_device_software_version: str=None, model_description: str=None, volumes_count: int=None):
        """FailoverTarget - a model defined in OpenAPI

        :param available_local_storage_in_bytes: The available_local_storage_in_bytes of this FailoverTarget.
        :param available_tiered_storage_in_bytes: The available_tiered_storage_in_bytes of this FailoverTarget.
        :param data_containers_count: The data_containers_count of this FailoverTarget.
        :param device_id: The device_id of this FailoverTarget.
        :param device_location: The device_location of this FailoverTarget.
        :param device_software_version: The device_software_version of this FailoverTarget.
        :param device_status: The device_status of this FailoverTarget.
        :param eligibility_result: The eligibility_result of this FailoverTarget.
        :param friendly_device_software_version: The friendly_device_software_version of this FailoverTarget.
        :param model_description: The model_description of this FailoverTarget.
        :param volumes_count: The volumes_count of this FailoverTarget.
        """
        self.openapi_types = {
            'available_local_storage_in_bytes': int,
            'available_tiered_storage_in_bytes': int,
            'data_containers_count': int,
            'device_id': str,
            'device_location': str,
            'device_software_version': str,
            'device_status': str,
            'eligibility_result': TargetEligibilityResult,
            'friendly_device_software_version': str,
            'model_description': str,
            'volumes_count': int
        }

        self.attribute_map = {
            'available_local_storage_in_bytes': 'availableLocalStorageInBytes',
            'available_tiered_storage_in_bytes': 'availableTieredStorageInBytes',
            'data_containers_count': 'dataContainersCount',
            'device_id': 'deviceId',
            'device_location': 'deviceLocation',
            'device_software_version': 'deviceSoftwareVersion',
            'device_status': 'deviceStatus',
            'eligibility_result': 'eligibilityResult',
            'friendly_device_software_version': 'friendlyDeviceSoftwareVersion',
            'model_description': 'modelDescription',
            'volumes_count': 'volumesCount'
        }

        self._available_local_storage_in_bytes = available_local_storage_in_bytes
        self._available_tiered_storage_in_bytes = available_tiered_storage_in_bytes
        self._data_containers_count = data_containers_count
        self._device_id = device_id
        self._device_location = device_location
        self._device_software_version = device_software_version
        self._device_status = device_status
        self._eligibility_result = eligibility_result
        self._friendly_device_software_version = friendly_device_software_version
        self._model_description = model_description
        self._volumes_count = volumes_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverTarget of this FailoverTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_local_storage_in_bytes(self):
        """Gets the available_local_storage_in_bytes of this FailoverTarget.

        The amount of free local storage available on the device in bytes.

        :return: The available_local_storage_in_bytes of this FailoverTarget.
        :rtype: int
        """
        return self._available_local_storage_in_bytes

    @available_local_storage_in_bytes.setter
    def available_local_storage_in_bytes(self, available_local_storage_in_bytes):
        """Sets the available_local_storage_in_bytes of this FailoverTarget.

        The amount of free local storage available on the device in bytes.

        :param available_local_storage_in_bytes: The available_local_storage_in_bytes of this FailoverTarget.
        :type available_local_storage_in_bytes: int
        """

        self._available_local_storage_in_bytes = available_local_storage_in_bytes

    @property
    def available_tiered_storage_in_bytes(self):
        """Gets the available_tiered_storage_in_bytes of this FailoverTarget.

        The amount of free tiered storage available for the device in bytes.

        :return: The available_tiered_storage_in_bytes of this FailoverTarget.
        :rtype: int
        """
        return self._available_tiered_storage_in_bytes

    @available_tiered_storage_in_bytes.setter
    def available_tiered_storage_in_bytes(self, available_tiered_storage_in_bytes):
        """Sets the available_tiered_storage_in_bytes of this FailoverTarget.

        The amount of free tiered storage available for the device in bytes.

        :param available_tiered_storage_in_bytes: The available_tiered_storage_in_bytes of this FailoverTarget.
        :type available_tiered_storage_in_bytes: int
        """

        self._available_tiered_storage_in_bytes = available_tiered_storage_in_bytes

    @property
    def data_containers_count(self):
        """Gets the data_containers_count of this FailoverTarget.

        The count of data containers on the device.

        :return: The data_containers_count of this FailoverTarget.
        :rtype: int
        """
        return self._data_containers_count

    @data_containers_count.setter
    def data_containers_count(self, data_containers_count):
        """Sets the data_containers_count of this FailoverTarget.

        The count of data containers on the device.

        :param data_containers_count: The data_containers_count of this FailoverTarget.
        :type data_containers_count: int
        """

        self._data_containers_count = data_containers_count

    @property
    def device_id(self):
        """Gets the device_id of this FailoverTarget.

        The path ID of the device.

        :return: The device_id of this FailoverTarget.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this FailoverTarget.

        The path ID of the device.

        :param device_id: The device_id of this FailoverTarget.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def device_location(self):
        """Gets the device_location of this FailoverTarget.

        The geo location (applicable only for cloud appliances) of the device.

        :return: The device_location of this FailoverTarget.
        :rtype: str
        """
        return self._device_location

    @device_location.setter
    def device_location(self, device_location):
        """Sets the device_location of this FailoverTarget.

        The geo location (applicable only for cloud appliances) of the device.

        :param device_location: The device_location of this FailoverTarget.
        :type device_location: str
        """

        self._device_location = device_location

    @property
    def device_software_version(self):
        """Gets the device_software_version of this FailoverTarget.

        The software version of the device.

        :return: The device_software_version of this FailoverTarget.
        :rtype: str
        """
        return self._device_software_version

    @device_software_version.setter
    def device_software_version(self, device_software_version):
        """Sets the device_software_version of this FailoverTarget.

        The software version of the device.

        :param device_software_version: The device_software_version of this FailoverTarget.
        :type device_software_version: str
        """

        self._device_software_version = device_software_version

    @property
    def device_status(self):
        """Gets the device_status of this FailoverTarget.

        The status of the device.

        :return: The device_status of this FailoverTarget.
        :rtype: str
        """
        return self._device_status

    @device_status.setter
    def device_status(self, device_status):
        """Sets the device_status of this FailoverTarget.

        The status of the device.

        :param device_status: The device_status of this FailoverTarget.
        :type device_status: str
        """
        allowed_values = ["Unknown", "Online", "Offline", "Deactivated", "RequiresAttention", "MaintenanceMode", "Creating", "Provisioning", "Deactivating", "Deleted", "ReadyToSetup"]  # noqa: E501
        if device_status not in allowed_values:
            raise ValueError(
                "Invalid value for `device_status` ({0}), must be one of {1}"
                .format(device_status, allowed_values)
            )

        self._device_status = device_status

    @property
    def eligibility_result(self):
        """Gets the eligibility_result of this FailoverTarget.


        :return: The eligibility_result of this FailoverTarget.
        :rtype: TargetEligibilityResult
        """
        return self._eligibility_result

    @eligibility_result.setter
    def eligibility_result(self, eligibility_result):
        """Sets the eligibility_result of this FailoverTarget.


        :param eligibility_result: The eligibility_result of this FailoverTarget.
        :type eligibility_result: TargetEligibilityResult
        """

        self._eligibility_result = eligibility_result

    @property
    def friendly_device_software_version(self):
        """Gets the friendly_device_software_version of this FailoverTarget.

        The friendly name for the current version of software on the device.

        :return: The friendly_device_software_version of this FailoverTarget.
        :rtype: str
        """
        return self._friendly_device_software_version

    @friendly_device_software_version.setter
    def friendly_device_software_version(self, friendly_device_software_version):
        """Sets the friendly_device_software_version of this FailoverTarget.

        The friendly name for the current version of software on the device.

        :param friendly_device_software_version: The friendly_device_software_version of this FailoverTarget.
        :type friendly_device_software_version: str
        """

        self._friendly_device_software_version = friendly_device_software_version

    @property
    def model_description(self):
        """Gets the model_description of this FailoverTarget.

        The model number of the device.

        :return: The model_description of this FailoverTarget.
        :rtype: str
        """
        return self._model_description

    @model_description.setter
    def model_description(self, model_description):
        """Sets the model_description of this FailoverTarget.

        The model number of the device.

        :param model_description: The model_description of this FailoverTarget.
        :type model_description: str
        """

        self._model_description = model_description

    @property
    def volumes_count(self):
        """Gets the volumes_count of this FailoverTarget.

        The count of volumes on the device.

        :return: The volumes_count of this FailoverTarget.
        :rtype: int
        """
        return self._volumes_count

    @volumes_count.setter
    def volumes_count(self, volumes_count):
        """Sets the volumes_count of this FailoverTarget.

        The count of volumes on the device.

        :param volumes_count: The volumes_count of this FailoverTarget.
        :type volumes_count: int
        """

        self._volumes_count = volumes_count
