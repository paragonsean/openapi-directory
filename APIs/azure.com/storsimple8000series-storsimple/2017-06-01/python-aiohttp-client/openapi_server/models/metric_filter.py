# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_filter import DimensionFilter
from openapi_server.models.metric_name_filter import MetricNameFilter
from openapi_server import util


class MetricFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, dimensions: DimensionFilter=None, end_time: datetime=None, name: MetricNameFilter=None, start_time: datetime=None, time_grain: str=None):
        """MetricFilter - a model defined in OpenAPI

        :param category: The category of this MetricFilter.
        :param dimensions: The dimensions of this MetricFilter.
        :param end_time: The end_time of this MetricFilter.
        :param name: The name of this MetricFilter.
        :param start_time: The start_time of this MetricFilter.
        :param time_grain: The time_grain of this MetricFilter.
        """
        self.openapi_types = {
            'category': str,
            'dimensions': DimensionFilter,
            'end_time': datetime,
            'name': MetricNameFilter,
            'start_time': datetime,
            'time_grain': str
        }

        self.attribute_map = {
            'category': 'category',
            'dimensions': 'dimensions',
            'end_time': 'endTime',
            'name': 'name',
            'start_time': 'startTime',
            'time_grain': 'timeGrain'
        }

        self._category = category
        self._dimensions = dimensions
        self._end_time = end_time
        self._name = name
        self._start_time = start_time
        self._time_grain = time_grain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricFilter of this MetricFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this MetricFilter.

        Specifies the category of the metrics to be filtered. E.g., \"CapacityUtilization\". Valid values are the ones returned as the field \"category\" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.

        :return: The category of this MetricFilter.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MetricFilter.

        Specifies the category of the metrics to be filtered. E.g., \"CapacityUtilization\". Valid values are the ones returned as the field \"category\" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.

        :param category: The category of this MetricFilter.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def dimensions(self):
        """Gets the dimensions of this MetricFilter.


        :return: The dimensions of this MetricFilter.
        :rtype: DimensionFilter
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MetricFilter.


        :param dimensions: The dimensions of this MetricFilter.
        :type dimensions: DimensionFilter
        """

        self._dimensions = dimensions

    @property
    def end_time(self):
        """Gets the end_time of this MetricFilter.

        Specifies the end time of the time range to be queried. Only 'Less Than Or Equal To' operator is supported for this property.

        :return: The end_time of this MetricFilter.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MetricFilter.

        Specifies the end time of the time range to be queried. Only 'Less Than Or Equal To' operator is supported for this property.

        :param end_time: The end_time of this MetricFilter.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def name(self):
        """Gets the name of this MetricFilter.


        :return: The name of this MetricFilter.
        :rtype: MetricNameFilter
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricFilter.


        :param name: The name of this MetricFilter.
        :type name: MetricNameFilter
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this MetricFilter.

        Specifies the start time of the time range to be queried. Only 'Greater Than Or Equal To' operator is supported for this property.

        :return: The start_time of this MetricFilter.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MetricFilter.

        Specifies the start time of the time range to be queried. Only 'Greater Than Or Equal To' operator is supported for this property.

        :param start_time: The start_time of this MetricFilter.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def time_grain(self):
        """Gets the time_grain of this MetricFilter.

        Specifies the time granularity of the metrics to be returned. E.g., \"P1D\". Valid values are the ones returned as the field \"timeGrain\" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.

        :return: The time_grain of this MetricFilter.
        :rtype: str
        """
        return self._time_grain

    @time_grain.setter
    def time_grain(self, time_grain):
        """Sets the time_grain of this MetricFilter.

        Specifies the time granularity of the metrics to be returned. E.g., \"P1D\". Valid values are the ones returned as the field \"timeGrain\" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.

        :param time_grain: The time_grain of this MetricFilter.
        :type time_grain: str
        """

        self._time_grain = time_grain
