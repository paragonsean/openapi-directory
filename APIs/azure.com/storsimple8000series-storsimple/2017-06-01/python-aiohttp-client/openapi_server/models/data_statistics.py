# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_data: int=None, processed_data: int=None, throughput: int=None, total_data: int=None):
        """DataStatistics - a model defined in OpenAPI

        :param cloud_data: The cloud_data of this DataStatistics.
        :param processed_data: The processed_data of this DataStatistics.
        :param throughput: The throughput of this DataStatistics.
        :param total_data: The total_data of this DataStatistics.
        """
        self.openapi_types = {
            'cloud_data': int,
            'processed_data': int,
            'throughput': int,
            'total_data': int
        }

        self.attribute_map = {
            'cloud_data': 'cloudData',
            'processed_data': 'processedData',
            'throughput': 'throughput',
            'total_data': 'totalData'
        }

        self._cloud_data = cloud_data
        self._processed_data = processed_data
        self._throughput = throughput
        self._total_data = total_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataStatistics of this DataStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_data(self):
        """Gets the cloud_data of this DataStatistics.

        The number of bytes of data written to cloud, as part of the job.

        :return: The cloud_data of this DataStatistics.
        :rtype: int
        """
        return self._cloud_data

    @cloud_data.setter
    def cloud_data(self, cloud_data):
        """Sets the cloud_data of this DataStatistics.

        The number of bytes of data written to cloud, as part of the job.

        :param cloud_data: The cloud_data of this DataStatistics.
        :type cloud_data: int
        """

        self._cloud_data = cloud_data

    @property
    def processed_data(self):
        """Gets the processed_data of this DataStatistics.

        The number of bytes of data processed till now, as part of the job.

        :return: The processed_data of this DataStatistics.
        :rtype: int
        """
        return self._processed_data

    @processed_data.setter
    def processed_data(self, processed_data):
        """Sets the processed_data of this DataStatistics.

        The number of bytes of data processed till now, as part of the job.

        :param processed_data: The processed_data of this DataStatistics.
        :type processed_data: int
        """

        self._processed_data = processed_data

    @property
    def throughput(self):
        """Gets the throughput of this DataStatistics.

        The average throughput of data processed(bytes/sec), as part of the job.

        :return: The throughput of this DataStatistics.
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this DataStatistics.

        The average throughput of data processed(bytes/sec), as part of the job.

        :param throughput: The throughput of this DataStatistics.
        :type throughput: int
        """

        self._throughput = throughput

    @property
    def total_data(self):
        """Gets the total_data of this DataStatistics.

        The total bytes of data to be processed, as part of the job.

        :return: The total_data of this DataStatistics.
        :rtype: int
        """
        return self._total_data

    @total_data.setter
    def total_data(self, total_data):
        """Sets the total_data of this DataStatistics.

        The total bytes of data to be processed, as part of the job.

        :param total_data: The total_data of this DataStatistics.
        :type total_data: int
        """

        self._total_data = total_data
