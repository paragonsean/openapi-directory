/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BandwidthSetting from '../model/BandwidthSetting';
import BandwidthSettingList from '../model/BandwidthSettingList';

/**
* BandwidthSettings service.
* @module api/BandwidthSettingsApi
* @version 2017-06-01
*/
export default class BandwidthSettingsApi {

    /**
    * Constructs a new BandwidthSettingsApi. 
    * @alias module:api/BandwidthSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bandwidthSettingsCreateOrUpdate operation.
     * @callback module:api/BandwidthSettingsApi~bandwidthSettingsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BandwidthSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the bandwidth setting
     * @param {String} bandwidthSettingName The bandwidth setting name.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:model/BandwidthSetting} parameters The bandwidth setting to be added or updated.
     * @param {module:api/BandwidthSettingsApi~bandwidthSettingsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BandwidthSetting}
     */
    bandwidthSettingsCreateOrUpdate(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'bandwidthSettingName' is set
      if (bandwidthSettingName === undefined || bandwidthSettingName === null) {
        throw new Error("Missing the required parameter 'bandwidthSettingName' when calling bandwidthSettingsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling bandwidthSettingsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling bandwidthSettingsCreateOrUpdate");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling bandwidthSettingsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling bandwidthSettingsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling bandwidthSettingsCreateOrUpdate");
      }

      let pathParams = {
        'bandwidthSettingName': bandwidthSettingName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BandwidthSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bandwidthSettingsDelete operation.
     * @callback module:api/BandwidthSettingsApi~bandwidthSettingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the bandwidth setting
     * @param {String} bandwidthSettingName The name of the bandwidth setting.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/BandwidthSettingsApi~bandwidthSettingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bandwidthSettingsDelete(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'bandwidthSettingName' is set
      if (bandwidthSettingName === undefined || bandwidthSettingName === null) {
        throw new Error("Missing the required parameter 'bandwidthSettingName' when calling bandwidthSettingsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling bandwidthSettingsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling bandwidthSettingsDelete");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling bandwidthSettingsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling bandwidthSettingsDelete");
      }

      let pathParams = {
        'bandwidthSettingName': bandwidthSettingName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bandwidthSettingsGet operation.
     * @callback module:api/BandwidthSettingsApi~bandwidthSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BandwidthSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the properties of the specified bandwidth setting name.
     * @param {String} bandwidthSettingName The name of bandwidth setting to be fetched.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/BandwidthSettingsApi~bandwidthSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BandwidthSetting}
     */
    bandwidthSettingsGet(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'bandwidthSettingName' is set
      if (bandwidthSettingName === undefined || bandwidthSettingName === null) {
        throw new Error("Missing the required parameter 'bandwidthSettingName' when calling bandwidthSettingsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling bandwidthSettingsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling bandwidthSettingsGet");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling bandwidthSettingsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling bandwidthSettingsGet");
      }

      let pathParams = {
        'bandwidthSettingName': bandwidthSettingName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BandwidthSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bandwidthSettingsListByManager operation.
     * @callback module:api/BandwidthSettingsApi~bandwidthSettingsListByManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BandwidthSettingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the bandwidth setting in a manager.
     * @param {String} subscriptionId The subscription id
     * @param {String} resourceGroupName The resource group name
     * @param {String} managerName The manager name
     * @param {String} apiVersion The api version
     * @param {module:api/BandwidthSettingsApi~bandwidthSettingsListByManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BandwidthSettingList}
     */
    bandwidthSettingsListByManager(subscriptionId, resourceGroupName, managerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling bandwidthSettingsListByManager");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling bandwidthSettingsListByManager");
      }
      // verify the required parameter 'managerName' is set
      if (managerName === undefined || managerName === null) {
        throw new Error("Missing the required parameter 'managerName' when calling bandwidthSettingsListByManager");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling bandwidthSettingsListByManager");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'managerName': managerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BandwidthSettingList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
