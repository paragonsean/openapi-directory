/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NicIPv4 model module.
 * @module model/NicIPv4
 * @version 2017-06-01
 */
class NicIPv4 {
    /**
     * Constructs a new <code>NicIPv4</code>.
     * Details related to the IPv4 address configuration.
     * @alias module:model/NicIPv4
     */
    constructor() { 
        
        NicIPv4.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NicIPv4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NicIPv4} obj Optional instance to populate.
     * @return {module:model/NicIPv4} The populated <code>NicIPv4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NicIPv4();

            if (data.hasOwnProperty('controller0Ipv4Address')) {
                obj['controller0Ipv4Address'] = ApiClient.convertToType(data['controller0Ipv4Address'], 'String');
            }
            if (data.hasOwnProperty('controller1Ipv4Address')) {
                obj['controller1Ipv4Address'] = ApiClient.convertToType(data['controller1Ipv4Address'], 'String');
            }
            if (data.hasOwnProperty('ipv4Address')) {
                obj['ipv4Address'] = ApiClient.convertToType(data['ipv4Address'], 'String');
            }
            if (data.hasOwnProperty('ipv4Gateway')) {
                obj['ipv4Gateway'] = ApiClient.convertToType(data['ipv4Gateway'], 'String');
            }
            if (data.hasOwnProperty('ipv4Netmask')) {
                obj['ipv4Netmask'] = ApiClient.convertToType(data['ipv4Netmask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NicIPv4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NicIPv4</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['controller0Ipv4Address'] && !(typeof data['controller0Ipv4Address'] === 'string' || data['controller0Ipv4Address'] instanceof String)) {
            throw new Error("Expected the field `controller0Ipv4Address` to be a primitive type in the JSON string but got " + data['controller0Ipv4Address']);
        }
        // ensure the json data is a string
        if (data['controller1Ipv4Address'] && !(typeof data['controller1Ipv4Address'] === 'string' || data['controller1Ipv4Address'] instanceof String)) {
            throw new Error("Expected the field `controller1Ipv4Address` to be a primitive type in the JSON string but got " + data['controller1Ipv4Address']);
        }
        // ensure the json data is a string
        if (data['ipv4Address'] && !(typeof data['ipv4Address'] === 'string' || data['ipv4Address'] instanceof String)) {
            throw new Error("Expected the field `ipv4Address` to be a primitive type in the JSON string but got " + data['ipv4Address']);
        }
        // ensure the json data is a string
        if (data['ipv4Gateway'] && !(typeof data['ipv4Gateway'] === 'string' || data['ipv4Gateway'] instanceof String)) {
            throw new Error("Expected the field `ipv4Gateway` to be a primitive type in the JSON string but got " + data['ipv4Gateway']);
        }
        // ensure the json data is a string
        if (data['ipv4Netmask'] && !(typeof data['ipv4Netmask'] === 'string' || data['ipv4Netmask'] instanceof String)) {
            throw new Error("Expected the field `ipv4Netmask` to be a primitive type in the JSON string but got " + data['ipv4Netmask']);
        }

        return true;
    }


}



/**
 * The IPv4 address of Controller0.
 * @member {String} controller0Ipv4Address
 */
NicIPv4.prototype['controller0Ipv4Address'] = undefined;

/**
 * The IPv4 address of Controller1.
 * @member {String} controller1Ipv4Address
 */
NicIPv4.prototype['controller1Ipv4Address'] = undefined;

/**
 * The IPv4 address of the network adapter.
 * @member {String} ipv4Address
 */
NicIPv4.prototype['ipv4Address'] = undefined;

/**
 * The IPv4 gateway of the network adapter.
 * @member {String} ipv4Gateway
 */
NicIPv4.prototype['ipv4Gateway'] = undefined;

/**
 * The IPv4 netmask of the network adapter.
 * @member {String} ipv4Netmask
 */
NicIPv4.prototype['ipv4Netmask'] = undefined;






export default NicIPv4;

