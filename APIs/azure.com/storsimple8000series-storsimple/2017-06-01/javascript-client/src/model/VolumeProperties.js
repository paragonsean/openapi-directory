/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VolumeProperties model module.
 * @module model/VolumeProperties
 * @version 2017-06-01
 */
class VolumeProperties {
    /**
     * Constructs a new <code>VolumeProperties</code>.
     * The properties of volume.
     * @alias module:model/VolumeProperties
     * @param accessControlRecordIds {Array.<String>} The IDs of the access control records, associated with the volume.
     * @param monitoringStatus {module:model/VolumeProperties.MonitoringStatusEnum} The monitoring status of the volume.
     * @param sizeInBytes {Number} The size of the volume in bytes.
     * @param volumeStatus {module:model/VolumeProperties.VolumeStatusEnum} The volume status.
     * @param volumeType {module:model/VolumeProperties.VolumeTypeEnum} The type of the volume.
     */
    constructor(accessControlRecordIds, monitoringStatus, sizeInBytes, volumeStatus, volumeType) { 
        
        VolumeProperties.initialize(this, accessControlRecordIds, monitoringStatus, sizeInBytes, volumeStatus, volumeType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessControlRecordIds, monitoringStatus, sizeInBytes, volumeStatus, volumeType) { 
        obj['accessControlRecordIds'] = accessControlRecordIds;
        obj['monitoringStatus'] = monitoringStatus;
        obj['sizeInBytes'] = sizeInBytes;
        obj['volumeStatus'] = volumeStatus;
        obj['volumeType'] = volumeType;
    }

    /**
     * Constructs a <code>VolumeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeProperties} obj Optional instance to populate.
     * @return {module:model/VolumeProperties} The populated <code>VolumeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeProperties();

            if (data.hasOwnProperty('accessControlRecordIds')) {
                obj['accessControlRecordIds'] = ApiClient.convertToType(data['accessControlRecordIds'], ['String']);
            }
            if (data.hasOwnProperty('backupPolicyIds')) {
                obj['backupPolicyIds'] = ApiClient.convertToType(data['backupPolicyIds'], ['String']);
            }
            if (data.hasOwnProperty('backupStatus')) {
                obj['backupStatus'] = ApiClient.convertToType(data['backupStatus'], 'String');
            }
            if (data.hasOwnProperty('monitoringStatus')) {
                obj['monitoringStatus'] = ApiClient.convertToType(data['monitoringStatus'], 'String');
            }
            if (data.hasOwnProperty('operationStatus')) {
                obj['operationStatus'] = ApiClient.convertToType(data['operationStatus'], 'String');
            }
            if (data.hasOwnProperty('sizeInBytes')) {
                obj['sizeInBytes'] = ApiClient.convertToType(data['sizeInBytes'], 'Number');
            }
            if (data.hasOwnProperty('volumeContainerId')) {
                obj['volumeContainerId'] = ApiClient.convertToType(data['volumeContainerId'], 'String');
            }
            if (data.hasOwnProperty('volumeStatus')) {
                obj['volumeStatus'] = ApiClient.convertToType(data['volumeStatus'], 'String');
            }
            if (data.hasOwnProperty('volumeType')) {
                obj['volumeType'] = ApiClient.convertToType(data['volumeType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VolumeProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['accessControlRecordIds'])) {
            throw new Error("Expected the field `accessControlRecordIds` to be an array in the JSON data but got " + data['accessControlRecordIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['backupPolicyIds'])) {
            throw new Error("Expected the field `backupPolicyIds` to be an array in the JSON data but got " + data['backupPolicyIds']);
        }
        // ensure the json data is a string
        if (data['backupStatus'] && !(typeof data['backupStatus'] === 'string' || data['backupStatus'] instanceof String)) {
            throw new Error("Expected the field `backupStatus` to be a primitive type in the JSON string but got " + data['backupStatus']);
        }
        // ensure the json data is a string
        if (data['monitoringStatus'] && !(typeof data['monitoringStatus'] === 'string' || data['monitoringStatus'] instanceof String)) {
            throw new Error("Expected the field `monitoringStatus` to be a primitive type in the JSON string but got " + data['monitoringStatus']);
        }
        // ensure the json data is a string
        if (data['operationStatus'] && !(typeof data['operationStatus'] === 'string' || data['operationStatus'] instanceof String)) {
            throw new Error("Expected the field `operationStatus` to be a primitive type in the JSON string but got " + data['operationStatus']);
        }
        // ensure the json data is a string
        if (data['volumeContainerId'] && !(typeof data['volumeContainerId'] === 'string' || data['volumeContainerId'] instanceof String)) {
            throw new Error("Expected the field `volumeContainerId` to be a primitive type in the JSON string but got " + data['volumeContainerId']);
        }
        // ensure the json data is a string
        if (data['volumeStatus'] && !(typeof data['volumeStatus'] === 'string' || data['volumeStatus'] instanceof String)) {
            throw new Error("Expected the field `volumeStatus` to be a primitive type in the JSON string but got " + data['volumeStatus']);
        }
        // ensure the json data is a string
        if (data['volumeType'] && !(typeof data['volumeType'] === 'string' || data['volumeType'] instanceof String)) {
            throw new Error("Expected the field `volumeType` to be a primitive type in the JSON string but got " + data['volumeType']);
        }

        return true;
    }


}

VolumeProperties.RequiredProperties = ["accessControlRecordIds", "monitoringStatus", "sizeInBytes", "volumeStatus", "volumeType"];

/**
 * The IDs of the access control records, associated with the volume.
 * @member {Array.<String>} accessControlRecordIds
 */
VolumeProperties.prototype['accessControlRecordIds'] = undefined;

/**
 * The IDs of the backup policies, in which this volume is part of.
 * @member {Array.<String>} backupPolicyIds
 */
VolumeProperties.prototype['backupPolicyIds'] = undefined;

/**
 * The backup status of the volume.
 * @member {module:model/VolumeProperties.BackupStatusEnum} backupStatus
 */
VolumeProperties.prototype['backupStatus'] = undefined;

/**
 * The monitoring status of the volume.
 * @member {module:model/VolumeProperties.MonitoringStatusEnum} monitoringStatus
 */
VolumeProperties.prototype['monitoringStatus'] = undefined;

/**
 * The operation status on the volume.
 * @member {module:model/VolumeProperties.OperationStatusEnum} operationStatus
 */
VolumeProperties.prototype['operationStatus'] = undefined;

/**
 * The size of the volume in bytes.
 * @member {Number} sizeInBytes
 */
VolumeProperties.prototype['sizeInBytes'] = undefined;

/**
 * The ID of the volume container, in which this volume is created.
 * @member {String} volumeContainerId
 */
VolumeProperties.prototype['volumeContainerId'] = undefined;

/**
 * The volume status.
 * @member {module:model/VolumeProperties.VolumeStatusEnum} volumeStatus
 */
VolumeProperties.prototype['volumeStatus'] = undefined;

/**
 * The type of the volume.
 * @member {module:model/VolumeProperties.VolumeTypeEnum} volumeType
 */
VolumeProperties.prototype['volumeType'] = undefined;





/**
 * Allowed values for the <code>backupStatus</code> property.
 * @enum {String}
 * @readonly
 */
VolumeProperties['BackupStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>monitoringStatus</code> property.
 * @enum {String}
 * @readonly
 */
VolumeProperties['MonitoringStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>operationStatus</code> property.
 * @enum {String}
 * @readonly
 */
VolumeProperties['OperationStatusEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Restoring"
     * @const
     */
    "Restoring": "Restoring"
};


/**
 * Allowed values for the <code>volumeStatus</code> property.
 * @enum {String}
 * @readonly
 */
VolumeProperties['VolumeStatusEnum'] = {

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline"
};


/**
 * Allowed values for the <code>volumeType</code> property.
 * @enum {String}
 * @readonly
 */
VolumeProperties['VolumeTypeEnum'] = {

    /**
     * value: "Tiered"
     * @const
     */
    "Tiered": "Tiered",

    /**
     * value: "Archival"
     * @const
     */
    "Archival": "Archival",

    /**
     * value: "LocallyPinned"
     * @const
     */
    "LocallyPinned": "LocallyPinned"
};



export default VolumeProperties;

