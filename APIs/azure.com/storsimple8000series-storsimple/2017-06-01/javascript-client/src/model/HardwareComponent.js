/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HardwareComponent model module.
 * @module model/HardwareComponent
 * @version 2017-06-01
 */
class HardwareComponent {
    /**
     * Constructs a new <code>HardwareComponent</code>.
     * The hardware component.
     * @alias module:model/HardwareComponent
     * @param componentId {String} The component ID.
     * @param displayName {String} The display name of the hardware component.
     * @param status {module:model/HardwareComponent.StatusEnum} The status of the hardware component.
     * @param statusDisplayName {String} The display name of the status of hardware component.
     */
    constructor(componentId, displayName, status, statusDisplayName) { 
        
        HardwareComponent.initialize(this, componentId, displayName, status, statusDisplayName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, componentId, displayName, status, statusDisplayName) { 
        obj['componentId'] = componentId;
        obj['displayName'] = displayName;
        obj['status'] = status;
        obj['statusDisplayName'] = statusDisplayName;
    }

    /**
     * Constructs a <code>HardwareComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HardwareComponent} obj Optional instance to populate.
     * @return {module:model/HardwareComponent} The populated <code>HardwareComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HardwareComponent();

            if (data.hasOwnProperty('componentId')) {
                obj['componentId'] = ApiClient.convertToType(data['componentId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusDisplayName')) {
                obj['statusDisplayName'] = ApiClient.convertToType(data['statusDisplayName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HardwareComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HardwareComponent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HardwareComponent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['componentId'] && !(typeof data['componentId'] === 'string' || data['componentId'] instanceof String)) {
            throw new Error("Expected the field `componentId` to be a primitive type in the JSON string but got " + data['componentId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusDisplayName'] && !(typeof data['statusDisplayName'] === 'string' || data['statusDisplayName'] instanceof String)) {
            throw new Error("Expected the field `statusDisplayName` to be a primitive type in the JSON string but got " + data['statusDisplayName']);
        }

        return true;
    }


}

HardwareComponent.RequiredProperties = ["componentId", "displayName", "status", "statusDisplayName"];

/**
 * The component ID.
 * @member {String} componentId
 */
HardwareComponent.prototype['componentId'] = undefined;

/**
 * The display name of the hardware component.
 * @member {String} displayName
 */
HardwareComponent.prototype['displayName'] = undefined;

/**
 * The status of the hardware component.
 * @member {module:model/HardwareComponent.StatusEnum} status
 */
HardwareComponent.prototype['status'] = undefined;

/**
 * The display name of the status of hardware component.
 * @member {String} statusDisplayName
 */
HardwareComponent.prototype['statusDisplayName'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
HardwareComponent['StatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "NotPresent"
     * @const
     */
    "NotPresent": "NotPresent",

    /**
     * value: "PoweredOff"
     * @const
     */
    "PoweredOff": "PoweredOff",

    /**
     * value: "Ok"
     * @const
     */
    "Ok": "Ok",

    /**
     * value: "Recovering"
     * @const
     */
    "Recovering": "Recovering",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Failure"
     * @const
     */
    "Failure": "Failure"
};



export default HardwareComponent;

