/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AsymmetricEncryptedSecret from './AsymmetricEncryptedSecret';

/**
 * The VolumeContainerProperties model module.
 * @module model/VolumeContainerProperties
 * @version 2017-06-01
 */
class VolumeContainerProperties {
    /**
     * Constructs a new <code>VolumeContainerProperties</code>.
     * The properties of volume container.
     * @alias module:model/VolumeContainerProperties
     * @param storageAccountCredentialId {String} The path ID of storage account associated with the volume container.
     */
    constructor(storageAccountCredentialId) { 
        
        VolumeContainerProperties.initialize(this, storageAccountCredentialId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, storageAccountCredentialId) { 
        obj['storageAccountCredentialId'] = storageAccountCredentialId;
    }

    /**
     * Constructs a <code>VolumeContainerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeContainerProperties} obj Optional instance to populate.
     * @return {module:model/VolumeContainerProperties} The populated <code>VolumeContainerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeContainerProperties();

            if (data.hasOwnProperty('bandWidthRateInMbps')) {
                obj['bandWidthRateInMbps'] = ApiClient.convertToType(data['bandWidthRateInMbps'], 'Number');
            }
            if (data.hasOwnProperty('bandwidthSettingId')) {
                obj['bandwidthSettingId'] = ApiClient.convertToType(data['bandwidthSettingId'], 'String');
            }
            if (data.hasOwnProperty('encryptionKey')) {
                obj['encryptionKey'] = AsymmetricEncryptedSecret.constructFromObject(data['encryptionKey']);
            }
            if (data.hasOwnProperty('encryptionStatus')) {
                obj['encryptionStatus'] = ApiClient.convertToType(data['encryptionStatus'], 'String');
            }
            if (data.hasOwnProperty('ownerShipStatus')) {
                obj['ownerShipStatus'] = ApiClient.convertToType(data['ownerShipStatus'], 'String');
            }
            if (data.hasOwnProperty('storageAccountCredentialId')) {
                obj['storageAccountCredentialId'] = ApiClient.convertToType(data['storageAccountCredentialId'], 'String');
            }
            if (data.hasOwnProperty('totalCloudStorageUsageInBytes')) {
                obj['totalCloudStorageUsageInBytes'] = ApiClient.convertToType(data['totalCloudStorageUsageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('volumeCount')) {
                obj['volumeCount'] = ApiClient.convertToType(data['volumeCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeContainerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeContainerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VolumeContainerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bandwidthSettingId'] && !(typeof data['bandwidthSettingId'] === 'string' || data['bandwidthSettingId'] instanceof String)) {
            throw new Error("Expected the field `bandwidthSettingId` to be a primitive type in the JSON string but got " + data['bandwidthSettingId']);
        }
        // validate the optional field `encryptionKey`
        if (data['encryptionKey']) { // data not null
          AsymmetricEncryptedSecret.validateJSON(data['encryptionKey']);
        }
        // ensure the json data is a string
        if (data['encryptionStatus'] && !(typeof data['encryptionStatus'] === 'string' || data['encryptionStatus'] instanceof String)) {
            throw new Error("Expected the field `encryptionStatus` to be a primitive type in the JSON string but got " + data['encryptionStatus']);
        }
        // ensure the json data is a string
        if (data['ownerShipStatus'] && !(typeof data['ownerShipStatus'] === 'string' || data['ownerShipStatus'] instanceof String)) {
            throw new Error("Expected the field `ownerShipStatus` to be a primitive type in the JSON string but got " + data['ownerShipStatus']);
        }
        // ensure the json data is a string
        if (data['storageAccountCredentialId'] && !(typeof data['storageAccountCredentialId'] === 'string' || data['storageAccountCredentialId'] instanceof String)) {
            throw new Error("Expected the field `storageAccountCredentialId` to be a primitive type in the JSON string but got " + data['storageAccountCredentialId']);
        }

        return true;
    }


}

VolumeContainerProperties.RequiredProperties = ["storageAccountCredentialId"];

/**
 * The bandwidth-rate set on the volume container.
 * @member {Number} bandWidthRateInMbps
 */
VolumeContainerProperties.prototype['bandWidthRateInMbps'] = undefined;

/**
 * The ID of the bandwidth setting associated with the volume container.
 * @member {String} bandwidthSettingId
 */
VolumeContainerProperties.prototype['bandwidthSettingId'] = undefined;

/**
 * @member {module:model/AsymmetricEncryptedSecret} encryptionKey
 */
VolumeContainerProperties.prototype['encryptionKey'] = undefined;

/**
 * The flag to denote whether encryption is enabled or not.
 * @member {module:model/VolumeContainerProperties.EncryptionStatusEnum} encryptionStatus
 */
VolumeContainerProperties.prototype['encryptionStatus'] = undefined;

/**
 * The owner ship status of the volume container. Only when the status is \"NotOwned\", the delete operation on the volume container is permitted.
 * @member {module:model/VolumeContainerProperties.OwnerShipStatusEnum} ownerShipStatus
 */
VolumeContainerProperties.prototype['ownerShipStatus'] = undefined;

/**
 * The path ID of storage account associated with the volume container.
 * @member {String} storageAccountCredentialId
 */
VolumeContainerProperties.prototype['storageAccountCredentialId'] = undefined;

/**
 * The total cloud storage for the volume container.
 * @member {Number} totalCloudStorageUsageInBytes
 */
VolumeContainerProperties.prototype['totalCloudStorageUsageInBytes'] = undefined;

/**
 * The number of volumes in the volume Container.
 * @member {Number} volumeCount
 */
VolumeContainerProperties.prototype['volumeCount'] = undefined;





/**
 * Allowed values for the <code>encryptionStatus</code> property.
 * @enum {String}
 * @readonly
 */
VolumeContainerProperties['EncryptionStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>ownerShipStatus</code> property.
 * @enum {String}
 * @readonly
 */
VolumeContainerProperties['OwnerShipStatusEnum'] = {

    /**
     * value: "Owned"
     * @const
     */
    "Owned": "Owned",

    /**
     * value: "NotOwned"
     * @const
     */
    "NotOwned": "NotOwned"
};



export default VolumeContainerProperties;

