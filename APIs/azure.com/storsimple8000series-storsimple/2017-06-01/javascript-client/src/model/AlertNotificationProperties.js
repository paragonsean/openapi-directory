/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlertNotificationProperties model module.
 * @module model/AlertNotificationProperties
 * @version 2017-06-01
 */
class AlertNotificationProperties {
    /**
     * Constructs a new <code>AlertNotificationProperties</code>.
     * The properties of the alert notification settings.
     * @alias module:model/AlertNotificationProperties
     * @param emailNotification {module:model/AlertNotificationProperties.EmailNotificationEnum} Indicates whether email notification enabled or not.
     */
    constructor(emailNotification) { 
        
        AlertNotificationProperties.initialize(this, emailNotification);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, emailNotification) { 
        obj['emailNotification'] = emailNotification;
    }

    /**
     * Constructs a <code>AlertNotificationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertNotificationProperties} obj Optional instance to populate.
     * @return {module:model/AlertNotificationProperties} The populated <code>AlertNotificationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertNotificationProperties();

            if (data.hasOwnProperty('additionalRecipientEmailList')) {
                obj['additionalRecipientEmailList'] = ApiClient.convertToType(data['additionalRecipientEmailList'], ['String']);
            }
            if (data.hasOwnProperty('alertNotificationCulture')) {
                obj['alertNotificationCulture'] = ApiClient.convertToType(data['alertNotificationCulture'], 'String');
            }
            if (data.hasOwnProperty('emailNotification')) {
                obj['emailNotification'] = ApiClient.convertToType(data['emailNotification'], 'String');
            }
            if (data.hasOwnProperty('notificationToServiceOwners')) {
                obj['notificationToServiceOwners'] = ApiClient.convertToType(data['notificationToServiceOwners'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertNotificationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertNotificationProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlertNotificationProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['additionalRecipientEmailList'])) {
            throw new Error("Expected the field `additionalRecipientEmailList` to be an array in the JSON data but got " + data['additionalRecipientEmailList']);
        }
        // ensure the json data is a string
        if (data['alertNotificationCulture'] && !(typeof data['alertNotificationCulture'] === 'string' || data['alertNotificationCulture'] instanceof String)) {
            throw new Error("Expected the field `alertNotificationCulture` to be a primitive type in the JSON string but got " + data['alertNotificationCulture']);
        }
        // ensure the json data is a string
        if (data['emailNotification'] && !(typeof data['emailNotification'] === 'string' || data['emailNotification'] instanceof String)) {
            throw new Error("Expected the field `emailNotification` to be a primitive type in the JSON string but got " + data['emailNotification']);
        }
        // ensure the json data is a string
        if (data['notificationToServiceOwners'] && !(typeof data['notificationToServiceOwners'] === 'string' || data['notificationToServiceOwners'] instanceof String)) {
            throw new Error("Expected the field `notificationToServiceOwners` to be a primitive type in the JSON string but got " + data['notificationToServiceOwners']);
        }

        return true;
    }


}

AlertNotificationProperties.RequiredProperties = ["emailNotification"];

/**
 * The alert notification email list.
 * @member {Array.<String>} additionalRecipientEmailList
 */
AlertNotificationProperties.prototype['additionalRecipientEmailList'] = undefined;

/**
 * The alert notification culture.
 * @member {String} alertNotificationCulture
 */
AlertNotificationProperties.prototype['alertNotificationCulture'] = undefined;

/**
 * Indicates whether email notification enabled or not.
 * @member {module:model/AlertNotificationProperties.EmailNotificationEnum} emailNotification
 */
AlertNotificationProperties.prototype['emailNotification'] = undefined;

/**
 * The value indicating whether alert notification enabled for admin or not.
 * @member {module:model/AlertNotificationProperties.NotificationToServiceOwnersEnum} notificationToServiceOwners
 */
AlertNotificationProperties.prototype['notificationToServiceOwners'] = undefined;





/**
 * Allowed values for the <code>emailNotification</code> property.
 * @enum {String}
 * @readonly
 */
AlertNotificationProperties['EmailNotificationEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>notificationToServiceOwners</code> property.
 * @enum {String}
 * @readonly
 */
AlertNotificationProperties['NotificationToServiceOwnersEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default AlertNotificationProperties;

