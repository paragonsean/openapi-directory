/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionFilter from './DimensionFilter';
import MetricNameFilter from './MetricNameFilter';

/**
 * The MetricFilter model module.
 * @module model/MetricFilter
 * @version 2017-06-01
 */
class MetricFilter {
    /**
     * Constructs a new <code>MetricFilter</code>.
     * The OData filters to be used for metrics.
     * @alias module:model/MetricFilter
     * @param category {String} Specifies the category of the metrics to be filtered. E.g., \"CapacityUtilization\". Valid values are the ones returned as the field \"category\" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.
     */
    constructor(category) { 
        
        MetricFilter.initialize(this, category);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category) { 
        obj['category'] = category;
    }

    /**
     * Constructs a <code>MetricFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricFilter} obj Optional instance to populate.
     * @return {module:model/MetricFilter} The populated <code>MetricFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricFilter();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = DimensionFilter.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = MetricNameFilter.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('timeGrain')) {
                obj['timeGrain'] = ApiClient.convertToType(data['timeGrain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          DimensionFilter.validateJSON(data['dimensions']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          MetricNameFilter.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['timeGrain'] && !(typeof data['timeGrain'] === 'string' || data['timeGrain'] instanceof String)) {
            throw new Error("Expected the field `timeGrain` to be a primitive type in the JSON string but got " + data['timeGrain']);
        }

        return true;
    }


}

MetricFilter.RequiredProperties = ["category"];

/**
 * Specifies the category of the metrics to be filtered. E.g., \"CapacityUtilization\". Valid values are the ones returned as the field \"category\" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.
 * @member {String} category
 */
MetricFilter.prototype['category'] = undefined;

/**
 * @member {module:model/DimensionFilter} dimensions
 */
MetricFilter.prototype['dimensions'] = undefined;

/**
 * Specifies the end time of the time range to be queried. Only 'Less Than Or Equal To' operator is supported for this property.
 * @member {Date} endTime
 */
MetricFilter.prototype['endTime'] = undefined;

/**
 * @member {module:model/MetricNameFilter} name
 */
MetricFilter.prototype['name'] = undefined;

/**
 * Specifies the start time of the time range to be queried. Only 'Greater Than Or Equal To' operator is supported for this property.
 * @member {Date} startTime
 */
MetricFilter.prototype['startTime'] = undefined;

/**
 * Specifies the time granularity of the metrics to be returned. E.g., \"P1D\". Valid values are the ones returned as the field \"timeGrain\" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property.
 * @member {String} timeGrain
 */
MetricFilter.prototype['timeGrain'] = undefined;






export default MetricFilter;

