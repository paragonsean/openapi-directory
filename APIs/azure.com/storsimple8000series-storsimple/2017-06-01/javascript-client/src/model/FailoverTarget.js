/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TargetEligibilityResult from './TargetEligibilityResult';

/**
 * The FailoverTarget model module.
 * @module model/FailoverTarget
 * @version 2017-06-01
 */
class FailoverTarget {
    /**
     * Constructs a new <code>FailoverTarget</code>.
     * Represents the eligibility of a device as a failover target device.
     * @alias module:model/FailoverTarget
     */
    constructor() { 
        
        FailoverTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FailoverTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FailoverTarget} obj Optional instance to populate.
     * @return {module:model/FailoverTarget} The populated <code>FailoverTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FailoverTarget();

            if (data.hasOwnProperty('availableLocalStorageInBytes')) {
                obj['availableLocalStorageInBytes'] = ApiClient.convertToType(data['availableLocalStorageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('availableTieredStorageInBytes')) {
                obj['availableTieredStorageInBytes'] = ApiClient.convertToType(data['availableTieredStorageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('dataContainersCount')) {
                obj['dataContainersCount'] = ApiClient.convertToType(data['dataContainersCount'], 'Number');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('deviceLocation')) {
                obj['deviceLocation'] = ApiClient.convertToType(data['deviceLocation'], 'String');
            }
            if (data.hasOwnProperty('deviceSoftwareVersion')) {
                obj['deviceSoftwareVersion'] = ApiClient.convertToType(data['deviceSoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('deviceStatus')) {
                obj['deviceStatus'] = ApiClient.convertToType(data['deviceStatus'], 'String');
            }
            if (data.hasOwnProperty('eligibilityResult')) {
                obj['eligibilityResult'] = TargetEligibilityResult.constructFromObject(data['eligibilityResult']);
            }
            if (data.hasOwnProperty('friendlyDeviceSoftwareVersion')) {
                obj['friendlyDeviceSoftwareVersion'] = ApiClient.convertToType(data['friendlyDeviceSoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('modelDescription')) {
                obj['modelDescription'] = ApiClient.convertToType(data['modelDescription'], 'String');
            }
            if (data.hasOwnProperty('volumesCount')) {
                obj['volumesCount'] = ApiClient.convertToType(data['volumesCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FailoverTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FailoverTarget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['deviceLocation'] && !(typeof data['deviceLocation'] === 'string' || data['deviceLocation'] instanceof String)) {
            throw new Error("Expected the field `deviceLocation` to be a primitive type in the JSON string but got " + data['deviceLocation']);
        }
        // ensure the json data is a string
        if (data['deviceSoftwareVersion'] && !(typeof data['deviceSoftwareVersion'] === 'string' || data['deviceSoftwareVersion'] instanceof String)) {
            throw new Error("Expected the field `deviceSoftwareVersion` to be a primitive type in the JSON string but got " + data['deviceSoftwareVersion']);
        }
        // ensure the json data is a string
        if (data['deviceStatus'] && !(typeof data['deviceStatus'] === 'string' || data['deviceStatus'] instanceof String)) {
            throw new Error("Expected the field `deviceStatus` to be a primitive type in the JSON string but got " + data['deviceStatus']);
        }
        // validate the optional field `eligibilityResult`
        if (data['eligibilityResult']) { // data not null
          TargetEligibilityResult.validateJSON(data['eligibilityResult']);
        }
        // ensure the json data is a string
        if (data['friendlyDeviceSoftwareVersion'] && !(typeof data['friendlyDeviceSoftwareVersion'] === 'string' || data['friendlyDeviceSoftwareVersion'] instanceof String)) {
            throw new Error("Expected the field `friendlyDeviceSoftwareVersion` to be a primitive type in the JSON string but got " + data['friendlyDeviceSoftwareVersion']);
        }
        // ensure the json data is a string
        if (data['modelDescription'] && !(typeof data['modelDescription'] === 'string' || data['modelDescription'] instanceof String)) {
            throw new Error("Expected the field `modelDescription` to be a primitive type in the JSON string but got " + data['modelDescription']);
        }

        return true;
    }


}



/**
 * The amount of free local storage available on the device in bytes.
 * @member {Number} availableLocalStorageInBytes
 */
FailoverTarget.prototype['availableLocalStorageInBytes'] = undefined;

/**
 * The amount of free tiered storage available for the device in bytes.
 * @member {Number} availableTieredStorageInBytes
 */
FailoverTarget.prototype['availableTieredStorageInBytes'] = undefined;

/**
 * The count of data containers on the device.
 * @member {Number} dataContainersCount
 */
FailoverTarget.prototype['dataContainersCount'] = undefined;

/**
 * The path ID of the device.
 * @member {String} deviceId
 */
FailoverTarget.prototype['deviceId'] = undefined;

/**
 * The geo location (applicable only for cloud appliances) of the device.
 * @member {String} deviceLocation
 */
FailoverTarget.prototype['deviceLocation'] = undefined;

/**
 * The software version of the device.
 * @member {String} deviceSoftwareVersion
 */
FailoverTarget.prototype['deviceSoftwareVersion'] = undefined;

/**
 * The status of the device.
 * @member {module:model/FailoverTarget.DeviceStatusEnum} deviceStatus
 */
FailoverTarget.prototype['deviceStatus'] = undefined;

/**
 * @member {module:model/TargetEligibilityResult} eligibilityResult
 */
FailoverTarget.prototype['eligibilityResult'] = undefined;

/**
 * The friendly name for the current version of software on the device.
 * @member {String} friendlyDeviceSoftwareVersion
 */
FailoverTarget.prototype['friendlyDeviceSoftwareVersion'] = undefined;

/**
 * The model number of the device.
 * @member {String} modelDescription
 */
FailoverTarget.prototype['modelDescription'] = undefined;

/**
 * The count of volumes on the device.
 * @member {Number} volumesCount
 */
FailoverTarget.prototype['volumesCount'] = undefined;





/**
 * Allowed values for the <code>deviceStatus</code> property.
 * @enum {String}
 * @readonly
 */
FailoverTarget['DeviceStatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "Deactivated"
     * @const
     */
    "Deactivated": "Deactivated",

    /**
     * value: "RequiresAttention"
     * @const
     */
    "RequiresAttention": "RequiresAttention",

    /**
     * value: "MaintenanceMode"
     * @const
     */
    "MaintenanceMode": "MaintenanceMode",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Provisioning"
     * @const
     */
    "Provisioning": "Provisioning",

    /**
     * value: "Deactivating"
     * @const
     */
    "Deactivating": "Deactivating",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "ReadyToSetup"
     * @const
     */
    "ReadyToSetup": "ReadyToSetup"
};



export default FailoverTarget;

