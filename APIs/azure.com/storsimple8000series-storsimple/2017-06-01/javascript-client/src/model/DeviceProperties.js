/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceDetails from './DeviceDetails';
import DeviceRolloverDetails from './DeviceRolloverDetails';

/**
 * The DeviceProperties model module.
 * @module model/DeviceProperties
 * @version 2017-06-01
 */
class DeviceProperties {
    /**
     * Constructs a new <code>DeviceProperties</code>.
     * The properties of the StorSimple device.
     * @alias module:model/DeviceProperties
     * @param activationTime {Date} The UTC time at which the device was activated
     * @param activeController {module:model/DeviceProperties.ActiveControllerEnum} The identifier of the active controller of the device.
     * @param culture {String} The language culture setting on the device. For eg: \"en-US\"
     * @param deviceConfigurationStatus {module:model/DeviceProperties.DeviceConfigurationStatusEnum} The current configuration status of the device.
     * @param deviceDescription {String} The device description.
     * @param deviceSoftwareVersion {String} The version number of the software running on the device.
     * @param deviceType {module:model/DeviceProperties.DeviceTypeEnum} The type of the device.
     * @param friendlyName {String} The friendly name of the device.
     * @param friendlySoftwareVersion {String} The device friendly software version.
     * @param modelDescription {String} The device model.
     * @param serialNumber {String} The serial number.
     * @param status {module:model/DeviceProperties.StatusEnum} The current status of the device.
     * @param targetIqn {String} The target IQN.
     */
    constructor(activationTime, activeController, culture, deviceConfigurationStatus, deviceDescription, deviceSoftwareVersion, deviceType, friendlyName, friendlySoftwareVersion, modelDescription, serialNumber, status, targetIqn) { 
        
        DeviceProperties.initialize(this, activationTime, activeController, culture, deviceConfigurationStatus, deviceDescription, deviceSoftwareVersion, deviceType, friendlyName, friendlySoftwareVersion, modelDescription, serialNumber, status, targetIqn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activationTime, activeController, culture, deviceConfigurationStatus, deviceDescription, deviceSoftwareVersion, deviceType, friendlyName, friendlySoftwareVersion, modelDescription, serialNumber, status, targetIqn) { 
        obj['activationTime'] = activationTime;
        obj['activeController'] = activeController;
        obj['culture'] = culture;
        obj['deviceConfigurationStatus'] = deviceConfigurationStatus;
        obj['deviceDescription'] = deviceDescription;
        obj['deviceSoftwareVersion'] = deviceSoftwareVersion;
        obj['deviceType'] = deviceType;
        obj['friendlyName'] = friendlyName;
        obj['friendlySoftwareVersion'] = friendlySoftwareVersion;
        obj['modelDescription'] = modelDescription;
        obj['serialNumber'] = serialNumber;
        obj['status'] = status;
        obj['targetIqn'] = targetIqn;
    }

    /**
     * Constructs a <code>DeviceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceProperties} obj Optional instance to populate.
     * @return {module:model/DeviceProperties} The populated <code>DeviceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceProperties();

            if (data.hasOwnProperty('activationTime')) {
                obj['activationTime'] = ApiClient.convertToType(data['activationTime'], 'Date');
            }
            if (data.hasOwnProperty('activeController')) {
                obj['activeController'] = ApiClient.convertToType(data['activeController'], 'String');
            }
            if (data.hasOwnProperty('agentGroupVersion')) {
                obj['agentGroupVersion'] = ApiClient.convertToType(data['agentGroupVersion'], 'Number');
            }
            if (data.hasOwnProperty('availableLocalStorageInBytes')) {
                obj['availableLocalStorageInBytes'] = ApiClient.convertToType(data['availableLocalStorageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('availableTieredStorageInBytes')) {
                obj['availableTieredStorageInBytes'] = ApiClient.convertToType(data['availableTieredStorageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('culture')) {
                obj['culture'] = ApiClient.convertToType(data['culture'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = DeviceDetails.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('deviceConfigurationStatus')) {
                obj['deviceConfigurationStatus'] = ApiClient.convertToType(data['deviceConfigurationStatus'], 'String');
            }
            if (data.hasOwnProperty('deviceDescription')) {
                obj['deviceDescription'] = ApiClient.convertToType(data['deviceDescription'], 'String');
            }
            if (data.hasOwnProperty('deviceLocation')) {
                obj['deviceLocation'] = ApiClient.convertToType(data['deviceLocation'], 'String');
            }
            if (data.hasOwnProperty('deviceSoftwareVersion')) {
                obj['deviceSoftwareVersion'] = ApiClient.convertToType(data['deviceSoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('friendlySoftwareName')) {
                obj['friendlySoftwareName'] = ApiClient.convertToType(data['friendlySoftwareName'], 'String');
            }
            if (data.hasOwnProperty('friendlySoftwareVersion')) {
                obj['friendlySoftwareVersion'] = ApiClient.convertToType(data['friendlySoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('modelDescription')) {
                obj['modelDescription'] = ApiClient.convertToType(data['modelDescription'], 'String');
            }
            if (data.hasOwnProperty('networkInterfaceCardCount')) {
                obj['networkInterfaceCardCount'] = ApiClient.convertToType(data['networkInterfaceCardCount'], 'Number');
            }
            if (data.hasOwnProperty('provisionedLocalStorageInBytes')) {
                obj['provisionedLocalStorageInBytes'] = ApiClient.convertToType(data['provisionedLocalStorageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('provisionedTieredStorageInBytes')) {
                obj['provisionedTieredStorageInBytes'] = ApiClient.convertToType(data['provisionedTieredStorageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('provisionedVolumeSizeInBytes')) {
                obj['provisionedVolumeSizeInBytes'] = ApiClient.convertToType(data['provisionedVolumeSizeInBytes'], 'Number');
            }
            if (data.hasOwnProperty('rolloverDetails')) {
                obj['rolloverDetails'] = DeviceRolloverDetails.constructFromObject(data['rolloverDetails']);
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('targetIqn')) {
                obj['targetIqn'] = ApiClient.convertToType(data['targetIqn'], 'String');
            }
            if (data.hasOwnProperty('totalTieredStorageInBytes')) {
                obj['totalTieredStorageInBytes'] = ApiClient.convertToType(data['totalTieredStorageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('usingStorageInBytes')) {
                obj['usingStorageInBytes'] = ApiClient.convertToType(data['usingStorageInBytes'], 'Number');
            }
            if (data.hasOwnProperty('virtualMachineApiType')) {
                obj['virtualMachineApiType'] = ApiClient.convertToType(data['virtualMachineApiType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['activeController'] && !(typeof data['activeController'] === 'string' || data['activeController'] instanceof String)) {
            throw new Error("Expected the field `activeController` to be a primitive type in the JSON string but got " + data['activeController']);
        }
        // ensure the json data is a string
        if (data['culture'] && !(typeof data['culture'] === 'string' || data['culture'] instanceof String)) {
            throw new Error("Expected the field `culture` to be a primitive type in the JSON string but got " + data['culture']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          DeviceDetails.validateJSON(data['details']);
        }
        // ensure the json data is a string
        if (data['deviceConfigurationStatus'] && !(typeof data['deviceConfigurationStatus'] === 'string' || data['deviceConfigurationStatus'] instanceof String)) {
            throw new Error("Expected the field `deviceConfigurationStatus` to be a primitive type in the JSON string but got " + data['deviceConfigurationStatus']);
        }
        // ensure the json data is a string
        if (data['deviceDescription'] && !(typeof data['deviceDescription'] === 'string' || data['deviceDescription'] instanceof String)) {
            throw new Error("Expected the field `deviceDescription` to be a primitive type in the JSON string but got " + data['deviceDescription']);
        }
        // ensure the json data is a string
        if (data['deviceLocation'] && !(typeof data['deviceLocation'] === 'string' || data['deviceLocation'] instanceof String)) {
            throw new Error("Expected the field `deviceLocation` to be a primitive type in the JSON string but got " + data['deviceLocation']);
        }
        // ensure the json data is a string
        if (data['deviceSoftwareVersion'] && !(typeof data['deviceSoftwareVersion'] === 'string' || data['deviceSoftwareVersion'] instanceof String)) {
            throw new Error("Expected the field `deviceSoftwareVersion` to be a primitive type in the JSON string but got " + data['deviceSoftwareVersion']);
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['friendlySoftwareName'] && !(typeof data['friendlySoftwareName'] === 'string' || data['friendlySoftwareName'] instanceof String)) {
            throw new Error("Expected the field `friendlySoftwareName` to be a primitive type in the JSON string but got " + data['friendlySoftwareName']);
        }
        // ensure the json data is a string
        if (data['friendlySoftwareVersion'] && !(typeof data['friendlySoftwareVersion'] === 'string' || data['friendlySoftwareVersion'] instanceof String)) {
            throw new Error("Expected the field `friendlySoftwareVersion` to be a primitive type in the JSON string but got " + data['friendlySoftwareVersion']);
        }
        // ensure the json data is a string
        if (data['modelDescription'] && !(typeof data['modelDescription'] === 'string' || data['modelDescription'] instanceof String)) {
            throw new Error("Expected the field `modelDescription` to be a primitive type in the JSON string but got " + data['modelDescription']);
        }
        // validate the optional field `rolloverDetails`
        if (data['rolloverDetails']) { // data not null
          DeviceRolloverDetails.validateJSON(data['rolloverDetails']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['targetIqn'] && !(typeof data['targetIqn'] === 'string' || data['targetIqn'] instanceof String)) {
            throw new Error("Expected the field `targetIqn` to be a primitive type in the JSON string but got " + data['targetIqn']);
        }
        // ensure the json data is a string
        if (data['virtualMachineApiType'] && !(typeof data['virtualMachineApiType'] === 'string' || data['virtualMachineApiType'] instanceof String)) {
            throw new Error("Expected the field `virtualMachineApiType` to be a primitive type in the JSON string but got " + data['virtualMachineApiType']);
        }

        return true;
    }


}

DeviceProperties.RequiredProperties = ["activationTime", "activeController", "culture", "deviceConfigurationStatus", "deviceDescription", "deviceSoftwareVersion", "deviceType", "friendlyName", "friendlySoftwareVersion", "modelDescription", "serialNumber", "status", "targetIqn"];

/**
 * The UTC time at which the device was activated
 * @member {Date} activationTime
 */
DeviceProperties.prototype['activationTime'] = undefined;

/**
 * The identifier of the active controller of the device.
 * @member {module:model/DeviceProperties.ActiveControllerEnum} activeController
 */
DeviceProperties.prototype['activeController'] = undefined;

/**
 * The device agent group version.
 * @member {Number} agentGroupVersion
 */
DeviceProperties.prototype['agentGroupVersion'] = undefined;

/**
 * The storage in bytes that is available locally on the device.
 * @member {Number} availableLocalStorageInBytes
 */
DeviceProperties.prototype['availableLocalStorageInBytes'] = undefined;

/**
 * The storage in bytes that is available on the device for tiered volumes.
 * @member {Number} availableTieredStorageInBytes
 */
DeviceProperties.prototype['availableTieredStorageInBytes'] = undefined;

/**
 * The language culture setting on the device. For eg: \"en-US\"
 * @member {String} culture
 */
DeviceProperties.prototype['culture'] = undefined;

/**
 * @member {module:model/DeviceDetails} details
 */
DeviceProperties.prototype['details'] = undefined;

/**
 * The current configuration status of the device.
 * @member {module:model/DeviceProperties.DeviceConfigurationStatusEnum} deviceConfigurationStatus
 */
DeviceProperties.prototype['deviceConfigurationStatus'] = undefined;

/**
 * The device description.
 * @member {String} deviceDescription
 */
DeviceProperties.prototype['deviceDescription'] = undefined;

/**
 * The location of the virtual appliance.
 * @member {String} deviceLocation
 */
DeviceProperties.prototype['deviceLocation'] = undefined;

/**
 * The version number of the software running on the device.
 * @member {String} deviceSoftwareVersion
 */
DeviceProperties.prototype['deviceSoftwareVersion'] = undefined;

/**
 * The type of the device.
 * @member {module:model/DeviceProperties.DeviceTypeEnum} deviceType
 */
DeviceProperties.prototype['deviceType'] = undefined;

/**
 * The friendly name of the device.
 * @member {String} friendlyName
 */
DeviceProperties.prototype['friendlyName'] = undefined;

/**
 * The friendly name of the software running on the device.
 * @member {String} friendlySoftwareName
 */
DeviceProperties.prototype['friendlySoftwareName'] = undefined;

/**
 * The device friendly software version.
 * @member {String} friendlySoftwareVersion
 */
DeviceProperties.prototype['friendlySoftwareVersion'] = undefined;

/**
 * The device model.
 * @member {String} modelDescription
 */
DeviceProperties.prototype['modelDescription'] = undefined;

/**
 * The number of network interface cards
 * @member {Number} networkInterfaceCardCount
 */
DeviceProperties.prototype['networkInterfaceCardCount'] = undefined;

/**
 * The storage in bytes used for locally pinned volumes on the device (including additional local reservation).
 * @member {Number} provisionedLocalStorageInBytes
 */
DeviceProperties.prototype['provisionedLocalStorageInBytes'] = undefined;

/**
 * The storage in bytes that has been provisioned on the device for tiered volumes.
 * @member {Number} provisionedTieredStorageInBytes
 */
DeviceProperties.prototype['provisionedTieredStorageInBytes'] = undefined;

/**
 * Total capacity in bytes of tiered and locally pinned volumes on the device
 * @member {Number} provisionedVolumeSizeInBytes
 */
DeviceProperties.prototype['provisionedVolumeSizeInBytes'] = undefined;

/**
 * @member {module:model/DeviceRolloverDetails} rolloverDetails
 */
DeviceProperties.prototype['rolloverDetails'] = undefined;

/**
 * The serial number.
 * @member {String} serialNumber
 */
DeviceProperties.prototype['serialNumber'] = undefined;

/**
 * The current status of the device.
 * @member {module:model/DeviceProperties.StatusEnum} status
 */
DeviceProperties.prototype['status'] = undefined;

/**
 * The target IQN.
 * @member {String} targetIqn
 */
DeviceProperties.prototype['targetIqn'] = undefined;

/**
 * The total tiered storage available on the device in bytes.
 * @member {Number} totalTieredStorageInBytes
 */
DeviceProperties.prototype['totalTieredStorageInBytes'] = undefined;

/**
 * The storage in bytes that is currently being used on the device, including both local and cloud.
 * @member {Number} usingStorageInBytes
 */
DeviceProperties.prototype['usingStorageInBytes'] = undefined;

/**
 * The virtual machine API type.
 * @member {module:model/DeviceProperties.VirtualMachineApiTypeEnum} virtualMachineApiType
 */
DeviceProperties.prototype['virtualMachineApiType'] = undefined;





/**
 * Allowed values for the <code>activeController</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['ActiveControllerEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Controller0"
     * @const
     */
    "Controller0": "Controller0",

    /**
     * value: "Controller1"
     * @const
     */
    "Controller1": "Controller1"
};


/**
 * Allowed values for the <code>deviceConfigurationStatus</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['DeviceConfigurationStatusEnum'] = {

    /**
     * value: "Complete"
     * @const
     */
    "Complete": "Complete",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending"
};


/**
 * Allowed values for the <code>deviceType</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['DeviceTypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Series8000VirtualAppliance"
     * @const
     */
    "Series8000VirtualAppliance": "Series8000VirtualAppliance",

    /**
     * value: "Series8000PhysicalAppliance"
     * @const
     */
    "Series8000PhysicalAppliance": "Series8000PhysicalAppliance"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['StatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "Deactivated"
     * @const
     */
    "Deactivated": "Deactivated",

    /**
     * value: "RequiresAttention"
     * @const
     */
    "RequiresAttention": "RequiresAttention",

    /**
     * value: "MaintenanceMode"
     * @const
     */
    "MaintenanceMode": "MaintenanceMode",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Provisioning"
     * @const
     */
    "Provisioning": "Provisioning",

    /**
     * value: "Deactivating"
     * @const
     */
    "Deactivating": "Deactivating",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "ReadyToSetup"
     * @const
     */
    "ReadyToSetup": "ReadyToSetup"
};


/**
 * Allowed values for the <code>virtualMachineApiType</code> property.
 * @enum {String}
 * @readonly
 */
DeviceProperties['VirtualMachineApiTypeEnum'] = {

    /**
     * value: "Classic"
     * @const
     */
    "Classic": "Classic",

    /**
     * value: "Arm"
     * @const
     */
    "Arm": "Arm"
};



export default DeviceProperties;

