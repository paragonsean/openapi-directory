/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ControllerPowerStateChangeRequestProperties model module.
 * @module model/ControllerPowerStateChangeRequestProperties
 * @version 2017-06-01
 */
class ControllerPowerStateChangeRequestProperties {
    /**
     * Constructs a new <code>ControllerPowerStateChangeRequestProperties</code>.
     * The properties of the controller power state change request.
     * @alias module:model/ControllerPowerStateChangeRequestProperties
     * @param action {module:model/ControllerPowerStateChangeRequestProperties.ActionEnum} The power state that the request is expecting for the controller of the device.
     * @param activeController {module:model/ControllerPowerStateChangeRequestProperties.ActiveControllerEnum} The active controller that the request is expecting on the device.
     * @param controller0State {module:model/ControllerPowerStateChangeRequestProperties.Controller0StateEnum} The controller 0's status that the request is expecting on the device.
     * @param controller1State {module:model/ControllerPowerStateChangeRequestProperties.Controller1StateEnum} The controller 1's status that the request is expecting on the device.
     */
    constructor(action, activeController, controller0State, controller1State) { 
        
        ControllerPowerStateChangeRequestProperties.initialize(this, action, activeController, controller0State, controller1State);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, activeController, controller0State, controller1State) { 
        obj['action'] = action;
        obj['activeController'] = activeController;
        obj['controller0State'] = controller0State;
        obj['controller1State'] = controller1State;
    }

    /**
     * Constructs a <code>ControllerPowerStateChangeRequestProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ControllerPowerStateChangeRequestProperties} obj Optional instance to populate.
     * @return {module:model/ControllerPowerStateChangeRequestProperties} The populated <code>ControllerPowerStateChangeRequestProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ControllerPowerStateChangeRequestProperties();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('activeController')) {
                obj['activeController'] = ApiClient.convertToType(data['activeController'], 'String');
            }
            if (data.hasOwnProperty('controller0State')) {
                obj['controller0State'] = ApiClient.convertToType(data['controller0State'], 'String');
            }
            if (data.hasOwnProperty('controller1State')) {
                obj['controller1State'] = ApiClient.convertToType(data['controller1State'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ControllerPowerStateChangeRequestProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ControllerPowerStateChangeRequestProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ControllerPowerStateChangeRequestProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['activeController'] && !(typeof data['activeController'] === 'string' || data['activeController'] instanceof String)) {
            throw new Error("Expected the field `activeController` to be a primitive type in the JSON string but got " + data['activeController']);
        }
        // ensure the json data is a string
        if (data['controller0State'] && !(typeof data['controller0State'] === 'string' || data['controller0State'] instanceof String)) {
            throw new Error("Expected the field `controller0State` to be a primitive type in the JSON string but got " + data['controller0State']);
        }
        // ensure the json data is a string
        if (data['controller1State'] && !(typeof data['controller1State'] === 'string' || data['controller1State'] instanceof String)) {
            throw new Error("Expected the field `controller1State` to be a primitive type in the JSON string but got " + data['controller1State']);
        }

        return true;
    }


}

ControllerPowerStateChangeRequestProperties.RequiredProperties = ["action", "activeController", "controller0State", "controller1State"];

/**
 * The power state that the request is expecting for the controller of the device.
 * @member {module:model/ControllerPowerStateChangeRequestProperties.ActionEnum} action
 */
ControllerPowerStateChangeRequestProperties.prototype['action'] = undefined;

/**
 * The active controller that the request is expecting on the device.
 * @member {module:model/ControllerPowerStateChangeRequestProperties.ActiveControllerEnum} activeController
 */
ControllerPowerStateChangeRequestProperties.prototype['activeController'] = undefined;

/**
 * The controller 0's status that the request is expecting on the device.
 * @member {module:model/ControllerPowerStateChangeRequestProperties.Controller0StateEnum} controller0State
 */
ControllerPowerStateChangeRequestProperties.prototype['controller0State'] = undefined;

/**
 * The controller 1's status that the request is expecting on the device.
 * @member {module:model/ControllerPowerStateChangeRequestProperties.Controller1StateEnum} controller1State
 */
ControllerPowerStateChangeRequestProperties.prototype['controller1State'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
ControllerPowerStateChangeRequestProperties['ActionEnum'] = {

    /**
     * value: "Start"
     * @const
     */
    "Start": "Start",

    /**
     * value: "Restart"
     * @const
     */
    "Restart": "Restart",

    /**
     * value: "Shutdown"
     * @const
     */
    "Shutdown": "Shutdown"
};


/**
 * Allowed values for the <code>activeController</code> property.
 * @enum {String}
 * @readonly
 */
ControllerPowerStateChangeRequestProperties['ActiveControllerEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Controller0"
     * @const
     */
    "Controller0": "Controller0",

    /**
     * value: "Controller1"
     * @const
     */
    "Controller1": "Controller1"
};


/**
 * Allowed values for the <code>controller0State</code> property.
 * @enum {String}
 * @readonly
 */
ControllerPowerStateChangeRequestProperties['Controller0StateEnum'] = {

    /**
     * value: "NotPresent"
     * @const
     */
    "NotPresent": "NotPresent",

    /**
     * value: "PoweredOff"
     * @const
     */
    "PoweredOff": "PoweredOff",

    /**
     * value: "Ok"
     * @const
     */
    "Ok": "Ok",

    /**
     * value: "Recovering"
     * @const
     */
    "Recovering": "Recovering",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Failure"
     * @const
     */
    "Failure": "Failure"
};


/**
 * Allowed values for the <code>controller1State</code> property.
 * @enum {String}
 * @readonly
 */
ControllerPowerStateChangeRequestProperties['Controller1StateEnum'] = {

    /**
     * value: "NotPresent"
     * @const
     */
    "NotPresent": "NotPresent",

    /**
     * value: "PoweredOff"
     * @const
     */
    "PoweredOff": "PoweredOff",

    /**
     * value: "Ok"
     * @const
     */
    "Ok": "Ok",

    /**
     * value: "Recovering"
     * @const
     */
    "Recovering": "Recovering",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Failure"
     * @const
     */
    "Failure": "Failure"
};



export default ControllerPowerStateChangeRequestProperties;

