/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BackupElement model module.
 * @module model/BackupElement
 * @version 2017-06-01
 */
class BackupElement {
    /**
     * Constructs a new <code>BackupElement</code>.
     * The backup element.
     * @alias module:model/BackupElement
     * @param elementId {String} The path ID that uniquely identifies the backup element.
     * @param elementName {String} The name of the backup element.
     * @param elementType {String} The hierarchical type of the backup element.
     * @param sizeInBytes {Number} The size in bytes.
     * @param volumeContainerId {String} The path ID of the volume container.
     * @param volumeName {String} The name of the volume.
     */
    constructor(elementId, elementName, elementType, sizeInBytes, volumeContainerId, volumeName) { 
        
        BackupElement.initialize(this, elementId, elementName, elementType, sizeInBytes, volumeContainerId, volumeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, elementId, elementName, elementType, sizeInBytes, volumeContainerId, volumeName) { 
        obj['elementId'] = elementId;
        obj['elementName'] = elementName;
        obj['elementType'] = elementType;
        obj['sizeInBytes'] = sizeInBytes;
        obj['volumeContainerId'] = volumeContainerId;
        obj['volumeName'] = volumeName;
    }

    /**
     * Constructs a <code>BackupElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackupElement} obj Optional instance to populate.
     * @return {module:model/BackupElement} The populated <code>BackupElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BackupElement();

            if (data.hasOwnProperty('elementId')) {
                obj['elementId'] = ApiClient.convertToType(data['elementId'], 'String');
            }
            if (data.hasOwnProperty('elementName')) {
                obj['elementName'] = ApiClient.convertToType(data['elementName'], 'String');
            }
            if (data.hasOwnProperty('elementType')) {
                obj['elementType'] = ApiClient.convertToType(data['elementType'], 'String');
            }
            if (data.hasOwnProperty('sizeInBytes')) {
                obj['sizeInBytes'] = ApiClient.convertToType(data['sizeInBytes'], 'Number');
            }
            if (data.hasOwnProperty('volumeContainerId')) {
                obj['volumeContainerId'] = ApiClient.convertToType(data['volumeContainerId'], 'String');
            }
            if (data.hasOwnProperty('volumeName')) {
                obj['volumeName'] = ApiClient.convertToType(data['volumeName'], 'String');
            }
            if (data.hasOwnProperty('volumeType')) {
                obj['volumeType'] = ApiClient.convertToType(data['volumeType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BackupElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BackupElement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BackupElement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['elementId'] && !(typeof data['elementId'] === 'string' || data['elementId'] instanceof String)) {
            throw new Error("Expected the field `elementId` to be a primitive type in the JSON string but got " + data['elementId']);
        }
        // ensure the json data is a string
        if (data['elementName'] && !(typeof data['elementName'] === 'string' || data['elementName'] instanceof String)) {
            throw new Error("Expected the field `elementName` to be a primitive type in the JSON string but got " + data['elementName']);
        }
        // ensure the json data is a string
        if (data['elementType'] && !(typeof data['elementType'] === 'string' || data['elementType'] instanceof String)) {
            throw new Error("Expected the field `elementType` to be a primitive type in the JSON string but got " + data['elementType']);
        }
        // ensure the json data is a string
        if (data['volumeContainerId'] && !(typeof data['volumeContainerId'] === 'string' || data['volumeContainerId'] instanceof String)) {
            throw new Error("Expected the field `volumeContainerId` to be a primitive type in the JSON string but got " + data['volumeContainerId']);
        }
        // ensure the json data is a string
        if (data['volumeName'] && !(typeof data['volumeName'] === 'string' || data['volumeName'] instanceof String)) {
            throw new Error("Expected the field `volumeName` to be a primitive type in the JSON string but got " + data['volumeName']);
        }
        // ensure the json data is a string
        if (data['volumeType'] && !(typeof data['volumeType'] === 'string' || data['volumeType'] instanceof String)) {
            throw new Error("Expected the field `volumeType` to be a primitive type in the JSON string but got " + data['volumeType']);
        }

        return true;
    }


}

BackupElement.RequiredProperties = ["elementId", "elementName", "elementType", "sizeInBytes", "volumeContainerId", "volumeName"];

/**
 * The path ID that uniquely identifies the backup element.
 * @member {String} elementId
 */
BackupElement.prototype['elementId'] = undefined;

/**
 * The name of the backup element.
 * @member {String} elementName
 */
BackupElement.prototype['elementName'] = undefined;

/**
 * The hierarchical type of the backup element.
 * @member {String} elementType
 */
BackupElement.prototype['elementType'] = undefined;

/**
 * The size in bytes.
 * @member {Number} sizeInBytes
 */
BackupElement.prototype['sizeInBytes'] = undefined;

/**
 * The path ID of the volume container.
 * @member {String} volumeContainerId
 */
BackupElement.prototype['volumeContainerId'] = undefined;

/**
 * The name of the volume.
 * @member {String} volumeName
 */
BackupElement.prototype['volumeName'] = undefined;

/**
 * The volume type.
 * @member {module:model/BackupElement.VolumeTypeEnum} volumeType
 */
BackupElement.prototype['volumeType'] = undefined;





/**
 * Allowed values for the <code>volumeType</code> property.
 * @enum {String}
 * @readonly
 */
BackupElement['VolumeTypeEnum'] = {

    /**
     * value: "Tiered"
     * @const
     */
    "Tiered": "Tiered",

    /**
     * value: "Archival"
     * @const
     */
    "Archival": "Archival",

    /**
     * value: "LocallyPinned"
     * @const
     */
    "LocallyPinned": "LocallyPinned"
};



export default BackupElement;

