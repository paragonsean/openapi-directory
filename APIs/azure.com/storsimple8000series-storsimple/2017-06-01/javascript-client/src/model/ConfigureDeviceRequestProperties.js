/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkInterfaceData0Settings from './NetworkInterfaceData0Settings';
import SecondaryDNSSettings from './SecondaryDNSSettings';

/**
 * The ConfigureDeviceRequestProperties model module.
 * @module model/ConfigureDeviceRequestProperties
 * @version 2017-06-01
 */
class ConfigureDeviceRequestProperties {
    /**
     * Constructs a new <code>ConfigureDeviceRequestProperties</code>.
     * The properties of the configure device request.
     * @alias module:model/ConfigureDeviceRequestProperties
     * @param currentDeviceName {String} The current name of the device.
     * @param friendlyName {String} The friendly name for the device.
     * @param timeZone {String} The device time zone. For eg: \"Pacific Standard Time\"
     */
    constructor(currentDeviceName, friendlyName, timeZone) { 
        
        ConfigureDeviceRequestProperties.initialize(this, currentDeviceName, friendlyName, timeZone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentDeviceName, friendlyName, timeZone) { 
        obj['currentDeviceName'] = currentDeviceName;
        obj['friendlyName'] = friendlyName;
        obj['timeZone'] = timeZone;
    }

    /**
     * Constructs a <code>ConfigureDeviceRequestProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigureDeviceRequestProperties} obj Optional instance to populate.
     * @return {module:model/ConfigureDeviceRequestProperties} The populated <code>ConfigureDeviceRequestProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigureDeviceRequestProperties();

            if (data.hasOwnProperty('currentDeviceName')) {
                obj['currentDeviceName'] = ApiClient.convertToType(data['currentDeviceName'], 'String');
            }
            if (data.hasOwnProperty('dnsSettings')) {
                obj['dnsSettings'] = SecondaryDNSSettings.constructFromObject(data['dnsSettings']);
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('networkInterfaceData0Settings')) {
                obj['networkInterfaceData0Settings'] = NetworkInterfaceData0Settings.constructFromObject(data['networkInterfaceData0Settings']);
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigureDeviceRequestProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigureDeviceRequestProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConfigureDeviceRequestProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currentDeviceName'] && !(typeof data['currentDeviceName'] === 'string' || data['currentDeviceName'] instanceof String)) {
            throw new Error("Expected the field `currentDeviceName` to be a primitive type in the JSON string but got " + data['currentDeviceName']);
        }
        // validate the optional field `dnsSettings`
        if (data['dnsSettings']) { // data not null
          SecondaryDNSSettings.validateJSON(data['dnsSettings']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // validate the optional field `networkInterfaceData0Settings`
        if (data['networkInterfaceData0Settings']) { // data not null
          NetworkInterfaceData0Settings.validateJSON(data['networkInterfaceData0Settings']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}

ConfigureDeviceRequestProperties.RequiredProperties = ["currentDeviceName", "friendlyName", "timeZone"];

/**
 * The current name of the device.
 * @member {String} currentDeviceName
 */
ConfigureDeviceRequestProperties.prototype['currentDeviceName'] = undefined;

/**
 * @member {module:model/SecondaryDNSSettings} dnsSettings
 */
ConfigureDeviceRequestProperties.prototype['dnsSettings'] = undefined;

/**
 * The friendly name for the device.
 * @member {String} friendlyName
 */
ConfigureDeviceRequestProperties.prototype['friendlyName'] = undefined;

/**
 * @member {module:model/NetworkInterfaceData0Settings} networkInterfaceData0Settings
 */
ConfigureDeviceRequestProperties.prototype['networkInterfaceData0Settings'] = undefined;

/**
 * The device time zone. For eg: \"Pacific Standard Time\"
 * @member {String} timeZone
 */
ConfigureDeviceRequestProperties.prototype['timeZone'] = undefined;






export default ConfigureDeviceRequestProperties;

