/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TargetEligibilityErrorMessage model module.
 * @module model/TargetEligibilityErrorMessage
 * @version 2017-06-01
 */
class TargetEligibilityErrorMessage {
    /**
     * Constructs a new <code>TargetEligibilityErrorMessage</code>.
     * The error/warning message due to which the device is ineligible as a failover target device.
     * @alias module:model/TargetEligibilityErrorMessage
     */
    constructor() { 
        
        TargetEligibilityErrorMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TargetEligibilityErrorMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetEligibilityErrorMessage} obj Optional instance to populate.
     * @return {module:model/TargetEligibilityErrorMessage} The populated <code>TargetEligibilityErrorMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TargetEligibilityErrorMessage();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TargetEligibilityErrorMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TargetEligibilityErrorMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['resultCode'] && !(typeof data['resultCode'] === 'string' || data['resultCode'] instanceof String)) {
            throw new Error("Expected the field `resultCode` to be a primitive type in the JSON string but got " + data['resultCode']);
        }

        return true;
    }


}



/**
 * The localized error message stating the reason why the device is not eligible as a target device.
 * @member {String} message
 */
TargetEligibilityErrorMessage.prototype['message'] = undefined;

/**
 * The localized resolution message for the error.
 * @member {String} resolution
 */
TargetEligibilityErrorMessage.prototype['resolution'] = undefined;

/**
 * The result code for the error, due to which the device does not qualify as a failover target device.
 * @member {module:model/TargetEligibilityErrorMessage.ResultCodeEnum} resultCode
 */
TargetEligibilityErrorMessage.prototype['resultCode'] = undefined;





/**
 * Allowed values for the <code>resultCode</code> property.
 * @enum {String}
 * @readonly
 */
TargetEligibilityErrorMessage['ResultCodeEnum'] = {

    /**
     * value: "TargetAndSourceCannotBeSameError"
     * @const
     */
    "TargetAndSourceCannotBeSameError": "TargetAndSourceCannotBeSameError",

    /**
     * value: "TargetIsNotOnlineError"
     * @const
     */
    "TargetIsNotOnlineError": "TargetIsNotOnlineError",

    /**
     * value: "TargetSourceIncompatibleVersionError"
     * @const
     */
    "TargetSourceIncompatibleVersionError": "TargetSourceIncompatibleVersionError",

    /**
     * value: "LocalToTieredVolumesConversionWarning"
     * @const
     */
    "LocalToTieredVolumesConversionWarning": "LocalToTieredVolumesConversionWarning",

    /**
     * value: "TargetInsufficientCapacityError"
     * @const
     */
    "TargetInsufficientCapacityError": "TargetInsufficientCapacityError",

    /**
     * value: "TargetInsufficientLocalVolumeMemoryError"
     * @const
     */
    "TargetInsufficientLocalVolumeMemoryError": "TargetInsufficientLocalVolumeMemoryError",

    /**
     * value: "TargetInsufficientTieredVolumeMemoryError"
     * @const
     */
    "TargetInsufficientTieredVolumeMemoryError": "TargetInsufficientTieredVolumeMemoryError"
};



export default TargetEligibilityErrorMessage;

