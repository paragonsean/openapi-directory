/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackupElement from './BackupElement';

/**
 * The CloneRequest model module.
 * @module model/CloneRequest
 * @version 2017-06-01
 */
class CloneRequest {
    /**
     * Constructs a new <code>CloneRequest</code>.
     * The clone job request.
     * @alias module:model/CloneRequest
     * @param backupElement {module:model/BackupElement} 
     * @param targetAccessControlRecordIds {Array.<String>} The list of path IDs of the access control records to be associated to the new cloned volume.
     * @param targetDeviceId {String} The path ID of the device which will act as the clone target.
     * @param targetVolumeName {String} The name of the new volume which will be created and the backup will be cloned into.
     */
    constructor(backupElement, targetAccessControlRecordIds, targetDeviceId, targetVolumeName) { 
        
        CloneRequest.initialize(this, backupElement, targetAccessControlRecordIds, targetDeviceId, targetVolumeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backupElement, targetAccessControlRecordIds, targetDeviceId, targetVolumeName) { 
        obj['backupElement'] = backupElement;
        obj['targetAccessControlRecordIds'] = targetAccessControlRecordIds;
        obj['targetDeviceId'] = targetDeviceId;
        obj['targetVolumeName'] = targetVolumeName;
    }

    /**
     * Constructs a <code>CloneRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloneRequest} obj Optional instance to populate.
     * @return {module:model/CloneRequest} The populated <code>CloneRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloneRequest();

            if (data.hasOwnProperty('backupElement')) {
                obj['backupElement'] = BackupElement.constructFromObject(data['backupElement']);
            }
            if (data.hasOwnProperty('targetAccessControlRecordIds')) {
                obj['targetAccessControlRecordIds'] = ApiClient.convertToType(data['targetAccessControlRecordIds'], ['String']);
            }
            if (data.hasOwnProperty('targetDeviceId')) {
                obj['targetDeviceId'] = ApiClient.convertToType(data['targetDeviceId'], 'String');
            }
            if (data.hasOwnProperty('targetVolumeName')) {
                obj['targetVolumeName'] = ApiClient.convertToType(data['targetVolumeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloneRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloneRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CloneRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `backupElement`
        if (data['backupElement']) { // data not null
          BackupElement.validateJSON(data['backupElement']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetAccessControlRecordIds'])) {
            throw new Error("Expected the field `targetAccessControlRecordIds` to be an array in the JSON data but got " + data['targetAccessControlRecordIds']);
        }
        // ensure the json data is a string
        if (data['targetDeviceId'] && !(typeof data['targetDeviceId'] === 'string' || data['targetDeviceId'] instanceof String)) {
            throw new Error("Expected the field `targetDeviceId` to be a primitive type in the JSON string but got " + data['targetDeviceId']);
        }
        // ensure the json data is a string
        if (data['targetVolumeName'] && !(typeof data['targetVolumeName'] === 'string' || data['targetVolumeName'] instanceof String)) {
            throw new Error("Expected the field `targetVolumeName` to be a primitive type in the JSON string but got " + data['targetVolumeName']);
        }

        return true;
    }


}

CloneRequest.RequiredProperties = ["backupElement", "targetAccessControlRecordIds", "targetDeviceId", "targetVolumeName"];

/**
 * @member {module:model/BackupElement} backupElement
 */
CloneRequest.prototype['backupElement'] = undefined;

/**
 * The list of path IDs of the access control records to be associated to the new cloned volume.
 * @member {Array.<String>} targetAccessControlRecordIds
 */
CloneRequest.prototype['targetAccessControlRecordIds'] = undefined;

/**
 * The path ID of the device which will act as the clone target.
 * @member {String} targetDeviceId
 */
CloneRequest.prototype['targetDeviceId'] = undefined;

/**
 * The name of the new volume which will be created and the backup will be cloned into.
 * @member {String} targetVolumeName
 */
CloneRequest.prototype['targetVolumeName'] = undefined;






export default CloneRequest;

