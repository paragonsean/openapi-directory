/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VolumeFailoverMetadata from './VolumeFailoverMetadata';

/**
 * The VolumeContainerFailoverMetadata model module.
 * @module model/VolumeContainerFailoverMetadata
 * @version 2017-06-01
 */
class VolumeContainerFailoverMetadata {
    /**
     * Constructs a new <code>VolumeContainerFailoverMetadata</code>.
     * The metadata of the volume container, that is being considered as part of a failover set.
     * @alias module:model/VolumeContainerFailoverMetadata
     */
    constructor() { 
        
        VolumeContainerFailoverMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeContainerFailoverMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeContainerFailoverMetadata} obj Optional instance to populate.
     * @return {module:model/VolumeContainerFailoverMetadata} The populated <code>VolumeContainerFailoverMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeContainerFailoverMetadata();

            if (data.hasOwnProperty('volumeContainerId')) {
                obj['volumeContainerId'] = ApiClient.convertToType(data['volumeContainerId'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [VolumeFailoverMetadata]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeContainerFailoverMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeContainerFailoverMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['volumeContainerId'] && !(typeof data['volumeContainerId'] === 'string' || data['volumeContainerId'] instanceof String)) {
            throw new Error("Expected the field `volumeContainerId` to be a primitive type in the JSON string but got " + data['volumeContainerId']);
        }
        if (data['volumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumes'])) {
                throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
            }
            // validate the optional field `volumes` (array)
            for (const item of data['volumes']) {
                VolumeFailoverMetadata.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The path ID of the volume container.
 * @member {String} volumeContainerId
 */
VolumeContainerFailoverMetadata.prototype['volumeContainerId'] = undefined;

/**
 * The list of metadata of volumes inside the volume container, which contains valid cloud snapshots.
 * @member {Array.<module:model/VolumeFailoverMetadata>} volumes
 */
VolumeContainerFailoverMetadata.prototype['volumes'] = undefined;






export default VolumeContainerFailoverMetadata;

