/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NicIPv4 from './NicIPv4';
import NicIPv6 from './NicIPv6';

/**
 * The NetworkAdapters model module.
 * @module model/NetworkAdapters
 * @version 2017-06-01
 */
class NetworkAdapters {
    /**
     * Constructs a new <code>NetworkAdapters</code>.
     * Represents the network adapter on device.
     * @alias module:model/NetworkAdapters
     * @param interfaceId {module:model/NetworkAdapters.InterfaceIdEnum} The ID of the network adapter.
     * @param iscsiAndCloudStatus {module:model/NetworkAdapters.IscsiAndCloudStatusEnum} Value indicating cloud and ISCSI status of network adapter.
     * @param mode {module:model/NetworkAdapters.ModeEnum} The mode of network adapter, either IPv4, IPv6 or both.
     * @param netInterfaceStatus {module:model/NetworkAdapters.NetInterfaceStatusEnum} Value indicating status of network adapter.
     */
    constructor(interfaceId, iscsiAndCloudStatus, mode, netInterfaceStatus) { 
        
        NetworkAdapters.initialize(this, interfaceId, iscsiAndCloudStatus, mode, netInterfaceStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, interfaceId, iscsiAndCloudStatus, mode, netInterfaceStatus) { 
        obj['interfaceId'] = interfaceId;
        obj['iscsiAndCloudStatus'] = iscsiAndCloudStatus;
        obj['mode'] = mode;
        obj['netInterfaceStatus'] = netInterfaceStatus;
    }

    /**
     * Constructs a <code>NetworkAdapters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkAdapters} obj Optional instance to populate.
     * @return {module:model/NetworkAdapters} The populated <code>NetworkAdapters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkAdapters();

            if (data.hasOwnProperty('interfaceId')) {
                obj['interfaceId'] = ApiClient.convertToType(data['interfaceId'], 'String');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('iscsiAndCloudStatus')) {
                obj['iscsiAndCloudStatus'] = ApiClient.convertToType(data['iscsiAndCloudStatus'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('netInterfaceStatus')) {
                obj['netInterfaceStatus'] = ApiClient.convertToType(data['netInterfaceStatus'], 'String');
            }
            if (data.hasOwnProperty('nicIpv4Settings')) {
                obj['nicIpv4Settings'] = NicIPv4.constructFromObject(data['nicIpv4Settings']);
            }
            if (data.hasOwnProperty('nicIpv6Settings')) {
                obj['nicIpv6Settings'] = NicIPv6.constructFromObject(data['nicIpv6Settings']);
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkAdapters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkAdapters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NetworkAdapters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['interfaceId'] && !(typeof data['interfaceId'] === 'string' || data['interfaceId'] instanceof String)) {
            throw new Error("Expected the field `interfaceId` to be a primitive type in the JSON string but got " + data['interfaceId']);
        }
        // ensure the json data is a string
        if (data['iscsiAndCloudStatus'] && !(typeof data['iscsiAndCloudStatus'] === 'string' || data['iscsiAndCloudStatus'] instanceof String)) {
            throw new Error("Expected the field `iscsiAndCloudStatus` to be a primitive type in the JSON string but got " + data['iscsiAndCloudStatus']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['netInterfaceStatus'] && !(typeof data['netInterfaceStatus'] === 'string' || data['netInterfaceStatus'] instanceof String)) {
            throw new Error("Expected the field `netInterfaceStatus` to be a primitive type in the JSON string but got " + data['netInterfaceStatus']);
        }
        // validate the optional field `nicIpv4Settings`
        if (data['nicIpv4Settings']) { // data not null
          NicIPv4.validateJSON(data['nicIpv4Settings']);
        }
        // validate the optional field `nicIpv6Settings`
        if (data['nicIpv6Settings']) { // data not null
          NicIPv6.validateJSON(data['nicIpv6Settings']);
        }

        return true;
    }


}

NetworkAdapters.RequiredProperties = ["interfaceId", "iscsiAndCloudStatus", "mode", "netInterfaceStatus"];

/**
 * The ID of the network adapter.
 * @member {module:model/NetworkAdapters.InterfaceIdEnum} interfaceId
 */
NetworkAdapters.prototype['interfaceId'] = undefined;

/**
 * Value indicating whether this instance is default.
 * @member {Boolean} isDefault
 */
NetworkAdapters.prototype['isDefault'] = undefined;

/**
 * Value indicating cloud and ISCSI status of network adapter.
 * @member {module:model/NetworkAdapters.IscsiAndCloudStatusEnum} iscsiAndCloudStatus
 */
NetworkAdapters.prototype['iscsiAndCloudStatus'] = undefined;

/**
 * The mode of network adapter, either IPv4, IPv6 or both.
 * @member {module:model/NetworkAdapters.ModeEnum} mode
 */
NetworkAdapters.prototype['mode'] = undefined;

/**
 * Value indicating status of network adapter.
 * @member {module:model/NetworkAdapters.NetInterfaceStatusEnum} netInterfaceStatus
 */
NetworkAdapters.prototype['netInterfaceStatus'] = undefined;

/**
 * @member {module:model/NicIPv4} nicIpv4Settings
 */
NetworkAdapters.prototype['nicIpv4Settings'] = undefined;

/**
 * @member {module:model/NicIPv6} nicIpv6Settings
 */
NetworkAdapters.prototype['nicIpv6Settings'] = undefined;

/**
 * The speed of the network adapter.
 * @member {Number} speed
 */
NetworkAdapters.prototype['speed'] = undefined;





/**
 * Allowed values for the <code>interfaceId</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAdapters['InterfaceIdEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Data0"
     * @const
     */
    "Data0": "Data0",

    /**
     * value: "Data1"
     * @const
     */
    "Data1": "Data1",

    /**
     * value: "Data2"
     * @const
     */
    "Data2": "Data2",

    /**
     * value: "Data3"
     * @const
     */
    "Data3": "Data3",

    /**
     * value: "Data4"
     * @const
     */
    "Data4": "Data4",

    /**
     * value: "Data5"
     * @const
     */
    "Data5": "Data5"
};


/**
 * Allowed values for the <code>iscsiAndCloudStatus</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAdapters['IscsiAndCloudStatusEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "IscsiEnabled"
     * @const
     */
    "IscsiEnabled": "IscsiEnabled",

    /**
     * value: "CloudEnabled"
     * @const
     */
    "CloudEnabled": "CloudEnabled",

    /**
     * value: "IscsiAndCloudEnabled"
     * @const
     */
    "IscsiAndCloudEnabled": "IscsiAndCloudEnabled"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAdapters['ModeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "IPV4"
     * @const
     */
    "IPV4": "IPV4",

    /**
     * value: "IPV6"
     * @const
     */
    "IPV6": "IPV6",

    /**
     * value: "BOTH"
     * @const
     */
    "BOTH": "BOTH"
};


/**
 * Allowed values for the <code>netInterfaceStatus</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAdapters['NetInterfaceStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default NetworkAdapters;

