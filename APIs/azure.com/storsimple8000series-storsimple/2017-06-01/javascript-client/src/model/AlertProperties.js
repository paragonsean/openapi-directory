/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertErrorDetails from './AlertErrorDetails';
import AlertSource from './AlertSource';

/**
 * The AlertProperties model module.
 * @module model/AlertProperties
 * @version 2017-06-01
 */
class AlertProperties {
    /**
     * Constructs a new <code>AlertProperties</code>.
     * The properties of alert
     * @alias module:model/AlertProperties
     * @param alertType {String} The type of the alert
     * @param appearedAtSourceTime {Date} The source time at which the alert was raised
     * @param appearedAtTime {Date} The UTC time at which the alert was raised
     * @param scope {module:model/AlertProperties.ScopeEnum} The scope of the alert
     * @param severity {module:model/AlertProperties.SeverityEnum} The severity of the alert
     * @param source {module:model/AlertSource} 
     * @param status {module:model/AlertProperties.StatusEnum} The current status of the alert
     * @param title {String} The title of the alert
     */
    constructor(alertType, appearedAtSourceTime, appearedAtTime, scope, severity, source, status, title) { 
        
        AlertProperties.initialize(this, alertType, appearedAtSourceTime, appearedAtTime, scope, severity, source, status, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alertType, appearedAtSourceTime, appearedAtTime, scope, severity, source, status, title) { 
        obj['alertType'] = alertType;
        obj['appearedAtSourceTime'] = appearedAtSourceTime;
        obj['appearedAtTime'] = appearedAtTime;
        obj['scope'] = scope;
        obj['severity'] = severity;
        obj['source'] = source;
        obj['status'] = status;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>AlertProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertProperties} obj Optional instance to populate.
     * @return {module:model/AlertProperties} The populated <code>AlertProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertProperties();

            if (data.hasOwnProperty('alertType')) {
                obj['alertType'] = ApiClient.convertToType(data['alertType'], 'String');
            }
            if (data.hasOwnProperty('appearedAtSourceTime')) {
                obj['appearedAtSourceTime'] = ApiClient.convertToType(data['appearedAtSourceTime'], 'Date');
            }
            if (data.hasOwnProperty('appearedAtTime')) {
                obj['appearedAtTime'] = ApiClient.convertToType(data['appearedAtTime'], 'Date');
            }
            if (data.hasOwnProperty('clearedAtSourceTime')) {
                obj['clearedAtSourceTime'] = ApiClient.convertToType(data['clearedAtSourceTime'], 'Date');
            }
            if (data.hasOwnProperty('clearedAtTime')) {
                obj['clearedAtTime'] = ApiClient.convertToType(data['clearedAtTime'], 'Date');
            }
            if (data.hasOwnProperty('detailedInformation')) {
                obj['detailedInformation'] = ApiClient.convertToType(data['detailedInformation'], {'String': 'String'});
            }
            if (data.hasOwnProperty('errorDetails')) {
                obj['errorDetails'] = AlertErrorDetails.constructFromObject(data['errorDetails']);
            }
            if (data.hasOwnProperty('recommendation')) {
                obj['recommendation'] = ApiClient.convertToType(data['recommendation'], 'String');
            }
            if (data.hasOwnProperty('resolutionReason')) {
                obj['resolutionReason'] = ApiClient.convertToType(data['resolutionReason'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = AlertSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlertProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alertType'] && !(typeof data['alertType'] === 'string' || data['alertType'] instanceof String)) {
            throw new Error("Expected the field `alertType` to be a primitive type in the JSON string but got " + data['alertType']);
        }
        // validate the optional field `errorDetails`
        if (data['errorDetails']) { // data not null
          AlertErrorDetails.validateJSON(data['errorDetails']);
        }
        // ensure the json data is a string
        if (data['recommendation'] && !(typeof data['recommendation'] === 'string' || data['recommendation'] instanceof String)) {
            throw new Error("Expected the field `recommendation` to be a primitive type in the JSON string but got " + data['recommendation']);
        }
        // ensure the json data is a string
        if (data['resolutionReason'] && !(typeof data['resolutionReason'] === 'string' || data['resolutionReason'] instanceof String)) {
            throw new Error("Expected the field `resolutionReason` to be a primitive type in the JSON string but got " + data['resolutionReason']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          AlertSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

AlertProperties.RequiredProperties = ["alertType", "appearedAtSourceTime", "appearedAtTime", "scope", "severity", "source", "status", "title"];

/**
 * The type of the alert
 * @member {String} alertType
 */
AlertProperties.prototype['alertType'] = undefined;

/**
 * The source time at which the alert was raised
 * @member {Date} appearedAtSourceTime
 */
AlertProperties.prototype['appearedAtSourceTime'] = undefined;

/**
 * The UTC time at which the alert was raised
 * @member {Date} appearedAtTime
 */
AlertProperties.prototype['appearedAtTime'] = undefined;

/**
 * The source time at which the alert was cleared
 * @member {Date} clearedAtSourceTime
 */
AlertProperties.prototype['clearedAtSourceTime'] = undefined;

/**
 * The UTC time at which the alert was cleared
 * @member {Date} clearedAtTime
 */
AlertProperties.prototype['clearedAtTime'] = undefined;

/**
 * More details about the alert
 * @member {Object.<String, String>} detailedInformation
 */
AlertProperties.prototype['detailedInformation'] = undefined;

/**
 * @member {module:model/AlertErrorDetails} errorDetails
 */
AlertProperties.prototype['errorDetails'] = undefined;

/**
 * The recommended action for the issue raised in the alert
 * @member {String} recommendation
 */
AlertProperties.prototype['recommendation'] = undefined;

/**
 * The reason for resolving the alert
 * @member {String} resolutionReason
 */
AlertProperties.prototype['resolutionReason'] = undefined;

/**
 * The scope of the alert
 * @member {module:model/AlertProperties.ScopeEnum} scope
 */
AlertProperties.prototype['scope'] = undefined;

/**
 * The severity of the alert
 * @member {module:model/AlertProperties.SeverityEnum} severity
 */
AlertProperties.prototype['severity'] = undefined;

/**
 * @member {module:model/AlertSource} source
 */
AlertProperties.prototype['source'] = undefined;

/**
 * The current status of the alert
 * @member {module:model/AlertProperties.StatusEnum} status
 */
AlertProperties.prototype['status'] = undefined;

/**
 * The title of the alert
 * @member {String} title
 */
AlertProperties.prototype['title'] = undefined;





/**
 * Allowed values for the <code>scope</code> property.
 * @enum {String}
 * @readonly
 */
AlertProperties['ScopeEnum'] = {

    /**
     * value: "Resource"
     * @const
     */
    "Resource": "Resource",

    /**
     * value: "Device"
     * @const
     */
    "Device": "Device"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
AlertProperties['SeverityEnum'] = {

    /**
     * value: "Informational"
     * @const
     */
    "Informational": "Informational",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Critical"
     * @const
     */
    "Critical": "Critical"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AlertProperties['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Cleared"
     * @const
     */
    "Cleared": "Cleared"
};



export default AlertProperties;

