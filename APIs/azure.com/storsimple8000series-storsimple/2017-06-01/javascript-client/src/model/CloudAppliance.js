/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CloudAppliance model module.
 * @module model/CloudAppliance
 * @version 2017-06-01
 */
class CloudAppliance {
    /**
     * Constructs a new <code>CloudAppliance</code>.
     * The cloud appliance.
     * @alias module:model/CloudAppliance
     * @param name {String} The name.
     * @param vnetRegion {String} The virtual network region.
     */
    constructor(name, vnetRegion) { 
        
        CloudAppliance.initialize(this, name, vnetRegion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, vnetRegion) { 
        obj['name'] = name;
        obj['vnetRegion'] = vnetRegion;
    }

    /**
     * Constructs a <code>CloudAppliance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudAppliance} obj Optional instance to populate.
     * @return {module:model/CloudAppliance} The populated <code>CloudAppliance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudAppliance();

            if (data.hasOwnProperty('isVnetDnsConfigured')) {
                obj['isVnetDnsConfigured'] = ApiClient.convertToType(data['isVnetDnsConfigured'], 'Boolean');
            }
            if (data.hasOwnProperty('isVnetExpressConfigured')) {
                obj['isVnetExpressConfigured'] = ApiClient.convertToType(data['isVnetExpressConfigured'], 'Boolean');
            }
            if (data.hasOwnProperty('modelNumber')) {
                obj['modelNumber'] = ApiClient.convertToType(data['modelNumber'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('storageAccountName')) {
                obj['storageAccountName'] = ApiClient.convertToType(data['storageAccountName'], 'String');
            }
            if (data.hasOwnProperty('storageAccountType')) {
                obj['storageAccountType'] = ApiClient.convertToType(data['storageAccountType'], 'String');
            }
            if (data.hasOwnProperty('subnetName')) {
                obj['subnetName'] = ApiClient.convertToType(data['subnetName'], 'String');
            }
            if (data.hasOwnProperty('vmImageName')) {
                obj['vmImageName'] = ApiClient.convertToType(data['vmImageName'], 'String');
            }
            if (data.hasOwnProperty('vmType')) {
                obj['vmType'] = ApiClient.convertToType(data['vmType'], 'String');
            }
            if (data.hasOwnProperty('vnetName')) {
                obj['vnetName'] = ApiClient.convertToType(data['vnetName'], 'String');
            }
            if (data.hasOwnProperty('vnetRegion')) {
                obj['vnetRegion'] = ApiClient.convertToType(data['vnetRegion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudAppliance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudAppliance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CloudAppliance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['modelNumber'] && !(typeof data['modelNumber'] === 'string' || data['modelNumber'] instanceof String)) {
            throw new Error("Expected the field `modelNumber` to be a primitive type in the JSON string but got " + data['modelNumber']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['storageAccountName'] && !(typeof data['storageAccountName'] === 'string' || data['storageAccountName'] instanceof String)) {
            throw new Error("Expected the field `storageAccountName` to be a primitive type in the JSON string but got " + data['storageAccountName']);
        }
        // ensure the json data is a string
        if (data['storageAccountType'] && !(typeof data['storageAccountType'] === 'string' || data['storageAccountType'] instanceof String)) {
            throw new Error("Expected the field `storageAccountType` to be a primitive type in the JSON string but got " + data['storageAccountType']);
        }
        // ensure the json data is a string
        if (data['subnetName'] && !(typeof data['subnetName'] === 'string' || data['subnetName'] instanceof String)) {
            throw new Error("Expected the field `subnetName` to be a primitive type in the JSON string but got " + data['subnetName']);
        }
        // ensure the json data is a string
        if (data['vmImageName'] && !(typeof data['vmImageName'] === 'string' || data['vmImageName'] instanceof String)) {
            throw new Error("Expected the field `vmImageName` to be a primitive type in the JSON string but got " + data['vmImageName']);
        }
        // ensure the json data is a string
        if (data['vmType'] && !(typeof data['vmType'] === 'string' || data['vmType'] instanceof String)) {
            throw new Error("Expected the field `vmType` to be a primitive type in the JSON string but got " + data['vmType']);
        }
        // ensure the json data is a string
        if (data['vnetName'] && !(typeof data['vnetName'] === 'string' || data['vnetName'] instanceof String)) {
            throw new Error("Expected the field `vnetName` to be a primitive type in the JSON string but got " + data['vnetName']);
        }
        // ensure the json data is a string
        if (data['vnetRegion'] && !(typeof data['vnetRegion'] === 'string' || data['vnetRegion'] instanceof String)) {
            throw new Error("Expected the field `vnetRegion` to be a primitive type in the JSON string but got " + data['vnetRegion']);
        }

        return true;
    }


}

CloudAppliance.RequiredProperties = ["name", "vnetRegion"];

/**
 * Indicates whether virtual network used is configured with DNS or not.
 * @member {Boolean} isVnetDnsConfigured
 */
CloudAppliance.prototype['isVnetDnsConfigured'] = undefined;

/**
 * Indicates whether virtual network used is configured with express route or not.
 * @member {Boolean} isVnetExpressConfigured
 */
CloudAppliance.prototype['isVnetExpressConfigured'] = undefined;

/**
 * The model number.
 * @member {String} modelNumber
 */
CloudAppliance.prototype['modelNumber'] = undefined;

/**
 * The name.
 * @member {String} name
 */
CloudAppliance.prototype['name'] = undefined;

/**
 * The name of the storage account.
 * @member {String} storageAccountName
 */
CloudAppliance.prototype['storageAccountName'] = undefined;

/**
 * The type of the storage account.
 * @member {String} storageAccountType
 */
CloudAppliance.prototype['storageAccountType'] = undefined;

/**
 * The name of the subnet.
 * @member {String} subnetName
 */
CloudAppliance.prototype['subnetName'] = undefined;

/**
 * The name of the virtual machine image.
 * @member {String} vmImageName
 */
CloudAppliance.prototype['vmImageName'] = undefined;

/**
 * The type of the virtual machine.
 * @member {String} vmType
 */
CloudAppliance.prototype['vmType'] = undefined;

/**
 * The name of the virtual network.
 * @member {String} vnetName
 */
CloudAppliance.prototype['vnetName'] = undefined;

/**
 * The virtual network region.
 * @member {String} vnetRegion
 */
CloudAppliance.prototype['vnetRegion'] = undefined;






export default CloudAppliance;

