/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceRolloverDetails model module.
 * @module model/DeviceRolloverDetails
 * @version 2017-06-01
 */
class DeviceRolloverDetails {
    /**
     * Constructs a new <code>DeviceRolloverDetails</code>.
     * The additional device details for the service data encryption key rollover.
     * @alias module:model/DeviceRolloverDetails
     */
    constructor() { 
        
        DeviceRolloverDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceRolloverDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceRolloverDetails} obj Optional instance to populate.
     * @return {module:model/DeviceRolloverDetails} The populated <code>DeviceRolloverDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceRolloverDetails();

            if (data.hasOwnProperty('authorizationEligibility')) {
                obj['authorizationEligibility'] = ApiClient.convertToType(data['authorizationEligibility'], 'String');
            }
            if (data.hasOwnProperty('authorizationStatus')) {
                obj['authorizationStatus'] = ApiClient.convertToType(data['authorizationStatus'], 'String');
            }
            if (data.hasOwnProperty('inEligibilityReason')) {
                obj['inEligibilityReason'] = ApiClient.convertToType(data['inEligibilityReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceRolloverDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceRolloverDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorizationEligibility'] && !(typeof data['authorizationEligibility'] === 'string' || data['authorizationEligibility'] instanceof String)) {
            throw new Error("Expected the field `authorizationEligibility` to be a primitive type in the JSON string but got " + data['authorizationEligibility']);
        }
        // ensure the json data is a string
        if (data['authorizationStatus'] && !(typeof data['authorizationStatus'] === 'string' || data['authorizationStatus'] instanceof String)) {
            throw new Error("Expected the field `authorizationStatus` to be a primitive type in the JSON string but got " + data['authorizationStatus']);
        }
        // ensure the json data is a string
        if (data['inEligibilityReason'] && !(typeof data['inEligibilityReason'] === 'string' || data['inEligibilityReason'] instanceof String)) {
            throw new Error("Expected the field `inEligibilityReason` to be a primitive type in the JSON string but got " + data['inEligibilityReason']);
        }

        return true;
    }


}



/**
 * The eligibility status of device for service data encryption key rollover.
 * @member {module:model/DeviceRolloverDetails.AuthorizationEligibilityEnum} authorizationEligibility
 */
DeviceRolloverDetails.prototype['authorizationEligibility'] = undefined;

/**
 * The authorization status of the device for service data encryption key rollover.
 * @member {module:model/DeviceRolloverDetails.AuthorizationStatusEnum} authorizationStatus
 */
DeviceRolloverDetails.prototype['authorizationStatus'] = undefined;

/**
 * The reason for inEligibility of device, in case it's not eligible for service data encryption key rollover.
 * @member {module:model/DeviceRolloverDetails.InEligibilityReasonEnum} inEligibilityReason
 */
DeviceRolloverDetails.prototype['inEligibilityReason'] = undefined;





/**
 * Allowed values for the <code>authorizationEligibility</code> property.
 * @enum {String}
 * @readonly
 */
DeviceRolloverDetails['AuthorizationEligibilityEnum'] = {

    /**
     * value: "InEligible"
     * @const
     */
    "InEligible": "InEligible",

    /**
     * value: "Eligible"
     * @const
     */
    "Eligible": "Eligible"
};


/**
 * Allowed values for the <code>authorizationStatus</code> property.
 * @enum {String}
 * @readonly
 */
DeviceRolloverDetails['AuthorizationStatusEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};


/**
 * Allowed values for the <code>inEligibilityReason</code> property.
 * @enum {String}
 * @readonly
 */
DeviceRolloverDetails['InEligibilityReasonEnum'] = {

    /**
     * value: "DeviceNotOnline"
     * @const
     */
    "DeviceNotOnline": "DeviceNotOnline",

    /**
     * value: "NotSupportedAppliance"
     * @const
     */
    "NotSupportedAppliance": "NotSupportedAppliance",

    /**
     * value: "RolloverPending"
     * @const
     */
    "RolloverPending": "RolloverPending"
};



export default DeviceRolloverDetails;

