/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataStatistics from './DataStatistics';
import JobStage from './JobStage';

/**
 * The JobProperties model module.
 * @module model/JobProperties
 * @version 2017-06-01
 */
class JobProperties {
    /**
     * Constructs a new <code>JobProperties</code>.
     * The properties of the job.
     * @alias module:model/JobProperties
     * @param jobType {module:model/JobProperties.JobTypeEnum} The type of the job.
     */
    constructor(jobType) { 
        
        JobProperties.initialize(this, jobType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, jobType) { 
        obj['jobType'] = jobType;
    }

    /**
     * Constructs a <code>JobProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobProperties} obj Optional instance to populate.
     * @return {module:model/JobProperties} The populated <code>JobProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobProperties();

            if (data.hasOwnProperty('backupPointInTime')) {
                obj['backupPointInTime'] = ApiClient.convertToType(data['backupPointInTime'], 'Date');
            }
            if (data.hasOwnProperty('backupType')) {
                obj['backupType'] = ApiClient.convertToType(data['backupType'], 'String');
            }
            if (data.hasOwnProperty('dataStats')) {
                obj['dataStats'] = DataStatistics.constructFromObject(data['dataStats']);
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('entityLabel')) {
                obj['entityLabel'] = ApiClient.convertToType(data['entityLabel'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('isCancellable')) {
                obj['isCancellable'] = ApiClient.convertToType(data['isCancellable'], 'Boolean');
            }
            if (data.hasOwnProperty('jobStages')) {
                obj['jobStages'] = ApiClient.convertToType(data['jobStages'], [JobStage]);
            }
            if (data.hasOwnProperty('jobType')) {
                obj['jobType'] = ApiClient.convertToType(data['jobType'], 'String');
            }
            if (data.hasOwnProperty('sourceDeviceId')) {
                obj['sourceDeviceId'] = ApiClient.convertToType(data['sourceDeviceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['backupType'] && !(typeof data['backupType'] === 'string' || data['backupType'] instanceof String)) {
            throw new Error("Expected the field `backupType` to be a primitive type in the JSON string but got " + data['backupType']);
        }
        // validate the optional field `dataStats`
        if (data['dataStats']) { // data not null
          DataStatistics.validateJSON(data['dataStats']);
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['entityLabel'] && !(typeof data['entityLabel'] === 'string' || data['entityLabel'] instanceof String)) {
            throw new Error("Expected the field `entityLabel` to be a primitive type in the JSON string but got " + data['entityLabel']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        if (data['jobStages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['jobStages'])) {
                throw new Error("Expected the field `jobStages` to be an array in the JSON data but got " + data['jobStages']);
            }
            // validate the optional field `jobStages` (array)
            for (const item of data['jobStages']) {
                JobStage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['jobType'] && !(typeof data['jobType'] === 'string' || data['jobType'] instanceof String)) {
            throw new Error("Expected the field `jobType` to be a primitive type in the JSON string but got " + data['jobType']);
        }
        // ensure the json data is a string
        if (data['sourceDeviceId'] && !(typeof data['sourceDeviceId'] === 'string' || data['sourceDeviceId'] instanceof String)) {
            throw new Error("Expected the field `sourceDeviceId` to be a primitive type in the JSON string but got " + data['sourceDeviceId']);
        }

        return true;
    }


}

JobProperties.RequiredProperties = ["jobType"];

/**
 * The time of the backup used for the failover.
 * @member {Date} backupPointInTime
 */
JobProperties.prototype['backupPointInTime'] = undefined;

/**
 * The backup type (CloudSnapshot | LocalSnapshot). Applicable only for backup jobs.
 * @member {module:model/JobProperties.BackupTypeEnum} backupType
 */
JobProperties.prototype['backupType'] = undefined;

/**
 * @member {module:model/DataStatistics} dataStats
 */
JobProperties.prototype['dataStats'] = undefined;

/**
 * The device ID in which the job ran.
 * @member {String} deviceId
 */
JobProperties.prototype['deviceId'] = undefined;

/**
 * The entity identifier for which the job ran.
 * @member {String} entityLabel
 */
JobProperties.prototype['entityLabel'] = undefined;

/**
 * The entity type for which the job ran.
 * @member {String} entityType
 */
JobProperties.prototype['entityType'] = undefined;

/**
 * Represents whether the job is cancellable or not.
 * @member {Boolean} isCancellable
 */
JobProperties.prototype['isCancellable'] = undefined;

/**
 * The job stages.
 * @member {Array.<module:model/JobStage>} jobStages
 */
JobProperties.prototype['jobStages'] = undefined;

/**
 * The type of the job.
 * @member {module:model/JobProperties.JobTypeEnum} jobType
 */
JobProperties.prototype['jobType'] = undefined;

/**
 * The source device ID of the failover job.
 * @member {String} sourceDeviceId
 */
JobProperties.prototype['sourceDeviceId'] = undefined;





/**
 * Allowed values for the <code>backupType</code> property.
 * @enum {String}
 * @readonly
 */
JobProperties['BackupTypeEnum'] = {

    /**
     * value: "LocalSnapshot"
     * @const
     */
    "LocalSnapshot": "LocalSnapshot",

    /**
     * value: "CloudSnapshot"
     * @const
     */
    "CloudSnapshot": "CloudSnapshot"
};


/**
 * Allowed values for the <code>jobType</code> property.
 * @enum {String}
 * @readonly
 */
JobProperties['JobTypeEnum'] = {

    /**
     * value: "ScheduledBackup"
     * @const
     */
    "ScheduledBackup": "ScheduledBackup",

    /**
     * value: "ManualBackup"
     * @const
     */
    "ManualBackup": "ManualBackup",

    /**
     * value: "RestoreBackup"
     * @const
     */
    "RestoreBackup": "RestoreBackup",

    /**
     * value: "CloneVolume"
     * @const
     */
    "CloneVolume": "CloneVolume",

    /**
     * value: "FailoverVolumeContainers"
     * @const
     */
    "FailoverVolumeContainers": "FailoverVolumeContainers",

    /**
     * value: "CreateLocallyPinnedVolume"
     * @const
     */
    "CreateLocallyPinnedVolume": "CreateLocallyPinnedVolume",

    /**
     * value: "ModifyVolume"
     * @const
     */
    "ModifyVolume": "ModifyVolume",

    /**
     * value: "InstallUpdates"
     * @const
     */
    "InstallUpdates": "InstallUpdates",

    /**
     * value: "SupportPackageLogs"
     * @const
     */
    "SupportPackageLogs": "SupportPackageLogs",

    /**
     * value: "CreateCloudAppliance"
     * @const
     */
    "CreateCloudAppliance": "CreateCloudAppliance"
};



export default JobProperties;

