/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorSimple8000SeriesManagementClient);
  }
}(this, function(expect, StorSimple8000SeriesManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorSimple8000SeriesManagementClient.VolumesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VolumesApi', function() {
    describe('volumesCreateOrUpdate', function() {
      it('should call volumesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test volumesCreateOrUpdate
        //instance.volumesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumesDelete', function() {
      it('should call volumesDelete successfully', function(done) {
        //uncomment below and update the code to test volumesDelete
        //instance.volumesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumesGet', function() {
      it('should call volumesGet successfully', function(done) {
        //uncomment below and update the code to test volumesGet
        //instance.volumesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumesListByDevice', function() {
      it('should call volumesListByDevice successfully', function(done) {
        //uncomment below and update the code to test volumesListByDevice
        //instance.volumesListByDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumesListByVolumeContainer', function() {
      it('should call volumesListByVolumeContainer successfully', function(done) {
        //uncomment below and update the code to test volumesListByVolumeContainer
        //instance.volumesListByVolumeContainer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumesListMetricDefinition', function() {
      it('should call volumesListMetricDefinition successfully', function(done) {
        //uncomment below and update the code to test volumesListMetricDefinition
        //instance.volumesListMetricDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumesListMetrics', function() {
      it('should call volumesListMetrics successfully', function(done) {
        //uncomment below and update the code to test volumesListMetrics
        //instance.volumesListMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
