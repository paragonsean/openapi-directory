/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorSimple8000SeriesManagementClient);
  }
}(this, function(expect, StorSimple8000SeriesManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorSimple8000SeriesManagementClient.ManagersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ManagersApi', function() {
    describe('managersCreateExtendedInfo', function() {
      it('should call managersCreateExtendedInfo successfully', function(done) {
        //uncomment below and update the code to test managersCreateExtendedInfo
        //instance.managersCreateExtendedInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersCreateOrUpdate', function() {
      it('should call managersCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test managersCreateOrUpdate
        //instance.managersCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersDelete', function() {
      it('should call managersDelete successfully', function(done) {
        //uncomment below and update the code to test managersDelete
        //instance.managersDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersDeleteExtendedInfo', function() {
      it('should call managersDeleteExtendedInfo successfully', function(done) {
        //uncomment below and update the code to test managersDeleteExtendedInfo
        //instance.managersDeleteExtendedInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersGet', function() {
      it('should call managersGet successfully', function(done) {
        //uncomment below and update the code to test managersGet
        //instance.managersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersGetActivationKey', function() {
      it('should call managersGetActivationKey successfully', function(done) {
        //uncomment below and update the code to test managersGetActivationKey
        //instance.managersGetActivationKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersGetDevicePublicEncryptionKey', function() {
      it('should call managersGetDevicePublicEncryptionKey successfully', function(done) {
        //uncomment below and update the code to test managersGetDevicePublicEncryptionKey
        //instance.managersGetDevicePublicEncryptionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersGetEncryptionSettings', function() {
      it('should call managersGetEncryptionSettings successfully', function(done) {
        //uncomment below and update the code to test managersGetEncryptionSettings
        //instance.managersGetEncryptionSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersGetExtendedInfo', function() {
      it('should call managersGetExtendedInfo successfully', function(done) {
        //uncomment below and update the code to test managersGetExtendedInfo
        //instance.managersGetExtendedInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersGetPublicEncryptionKey', function() {
      it('should call managersGetPublicEncryptionKey successfully', function(done) {
        //uncomment below and update the code to test managersGetPublicEncryptionKey
        //instance.managersGetPublicEncryptionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersList', function() {
      it('should call managersList successfully', function(done) {
        //uncomment below and update the code to test managersList
        //instance.managersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersListByResourceGroup', function() {
      it('should call managersListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test managersListByResourceGroup
        //instance.managersListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersListFeatureSupportStatus', function() {
      it('should call managersListFeatureSupportStatus successfully', function(done) {
        //uncomment below and update the code to test managersListFeatureSupportStatus
        //instance.managersListFeatureSupportStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersListMetricDefinition', function() {
      it('should call managersListMetricDefinition successfully', function(done) {
        //uncomment below and update the code to test managersListMetricDefinition
        //instance.managersListMetricDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersListMetrics', function() {
      it('should call managersListMetrics successfully', function(done) {
        //uncomment below and update the code to test managersListMetrics
        //instance.managersListMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersRegenerateActivationKey', function() {
      it('should call managersRegenerateActivationKey successfully', function(done) {
        //uncomment below and update the code to test managersRegenerateActivationKey
        //instance.managersRegenerateActivationKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersUpdate', function() {
      it('should call managersUpdate successfully', function(done) {
        //uncomment below and update the code to test managersUpdate
        //instance.managersUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managersUpdateExtendedInfo', function() {
      it('should call managersUpdateExtendedInfo successfully', function(done) {
        //uncomment below and update the code to test managersUpdateExtendedInfo
        //instance.managersUpdateExtendedInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
