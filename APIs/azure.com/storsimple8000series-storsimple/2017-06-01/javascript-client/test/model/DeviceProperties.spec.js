/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorSimple8000SeriesManagementClient);
  }
}(this, function(expect, StorSimple8000SeriesManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceProperties', function() {
    it('should create an instance of DeviceProperties', function() {
      // uncomment below and update the code to test DeviceProperties
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be.a(StorSimple8000SeriesManagementClient.DeviceProperties);
    });

    it('should have the property activationTime (base name: "activationTime")', function() {
      // uncomment below and update the code to test the property activationTime
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property activeController (base name: "activeController")', function() {
      // uncomment below and update the code to test the property activeController
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property agentGroupVersion (base name: "agentGroupVersion")', function() {
      // uncomment below and update the code to test the property agentGroupVersion
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property availableLocalStorageInBytes (base name: "availableLocalStorageInBytes")', function() {
      // uncomment below and update the code to test the property availableLocalStorageInBytes
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property availableTieredStorageInBytes (base name: "availableTieredStorageInBytes")', function() {
      // uncomment below and update the code to test the property availableTieredStorageInBytes
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property culture (base name: "culture")', function() {
      // uncomment below and update the code to test the property culture
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property details (base name: "details")', function() {
      // uncomment below and update the code to test the property details
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceConfigurationStatus (base name: "deviceConfigurationStatus")', function() {
      // uncomment below and update the code to test the property deviceConfigurationStatus
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceDescription (base name: "deviceDescription")', function() {
      // uncomment below and update the code to test the property deviceDescription
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceLocation (base name: "deviceLocation")', function() {
      // uncomment below and update the code to test the property deviceLocation
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceSoftwareVersion (base name: "deviceSoftwareVersion")', function() {
      // uncomment below and update the code to test the property deviceSoftwareVersion
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceType (base name: "deviceType")', function() {
      // uncomment below and update the code to test the property deviceType
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property friendlyName (base name: "friendlyName")', function() {
      // uncomment below and update the code to test the property friendlyName
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property friendlySoftwareName (base name: "friendlySoftwareName")', function() {
      // uncomment below and update the code to test the property friendlySoftwareName
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property friendlySoftwareVersion (base name: "friendlySoftwareVersion")', function() {
      // uncomment below and update the code to test the property friendlySoftwareVersion
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property modelDescription (base name: "modelDescription")', function() {
      // uncomment below and update the code to test the property modelDescription
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property networkInterfaceCardCount (base name: "networkInterfaceCardCount")', function() {
      // uncomment below and update the code to test the property networkInterfaceCardCount
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisionedLocalStorageInBytes (base name: "provisionedLocalStorageInBytes")', function() {
      // uncomment below and update the code to test the property provisionedLocalStorageInBytes
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisionedTieredStorageInBytes (base name: "provisionedTieredStorageInBytes")', function() {
      // uncomment below and update the code to test the property provisionedTieredStorageInBytes
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisionedVolumeSizeInBytes (base name: "provisionedVolumeSizeInBytes")', function() {
      // uncomment below and update the code to test the property provisionedVolumeSizeInBytes
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property rolloverDetails (base name: "rolloverDetails")', function() {
      // uncomment below and update the code to test the property rolloverDetails
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "serialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property targetIqn (base name: "targetIqn")', function() {
      // uncomment below and update the code to test the property targetIqn
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property totalTieredStorageInBytes (base name: "totalTieredStorageInBytes")', function() {
      // uncomment below and update the code to test the property totalTieredStorageInBytes
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property usingStorageInBytes (base name: "usingStorageInBytes")', function() {
      // uncomment below and update the code to test the property usingStorageInBytes
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

    it('should have the property virtualMachineApiType (base name: "virtualMachineApiType")', function() {
      // uncomment below and update the code to test the property virtualMachineApiType
      //var instance = new StorSimple8000SeriesManagementClient.DeviceProperties();
      //expect(instance).to.be();
    });

  });

}));
