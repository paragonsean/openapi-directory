/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINicIPv6.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINicIPv6::OAINicIPv6(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINicIPv6::OAINicIPv6() {
    this->initializeModel();
}

OAINicIPv6::~OAINicIPv6() {}

void OAINicIPv6::initializeModel() {

    m_controller0_ipv6_address_isSet = false;
    m_controller0_ipv6_address_isValid = false;

    m_controller1_ipv6_address_isSet = false;
    m_controller1_ipv6_address_isValid = false;

    m_ipv6_address_isSet = false;
    m_ipv6_address_isValid = false;

    m_ipv6_gateway_isSet = false;
    m_ipv6_gateway_isValid = false;

    m_ipv6_prefix_isSet = false;
    m_ipv6_prefix_isValid = false;
}

void OAINicIPv6::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINicIPv6::fromJsonObject(QJsonObject json) {

    m_controller0_ipv6_address_isValid = ::OpenAPI::fromJsonValue(m_controller0_ipv6_address, json[QString("controller0Ipv6Address")]);
    m_controller0_ipv6_address_isSet = !json[QString("controller0Ipv6Address")].isNull() && m_controller0_ipv6_address_isValid;

    m_controller1_ipv6_address_isValid = ::OpenAPI::fromJsonValue(m_controller1_ipv6_address, json[QString("controller1Ipv6Address")]);
    m_controller1_ipv6_address_isSet = !json[QString("controller1Ipv6Address")].isNull() && m_controller1_ipv6_address_isValid;

    m_ipv6_address_isValid = ::OpenAPI::fromJsonValue(m_ipv6_address, json[QString("ipv6Address")]);
    m_ipv6_address_isSet = !json[QString("ipv6Address")].isNull() && m_ipv6_address_isValid;

    m_ipv6_gateway_isValid = ::OpenAPI::fromJsonValue(m_ipv6_gateway, json[QString("ipv6Gateway")]);
    m_ipv6_gateway_isSet = !json[QString("ipv6Gateway")].isNull() && m_ipv6_gateway_isValid;

    m_ipv6_prefix_isValid = ::OpenAPI::fromJsonValue(m_ipv6_prefix, json[QString("ipv6Prefix")]);
    m_ipv6_prefix_isSet = !json[QString("ipv6Prefix")].isNull() && m_ipv6_prefix_isValid;
}

QString OAINicIPv6::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINicIPv6::asJsonObject() const {
    QJsonObject obj;
    if (m_controller0_ipv6_address_isSet) {
        obj.insert(QString("controller0Ipv6Address"), ::OpenAPI::toJsonValue(m_controller0_ipv6_address));
    }
    if (m_controller1_ipv6_address_isSet) {
        obj.insert(QString("controller1Ipv6Address"), ::OpenAPI::toJsonValue(m_controller1_ipv6_address));
    }
    if (m_ipv6_address_isSet) {
        obj.insert(QString("ipv6Address"), ::OpenAPI::toJsonValue(m_ipv6_address));
    }
    if (m_ipv6_gateway_isSet) {
        obj.insert(QString("ipv6Gateway"), ::OpenAPI::toJsonValue(m_ipv6_gateway));
    }
    if (m_ipv6_prefix_isSet) {
        obj.insert(QString("ipv6Prefix"), ::OpenAPI::toJsonValue(m_ipv6_prefix));
    }
    return obj;
}

QString OAINicIPv6::getController0Ipv6Address() const {
    return m_controller0_ipv6_address;
}
void OAINicIPv6::setController0Ipv6Address(const QString &controller0_ipv6_address) {
    m_controller0_ipv6_address = controller0_ipv6_address;
    m_controller0_ipv6_address_isSet = true;
}

bool OAINicIPv6::is_controller0_ipv6_address_Set() const{
    return m_controller0_ipv6_address_isSet;
}

bool OAINicIPv6::is_controller0_ipv6_address_Valid() const{
    return m_controller0_ipv6_address_isValid;
}

QString OAINicIPv6::getController1Ipv6Address() const {
    return m_controller1_ipv6_address;
}
void OAINicIPv6::setController1Ipv6Address(const QString &controller1_ipv6_address) {
    m_controller1_ipv6_address = controller1_ipv6_address;
    m_controller1_ipv6_address_isSet = true;
}

bool OAINicIPv6::is_controller1_ipv6_address_Set() const{
    return m_controller1_ipv6_address_isSet;
}

bool OAINicIPv6::is_controller1_ipv6_address_Valid() const{
    return m_controller1_ipv6_address_isValid;
}

QString OAINicIPv6::getIpv6Address() const {
    return m_ipv6_address;
}
void OAINicIPv6::setIpv6Address(const QString &ipv6_address) {
    m_ipv6_address = ipv6_address;
    m_ipv6_address_isSet = true;
}

bool OAINicIPv6::is_ipv6_address_Set() const{
    return m_ipv6_address_isSet;
}

bool OAINicIPv6::is_ipv6_address_Valid() const{
    return m_ipv6_address_isValid;
}

QString OAINicIPv6::getIpv6Gateway() const {
    return m_ipv6_gateway;
}
void OAINicIPv6::setIpv6Gateway(const QString &ipv6_gateway) {
    m_ipv6_gateway = ipv6_gateway;
    m_ipv6_gateway_isSet = true;
}

bool OAINicIPv6::is_ipv6_gateway_Set() const{
    return m_ipv6_gateway_isSet;
}

bool OAINicIPv6::is_ipv6_gateway_Valid() const{
    return m_ipv6_gateway_isValid;
}

QString OAINicIPv6::getIpv6Prefix() const {
    return m_ipv6_prefix;
}
void OAINicIPv6::setIpv6Prefix(const QString &ipv6_prefix) {
    m_ipv6_prefix = ipv6_prefix;
    m_ipv6_prefix_isSet = true;
}

bool OAINicIPv6::is_ipv6_prefix_Set() const{
    return m_ipv6_prefix_isSet;
}

bool OAINicIPv6::is_ipv6_prefix_Valid() const{
    return m_ipv6_prefix_isValid;
}

bool OAINicIPv6::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controller0_ipv6_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller1_ipv6_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINicIPv6::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
