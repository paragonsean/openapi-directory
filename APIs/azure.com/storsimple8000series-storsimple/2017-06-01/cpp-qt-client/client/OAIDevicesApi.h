/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDevicesApi_H
#define OAI_OAIDevicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigureDeviceRequest.h"
#include "OAIDevice.h"
#include "OAIDeviceList.h"
#include "OAIDevicePatch.h"
#include "OAIFailoverRequest.h"
#include "OAIFailoverSetsList.h"
#include "OAIFailoverTargetsList.h"
#include "OAIListFailoverTargetsRequest.h"
#include "OAIMetricDefinitionList.h"
#include "OAIMetricList.h"
#include "OAIUpdates.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDevicesApi : public QObject {
    Q_OBJECT

public:
    OAIDevicesApi(const int timeOut = 0);
    ~OAIDevicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesAuthorizeForServiceEncryptionKeyRollover(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIConfigureDeviceRequest [required]
    */
    virtual void devicesConfigure(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIConfigureDeviceRequest &parameters);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesDeactivate(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesDelete(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  source_device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIFailoverRequest [required]
    */
    virtual void devicesFailover(const QString &source_device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIFailoverRequest &parameters);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void devicesGet(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGetUpdateSummary(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesInstallUpdates(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void devicesListByManager(const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesListFailoverSets(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  source_device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIListFailoverTargetsRequest [required]
    */
    virtual void devicesListFailoverTargets(const QString &source_device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIListFailoverTargetsRequest &parameters);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesListMetricDefinition(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [required]
    */
    virtual void devicesListMetrics(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const QString &filter);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesScanForUpdates(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDevicePatch [required]
    */
    virtual void devicesUpdate(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIDevicePatch &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void devicesAuthorizeForServiceEncryptionKeyRolloverCallback(OAIHttpRequestWorker *worker);
    void devicesConfigureCallback(OAIHttpRequestWorker *worker);
    void devicesDeactivateCallback(OAIHttpRequestWorker *worker);
    void devicesDeleteCallback(OAIHttpRequestWorker *worker);
    void devicesFailoverCallback(OAIHttpRequestWorker *worker);
    void devicesGetCallback(OAIHttpRequestWorker *worker);
    void devicesGetUpdateSummaryCallback(OAIHttpRequestWorker *worker);
    void devicesInstallUpdatesCallback(OAIHttpRequestWorker *worker);
    void devicesListByManagerCallback(OAIHttpRequestWorker *worker);
    void devicesListFailoverSetsCallback(OAIHttpRequestWorker *worker);
    void devicesListFailoverTargetsCallback(OAIHttpRequestWorker *worker);
    void devicesListMetricDefinitionCallback(OAIHttpRequestWorker *worker);
    void devicesListMetricsCallback(OAIHttpRequestWorker *worker);
    void devicesScanForUpdatesCallback(OAIHttpRequestWorker *worker);
    void devicesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void devicesAuthorizeForServiceEncryptionKeyRolloverSignal();
    void devicesConfigureSignal();
    void devicesDeactivateSignal();
    void devicesDeleteSignal();
    void devicesFailoverSignal();
    void devicesGetSignal(OAIDevice summary);
    void devicesGetUpdateSummarySignal(OAIUpdates summary);
    void devicesInstallUpdatesSignal();
    void devicesListByManagerSignal(OAIDeviceList summary);
    void devicesListFailoverSetsSignal(OAIFailoverSetsList summary);
    void devicesListFailoverTargetsSignal(OAIFailoverTargetsList summary);
    void devicesListMetricDefinitionSignal(OAIMetricDefinitionList summary);
    void devicesListMetricsSignal(OAIMetricList summary);
    void devicesScanForUpdatesSignal();
    void devicesUpdateSignal(OAIDevice summary);


    void devicesAuthorizeForServiceEncryptionKeyRolloverSignalFull(OAIHttpRequestWorker *worker);
    void devicesConfigureSignalFull(OAIHttpRequestWorker *worker);
    void devicesDeactivateSignalFull(OAIHttpRequestWorker *worker);
    void devicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void devicesFailoverSignalFull(OAIHttpRequestWorker *worker);
    void devicesGetSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void devicesGetUpdateSummarySignalFull(OAIHttpRequestWorker *worker, OAIUpdates summary);
    void devicesInstallUpdatesSignalFull(OAIHttpRequestWorker *worker);
    void devicesListByManagerSignalFull(OAIHttpRequestWorker *worker, OAIDeviceList summary);
    void devicesListFailoverSetsSignalFull(OAIHttpRequestWorker *worker, OAIFailoverSetsList summary);
    void devicesListFailoverTargetsSignalFull(OAIHttpRequestWorker *worker, OAIFailoverTargetsList summary);
    void devicesListMetricDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionList summary);
    void devicesListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricList summary);
    void devicesScanForUpdatesSignalFull(OAIHttpRequestWorker *worker);
    void devicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);

    Q_DECL_DEPRECATED_X("Use devicesAuthorizeForServiceEncryptionKeyRolloverSignalError() instead")
    void devicesAuthorizeForServiceEncryptionKeyRolloverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesAuthorizeForServiceEncryptionKeyRolloverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesConfigureSignalError() instead")
    void devicesConfigureSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesConfigureSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeactivateSignalError() instead")
    void devicesDeactivateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeactivateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeleteSignalError() instead")
    void devicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesFailoverSignalError() instead")
    void devicesFailoverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesFailoverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetSignalError() instead")
    void devicesGetSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetUpdateSummarySignalError() instead")
    void devicesGetUpdateSummarySignalE(OAIUpdates summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetUpdateSummarySignalError(OAIUpdates summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesInstallUpdatesSignalError() instead")
    void devicesInstallUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesInstallUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListByManagerSignalError() instead")
    void devicesListByManagerSignalE(OAIDeviceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListByManagerSignalError(OAIDeviceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListFailoverSetsSignalError() instead")
    void devicesListFailoverSetsSignalE(OAIFailoverSetsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListFailoverSetsSignalError(OAIFailoverSetsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListFailoverTargetsSignalError() instead")
    void devicesListFailoverTargetsSignalE(OAIFailoverTargetsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListFailoverTargetsSignalError(OAIFailoverTargetsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListMetricDefinitionSignalError() instead")
    void devicesListMetricDefinitionSignalE(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListMetricDefinitionSignalError(OAIMetricDefinitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListMetricsSignalError() instead")
    void devicesListMetricsSignalE(OAIMetricList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListMetricsSignalError(OAIMetricList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesScanForUpdatesSignalError() instead")
    void devicesScanForUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesScanForUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdateSignalError() instead")
    void devicesUpdateSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdateSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use devicesAuthorizeForServiceEncryptionKeyRolloverSignalErrorFull() instead")
    void devicesAuthorizeForServiceEncryptionKeyRolloverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesAuthorizeForServiceEncryptionKeyRolloverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesConfigureSignalErrorFull() instead")
    void devicesConfigureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesConfigureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeactivateSignalErrorFull() instead")
    void devicesDeactivateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeactivateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeleteSignalErrorFull() instead")
    void devicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesFailoverSignalErrorFull() instead")
    void devicesFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetSignalErrorFull() instead")
    void devicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetUpdateSummarySignalErrorFull() instead")
    void devicesGetUpdateSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetUpdateSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesInstallUpdatesSignalErrorFull() instead")
    void devicesInstallUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesInstallUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListByManagerSignalErrorFull() instead")
    void devicesListByManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListByManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListFailoverSetsSignalErrorFull() instead")
    void devicesListFailoverSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListFailoverSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListFailoverTargetsSignalErrorFull() instead")
    void devicesListFailoverTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListFailoverTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListMetricDefinitionSignalErrorFull() instead")
    void devicesListMetricDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListMetricDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListMetricsSignalErrorFull() instead")
    void devicesListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesScanForUpdatesSignalErrorFull() instead")
    void devicesScanForUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesScanForUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdateSignalErrorFull() instead")
    void devicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
