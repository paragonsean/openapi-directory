/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeContainerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeContainerProperties::OAIVolumeContainerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeContainerProperties::OAIVolumeContainerProperties() {
    this->initializeModel();
}

OAIVolumeContainerProperties::~OAIVolumeContainerProperties() {}

void OAIVolumeContainerProperties::initializeModel() {

    m_band_width_rate_in_mbps_isSet = false;
    m_band_width_rate_in_mbps_isValid = false;

    m_bandwidth_setting_id_isSet = false;
    m_bandwidth_setting_id_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_encryption_status_isSet = false;
    m_encryption_status_isValid = false;

    m_owner_ship_status_isSet = false;
    m_owner_ship_status_isValid = false;

    m_storage_account_credential_id_isSet = false;
    m_storage_account_credential_id_isValid = false;

    m_total_cloud_storage_usage_in_bytes_isSet = false;
    m_total_cloud_storage_usage_in_bytes_isValid = false;

    m_volume_count_isSet = false;
    m_volume_count_isValid = false;
}

void OAIVolumeContainerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeContainerProperties::fromJsonObject(QJsonObject json) {

    m_band_width_rate_in_mbps_isValid = ::OpenAPI::fromJsonValue(m_band_width_rate_in_mbps, json[QString("bandWidthRateInMbps")]);
    m_band_width_rate_in_mbps_isSet = !json[QString("bandWidthRateInMbps")].isNull() && m_band_width_rate_in_mbps_isValid;

    m_bandwidth_setting_id_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_setting_id, json[QString("bandwidthSettingId")]);
    m_bandwidth_setting_id_isSet = !json[QString("bandwidthSettingId")].isNull() && m_bandwidth_setting_id_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_encryption_status_isValid = ::OpenAPI::fromJsonValue(m_encryption_status, json[QString("encryptionStatus")]);
    m_encryption_status_isSet = !json[QString("encryptionStatus")].isNull() && m_encryption_status_isValid;

    m_owner_ship_status_isValid = ::OpenAPI::fromJsonValue(m_owner_ship_status, json[QString("ownerShipStatus")]);
    m_owner_ship_status_isSet = !json[QString("ownerShipStatus")].isNull() && m_owner_ship_status_isValid;

    m_storage_account_credential_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_credential_id, json[QString("storageAccountCredentialId")]);
    m_storage_account_credential_id_isSet = !json[QString("storageAccountCredentialId")].isNull() && m_storage_account_credential_id_isValid;

    m_total_cloud_storage_usage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_cloud_storage_usage_in_bytes, json[QString("totalCloudStorageUsageInBytes")]);
    m_total_cloud_storage_usage_in_bytes_isSet = !json[QString("totalCloudStorageUsageInBytes")].isNull() && m_total_cloud_storage_usage_in_bytes_isValid;

    m_volume_count_isValid = ::OpenAPI::fromJsonValue(m_volume_count, json[QString("volumeCount")]);
    m_volume_count_isSet = !json[QString("volumeCount")].isNull() && m_volume_count_isValid;
}

QString OAIVolumeContainerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeContainerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_band_width_rate_in_mbps_isSet) {
        obj.insert(QString("bandWidthRateInMbps"), ::OpenAPI::toJsonValue(m_band_width_rate_in_mbps));
    }
    if (m_bandwidth_setting_id_isSet) {
        obj.insert(QString("bandwidthSettingId"), ::OpenAPI::toJsonValue(m_bandwidth_setting_id));
    }
    if (m_encryption_key.isSet()) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_encryption_status_isSet) {
        obj.insert(QString("encryptionStatus"), ::OpenAPI::toJsonValue(m_encryption_status));
    }
    if (m_owner_ship_status_isSet) {
        obj.insert(QString("ownerShipStatus"), ::OpenAPI::toJsonValue(m_owner_ship_status));
    }
    if (m_storage_account_credential_id_isSet) {
        obj.insert(QString("storageAccountCredentialId"), ::OpenAPI::toJsonValue(m_storage_account_credential_id));
    }
    if (m_total_cloud_storage_usage_in_bytes_isSet) {
        obj.insert(QString("totalCloudStorageUsageInBytes"), ::OpenAPI::toJsonValue(m_total_cloud_storage_usage_in_bytes));
    }
    if (m_volume_count_isSet) {
        obj.insert(QString("volumeCount"), ::OpenAPI::toJsonValue(m_volume_count));
    }
    return obj;
}

qint32 OAIVolumeContainerProperties::getBandWidthRateInMbps() const {
    return m_band_width_rate_in_mbps;
}
void OAIVolumeContainerProperties::setBandWidthRateInMbps(const qint32 &band_width_rate_in_mbps) {
    m_band_width_rate_in_mbps = band_width_rate_in_mbps;
    m_band_width_rate_in_mbps_isSet = true;
}

bool OAIVolumeContainerProperties::is_band_width_rate_in_mbps_Set() const{
    return m_band_width_rate_in_mbps_isSet;
}

bool OAIVolumeContainerProperties::is_band_width_rate_in_mbps_Valid() const{
    return m_band_width_rate_in_mbps_isValid;
}

QString OAIVolumeContainerProperties::getBandwidthSettingId() const {
    return m_bandwidth_setting_id;
}
void OAIVolumeContainerProperties::setBandwidthSettingId(const QString &bandwidth_setting_id) {
    m_bandwidth_setting_id = bandwidth_setting_id;
    m_bandwidth_setting_id_isSet = true;
}

bool OAIVolumeContainerProperties::is_bandwidth_setting_id_Set() const{
    return m_bandwidth_setting_id_isSet;
}

bool OAIVolumeContainerProperties::is_bandwidth_setting_id_Valid() const{
    return m_bandwidth_setting_id_isValid;
}

OAIAsymmetricEncryptedSecret OAIVolumeContainerProperties::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIVolumeContainerProperties::setEncryptionKey(const OAIAsymmetricEncryptedSecret &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIVolumeContainerProperties::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIVolumeContainerProperties::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QString OAIVolumeContainerProperties::getEncryptionStatus() const {
    return m_encryption_status;
}
void OAIVolumeContainerProperties::setEncryptionStatus(const QString &encryption_status) {
    m_encryption_status = encryption_status;
    m_encryption_status_isSet = true;
}

bool OAIVolumeContainerProperties::is_encryption_status_Set() const{
    return m_encryption_status_isSet;
}

bool OAIVolumeContainerProperties::is_encryption_status_Valid() const{
    return m_encryption_status_isValid;
}

QString OAIVolumeContainerProperties::getOwnerShipStatus() const {
    return m_owner_ship_status;
}
void OAIVolumeContainerProperties::setOwnerShipStatus(const QString &owner_ship_status) {
    m_owner_ship_status = owner_ship_status;
    m_owner_ship_status_isSet = true;
}

bool OAIVolumeContainerProperties::is_owner_ship_status_Set() const{
    return m_owner_ship_status_isSet;
}

bool OAIVolumeContainerProperties::is_owner_ship_status_Valid() const{
    return m_owner_ship_status_isValid;
}

QString OAIVolumeContainerProperties::getStorageAccountCredentialId() const {
    return m_storage_account_credential_id;
}
void OAIVolumeContainerProperties::setStorageAccountCredentialId(const QString &storage_account_credential_id) {
    m_storage_account_credential_id = storage_account_credential_id;
    m_storage_account_credential_id_isSet = true;
}

bool OAIVolumeContainerProperties::is_storage_account_credential_id_Set() const{
    return m_storage_account_credential_id_isSet;
}

bool OAIVolumeContainerProperties::is_storage_account_credential_id_Valid() const{
    return m_storage_account_credential_id_isValid;
}

qint64 OAIVolumeContainerProperties::getTotalCloudStorageUsageInBytes() const {
    return m_total_cloud_storage_usage_in_bytes;
}
void OAIVolumeContainerProperties::setTotalCloudStorageUsageInBytes(const qint64 &total_cloud_storage_usage_in_bytes) {
    m_total_cloud_storage_usage_in_bytes = total_cloud_storage_usage_in_bytes;
    m_total_cloud_storage_usage_in_bytes_isSet = true;
}

bool OAIVolumeContainerProperties::is_total_cloud_storage_usage_in_bytes_Set() const{
    return m_total_cloud_storage_usage_in_bytes_isSet;
}

bool OAIVolumeContainerProperties::is_total_cloud_storage_usage_in_bytes_Valid() const{
    return m_total_cloud_storage_usage_in_bytes_isValid;
}

qint32 OAIVolumeContainerProperties::getVolumeCount() const {
    return m_volume_count;
}
void OAIVolumeContainerProperties::setVolumeCount(const qint32 &volume_count) {
    m_volume_count = volume_count;
    m_volume_count_isSet = true;
}

bool OAIVolumeContainerProperties::is_volume_count_Set() const{
    return m_volume_count_isSet;
}

bool OAIVolumeContainerProperties::is_volume_count_Valid() const{
    return m_volume_count_isValid;
}

bool OAIVolumeContainerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_band_width_rate_in_mbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_setting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_ship_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_credential_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cloud_storage_usage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeContainerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_account_credential_id_isValid && true;
}

} // namespace OpenAPI
