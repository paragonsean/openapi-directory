/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatesProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatesProperties::OAIUpdatesProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatesProperties::OAIUpdatesProperties() {
    this->initializeModel();
}

OAIUpdatesProperties::~OAIUpdatesProperties() {}

void OAIUpdatesProperties::initializeModel() {

    m_is_update_in_progress_isSet = false;
    m_is_update_in_progress_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_maintenance_mode_updates_available_isSet = false;
    m_maintenance_mode_updates_available_isValid = false;

    m_regular_updates_available_isSet = false;
    m_regular_updates_available_isValid = false;
}

void OAIUpdatesProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatesProperties::fromJsonObject(QJsonObject json) {

    m_is_update_in_progress_isValid = ::OpenAPI::fromJsonValue(m_is_update_in_progress, json[QString("isUpdateInProgress")]);
    m_is_update_in_progress_isSet = !json[QString("isUpdateInProgress")].isNull() && m_is_update_in_progress_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_maintenance_mode_updates_available_isValid = ::OpenAPI::fromJsonValue(m_maintenance_mode_updates_available, json[QString("maintenanceModeUpdatesAvailable")]);
    m_maintenance_mode_updates_available_isSet = !json[QString("maintenanceModeUpdatesAvailable")].isNull() && m_maintenance_mode_updates_available_isValid;

    m_regular_updates_available_isValid = ::OpenAPI::fromJsonValue(m_regular_updates_available, json[QString("regularUpdatesAvailable")]);
    m_regular_updates_available_isSet = !json[QString("regularUpdatesAvailable")].isNull() && m_regular_updates_available_isValid;
}

QString OAIUpdatesProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatesProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_is_update_in_progress_isSet) {
        obj.insert(QString("isUpdateInProgress"), ::OpenAPI::toJsonValue(m_is_update_in_progress));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_maintenance_mode_updates_available_isSet) {
        obj.insert(QString("maintenanceModeUpdatesAvailable"), ::OpenAPI::toJsonValue(m_maintenance_mode_updates_available));
    }
    if (m_regular_updates_available_isSet) {
        obj.insert(QString("regularUpdatesAvailable"), ::OpenAPI::toJsonValue(m_regular_updates_available));
    }
    return obj;
}

bool OAIUpdatesProperties::isIsUpdateInProgress() const {
    return m_is_update_in_progress;
}
void OAIUpdatesProperties::setIsUpdateInProgress(const bool &is_update_in_progress) {
    m_is_update_in_progress = is_update_in_progress;
    m_is_update_in_progress_isSet = true;
}

bool OAIUpdatesProperties::is_is_update_in_progress_Set() const{
    return m_is_update_in_progress_isSet;
}

bool OAIUpdatesProperties::is_is_update_in_progress_Valid() const{
    return m_is_update_in_progress_isValid;
}

QDateTime OAIUpdatesProperties::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIUpdatesProperties::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIUpdatesProperties::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIUpdatesProperties::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIUpdatesProperties::isMaintenanceModeUpdatesAvailable() const {
    return m_maintenance_mode_updates_available;
}
void OAIUpdatesProperties::setMaintenanceModeUpdatesAvailable(const bool &maintenance_mode_updates_available) {
    m_maintenance_mode_updates_available = maintenance_mode_updates_available;
    m_maintenance_mode_updates_available_isSet = true;
}

bool OAIUpdatesProperties::is_maintenance_mode_updates_available_Set() const{
    return m_maintenance_mode_updates_available_isSet;
}

bool OAIUpdatesProperties::is_maintenance_mode_updates_available_Valid() const{
    return m_maintenance_mode_updates_available_isValid;
}

bool OAIUpdatesProperties::isRegularUpdatesAvailable() const {
    return m_regular_updates_available;
}
void OAIUpdatesProperties::setRegularUpdatesAvailable(const bool &regular_updates_available) {
    m_regular_updates_available = regular_updates_available;
    m_regular_updates_available_isSet = true;
}

bool OAIUpdatesProperties::is_regular_updates_available_Set() const{
    return m_regular_updates_available_isSet;
}

bool OAIUpdatesProperties::is_regular_updates_available_Valid() const{
    return m_regular_updates_available_isValid;
}

bool OAIUpdatesProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_update_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_mode_updates_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_updates_available_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
