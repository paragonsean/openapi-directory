/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeviceSettingsApi_H
#define OAI_OAIDeviceSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlertSettings.h"
#include "OAINetworkSettings.h"
#include "OAINetworkSettingsPatch.h"
#include "OAISecuritySettings.h"
#include "OAISecuritySettingsPatch.h"
#include "OAITimeSettings.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeviceSettingsApi : public QObject {
    Q_OBJECT

public:
    OAIDeviceSettingsApi(const int timeOut = 0);
    ~OAIDeviceSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAlertSettings [required]
    */
    virtual void deviceSettingsCreateOrUpdateAlertSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIAlertSettings &parameters);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAITimeSettings [required]
    */
    virtual void deviceSettingsCreateOrUpdateTimeSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAITimeSettings &parameters);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deviceSettingsGetAlertSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deviceSettingsGetNetworkSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deviceSettingsGetSecuritySettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deviceSettingsGetTimeSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deviceSettingsSyncRemotemanagementCertificate(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAINetworkSettingsPatch [required]
    */
    virtual void deviceSettingsUpdateNetworkSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAINetworkSettingsPatch &parameters);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISecuritySettingsPatch [required]
    */
    virtual void deviceSettingsUpdateSecuritySettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAISecuritySettingsPatch &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deviceSettingsCreateOrUpdateAlertSettingsCallback(OAIHttpRequestWorker *worker);
    void deviceSettingsCreateOrUpdateTimeSettingsCallback(OAIHttpRequestWorker *worker);
    void deviceSettingsGetAlertSettingsCallback(OAIHttpRequestWorker *worker);
    void deviceSettingsGetNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void deviceSettingsGetSecuritySettingsCallback(OAIHttpRequestWorker *worker);
    void deviceSettingsGetTimeSettingsCallback(OAIHttpRequestWorker *worker);
    void deviceSettingsSyncRemotemanagementCertificateCallback(OAIHttpRequestWorker *worker);
    void deviceSettingsUpdateNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void deviceSettingsUpdateSecuritySettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deviceSettingsCreateOrUpdateAlertSettingsSignal(OAIAlertSettings summary);
    void deviceSettingsCreateOrUpdateTimeSettingsSignal(OAITimeSettings summary);
    void deviceSettingsGetAlertSettingsSignal(OAIAlertSettings summary);
    void deviceSettingsGetNetworkSettingsSignal(OAINetworkSettings summary);
    void deviceSettingsGetSecuritySettingsSignal(OAISecuritySettings summary);
    void deviceSettingsGetTimeSettingsSignal(OAITimeSettings summary);
    void deviceSettingsSyncRemotemanagementCertificateSignal();
    void deviceSettingsUpdateNetworkSettingsSignal(OAINetworkSettings summary);
    void deviceSettingsUpdateSecuritySettingsSignal(OAISecuritySettings summary);


    void deviceSettingsCreateOrUpdateAlertSettingsSignalFull(OAIHttpRequestWorker *worker, OAIAlertSettings summary);
    void deviceSettingsCreateOrUpdateTimeSettingsSignalFull(OAIHttpRequestWorker *worker, OAITimeSettings summary);
    void deviceSettingsGetAlertSettingsSignalFull(OAIHttpRequestWorker *worker, OAIAlertSettings summary);
    void deviceSettingsGetNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAINetworkSettings summary);
    void deviceSettingsGetSecuritySettingsSignalFull(OAIHttpRequestWorker *worker, OAISecuritySettings summary);
    void deviceSettingsGetTimeSettingsSignalFull(OAIHttpRequestWorker *worker, OAITimeSettings summary);
    void deviceSettingsSyncRemotemanagementCertificateSignalFull(OAIHttpRequestWorker *worker);
    void deviceSettingsUpdateNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAINetworkSettings summary);
    void deviceSettingsUpdateSecuritySettingsSignalFull(OAIHttpRequestWorker *worker, OAISecuritySettings summary);

    Q_DECL_DEPRECATED_X("Use deviceSettingsCreateOrUpdateAlertSettingsSignalError() instead")
    void deviceSettingsCreateOrUpdateAlertSettingsSignalE(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsCreateOrUpdateAlertSettingsSignalError(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsCreateOrUpdateTimeSettingsSignalError() instead")
    void deviceSettingsCreateOrUpdateTimeSettingsSignalE(OAITimeSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsCreateOrUpdateTimeSettingsSignalError(OAITimeSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsGetAlertSettingsSignalError() instead")
    void deviceSettingsGetAlertSettingsSignalE(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsGetAlertSettingsSignalError(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsGetNetworkSettingsSignalError() instead")
    void deviceSettingsGetNetworkSettingsSignalE(OAINetworkSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsGetNetworkSettingsSignalError(OAINetworkSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsGetSecuritySettingsSignalError() instead")
    void deviceSettingsGetSecuritySettingsSignalE(OAISecuritySettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsGetSecuritySettingsSignalError(OAISecuritySettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsGetTimeSettingsSignalError() instead")
    void deviceSettingsGetTimeSettingsSignalE(OAITimeSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsGetTimeSettingsSignalError(OAITimeSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsSyncRemotemanagementCertificateSignalError() instead")
    void deviceSettingsSyncRemotemanagementCertificateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsSyncRemotemanagementCertificateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsUpdateNetworkSettingsSignalError() instead")
    void deviceSettingsUpdateNetworkSettingsSignalE(OAINetworkSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsUpdateNetworkSettingsSignalError(OAINetworkSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsUpdateSecuritySettingsSignalError() instead")
    void deviceSettingsUpdateSecuritySettingsSignalE(OAISecuritySettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsUpdateSecuritySettingsSignalError(OAISecuritySettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deviceSettingsCreateOrUpdateAlertSettingsSignalErrorFull() instead")
    void deviceSettingsCreateOrUpdateAlertSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsCreateOrUpdateAlertSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsCreateOrUpdateTimeSettingsSignalErrorFull() instead")
    void deviceSettingsCreateOrUpdateTimeSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsCreateOrUpdateTimeSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsGetAlertSettingsSignalErrorFull() instead")
    void deviceSettingsGetAlertSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsGetAlertSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsGetNetworkSettingsSignalErrorFull() instead")
    void deviceSettingsGetNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsGetNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsGetSecuritySettingsSignalErrorFull() instead")
    void deviceSettingsGetSecuritySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsGetSecuritySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsGetTimeSettingsSignalErrorFull() instead")
    void deviceSettingsGetTimeSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsGetTimeSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsSyncRemotemanagementCertificateSignalErrorFull() instead")
    void deviceSettingsSyncRemotemanagementCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsSyncRemotemanagementCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsUpdateNetworkSettingsSignalErrorFull() instead")
    void deviceSettingsUpdateNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsUpdateNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceSettingsUpdateSecuritySettingsSignalErrorFull() instead")
    void deviceSettingsUpdateSecuritySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceSettingsUpdateSecuritySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
