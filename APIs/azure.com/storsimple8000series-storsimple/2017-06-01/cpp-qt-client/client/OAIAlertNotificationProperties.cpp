/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertNotificationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertNotificationProperties::OAIAlertNotificationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertNotificationProperties::OAIAlertNotificationProperties() {
    this->initializeModel();
}

OAIAlertNotificationProperties::~OAIAlertNotificationProperties() {}

void OAIAlertNotificationProperties::initializeModel() {

    m_additional_recipient_email_list_isSet = false;
    m_additional_recipient_email_list_isValid = false;

    m_alert_notification_culture_isSet = false;
    m_alert_notification_culture_isValid = false;

    m_email_notification_isSet = false;
    m_email_notification_isValid = false;

    m_notification_to_service_owners_isSet = false;
    m_notification_to_service_owners_isValid = false;
}

void OAIAlertNotificationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertNotificationProperties::fromJsonObject(QJsonObject json) {

    m_additional_recipient_email_list_isValid = ::OpenAPI::fromJsonValue(m_additional_recipient_email_list, json[QString("additionalRecipientEmailList")]);
    m_additional_recipient_email_list_isSet = !json[QString("additionalRecipientEmailList")].isNull() && m_additional_recipient_email_list_isValid;

    m_alert_notification_culture_isValid = ::OpenAPI::fromJsonValue(m_alert_notification_culture, json[QString("alertNotificationCulture")]);
    m_alert_notification_culture_isSet = !json[QString("alertNotificationCulture")].isNull() && m_alert_notification_culture_isValid;

    m_email_notification_isValid = ::OpenAPI::fromJsonValue(m_email_notification, json[QString("emailNotification")]);
    m_email_notification_isSet = !json[QString("emailNotification")].isNull() && m_email_notification_isValid;

    m_notification_to_service_owners_isValid = ::OpenAPI::fromJsonValue(m_notification_to_service_owners, json[QString("notificationToServiceOwners")]);
    m_notification_to_service_owners_isSet = !json[QString("notificationToServiceOwners")].isNull() && m_notification_to_service_owners_isValid;
}

QString OAIAlertNotificationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertNotificationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_recipient_email_list.size() > 0) {
        obj.insert(QString("additionalRecipientEmailList"), ::OpenAPI::toJsonValue(m_additional_recipient_email_list));
    }
    if (m_alert_notification_culture_isSet) {
        obj.insert(QString("alertNotificationCulture"), ::OpenAPI::toJsonValue(m_alert_notification_culture));
    }
    if (m_email_notification_isSet) {
        obj.insert(QString("emailNotification"), ::OpenAPI::toJsonValue(m_email_notification));
    }
    if (m_notification_to_service_owners_isSet) {
        obj.insert(QString("notificationToServiceOwners"), ::OpenAPI::toJsonValue(m_notification_to_service_owners));
    }
    return obj;
}

QList<QString> OAIAlertNotificationProperties::getAdditionalRecipientEmailList() const {
    return m_additional_recipient_email_list;
}
void OAIAlertNotificationProperties::setAdditionalRecipientEmailList(const QList<QString> &additional_recipient_email_list) {
    m_additional_recipient_email_list = additional_recipient_email_list;
    m_additional_recipient_email_list_isSet = true;
}

bool OAIAlertNotificationProperties::is_additional_recipient_email_list_Set() const{
    return m_additional_recipient_email_list_isSet;
}

bool OAIAlertNotificationProperties::is_additional_recipient_email_list_Valid() const{
    return m_additional_recipient_email_list_isValid;
}

QString OAIAlertNotificationProperties::getAlertNotificationCulture() const {
    return m_alert_notification_culture;
}
void OAIAlertNotificationProperties::setAlertNotificationCulture(const QString &alert_notification_culture) {
    m_alert_notification_culture = alert_notification_culture;
    m_alert_notification_culture_isSet = true;
}

bool OAIAlertNotificationProperties::is_alert_notification_culture_Set() const{
    return m_alert_notification_culture_isSet;
}

bool OAIAlertNotificationProperties::is_alert_notification_culture_Valid() const{
    return m_alert_notification_culture_isValid;
}

QString OAIAlertNotificationProperties::getEmailNotification() const {
    return m_email_notification;
}
void OAIAlertNotificationProperties::setEmailNotification(const QString &email_notification) {
    m_email_notification = email_notification;
    m_email_notification_isSet = true;
}

bool OAIAlertNotificationProperties::is_email_notification_Set() const{
    return m_email_notification_isSet;
}

bool OAIAlertNotificationProperties::is_email_notification_Valid() const{
    return m_email_notification_isValid;
}

QString OAIAlertNotificationProperties::getNotificationToServiceOwners() const {
    return m_notification_to_service_owners;
}
void OAIAlertNotificationProperties::setNotificationToServiceOwners(const QString &notification_to_service_owners) {
    m_notification_to_service_owners = notification_to_service_owners;
    m_notification_to_service_owners_isSet = true;
}

bool OAIAlertNotificationProperties::is_notification_to_service_owners_Set() const{
    return m_notification_to_service_owners_isSet;
}

bool OAIAlertNotificationProperties::is_notification_to_service_owners_Valid() const{
    return m_notification_to_service_owners_isValid;
}

bool OAIAlertNotificationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_recipient_email_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_notification_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_to_service_owners_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertNotificationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_notification_isValid && true;
}

} // namespace OpenAPI
