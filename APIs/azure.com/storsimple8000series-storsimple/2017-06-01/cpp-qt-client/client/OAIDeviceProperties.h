/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceProperties.h
 *
 * The properties of the StorSimple device.
 */

#ifndef OAIDeviceProperties_H
#define OAIDeviceProperties_H

#include <QJsonObject>

#include "OAIDeviceDetails.h"
#include "OAIDeviceRolloverDetails.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeviceDetails;
class OAIDeviceRolloverDetails;

class OAIDeviceProperties : public OAIObject {
public:
    OAIDeviceProperties();
    OAIDeviceProperties(QString json);
    ~OAIDeviceProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getActivationTime() const;
    void setActivationTime(const QDateTime &activation_time);
    bool is_activation_time_Set() const;
    bool is_activation_time_Valid() const;

    QString getActiveController() const;
    void setActiveController(const QString &active_controller);
    bool is_active_controller_Set() const;
    bool is_active_controller_Valid() const;

    qint32 getAgentGroupVersion() const;
    void setAgentGroupVersion(const qint32 &agent_group_version);
    bool is_agent_group_version_Set() const;
    bool is_agent_group_version_Valid() const;

    qint64 getAvailableLocalStorageInBytes() const;
    void setAvailableLocalStorageInBytes(const qint64 &available_local_storage_in_bytes);
    bool is_available_local_storage_in_bytes_Set() const;
    bool is_available_local_storage_in_bytes_Valid() const;

    qint64 getAvailableTieredStorageInBytes() const;
    void setAvailableTieredStorageInBytes(const qint64 &available_tiered_storage_in_bytes);
    bool is_available_tiered_storage_in_bytes_Set() const;
    bool is_available_tiered_storage_in_bytes_Valid() const;

    QString getCulture() const;
    void setCulture(const QString &culture);
    bool is_culture_Set() const;
    bool is_culture_Valid() const;

    OAIDeviceDetails getDetails() const;
    void setDetails(const OAIDeviceDetails &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getDeviceConfigurationStatus() const;
    void setDeviceConfigurationStatus(const QString &device_configuration_status);
    bool is_device_configuration_status_Set() const;
    bool is_device_configuration_status_Valid() const;

    QString getDeviceDescription() const;
    void setDeviceDescription(const QString &device_description);
    bool is_device_description_Set() const;
    bool is_device_description_Valid() const;

    QString getDeviceLocation() const;
    void setDeviceLocation(const QString &device_location);
    bool is_device_location_Set() const;
    bool is_device_location_Valid() const;

    QString getDeviceSoftwareVersion() const;
    void setDeviceSoftwareVersion(const QString &device_software_version);
    bool is_device_software_version_Set() const;
    bool is_device_software_version_Valid() const;

    QString getDeviceType() const;
    void setDeviceType(const QString &device_type);
    bool is_device_type_Set() const;
    bool is_device_type_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QString getFriendlySoftwareName() const;
    void setFriendlySoftwareName(const QString &friendly_software_name);
    bool is_friendly_software_name_Set() const;
    bool is_friendly_software_name_Valid() const;

    QString getFriendlySoftwareVersion() const;
    void setFriendlySoftwareVersion(const QString &friendly_software_version);
    bool is_friendly_software_version_Set() const;
    bool is_friendly_software_version_Valid() const;

    QString getModelDescription() const;
    void setModelDescription(const QString &model_description);
    bool is_model_description_Set() const;
    bool is_model_description_Valid() const;

    qint32 getNetworkInterfaceCardCount() const;
    void setNetworkInterfaceCardCount(const qint32 &network_interface_card_count);
    bool is_network_interface_card_count_Set() const;
    bool is_network_interface_card_count_Valid() const;

    qint64 getProvisionedLocalStorageInBytes() const;
    void setProvisionedLocalStorageInBytes(const qint64 &provisioned_local_storage_in_bytes);
    bool is_provisioned_local_storage_in_bytes_Set() const;
    bool is_provisioned_local_storage_in_bytes_Valid() const;

    qint64 getProvisionedTieredStorageInBytes() const;
    void setProvisionedTieredStorageInBytes(const qint64 &provisioned_tiered_storage_in_bytes);
    bool is_provisioned_tiered_storage_in_bytes_Set() const;
    bool is_provisioned_tiered_storage_in_bytes_Valid() const;

    qint64 getProvisionedVolumeSizeInBytes() const;
    void setProvisionedVolumeSizeInBytes(const qint64 &provisioned_volume_size_in_bytes);
    bool is_provisioned_volume_size_in_bytes_Set() const;
    bool is_provisioned_volume_size_in_bytes_Valid() const;

    OAIDeviceRolloverDetails getRolloverDetails() const;
    void setRolloverDetails(const OAIDeviceRolloverDetails &rollover_details);
    bool is_rollover_details_Set() const;
    bool is_rollover_details_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTargetIqn() const;
    void setTargetIqn(const QString &target_iqn);
    bool is_target_iqn_Set() const;
    bool is_target_iqn_Valid() const;

    qint64 getTotalTieredStorageInBytes() const;
    void setTotalTieredStorageInBytes(const qint64 &total_tiered_storage_in_bytes);
    bool is_total_tiered_storage_in_bytes_Set() const;
    bool is_total_tiered_storage_in_bytes_Valid() const;

    qint64 getUsingStorageInBytes() const;
    void setUsingStorageInBytes(const qint64 &using_storage_in_bytes);
    bool is_using_storage_in_bytes_Set() const;
    bool is_using_storage_in_bytes_Valid() const;

    QString getVirtualMachineApiType() const;
    void setVirtualMachineApiType(const QString &virtual_machine_api_type);
    bool is_virtual_machine_api_type_Set() const;
    bool is_virtual_machine_api_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_activation_time;
    bool m_activation_time_isSet;
    bool m_activation_time_isValid;

    QString m_active_controller;
    bool m_active_controller_isSet;
    bool m_active_controller_isValid;

    qint32 m_agent_group_version;
    bool m_agent_group_version_isSet;
    bool m_agent_group_version_isValid;

    qint64 m_available_local_storage_in_bytes;
    bool m_available_local_storage_in_bytes_isSet;
    bool m_available_local_storage_in_bytes_isValid;

    qint64 m_available_tiered_storage_in_bytes;
    bool m_available_tiered_storage_in_bytes_isSet;
    bool m_available_tiered_storage_in_bytes_isValid;

    QString m_culture;
    bool m_culture_isSet;
    bool m_culture_isValid;

    OAIDeviceDetails m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_device_configuration_status;
    bool m_device_configuration_status_isSet;
    bool m_device_configuration_status_isValid;

    QString m_device_description;
    bool m_device_description_isSet;
    bool m_device_description_isValid;

    QString m_device_location;
    bool m_device_location_isSet;
    bool m_device_location_isValid;

    QString m_device_software_version;
    bool m_device_software_version_isSet;
    bool m_device_software_version_isValid;

    QString m_device_type;
    bool m_device_type_isSet;
    bool m_device_type_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QString m_friendly_software_name;
    bool m_friendly_software_name_isSet;
    bool m_friendly_software_name_isValid;

    QString m_friendly_software_version;
    bool m_friendly_software_version_isSet;
    bool m_friendly_software_version_isValid;

    QString m_model_description;
    bool m_model_description_isSet;
    bool m_model_description_isValid;

    qint32 m_network_interface_card_count;
    bool m_network_interface_card_count_isSet;
    bool m_network_interface_card_count_isValid;

    qint64 m_provisioned_local_storage_in_bytes;
    bool m_provisioned_local_storage_in_bytes_isSet;
    bool m_provisioned_local_storage_in_bytes_isValid;

    qint64 m_provisioned_tiered_storage_in_bytes;
    bool m_provisioned_tiered_storage_in_bytes_isSet;
    bool m_provisioned_tiered_storage_in_bytes_isValid;

    qint64 m_provisioned_volume_size_in_bytes;
    bool m_provisioned_volume_size_in_bytes_isSet;
    bool m_provisioned_volume_size_in_bytes_isValid;

    OAIDeviceRolloverDetails m_rollover_details;
    bool m_rollover_details_isSet;
    bool m_rollover_details_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_target_iqn;
    bool m_target_iqn_isSet;
    bool m_target_iqn_isValid;

    qint64 m_total_tiered_storage_in_bytes;
    bool m_total_tiered_storage_in_bytes_isSet;
    bool m_total_tiered_storage_in_bytes_isValid;

    qint64 m_using_storage_in_bytes;
    bool m_using_storage_in_bytes_isSet;
    bool m_using_storage_in_bytes_isValid;

    QString m_virtual_machine_api_type;
    bool m_virtual_machine_api_type_isSet;
    bool m_virtual_machine_api_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceProperties)

#endif // OAIDeviceProperties_H
