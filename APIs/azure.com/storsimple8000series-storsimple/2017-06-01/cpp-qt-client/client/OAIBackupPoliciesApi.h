/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBackupPoliciesApi_H
#define OAI_OAIBackupPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupPolicy.h"
#include "OAIBackupPolicyList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBackupPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIBackupPoliciesApi(const int timeOut = 0);
    ~OAIBackupPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  backup_policy_name QString [required]
    * @param[in]  backup_type QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupPoliciesBackupNow(const QString &device_name, const QString &backup_policy_name, const QString &backup_type, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  backup_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIBackupPolicy [required]
    */
    virtual void backupPoliciesCreateOrUpdate(const QString &device_name, const QString &backup_policy_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version, const OAIBackupPolicy &parameters);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  backup_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupPoliciesDelete(const QString &device_name, const QString &backup_policy_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  backup_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupPoliciesGet(const QString &device_name, const QString &backup_policy_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupPoliciesListByDevice(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &manager_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupPoliciesBackupNowCallback(OAIHttpRequestWorker *worker);
    void backupPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void backupPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void backupPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void backupPoliciesListByDeviceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupPoliciesBackupNowSignal();
    void backupPoliciesCreateOrUpdateSignal(OAIBackupPolicy summary);
    void backupPoliciesDeleteSignal();
    void backupPoliciesGetSignal(OAIBackupPolicy summary);
    void backupPoliciesListByDeviceSignal(OAIBackupPolicyList summary);


    void backupPoliciesBackupNowSignalFull(OAIHttpRequestWorker *worker);
    void backupPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBackupPolicy summary);
    void backupPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void backupPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIBackupPolicy summary);
    void backupPoliciesListByDeviceSignalFull(OAIHttpRequestWorker *worker, OAIBackupPolicyList summary);

    Q_DECL_DEPRECATED_X("Use backupPoliciesBackupNowSignalError() instead")
    void backupPoliciesBackupNowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesBackupNowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupPoliciesCreateOrUpdateSignalError() instead")
    void backupPoliciesCreateOrUpdateSignalE(OAIBackupPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesCreateOrUpdateSignalError(OAIBackupPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupPoliciesDeleteSignalError() instead")
    void backupPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupPoliciesGetSignalError() instead")
    void backupPoliciesGetSignalE(OAIBackupPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesGetSignalError(OAIBackupPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupPoliciesListByDeviceSignalError() instead")
    void backupPoliciesListByDeviceSignalE(OAIBackupPolicyList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesListByDeviceSignalError(OAIBackupPolicyList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupPoliciesBackupNowSignalErrorFull() instead")
    void backupPoliciesBackupNowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesBackupNowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupPoliciesCreateOrUpdateSignalErrorFull() instead")
    void backupPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupPoliciesDeleteSignalErrorFull() instead")
    void backupPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupPoliciesGetSignalErrorFull() instead")
    void backupPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupPoliciesListByDeviceSignalErrorFull() instead")
    void backupPoliciesListByDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPoliciesListByDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
