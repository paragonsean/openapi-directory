/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudApplianceConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudApplianceConfigurationProperties::OAICloudApplianceConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudApplianceConfigurationProperties::OAICloudApplianceConfigurationProperties() {
    this->initializeModel();
}

OAICloudApplianceConfigurationProperties::~OAICloudApplianceConfigurationProperties() {}

void OAICloudApplianceConfigurationProperties::initializeModel() {

    m_acs_configuration_isSet = false;
    m_acs_configuration_isValid = false;

    m_cloud_platform_isSet = false;
    m_cloud_platform_isValid = false;

    m_model_number_isSet = false;
    m_model_number_isValid = false;

    m_supported_regions_isSet = false;
    m_supported_regions_isValid = false;

    m_supported_storage_account_types_isSet = false;
    m_supported_storage_account_types_isValid = false;

    m_supported_vm_images_isSet = false;
    m_supported_vm_images_isValid = false;

    m_supported_vm_types_isSet = false;
    m_supported_vm_types_isValid = false;
}

void OAICloudApplianceConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudApplianceConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_acs_configuration_isValid = ::OpenAPI::fromJsonValue(m_acs_configuration, json[QString("acsConfiguration")]);
    m_acs_configuration_isSet = !json[QString("acsConfiguration")].isNull() && m_acs_configuration_isValid;

    m_cloud_platform_isValid = ::OpenAPI::fromJsonValue(m_cloud_platform, json[QString("cloudPlatform")]);
    m_cloud_platform_isSet = !json[QString("cloudPlatform")].isNull() && m_cloud_platform_isValid;

    m_model_number_isValid = ::OpenAPI::fromJsonValue(m_model_number, json[QString("modelNumber")]);
    m_model_number_isSet = !json[QString("modelNumber")].isNull() && m_model_number_isValid;

    m_supported_regions_isValid = ::OpenAPI::fromJsonValue(m_supported_regions, json[QString("supportedRegions")]);
    m_supported_regions_isSet = !json[QString("supportedRegions")].isNull() && m_supported_regions_isValid;

    m_supported_storage_account_types_isValid = ::OpenAPI::fromJsonValue(m_supported_storage_account_types, json[QString("supportedStorageAccountTypes")]);
    m_supported_storage_account_types_isSet = !json[QString("supportedStorageAccountTypes")].isNull() && m_supported_storage_account_types_isValid;

    m_supported_vm_images_isValid = ::OpenAPI::fromJsonValue(m_supported_vm_images, json[QString("supportedVmImages")]);
    m_supported_vm_images_isSet = !json[QString("supportedVmImages")].isNull() && m_supported_vm_images_isValid;

    m_supported_vm_types_isValid = ::OpenAPI::fromJsonValue(m_supported_vm_types, json[QString("supportedVmTypes")]);
    m_supported_vm_types_isSet = !json[QString("supportedVmTypes")].isNull() && m_supported_vm_types_isValid;
}

QString OAICloudApplianceConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudApplianceConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_acs_configuration.isSet()) {
        obj.insert(QString("acsConfiguration"), ::OpenAPI::toJsonValue(m_acs_configuration));
    }
    if (m_cloud_platform_isSet) {
        obj.insert(QString("cloudPlatform"), ::OpenAPI::toJsonValue(m_cloud_platform));
    }
    if (m_model_number_isSet) {
        obj.insert(QString("modelNumber"), ::OpenAPI::toJsonValue(m_model_number));
    }
    if (m_supported_regions.size() > 0) {
        obj.insert(QString("supportedRegions"), ::OpenAPI::toJsonValue(m_supported_regions));
    }
    if (m_supported_storage_account_types.size() > 0) {
        obj.insert(QString("supportedStorageAccountTypes"), ::OpenAPI::toJsonValue(m_supported_storage_account_types));
    }
    if (m_supported_vm_images.size() > 0) {
        obj.insert(QString("supportedVmImages"), ::OpenAPI::toJsonValue(m_supported_vm_images));
    }
    if (m_supported_vm_types.size() > 0) {
        obj.insert(QString("supportedVmTypes"), ::OpenAPI::toJsonValue(m_supported_vm_types));
    }
    return obj;
}

OAIAcsConfiguration OAICloudApplianceConfigurationProperties::getAcsConfiguration() const {
    return m_acs_configuration;
}
void OAICloudApplianceConfigurationProperties::setAcsConfiguration(const OAIAcsConfiguration &acs_configuration) {
    m_acs_configuration = acs_configuration;
    m_acs_configuration_isSet = true;
}

bool OAICloudApplianceConfigurationProperties::is_acs_configuration_Set() const{
    return m_acs_configuration_isSet;
}

bool OAICloudApplianceConfigurationProperties::is_acs_configuration_Valid() const{
    return m_acs_configuration_isValid;
}

QString OAICloudApplianceConfigurationProperties::getCloudPlatform() const {
    return m_cloud_platform;
}
void OAICloudApplianceConfigurationProperties::setCloudPlatform(const QString &cloud_platform) {
    m_cloud_platform = cloud_platform;
    m_cloud_platform_isSet = true;
}

bool OAICloudApplianceConfigurationProperties::is_cloud_platform_Set() const{
    return m_cloud_platform_isSet;
}

bool OAICloudApplianceConfigurationProperties::is_cloud_platform_Valid() const{
    return m_cloud_platform_isValid;
}

QString OAICloudApplianceConfigurationProperties::getModelNumber() const {
    return m_model_number;
}
void OAICloudApplianceConfigurationProperties::setModelNumber(const QString &model_number) {
    m_model_number = model_number;
    m_model_number_isSet = true;
}

bool OAICloudApplianceConfigurationProperties::is_model_number_Set() const{
    return m_model_number_isSet;
}

bool OAICloudApplianceConfigurationProperties::is_model_number_Valid() const{
    return m_model_number_isValid;
}

QList<QString> OAICloudApplianceConfigurationProperties::getSupportedRegions() const {
    return m_supported_regions;
}
void OAICloudApplianceConfigurationProperties::setSupportedRegions(const QList<QString> &supported_regions) {
    m_supported_regions = supported_regions;
    m_supported_regions_isSet = true;
}

bool OAICloudApplianceConfigurationProperties::is_supported_regions_Set() const{
    return m_supported_regions_isSet;
}

bool OAICloudApplianceConfigurationProperties::is_supported_regions_Valid() const{
    return m_supported_regions_isValid;
}

QList<QString> OAICloudApplianceConfigurationProperties::getSupportedStorageAccountTypes() const {
    return m_supported_storage_account_types;
}
void OAICloudApplianceConfigurationProperties::setSupportedStorageAccountTypes(const QList<QString> &supported_storage_account_types) {
    m_supported_storage_account_types = supported_storage_account_types;
    m_supported_storage_account_types_isSet = true;
}

bool OAICloudApplianceConfigurationProperties::is_supported_storage_account_types_Set() const{
    return m_supported_storage_account_types_isSet;
}

bool OAICloudApplianceConfigurationProperties::is_supported_storage_account_types_Valid() const{
    return m_supported_storage_account_types_isValid;
}

QList<OAIVmImage> OAICloudApplianceConfigurationProperties::getSupportedVmImages() const {
    return m_supported_vm_images;
}
void OAICloudApplianceConfigurationProperties::setSupportedVmImages(const QList<OAIVmImage> &supported_vm_images) {
    m_supported_vm_images = supported_vm_images;
    m_supported_vm_images_isSet = true;
}

bool OAICloudApplianceConfigurationProperties::is_supported_vm_images_Set() const{
    return m_supported_vm_images_isSet;
}

bool OAICloudApplianceConfigurationProperties::is_supported_vm_images_Valid() const{
    return m_supported_vm_images_isValid;
}

QList<QString> OAICloudApplianceConfigurationProperties::getSupportedVmTypes() const {
    return m_supported_vm_types;
}
void OAICloudApplianceConfigurationProperties::setSupportedVmTypes(const QList<QString> &supported_vm_types) {
    m_supported_vm_types = supported_vm_types;
    m_supported_vm_types_isSet = true;
}

bool OAICloudApplianceConfigurationProperties::is_supported_vm_types_Set() const{
    return m_supported_vm_types_isSet;
}

bool OAICloudApplianceConfigurationProperties::is_supported_vm_types_Valid() const{
    return m_supported_vm_types_isValid;
}

bool OAICloudApplianceConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acs_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_storage_account_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_vm_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_vm_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudApplianceConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acs_configuration_isValid && m_cloud_platform_isValid && m_model_number_isValid && m_supported_regions_isValid && m_supported_storage_account_types_isValid && m_supported_vm_images_isValid && m_supported_vm_types_isValid && true;
}

} // namespace OpenAPI
