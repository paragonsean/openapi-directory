/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceProperties::OAIDeviceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceProperties::OAIDeviceProperties() {
    this->initializeModel();
}

OAIDeviceProperties::~OAIDeviceProperties() {}

void OAIDeviceProperties::initializeModel() {

    m_activation_time_isSet = false;
    m_activation_time_isValid = false;

    m_active_controller_isSet = false;
    m_active_controller_isValid = false;

    m_agent_group_version_isSet = false;
    m_agent_group_version_isValid = false;

    m_available_local_storage_in_bytes_isSet = false;
    m_available_local_storage_in_bytes_isValid = false;

    m_available_tiered_storage_in_bytes_isSet = false;
    m_available_tiered_storage_in_bytes_isValid = false;

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_device_configuration_status_isSet = false;
    m_device_configuration_status_isValid = false;

    m_device_description_isSet = false;
    m_device_description_isValid = false;

    m_device_location_isSet = false;
    m_device_location_isValid = false;

    m_device_software_version_isSet = false;
    m_device_software_version_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_friendly_software_name_isSet = false;
    m_friendly_software_name_isValid = false;

    m_friendly_software_version_isSet = false;
    m_friendly_software_version_isValid = false;

    m_model_description_isSet = false;
    m_model_description_isValid = false;

    m_network_interface_card_count_isSet = false;
    m_network_interface_card_count_isValid = false;

    m_provisioned_local_storage_in_bytes_isSet = false;
    m_provisioned_local_storage_in_bytes_isValid = false;

    m_provisioned_tiered_storage_in_bytes_isSet = false;
    m_provisioned_tiered_storage_in_bytes_isValid = false;

    m_provisioned_volume_size_in_bytes_isSet = false;
    m_provisioned_volume_size_in_bytes_isValid = false;

    m_rollover_details_isSet = false;
    m_rollover_details_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_iqn_isSet = false;
    m_target_iqn_isValid = false;

    m_total_tiered_storage_in_bytes_isSet = false;
    m_total_tiered_storage_in_bytes_isValid = false;

    m_using_storage_in_bytes_isSet = false;
    m_using_storage_in_bytes_isValid = false;

    m_virtual_machine_api_type_isSet = false;
    m_virtual_machine_api_type_isValid = false;
}

void OAIDeviceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceProperties::fromJsonObject(QJsonObject json) {

    m_activation_time_isValid = ::OpenAPI::fromJsonValue(m_activation_time, json[QString("activationTime")]);
    m_activation_time_isSet = !json[QString("activationTime")].isNull() && m_activation_time_isValid;

    m_active_controller_isValid = ::OpenAPI::fromJsonValue(m_active_controller, json[QString("activeController")]);
    m_active_controller_isSet = !json[QString("activeController")].isNull() && m_active_controller_isValid;

    m_agent_group_version_isValid = ::OpenAPI::fromJsonValue(m_agent_group_version, json[QString("agentGroupVersion")]);
    m_agent_group_version_isSet = !json[QString("agentGroupVersion")].isNull() && m_agent_group_version_isValid;

    m_available_local_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_local_storage_in_bytes, json[QString("availableLocalStorageInBytes")]);
    m_available_local_storage_in_bytes_isSet = !json[QString("availableLocalStorageInBytes")].isNull() && m_available_local_storage_in_bytes_isValid;

    m_available_tiered_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_tiered_storage_in_bytes, json[QString("availableTieredStorageInBytes")]);
    m_available_tiered_storage_in_bytes_isSet = !json[QString("availableTieredStorageInBytes")].isNull() && m_available_tiered_storage_in_bytes_isValid;

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_device_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_device_configuration_status, json[QString("deviceConfigurationStatus")]);
    m_device_configuration_status_isSet = !json[QString("deviceConfigurationStatus")].isNull() && m_device_configuration_status_isValid;

    m_device_description_isValid = ::OpenAPI::fromJsonValue(m_device_description, json[QString("deviceDescription")]);
    m_device_description_isSet = !json[QString("deviceDescription")].isNull() && m_device_description_isValid;

    m_device_location_isValid = ::OpenAPI::fromJsonValue(m_device_location, json[QString("deviceLocation")]);
    m_device_location_isSet = !json[QString("deviceLocation")].isNull() && m_device_location_isValid;

    m_device_software_version_isValid = ::OpenAPI::fromJsonValue(m_device_software_version, json[QString("deviceSoftwareVersion")]);
    m_device_software_version_isSet = !json[QString("deviceSoftwareVersion")].isNull() && m_device_software_version_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_friendly_software_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_software_name, json[QString("friendlySoftwareName")]);
    m_friendly_software_name_isSet = !json[QString("friendlySoftwareName")].isNull() && m_friendly_software_name_isValid;

    m_friendly_software_version_isValid = ::OpenAPI::fromJsonValue(m_friendly_software_version, json[QString("friendlySoftwareVersion")]);
    m_friendly_software_version_isSet = !json[QString("friendlySoftwareVersion")].isNull() && m_friendly_software_version_isValid;

    m_model_description_isValid = ::OpenAPI::fromJsonValue(m_model_description, json[QString("modelDescription")]);
    m_model_description_isSet = !json[QString("modelDescription")].isNull() && m_model_description_isValid;

    m_network_interface_card_count_isValid = ::OpenAPI::fromJsonValue(m_network_interface_card_count, json[QString("networkInterfaceCardCount")]);
    m_network_interface_card_count_isSet = !json[QString("networkInterfaceCardCount")].isNull() && m_network_interface_card_count_isValid;

    m_provisioned_local_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_provisioned_local_storage_in_bytes, json[QString("provisionedLocalStorageInBytes")]);
    m_provisioned_local_storage_in_bytes_isSet = !json[QString("provisionedLocalStorageInBytes")].isNull() && m_provisioned_local_storage_in_bytes_isValid;

    m_provisioned_tiered_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_provisioned_tiered_storage_in_bytes, json[QString("provisionedTieredStorageInBytes")]);
    m_provisioned_tiered_storage_in_bytes_isSet = !json[QString("provisionedTieredStorageInBytes")].isNull() && m_provisioned_tiered_storage_in_bytes_isValid;

    m_provisioned_volume_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_provisioned_volume_size_in_bytes, json[QString("provisionedVolumeSizeInBytes")]);
    m_provisioned_volume_size_in_bytes_isSet = !json[QString("provisionedVolumeSizeInBytes")].isNull() && m_provisioned_volume_size_in_bytes_isValid;

    m_rollover_details_isValid = ::OpenAPI::fromJsonValue(m_rollover_details, json[QString("rolloverDetails")]);
    m_rollover_details_isSet = !json[QString("rolloverDetails")].isNull() && m_rollover_details_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_iqn_isValid = ::OpenAPI::fromJsonValue(m_target_iqn, json[QString("targetIqn")]);
    m_target_iqn_isSet = !json[QString("targetIqn")].isNull() && m_target_iqn_isValid;

    m_total_tiered_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_tiered_storage_in_bytes, json[QString("totalTieredStorageInBytes")]);
    m_total_tiered_storage_in_bytes_isSet = !json[QString("totalTieredStorageInBytes")].isNull() && m_total_tiered_storage_in_bytes_isValid;

    m_using_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_using_storage_in_bytes, json[QString("usingStorageInBytes")]);
    m_using_storage_in_bytes_isSet = !json[QString("usingStorageInBytes")].isNull() && m_using_storage_in_bytes_isValid;

    m_virtual_machine_api_type_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_api_type, json[QString("virtualMachineApiType")]);
    m_virtual_machine_api_type_isSet = !json[QString("virtualMachineApiType")].isNull() && m_virtual_machine_api_type_isValid;
}

QString OAIDeviceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_time_isSet) {
        obj.insert(QString("activationTime"), ::OpenAPI::toJsonValue(m_activation_time));
    }
    if (m_active_controller_isSet) {
        obj.insert(QString("activeController"), ::OpenAPI::toJsonValue(m_active_controller));
    }
    if (m_agent_group_version_isSet) {
        obj.insert(QString("agentGroupVersion"), ::OpenAPI::toJsonValue(m_agent_group_version));
    }
    if (m_available_local_storage_in_bytes_isSet) {
        obj.insert(QString("availableLocalStorageInBytes"), ::OpenAPI::toJsonValue(m_available_local_storage_in_bytes));
    }
    if (m_available_tiered_storage_in_bytes_isSet) {
        obj.insert(QString("availableTieredStorageInBytes"), ::OpenAPI::toJsonValue(m_available_tiered_storage_in_bytes));
    }
    if (m_culture_isSet) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_device_configuration_status_isSet) {
        obj.insert(QString("deviceConfigurationStatus"), ::OpenAPI::toJsonValue(m_device_configuration_status));
    }
    if (m_device_description_isSet) {
        obj.insert(QString("deviceDescription"), ::OpenAPI::toJsonValue(m_device_description));
    }
    if (m_device_location_isSet) {
        obj.insert(QString("deviceLocation"), ::OpenAPI::toJsonValue(m_device_location));
    }
    if (m_device_software_version_isSet) {
        obj.insert(QString("deviceSoftwareVersion"), ::OpenAPI::toJsonValue(m_device_software_version));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_friendly_software_name_isSet) {
        obj.insert(QString("friendlySoftwareName"), ::OpenAPI::toJsonValue(m_friendly_software_name));
    }
    if (m_friendly_software_version_isSet) {
        obj.insert(QString("friendlySoftwareVersion"), ::OpenAPI::toJsonValue(m_friendly_software_version));
    }
    if (m_model_description_isSet) {
        obj.insert(QString("modelDescription"), ::OpenAPI::toJsonValue(m_model_description));
    }
    if (m_network_interface_card_count_isSet) {
        obj.insert(QString("networkInterfaceCardCount"), ::OpenAPI::toJsonValue(m_network_interface_card_count));
    }
    if (m_provisioned_local_storage_in_bytes_isSet) {
        obj.insert(QString("provisionedLocalStorageInBytes"), ::OpenAPI::toJsonValue(m_provisioned_local_storage_in_bytes));
    }
    if (m_provisioned_tiered_storage_in_bytes_isSet) {
        obj.insert(QString("provisionedTieredStorageInBytes"), ::OpenAPI::toJsonValue(m_provisioned_tiered_storage_in_bytes));
    }
    if (m_provisioned_volume_size_in_bytes_isSet) {
        obj.insert(QString("provisionedVolumeSizeInBytes"), ::OpenAPI::toJsonValue(m_provisioned_volume_size_in_bytes));
    }
    if (m_rollover_details.isSet()) {
        obj.insert(QString("rolloverDetails"), ::OpenAPI::toJsonValue(m_rollover_details));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_iqn_isSet) {
        obj.insert(QString("targetIqn"), ::OpenAPI::toJsonValue(m_target_iqn));
    }
    if (m_total_tiered_storage_in_bytes_isSet) {
        obj.insert(QString("totalTieredStorageInBytes"), ::OpenAPI::toJsonValue(m_total_tiered_storage_in_bytes));
    }
    if (m_using_storage_in_bytes_isSet) {
        obj.insert(QString("usingStorageInBytes"), ::OpenAPI::toJsonValue(m_using_storage_in_bytes));
    }
    if (m_virtual_machine_api_type_isSet) {
        obj.insert(QString("virtualMachineApiType"), ::OpenAPI::toJsonValue(m_virtual_machine_api_type));
    }
    return obj;
}

QDateTime OAIDeviceProperties::getActivationTime() const {
    return m_activation_time;
}
void OAIDeviceProperties::setActivationTime(const QDateTime &activation_time) {
    m_activation_time = activation_time;
    m_activation_time_isSet = true;
}

bool OAIDeviceProperties::is_activation_time_Set() const{
    return m_activation_time_isSet;
}

bool OAIDeviceProperties::is_activation_time_Valid() const{
    return m_activation_time_isValid;
}

QString OAIDeviceProperties::getActiveController() const {
    return m_active_controller;
}
void OAIDeviceProperties::setActiveController(const QString &active_controller) {
    m_active_controller = active_controller;
    m_active_controller_isSet = true;
}

bool OAIDeviceProperties::is_active_controller_Set() const{
    return m_active_controller_isSet;
}

bool OAIDeviceProperties::is_active_controller_Valid() const{
    return m_active_controller_isValid;
}

qint32 OAIDeviceProperties::getAgentGroupVersion() const {
    return m_agent_group_version;
}
void OAIDeviceProperties::setAgentGroupVersion(const qint32 &agent_group_version) {
    m_agent_group_version = agent_group_version;
    m_agent_group_version_isSet = true;
}

bool OAIDeviceProperties::is_agent_group_version_Set() const{
    return m_agent_group_version_isSet;
}

bool OAIDeviceProperties::is_agent_group_version_Valid() const{
    return m_agent_group_version_isValid;
}

qint64 OAIDeviceProperties::getAvailableLocalStorageInBytes() const {
    return m_available_local_storage_in_bytes;
}
void OAIDeviceProperties::setAvailableLocalStorageInBytes(const qint64 &available_local_storage_in_bytes) {
    m_available_local_storage_in_bytes = available_local_storage_in_bytes;
    m_available_local_storage_in_bytes_isSet = true;
}

bool OAIDeviceProperties::is_available_local_storage_in_bytes_Set() const{
    return m_available_local_storage_in_bytes_isSet;
}

bool OAIDeviceProperties::is_available_local_storage_in_bytes_Valid() const{
    return m_available_local_storage_in_bytes_isValid;
}

qint64 OAIDeviceProperties::getAvailableTieredStorageInBytes() const {
    return m_available_tiered_storage_in_bytes;
}
void OAIDeviceProperties::setAvailableTieredStorageInBytes(const qint64 &available_tiered_storage_in_bytes) {
    m_available_tiered_storage_in_bytes = available_tiered_storage_in_bytes;
    m_available_tiered_storage_in_bytes_isSet = true;
}

bool OAIDeviceProperties::is_available_tiered_storage_in_bytes_Set() const{
    return m_available_tiered_storage_in_bytes_isSet;
}

bool OAIDeviceProperties::is_available_tiered_storage_in_bytes_Valid() const{
    return m_available_tiered_storage_in_bytes_isValid;
}

QString OAIDeviceProperties::getCulture() const {
    return m_culture;
}
void OAIDeviceProperties::setCulture(const QString &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIDeviceProperties::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIDeviceProperties::is_culture_Valid() const{
    return m_culture_isValid;
}

OAIDeviceDetails OAIDeviceProperties::getDetails() const {
    return m_details;
}
void OAIDeviceProperties::setDetails(const OAIDeviceDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIDeviceProperties::is_details_Set() const{
    return m_details_isSet;
}

bool OAIDeviceProperties::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIDeviceProperties::getDeviceConfigurationStatus() const {
    return m_device_configuration_status;
}
void OAIDeviceProperties::setDeviceConfigurationStatus(const QString &device_configuration_status) {
    m_device_configuration_status = device_configuration_status;
    m_device_configuration_status_isSet = true;
}

bool OAIDeviceProperties::is_device_configuration_status_Set() const{
    return m_device_configuration_status_isSet;
}

bool OAIDeviceProperties::is_device_configuration_status_Valid() const{
    return m_device_configuration_status_isValid;
}

QString OAIDeviceProperties::getDeviceDescription() const {
    return m_device_description;
}
void OAIDeviceProperties::setDeviceDescription(const QString &device_description) {
    m_device_description = device_description;
    m_device_description_isSet = true;
}

bool OAIDeviceProperties::is_device_description_Set() const{
    return m_device_description_isSet;
}

bool OAIDeviceProperties::is_device_description_Valid() const{
    return m_device_description_isValid;
}

QString OAIDeviceProperties::getDeviceLocation() const {
    return m_device_location;
}
void OAIDeviceProperties::setDeviceLocation(const QString &device_location) {
    m_device_location = device_location;
    m_device_location_isSet = true;
}

bool OAIDeviceProperties::is_device_location_Set() const{
    return m_device_location_isSet;
}

bool OAIDeviceProperties::is_device_location_Valid() const{
    return m_device_location_isValid;
}

QString OAIDeviceProperties::getDeviceSoftwareVersion() const {
    return m_device_software_version;
}
void OAIDeviceProperties::setDeviceSoftwareVersion(const QString &device_software_version) {
    m_device_software_version = device_software_version;
    m_device_software_version_isSet = true;
}

bool OAIDeviceProperties::is_device_software_version_Set() const{
    return m_device_software_version_isSet;
}

bool OAIDeviceProperties::is_device_software_version_Valid() const{
    return m_device_software_version_isValid;
}

QString OAIDeviceProperties::getDeviceType() const {
    return m_device_type;
}
void OAIDeviceProperties::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDeviceProperties::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDeviceProperties::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIDeviceProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIDeviceProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIDeviceProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIDeviceProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIDeviceProperties::getFriendlySoftwareName() const {
    return m_friendly_software_name;
}
void OAIDeviceProperties::setFriendlySoftwareName(const QString &friendly_software_name) {
    m_friendly_software_name = friendly_software_name;
    m_friendly_software_name_isSet = true;
}

bool OAIDeviceProperties::is_friendly_software_name_Set() const{
    return m_friendly_software_name_isSet;
}

bool OAIDeviceProperties::is_friendly_software_name_Valid() const{
    return m_friendly_software_name_isValid;
}

QString OAIDeviceProperties::getFriendlySoftwareVersion() const {
    return m_friendly_software_version;
}
void OAIDeviceProperties::setFriendlySoftwareVersion(const QString &friendly_software_version) {
    m_friendly_software_version = friendly_software_version;
    m_friendly_software_version_isSet = true;
}

bool OAIDeviceProperties::is_friendly_software_version_Set() const{
    return m_friendly_software_version_isSet;
}

bool OAIDeviceProperties::is_friendly_software_version_Valid() const{
    return m_friendly_software_version_isValid;
}

QString OAIDeviceProperties::getModelDescription() const {
    return m_model_description;
}
void OAIDeviceProperties::setModelDescription(const QString &model_description) {
    m_model_description = model_description;
    m_model_description_isSet = true;
}

bool OAIDeviceProperties::is_model_description_Set() const{
    return m_model_description_isSet;
}

bool OAIDeviceProperties::is_model_description_Valid() const{
    return m_model_description_isValid;
}

qint32 OAIDeviceProperties::getNetworkInterfaceCardCount() const {
    return m_network_interface_card_count;
}
void OAIDeviceProperties::setNetworkInterfaceCardCount(const qint32 &network_interface_card_count) {
    m_network_interface_card_count = network_interface_card_count;
    m_network_interface_card_count_isSet = true;
}

bool OAIDeviceProperties::is_network_interface_card_count_Set() const{
    return m_network_interface_card_count_isSet;
}

bool OAIDeviceProperties::is_network_interface_card_count_Valid() const{
    return m_network_interface_card_count_isValid;
}

qint64 OAIDeviceProperties::getProvisionedLocalStorageInBytes() const {
    return m_provisioned_local_storage_in_bytes;
}
void OAIDeviceProperties::setProvisionedLocalStorageInBytes(const qint64 &provisioned_local_storage_in_bytes) {
    m_provisioned_local_storage_in_bytes = provisioned_local_storage_in_bytes;
    m_provisioned_local_storage_in_bytes_isSet = true;
}

bool OAIDeviceProperties::is_provisioned_local_storage_in_bytes_Set() const{
    return m_provisioned_local_storage_in_bytes_isSet;
}

bool OAIDeviceProperties::is_provisioned_local_storage_in_bytes_Valid() const{
    return m_provisioned_local_storage_in_bytes_isValid;
}

qint64 OAIDeviceProperties::getProvisionedTieredStorageInBytes() const {
    return m_provisioned_tiered_storage_in_bytes;
}
void OAIDeviceProperties::setProvisionedTieredStorageInBytes(const qint64 &provisioned_tiered_storage_in_bytes) {
    m_provisioned_tiered_storage_in_bytes = provisioned_tiered_storage_in_bytes;
    m_provisioned_tiered_storage_in_bytes_isSet = true;
}

bool OAIDeviceProperties::is_provisioned_tiered_storage_in_bytes_Set() const{
    return m_provisioned_tiered_storage_in_bytes_isSet;
}

bool OAIDeviceProperties::is_provisioned_tiered_storage_in_bytes_Valid() const{
    return m_provisioned_tiered_storage_in_bytes_isValid;
}

qint64 OAIDeviceProperties::getProvisionedVolumeSizeInBytes() const {
    return m_provisioned_volume_size_in_bytes;
}
void OAIDeviceProperties::setProvisionedVolumeSizeInBytes(const qint64 &provisioned_volume_size_in_bytes) {
    m_provisioned_volume_size_in_bytes = provisioned_volume_size_in_bytes;
    m_provisioned_volume_size_in_bytes_isSet = true;
}

bool OAIDeviceProperties::is_provisioned_volume_size_in_bytes_Set() const{
    return m_provisioned_volume_size_in_bytes_isSet;
}

bool OAIDeviceProperties::is_provisioned_volume_size_in_bytes_Valid() const{
    return m_provisioned_volume_size_in_bytes_isValid;
}

OAIDeviceRolloverDetails OAIDeviceProperties::getRolloverDetails() const {
    return m_rollover_details;
}
void OAIDeviceProperties::setRolloverDetails(const OAIDeviceRolloverDetails &rollover_details) {
    m_rollover_details = rollover_details;
    m_rollover_details_isSet = true;
}

bool OAIDeviceProperties::is_rollover_details_Set() const{
    return m_rollover_details_isSet;
}

bool OAIDeviceProperties::is_rollover_details_Valid() const{
    return m_rollover_details_isValid;
}

QString OAIDeviceProperties::getSerialNumber() const {
    return m_serial_number;
}
void OAIDeviceProperties::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDeviceProperties::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDeviceProperties::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIDeviceProperties::getStatus() const {
    return m_status;
}
void OAIDeviceProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeviceProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeviceProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeviceProperties::getTargetIqn() const {
    return m_target_iqn;
}
void OAIDeviceProperties::setTargetIqn(const QString &target_iqn) {
    m_target_iqn = target_iqn;
    m_target_iqn_isSet = true;
}

bool OAIDeviceProperties::is_target_iqn_Set() const{
    return m_target_iqn_isSet;
}

bool OAIDeviceProperties::is_target_iqn_Valid() const{
    return m_target_iqn_isValid;
}

qint64 OAIDeviceProperties::getTotalTieredStorageInBytes() const {
    return m_total_tiered_storage_in_bytes;
}
void OAIDeviceProperties::setTotalTieredStorageInBytes(const qint64 &total_tiered_storage_in_bytes) {
    m_total_tiered_storage_in_bytes = total_tiered_storage_in_bytes;
    m_total_tiered_storage_in_bytes_isSet = true;
}

bool OAIDeviceProperties::is_total_tiered_storage_in_bytes_Set() const{
    return m_total_tiered_storage_in_bytes_isSet;
}

bool OAIDeviceProperties::is_total_tiered_storage_in_bytes_Valid() const{
    return m_total_tiered_storage_in_bytes_isValid;
}

qint64 OAIDeviceProperties::getUsingStorageInBytes() const {
    return m_using_storage_in_bytes;
}
void OAIDeviceProperties::setUsingStorageInBytes(const qint64 &using_storage_in_bytes) {
    m_using_storage_in_bytes = using_storage_in_bytes;
    m_using_storage_in_bytes_isSet = true;
}

bool OAIDeviceProperties::is_using_storage_in_bytes_Set() const{
    return m_using_storage_in_bytes_isSet;
}

bool OAIDeviceProperties::is_using_storage_in_bytes_Valid() const{
    return m_using_storage_in_bytes_isValid;
}

QString OAIDeviceProperties::getVirtualMachineApiType() const {
    return m_virtual_machine_api_type;
}
void OAIDeviceProperties::setVirtualMachineApiType(const QString &virtual_machine_api_type) {
    m_virtual_machine_api_type = virtual_machine_api_type;
    m_virtual_machine_api_type_isSet = true;
}

bool OAIDeviceProperties::is_virtual_machine_api_type_Set() const{
    return m_virtual_machine_api_type_isSet;
}

bool OAIDeviceProperties::is_virtual_machine_api_type_Valid() const{
    return m_virtual_machine_api_type_isValid;
}

bool OAIDeviceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_controller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_group_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_local_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_tiered_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_configuration_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_software_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_card_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_local_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_tiered_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_volume_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_iqn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tiered_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_using_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_api_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activation_time_isValid && m_active_controller_isValid && m_culture_isValid && m_device_configuration_status_isValid && m_device_description_isValid && m_device_software_version_isValid && m_device_type_isValid && m_friendly_name_isValid && m_friendly_software_version_isValid && m_model_description_isValid && m_serial_number_isValid && m_status_isValid && m_target_iqn_isValid && true;
}

} // namespace OpenAPI
