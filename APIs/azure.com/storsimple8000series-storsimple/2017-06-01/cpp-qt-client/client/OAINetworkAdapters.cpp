/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAdapters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAdapters::OAINetworkAdapters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAdapters::OAINetworkAdapters() {
    this->initializeModel();
}

OAINetworkAdapters::~OAINetworkAdapters() {}

void OAINetworkAdapters::initializeModel() {

    m_interface_id_isSet = false;
    m_interface_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_iscsi_and_cloud_status_isSet = false;
    m_iscsi_and_cloud_status_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_net_interface_status_isSet = false;
    m_net_interface_status_isValid = false;

    m_nic_ipv4_settings_isSet = false;
    m_nic_ipv4_settings_isValid = false;

    m_nic_ipv6_settings_isSet = false;
    m_nic_ipv6_settings_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;
}

void OAINetworkAdapters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAdapters::fromJsonObject(QJsonObject json) {

    m_interface_id_isValid = ::OpenAPI::fromJsonValue(m_interface_id, json[QString("interfaceId")]);
    m_interface_id_isSet = !json[QString("interfaceId")].isNull() && m_interface_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_iscsi_and_cloud_status_isValid = ::OpenAPI::fromJsonValue(m_iscsi_and_cloud_status, json[QString("iscsiAndCloudStatus")]);
    m_iscsi_and_cloud_status_isSet = !json[QString("iscsiAndCloudStatus")].isNull() && m_iscsi_and_cloud_status_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_net_interface_status_isValid = ::OpenAPI::fromJsonValue(m_net_interface_status, json[QString("netInterfaceStatus")]);
    m_net_interface_status_isSet = !json[QString("netInterfaceStatus")].isNull() && m_net_interface_status_isValid;

    m_nic_ipv4_settings_isValid = ::OpenAPI::fromJsonValue(m_nic_ipv4_settings, json[QString("nicIpv4Settings")]);
    m_nic_ipv4_settings_isSet = !json[QString("nicIpv4Settings")].isNull() && m_nic_ipv4_settings_isValid;

    m_nic_ipv6_settings_isValid = ::OpenAPI::fromJsonValue(m_nic_ipv6_settings, json[QString("nicIpv6Settings")]);
    m_nic_ipv6_settings_isSet = !json[QString("nicIpv6Settings")].isNull() && m_nic_ipv6_settings_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;
}

QString OAINetworkAdapters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAdapters::asJsonObject() const {
    QJsonObject obj;
    if (m_interface_id_isSet) {
        obj.insert(QString("interfaceId"), ::OpenAPI::toJsonValue(m_interface_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_iscsi_and_cloud_status_isSet) {
        obj.insert(QString("iscsiAndCloudStatus"), ::OpenAPI::toJsonValue(m_iscsi_and_cloud_status));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_net_interface_status_isSet) {
        obj.insert(QString("netInterfaceStatus"), ::OpenAPI::toJsonValue(m_net_interface_status));
    }
    if (m_nic_ipv4_settings.isSet()) {
        obj.insert(QString("nicIpv4Settings"), ::OpenAPI::toJsonValue(m_nic_ipv4_settings));
    }
    if (m_nic_ipv6_settings.isSet()) {
        obj.insert(QString("nicIpv6Settings"), ::OpenAPI::toJsonValue(m_nic_ipv6_settings));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    return obj;
}

QString OAINetworkAdapters::getInterfaceId() const {
    return m_interface_id;
}
void OAINetworkAdapters::setInterfaceId(const QString &interface_id) {
    m_interface_id = interface_id;
    m_interface_id_isSet = true;
}

bool OAINetworkAdapters::is_interface_id_Set() const{
    return m_interface_id_isSet;
}

bool OAINetworkAdapters::is_interface_id_Valid() const{
    return m_interface_id_isValid;
}

bool OAINetworkAdapters::isIsDefault() const {
    return m_is_default;
}
void OAINetworkAdapters::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAINetworkAdapters::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAINetworkAdapters::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAINetworkAdapters::getIscsiAndCloudStatus() const {
    return m_iscsi_and_cloud_status;
}
void OAINetworkAdapters::setIscsiAndCloudStatus(const QString &iscsi_and_cloud_status) {
    m_iscsi_and_cloud_status = iscsi_and_cloud_status;
    m_iscsi_and_cloud_status_isSet = true;
}

bool OAINetworkAdapters::is_iscsi_and_cloud_status_Set() const{
    return m_iscsi_and_cloud_status_isSet;
}

bool OAINetworkAdapters::is_iscsi_and_cloud_status_Valid() const{
    return m_iscsi_and_cloud_status_isValid;
}

QString OAINetworkAdapters::getMode() const {
    return m_mode;
}
void OAINetworkAdapters::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAINetworkAdapters::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAINetworkAdapters::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAINetworkAdapters::getNetInterfaceStatus() const {
    return m_net_interface_status;
}
void OAINetworkAdapters::setNetInterfaceStatus(const QString &net_interface_status) {
    m_net_interface_status = net_interface_status;
    m_net_interface_status_isSet = true;
}

bool OAINetworkAdapters::is_net_interface_status_Set() const{
    return m_net_interface_status_isSet;
}

bool OAINetworkAdapters::is_net_interface_status_Valid() const{
    return m_net_interface_status_isValid;
}

OAINicIPv4 OAINetworkAdapters::getNicIpv4Settings() const {
    return m_nic_ipv4_settings;
}
void OAINetworkAdapters::setNicIpv4Settings(const OAINicIPv4 &nic_ipv4_settings) {
    m_nic_ipv4_settings = nic_ipv4_settings;
    m_nic_ipv4_settings_isSet = true;
}

bool OAINetworkAdapters::is_nic_ipv4_settings_Set() const{
    return m_nic_ipv4_settings_isSet;
}

bool OAINetworkAdapters::is_nic_ipv4_settings_Valid() const{
    return m_nic_ipv4_settings_isValid;
}

OAINicIPv6 OAINetworkAdapters::getNicIpv6Settings() const {
    return m_nic_ipv6_settings;
}
void OAINetworkAdapters::setNicIpv6Settings(const OAINicIPv6 &nic_ipv6_settings) {
    m_nic_ipv6_settings = nic_ipv6_settings;
    m_nic_ipv6_settings_isSet = true;
}

bool OAINetworkAdapters::is_nic_ipv6_settings_Set() const{
    return m_nic_ipv6_settings_isSet;
}

bool OAINetworkAdapters::is_nic_ipv6_settings_Valid() const{
    return m_nic_ipv6_settings_isValid;
}

qint64 OAINetworkAdapters::getSpeed() const {
    return m_speed;
}
void OAINetworkAdapters::setSpeed(const qint64 &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAINetworkAdapters::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAINetworkAdapters::is_speed_Valid() const{
    return m_speed_isValid;
}

bool OAINetworkAdapters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iscsi_and_cloud_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_interface_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nic_ipv4_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nic_ipv6_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAdapters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interface_id_isValid && m_iscsi_and_cloud_status_isValid && m_mode_isValid && m_net_interface_status_isValid && true;
}

} // namespace OpenAPI
