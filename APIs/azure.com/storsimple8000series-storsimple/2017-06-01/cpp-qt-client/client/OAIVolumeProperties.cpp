/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeProperties::OAIVolumeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeProperties::OAIVolumeProperties() {
    this->initializeModel();
}

OAIVolumeProperties::~OAIVolumeProperties() {}

void OAIVolumeProperties::initializeModel() {

    m_access_control_record_ids_isSet = false;
    m_access_control_record_ids_isValid = false;

    m_backup_policy_ids_isSet = false;
    m_backup_policy_ids_isValid = false;

    m_backup_status_isSet = false;
    m_backup_status_isValid = false;

    m_monitoring_status_isSet = false;
    m_monitoring_status_isValid = false;

    m_operation_status_isSet = false;
    m_operation_status_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_volume_container_id_isSet = false;
    m_volume_container_id_isValid = false;

    m_volume_status_isSet = false;
    m_volume_status_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;
}

void OAIVolumeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeProperties::fromJsonObject(QJsonObject json) {

    m_access_control_record_ids_isValid = ::OpenAPI::fromJsonValue(m_access_control_record_ids, json[QString("accessControlRecordIds")]);
    m_access_control_record_ids_isSet = !json[QString("accessControlRecordIds")].isNull() && m_access_control_record_ids_isValid;

    m_backup_policy_ids_isValid = ::OpenAPI::fromJsonValue(m_backup_policy_ids, json[QString("backupPolicyIds")]);
    m_backup_policy_ids_isSet = !json[QString("backupPolicyIds")].isNull() && m_backup_policy_ids_isValid;

    m_backup_status_isValid = ::OpenAPI::fromJsonValue(m_backup_status, json[QString("backupStatus")]);
    m_backup_status_isSet = !json[QString("backupStatus")].isNull() && m_backup_status_isValid;

    m_monitoring_status_isValid = ::OpenAPI::fromJsonValue(m_monitoring_status, json[QString("monitoringStatus")]);
    m_monitoring_status_isSet = !json[QString("monitoringStatus")].isNull() && m_monitoring_status_isValid;

    m_operation_status_isValid = ::OpenAPI::fromJsonValue(m_operation_status, json[QString("operationStatus")]);
    m_operation_status_isSet = !json[QString("operationStatus")].isNull() && m_operation_status_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_volume_container_id_isValid = ::OpenAPI::fromJsonValue(m_volume_container_id, json[QString("volumeContainerId")]);
    m_volume_container_id_isSet = !json[QString("volumeContainerId")].isNull() && m_volume_container_id_isValid;

    m_volume_status_isValid = ::OpenAPI::fromJsonValue(m_volume_status, json[QString("volumeStatus")]);
    m_volume_status_isSet = !json[QString("volumeStatus")].isNull() && m_volume_status_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("volumeType")]);
    m_volume_type_isSet = !json[QString("volumeType")].isNull() && m_volume_type_isValid;
}

QString OAIVolumeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_control_record_ids.size() > 0) {
        obj.insert(QString("accessControlRecordIds"), ::OpenAPI::toJsonValue(m_access_control_record_ids));
    }
    if (m_backup_policy_ids.size() > 0) {
        obj.insert(QString("backupPolicyIds"), ::OpenAPI::toJsonValue(m_backup_policy_ids));
    }
    if (m_backup_status_isSet) {
        obj.insert(QString("backupStatus"), ::OpenAPI::toJsonValue(m_backup_status));
    }
    if (m_monitoring_status_isSet) {
        obj.insert(QString("monitoringStatus"), ::OpenAPI::toJsonValue(m_monitoring_status));
    }
    if (m_operation_status_isSet) {
        obj.insert(QString("operationStatus"), ::OpenAPI::toJsonValue(m_operation_status));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_volume_container_id_isSet) {
        obj.insert(QString("volumeContainerId"), ::OpenAPI::toJsonValue(m_volume_container_id));
    }
    if (m_volume_status_isSet) {
        obj.insert(QString("volumeStatus"), ::OpenAPI::toJsonValue(m_volume_status));
    }
    if (m_volume_type_isSet) {
        obj.insert(QString("volumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    return obj;
}

QList<QString> OAIVolumeProperties::getAccessControlRecordIds() const {
    return m_access_control_record_ids;
}
void OAIVolumeProperties::setAccessControlRecordIds(const QList<QString> &access_control_record_ids) {
    m_access_control_record_ids = access_control_record_ids;
    m_access_control_record_ids_isSet = true;
}

bool OAIVolumeProperties::is_access_control_record_ids_Set() const{
    return m_access_control_record_ids_isSet;
}

bool OAIVolumeProperties::is_access_control_record_ids_Valid() const{
    return m_access_control_record_ids_isValid;
}

QList<QString> OAIVolumeProperties::getBackupPolicyIds() const {
    return m_backup_policy_ids;
}
void OAIVolumeProperties::setBackupPolicyIds(const QList<QString> &backup_policy_ids) {
    m_backup_policy_ids = backup_policy_ids;
    m_backup_policy_ids_isSet = true;
}

bool OAIVolumeProperties::is_backup_policy_ids_Set() const{
    return m_backup_policy_ids_isSet;
}

bool OAIVolumeProperties::is_backup_policy_ids_Valid() const{
    return m_backup_policy_ids_isValid;
}

QString OAIVolumeProperties::getBackupStatus() const {
    return m_backup_status;
}
void OAIVolumeProperties::setBackupStatus(const QString &backup_status) {
    m_backup_status = backup_status;
    m_backup_status_isSet = true;
}

bool OAIVolumeProperties::is_backup_status_Set() const{
    return m_backup_status_isSet;
}

bool OAIVolumeProperties::is_backup_status_Valid() const{
    return m_backup_status_isValid;
}

QString OAIVolumeProperties::getMonitoringStatus() const {
    return m_monitoring_status;
}
void OAIVolumeProperties::setMonitoringStatus(const QString &monitoring_status) {
    m_monitoring_status = monitoring_status;
    m_monitoring_status_isSet = true;
}

bool OAIVolumeProperties::is_monitoring_status_Set() const{
    return m_monitoring_status_isSet;
}

bool OAIVolumeProperties::is_monitoring_status_Valid() const{
    return m_monitoring_status_isValid;
}

QString OAIVolumeProperties::getOperationStatus() const {
    return m_operation_status;
}
void OAIVolumeProperties::setOperationStatus(const QString &operation_status) {
    m_operation_status = operation_status;
    m_operation_status_isSet = true;
}

bool OAIVolumeProperties::is_operation_status_Set() const{
    return m_operation_status_isSet;
}

bool OAIVolumeProperties::is_operation_status_Valid() const{
    return m_operation_status_isValid;
}

qint64 OAIVolumeProperties::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIVolumeProperties::setSizeInBytes(const qint64 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIVolumeProperties::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIVolumeProperties::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

QString OAIVolumeProperties::getVolumeContainerId() const {
    return m_volume_container_id;
}
void OAIVolumeProperties::setVolumeContainerId(const QString &volume_container_id) {
    m_volume_container_id = volume_container_id;
    m_volume_container_id_isSet = true;
}

bool OAIVolumeProperties::is_volume_container_id_Set() const{
    return m_volume_container_id_isSet;
}

bool OAIVolumeProperties::is_volume_container_id_Valid() const{
    return m_volume_container_id_isValid;
}

QString OAIVolumeProperties::getVolumeStatus() const {
    return m_volume_status;
}
void OAIVolumeProperties::setVolumeStatus(const QString &volume_status) {
    m_volume_status = volume_status;
    m_volume_status_isSet = true;
}

bool OAIVolumeProperties::is_volume_status_Set() const{
    return m_volume_status_isSet;
}

bool OAIVolumeProperties::is_volume_status_Valid() const{
    return m_volume_status_isValid;
}

QString OAIVolumeProperties::getVolumeType() const {
    return m_volume_type;
}
void OAIVolumeProperties::setVolumeType(const QString &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAIVolumeProperties::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAIVolumeProperties::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

bool OAIVolumeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_control_record_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_policy_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_control_record_ids_isValid && m_monitoring_status_isValid && m_size_in_bytes_isValid && m_volume_status_isValid && m_volume_type_isValid && true;
}

} // namespace OpenAPI
