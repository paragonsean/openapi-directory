/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebproxySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebproxySettings::OAIWebproxySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebproxySettings::OAIWebproxySettings() {
    this->initializeModel();
}

OAIWebproxySettings::~OAIWebproxySettings() {}

void OAIWebproxySettings::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_connection_uri_isSet = false;
    m_connection_uri_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIWebproxySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebproxySettings::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_connection_uri_isValid = ::OpenAPI::fromJsonValue(m_connection_uri, json[QString("connectionUri")]);
    m_connection_uri_isSet = !json[QString("connectionUri")].isNull() && m_connection_uri_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIWebproxySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebproxySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_isSet) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_connection_uri_isSet) {
        obj.insert(QString("connectionUri"), ::OpenAPI::toJsonValue(m_connection_uri));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIWebproxySettings::getAuthentication() const {
    return m_authentication;
}
void OAIWebproxySettings::setAuthentication(const QString &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIWebproxySettings::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIWebproxySettings::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAIWebproxySettings::getConnectionUri() const {
    return m_connection_uri;
}
void OAIWebproxySettings::setConnectionUri(const QString &connection_uri) {
    m_connection_uri = connection_uri;
    m_connection_uri_isSet = true;
}

bool OAIWebproxySettings::is_connection_uri_Set() const{
    return m_connection_uri_isSet;
}

bool OAIWebproxySettings::is_connection_uri_Valid() const{
    return m_connection_uri_isValid;
}

QString OAIWebproxySettings::getUsername() const {
    return m_username;
}
void OAIWebproxySettings::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIWebproxySettings::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWebproxySettings::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIWebproxySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebproxySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
