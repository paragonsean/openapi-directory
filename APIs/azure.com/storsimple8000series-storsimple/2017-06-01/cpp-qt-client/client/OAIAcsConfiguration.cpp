/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcsConfiguration::OAIAcsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcsConfiguration::OAIAcsConfiguration() {
    this->initializeModel();
}

OAIAcsConfiguration::~OAIAcsConfiguration() {}

void OAIAcsConfiguration::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_realm_isSet = false;
    m_realm_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;
}

void OAIAcsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcsConfiguration::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_realm_isValid = ::OpenAPI::fromJsonValue(m_realm, json[QString("realm")]);
    m_realm_isSet = !json[QString("realm")].isNull() && m_realm_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("serviceUrl")]);
    m_service_url_isSet = !json[QString("serviceUrl")].isNull() && m_service_url_isValid;
}

QString OAIAcsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_realm_isSet) {
        obj.insert(QString("realm"), ::OpenAPI::toJsonValue(m_realm));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("serviceUrl"), ::OpenAPI::toJsonValue(m_service_url));
    }
    return obj;
}

QString OAIAcsConfiguration::getRNamespace() const {
    return m_r_namespace;
}
void OAIAcsConfiguration::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIAcsConfiguration::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIAcsConfiguration::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIAcsConfiguration::getRealm() const {
    return m_realm;
}
void OAIAcsConfiguration::setRealm(const QString &realm) {
    m_realm = realm;
    m_realm_isSet = true;
}

bool OAIAcsConfiguration::is_realm_Set() const{
    return m_realm_isSet;
}

bool OAIAcsConfiguration::is_realm_Valid() const{
    return m_realm_isValid;
}

QString OAIAcsConfiguration::getServiceUrl() const {
    return m_service_url;
}
void OAIAcsConfiguration::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAIAcsConfiguration::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAIAcsConfiguration::is_service_url_Valid() const{
    return m_service_url_isValid;
}

bool OAIAcsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_namespace_isValid && m_realm_isValid && m_service_url_isValid && true;
}

} // namespace OpenAPI
