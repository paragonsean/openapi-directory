/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINicIPv4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINicIPv4::OAINicIPv4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINicIPv4::OAINicIPv4() {
    this->initializeModel();
}

OAINicIPv4::~OAINicIPv4() {}

void OAINicIPv4::initializeModel() {

    m_controller0_ipv4_address_isSet = false;
    m_controller0_ipv4_address_isValid = false;

    m_controller1_ipv4_address_isSet = false;
    m_controller1_ipv4_address_isValid = false;

    m_ipv4_address_isSet = false;
    m_ipv4_address_isValid = false;

    m_ipv4_gateway_isSet = false;
    m_ipv4_gateway_isValid = false;

    m_ipv4_netmask_isSet = false;
    m_ipv4_netmask_isValid = false;
}

void OAINicIPv4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINicIPv4::fromJsonObject(QJsonObject json) {

    m_controller0_ipv4_address_isValid = ::OpenAPI::fromJsonValue(m_controller0_ipv4_address, json[QString("controller0Ipv4Address")]);
    m_controller0_ipv4_address_isSet = !json[QString("controller0Ipv4Address")].isNull() && m_controller0_ipv4_address_isValid;

    m_controller1_ipv4_address_isValid = ::OpenAPI::fromJsonValue(m_controller1_ipv4_address, json[QString("controller1Ipv4Address")]);
    m_controller1_ipv4_address_isSet = !json[QString("controller1Ipv4Address")].isNull() && m_controller1_ipv4_address_isValid;

    m_ipv4_address_isValid = ::OpenAPI::fromJsonValue(m_ipv4_address, json[QString("ipv4Address")]);
    m_ipv4_address_isSet = !json[QString("ipv4Address")].isNull() && m_ipv4_address_isValid;

    m_ipv4_gateway_isValid = ::OpenAPI::fromJsonValue(m_ipv4_gateway, json[QString("ipv4Gateway")]);
    m_ipv4_gateway_isSet = !json[QString("ipv4Gateway")].isNull() && m_ipv4_gateway_isValid;

    m_ipv4_netmask_isValid = ::OpenAPI::fromJsonValue(m_ipv4_netmask, json[QString("ipv4Netmask")]);
    m_ipv4_netmask_isSet = !json[QString("ipv4Netmask")].isNull() && m_ipv4_netmask_isValid;
}

QString OAINicIPv4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINicIPv4::asJsonObject() const {
    QJsonObject obj;
    if (m_controller0_ipv4_address_isSet) {
        obj.insert(QString("controller0Ipv4Address"), ::OpenAPI::toJsonValue(m_controller0_ipv4_address));
    }
    if (m_controller1_ipv4_address_isSet) {
        obj.insert(QString("controller1Ipv4Address"), ::OpenAPI::toJsonValue(m_controller1_ipv4_address));
    }
    if (m_ipv4_address_isSet) {
        obj.insert(QString("ipv4Address"), ::OpenAPI::toJsonValue(m_ipv4_address));
    }
    if (m_ipv4_gateway_isSet) {
        obj.insert(QString("ipv4Gateway"), ::OpenAPI::toJsonValue(m_ipv4_gateway));
    }
    if (m_ipv4_netmask_isSet) {
        obj.insert(QString("ipv4Netmask"), ::OpenAPI::toJsonValue(m_ipv4_netmask));
    }
    return obj;
}

QString OAINicIPv4::getController0Ipv4Address() const {
    return m_controller0_ipv4_address;
}
void OAINicIPv4::setController0Ipv4Address(const QString &controller0_ipv4_address) {
    m_controller0_ipv4_address = controller0_ipv4_address;
    m_controller0_ipv4_address_isSet = true;
}

bool OAINicIPv4::is_controller0_ipv4_address_Set() const{
    return m_controller0_ipv4_address_isSet;
}

bool OAINicIPv4::is_controller0_ipv4_address_Valid() const{
    return m_controller0_ipv4_address_isValid;
}

QString OAINicIPv4::getController1Ipv4Address() const {
    return m_controller1_ipv4_address;
}
void OAINicIPv4::setController1Ipv4Address(const QString &controller1_ipv4_address) {
    m_controller1_ipv4_address = controller1_ipv4_address;
    m_controller1_ipv4_address_isSet = true;
}

bool OAINicIPv4::is_controller1_ipv4_address_Set() const{
    return m_controller1_ipv4_address_isSet;
}

bool OAINicIPv4::is_controller1_ipv4_address_Valid() const{
    return m_controller1_ipv4_address_isValid;
}

QString OAINicIPv4::getIpv4Address() const {
    return m_ipv4_address;
}
void OAINicIPv4::setIpv4Address(const QString &ipv4_address) {
    m_ipv4_address = ipv4_address;
    m_ipv4_address_isSet = true;
}

bool OAINicIPv4::is_ipv4_address_Set() const{
    return m_ipv4_address_isSet;
}

bool OAINicIPv4::is_ipv4_address_Valid() const{
    return m_ipv4_address_isValid;
}

QString OAINicIPv4::getIpv4Gateway() const {
    return m_ipv4_gateway;
}
void OAINicIPv4::setIpv4Gateway(const QString &ipv4_gateway) {
    m_ipv4_gateway = ipv4_gateway;
    m_ipv4_gateway_isSet = true;
}

bool OAINicIPv4::is_ipv4_gateway_Set() const{
    return m_ipv4_gateway_isSet;
}

bool OAINicIPv4::is_ipv4_gateway_Valid() const{
    return m_ipv4_gateway_isValid;
}

QString OAINicIPv4::getIpv4Netmask() const {
    return m_ipv4_netmask;
}
void OAINicIPv4::setIpv4Netmask(const QString &ipv4_netmask) {
    m_ipv4_netmask = ipv4_netmask;
    m_ipv4_netmask_isSet = true;
}

bool OAINicIPv4::is_ipv4_netmask_Set() const{
    return m_ipv4_netmask_isSet;
}

bool OAINicIPv4::is_ipv4_netmask_Valid() const{
    return m_ipv4_netmask_isValid;
}

bool OAINicIPv4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controller0_ipv4_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller1_ipv4_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_netmask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINicIPv4::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
