/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFailoverTarget.h
 *
 * Represents the eligibility of a device as a failover target device.
 */

#ifndef OAIFailoverTarget_H
#define OAIFailoverTarget_H

#include <QJsonObject>

#include "OAITargetEligibilityResult.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITargetEligibilityResult;

class OAIFailoverTarget : public OAIObject {
public:
    OAIFailoverTarget();
    OAIFailoverTarget(QString json);
    ~OAIFailoverTarget() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getAvailableLocalStorageInBytes() const;
    void setAvailableLocalStorageInBytes(const qint64 &available_local_storage_in_bytes);
    bool is_available_local_storage_in_bytes_Set() const;
    bool is_available_local_storage_in_bytes_Valid() const;

    qint64 getAvailableTieredStorageInBytes() const;
    void setAvailableTieredStorageInBytes(const qint64 &available_tiered_storage_in_bytes);
    bool is_available_tiered_storage_in_bytes_Set() const;
    bool is_available_tiered_storage_in_bytes_Valid() const;

    qint32 getDataContainersCount() const;
    void setDataContainersCount(const qint32 &data_containers_count);
    bool is_data_containers_count_Set() const;
    bool is_data_containers_count_Valid() const;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QString getDeviceLocation() const;
    void setDeviceLocation(const QString &device_location);
    bool is_device_location_Set() const;
    bool is_device_location_Valid() const;

    QString getDeviceSoftwareVersion() const;
    void setDeviceSoftwareVersion(const QString &device_software_version);
    bool is_device_software_version_Set() const;
    bool is_device_software_version_Valid() const;

    QString getDeviceStatus() const;
    void setDeviceStatus(const QString &device_status);
    bool is_device_status_Set() const;
    bool is_device_status_Valid() const;

    OAITargetEligibilityResult getEligibilityResult() const;
    void setEligibilityResult(const OAITargetEligibilityResult &eligibility_result);
    bool is_eligibility_result_Set() const;
    bool is_eligibility_result_Valid() const;

    QString getFriendlyDeviceSoftwareVersion() const;
    void setFriendlyDeviceSoftwareVersion(const QString &friendly_device_software_version);
    bool is_friendly_device_software_version_Set() const;
    bool is_friendly_device_software_version_Valid() const;

    QString getModelDescription() const;
    void setModelDescription(const QString &model_description);
    bool is_model_description_Set() const;
    bool is_model_description_Valid() const;

    qint32 getVolumesCount() const;
    void setVolumesCount(const qint32 &volumes_count);
    bool is_volumes_count_Set() const;
    bool is_volumes_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_available_local_storage_in_bytes;
    bool m_available_local_storage_in_bytes_isSet;
    bool m_available_local_storage_in_bytes_isValid;

    qint64 m_available_tiered_storage_in_bytes;
    bool m_available_tiered_storage_in_bytes_isSet;
    bool m_available_tiered_storage_in_bytes_isValid;

    qint32 m_data_containers_count;
    bool m_data_containers_count_isSet;
    bool m_data_containers_count_isValid;

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QString m_device_location;
    bool m_device_location_isSet;
    bool m_device_location_isValid;

    QString m_device_software_version;
    bool m_device_software_version_isSet;
    bool m_device_software_version_isValid;

    QString m_device_status;
    bool m_device_status_isSet;
    bool m_device_status_isValid;

    OAITargetEligibilityResult m_eligibility_result;
    bool m_eligibility_result_isSet;
    bool m_eligibility_result_isValid;

    QString m_friendly_device_software_version;
    bool m_friendly_device_software_version_isSet;
    bool m_friendly_device_software_version_isValid;

    QString m_model_description;
    bool m_model_description_isSet;
    bool m_model_description_isValid;

    qint32 m_volumes_count;
    bool m_volumes_count_isSet;
    bool m_volumes_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFailoverTarget)

#endif // OAIFailoverTarget_H
