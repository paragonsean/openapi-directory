/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHardwareComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHardwareComponent::OAIHardwareComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHardwareComponent::OAIHardwareComponent() {
    this->initializeModel();
}

OAIHardwareComponent::~OAIHardwareComponent() {}

void OAIHardwareComponent::initializeModel() {

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_display_name_isSet = false;
    m_status_display_name_isValid = false;
}

void OAIHardwareComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHardwareComponent::fromJsonObject(QJsonObject json) {

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("componentId")]);
    m_component_id_isSet = !json[QString("componentId")].isNull() && m_component_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_display_name_isValid = ::OpenAPI::fromJsonValue(m_status_display_name, json[QString("statusDisplayName")]);
    m_status_display_name_isSet = !json[QString("statusDisplayName")].isNull() && m_status_display_name_isValid;
}

QString OAIHardwareComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHardwareComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_component_id_isSet) {
        obj.insert(QString("componentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_display_name_isSet) {
        obj.insert(QString("statusDisplayName"), ::OpenAPI::toJsonValue(m_status_display_name));
    }
    return obj;
}

QString OAIHardwareComponent::getComponentId() const {
    return m_component_id;
}
void OAIHardwareComponent::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIHardwareComponent::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIHardwareComponent::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QString OAIHardwareComponent::getDisplayName() const {
    return m_display_name;
}
void OAIHardwareComponent::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIHardwareComponent::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIHardwareComponent::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIHardwareComponent::getStatus() const {
    return m_status;
}
void OAIHardwareComponent::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHardwareComponent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHardwareComponent::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIHardwareComponent::getStatusDisplayName() const {
    return m_status_display_name;
}
void OAIHardwareComponent::setStatusDisplayName(const QString &status_display_name) {
    m_status_display_name = status_display_name;
    m_status_display_name_isSet = true;
}

bool OAIHardwareComponent::is_status_display_name_Set() const{
    return m_status_display_name_isSet;
}

bool OAIHardwareComponent::is_status_display_name_Valid() const{
    return m_status_display_name_isValid;
}

bool OAIHardwareComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHardwareComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_component_id_isValid && m_display_name_isValid && m_status_isValid && m_status_display_name_isValid && true;
}

} // namespace OpenAPI
