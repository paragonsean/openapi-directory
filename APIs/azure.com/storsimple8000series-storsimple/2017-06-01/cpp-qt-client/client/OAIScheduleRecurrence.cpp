/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleRecurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleRecurrence::OAIScheduleRecurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleRecurrence::OAIScheduleRecurrence() {
    this->initializeModel();
}

OAIScheduleRecurrence::~OAIScheduleRecurrence() {}

void OAIScheduleRecurrence::initializeModel() {

    m_recurrence_type_isSet = false;
    m_recurrence_type_isValid = false;

    m_recurrence_value_isSet = false;
    m_recurrence_value_isValid = false;

    m_weekly_days_list_isSet = false;
    m_weekly_days_list_isValid = false;
}

void OAIScheduleRecurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleRecurrence::fromJsonObject(QJsonObject json) {

    m_recurrence_type_isValid = ::OpenAPI::fromJsonValue(m_recurrence_type, json[QString("recurrenceType")]);
    m_recurrence_type_isSet = !json[QString("recurrenceType")].isNull() && m_recurrence_type_isValid;

    m_recurrence_value_isValid = ::OpenAPI::fromJsonValue(m_recurrence_value, json[QString("recurrenceValue")]);
    m_recurrence_value_isSet = !json[QString("recurrenceValue")].isNull() && m_recurrence_value_isValid;

    m_weekly_days_list_isValid = ::OpenAPI::fromJsonValue(m_weekly_days_list, json[QString("weeklyDaysList")]);
    m_weekly_days_list_isSet = !json[QString("weeklyDaysList")].isNull() && m_weekly_days_list_isValid;
}

QString OAIScheduleRecurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleRecurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_recurrence_type_isSet) {
        obj.insert(QString("recurrenceType"), ::OpenAPI::toJsonValue(m_recurrence_type));
    }
    if (m_recurrence_value_isSet) {
        obj.insert(QString("recurrenceValue"), ::OpenAPI::toJsonValue(m_recurrence_value));
    }
    if (m_weekly_days_list.size() > 0) {
        obj.insert(QString("weeklyDaysList"), ::OpenAPI::toJsonValue(m_weekly_days_list));
    }
    return obj;
}

QString OAIScheduleRecurrence::getRecurrenceType() const {
    return m_recurrence_type;
}
void OAIScheduleRecurrence::setRecurrenceType(const QString &recurrence_type) {
    m_recurrence_type = recurrence_type;
    m_recurrence_type_isSet = true;
}

bool OAIScheduleRecurrence::is_recurrence_type_Set() const{
    return m_recurrence_type_isSet;
}

bool OAIScheduleRecurrence::is_recurrence_type_Valid() const{
    return m_recurrence_type_isValid;
}

qint32 OAIScheduleRecurrence::getRecurrenceValue() const {
    return m_recurrence_value;
}
void OAIScheduleRecurrence::setRecurrenceValue(const qint32 &recurrence_value) {
    m_recurrence_value = recurrence_value;
    m_recurrence_value_isSet = true;
}

bool OAIScheduleRecurrence::is_recurrence_value_Set() const{
    return m_recurrence_value_isSet;
}

bool OAIScheduleRecurrence::is_recurrence_value_Valid() const{
    return m_recurrence_value_isValid;
}

QList<QString> OAIScheduleRecurrence::getWeeklyDaysList() const {
    return m_weekly_days_list;
}
void OAIScheduleRecurrence::setWeeklyDaysList(const QList<QString> &weekly_days_list) {
    m_weekly_days_list = weekly_days_list;
    m_weekly_days_list_isSet = true;
}

bool OAIScheduleRecurrence::is_weekly_days_list_Set() const{
    return m_weekly_days_list_isSet;
}

bool OAIScheduleRecurrence::is_weekly_days_list_Valid() const{
    return m_weekly_days_list_isValid;
}

bool OAIScheduleRecurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recurrence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_days_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleRecurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recurrence_type_isValid && m_recurrence_value_isValid && true;
}

} // namespace OpenAPI
