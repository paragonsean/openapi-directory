/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDNSSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDNSSettings::OAIDNSSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDNSSettings::OAIDNSSettings() {
    this->initializeModel();
}

OAIDNSSettings::~OAIDNSSettings() {}

void OAIDNSSettings::initializeModel() {

    m_primary_dns_server_isSet = false;
    m_primary_dns_server_isValid = false;

    m_primary_ipv6_dns_server_isSet = false;
    m_primary_ipv6_dns_server_isValid = false;

    m_secondary_dns_servers_isSet = false;
    m_secondary_dns_servers_isValid = false;

    m_secondary_ipv6_dns_servers_isSet = false;
    m_secondary_ipv6_dns_servers_isValid = false;
}

void OAIDNSSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDNSSettings::fromJsonObject(QJsonObject json) {

    m_primary_dns_server_isValid = ::OpenAPI::fromJsonValue(m_primary_dns_server, json[QString("primaryDnsServer")]);
    m_primary_dns_server_isSet = !json[QString("primaryDnsServer")].isNull() && m_primary_dns_server_isValid;

    m_primary_ipv6_dns_server_isValid = ::OpenAPI::fromJsonValue(m_primary_ipv6_dns_server, json[QString("primaryIpv6DnsServer")]);
    m_primary_ipv6_dns_server_isSet = !json[QString("primaryIpv6DnsServer")].isNull() && m_primary_ipv6_dns_server_isValid;

    m_secondary_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_secondary_dns_servers, json[QString("secondaryDnsServers")]);
    m_secondary_dns_servers_isSet = !json[QString("secondaryDnsServers")].isNull() && m_secondary_dns_servers_isValid;

    m_secondary_ipv6_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_secondary_ipv6_dns_servers, json[QString("secondaryIpv6DnsServers")]);
    m_secondary_ipv6_dns_servers_isSet = !json[QString("secondaryIpv6DnsServers")].isNull() && m_secondary_ipv6_dns_servers_isValid;
}

QString OAIDNSSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDNSSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_dns_server_isSet) {
        obj.insert(QString("primaryDnsServer"), ::OpenAPI::toJsonValue(m_primary_dns_server));
    }
    if (m_primary_ipv6_dns_server_isSet) {
        obj.insert(QString("primaryIpv6DnsServer"), ::OpenAPI::toJsonValue(m_primary_ipv6_dns_server));
    }
    if (m_secondary_dns_servers.size() > 0) {
        obj.insert(QString("secondaryDnsServers"), ::OpenAPI::toJsonValue(m_secondary_dns_servers));
    }
    if (m_secondary_ipv6_dns_servers.size() > 0) {
        obj.insert(QString("secondaryIpv6DnsServers"), ::OpenAPI::toJsonValue(m_secondary_ipv6_dns_servers));
    }
    return obj;
}

QString OAIDNSSettings::getPrimaryDnsServer() const {
    return m_primary_dns_server;
}
void OAIDNSSettings::setPrimaryDnsServer(const QString &primary_dns_server) {
    m_primary_dns_server = primary_dns_server;
    m_primary_dns_server_isSet = true;
}

bool OAIDNSSettings::is_primary_dns_server_Set() const{
    return m_primary_dns_server_isSet;
}

bool OAIDNSSettings::is_primary_dns_server_Valid() const{
    return m_primary_dns_server_isValid;
}

QString OAIDNSSettings::getPrimaryIpv6DnsServer() const {
    return m_primary_ipv6_dns_server;
}
void OAIDNSSettings::setPrimaryIpv6DnsServer(const QString &primary_ipv6_dns_server) {
    m_primary_ipv6_dns_server = primary_ipv6_dns_server;
    m_primary_ipv6_dns_server_isSet = true;
}

bool OAIDNSSettings::is_primary_ipv6_dns_server_Set() const{
    return m_primary_ipv6_dns_server_isSet;
}

bool OAIDNSSettings::is_primary_ipv6_dns_server_Valid() const{
    return m_primary_ipv6_dns_server_isValid;
}

QList<QString> OAIDNSSettings::getSecondaryDnsServers() const {
    return m_secondary_dns_servers;
}
void OAIDNSSettings::setSecondaryDnsServers(const QList<QString> &secondary_dns_servers) {
    m_secondary_dns_servers = secondary_dns_servers;
    m_secondary_dns_servers_isSet = true;
}

bool OAIDNSSettings::is_secondary_dns_servers_Set() const{
    return m_secondary_dns_servers_isSet;
}

bool OAIDNSSettings::is_secondary_dns_servers_Valid() const{
    return m_secondary_dns_servers_isValid;
}

QList<QString> OAIDNSSettings::getSecondaryIpv6DnsServers() const {
    return m_secondary_ipv6_dns_servers;
}
void OAIDNSSettings::setSecondaryIpv6DnsServers(const QList<QString> &secondary_ipv6_dns_servers) {
    m_secondary_ipv6_dns_servers = secondary_ipv6_dns_servers;
    m_secondary_ipv6_dns_servers_isSet = true;
}

bool OAIDNSSettings::is_secondary_ipv6_dns_servers_Set() const{
    return m_secondary_ipv6_dns_servers_isSet;
}

bool OAIDNSSettings::is_secondary_ipv6_dns_servers_Valid() const{
    return m_secondary_ipv6_dns_servers_isValid;
}

bool OAIDNSSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_dns_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ipv6_dns_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_ipv6_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDNSSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
