/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAppliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAppliance::OAICloudAppliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAppliance::OAICloudAppliance() {
    this->initializeModel();
}

OAICloudAppliance::~OAICloudAppliance() {}

void OAICloudAppliance::initializeModel() {

    m_is_vnet_dns_configured_isSet = false;
    m_is_vnet_dns_configured_isValid = false;

    m_is_vnet_express_configured_isSet = false;
    m_is_vnet_express_configured_isValid = false;

    m_model_number_isSet = false;
    m_model_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;

    m_storage_account_type_isSet = false;
    m_storage_account_type_isValid = false;

    m_subnet_name_isSet = false;
    m_subnet_name_isValid = false;

    m_vm_image_name_isSet = false;
    m_vm_image_name_isValid = false;

    m_vm_type_isSet = false;
    m_vm_type_isValid = false;

    m_vnet_name_isSet = false;
    m_vnet_name_isValid = false;

    m_vnet_region_isSet = false;
    m_vnet_region_isValid = false;
}

void OAICloudAppliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAppliance::fromJsonObject(QJsonObject json) {

    m_is_vnet_dns_configured_isValid = ::OpenAPI::fromJsonValue(m_is_vnet_dns_configured, json[QString("isVnetDnsConfigured")]);
    m_is_vnet_dns_configured_isSet = !json[QString("isVnetDnsConfigured")].isNull() && m_is_vnet_dns_configured_isValid;

    m_is_vnet_express_configured_isValid = ::OpenAPI::fromJsonValue(m_is_vnet_express_configured, json[QString("isVnetExpressConfigured")]);
    m_is_vnet_express_configured_isSet = !json[QString("isVnetExpressConfigured")].isNull() && m_is_vnet_express_configured_isValid;

    m_model_number_isValid = ::OpenAPI::fromJsonValue(m_model_number, json[QString("modelNumber")]);
    m_model_number_isSet = !json[QString("modelNumber")].isNull() && m_model_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;

    m_storage_account_type_isValid = ::OpenAPI::fromJsonValue(m_storage_account_type, json[QString("storageAccountType")]);
    m_storage_account_type_isSet = !json[QString("storageAccountType")].isNull() && m_storage_account_type_isValid;

    m_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_subnet_name, json[QString("subnetName")]);
    m_subnet_name_isSet = !json[QString("subnetName")].isNull() && m_subnet_name_isValid;

    m_vm_image_name_isValid = ::OpenAPI::fromJsonValue(m_vm_image_name, json[QString("vmImageName")]);
    m_vm_image_name_isSet = !json[QString("vmImageName")].isNull() && m_vm_image_name_isValid;

    m_vm_type_isValid = ::OpenAPI::fromJsonValue(m_vm_type, json[QString("vmType")]);
    m_vm_type_isSet = !json[QString("vmType")].isNull() && m_vm_type_isValid;

    m_vnet_name_isValid = ::OpenAPI::fromJsonValue(m_vnet_name, json[QString("vnetName")]);
    m_vnet_name_isSet = !json[QString("vnetName")].isNull() && m_vnet_name_isValid;

    m_vnet_region_isValid = ::OpenAPI::fromJsonValue(m_vnet_region, json[QString("vnetRegion")]);
    m_vnet_region_isSet = !json[QString("vnetRegion")].isNull() && m_vnet_region_isValid;
}

QString OAICloudAppliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAppliance::asJsonObject() const {
    QJsonObject obj;
    if (m_is_vnet_dns_configured_isSet) {
        obj.insert(QString("isVnetDnsConfigured"), ::OpenAPI::toJsonValue(m_is_vnet_dns_configured));
    }
    if (m_is_vnet_express_configured_isSet) {
        obj.insert(QString("isVnetExpressConfigured"), ::OpenAPI::toJsonValue(m_is_vnet_express_configured));
    }
    if (m_model_number_isSet) {
        obj.insert(QString("modelNumber"), ::OpenAPI::toJsonValue(m_model_number));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    if (m_storage_account_type_isSet) {
        obj.insert(QString("storageAccountType"), ::OpenAPI::toJsonValue(m_storage_account_type));
    }
    if (m_subnet_name_isSet) {
        obj.insert(QString("subnetName"), ::OpenAPI::toJsonValue(m_subnet_name));
    }
    if (m_vm_image_name_isSet) {
        obj.insert(QString("vmImageName"), ::OpenAPI::toJsonValue(m_vm_image_name));
    }
    if (m_vm_type_isSet) {
        obj.insert(QString("vmType"), ::OpenAPI::toJsonValue(m_vm_type));
    }
    if (m_vnet_name_isSet) {
        obj.insert(QString("vnetName"), ::OpenAPI::toJsonValue(m_vnet_name));
    }
    if (m_vnet_region_isSet) {
        obj.insert(QString("vnetRegion"), ::OpenAPI::toJsonValue(m_vnet_region));
    }
    return obj;
}

bool OAICloudAppliance::isIsVnetDnsConfigured() const {
    return m_is_vnet_dns_configured;
}
void OAICloudAppliance::setIsVnetDnsConfigured(const bool &is_vnet_dns_configured) {
    m_is_vnet_dns_configured = is_vnet_dns_configured;
    m_is_vnet_dns_configured_isSet = true;
}

bool OAICloudAppliance::is_is_vnet_dns_configured_Set() const{
    return m_is_vnet_dns_configured_isSet;
}

bool OAICloudAppliance::is_is_vnet_dns_configured_Valid() const{
    return m_is_vnet_dns_configured_isValid;
}

bool OAICloudAppliance::isIsVnetExpressConfigured() const {
    return m_is_vnet_express_configured;
}
void OAICloudAppliance::setIsVnetExpressConfigured(const bool &is_vnet_express_configured) {
    m_is_vnet_express_configured = is_vnet_express_configured;
    m_is_vnet_express_configured_isSet = true;
}

bool OAICloudAppliance::is_is_vnet_express_configured_Set() const{
    return m_is_vnet_express_configured_isSet;
}

bool OAICloudAppliance::is_is_vnet_express_configured_Valid() const{
    return m_is_vnet_express_configured_isValid;
}

QString OAICloudAppliance::getModelNumber() const {
    return m_model_number;
}
void OAICloudAppliance::setModelNumber(const QString &model_number) {
    m_model_number = model_number;
    m_model_number_isSet = true;
}

bool OAICloudAppliance::is_model_number_Set() const{
    return m_model_number_isSet;
}

bool OAICloudAppliance::is_model_number_Valid() const{
    return m_model_number_isValid;
}

QString OAICloudAppliance::getName() const {
    return m_name;
}
void OAICloudAppliance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICloudAppliance::is_name_Set() const{
    return m_name_isSet;
}

bool OAICloudAppliance::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICloudAppliance::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAICloudAppliance::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAICloudAppliance::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAICloudAppliance::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

QString OAICloudAppliance::getStorageAccountType() const {
    return m_storage_account_type;
}
void OAICloudAppliance::setStorageAccountType(const QString &storage_account_type) {
    m_storage_account_type = storage_account_type;
    m_storage_account_type_isSet = true;
}

bool OAICloudAppliance::is_storage_account_type_Set() const{
    return m_storage_account_type_isSet;
}

bool OAICloudAppliance::is_storage_account_type_Valid() const{
    return m_storage_account_type_isValid;
}

QString OAICloudAppliance::getSubnetName() const {
    return m_subnet_name;
}
void OAICloudAppliance::setSubnetName(const QString &subnet_name) {
    m_subnet_name = subnet_name;
    m_subnet_name_isSet = true;
}

bool OAICloudAppliance::is_subnet_name_Set() const{
    return m_subnet_name_isSet;
}

bool OAICloudAppliance::is_subnet_name_Valid() const{
    return m_subnet_name_isValid;
}

QString OAICloudAppliance::getVmImageName() const {
    return m_vm_image_name;
}
void OAICloudAppliance::setVmImageName(const QString &vm_image_name) {
    m_vm_image_name = vm_image_name;
    m_vm_image_name_isSet = true;
}

bool OAICloudAppliance::is_vm_image_name_Set() const{
    return m_vm_image_name_isSet;
}

bool OAICloudAppliance::is_vm_image_name_Valid() const{
    return m_vm_image_name_isValid;
}

QString OAICloudAppliance::getVmType() const {
    return m_vm_type;
}
void OAICloudAppliance::setVmType(const QString &vm_type) {
    m_vm_type = vm_type;
    m_vm_type_isSet = true;
}

bool OAICloudAppliance::is_vm_type_Set() const{
    return m_vm_type_isSet;
}

bool OAICloudAppliance::is_vm_type_Valid() const{
    return m_vm_type_isValid;
}

QString OAICloudAppliance::getVnetName() const {
    return m_vnet_name;
}
void OAICloudAppliance::setVnetName(const QString &vnet_name) {
    m_vnet_name = vnet_name;
    m_vnet_name_isSet = true;
}

bool OAICloudAppliance::is_vnet_name_Set() const{
    return m_vnet_name_isSet;
}

bool OAICloudAppliance::is_vnet_name_Valid() const{
    return m_vnet_name_isValid;
}

QString OAICloudAppliance::getVnetRegion() const {
    return m_vnet_region;
}
void OAICloudAppliance::setVnetRegion(const QString &vnet_region) {
    m_vnet_region = vnet_region;
    m_vnet_region_isSet = true;
}

bool OAICloudAppliance::is_vnet_region_Set() const{
    return m_vnet_region_isSet;
}

bool OAICloudAppliance::is_vnet_region_Valid() const{
    return m_vnet_region_isValid;
}

bool OAICloudAppliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_vnet_dns_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_vnet_express_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAppliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_vnet_region_isValid && true;
}

} // namespace OpenAPI
