/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeContainerFailoverMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeContainerFailoverMetadata::OAIVolumeContainerFailoverMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeContainerFailoverMetadata::OAIVolumeContainerFailoverMetadata() {
    this->initializeModel();
}

OAIVolumeContainerFailoverMetadata::~OAIVolumeContainerFailoverMetadata() {}

void OAIVolumeContainerFailoverMetadata::initializeModel() {

    m_volume_container_id_isSet = false;
    m_volume_container_id_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAIVolumeContainerFailoverMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeContainerFailoverMetadata::fromJsonObject(QJsonObject json) {

    m_volume_container_id_isValid = ::OpenAPI::fromJsonValue(m_volume_container_id, json[QString("volumeContainerId")]);
    m_volume_container_id_isSet = !json[QString("volumeContainerId")].isNull() && m_volume_container_id_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAIVolumeContainerFailoverMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeContainerFailoverMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_volume_container_id_isSet) {
        obj.insert(QString("volumeContainerId"), ::OpenAPI::toJsonValue(m_volume_container_id));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

QString OAIVolumeContainerFailoverMetadata::getVolumeContainerId() const {
    return m_volume_container_id;
}
void OAIVolumeContainerFailoverMetadata::setVolumeContainerId(const QString &volume_container_id) {
    m_volume_container_id = volume_container_id;
    m_volume_container_id_isSet = true;
}

bool OAIVolumeContainerFailoverMetadata::is_volume_container_id_Set() const{
    return m_volume_container_id_isSet;
}

bool OAIVolumeContainerFailoverMetadata::is_volume_container_id_Valid() const{
    return m_volume_container_id_isValid;
}

QList<OAIVolumeFailoverMetadata> OAIVolumeContainerFailoverMetadata::getVolumes() const {
    return m_volumes;
}
void OAIVolumeContainerFailoverMetadata::setVolumes(const QList<OAIVolumeFailoverMetadata> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIVolumeContainerFailoverMetadata::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIVolumeContainerFailoverMetadata::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIVolumeContainerFailoverMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_volume_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeContainerFailoverMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
