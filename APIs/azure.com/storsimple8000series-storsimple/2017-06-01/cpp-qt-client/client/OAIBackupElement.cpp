/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupElement::OAIBackupElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupElement::OAIBackupElement() {
    this->initializeModel();
}

OAIBackupElement::~OAIBackupElement() {}

void OAIBackupElement::initializeModel() {

    m_element_id_isSet = false;
    m_element_id_isValid = false;

    m_element_name_isSet = false;
    m_element_name_isValid = false;

    m_element_type_isSet = false;
    m_element_type_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_volume_container_id_isSet = false;
    m_volume_container_id_isValid = false;

    m_volume_name_isSet = false;
    m_volume_name_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;
}

void OAIBackupElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupElement::fromJsonObject(QJsonObject json) {

    m_element_id_isValid = ::OpenAPI::fromJsonValue(m_element_id, json[QString("elementId")]);
    m_element_id_isSet = !json[QString("elementId")].isNull() && m_element_id_isValid;

    m_element_name_isValid = ::OpenAPI::fromJsonValue(m_element_name, json[QString("elementName")]);
    m_element_name_isSet = !json[QString("elementName")].isNull() && m_element_name_isValid;

    m_element_type_isValid = ::OpenAPI::fromJsonValue(m_element_type, json[QString("elementType")]);
    m_element_type_isSet = !json[QString("elementType")].isNull() && m_element_type_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_volume_container_id_isValid = ::OpenAPI::fromJsonValue(m_volume_container_id, json[QString("volumeContainerId")]);
    m_volume_container_id_isSet = !json[QString("volumeContainerId")].isNull() && m_volume_container_id_isValid;

    m_volume_name_isValid = ::OpenAPI::fromJsonValue(m_volume_name, json[QString("volumeName")]);
    m_volume_name_isSet = !json[QString("volumeName")].isNull() && m_volume_name_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("volumeType")]);
    m_volume_type_isSet = !json[QString("volumeType")].isNull() && m_volume_type_isValid;
}

QString OAIBackupElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupElement::asJsonObject() const {
    QJsonObject obj;
    if (m_element_id_isSet) {
        obj.insert(QString("elementId"), ::OpenAPI::toJsonValue(m_element_id));
    }
    if (m_element_name_isSet) {
        obj.insert(QString("elementName"), ::OpenAPI::toJsonValue(m_element_name));
    }
    if (m_element_type_isSet) {
        obj.insert(QString("elementType"), ::OpenAPI::toJsonValue(m_element_type));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_volume_container_id_isSet) {
        obj.insert(QString("volumeContainerId"), ::OpenAPI::toJsonValue(m_volume_container_id));
    }
    if (m_volume_name_isSet) {
        obj.insert(QString("volumeName"), ::OpenAPI::toJsonValue(m_volume_name));
    }
    if (m_volume_type_isSet) {
        obj.insert(QString("volumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    return obj;
}

QString OAIBackupElement::getElementId() const {
    return m_element_id;
}
void OAIBackupElement::setElementId(const QString &element_id) {
    m_element_id = element_id;
    m_element_id_isSet = true;
}

bool OAIBackupElement::is_element_id_Set() const{
    return m_element_id_isSet;
}

bool OAIBackupElement::is_element_id_Valid() const{
    return m_element_id_isValid;
}

QString OAIBackupElement::getElementName() const {
    return m_element_name;
}
void OAIBackupElement::setElementName(const QString &element_name) {
    m_element_name = element_name;
    m_element_name_isSet = true;
}

bool OAIBackupElement::is_element_name_Set() const{
    return m_element_name_isSet;
}

bool OAIBackupElement::is_element_name_Valid() const{
    return m_element_name_isValid;
}

QString OAIBackupElement::getElementType() const {
    return m_element_type;
}
void OAIBackupElement::setElementType(const QString &element_type) {
    m_element_type = element_type;
    m_element_type_isSet = true;
}

bool OAIBackupElement::is_element_type_Set() const{
    return m_element_type_isSet;
}

bool OAIBackupElement::is_element_type_Valid() const{
    return m_element_type_isValid;
}

qint64 OAIBackupElement::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIBackupElement::setSizeInBytes(const qint64 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIBackupElement::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIBackupElement::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

QString OAIBackupElement::getVolumeContainerId() const {
    return m_volume_container_id;
}
void OAIBackupElement::setVolumeContainerId(const QString &volume_container_id) {
    m_volume_container_id = volume_container_id;
    m_volume_container_id_isSet = true;
}

bool OAIBackupElement::is_volume_container_id_Set() const{
    return m_volume_container_id_isSet;
}

bool OAIBackupElement::is_volume_container_id_Valid() const{
    return m_volume_container_id_isValid;
}

QString OAIBackupElement::getVolumeName() const {
    return m_volume_name;
}
void OAIBackupElement::setVolumeName(const QString &volume_name) {
    m_volume_name = volume_name;
    m_volume_name_isSet = true;
}

bool OAIBackupElement::is_volume_name_Set() const{
    return m_volume_name_isSet;
}

bool OAIBackupElement::is_volume_name_Valid() const{
    return m_volume_name_isValid;
}

QString OAIBackupElement::getVolumeType() const {
    return m_volume_type;
}
void OAIBackupElement::setVolumeType(const QString &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAIBackupElement::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAIBackupElement::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

bool OAIBackupElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_element_id_isValid && m_element_name_isValid && m_element_type_isValid && m_size_in_bytes_isValid && m_volume_container_id_isValid && m_volume_name_isValid && true;
}

} // namespace OpenAPI
