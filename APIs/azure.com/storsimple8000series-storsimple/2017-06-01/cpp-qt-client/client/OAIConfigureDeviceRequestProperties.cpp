/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureDeviceRequestProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureDeviceRequestProperties::OAIConfigureDeviceRequestProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureDeviceRequestProperties::OAIConfigureDeviceRequestProperties() {
    this->initializeModel();
}

OAIConfigureDeviceRequestProperties::~OAIConfigureDeviceRequestProperties() {}

void OAIConfigureDeviceRequestProperties::initializeModel() {

    m_current_device_name_isSet = false;
    m_current_device_name_isValid = false;

    m_dns_settings_isSet = false;
    m_dns_settings_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_network_interface_data0_settings_isSet = false;
    m_network_interface_data0_settings_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIConfigureDeviceRequestProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureDeviceRequestProperties::fromJsonObject(QJsonObject json) {

    m_current_device_name_isValid = ::OpenAPI::fromJsonValue(m_current_device_name, json[QString("currentDeviceName")]);
    m_current_device_name_isSet = !json[QString("currentDeviceName")].isNull() && m_current_device_name_isValid;

    m_dns_settings_isValid = ::OpenAPI::fromJsonValue(m_dns_settings, json[QString("dnsSettings")]);
    m_dns_settings_isSet = !json[QString("dnsSettings")].isNull() && m_dns_settings_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_network_interface_data0_settings_isValid = ::OpenAPI::fromJsonValue(m_network_interface_data0_settings, json[QString("networkInterfaceData0Settings")]);
    m_network_interface_data0_settings_isSet = !json[QString("networkInterfaceData0Settings")].isNull() && m_network_interface_data0_settings_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIConfigureDeviceRequestProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureDeviceRequestProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_current_device_name_isSet) {
        obj.insert(QString("currentDeviceName"), ::OpenAPI::toJsonValue(m_current_device_name));
    }
    if (m_dns_settings.isSet()) {
        obj.insert(QString("dnsSettings"), ::OpenAPI::toJsonValue(m_dns_settings));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_network_interface_data0_settings.isSet()) {
        obj.insert(QString("networkInterfaceData0Settings"), ::OpenAPI::toJsonValue(m_network_interface_data0_settings));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIConfigureDeviceRequestProperties::getCurrentDeviceName() const {
    return m_current_device_name;
}
void OAIConfigureDeviceRequestProperties::setCurrentDeviceName(const QString &current_device_name) {
    m_current_device_name = current_device_name;
    m_current_device_name_isSet = true;
}

bool OAIConfigureDeviceRequestProperties::is_current_device_name_Set() const{
    return m_current_device_name_isSet;
}

bool OAIConfigureDeviceRequestProperties::is_current_device_name_Valid() const{
    return m_current_device_name_isValid;
}

OAISecondaryDNSSettings OAIConfigureDeviceRequestProperties::getDnsSettings() const {
    return m_dns_settings;
}
void OAIConfigureDeviceRequestProperties::setDnsSettings(const OAISecondaryDNSSettings &dns_settings) {
    m_dns_settings = dns_settings;
    m_dns_settings_isSet = true;
}

bool OAIConfigureDeviceRequestProperties::is_dns_settings_Set() const{
    return m_dns_settings_isSet;
}

bool OAIConfigureDeviceRequestProperties::is_dns_settings_Valid() const{
    return m_dns_settings_isValid;
}

QString OAIConfigureDeviceRequestProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIConfigureDeviceRequestProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIConfigureDeviceRequestProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIConfigureDeviceRequestProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAINetworkInterfaceData0Settings OAIConfigureDeviceRequestProperties::getNetworkInterfaceData0Settings() const {
    return m_network_interface_data0_settings;
}
void OAIConfigureDeviceRequestProperties::setNetworkInterfaceData0Settings(const OAINetworkInterfaceData0Settings &network_interface_data0_settings) {
    m_network_interface_data0_settings = network_interface_data0_settings;
    m_network_interface_data0_settings_isSet = true;
}

bool OAIConfigureDeviceRequestProperties::is_network_interface_data0_settings_Set() const{
    return m_network_interface_data0_settings_isSet;
}

bool OAIConfigureDeviceRequestProperties::is_network_interface_data0_settings_Valid() const{
    return m_network_interface_data0_settings_isValid;
}

QString OAIConfigureDeviceRequestProperties::getTimeZone() const {
    return m_time_zone;
}
void OAIConfigureDeviceRequestProperties::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIConfigureDeviceRequestProperties::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIConfigureDeviceRequestProperties::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIConfigureDeviceRequestProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_data0_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureDeviceRequestProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_device_name_isValid && m_friendly_name_isValid && m_time_zone_isValid && true;
}

} // namespace OpenAPI
