/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteManagementSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteManagementSettings::OAIRemoteManagementSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteManagementSettings::OAIRemoteManagementSettings() {
    this->initializeModel();
}

OAIRemoteManagementSettings::~OAIRemoteManagementSettings() {}

void OAIRemoteManagementSettings::initializeModel() {

    m_remote_management_certificate_isSet = false;
    m_remote_management_certificate_isValid = false;

    m_remote_management_mode_isSet = false;
    m_remote_management_mode_isValid = false;
}

void OAIRemoteManagementSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteManagementSettings::fromJsonObject(QJsonObject json) {

    m_remote_management_certificate_isValid = ::OpenAPI::fromJsonValue(m_remote_management_certificate, json[QString("remoteManagementCertificate")]);
    m_remote_management_certificate_isSet = !json[QString("remoteManagementCertificate")].isNull() && m_remote_management_certificate_isValid;

    m_remote_management_mode_isValid = ::OpenAPI::fromJsonValue(m_remote_management_mode, json[QString("remoteManagementMode")]);
    m_remote_management_mode_isSet = !json[QString("remoteManagementMode")].isNull() && m_remote_management_mode_isValid;
}

QString OAIRemoteManagementSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteManagementSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_remote_management_certificate_isSet) {
        obj.insert(QString("remoteManagementCertificate"), ::OpenAPI::toJsonValue(m_remote_management_certificate));
    }
    if (m_remote_management_mode_isSet) {
        obj.insert(QString("remoteManagementMode"), ::OpenAPI::toJsonValue(m_remote_management_mode));
    }
    return obj;
}

QString OAIRemoteManagementSettings::getRemoteManagementCertificate() const {
    return m_remote_management_certificate;
}
void OAIRemoteManagementSettings::setRemoteManagementCertificate(const QString &remote_management_certificate) {
    m_remote_management_certificate = remote_management_certificate;
    m_remote_management_certificate_isSet = true;
}

bool OAIRemoteManagementSettings::is_remote_management_certificate_Set() const{
    return m_remote_management_certificate_isSet;
}

bool OAIRemoteManagementSettings::is_remote_management_certificate_Valid() const{
    return m_remote_management_certificate_isValid;
}

QString OAIRemoteManagementSettings::getRemoteManagementMode() const {
    return m_remote_management_mode;
}
void OAIRemoteManagementSettings::setRemoteManagementMode(const QString &remote_management_mode) {
    m_remote_management_mode = remote_management_mode;
    m_remote_management_mode_isSet = true;
}

bool OAIRemoteManagementSettings::is_remote_management_mode_Set() const{
    return m_remote_management_mode_isSet;
}

bool OAIRemoteManagementSettings::is_remote_management_mode_Valid() const{
    return m_remote_management_mode_isValid;
}

bool OAIRemoteManagementSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_remote_management_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_management_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteManagementSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_remote_management_mode_isValid && true;
}

} // namespace OpenAPI
