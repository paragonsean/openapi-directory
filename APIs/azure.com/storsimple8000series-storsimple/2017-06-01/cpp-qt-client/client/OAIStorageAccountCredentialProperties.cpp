/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageAccountCredentialProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageAccountCredentialProperties::OAIStorageAccountCredentialProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageAccountCredentialProperties::OAIStorageAccountCredentialProperties() {
    this->initializeModel();
}

OAIStorageAccountCredentialProperties::~OAIStorageAccountCredentialProperties() {}

void OAIStorageAccountCredentialProperties::initializeModel() {

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_end_point_isSet = false;
    m_end_point_isValid = false;

    m_ssl_status_isSet = false;
    m_ssl_status_isValid = false;

    m_volumes_count_isSet = false;
    m_volumes_count_isValid = false;
}

void OAIStorageAccountCredentialProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageAccountCredentialProperties::fromJsonObject(QJsonObject json) {

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("accessKey")]);
    m_access_key_isSet = !json[QString("accessKey")].isNull() && m_access_key_isValid;

    m_end_point_isValid = ::OpenAPI::fromJsonValue(m_end_point, json[QString("endPoint")]);
    m_end_point_isSet = !json[QString("endPoint")].isNull() && m_end_point_isValid;

    m_ssl_status_isValid = ::OpenAPI::fromJsonValue(m_ssl_status, json[QString("sslStatus")]);
    m_ssl_status_isSet = !json[QString("sslStatus")].isNull() && m_ssl_status_isValid;

    m_volumes_count_isValid = ::OpenAPI::fromJsonValue(m_volumes_count, json[QString("volumesCount")]);
    m_volumes_count_isSet = !json[QString("volumesCount")].isNull() && m_volumes_count_isValid;
}

QString OAIStorageAccountCredentialProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageAccountCredentialProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_key.isSet()) {
        obj.insert(QString("accessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_end_point_isSet) {
        obj.insert(QString("endPoint"), ::OpenAPI::toJsonValue(m_end_point));
    }
    if (m_ssl_status_isSet) {
        obj.insert(QString("sslStatus"), ::OpenAPI::toJsonValue(m_ssl_status));
    }
    if (m_volumes_count_isSet) {
        obj.insert(QString("volumesCount"), ::OpenAPI::toJsonValue(m_volumes_count));
    }
    return obj;
}

OAIAsymmetricEncryptedSecret OAIStorageAccountCredentialProperties::getAccessKey() const {
    return m_access_key;
}
void OAIStorageAccountCredentialProperties::setAccessKey(const OAIAsymmetricEncryptedSecret &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAIStorageAccountCredentialProperties::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAIStorageAccountCredentialProperties::is_access_key_Valid() const{
    return m_access_key_isValid;
}

QString OAIStorageAccountCredentialProperties::getEndPoint() const {
    return m_end_point;
}
void OAIStorageAccountCredentialProperties::setEndPoint(const QString &end_point) {
    m_end_point = end_point;
    m_end_point_isSet = true;
}

bool OAIStorageAccountCredentialProperties::is_end_point_Set() const{
    return m_end_point_isSet;
}

bool OAIStorageAccountCredentialProperties::is_end_point_Valid() const{
    return m_end_point_isValid;
}

QString OAIStorageAccountCredentialProperties::getSslStatus() const {
    return m_ssl_status;
}
void OAIStorageAccountCredentialProperties::setSslStatus(const QString &ssl_status) {
    m_ssl_status = ssl_status;
    m_ssl_status_isSet = true;
}

bool OAIStorageAccountCredentialProperties::is_ssl_status_Set() const{
    return m_ssl_status_isSet;
}

bool OAIStorageAccountCredentialProperties::is_ssl_status_Valid() const{
    return m_ssl_status_isValid;
}

qint32 OAIStorageAccountCredentialProperties::getVolumesCount() const {
    return m_volumes_count;
}
void OAIStorageAccountCredentialProperties::setVolumesCount(const qint32 &volumes_count) {
    m_volumes_count = volumes_count;
    m_volumes_count_isSet = true;
}

bool OAIStorageAccountCredentialProperties::is_volumes_count_Set() const{
    return m_volumes_count_isSet;
}

bool OAIStorageAccountCredentialProperties::is_volumes_count_Valid() const{
    return m_volumes_count_isValid;
}

bool OAIStorageAccountCredentialProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageAccountCredentialProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_point_isValid && m_ssl_status_isValid && true;
}

} // namespace OpenAPI
