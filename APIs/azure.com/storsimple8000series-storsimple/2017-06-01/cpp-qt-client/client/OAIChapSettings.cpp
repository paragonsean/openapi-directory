/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChapSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChapSettings::OAIChapSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChapSettings::OAIChapSettings() {
    this->initializeModel();
}

OAIChapSettings::~OAIChapSettings() {}

void OAIChapSettings::initializeModel() {

    m_initiator_secret_isSet = false;
    m_initiator_secret_isValid = false;

    m_initiator_user_isSet = false;
    m_initiator_user_isValid = false;

    m_target_secret_isSet = false;
    m_target_secret_isValid = false;

    m_target_user_isSet = false;
    m_target_user_isValid = false;
}

void OAIChapSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChapSettings::fromJsonObject(QJsonObject json) {

    m_initiator_secret_isValid = ::OpenAPI::fromJsonValue(m_initiator_secret, json[QString("initiatorSecret")]);
    m_initiator_secret_isSet = !json[QString("initiatorSecret")].isNull() && m_initiator_secret_isValid;

    m_initiator_user_isValid = ::OpenAPI::fromJsonValue(m_initiator_user, json[QString("initiatorUser")]);
    m_initiator_user_isSet = !json[QString("initiatorUser")].isNull() && m_initiator_user_isValid;

    m_target_secret_isValid = ::OpenAPI::fromJsonValue(m_target_secret, json[QString("targetSecret")]);
    m_target_secret_isSet = !json[QString("targetSecret")].isNull() && m_target_secret_isValid;

    m_target_user_isValid = ::OpenAPI::fromJsonValue(m_target_user, json[QString("targetUser")]);
    m_target_user_isSet = !json[QString("targetUser")].isNull() && m_target_user_isValid;
}

QString OAIChapSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChapSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_initiator_secret.isSet()) {
        obj.insert(QString("initiatorSecret"), ::OpenAPI::toJsonValue(m_initiator_secret));
    }
    if (m_initiator_user_isSet) {
        obj.insert(QString("initiatorUser"), ::OpenAPI::toJsonValue(m_initiator_user));
    }
    if (m_target_secret.isSet()) {
        obj.insert(QString("targetSecret"), ::OpenAPI::toJsonValue(m_target_secret));
    }
    if (m_target_user_isSet) {
        obj.insert(QString("targetUser"), ::OpenAPI::toJsonValue(m_target_user));
    }
    return obj;
}

OAIAsymmetricEncryptedSecret OAIChapSettings::getInitiatorSecret() const {
    return m_initiator_secret;
}
void OAIChapSettings::setInitiatorSecret(const OAIAsymmetricEncryptedSecret &initiator_secret) {
    m_initiator_secret = initiator_secret;
    m_initiator_secret_isSet = true;
}

bool OAIChapSettings::is_initiator_secret_Set() const{
    return m_initiator_secret_isSet;
}

bool OAIChapSettings::is_initiator_secret_Valid() const{
    return m_initiator_secret_isValid;
}

QString OAIChapSettings::getInitiatorUser() const {
    return m_initiator_user;
}
void OAIChapSettings::setInitiatorUser(const QString &initiator_user) {
    m_initiator_user = initiator_user;
    m_initiator_user_isSet = true;
}

bool OAIChapSettings::is_initiator_user_Set() const{
    return m_initiator_user_isSet;
}

bool OAIChapSettings::is_initiator_user_Valid() const{
    return m_initiator_user_isValid;
}

OAIAsymmetricEncryptedSecret OAIChapSettings::getTargetSecret() const {
    return m_target_secret;
}
void OAIChapSettings::setTargetSecret(const OAIAsymmetricEncryptedSecret &target_secret) {
    m_target_secret = target_secret;
    m_target_secret_isSet = true;
}

bool OAIChapSettings::is_target_secret_Set() const{
    return m_target_secret_isSet;
}

bool OAIChapSettings::is_target_secret_Valid() const{
    return m_target_secret_isValid;
}

QString OAIChapSettings::getTargetUser() const {
    return m_target_user;
}
void OAIChapSettings::setTargetUser(const QString &target_user) {
    m_target_user = target_user;
    m_target_user_isSet = true;
}

bool OAIChapSettings::is_target_user_Set() const{
    return m_target_user_isSet;
}

bool OAIChapSettings::is_target_user_Valid() const{
    return m_target_user_isValid;
}

bool OAIChapSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initiator_secret.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_secret.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChapSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
