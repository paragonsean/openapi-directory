/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllerPowerStateChangeRequestProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllerPowerStateChangeRequestProperties::OAIControllerPowerStateChangeRequestProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllerPowerStateChangeRequestProperties::OAIControllerPowerStateChangeRequestProperties() {
    this->initializeModel();
}

OAIControllerPowerStateChangeRequestProperties::~OAIControllerPowerStateChangeRequestProperties() {}

void OAIControllerPowerStateChangeRequestProperties::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_active_controller_isSet = false;
    m_active_controller_isValid = false;

    m_controller0_state_isSet = false;
    m_controller0_state_isValid = false;

    m_controller1_state_isSet = false;
    m_controller1_state_isValid = false;
}

void OAIControllerPowerStateChangeRequestProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllerPowerStateChangeRequestProperties::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_active_controller_isValid = ::OpenAPI::fromJsonValue(m_active_controller, json[QString("activeController")]);
    m_active_controller_isSet = !json[QString("activeController")].isNull() && m_active_controller_isValid;

    m_controller0_state_isValid = ::OpenAPI::fromJsonValue(m_controller0_state, json[QString("controller0State")]);
    m_controller0_state_isSet = !json[QString("controller0State")].isNull() && m_controller0_state_isValid;

    m_controller1_state_isValid = ::OpenAPI::fromJsonValue(m_controller1_state, json[QString("controller1State")]);
    m_controller1_state_isSet = !json[QString("controller1State")].isNull() && m_controller1_state_isValid;
}

QString OAIControllerPowerStateChangeRequestProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllerPowerStateChangeRequestProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_active_controller_isSet) {
        obj.insert(QString("activeController"), ::OpenAPI::toJsonValue(m_active_controller));
    }
    if (m_controller0_state_isSet) {
        obj.insert(QString("controller0State"), ::OpenAPI::toJsonValue(m_controller0_state));
    }
    if (m_controller1_state_isSet) {
        obj.insert(QString("controller1State"), ::OpenAPI::toJsonValue(m_controller1_state));
    }
    return obj;
}

QString OAIControllerPowerStateChangeRequestProperties::getAction() const {
    return m_action;
}
void OAIControllerPowerStateChangeRequestProperties::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIControllerPowerStateChangeRequestProperties::is_action_Set() const{
    return m_action_isSet;
}

bool OAIControllerPowerStateChangeRequestProperties::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIControllerPowerStateChangeRequestProperties::getActiveController() const {
    return m_active_controller;
}
void OAIControllerPowerStateChangeRequestProperties::setActiveController(const QString &active_controller) {
    m_active_controller = active_controller;
    m_active_controller_isSet = true;
}

bool OAIControllerPowerStateChangeRequestProperties::is_active_controller_Set() const{
    return m_active_controller_isSet;
}

bool OAIControllerPowerStateChangeRequestProperties::is_active_controller_Valid() const{
    return m_active_controller_isValid;
}

QString OAIControllerPowerStateChangeRequestProperties::getController0State() const {
    return m_controller0_state;
}
void OAIControllerPowerStateChangeRequestProperties::setController0State(const QString &controller0_state) {
    m_controller0_state = controller0_state;
    m_controller0_state_isSet = true;
}

bool OAIControllerPowerStateChangeRequestProperties::is_controller0_state_Set() const{
    return m_controller0_state_isSet;
}

bool OAIControllerPowerStateChangeRequestProperties::is_controller0_state_Valid() const{
    return m_controller0_state_isValid;
}

QString OAIControllerPowerStateChangeRequestProperties::getController1State() const {
    return m_controller1_state;
}
void OAIControllerPowerStateChangeRequestProperties::setController1State(const QString &controller1_state) {
    m_controller1_state = controller1_state;
    m_controller1_state_isSet = true;
}

bool OAIControllerPowerStateChangeRequestProperties::is_controller1_state_Set() const{
    return m_controller1_state_isSet;
}

bool OAIControllerPowerStateChangeRequestProperties::is_controller1_state_Valid() const{
    return m_controller1_state_isValid;
}

bool OAIControllerPowerStateChangeRequestProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_controller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller0_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller1_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllerPowerStateChangeRequestProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_active_controller_isValid && m_controller0_state_isValid && m_controller1_state_isValid && true;
}

} // namespace OpenAPI
