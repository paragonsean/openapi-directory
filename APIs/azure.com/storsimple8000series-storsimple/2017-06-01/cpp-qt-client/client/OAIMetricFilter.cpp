/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricFilter::OAIMetricFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricFilter::OAIMetricFilter() {
    this->initializeModel();
}

OAIMetricFilter::~OAIMetricFilter() {}

void OAIMetricFilter::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_time_grain_isSet = false;
    m_time_grain_isValid = false;
}

void OAIMetricFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricFilter::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_time_grain_isValid = ::OpenAPI::fromJsonValue(m_time_grain, json[QString("timeGrain")]);
    m_time_grain_isSet = !json[QString("timeGrain")].isNull() && m_time_grain_isValid;
}

QString OAIMetricFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_time_grain_isSet) {
        obj.insert(QString("timeGrain"), ::OpenAPI::toJsonValue(m_time_grain));
    }
    return obj;
}

QString OAIMetricFilter::getCategory() const {
    return m_category;
}
void OAIMetricFilter::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMetricFilter::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMetricFilter::is_category_Valid() const{
    return m_category_isValid;
}

OAIDimensionFilter OAIMetricFilter::getDimensions() const {
    return m_dimensions;
}
void OAIMetricFilter::setDimensions(const OAIDimensionFilter &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricFilter::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricFilter::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QDateTime OAIMetricFilter::getEndTime() const {
    return m_end_time;
}
void OAIMetricFilter::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMetricFilter::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMetricFilter::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIMetricNameFilter OAIMetricFilter::getName() const {
    return m_name;
}
void OAIMetricFilter::setName(const OAIMetricNameFilter &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetricFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetricFilter::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIMetricFilter::getStartTime() const {
    return m_start_time;
}
void OAIMetricFilter::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMetricFilter::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMetricFilter::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIMetricFilter::getTimeGrain() const {
    return m_time_grain;
}
void OAIMetricFilter::setTimeGrain(const QString &time_grain) {
    m_time_grain = time_grain;
    m_time_grain_isSet = true;
}

bool OAIMetricFilter::is_time_grain_Set() const{
    return m_time_grain_isSet;
}

bool OAIMetricFilter::is_time_grain_Valid() const{
    return m_time_grain_isValid;
}

bool OAIMetricFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && true;
}

} // namespace OpenAPI
