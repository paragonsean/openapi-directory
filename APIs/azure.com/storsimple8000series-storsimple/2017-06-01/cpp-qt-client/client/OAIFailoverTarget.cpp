/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverTarget::OAIFailoverTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverTarget::OAIFailoverTarget() {
    this->initializeModel();
}

OAIFailoverTarget::~OAIFailoverTarget() {}

void OAIFailoverTarget::initializeModel() {

    m_available_local_storage_in_bytes_isSet = false;
    m_available_local_storage_in_bytes_isValid = false;

    m_available_tiered_storage_in_bytes_isSet = false;
    m_available_tiered_storage_in_bytes_isValid = false;

    m_data_containers_count_isSet = false;
    m_data_containers_count_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_location_isSet = false;
    m_device_location_isValid = false;

    m_device_software_version_isSet = false;
    m_device_software_version_isValid = false;

    m_device_status_isSet = false;
    m_device_status_isValid = false;

    m_eligibility_result_isSet = false;
    m_eligibility_result_isValid = false;

    m_friendly_device_software_version_isSet = false;
    m_friendly_device_software_version_isValid = false;

    m_model_description_isSet = false;
    m_model_description_isValid = false;

    m_volumes_count_isSet = false;
    m_volumes_count_isValid = false;
}

void OAIFailoverTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverTarget::fromJsonObject(QJsonObject json) {

    m_available_local_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_local_storage_in_bytes, json[QString("availableLocalStorageInBytes")]);
    m_available_local_storage_in_bytes_isSet = !json[QString("availableLocalStorageInBytes")].isNull() && m_available_local_storage_in_bytes_isValid;

    m_available_tiered_storage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_tiered_storage_in_bytes, json[QString("availableTieredStorageInBytes")]);
    m_available_tiered_storage_in_bytes_isSet = !json[QString("availableTieredStorageInBytes")].isNull() && m_available_tiered_storage_in_bytes_isValid;

    m_data_containers_count_isValid = ::OpenAPI::fromJsonValue(m_data_containers_count, json[QString("dataContainersCount")]);
    m_data_containers_count_isSet = !json[QString("dataContainersCount")].isNull() && m_data_containers_count_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_location_isValid = ::OpenAPI::fromJsonValue(m_device_location, json[QString("deviceLocation")]);
    m_device_location_isSet = !json[QString("deviceLocation")].isNull() && m_device_location_isValid;

    m_device_software_version_isValid = ::OpenAPI::fromJsonValue(m_device_software_version, json[QString("deviceSoftwareVersion")]);
    m_device_software_version_isSet = !json[QString("deviceSoftwareVersion")].isNull() && m_device_software_version_isValid;

    m_device_status_isValid = ::OpenAPI::fromJsonValue(m_device_status, json[QString("deviceStatus")]);
    m_device_status_isSet = !json[QString("deviceStatus")].isNull() && m_device_status_isValid;

    m_eligibility_result_isValid = ::OpenAPI::fromJsonValue(m_eligibility_result, json[QString("eligibilityResult")]);
    m_eligibility_result_isSet = !json[QString("eligibilityResult")].isNull() && m_eligibility_result_isValid;

    m_friendly_device_software_version_isValid = ::OpenAPI::fromJsonValue(m_friendly_device_software_version, json[QString("friendlyDeviceSoftwareVersion")]);
    m_friendly_device_software_version_isSet = !json[QString("friendlyDeviceSoftwareVersion")].isNull() && m_friendly_device_software_version_isValid;

    m_model_description_isValid = ::OpenAPI::fromJsonValue(m_model_description, json[QString("modelDescription")]);
    m_model_description_isSet = !json[QString("modelDescription")].isNull() && m_model_description_isValid;

    m_volumes_count_isValid = ::OpenAPI::fromJsonValue(m_volumes_count, json[QString("volumesCount")]);
    m_volumes_count_isSet = !json[QString("volumesCount")].isNull() && m_volumes_count_isValid;
}

QString OAIFailoverTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_available_local_storage_in_bytes_isSet) {
        obj.insert(QString("availableLocalStorageInBytes"), ::OpenAPI::toJsonValue(m_available_local_storage_in_bytes));
    }
    if (m_available_tiered_storage_in_bytes_isSet) {
        obj.insert(QString("availableTieredStorageInBytes"), ::OpenAPI::toJsonValue(m_available_tiered_storage_in_bytes));
    }
    if (m_data_containers_count_isSet) {
        obj.insert(QString("dataContainersCount"), ::OpenAPI::toJsonValue(m_data_containers_count));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_location_isSet) {
        obj.insert(QString("deviceLocation"), ::OpenAPI::toJsonValue(m_device_location));
    }
    if (m_device_software_version_isSet) {
        obj.insert(QString("deviceSoftwareVersion"), ::OpenAPI::toJsonValue(m_device_software_version));
    }
    if (m_device_status_isSet) {
        obj.insert(QString("deviceStatus"), ::OpenAPI::toJsonValue(m_device_status));
    }
    if (m_eligibility_result.isSet()) {
        obj.insert(QString("eligibilityResult"), ::OpenAPI::toJsonValue(m_eligibility_result));
    }
    if (m_friendly_device_software_version_isSet) {
        obj.insert(QString("friendlyDeviceSoftwareVersion"), ::OpenAPI::toJsonValue(m_friendly_device_software_version));
    }
    if (m_model_description_isSet) {
        obj.insert(QString("modelDescription"), ::OpenAPI::toJsonValue(m_model_description));
    }
    if (m_volumes_count_isSet) {
        obj.insert(QString("volumesCount"), ::OpenAPI::toJsonValue(m_volumes_count));
    }
    return obj;
}

qint64 OAIFailoverTarget::getAvailableLocalStorageInBytes() const {
    return m_available_local_storage_in_bytes;
}
void OAIFailoverTarget::setAvailableLocalStorageInBytes(const qint64 &available_local_storage_in_bytes) {
    m_available_local_storage_in_bytes = available_local_storage_in_bytes;
    m_available_local_storage_in_bytes_isSet = true;
}

bool OAIFailoverTarget::is_available_local_storage_in_bytes_Set() const{
    return m_available_local_storage_in_bytes_isSet;
}

bool OAIFailoverTarget::is_available_local_storage_in_bytes_Valid() const{
    return m_available_local_storage_in_bytes_isValid;
}

qint64 OAIFailoverTarget::getAvailableTieredStorageInBytes() const {
    return m_available_tiered_storage_in_bytes;
}
void OAIFailoverTarget::setAvailableTieredStorageInBytes(const qint64 &available_tiered_storage_in_bytes) {
    m_available_tiered_storage_in_bytes = available_tiered_storage_in_bytes;
    m_available_tiered_storage_in_bytes_isSet = true;
}

bool OAIFailoverTarget::is_available_tiered_storage_in_bytes_Set() const{
    return m_available_tiered_storage_in_bytes_isSet;
}

bool OAIFailoverTarget::is_available_tiered_storage_in_bytes_Valid() const{
    return m_available_tiered_storage_in_bytes_isValid;
}

qint32 OAIFailoverTarget::getDataContainersCount() const {
    return m_data_containers_count;
}
void OAIFailoverTarget::setDataContainersCount(const qint32 &data_containers_count) {
    m_data_containers_count = data_containers_count;
    m_data_containers_count_isSet = true;
}

bool OAIFailoverTarget::is_data_containers_count_Set() const{
    return m_data_containers_count_isSet;
}

bool OAIFailoverTarget::is_data_containers_count_Valid() const{
    return m_data_containers_count_isValid;
}

QString OAIFailoverTarget::getDeviceId() const {
    return m_device_id;
}
void OAIFailoverTarget::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIFailoverTarget::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIFailoverTarget::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIFailoverTarget::getDeviceLocation() const {
    return m_device_location;
}
void OAIFailoverTarget::setDeviceLocation(const QString &device_location) {
    m_device_location = device_location;
    m_device_location_isSet = true;
}

bool OAIFailoverTarget::is_device_location_Set() const{
    return m_device_location_isSet;
}

bool OAIFailoverTarget::is_device_location_Valid() const{
    return m_device_location_isValid;
}

QString OAIFailoverTarget::getDeviceSoftwareVersion() const {
    return m_device_software_version;
}
void OAIFailoverTarget::setDeviceSoftwareVersion(const QString &device_software_version) {
    m_device_software_version = device_software_version;
    m_device_software_version_isSet = true;
}

bool OAIFailoverTarget::is_device_software_version_Set() const{
    return m_device_software_version_isSet;
}

bool OAIFailoverTarget::is_device_software_version_Valid() const{
    return m_device_software_version_isValid;
}

QString OAIFailoverTarget::getDeviceStatus() const {
    return m_device_status;
}
void OAIFailoverTarget::setDeviceStatus(const QString &device_status) {
    m_device_status = device_status;
    m_device_status_isSet = true;
}

bool OAIFailoverTarget::is_device_status_Set() const{
    return m_device_status_isSet;
}

bool OAIFailoverTarget::is_device_status_Valid() const{
    return m_device_status_isValid;
}

OAITargetEligibilityResult OAIFailoverTarget::getEligibilityResult() const {
    return m_eligibility_result;
}
void OAIFailoverTarget::setEligibilityResult(const OAITargetEligibilityResult &eligibility_result) {
    m_eligibility_result = eligibility_result;
    m_eligibility_result_isSet = true;
}

bool OAIFailoverTarget::is_eligibility_result_Set() const{
    return m_eligibility_result_isSet;
}

bool OAIFailoverTarget::is_eligibility_result_Valid() const{
    return m_eligibility_result_isValid;
}

QString OAIFailoverTarget::getFriendlyDeviceSoftwareVersion() const {
    return m_friendly_device_software_version;
}
void OAIFailoverTarget::setFriendlyDeviceSoftwareVersion(const QString &friendly_device_software_version) {
    m_friendly_device_software_version = friendly_device_software_version;
    m_friendly_device_software_version_isSet = true;
}

bool OAIFailoverTarget::is_friendly_device_software_version_Set() const{
    return m_friendly_device_software_version_isSet;
}

bool OAIFailoverTarget::is_friendly_device_software_version_Valid() const{
    return m_friendly_device_software_version_isValid;
}

QString OAIFailoverTarget::getModelDescription() const {
    return m_model_description;
}
void OAIFailoverTarget::setModelDescription(const QString &model_description) {
    m_model_description = model_description;
    m_model_description_isSet = true;
}

bool OAIFailoverTarget::is_model_description_Set() const{
    return m_model_description_isSet;
}

bool OAIFailoverTarget::is_model_description_Valid() const{
    return m_model_description_isValid;
}

qint32 OAIFailoverTarget::getVolumesCount() const {
    return m_volumes_count;
}
void OAIFailoverTarget::setVolumesCount(const qint32 &volumes_count) {
    m_volumes_count = volumes_count;
    m_volumes_count_isSet = true;
}

bool OAIFailoverTarget::is_volumes_count_Set() const{
    return m_volumes_count_isSet;
}

bool OAIFailoverTarget::is_volumes_count_Valid() const{
    return m_volumes_count_isValid;
}

bool OAIFailoverTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_local_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_tiered_storage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_containers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eligibility_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_device_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
