/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeFailoverMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeFailoverMetadata::OAIVolumeFailoverMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeFailoverMetadata::OAIVolumeFailoverMetadata() {
    this->initializeModel();
}

OAIVolumeFailoverMetadata::~OAIVolumeFailoverMetadata() {}

void OAIVolumeFailoverMetadata::initializeModel() {

    m_backup_created_date_isSet = false;
    m_backup_created_date_isValid = false;

    m_backup_element_id_isSet = false;
    m_backup_element_id_isValid = false;

    m_backup_id_isSet = false;
    m_backup_id_isValid = false;

    m_backup_policy_id_isSet = false;
    m_backup_policy_id_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;
}

void OAIVolumeFailoverMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeFailoverMetadata::fromJsonObject(QJsonObject json) {

    m_backup_created_date_isValid = ::OpenAPI::fromJsonValue(m_backup_created_date, json[QString("backupCreatedDate")]);
    m_backup_created_date_isSet = !json[QString("backupCreatedDate")].isNull() && m_backup_created_date_isValid;

    m_backup_element_id_isValid = ::OpenAPI::fromJsonValue(m_backup_element_id, json[QString("backupElementId")]);
    m_backup_element_id_isSet = !json[QString("backupElementId")].isNull() && m_backup_element_id_isValid;

    m_backup_id_isValid = ::OpenAPI::fromJsonValue(m_backup_id, json[QString("backupId")]);
    m_backup_id_isSet = !json[QString("backupId")].isNull() && m_backup_id_isValid;

    m_backup_policy_id_isValid = ::OpenAPI::fromJsonValue(m_backup_policy_id, json[QString("backupPolicyId")]);
    m_backup_policy_id_isSet = !json[QString("backupPolicyId")].isNull() && m_backup_policy_id_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("volumeType")]);
    m_volume_type_isSet = !json[QString("volumeType")].isNull() && m_volume_type_isValid;
}

QString OAIVolumeFailoverMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeFailoverMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_created_date_isSet) {
        obj.insert(QString("backupCreatedDate"), ::OpenAPI::toJsonValue(m_backup_created_date));
    }
    if (m_backup_element_id_isSet) {
        obj.insert(QString("backupElementId"), ::OpenAPI::toJsonValue(m_backup_element_id));
    }
    if (m_backup_id_isSet) {
        obj.insert(QString("backupId"), ::OpenAPI::toJsonValue(m_backup_id));
    }
    if (m_backup_policy_id_isSet) {
        obj.insert(QString("backupPolicyId"), ::OpenAPI::toJsonValue(m_backup_policy_id));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    if (m_volume_type_isSet) {
        obj.insert(QString("volumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    return obj;
}

QDateTime OAIVolumeFailoverMetadata::getBackupCreatedDate() const {
    return m_backup_created_date;
}
void OAIVolumeFailoverMetadata::setBackupCreatedDate(const QDateTime &backup_created_date) {
    m_backup_created_date = backup_created_date;
    m_backup_created_date_isSet = true;
}

bool OAIVolumeFailoverMetadata::is_backup_created_date_Set() const{
    return m_backup_created_date_isSet;
}

bool OAIVolumeFailoverMetadata::is_backup_created_date_Valid() const{
    return m_backup_created_date_isValid;
}

QString OAIVolumeFailoverMetadata::getBackupElementId() const {
    return m_backup_element_id;
}
void OAIVolumeFailoverMetadata::setBackupElementId(const QString &backup_element_id) {
    m_backup_element_id = backup_element_id;
    m_backup_element_id_isSet = true;
}

bool OAIVolumeFailoverMetadata::is_backup_element_id_Set() const{
    return m_backup_element_id_isSet;
}

bool OAIVolumeFailoverMetadata::is_backup_element_id_Valid() const{
    return m_backup_element_id_isValid;
}

QString OAIVolumeFailoverMetadata::getBackupId() const {
    return m_backup_id;
}
void OAIVolumeFailoverMetadata::setBackupId(const QString &backup_id) {
    m_backup_id = backup_id;
    m_backup_id_isSet = true;
}

bool OAIVolumeFailoverMetadata::is_backup_id_Set() const{
    return m_backup_id_isSet;
}

bool OAIVolumeFailoverMetadata::is_backup_id_Valid() const{
    return m_backup_id_isValid;
}

QString OAIVolumeFailoverMetadata::getBackupPolicyId() const {
    return m_backup_policy_id;
}
void OAIVolumeFailoverMetadata::setBackupPolicyId(const QString &backup_policy_id) {
    m_backup_policy_id = backup_policy_id;
    m_backup_policy_id_isSet = true;
}

bool OAIVolumeFailoverMetadata::is_backup_policy_id_Set() const{
    return m_backup_policy_id_isSet;
}

bool OAIVolumeFailoverMetadata::is_backup_policy_id_Valid() const{
    return m_backup_policy_id_isValid;
}

qint64 OAIVolumeFailoverMetadata::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIVolumeFailoverMetadata::setSizeInBytes(const qint64 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIVolumeFailoverMetadata::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIVolumeFailoverMetadata::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

QString OAIVolumeFailoverMetadata::getVolumeId() const {
    return m_volume_id;
}
void OAIVolumeFailoverMetadata::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIVolumeFailoverMetadata::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIVolumeFailoverMetadata::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

QString OAIVolumeFailoverMetadata::getVolumeType() const {
    return m_volume_type;
}
void OAIVolumeFailoverMetadata::setVolumeType(const QString &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAIVolumeFailoverMetadata::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAIVolumeFailoverMetadata::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

bool OAIVolumeFailoverMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_element_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeFailoverMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
