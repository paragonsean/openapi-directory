/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupScheduleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupScheduleProperties::OAIBackupScheduleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupScheduleProperties::OAIBackupScheduleProperties() {
    this->initializeModel();
}

OAIBackupScheduleProperties::~OAIBackupScheduleProperties() {}

void OAIBackupScheduleProperties::initializeModel() {

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;

    m_last_successful_run_isSet = false;
    m_last_successful_run_isValid = false;

    m_retention_count_isSet = false;
    m_retention_count_isValid = false;

    m_schedule_recurrence_isSet = false;
    m_schedule_recurrence_isValid = false;

    m_schedule_status_isSet = false;
    m_schedule_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIBackupScheduleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupScheduleProperties::fromJsonObject(QJsonObject json) {

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("backupType")]);
    m_backup_type_isSet = !json[QString("backupType")].isNull() && m_backup_type_isValid;

    m_last_successful_run_isValid = ::OpenAPI::fromJsonValue(m_last_successful_run, json[QString("lastSuccessfulRun")]);
    m_last_successful_run_isSet = !json[QString("lastSuccessfulRun")].isNull() && m_last_successful_run_isValid;

    m_retention_count_isValid = ::OpenAPI::fromJsonValue(m_retention_count, json[QString("retentionCount")]);
    m_retention_count_isSet = !json[QString("retentionCount")].isNull() && m_retention_count_isValid;

    m_schedule_recurrence_isValid = ::OpenAPI::fromJsonValue(m_schedule_recurrence, json[QString("scheduleRecurrence")]);
    m_schedule_recurrence_isSet = !json[QString("scheduleRecurrence")].isNull() && m_schedule_recurrence_isValid;

    m_schedule_status_isValid = ::OpenAPI::fromJsonValue(m_schedule_status, json[QString("scheduleStatus")]);
    m_schedule_status_isSet = !json[QString("scheduleStatus")].isNull() && m_schedule_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIBackupScheduleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupScheduleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_type_isSet) {
        obj.insert(QString("backupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    if (m_last_successful_run_isSet) {
        obj.insert(QString("lastSuccessfulRun"), ::OpenAPI::toJsonValue(m_last_successful_run));
    }
    if (m_retention_count_isSet) {
        obj.insert(QString("retentionCount"), ::OpenAPI::toJsonValue(m_retention_count));
    }
    if (m_schedule_recurrence.isSet()) {
        obj.insert(QString("scheduleRecurrence"), ::OpenAPI::toJsonValue(m_schedule_recurrence));
    }
    if (m_schedule_status_isSet) {
        obj.insert(QString("scheduleStatus"), ::OpenAPI::toJsonValue(m_schedule_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIBackupScheduleProperties::getBackupType() const {
    return m_backup_type;
}
void OAIBackupScheduleProperties::setBackupType(const QString &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIBackupScheduleProperties::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIBackupScheduleProperties::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

QDateTime OAIBackupScheduleProperties::getLastSuccessfulRun() const {
    return m_last_successful_run;
}
void OAIBackupScheduleProperties::setLastSuccessfulRun(const QDateTime &last_successful_run) {
    m_last_successful_run = last_successful_run;
    m_last_successful_run_isSet = true;
}

bool OAIBackupScheduleProperties::is_last_successful_run_Set() const{
    return m_last_successful_run_isSet;
}

bool OAIBackupScheduleProperties::is_last_successful_run_Valid() const{
    return m_last_successful_run_isValid;
}

qint64 OAIBackupScheduleProperties::getRetentionCount() const {
    return m_retention_count;
}
void OAIBackupScheduleProperties::setRetentionCount(const qint64 &retention_count) {
    m_retention_count = retention_count;
    m_retention_count_isSet = true;
}

bool OAIBackupScheduleProperties::is_retention_count_Set() const{
    return m_retention_count_isSet;
}

bool OAIBackupScheduleProperties::is_retention_count_Valid() const{
    return m_retention_count_isValid;
}

OAIScheduleRecurrence OAIBackupScheduleProperties::getScheduleRecurrence() const {
    return m_schedule_recurrence;
}
void OAIBackupScheduleProperties::setScheduleRecurrence(const OAIScheduleRecurrence &schedule_recurrence) {
    m_schedule_recurrence = schedule_recurrence;
    m_schedule_recurrence_isSet = true;
}

bool OAIBackupScheduleProperties::is_schedule_recurrence_Set() const{
    return m_schedule_recurrence_isSet;
}

bool OAIBackupScheduleProperties::is_schedule_recurrence_Valid() const{
    return m_schedule_recurrence_isValid;
}

QString OAIBackupScheduleProperties::getScheduleStatus() const {
    return m_schedule_status;
}
void OAIBackupScheduleProperties::setScheduleStatus(const QString &schedule_status) {
    m_schedule_status = schedule_status;
    m_schedule_status_isSet = true;
}

bool OAIBackupScheduleProperties::is_schedule_status_Set() const{
    return m_schedule_status_isSet;
}

bool OAIBackupScheduleProperties::is_schedule_status_Valid() const{
    return m_schedule_status_isValid;
}

QDateTime OAIBackupScheduleProperties::getStartTime() const {
    return m_start_time;
}
void OAIBackupScheduleProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBackupScheduleProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBackupScheduleProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIBackupScheduleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupScheduleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_type_isValid && m_retention_count_isValid && m_schedule_recurrence_isValid && m_schedule_status_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
