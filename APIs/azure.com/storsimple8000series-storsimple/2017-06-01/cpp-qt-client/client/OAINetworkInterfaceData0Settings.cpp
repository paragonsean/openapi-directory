/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInterfaceData0Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInterfaceData0Settings::OAINetworkInterfaceData0Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInterfaceData0Settings::OAINetworkInterfaceData0Settings() {
    this->initializeModel();
}

OAINetworkInterfaceData0Settings::~OAINetworkInterfaceData0Settings() {}

void OAINetworkInterfaceData0Settings::initializeModel() {

    m_controller_one_ip_isSet = false;
    m_controller_one_ip_isValid = false;

    m_controller_zero_ip_isSet = false;
    m_controller_zero_ip_isValid = false;
}

void OAINetworkInterfaceData0Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInterfaceData0Settings::fromJsonObject(QJsonObject json) {

    m_controller_one_ip_isValid = ::OpenAPI::fromJsonValue(m_controller_one_ip, json[QString("controllerOneIp")]);
    m_controller_one_ip_isSet = !json[QString("controllerOneIp")].isNull() && m_controller_one_ip_isValid;

    m_controller_zero_ip_isValid = ::OpenAPI::fromJsonValue(m_controller_zero_ip, json[QString("controllerZeroIp")]);
    m_controller_zero_ip_isSet = !json[QString("controllerZeroIp")].isNull() && m_controller_zero_ip_isValid;
}

QString OAINetworkInterfaceData0Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInterfaceData0Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_controller_one_ip_isSet) {
        obj.insert(QString("controllerOneIp"), ::OpenAPI::toJsonValue(m_controller_one_ip));
    }
    if (m_controller_zero_ip_isSet) {
        obj.insert(QString("controllerZeroIp"), ::OpenAPI::toJsonValue(m_controller_zero_ip));
    }
    return obj;
}

QString OAINetworkInterfaceData0Settings::getControllerOneIp() const {
    return m_controller_one_ip;
}
void OAINetworkInterfaceData0Settings::setControllerOneIp(const QString &controller_one_ip) {
    m_controller_one_ip = controller_one_ip;
    m_controller_one_ip_isSet = true;
}

bool OAINetworkInterfaceData0Settings::is_controller_one_ip_Set() const{
    return m_controller_one_ip_isSet;
}

bool OAINetworkInterfaceData0Settings::is_controller_one_ip_Valid() const{
    return m_controller_one_ip_isValid;
}

QString OAINetworkInterfaceData0Settings::getControllerZeroIp() const {
    return m_controller_zero_ip;
}
void OAINetworkInterfaceData0Settings::setControllerZeroIp(const QString &controller_zero_ip) {
    m_controller_zero_ip = controller_zero_ip;
    m_controller_zero_ip_isSet = true;
}

bool OAINetworkInterfaceData0Settings::is_controller_zero_ip_Set() const{
    return m_controller_zero_ip_isSet;
}

bool OAINetworkInterfaceData0Settings::is_controller_zero_ip_Valid() const{
    return m_controller_zero_ip_isValid;
}

bool OAINetworkInterfaceData0Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controller_one_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller_zero_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInterfaceData0Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
