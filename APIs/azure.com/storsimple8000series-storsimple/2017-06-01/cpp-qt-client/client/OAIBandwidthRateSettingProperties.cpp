/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBandwidthRateSettingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBandwidthRateSettingProperties::OAIBandwidthRateSettingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBandwidthRateSettingProperties::OAIBandwidthRateSettingProperties() {
    this->initializeModel();
}

OAIBandwidthRateSettingProperties::~OAIBandwidthRateSettingProperties() {}

void OAIBandwidthRateSettingProperties::initializeModel() {

    m_schedules_isSet = false;
    m_schedules_isValid = false;

    m_volume_count_isSet = false;
    m_volume_count_isValid = false;
}

void OAIBandwidthRateSettingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBandwidthRateSettingProperties::fromJsonObject(QJsonObject json) {

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("schedules")]);
    m_schedules_isSet = !json[QString("schedules")].isNull() && m_schedules_isValid;

    m_volume_count_isValid = ::OpenAPI::fromJsonValue(m_volume_count, json[QString("volumeCount")]);
    m_volume_count_isSet = !json[QString("volumeCount")].isNull() && m_volume_count_isValid;
}

QString OAIBandwidthRateSettingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBandwidthRateSettingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_schedules.size() > 0) {
        obj.insert(QString("schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    if (m_volume_count_isSet) {
        obj.insert(QString("volumeCount"), ::OpenAPI::toJsonValue(m_volume_count));
    }
    return obj;
}

QList<OAIBandwidthSchedule> OAIBandwidthRateSettingProperties::getSchedules() const {
    return m_schedules;
}
void OAIBandwidthRateSettingProperties::setSchedules(const QList<OAIBandwidthSchedule> &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAIBandwidthRateSettingProperties::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAIBandwidthRateSettingProperties::is_schedules_Valid() const{
    return m_schedules_isValid;
}

qint32 OAIBandwidthRateSettingProperties::getVolumeCount() const {
    return m_volume_count;
}
void OAIBandwidthRateSettingProperties::setVolumeCount(const qint32 &volume_count) {
    m_volume_count = volume_count;
    m_volume_count_isSet = true;
}

bool OAIBandwidthRateSettingProperties::is_volume_count_Set() const{
    return m_volume_count_isSet;
}

bool OAIBandwidthRateSettingProperties::is_volume_count_Valid() const{
    return m_volume_count_isValid;
}

bool OAIBandwidthRateSettingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBandwidthRateSettingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedules_isValid && true;
}

} // namespace OpenAPI
