/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricData.h
 *
 * The metric data.
 */

#ifndef OAIMetricData_H
#define OAIMetricData_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMetricData : public OAIObject {
public:
    OAIMetricData();
    OAIMetricData(QString json);
    ~OAIMetricData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAverage() const;
    void setAverage(const double &average);
    bool is_average_Set() const;
    bool is_average_Valid() const;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    double getMaximum() const;
    void setMaximum(const double &maximum);
    bool is_maximum_Set() const;
    bool is_maximum_Valid() const;

    double getMinimum() const;
    void setMinimum(const double &minimum);
    bool is_minimum_Set() const;
    bool is_minimum_Valid() const;

    double getSum() const;
    void setSum(const double &sum);
    bool is_sum_Set() const;
    bool is_sum_Valid() const;

    QDateTime getTimeStamp() const;
    void setTimeStamp(const QDateTime &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_average;
    bool m_average_isSet;
    bool m_average_isValid;

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    double m_maximum;
    bool m_maximum_isSet;
    bool m_maximum_isValid;

    double m_minimum;
    bool m_minimum_isSet;
    bool m_minimum_isValid;

    double m_sum;
    bool m_sum_isSet;
    bool m_sum_isValid;

    QDateTime m_time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricData)

#endif // OAIMetricData_H
