/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverRequest::OAIFailoverRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverRequest::OAIFailoverRequest() {
    this->initializeModel();
}

OAIFailoverRequest::~OAIFailoverRequest() {}

void OAIFailoverRequest::initializeModel() {

    m_target_device_id_isSet = false;
    m_target_device_id_isValid = false;

    m_volume_containers_isSet = false;
    m_volume_containers_isValid = false;
}

void OAIFailoverRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverRequest::fromJsonObject(QJsonObject json) {

    m_target_device_id_isValid = ::OpenAPI::fromJsonValue(m_target_device_id, json[QString("targetDeviceId")]);
    m_target_device_id_isSet = !json[QString("targetDeviceId")].isNull() && m_target_device_id_isValid;

    m_volume_containers_isValid = ::OpenAPI::fromJsonValue(m_volume_containers, json[QString("volumeContainers")]);
    m_volume_containers_isSet = !json[QString("volumeContainers")].isNull() && m_volume_containers_isValid;
}

QString OAIFailoverRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_target_device_id_isSet) {
        obj.insert(QString("targetDeviceId"), ::OpenAPI::toJsonValue(m_target_device_id));
    }
    if (m_volume_containers.size() > 0) {
        obj.insert(QString("volumeContainers"), ::OpenAPI::toJsonValue(m_volume_containers));
    }
    return obj;
}

QString OAIFailoverRequest::getTargetDeviceId() const {
    return m_target_device_id;
}
void OAIFailoverRequest::setTargetDeviceId(const QString &target_device_id) {
    m_target_device_id = target_device_id;
    m_target_device_id_isSet = true;
}

bool OAIFailoverRequest::is_target_device_id_Set() const{
    return m_target_device_id_isSet;
}

bool OAIFailoverRequest::is_target_device_id_Valid() const{
    return m_target_device_id_isValid;
}

QList<QString> OAIFailoverRequest::getVolumeContainers() const {
    return m_volume_containers;
}
void OAIFailoverRequest::setVolumeContainers(const QList<QString> &volume_containers) {
    m_volume_containers = volume_containers;
    m_volume_containers_isSet = true;
}

bool OAIFailoverRequest::is_volume_containers_Set() const{
    return m_volume_containers_isSet;
}

bool OAIFailoverRequest::is_volume_containers_Valid() const{
    return m_volume_containers_isValid;
}

bool OAIFailoverRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
