/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricData::OAIMetricData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricData::OAIMetricData() {
    this->initializeModel();
}

OAIMetricData::~OAIMetricData() {}

void OAIMetricData::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAIMetricData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricData::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAIMetricData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricData::asJsonObject() const {
    QJsonObject obj;
    if (m_average_isSet) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

double OAIMetricData::getAverage() const {
    return m_average;
}
void OAIMetricData::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIMetricData::is_average_Set() const{
    return m_average_isSet;
}

bool OAIMetricData::is_average_Valid() const{
    return m_average_isValid;
}

qint32 OAIMetricData::getCount() const {
    return m_count;
}
void OAIMetricData::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIMetricData::is_count_Set() const{
    return m_count_isSet;
}

bool OAIMetricData::is_count_Valid() const{
    return m_count_isValid;
}

double OAIMetricData::getMaximum() const {
    return m_maximum;
}
void OAIMetricData::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIMetricData::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIMetricData::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIMetricData::getMinimum() const {
    return m_minimum;
}
void OAIMetricData::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIMetricData::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIMetricData::is_minimum_Valid() const{
    return m_minimum_isValid;
}

double OAIMetricData::getSum() const {
    return m_sum;
}
void OAIMetricData::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIMetricData::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIMetricData::is_sum_Valid() const{
    return m_sum_isValid;
}

QDateTime OAIMetricData::getTimeStamp() const {
    return m_time_stamp;
}
void OAIMetricData::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIMetricData::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIMetricData::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIMetricData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
