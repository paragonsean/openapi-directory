/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackupScheduleProperties.h
 *
 * The properties of the backup schedule.
 */

#ifndef OAIBackupScheduleProperties_H
#define OAIBackupScheduleProperties_H

#include <QJsonObject>

#include "OAIScheduleRecurrence.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScheduleRecurrence;

class OAIBackupScheduleProperties : public OAIObject {
public:
    OAIBackupScheduleProperties();
    OAIBackupScheduleProperties(QString json);
    ~OAIBackupScheduleProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBackupType() const;
    void setBackupType(const QString &backup_type);
    bool is_backup_type_Set() const;
    bool is_backup_type_Valid() const;

    QDateTime getLastSuccessfulRun() const;
    void setLastSuccessfulRun(const QDateTime &last_successful_run);
    bool is_last_successful_run_Set() const;
    bool is_last_successful_run_Valid() const;

    qint64 getRetentionCount() const;
    void setRetentionCount(const qint64 &retention_count);
    bool is_retention_count_Set() const;
    bool is_retention_count_Valid() const;

    OAIScheduleRecurrence getScheduleRecurrence() const;
    void setScheduleRecurrence(const OAIScheduleRecurrence &schedule_recurrence);
    bool is_schedule_recurrence_Set() const;
    bool is_schedule_recurrence_Valid() const;

    QString getScheduleStatus() const;
    void setScheduleStatus(const QString &schedule_status);
    bool is_schedule_status_Set() const;
    bool is_schedule_status_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_backup_type;
    bool m_backup_type_isSet;
    bool m_backup_type_isValid;

    QDateTime m_last_successful_run;
    bool m_last_successful_run_isSet;
    bool m_last_successful_run_isValid;

    qint64 m_retention_count;
    bool m_retention_count_isSet;
    bool m_retention_count_isValid;

    OAIScheduleRecurrence m_schedule_recurrence;
    bool m_schedule_recurrence_isSet;
    bool m_schedule_recurrence_isValid;

    QString m_schedule_status;
    bool m_schedule_status_isSet;
    bool m_schedule_status_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackupScheduleProperties)

#endif // OAIBackupScheduleProperties_H
