/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceDetails::OAIDeviceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceDetails::OAIDeviceDetails() {
    this->initializeModel();
}

OAIDeviceDetails::~OAIDeviceDetails() {}

void OAIDeviceDetails::initializeModel() {

    m_endpoint_count_isSet = false;
    m_endpoint_count_isValid = false;

    m_volume_container_count_isSet = false;
    m_volume_container_count_isValid = false;
}

void OAIDeviceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceDetails::fromJsonObject(QJsonObject json) {

    m_endpoint_count_isValid = ::OpenAPI::fromJsonValue(m_endpoint_count, json[QString("endpointCount")]);
    m_endpoint_count_isSet = !json[QString("endpointCount")].isNull() && m_endpoint_count_isValid;

    m_volume_container_count_isValid = ::OpenAPI::fromJsonValue(m_volume_container_count, json[QString("volumeContainerCount")]);
    m_volume_container_count_isSet = !json[QString("volumeContainerCount")].isNull() && m_volume_container_count_isValid;
}

QString OAIDeviceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_count_isSet) {
        obj.insert(QString("endpointCount"), ::OpenAPI::toJsonValue(m_endpoint_count));
    }
    if (m_volume_container_count_isSet) {
        obj.insert(QString("volumeContainerCount"), ::OpenAPI::toJsonValue(m_volume_container_count));
    }
    return obj;
}

qint32 OAIDeviceDetails::getEndpointCount() const {
    return m_endpoint_count;
}
void OAIDeviceDetails::setEndpointCount(const qint32 &endpoint_count) {
    m_endpoint_count = endpoint_count;
    m_endpoint_count_isSet = true;
}

bool OAIDeviceDetails::is_endpoint_count_Set() const{
    return m_endpoint_count_isSet;
}

bool OAIDeviceDetails::is_endpoint_count_Valid() const{
    return m_endpoint_count_isValid;
}

qint32 OAIDeviceDetails::getVolumeContainerCount() const {
    return m_volume_container_count;
}
void OAIDeviceDetails::setVolumeContainerCount(const qint32 &volume_container_count) {
    m_volume_container_count = volume_container_count;
    m_volume_container_count_isSet = true;
}

bool OAIDeviceDetails::is_volume_container_count_Set() const{
    return m_volume_container_count_isSet;
}

bool OAIDeviceDetails::is_volume_container_count_Valid() const{
    return m_volume_container_count_isValid;
}

bool OAIDeviceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_container_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
