/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupProperties::OAIBackupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupProperties::OAIBackupProperties() {
    this->initializeModel();
}

OAIBackupProperties::~OAIBackupProperties() {}

void OAIBackupProperties::initializeModel() {

    m_backup_job_creation_type_isSet = false;
    m_backup_job_creation_type_isValid = false;

    m_backup_policy_id_isSet = false;
    m_backup_policy_id_isValid = false;

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_ssm_host_name_isSet = false;
    m_ssm_host_name_isValid = false;
}

void OAIBackupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupProperties::fromJsonObject(QJsonObject json) {

    m_backup_job_creation_type_isValid = ::OpenAPI::fromJsonValue(m_backup_job_creation_type, json[QString("backupJobCreationType")]);
    m_backup_job_creation_type_isSet = !json[QString("backupJobCreationType")].isNull() && m_backup_job_creation_type_isValid;

    m_backup_policy_id_isValid = ::OpenAPI::fromJsonValue(m_backup_policy_id, json[QString("backupPolicyId")]);
    m_backup_policy_id_isSet = !json[QString("backupPolicyId")].isNull() && m_backup_policy_id_isValid;

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("backupType")]);
    m_backup_type_isSet = !json[QString("backupType")].isNull() && m_backup_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_ssm_host_name_isValid = ::OpenAPI::fromJsonValue(m_ssm_host_name, json[QString("ssmHostName")]);
    m_ssm_host_name_isSet = !json[QString("ssmHostName")].isNull() && m_ssm_host_name_isValid;
}

QString OAIBackupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_job_creation_type_isSet) {
        obj.insert(QString("backupJobCreationType"), ::OpenAPI::toJsonValue(m_backup_job_creation_type));
    }
    if (m_backup_policy_id_isSet) {
        obj.insert(QString("backupPolicyId"), ::OpenAPI::toJsonValue(m_backup_policy_id));
    }
    if (m_backup_type_isSet) {
        obj.insert(QString("backupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_ssm_host_name_isSet) {
        obj.insert(QString("ssmHostName"), ::OpenAPI::toJsonValue(m_ssm_host_name));
    }
    return obj;
}

QString OAIBackupProperties::getBackupJobCreationType() const {
    return m_backup_job_creation_type;
}
void OAIBackupProperties::setBackupJobCreationType(const QString &backup_job_creation_type) {
    m_backup_job_creation_type = backup_job_creation_type;
    m_backup_job_creation_type_isSet = true;
}

bool OAIBackupProperties::is_backup_job_creation_type_Set() const{
    return m_backup_job_creation_type_isSet;
}

bool OAIBackupProperties::is_backup_job_creation_type_Valid() const{
    return m_backup_job_creation_type_isValid;
}

QString OAIBackupProperties::getBackupPolicyId() const {
    return m_backup_policy_id;
}
void OAIBackupProperties::setBackupPolicyId(const QString &backup_policy_id) {
    m_backup_policy_id = backup_policy_id;
    m_backup_policy_id_isSet = true;
}

bool OAIBackupProperties::is_backup_policy_id_Set() const{
    return m_backup_policy_id_isSet;
}

bool OAIBackupProperties::is_backup_policy_id_Valid() const{
    return m_backup_policy_id_isValid;
}

QString OAIBackupProperties::getBackupType() const {
    return m_backup_type;
}
void OAIBackupProperties::setBackupType(const QString &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIBackupProperties::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIBackupProperties::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

QDateTime OAIBackupProperties::getCreatedOn() const {
    return m_created_on;
}
void OAIBackupProperties::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIBackupProperties::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIBackupProperties::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QList<OAIBackupElement> OAIBackupProperties::getElements() const {
    return m_elements;
}
void OAIBackupProperties::setElements(const QList<OAIBackupElement> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIBackupProperties::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIBackupProperties::is_elements_Valid() const{
    return m_elements_isValid;
}

qint64 OAIBackupProperties::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIBackupProperties::setSizeInBytes(const qint64 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIBackupProperties::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIBackupProperties::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

QString OAIBackupProperties::getSsmHostName() const {
    return m_ssm_host_name;
}
void OAIBackupProperties::setSsmHostName(const QString &ssm_host_name) {
    m_ssm_host_name = ssm_host_name;
    m_ssm_host_name_isSet = true;
}

bool OAIBackupProperties::is_ssm_host_name_Set() const{
    return m_ssm_host_name_isSet;
}

bool OAIBackupProperties::is_ssm_host_name_Valid() const{
    return m_ssm_host_name_isValid;
}

bool OAIBackupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_job_creation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssm_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_on_isValid && m_elements_isValid && m_size_in_bytes_isValid && true;
}

} // namespace OpenAPI
