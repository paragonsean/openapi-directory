/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolumeProperties.h
 *
 * The properties of volume.
 */

#ifndef OAIVolumeProperties_H
#define OAIVolumeProperties_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVolumeProperties : public OAIObject {
public:
    OAIVolumeProperties();
    OAIVolumeProperties(QString json);
    ~OAIVolumeProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAccessControlRecordIds() const;
    void setAccessControlRecordIds(const QList<QString> &access_control_record_ids);
    bool is_access_control_record_ids_Set() const;
    bool is_access_control_record_ids_Valid() const;

    QList<QString> getBackupPolicyIds() const;
    void setBackupPolicyIds(const QList<QString> &backup_policy_ids);
    bool is_backup_policy_ids_Set() const;
    bool is_backup_policy_ids_Valid() const;

    QString getBackupStatus() const;
    void setBackupStatus(const QString &backup_status);
    bool is_backup_status_Set() const;
    bool is_backup_status_Valid() const;

    QString getMonitoringStatus() const;
    void setMonitoringStatus(const QString &monitoring_status);
    bool is_monitoring_status_Set() const;
    bool is_monitoring_status_Valid() const;

    QString getOperationStatus() const;
    void setOperationStatus(const QString &operation_status);
    bool is_operation_status_Set() const;
    bool is_operation_status_Valid() const;

    qint64 getSizeInBytes() const;
    void setSizeInBytes(const qint64 &size_in_bytes);
    bool is_size_in_bytes_Set() const;
    bool is_size_in_bytes_Valid() const;

    QString getVolumeContainerId() const;
    void setVolumeContainerId(const QString &volume_container_id);
    bool is_volume_container_id_Set() const;
    bool is_volume_container_id_Valid() const;

    QString getVolumeStatus() const;
    void setVolumeStatus(const QString &volume_status);
    bool is_volume_status_Set() const;
    bool is_volume_status_Valid() const;

    QString getVolumeType() const;
    void setVolumeType(const QString &volume_type);
    bool is_volume_type_Set() const;
    bool is_volume_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_access_control_record_ids;
    bool m_access_control_record_ids_isSet;
    bool m_access_control_record_ids_isValid;

    QList<QString> m_backup_policy_ids;
    bool m_backup_policy_ids_isSet;
    bool m_backup_policy_ids_isValid;

    QString m_backup_status;
    bool m_backup_status_isSet;
    bool m_backup_status_isValid;

    QString m_monitoring_status;
    bool m_monitoring_status_isSet;
    bool m_monitoring_status_isValid;

    QString m_operation_status;
    bool m_operation_status_isSet;
    bool m_operation_status_isValid;

    qint64 m_size_in_bytes;
    bool m_size_in_bytes_isSet;
    bool m_size_in_bytes_isValid;

    QString m_volume_container_id;
    bool m_volume_container_id_isSet;
    bool m_volume_container_id_isValid;

    QString m_volume_status;
    bool m_volume_status_isSet;
    bool m_volume_status_isValid;

    QString m_volume_type;
    bool m_volume_type_isSet;
    bool m_volume_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolumeProperties)

#endif // OAIVolumeProperties_H
