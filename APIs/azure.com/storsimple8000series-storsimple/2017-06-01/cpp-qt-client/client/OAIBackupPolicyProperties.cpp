/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupPolicyProperties::OAIBackupPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupPolicyProperties::OAIBackupPolicyProperties() {
    this->initializeModel();
}

OAIBackupPolicyProperties::~OAIBackupPolicyProperties() {}

void OAIBackupPolicyProperties::initializeModel() {

    m_backup_policy_creation_type_isSet = false;
    m_backup_policy_creation_type_isValid = false;

    m_last_backup_time_isSet = false;
    m_last_backup_time_isValid = false;

    m_next_backup_time_isSet = false;
    m_next_backup_time_isValid = false;

    m_scheduled_backup_status_isSet = false;
    m_scheduled_backup_status_isValid = false;

    m_schedules_count_isSet = false;
    m_schedules_count_isValid = false;

    m_ssm_host_name_isSet = false;
    m_ssm_host_name_isValid = false;

    m_volume_ids_isSet = false;
    m_volume_ids_isValid = false;
}

void OAIBackupPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupPolicyProperties::fromJsonObject(QJsonObject json) {

    m_backup_policy_creation_type_isValid = ::OpenAPI::fromJsonValue(m_backup_policy_creation_type, json[QString("backupPolicyCreationType")]);
    m_backup_policy_creation_type_isSet = !json[QString("backupPolicyCreationType")].isNull() && m_backup_policy_creation_type_isValid;

    m_last_backup_time_isValid = ::OpenAPI::fromJsonValue(m_last_backup_time, json[QString("lastBackupTime")]);
    m_last_backup_time_isSet = !json[QString("lastBackupTime")].isNull() && m_last_backup_time_isValid;

    m_next_backup_time_isValid = ::OpenAPI::fromJsonValue(m_next_backup_time, json[QString("nextBackupTime")]);
    m_next_backup_time_isSet = !json[QString("nextBackupTime")].isNull() && m_next_backup_time_isValid;

    m_scheduled_backup_status_isValid = ::OpenAPI::fromJsonValue(m_scheduled_backup_status, json[QString("scheduledBackupStatus")]);
    m_scheduled_backup_status_isSet = !json[QString("scheduledBackupStatus")].isNull() && m_scheduled_backup_status_isValid;

    m_schedules_count_isValid = ::OpenAPI::fromJsonValue(m_schedules_count, json[QString("schedulesCount")]);
    m_schedules_count_isSet = !json[QString("schedulesCount")].isNull() && m_schedules_count_isValid;

    m_ssm_host_name_isValid = ::OpenAPI::fromJsonValue(m_ssm_host_name, json[QString("ssmHostName")]);
    m_ssm_host_name_isSet = !json[QString("ssmHostName")].isNull() && m_ssm_host_name_isValid;

    m_volume_ids_isValid = ::OpenAPI::fromJsonValue(m_volume_ids, json[QString("volumeIds")]);
    m_volume_ids_isSet = !json[QString("volumeIds")].isNull() && m_volume_ids_isValid;
}

QString OAIBackupPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_policy_creation_type_isSet) {
        obj.insert(QString("backupPolicyCreationType"), ::OpenAPI::toJsonValue(m_backup_policy_creation_type));
    }
    if (m_last_backup_time_isSet) {
        obj.insert(QString("lastBackupTime"), ::OpenAPI::toJsonValue(m_last_backup_time));
    }
    if (m_next_backup_time_isSet) {
        obj.insert(QString("nextBackupTime"), ::OpenAPI::toJsonValue(m_next_backup_time));
    }
    if (m_scheduled_backup_status_isSet) {
        obj.insert(QString("scheduledBackupStatus"), ::OpenAPI::toJsonValue(m_scheduled_backup_status));
    }
    if (m_schedules_count_isSet) {
        obj.insert(QString("schedulesCount"), ::OpenAPI::toJsonValue(m_schedules_count));
    }
    if (m_ssm_host_name_isSet) {
        obj.insert(QString("ssmHostName"), ::OpenAPI::toJsonValue(m_ssm_host_name));
    }
    if (m_volume_ids.size() > 0) {
        obj.insert(QString("volumeIds"), ::OpenAPI::toJsonValue(m_volume_ids));
    }
    return obj;
}

QString OAIBackupPolicyProperties::getBackupPolicyCreationType() const {
    return m_backup_policy_creation_type;
}
void OAIBackupPolicyProperties::setBackupPolicyCreationType(const QString &backup_policy_creation_type) {
    m_backup_policy_creation_type = backup_policy_creation_type;
    m_backup_policy_creation_type_isSet = true;
}

bool OAIBackupPolicyProperties::is_backup_policy_creation_type_Set() const{
    return m_backup_policy_creation_type_isSet;
}

bool OAIBackupPolicyProperties::is_backup_policy_creation_type_Valid() const{
    return m_backup_policy_creation_type_isValid;
}

QDateTime OAIBackupPolicyProperties::getLastBackupTime() const {
    return m_last_backup_time;
}
void OAIBackupPolicyProperties::setLastBackupTime(const QDateTime &last_backup_time) {
    m_last_backup_time = last_backup_time;
    m_last_backup_time_isSet = true;
}

bool OAIBackupPolicyProperties::is_last_backup_time_Set() const{
    return m_last_backup_time_isSet;
}

bool OAIBackupPolicyProperties::is_last_backup_time_Valid() const{
    return m_last_backup_time_isValid;
}

QDateTime OAIBackupPolicyProperties::getNextBackupTime() const {
    return m_next_backup_time;
}
void OAIBackupPolicyProperties::setNextBackupTime(const QDateTime &next_backup_time) {
    m_next_backup_time = next_backup_time;
    m_next_backup_time_isSet = true;
}

bool OAIBackupPolicyProperties::is_next_backup_time_Set() const{
    return m_next_backup_time_isSet;
}

bool OAIBackupPolicyProperties::is_next_backup_time_Valid() const{
    return m_next_backup_time_isValid;
}

QString OAIBackupPolicyProperties::getScheduledBackupStatus() const {
    return m_scheduled_backup_status;
}
void OAIBackupPolicyProperties::setScheduledBackupStatus(const QString &scheduled_backup_status) {
    m_scheduled_backup_status = scheduled_backup_status;
    m_scheduled_backup_status_isSet = true;
}

bool OAIBackupPolicyProperties::is_scheduled_backup_status_Set() const{
    return m_scheduled_backup_status_isSet;
}

bool OAIBackupPolicyProperties::is_scheduled_backup_status_Valid() const{
    return m_scheduled_backup_status_isValid;
}

qint64 OAIBackupPolicyProperties::getSchedulesCount() const {
    return m_schedules_count;
}
void OAIBackupPolicyProperties::setSchedulesCount(const qint64 &schedules_count) {
    m_schedules_count = schedules_count;
    m_schedules_count_isSet = true;
}

bool OAIBackupPolicyProperties::is_schedules_count_Set() const{
    return m_schedules_count_isSet;
}

bool OAIBackupPolicyProperties::is_schedules_count_Valid() const{
    return m_schedules_count_isValid;
}

QString OAIBackupPolicyProperties::getSsmHostName() const {
    return m_ssm_host_name;
}
void OAIBackupPolicyProperties::setSsmHostName(const QString &ssm_host_name) {
    m_ssm_host_name = ssm_host_name;
    m_ssm_host_name_isSet = true;
}

bool OAIBackupPolicyProperties::is_ssm_host_name_Set() const{
    return m_ssm_host_name_isSet;
}

bool OAIBackupPolicyProperties::is_ssm_host_name_Valid() const{
    return m_ssm_host_name_isValid;
}

QList<QString> OAIBackupPolicyProperties::getVolumeIds() const {
    return m_volume_ids;
}
void OAIBackupPolicyProperties::setVolumeIds(const QList<QString> &volume_ids) {
    m_volume_ids = volume_ids;
    m_volume_ids_isSet = true;
}

bool OAIBackupPolicyProperties::is_volume_ids_Set() const{
    return m_volume_ids_isSet;
}

bool OAIBackupPolicyProperties::is_volume_ids_Valid() const{
    return m_volume_ids_isValid;
}

bool OAIBackupPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_policy_creation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_backup_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_backup_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_backup_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssm_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_volume_ids_isValid && true;
}

} // namespace OpenAPI
