/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloneRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloneRequest::OAICloneRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloneRequest::OAICloneRequest() {
    this->initializeModel();
}

OAICloneRequest::~OAICloneRequest() {}

void OAICloneRequest::initializeModel() {

    m_backup_element_isSet = false;
    m_backup_element_isValid = false;

    m_target_access_control_record_ids_isSet = false;
    m_target_access_control_record_ids_isValid = false;

    m_target_device_id_isSet = false;
    m_target_device_id_isValid = false;

    m_target_volume_name_isSet = false;
    m_target_volume_name_isValid = false;
}

void OAICloneRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloneRequest::fromJsonObject(QJsonObject json) {

    m_backup_element_isValid = ::OpenAPI::fromJsonValue(m_backup_element, json[QString("backupElement")]);
    m_backup_element_isSet = !json[QString("backupElement")].isNull() && m_backup_element_isValid;

    m_target_access_control_record_ids_isValid = ::OpenAPI::fromJsonValue(m_target_access_control_record_ids, json[QString("targetAccessControlRecordIds")]);
    m_target_access_control_record_ids_isSet = !json[QString("targetAccessControlRecordIds")].isNull() && m_target_access_control_record_ids_isValid;

    m_target_device_id_isValid = ::OpenAPI::fromJsonValue(m_target_device_id, json[QString("targetDeviceId")]);
    m_target_device_id_isSet = !json[QString("targetDeviceId")].isNull() && m_target_device_id_isValid;

    m_target_volume_name_isValid = ::OpenAPI::fromJsonValue(m_target_volume_name, json[QString("targetVolumeName")]);
    m_target_volume_name_isSet = !json[QString("targetVolumeName")].isNull() && m_target_volume_name_isValid;
}

QString OAICloneRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloneRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_element.isSet()) {
        obj.insert(QString("backupElement"), ::OpenAPI::toJsonValue(m_backup_element));
    }
    if (m_target_access_control_record_ids.size() > 0) {
        obj.insert(QString("targetAccessControlRecordIds"), ::OpenAPI::toJsonValue(m_target_access_control_record_ids));
    }
    if (m_target_device_id_isSet) {
        obj.insert(QString("targetDeviceId"), ::OpenAPI::toJsonValue(m_target_device_id));
    }
    if (m_target_volume_name_isSet) {
        obj.insert(QString("targetVolumeName"), ::OpenAPI::toJsonValue(m_target_volume_name));
    }
    return obj;
}

OAIBackupElement OAICloneRequest::getBackupElement() const {
    return m_backup_element;
}
void OAICloneRequest::setBackupElement(const OAIBackupElement &backup_element) {
    m_backup_element = backup_element;
    m_backup_element_isSet = true;
}

bool OAICloneRequest::is_backup_element_Set() const{
    return m_backup_element_isSet;
}

bool OAICloneRequest::is_backup_element_Valid() const{
    return m_backup_element_isValid;
}

QList<QString> OAICloneRequest::getTargetAccessControlRecordIds() const {
    return m_target_access_control_record_ids;
}
void OAICloneRequest::setTargetAccessControlRecordIds(const QList<QString> &target_access_control_record_ids) {
    m_target_access_control_record_ids = target_access_control_record_ids;
    m_target_access_control_record_ids_isSet = true;
}

bool OAICloneRequest::is_target_access_control_record_ids_Set() const{
    return m_target_access_control_record_ids_isSet;
}

bool OAICloneRequest::is_target_access_control_record_ids_Valid() const{
    return m_target_access_control_record_ids_isValid;
}

QString OAICloneRequest::getTargetDeviceId() const {
    return m_target_device_id;
}
void OAICloneRequest::setTargetDeviceId(const QString &target_device_id) {
    m_target_device_id = target_device_id;
    m_target_device_id_isSet = true;
}

bool OAICloneRequest::is_target_device_id_Set() const{
    return m_target_device_id_isSet;
}

bool OAICloneRequest::is_target_device_id_Valid() const{
    return m_target_device_id_isValid;
}

QString OAICloneRequest::getTargetVolumeName() const {
    return m_target_volume_name;
}
void OAICloneRequest::setTargetVolumeName(const QString &target_volume_name) {
    m_target_volume_name = target_volume_name;
    m_target_volume_name_isSet = true;
}

bool OAICloneRequest::is_target_volume_name_Set() const{
    return m_target_volume_name_isSet;
}

bool OAICloneRequest::is_target_volume_name_Valid() const{
    return m_target_volume_name_isValid;
}

bool OAICloneRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_element.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_access_control_record_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_volume_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloneRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_element_isValid && m_target_access_control_record_ids_isValid && m_target_device_id_isValid && m_target_volume_name_isValid && true;
}

} // namespace OpenAPI
