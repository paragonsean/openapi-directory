/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataStatistics::OAIDataStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataStatistics::OAIDataStatistics() {
    this->initializeModel();
}

OAIDataStatistics::~OAIDataStatistics() {}

void OAIDataStatistics::initializeModel() {

    m_cloud_data_isSet = false;
    m_cloud_data_isValid = false;

    m_processed_data_isSet = false;
    m_processed_data_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;

    m_total_data_isSet = false;
    m_total_data_isValid = false;
}

void OAIDataStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataStatistics::fromJsonObject(QJsonObject json) {

    m_cloud_data_isValid = ::OpenAPI::fromJsonValue(m_cloud_data, json[QString("cloudData")]);
    m_cloud_data_isSet = !json[QString("cloudData")].isNull() && m_cloud_data_isValid;

    m_processed_data_isValid = ::OpenAPI::fromJsonValue(m_processed_data, json[QString("processedData")]);
    m_processed_data_isSet = !json[QString("processedData")].isNull() && m_processed_data_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("throughput")]);
    m_throughput_isSet = !json[QString("throughput")].isNull() && m_throughput_isValid;

    m_total_data_isValid = ::OpenAPI::fromJsonValue(m_total_data, json[QString("totalData")]);
    m_total_data_isSet = !json[QString("totalData")].isNull() && m_total_data_isValid;
}

QString OAIDataStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_data_isSet) {
        obj.insert(QString("cloudData"), ::OpenAPI::toJsonValue(m_cloud_data));
    }
    if (m_processed_data_isSet) {
        obj.insert(QString("processedData"), ::OpenAPI::toJsonValue(m_processed_data));
    }
    if (m_throughput_isSet) {
        obj.insert(QString("throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    if (m_total_data_isSet) {
        obj.insert(QString("totalData"), ::OpenAPI::toJsonValue(m_total_data));
    }
    return obj;
}

qint64 OAIDataStatistics::getCloudData() const {
    return m_cloud_data;
}
void OAIDataStatistics::setCloudData(const qint64 &cloud_data) {
    m_cloud_data = cloud_data;
    m_cloud_data_isSet = true;
}

bool OAIDataStatistics::is_cloud_data_Set() const{
    return m_cloud_data_isSet;
}

bool OAIDataStatistics::is_cloud_data_Valid() const{
    return m_cloud_data_isValid;
}

qint64 OAIDataStatistics::getProcessedData() const {
    return m_processed_data;
}
void OAIDataStatistics::setProcessedData(const qint64 &processed_data) {
    m_processed_data = processed_data;
    m_processed_data_isSet = true;
}

bool OAIDataStatistics::is_processed_data_Set() const{
    return m_processed_data_isSet;
}

bool OAIDataStatistics::is_processed_data_Valid() const{
    return m_processed_data_isValid;
}

qint64 OAIDataStatistics::getThroughput() const {
    return m_throughput;
}
void OAIDataStatistics::setThroughput(const qint64 &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAIDataStatistics::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAIDataStatistics::is_throughput_Valid() const{
    return m_throughput_isValid;
}

qint64 OAIDataStatistics::getTotalData() const {
    return m_total_data;
}
void OAIDataStatistics::setTotalData(const qint64 &total_data) {
    m_total_data = total_data;
    m_total_data_isSet = true;
}

bool OAIDataStatistics::is_total_data_Set() const{
    return m_total_data_isSet;
}

bool OAIDataStatistics::is_total_data_Valid() const{
    return m_total_data_isValid;
}

bool OAIDataStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
