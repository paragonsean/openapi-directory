/**
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobProperties::OAIJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobProperties::OAIJobProperties() {
    this->initializeModel();
}

OAIJobProperties::~OAIJobProperties() {}

void OAIJobProperties::initializeModel() {

    m_backup_point_in_time_isSet = false;
    m_backup_point_in_time_isValid = false;

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;

    m_data_stats_isSet = false;
    m_data_stats_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_entity_label_isSet = false;
    m_entity_label_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_is_cancellable_isSet = false;
    m_is_cancellable_isValid = false;

    m_job_stages_isSet = false;
    m_job_stages_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_source_device_id_isSet = false;
    m_source_device_id_isValid = false;
}

void OAIJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobProperties::fromJsonObject(QJsonObject json) {

    m_backup_point_in_time_isValid = ::OpenAPI::fromJsonValue(m_backup_point_in_time, json[QString("backupPointInTime")]);
    m_backup_point_in_time_isSet = !json[QString("backupPointInTime")].isNull() && m_backup_point_in_time_isValid;

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("backupType")]);
    m_backup_type_isSet = !json[QString("backupType")].isNull() && m_backup_type_isValid;

    m_data_stats_isValid = ::OpenAPI::fromJsonValue(m_data_stats, json[QString("dataStats")]);
    m_data_stats_isSet = !json[QString("dataStats")].isNull() && m_data_stats_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_entity_label_isValid = ::OpenAPI::fromJsonValue(m_entity_label, json[QString("entityLabel")]);
    m_entity_label_isSet = !json[QString("entityLabel")].isNull() && m_entity_label_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_is_cancellable_isValid = ::OpenAPI::fromJsonValue(m_is_cancellable, json[QString("isCancellable")]);
    m_is_cancellable_isSet = !json[QString("isCancellable")].isNull() && m_is_cancellable_isValid;

    m_job_stages_isValid = ::OpenAPI::fromJsonValue(m_job_stages, json[QString("jobStages")]);
    m_job_stages_isSet = !json[QString("jobStages")].isNull() && m_job_stages_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_source_device_id_isValid = ::OpenAPI::fromJsonValue(m_source_device_id, json[QString("sourceDeviceId")]);
    m_source_device_id_isSet = !json[QString("sourceDeviceId")].isNull() && m_source_device_id_isValid;
}

QString OAIJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_point_in_time_isSet) {
        obj.insert(QString("backupPointInTime"), ::OpenAPI::toJsonValue(m_backup_point_in_time));
    }
    if (m_backup_type_isSet) {
        obj.insert(QString("backupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    if (m_data_stats.isSet()) {
        obj.insert(QString("dataStats"), ::OpenAPI::toJsonValue(m_data_stats));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_entity_label_isSet) {
        obj.insert(QString("entityLabel"), ::OpenAPI::toJsonValue(m_entity_label));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_is_cancellable_isSet) {
        obj.insert(QString("isCancellable"), ::OpenAPI::toJsonValue(m_is_cancellable));
    }
    if (m_job_stages.size() > 0) {
        obj.insert(QString("jobStages"), ::OpenAPI::toJsonValue(m_job_stages));
    }
    if (m_job_type_isSet) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_source_device_id_isSet) {
        obj.insert(QString("sourceDeviceId"), ::OpenAPI::toJsonValue(m_source_device_id));
    }
    return obj;
}

QDateTime OAIJobProperties::getBackupPointInTime() const {
    return m_backup_point_in_time;
}
void OAIJobProperties::setBackupPointInTime(const QDateTime &backup_point_in_time) {
    m_backup_point_in_time = backup_point_in_time;
    m_backup_point_in_time_isSet = true;
}

bool OAIJobProperties::is_backup_point_in_time_Set() const{
    return m_backup_point_in_time_isSet;
}

bool OAIJobProperties::is_backup_point_in_time_Valid() const{
    return m_backup_point_in_time_isValid;
}

QString OAIJobProperties::getBackupType() const {
    return m_backup_type;
}
void OAIJobProperties::setBackupType(const QString &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIJobProperties::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIJobProperties::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

OAIDataStatistics OAIJobProperties::getDataStats() const {
    return m_data_stats;
}
void OAIJobProperties::setDataStats(const OAIDataStatistics &data_stats) {
    m_data_stats = data_stats;
    m_data_stats_isSet = true;
}

bool OAIJobProperties::is_data_stats_Set() const{
    return m_data_stats_isSet;
}

bool OAIJobProperties::is_data_stats_Valid() const{
    return m_data_stats_isValid;
}

QString OAIJobProperties::getDeviceId() const {
    return m_device_id;
}
void OAIJobProperties::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIJobProperties::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIJobProperties::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIJobProperties::getEntityLabel() const {
    return m_entity_label;
}
void OAIJobProperties::setEntityLabel(const QString &entity_label) {
    m_entity_label = entity_label;
    m_entity_label_isSet = true;
}

bool OAIJobProperties::is_entity_label_Set() const{
    return m_entity_label_isSet;
}

bool OAIJobProperties::is_entity_label_Valid() const{
    return m_entity_label_isValid;
}

QString OAIJobProperties::getEntityType() const {
    return m_entity_type;
}
void OAIJobProperties::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIJobProperties::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIJobProperties::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

bool OAIJobProperties::isIsCancellable() const {
    return m_is_cancellable;
}
void OAIJobProperties::setIsCancellable(const bool &is_cancellable) {
    m_is_cancellable = is_cancellable;
    m_is_cancellable_isSet = true;
}

bool OAIJobProperties::is_is_cancellable_Set() const{
    return m_is_cancellable_isSet;
}

bool OAIJobProperties::is_is_cancellable_Valid() const{
    return m_is_cancellable_isValid;
}

QList<OAIJobStage> OAIJobProperties::getJobStages() const {
    return m_job_stages;
}
void OAIJobProperties::setJobStages(const QList<OAIJobStage> &job_stages) {
    m_job_stages = job_stages;
    m_job_stages_isSet = true;
}

bool OAIJobProperties::is_job_stages_Set() const{
    return m_job_stages_isSet;
}

bool OAIJobProperties::is_job_stages_Valid() const{
    return m_job_stages_isValid;
}

QString OAIJobProperties::getJobType() const {
    return m_job_type;
}
void OAIJobProperties::setJobType(const QString &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIJobProperties::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIJobProperties::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAIJobProperties::getSourceDeviceId() const {
    return m_source_device_id;
}
void OAIJobProperties::setSourceDeviceId(const QString &source_device_id) {
    m_source_device_id = source_device_id;
    m_source_device_id_isSet = true;
}

bool OAIJobProperties::is_source_device_id_Set() const{
    return m_source_device_id_isSet;
}

bool OAIJobProperties::is_source_device_id_Valid() const{
    return m_source_device_id_isValid;
}

bool OAIJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_point_in_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cancellable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_stages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_type_isValid && true;
}

} // namespace OpenAPI
