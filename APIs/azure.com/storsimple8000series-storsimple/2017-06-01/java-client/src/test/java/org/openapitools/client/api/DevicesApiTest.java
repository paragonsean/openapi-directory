/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigureDeviceRequest;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceList;
import org.openapitools.client.model.DevicePatch;
import org.openapitools.client.model.FailoverRequest;
import org.openapitools.client.model.FailoverSetsList;
import org.openapitools.client.model.FailoverTargetsList;
import org.openapitools.client.model.ListFailoverTargetsRequest;
import org.openapitools.client.model.MetricDefinitionList;
import org.openapitools.client.model.MetricList;
import org.openapitools.client.model.Updates;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Authorizes the specified device for service data encryption key rollover.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesAuthorizeForServiceEncryptionKeyRolloverTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesAuthorizeForServiceEncryptionKeyRollover(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Complete minimal setup before using the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesConfigureTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ConfigureDeviceRequest parameters = null;
        api.devicesConfigure(subscriptionId, resourceGroupName, managerName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deactivates the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDeactivateTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesDeactivate(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDeleteTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesDelete(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Failovers a set of volume containers from a specified source device to a target device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesFailoverTest() throws ApiException {
        String sourceDeviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        FailoverRequest parameters = null;
        api.devicesFailover(sourceDeviceName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Returns the properties of the specified device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $expand = null;
        Device response = api.devicesGet(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, $expand);
        // TODO: test validations
    }

    /**
     * Returns the update summary of the specified device name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetUpdateSummaryTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        Updates response = api.devicesGetUpdateSummary(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Downloads and installs the updates on the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesInstallUpdatesTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesInstallUpdates(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the list of devices for the specified manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListByManagerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $expand = null;
        DeviceList response = api.devicesListByManager(subscriptionId, resourceGroupName, managerName, apiVersion, $expand);
        // TODO: test validations
    }

    /**
     * Returns all failover sets for a given device and their eligibility for participating in a failover. A failover set refers to a set of volume containers that need to be failed-over as a single unit to maintain data integrity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListFailoverSetsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        FailoverSetsList response = api.devicesListFailoverSets(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Given a list of volume containers to be failed over from a source device, this method returns the eligibility result, as a failover target, for all devices under that resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListFailoverTargetsTest() throws ApiException {
        String sourceDeviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        ListFailoverTargetsRequest parameters = null;
        FailoverTargetsList response = api.devicesListFailoverTargets(sourceDeviceName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Gets the metric definitions for the specified device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListMetricDefinitionTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        MetricDefinitionList response = api.devicesListMetricDefinition(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the metrics for the specified device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListMetricsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        String $filter = null;
        MetricList response = api.devicesListMetrics(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Scans for updates on the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesScanForUpdatesTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        api.devicesScanForUpdates(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUpdateTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String managerName = null;
        String apiVersion = null;
        DevicePatch parameters = null;
        Device response = api.devicesUpdate(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters);
        // TODO: test validations
    }

}
