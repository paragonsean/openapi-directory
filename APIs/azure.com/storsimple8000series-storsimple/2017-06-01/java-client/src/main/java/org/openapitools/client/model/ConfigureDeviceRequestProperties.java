/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NetworkInterfaceData0Settings;
import org.openapitools.client.model.SecondaryDNSSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the configure device request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigureDeviceRequestProperties {
  public static final String SERIALIZED_NAME_CURRENT_DEVICE_NAME = "currentDeviceName";
  @SerializedName(SERIALIZED_NAME_CURRENT_DEVICE_NAME)
  private String currentDeviceName;

  public static final String SERIALIZED_NAME_DNS_SETTINGS = "dnsSettings";
  @SerializedName(SERIALIZED_NAME_DNS_SETTINGS)
  private SecondaryDNSSettings dnsSettings;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE_DATA0_SETTINGS = "networkInterfaceData0Settings";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE_DATA0_SETTINGS)
  private NetworkInterfaceData0Settings networkInterfaceData0Settings;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public ConfigureDeviceRequestProperties() {
  }

  public ConfigureDeviceRequestProperties currentDeviceName(String currentDeviceName) {
    this.currentDeviceName = currentDeviceName;
    return this;
  }

  /**
   * The current name of the device.
   * @return currentDeviceName
   */
  @javax.annotation.Nonnull
  public String getCurrentDeviceName() {
    return currentDeviceName;
  }

  public void setCurrentDeviceName(String currentDeviceName) {
    this.currentDeviceName = currentDeviceName;
  }


  public ConfigureDeviceRequestProperties dnsSettings(SecondaryDNSSettings dnsSettings) {
    this.dnsSettings = dnsSettings;
    return this;
  }

  /**
   * Get dnsSettings
   * @return dnsSettings
   */
  @javax.annotation.Nullable
  public SecondaryDNSSettings getDnsSettings() {
    return dnsSettings;
  }

  public void setDnsSettings(SecondaryDNSSettings dnsSettings) {
    this.dnsSettings = dnsSettings;
  }


  public ConfigureDeviceRequestProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The friendly name for the device.
   * @return friendlyName
   */
  @javax.annotation.Nonnull
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ConfigureDeviceRequestProperties networkInterfaceData0Settings(NetworkInterfaceData0Settings networkInterfaceData0Settings) {
    this.networkInterfaceData0Settings = networkInterfaceData0Settings;
    return this;
  }

  /**
   * Get networkInterfaceData0Settings
   * @return networkInterfaceData0Settings
   */
  @javax.annotation.Nullable
  public NetworkInterfaceData0Settings getNetworkInterfaceData0Settings() {
    return networkInterfaceData0Settings;
  }

  public void setNetworkInterfaceData0Settings(NetworkInterfaceData0Settings networkInterfaceData0Settings) {
    this.networkInterfaceData0Settings = networkInterfaceData0Settings;
  }


  public ConfigureDeviceRequestProperties timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The device time zone. For eg: \&quot;Pacific Standard Time\&quot;
   * @return timeZone
   */
  @javax.annotation.Nonnull
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigureDeviceRequestProperties configureDeviceRequestProperties = (ConfigureDeviceRequestProperties) o;
    return Objects.equals(this.currentDeviceName, configureDeviceRequestProperties.currentDeviceName) &&
        Objects.equals(this.dnsSettings, configureDeviceRequestProperties.dnsSettings) &&
        Objects.equals(this.friendlyName, configureDeviceRequestProperties.friendlyName) &&
        Objects.equals(this.networkInterfaceData0Settings, configureDeviceRequestProperties.networkInterfaceData0Settings) &&
        Objects.equals(this.timeZone, configureDeviceRequestProperties.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentDeviceName, dnsSettings, friendlyName, networkInterfaceData0Settings, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigureDeviceRequestProperties {\n");
    sb.append("    currentDeviceName: ").append(toIndentedString(currentDeviceName)).append("\n");
    sb.append("    dnsSettings: ").append(toIndentedString(dnsSettings)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    networkInterfaceData0Settings: ").append(toIndentedString(networkInterfaceData0Settings)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentDeviceName");
    openapiFields.add("dnsSettings");
    openapiFields.add("friendlyName");
    openapiFields.add("networkInterfaceData0Settings");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currentDeviceName");
    openapiRequiredFields.add("friendlyName");
    openapiRequiredFields.add("timeZone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigureDeviceRequestProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigureDeviceRequestProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigureDeviceRequestProperties is not found in the empty JSON string", ConfigureDeviceRequestProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigureDeviceRequestProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigureDeviceRequestProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigureDeviceRequestProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currentDeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentDeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentDeviceName").toString()));
      }
      // validate the optional field `dnsSettings`
      if (jsonObj.get("dnsSettings") != null && !jsonObj.get("dnsSettings").isJsonNull()) {
        SecondaryDNSSettings.validateJsonElement(jsonObj.get("dnsSettings"));
      }
      if (!jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      // validate the optional field `networkInterfaceData0Settings`
      if (jsonObj.get("networkInterfaceData0Settings") != null && !jsonObj.get("networkInterfaceData0Settings").isJsonNull()) {
        NetworkInterfaceData0Settings.validateJsonElement(jsonObj.get("networkInterfaceData0Settings"));
      }
      if (!jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigureDeviceRequestProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigureDeviceRequestProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigureDeviceRequestProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigureDeviceRequestProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigureDeviceRequestProperties>() {
           @Override
           public void write(JsonWriter out, ConfigureDeviceRequestProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigureDeviceRequestProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigureDeviceRequestProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigureDeviceRequestProperties
   * @throws IOException if the JSON string is invalid with respect to ConfigureDeviceRequestProperties
   */
  public static ConfigureDeviceRequestProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigureDeviceRequestProperties.class);
  }

  /**
   * Convert an instance of ConfigureDeviceRequestProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

