/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the controller power state change request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ControllerPowerStateChangeRequestProperties {
  /**
   * The power state that the request is expecting for the controller of the device.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    START("Start"),
    
    RESTART("Restart"),
    
    SHUTDOWN("Shutdown");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  /**
   * The active controller that the request is expecting on the device.
   */
  @JsonAdapter(ActiveControllerEnum.Adapter.class)
  public enum ActiveControllerEnum {
    UNKNOWN("Unknown"),
    
    NONE("None"),
    
    CONTROLLER0("Controller0"),
    
    CONTROLLER1("Controller1");

    private String value;

    ActiveControllerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActiveControllerEnum fromValue(String value) {
      for (ActiveControllerEnum b : ActiveControllerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActiveControllerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActiveControllerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActiveControllerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActiveControllerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActiveControllerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVE_CONTROLLER = "activeController";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONTROLLER)
  private ActiveControllerEnum activeController;

  /**
   * The controller 0&#39;s status that the request is expecting on the device.
   */
  @JsonAdapter(Controller0StateEnum.Adapter.class)
  public enum Controller0StateEnum {
    NOT_PRESENT("NotPresent"),
    
    POWERED_OFF("PoweredOff"),
    
    OK("Ok"),
    
    RECOVERING("Recovering"),
    
    WARNING("Warning"),
    
    FAILURE("Failure");

    private String value;

    Controller0StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Controller0StateEnum fromValue(String value) {
      for (Controller0StateEnum b : Controller0StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Controller0StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Controller0StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Controller0StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Controller0StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Controller0StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTROLLER0_STATE = "controller0State";
  @SerializedName(SERIALIZED_NAME_CONTROLLER0_STATE)
  private Controller0StateEnum controller0State;

  /**
   * The controller 1&#39;s status that the request is expecting on the device.
   */
  @JsonAdapter(Controller1StateEnum.Adapter.class)
  public enum Controller1StateEnum {
    NOT_PRESENT("NotPresent"),
    
    POWERED_OFF("PoweredOff"),
    
    OK("Ok"),
    
    RECOVERING("Recovering"),
    
    WARNING("Warning"),
    
    FAILURE("Failure");

    private String value;

    Controller1StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Controller1StateEnum fromValue(String value) {
      for (Controller1StateEnum b : Controller1StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Controller1StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Controller1StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Controller1StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Controller1StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Controller1StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTROLLER1_STATE = "controller1State";
  @SerializedName(SERIALIZED_NAME_CONTROLLER1_STATE)
  private Controller1StateEnum controller1State;

  public ControllerPowerStateChangeRequestProperties() {
  }

  public ControllerPowerStateChangeRequestProperties action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * The power state that the request is expecting for the controller of the device.
   * @return action
   */
  @javax.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public ControllerPowerStateChangeRequestProperties activeController(ActiveControllerEnum activeController) {
    this.activeController = activeController;
    return this;
  }

  /**
   * The active controller that the request is expecting on the device.
   * @return activeController
   */
  @javax.annotation.Nonnull
  public ActiveControllerEnum getActiveController() {
    return activeController;
  }

  public void setActiveController(ActiveControllerEnum activeController) {
    this.activeController = activeController;
  }


  public ControllerPowerStateChangeRequestProperties controller0State(Controller0StateEnum controller0State) {
    this.controller0State = controller0State;
    return this;
  }

  /**
   * The controller 0&#39;s status that the request is expecting on the device.
   * @return controller0State
   */
  @javax.annotation.Nonnull
  public Controller0StateEnum getController0State() {
    return controller0State;
  }

  public void setController0State(Controller0StateEnum controller0State) {
    this.controller0State = controller0State;
  }


  public ControllerPowerStateChangeRequestProperties controller1State(Controller1StateEnum controller1State) {
    this.controller1State = controller1State;
    return this;
  }

  /**
   * The controller 1&#39;s status that the request is expecting on the device.
   * @return controller1State
   */
  @javax.annotation.Nonnull
  public Controller1StateEnum getController1State() {
    return controller1State;
  }

  public void setController1State(Controller1StateEnum controller1State) {
    this.controller1State = controller1State;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllerPowerStateChangeRequestProperties controllerPowerStateChangeRequestProperties = (ControllerPowerStateChangeRequestProperties) o;
    return Objects.equals(this.action, controllerPowerStateChangeRequestProperties.action) &&
        Objects.equals(this.activeController, controllerPowerStateChangeRequestProperties.activeController) &&
        Objects.equals(this.controller0State, controllerPowerStateChangeRequestProperties.controller0State) &&
        Objects.equals(this.controller1State, controllerPowerStateChangeRequestProperties.controller1State);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, activeController, controller0State, controller1State);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllerPowerStateChangeRequestProperties {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    activeController: ").append(toIndentedString(activeController)).append("\n");
    sb.append("    controller0State: ").append(toIndentedString(controller0State)).append("\n");
    sb.append("    controller1State: ").append(toIndentedString(controller1State)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("activeController");
    openapiFields.add("controller0State");
    openapiFields.add("controller1State");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("activeController");
    openapiRequiredFields.add("controller0State");
    openapiRequiredFields.add("controller1State");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ControllerPowerStateChangeRequestProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ControllerPowerStateChangeRequestProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ControllerPowerStateChangeRequestProperties is not found in the empty JSON string", ControllerPowerStateChangeRequestProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ControllerPowerStateChangeRequestProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ControllerPowerStateChangeRequestProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ControllerPowerStateChangeRequestProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the required field `action`
      ActionEnum.validateJsonElement(jsonObj.get("action"));
      if (!jsonObj.get("activeController").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeController` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeController").toString()));
      }
      // validate the required field `activeController`
      ActiveControllerEnum.validateJsonElement(jsonObj.get("activeController"));
      if (!jsonObj.get("controller0State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controller0State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controller0State").toString()));
      }
      // validate the required field `controller0State`
      Controller0StateEnum.validateJsonElement(jsonObj.get("controller0State"));
      if (!jsonObj.get("controller1State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controller1State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controller1State").toString()));
      }
      // validate the required field `controller1State`
      Controller1StateEnum.validateJsonElement(jsonObj.get("controller1State"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ControllerPowerStateChangeRequestProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ControllerPowerStateChangeRequestProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ControllerPowerStateChangeRequestProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ControllerPowerStateChangeRequestProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ControllerPowerStateChangeRequestProperties>() {
           @Override
           public void write(JsonWriter out, ControllerPowerStateChangeRequestProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ControllerPowerStateChangeRequestProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ControllerPowerStateChangeRequestProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ControllerPowerStateChangeRequestProperties
   * @throws IOException if the JSON string is invalid with respect to ControllerPowerStateChangeRequestProperties
   */
  public static ControllerPowerStateChangeRequestProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ControllerPowerStateChangeRequestProperties.class);
  }

  /**
   * Convert an instance of ControllerPowerStateChangeRequestProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

