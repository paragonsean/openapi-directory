/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details related to the IPv6 address configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NicIPv6 {
  public static final String SERIALIZED_NAME_CONTROLLER0_IPV6_ADDRESS = "controller0Ipv6Address";
  @SerializedName(SERIALIZED_NAME_CONTROLLER0_IPV6_ADDRESS)
  private String controller0Ipv6Address;

  public static final String SERIALIZED_NAME_CONTROLLER1_IPV6_ADDRESS = "controller1Ipv6Address";
  @SerializedName(SERIALIZED_NAME_CONTROLLER1_IPV6_ADDRESS)
  private String controller1Ipv6Address;

  public static final String SERIALIZED_NAME_IPV6_ADDRESS = "ipv6Address";
  @SerializedName(SERIALIZED_NAME_IPV6_ADDRESS)
  private String ipv6Address;

  public static final String SERIALIZED_NAME_IPV6_GATEWAY = "ipv6Gateway";
  @SerializedName(SERIALIZED_NAME_IPV6_GATEWAY)
  private String ipv6Gateway;

  public static final String SERIALIZED_NAME_IPV6_PREFIX = "ipv6Prefix";
  @SerializedName(SERIALIZED_NAME_IPV6_PREFIX)
  private String ipv6Prefix;

  public NicIPv6() {
  }

  public NicIPv6 controller0Ipv6Address(String controller0Ipv6Address) {
    this.controller0Ipv6Address = controller0Ipv6Address;
    return this;
  }

  /**
   * The IPv6 address of Controller0.
   * @return controller0Ipv6Address
   */
  @javax.annotation.Nullable
  public String getController0Ipv6Address() {
    return controller0Ipv6Address;
  }

  public void setController0Ipv6Address(String controller0Ipv6Address) {
    this.controller0Ipv6Address = controller0Ipv6Address;
  }


  public NicIPv6 controller1Ipv6Address(String controller1Ipv6Address) {
    this.controller1Ipv6Address = controller1Ipv6Address;
    return this;
  }

  /**
   * The IPv6 address of Controller1.
   * @return controller1Ipv6Address
   */
  @javax.annotation.Nullable
  public String getController1Ipv6Address() {
    return controller1Ipv6Address;
  }

  public void setController1Ipv6Address(String controller1Ipv6Address) {
    this.controller1Ipv6Address = controller1Ipv6Address;
  }


  public NicIPv6 ipv6Address(String ipv6Address) {
    this.ipv6Address = ipv6Address;
    return this;
  }

  /**
   * The IPv6 address of the network adapter.
   * @return ipv6Address
   */
  @javax.annotation.Nullable
  public String getIpv6Address() {
    return ipv6Address;
  }

  public void setIpv6Address(String ipv6Address) {
    this.ipv6Address = ipv6Address;
  }


  public NicIPv6 ipv6Gateway(String ipv6Gateway) {
    this.ipv6Gateway = ipv6Gateway;
    return this;
  }

  /**
   * The IPv6 gateway of the network adapter.
   * @return ipv6Gateway
   */
  @javax.annotation.Nullable
  public String getIpv6Gateway() {
    return ipv6Gateway;
  }

  public void setIpv6Gateway(String ipv6Gateway) {
    this.ipv6Gateway = ipv6Gateway;
  }


  public NicIPv6 ipv6Prefix(String ipv6Prefix) {
    this.ipv6Prefix = ipv6Prefix;
    return this;
  }

  /**
   * The IPv6 prefix of the network adapter.
   * @return ipv6Prefix
   */
  @javax.annotation.Nullable
  public String getIpv6Prefix() {
    return ipv6Prefix;
  }

  public void setIpv6Prefix(String ipv6Prefix) {
    this.ipv6Prefix = ipv6Prefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NicIPv6 nicIPv6 = (NicIPv6) o;
    return Objects.equals(this.controller0Ipv6Address, nicIPv6.controller0Ipv6Address) &&
        Objects.equals(this.controller1Ipv6Address, nicIPv6.controller1Ipv6Address) &&
        Objects.equals(this.ipv6Address, nicIPv6.ipv6Address) &&
        Objects.equals(this.ipv6Gateway, nicIPv6.ipv6Gateway) &&
        Objects.equals(this.ipv6Prefix, nicIPv6.ipv6Prefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controller0Ipv6Address, controller1Ipv6Address, ipv6Address, ipv6Gateway, ipv6Prefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NicIPv6 {\n");
    sb.append("    controller0Ipv6Address: ").append(toIndentedString(controller0Ipv6Address)).append("\n");
    sb.append("    controller1Ipv6Address: ").append(toIndentedString(controller1Ipv6Address)).append("\n");
    sb.append("    ipv6Address: ").append(toIndentedString(ipv6Address)).append("\n");
    sb.append("    ipv6Gateway: ").append(toIndentedString(ipv6Gateway)).append("\n");
    sb.append("    ipv6Prefix: ").append(toIndentedString(ipv6Prefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controller0Ipv6Address");
    openapiFields.add("controller1Ipv6Address");
    openapiFields.add("ipv6Address");
    openapiFields.add("ipv6Gateway");
    openapiFields.add("ipv6Prefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NicIPv6
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NicIPv6.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NicIPv6 is not found in the empty JSON string", NicIPv6.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NicIPv6.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NicIPv6` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("controller0Ipv6Address") != null && !jsonObj.get("controller0Ipv6Address").isJsonNull()) && !jsonObj.get("controller0Ipv6Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controller0Ipv6Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controller0Ipv6Address").toString()));
      }
      if ((jsonObj.get("controller1Ipv6Address") != null && !jsonObj.get("controller1Ipv6Address").isJsonNull()) && !jsonObj.get("controller1Ipv6Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controller1Ipv6Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controller1Ipv6Address").toString()));
      }
      if ((jsonObj.get("ipv6Address") != null && !jsonObj.get("ipv6Address").isJsonNull()) && !jsonObj.get("ipv6Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv6Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv6Address").toString()));
      }
      if ((jsonObj.get("ipv6Gateway") != null && !jsonObj.get("ipv6Gateway").isJsonNull()) && !jsonObj.get("ipv6Gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv6Gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv6Gateway").toString()));
      }
      if ((jsonObj.get("ipv6Prefix") != null && !jsonObj.get("ipv6Prefix").isJsonNull()) && !jsonObj.get("ipv6Prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv6Prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv6Prefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NicIPv6.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NicIPv6' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NicIPv6> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NicIPv6.class));

       return (TypeAdapter<T>) new TypeAdapter<NicIPv6>() {
           @Override
           public void write(JsonWriter out, NicIPv6 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NicIPv6 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NicIPv6 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NicIPv6
   * @throws IOException if the JSON string is invalid with respect to NicIPv6
   */
  public static NicIPv6 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NicIPv6.class);
  }

  /**
   * Convert an instance of NicIPv6 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

