/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The metadata of a volume that has valid cloud snapshot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeFailoverMetadata {
  public static final String SERIALIZED_NAME_BACKUP_CREATED_DATE = "backupCreatedDate";
  @SerializedName(SERIALIZED_NAME_BACKUP_CREATED_DATE)
  private OffsetDateTime backupCreatedDate;

  public static final String SERIALIZED_NAME_BACKUP_ELEMENT_ID = "backupElementId";
  @SerializedName(SERIALIZED_NAME_BACKUP_ELEMENT_ID)
  private String backupElementId;

  public static final String SERIALIZED_NAME_BACKUP_ID = "backupId";
  @SerializedName(SERIALIZED_NAME_BACKUP_ID)
  private String backupId;

  public static final String SERIALIZED_NAME_BACKUP_POLICY_ID = "backupPolicyId";
  @SerializedName(SERIALIZED_NAME_BACKUP_POLICY_ID)
  private String backupPolicyId;

  public static final String SERIALIZED_NAME_SIZE_IN_BYTES = "sizeInBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_BYTES)
  private Long sizeInBytes;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  /**
   * The type of the volume.
   */
  @JsonAdapter(VolumeTypeEnum.Adapter.class)
  public enum VolumeTypeEnum {
    TIERED("Tiered"),
    
    ARCHIVAL("Archival"),
    
    LOCALLY_PINNED("LocallyPinned");

    private String value;

    VolumeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VolumeTypeEnum fromValue(String value) {
      for (VolumeTypeEnum b : VolumeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VolumeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VolumeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VolumeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VolumeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VolumeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOLUME_TYPE = "volumeType";
  @SerializedName(SERIALIZED_NAME_VOLUME_TYPE)
  private VolumeTypeEnum volumeType;

  public VolumeFailoverMetadata() {
  }

  public VolumeFailoverMetadata backupCreatedDate(OffsetDateTime backupCreatedDate) {
    this.backupCreatedDate = backupCreatedDate;
    return this;
  }

  /**
   * The date at which the snapshot was taken.
   * @return backupCreatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBackupCreatedDate() {
    return backupCreatedDate;
  }

  public void setBackupCreatedDate(OffsetDateTime backupCreatedDate) {
    this.backupCreatedDate = backupCreatedDate;
  }


  public VolumeFailoverMetadata backupElementId(String backupElementId) {
    this.backupElementId = backupElementId;
    return this;
  }

  /**
   * The path ID of the backup-element for this volume, inside the backup set.
   * @return backupElementId
   */
  @javax.annotation.Nullable
  public String getBackupElementId() {
    return backupElementId;
  }

  public void setBackupElementId(String backupElementId) {
    this.backupElementId = backupElementId;
  }


  public VolumeFailoverMetadata backupId(String backupId) {
    this.backupId = backupId;
    return this;
  }

  /**
   * The path ID of the backup set.
   * @return backupId
   */
  @javax.annotation.Nullable
  public String getBackupId() {
    return backupId;
  }

  public void setBackupId(String backupId) {
    this.backupId = backupId;
  }


  public VolumeFailoverMetadata backupPolicyId(String backupPolicyId) {
    this.backupPolicyId = backupPolicyId;
    return this;
  }

  /**
   * The path ID of the backup policy using which the snapshot was taken.
   * @return backupPolicyId
   */
  @javax.annotation.Nullable
  public String getBackupPolicyId() {
    return backupPolicyId;
  }

  public void setBackupPolicyId(String backupPolicyId) {
    this.backupPolicyId = backupPolicyId;
  }


  public VolumeFailoverMetadata sizeInBytes(Long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    return this;
  }

  /**
   * The size of the volume in bytes at the time the snapshot was taken.
   * @return sizeInBytes
   */
  @javax.annotation.Nullable
  public Long getSizeInBytes() {
    return sizeInBytes;
  }

  public void setSizeInBytes(Long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
  }


  public VolumeFailoverMetadata volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * The path ID of the volume.
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }


  public VolumeFailoverMetadata volumeType(VolumeTypeEnum volumeType) {
    this.volumeType = volumeType;
    return this;
  }

  /**
   * The type of the volume.
   * @return volumeType
   */
  @javax.annotation.Nullable
  public VolumeTypeEnum getVolumeType() {
    return volumeType;
  }

  public void setVolumeType(VolumeTypeEnum volumeType) {
    this.volumeType = volumeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeFailoverMetadata volumeFailoverMetadata = (VolumeFailoverMetadata) o;
    return Objects.equals(this.backupCreatedDate, volumeFailoverMetadata.backupCreatedDate) &&
        Objects.equals(this.backupElementId, volumeFailoverMetadata.backupElementId) &&
        Objects.equals(this.backupId, volumeFailoverMetadata.backupId) &&
        Objects.equals(this.backupPolicyId, volumeFailoverMetadata.backupPolicyId) &&
        Objects.equals(this.sizeInBytes, volumeFailoverMetadata.sizeInBytes) &&
        Objects.equals(this.volumeId, volumeFailoverMetadata.volumeId) &&
        Objects.equals(this.volumeType, volumeFailoverMetadata.volumeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupCreatedDate, backupElementId, backupId, backupPolicyId, sizeInBytes, volumeId, volumeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeFailoverMetadata {\n");
    sb.append("    backupCreatedDate: ").append(toIndentedString(backupCreatedDate)).append("\n");
    sb.append("    backupElementId: ").append(toIndentedString(backupElementId)).append("\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    backupPolicyId: ").append(toIndentedString(backupPolicyId)).append("\n");
    sb.append("    sizeInBytes: ").append(toIndentedString(sizeInBytes)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("    volumeType: ").append(toIndentedString(volumeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupCreatedDate");
    openapiFields.add("backupElementId");
    openapiFields.add("backupId");
    openapiFields.add("backupPolicyId");
    openapiFields.add("sizeInBytes");
    openapiFields.add("volumeId");
    openapiFields.add("volumeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeFailoverMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeFailoverMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeFailoverMetadata is not found in the empty JSON string", VolumeFailoverMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeFailoverMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeFailoverMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupElementId") != null && !jsonObj.get("backupElementId").isJsonNull()) && !jsonObj.get("backupElementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupElementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupElementId").toString()));
      }
      if ((jsonObj.get("backupId") != null && !jsonObj.get("backupId").isJsonNull()) && !jsonObj.get("backupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupId").toString()));
      }
      if ((jsonObj.get("backupPolicyId") != null && !jsonObj.get("backupPolicyId").isJsonNull()) && !jsonObj.get("backupPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupPolicyId").toString()));
      }
      if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) && !jsonObj.get("volumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeId").toString()));
      }
      if ((jsonObj.get("volumeType") != null && !jsonObj.get("volumeType").isJsonNull()) && !jsonObj.get("volumeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeType").toString()));
      }
      // validate the optional field `volumeType`
      if (jsonObj.get("volumeType") != null && !jsonObj.get("volumeType").isJsonNull()) {
        VolumeTypeEnum.validateJsonElement(jsonObj.get("volumeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeFailoverMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeFailoverMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeFailoverMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeFailoverMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeFailoverMetadata>() {
           @Override
           public void write(JsonWriter out, VolumeFailoverMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeFailoverMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeFailoverMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeFailoverMetadata
   * @throws IOException if the JSON string is invalid with respect to VolumeFailoverMetadata
   */
  public static VolumeFailoverMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeFailoverMetadata.class);
  }

  /**
   * Convert an instance of VolumeFailoverMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

