/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ScheduleRecurrence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the backup schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupScheduleProperties {
  /**
   * The type of backup which needs to be taken.
   */
  @JsonAdapter(BackupTypeEnum.Adapter.class)
  public enum BackupTypeEnum {
    LOCAL_SNAPSHOT("LocalSnapshot"),
    
    CLOUD_SNAPSHOT("CloudSnapshot");

    private String value;

    BackupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupTypeEnum fromValue(String value) {
      for (BackupTypeEnum b : BackupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_TYPE = "backupType";
  @SerializedName(SERIALIZED_NAME_BACKUP_TYPE)
  private BackupTypeEnum backupType;

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_RUN = "lastSuccessfulRun";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_RUN)
  private OffsetDateTime lastSuccessfulRun;

  public static final String SERIALIZED_NAME_RETENTION_COUNT = "retentionCount";
  @SerializedName(SERIALIZED_NAME_RETENTION_COUNT)
  private Long retentionCount;

  public static final String SERIALIZED_NAME_SCHEDULE_RECURRENCE = "scheduleRecurrence";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_RECURRENCE)
  private ScheduleRecurrence scheduleRecurrence;

  /**
   * The schedule status.
   */
  @JsonAdapter(ScheduleStatusEnum.Adapter.class)
  public enum ScheduleStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    ScheduleStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleStatusEnum fromValue(String value) {
      for (ScheduleStatusEnum b : ScheduleStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScheduleStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScheduleStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE_STATUS = "scheduleStatus";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_STATUS)
  private ScheduleStatusEnum scheduleStatus;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public BackupScheduleProperties() {
  }

  public BackupScheduleProperties(
     OffsetDateTime lastSuccessfulRun
  ) {
    this();
    this.lastSuccessfulRun = lastSuccessfulRun;
  }

  public BackupScheduleProperties backupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
    return this;
  }

  /**
   * The type of backup which needs to be taken.
   * @return backupType
   */
  @javax.annotation.Nonnull
  public BackupTypeEnum getBackupType() {
    return backupType;
  }

  public void setBackupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
  }


  /**
   * The last successful backup run which was triggered for the schedule.
   * @return lastSuccessfulRun
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulRun() {
    return lastSuccessfulRun;
  }



  public BackupScheduleProperties retentionCount(Long retentionCount) {
    this.retentionCount = retentionCount;
    return this;
  }

  /**
   * The number of backups to be retained.
   * @return retentionCount
   */
  @javax.annotation.Nonnull
  public Long getRetentionCount() {
    return retentionCount;
  }

  public void setRetentionCount(Long retentionCount) {
    this.retentionCount = retentionCount;
  }


  public BackupScheduleProperties scheduleRecurrence(ScheduleRecurrence scheduleRecurrence) {
    this.scheduleRecurrence = scheduleRecurrence;
    return this;
  }

  /**
   * Get scheduleRecurrence
   * @return scheduleRecurrence
   */
  @javax.annotation.Nonnull
  public ScheduleRecurrence getScheduleRecurrence() {
    return scheduleRecurrence;
  }

  public void setScheduleRecurrence(ScheduleRecurrence scheduleRecurrence) {
    this.scheduleRecurrence = scheduleRecurrence;
  }


  public BackupScheduleProperties scheduleStatus(ScheduleStatusEnum scheduleStatus) {
    this.scheduleStatus = scheduleStatus;
    return this;
  }

  /**
   * The schedule status.
   * @return scheduleStatus
   */
  @javax.annotation.Nonnull
  public ScheduleStatusEnum getScheduleStatus() {
    return scheduleStatus;
  }

  public void setScheduleStatus(ScheduleStatusEnum scheduleStatus) {
    this.scheduleStatus = scheduleStatus;
  }


  public BackupScheduleProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the schedule.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupScheduleProperties backupScheduleProperties = (BackupScheduleProperties) o;
    return Objects.equals(this.backupType, backupScheduleProperties.backupType) &&
        Objects.equals(this.lastSuccessfulRun, backupScheduleProperties.lastSuccessfulRun) &&
        Objects.equals(this.retentionCount, backupScheduleProperties.retentionCount) &&
        Objects.equals(this.scheduleRecurrence, backupScheduleProperties.scheduleRecurrence) &&
        Objects.equals(this.scheduleStatus, backupScheduleProperties.scheduleStatus) &&
        Objects.equals(this.startTime, backupScheduleProperties.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupType, lastSuccessfulRun, retentionCount, scheduleRecurrence, scheduleStatus, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupScheduleProperties {\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    lastSuccessfulRun: ").append(toIndentedString(lastSuccessfulRun)).append("\n");
    sb.append("    retentionCount: ").append(toIndentedString(retentionCount)).append("\n");
    sb.append("    scheduleRecurrence: ").append(toIndentedString(scheduleRecurrence)).append("\n");
    sb.append("    scheduleStatus: ").append(toIndentedString(scheduleStatus)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupType");
    openapiFields.add("lastSuccessfulRun");
    openapiFields.add("retentionCount");
    openapiFields.add("scheduleRecurrence");
    openapiFields.add("scheduleStatus");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backupType");
    openapiRequiredFields.add("retentionCount");
    openapiRequiredFields.add("scheduleRecurrence");
    openapiRequiredFields.add("scheduleStatus");
    openapiRequiredFields.add("startTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupScheduleProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupScheduleProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupScheduleProperties is not found in the empty JSON string", BackupScheduleProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupScheduleProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupScheduleProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupScheduleProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("backupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupType").toString()));
      }
      // validate the required field `backupType`
      BackupTypeEnum.validateJsonElement(jsonObj.get("backupType"));
      // validate the required field `scheduleRecurrence`
      ScheduleRecurrence.validateJsonElement(jsonObj.get("scheduleRecurrence"));
      if (!jsonObj.get("scheduleStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleStatus").toString()));
      }
      // validate the required field `scheduleStatus`
      ScheduleStatusEnum.validateJsonElement(jsonObj.get("scheduleStatus"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupScheduleProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupScheduleProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupScheduleProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupScheduleProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupScheduleProperties>() {
           @Override
           public void write(JsonWriter out, BackupScheduleProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupScheduleProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupScheduleProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupScheduleProperties
   * @throws IOException if the JSON string is invalid with respect to BackupScheduleProperties
   */
  public static BackupScheduleProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupScheduleProperties.class);
  }

  /**
   * Convert an instance of BackupScheduleProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

