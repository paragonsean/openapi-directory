/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MetricDefinitionList;
import org.openapitools.client.model.MetricList;
import org.openapitools.client.model.Volume;
import org.openapitools.client.model.VolumeList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VolumesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VolumesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VolumesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for volumesCreateOrUpdate
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters Volume to be created or updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the volume. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the volume. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesCreateOrUpdateCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Volume parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "volumeContainerName" + "}", localVarApiClient.escapeString(volumeContainerName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesCreateOrUpdateValidateBeforeCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Volume parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'volumeContainerName' is set
        if (volumeContainerName == null) {
            throw new ApiException("Missing the required parameter 'volumeContainerName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling volumesCreateOrUpdate(Async)");
        }

        return volumesCreateOrUpdateCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters Volume to be created or updated. (required)
     * @return Volume
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the volume. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the volume. </td><td>  -  </td></tr>
     </table>
     */
    public Volume volumesCreateOrUpdate(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Volume parameters) throws ApiException {
        ApiResponse<Volume> localVarResp = volumesCreateOrUpdateWithHttpInfo(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters Volume to be created or updated. (required)
     * @return ApiResponse&lt;Volume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the volume. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the volume. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Volume> volumesCreateOrUpdateWithHttpInfo(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Volume parameters) throws ApiException {
        okhttp3.Call localVarCall = volumesCreateOrUpdateValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters Volume to be created or updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the volume. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the volume. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesCreateOrUpdateAsync(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, Volume parameters, final ApiCallback<Volume> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesCreateOrUpdateValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesDelete
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the volume. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the volume. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesDeleteCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "volumeContainerName" + "}", localVarApiClient.escapeString(volumeContainerName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesDeleteValidateBeforeCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'volumeContainerName' is set
        if (volumeContainerName == null) {
            throw new ApiException("Missing the required parameter 'volumeContainerName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesDelete(Async)");
        }

        return volumesDeleteCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the volume. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the volume. </td><td>  -  </td></tr>
     </table>
     */
    public void volumesDelete(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        volumesDeleteWithHttpInfo(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion);
    }

    /**
     * 
     * Deletes the volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the volume. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the volume. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> volumesDeleteWithHttpInfo(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = volumesDeleteValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the volume. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the volume. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesDeleteAsync(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesDeleteValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesGet
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The volume. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesGetCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "volumeContainerName" + "}", localVarApiClient.escapeString(volumeContainerName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesGetValidateBeforeCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'volumeContainerName' is set
        if (volumeContainerName == null) {
            throw new ApiException("Missing the required parameter 'volumeContainerName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesGet(Async)");
        }

        return volumesGetCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Returns the properties of the specified volume name.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return Volume
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The volume. </td><td>  -  </td></tr>
     </table>
     */
    public Volume volumesGet(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<Volume> localVarResp = volumesGetWithHttpInfo(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the properties of the specified volume name.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;Volume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The volume. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Volume> volumesGetWithHttpInfo(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = volumesGetValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the properties of the specified volume name.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The volume. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesGetAsync(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<Volume> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesGetValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesListByDevice
     * @param deviceName The device name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of volumes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListByDeviceCall(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumes"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesListByDeviceValidateBeforeCall(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling volumesListByDevice(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesListByDevice(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesListByDevice(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling volumesListByDevice(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesListByDevice(Async)");
        }

        return volumesListByDeviceCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves all the volumes in a device.
     * @param deviceName The device name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return VolumeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of volumes. </td><td>  -  </td></tr>
     </table>
     */
    public VolumeList volumesListByDevice(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<VolumeList> localVarResp = volumesListByDeviceWithHttpInfo(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the volumes in a device.
     * @param deviceName The device name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;VolumeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of volumes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VolumeList> volumesListByDeviceWithHttpInfo(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = volumesListByDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VolumeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the volumes in a device.
     * @param deviceName The device name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of volumes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListByDeviceAsync(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<VolumeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesListByDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VolumeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesListByVolumeContainer
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of volumes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListByVolumeContainerCall(String deviceName, String volumeContainerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "volumeContainerName" + "}", localVarApiClient.escapeString(volumeContainerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesListByVolumeContainerValidateBeforeCall(String deviceName, String volumeContainerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling volumesListByVolumeContainer(Async)");
        }

        // verify the required parameter 'volumeContainerName' is set
        if (volumeContainerName == null) {
            throw new ApiException("Missing the required parameter 'volumeContainerName' when calling volumesListByVolumeContainer(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesListByVolumeContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesListByVolumeContainer(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling volumesListByVolumeContainer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesListByVolumeContainer(Async)");
        }

        return volumesListByVolumeContainerCall(deviceName, volumeContainerName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves all the volumes in a volume container.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return VolumeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of volumes. </td><td>  -  </td></tr>
     </table>
     */
    public VolumeList volumesListByVolumeContainer(String deviceName, String volumeContainerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<VolumeList> localVarResp = volumesListByVolumeContainerWithHttpInfo(deviceName, volumeContainerName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the volumes in a volume container.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;VolumeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of volumes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VolumeList> volumesListByVolumeContainerWithHttpInfo(String deviceName, String volumeContainerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = volumesListByVolumeContainerValidateBeforeCall(deviceName, volumeContainerName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VolumeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the volumes in a volume container.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of volumes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListByVolumeContainerAsync(String deviceName, String volumeContainerName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<VolumeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesListByVolumeContainerValidateBeforeCall(deviceName, volumeContainerName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VolumeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesListMetricDefinition
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metric definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListMetricDefinitionCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}/metricsDefinitions"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "volumeContainerName" + "}", localVarApiClient.escapeString(volumeContainerName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesListMetricDefinitionValidateBeforeCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling volumesListMetricDefinition(Async)");
        }

        // verify the required parameter 'volumeContainerName' is set
        if (volumeContainerName == null) {
            throw new ApiException("Missing the required parameter 'volumeContainerName' when calling volumesListMetricDefinition(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesListMetricDefinition(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesListMetricDefinition(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesListMetricDefinition(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling volumesListMetricDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesListMetricDefinition(Async)");
        }

        return volumesListMetricDefinitionCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the metric definitions for the specified volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return MetricDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metric definitions. </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionList volumesListMetricDefinition(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionList> localVarResp = volumesListMetricDefinitionWithHttpInfo(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the metric definitions for the specified volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;MetricDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metric definitions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionList> volumesListMetricDefinitionWithHttpInfo(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = volumesListMetricDefinitionValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the metric definitions for the specified volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metric definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListMetricDefinitionAsync(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<MetricDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesListMetricDefinitionValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesListMetrics
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metrics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListMetricsCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}/metrics"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "volumeContainerName" + "}", localVarApiClient.escapeString(volumeContainerName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesListMetricsValidateBeforeCall(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling volumesListMetrics(Async)");
        }

        // verify the required parameter 'volumeContainerName' is set
        if (volumeContainerName == null) {
            throw new ApiException("Missing the required parameter 'volumeContainerName' when calling volumesListMetrics(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesListMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesListMetrics(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling volumesListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesListMetrics(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling volumesListMetrics(Async)");
        }

        return volumesListMetricsCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets the metrics for the specified volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (required)
     * @return MetricList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metrics </td><td>  -  </td></tr>
     </table>
     */
    public MetricList volumesListMetrics(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricList> localVarResp = volumesListMetricsWithHttpInfo(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the metrics for the specified volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (required)
     * @return ApiResponse&lt;MetricList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metrics </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricList> volumesListMetricsWithHttpInfo(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = volumesListMetricsValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the metrics for the specified volume.
     * @param deviceName The device name (required)
     * @param volumeContainerName The volume container name. (required)
     * @param volumeName The volume name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param $filter OData Filter options (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of metrics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListMetricsAsync(String deviceName, String volumeContainerName, String volumeName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, String $filter, final ApiCallback<MetricList> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesListMetricsValidateBeforeCall(deviceName, volumeContainerName, volumeName, subscriptionId, resourceGroupName, managerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
