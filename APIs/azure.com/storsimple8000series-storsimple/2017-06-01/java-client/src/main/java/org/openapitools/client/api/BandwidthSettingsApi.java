/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BandwidthSetting;
import org.openapitools.client.model.BandwidthSettingList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BandwidthSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BandwidthSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BandwidthSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bandwidthSettingsCreateOrUpdate
     * @param bandwidthSettingName The bandwidth setting name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters The bandwidth setting to be added or updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the bandwidth setting. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bandwidthSettingsCreateOrUpdateCall(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BandwidthSetting parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
            .replace("{" + "bandwidthSettingName" + "}", localVarApiClient.escapeString(bandwidthSettingName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bandwidthSettingsCreateOrUpdateValidateBeforeCall(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BandwidthSetting parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bandwidthSettingName' is set
        if (bandwidthSettingName == null) {
            throw new ApiException("Missing the required parameter 'bandwidthSettingName' when calling bandwidthSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling bandwidthSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling bandwidthSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling bandwidthSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling bandwidthSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling bandwidthSettingsCreateOrUpdate(Async)");
        }

        return bandwidthSettingsCreateOrUpdateCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the bandwidth setting
     * @param bandwidthSettingName The bandwidth setting name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters The bandwidth setting to be added or updated. (required)
     * @return BandwidthSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the bandwidth setting. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public BandwidthSetting bandwidthSettingsCreateOrUpdate(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BandwidthSetting parameters) throws ApiException {
        ApiResponse<BandwidthSetting> localVarResp = bandwidthSettingsCreateOrUpdateWithHttpInfo(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the bandwidth setting
     * @param bandwidthSettingName The bandwidth setting name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters The bandwidth setting to be added or updated. (required)
     * @return ApiResponse&lt;BandwidthSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the bandwidth setting. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BandwidthSetting> bandwidthSettingsCreateOrUpdateWithHttpInfo(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BandwidthSetting parameters) throws ApiException {
        okhttp3.Call localVarCall = bandwidthSettingsCreateOrUpdateValidateBeforeCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<BandwidthSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the bandwidth setting
     * @param bandwidthSettingName The bandwidth setting name. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters The bandwidth setting to be added or updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the bandwidth setting. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bandwidthSettingsCreateOrUpdateAsync(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BandwidthSetting parameters, final ApiCallback<BandwidthSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = bandwidthSettingsCreateOrUpdateValidateBeforeCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<BandwidthSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bandwidthSettingsDelete
     * @param bandwidthSettingName The name of the bandwidth setting. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the bandwidth setting. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bandwidthSettingsDeleteCall(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
            .replace("{" + "bandwidthSettingName" + "}", localVarApiClient.escapeString(bandwidthSettingName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bandwidthSettingsDeleteValidateBeforeCall(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bandwidthSettingName' is set
        if (bandwidthSettingName == null) {
            throw new ApiException("Missing the required parameter 'bandwidthSettingName' when calling bandwidthSettingsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling bandwidthSettingsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling bandwidthSettingsDelete(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling bandwidthSettingsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling bandwidthSettingsDelete(Async)");
        }

        return bandwidthSettingsDeleteCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the bandwidth setting
     * @param bandwidthSettingName The name of the bandwidth setting. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the bandwidth setting. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public void bandwidthSettingsDelete(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        bandwidthSettingsDeleteWithHttpInfo(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion);
    }

    /**
     * 
     * Deletes the bandwidth setting
     * @param bandwidthSettingName The name of the bandwidth setting. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the bandwidth setting. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bandwidthSettingsDeleteWithHttpInfo(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = bandwidthSettingsDeleteValidateBeforeCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the bandwidth setting
     * @param bandwidthSettingName The name of the bandwidth setting. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the bandwidth setting. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bandwidthSettingsDeleteAsync(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bandwidthSettingsDeleteValidateBeforeCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bandwidthSettingsGet
     * @param bandwidthSettingName The name of bandwidth setting to be fetched. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bandwidthSettingsGetCall(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
            .replace("{" + "bandwidthSettingName" + "}", localVarApiClient.escapeString(bandwidthSettingName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bandwidthSettingsGetValidateBeforeCall(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bandwidthSettingName' is set
        if (bandwidthSettingName == null) {
            throw new ApiException("Missing the required parameter 'bandwidthSettingName' when calling bandwidthSettingsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling bandwidthSettingsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling bandwidthSettingsGet(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling bandwidthSettingsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling bandwidthSettingsGet(Async)");
        }

        return bandwidthSettingsGetCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Returns the properties of the specified bandwidth setting name.
     * @param bandwidthSettingName The name of bandwidth setting to be fetched. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return BandwidthSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public BandwidthSetting bandwidthSettingsGet(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<BandwidthSetting> localVarResp = bandwidthSettingsGetWithHttpInfo(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the properties of the specified bandwidth setting name.
     * @param bandwidthSettingName The name of bandwidth setting to be fetched. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;BandwidthSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BandwidthSetting> bandwidthSettingsGetWithHttpInfo(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = bandwidthSettingsGetValidateBeforeCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<BandwidthSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the properties of the specified bandwidth setting name.
     * @param bandwidthSettingName The name of bandwidth setting to be fetched. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The bandwidth setting. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bandwidthSettingsGetAsync(String bandwidthSettingName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<BandwidthSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = bandwidthSettingsGetValidateBeforeCall(bandwidthSettingName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BandwidthSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bandwidthSettingsListByManager
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of bandwidth settings. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bandwidthSettingsListByManagerCall(String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bandwidthSettingsListByManagerValidateBeforeCall(String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling bandwidthSettingsListByManager(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling bandwidthSettingsListByManager(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling bandwidthSettingsListByManager(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling bandwidthSettingsListByManager(Async)");
        }

        return bandwidthSettingsListByManagerCall(subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves all the bandwidth setting in a manager.
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return BandwidthSettingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of bandwidth settings. </td><td>  -  </td></tr>
     </table>
     */
    public BandwidthSettingList bandwidthSettingsListByManager(String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<BandwidthSettingList> localVarResp = bandwidthSettingsListByManagerWithHttpInfo(subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the bandwidth setting in a manager.
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;BandwidthSettingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of bandwidth settings. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BandwidthSettingList> bandwidthSettingsListByManagerWithHttpInfo(String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = bandwidthSettingsListByManagerValidateBeforeCall(subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<BandwidthSettingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the bandwidth setting in a manager.
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of bandwidth settings. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bandwidthSettingsListByManagerAsync(String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<BandwidthSettingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = bandwidthSettingsListByManagerValidateBeforeCall(subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BandwidthSettingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
