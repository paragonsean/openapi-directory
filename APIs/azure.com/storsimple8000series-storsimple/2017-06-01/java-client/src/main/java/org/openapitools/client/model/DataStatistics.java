/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The additional details related to the data related statistics of a job. Currently applicable only for Backup, Clone and Restore jobs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataStatistics {
  public static final String SERIALIZED_NAME_CLOUD_DATA = "cloudData";
  @SerializedName(SERIALIZED_NAME_CLOUD_DATA)
  private Long cloudData;

  public static final String SERIALIZED_NAME_PROCESSED_DATA = "processedData";
  @SerializedName(SERIALIZED_NAME_PROCESSED_DATA)
  private Long processedData;

  public static final String SERIALIZED_NAME_THROUGHPUT = "throughput";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT)
  private Long throughput;

  public static final String SERIALIZED_NAME_TOTAL_DATA = "totalData";
  @SerializedName(SERIALIZED_NAME_TOTAL_DATA)
  private Long totalData;

  public DataStatistics() {
  }

  public DataStatistics cloudData(Long cloudData) {
    this.cloudData = cloudData;
    return this;
  }

  /**
   * The number of bytes of data written to cloud, as part of the job.
   * @return cloudData
   */
  @javax.annotation.Nullable
  public Long getCloudData() {
    return cloudData;
  }

  public void setCloudData(Long cloudData) {
    this.cloudData = cloudData;
  }


  public DataStatistics processedData(Long processedData) {
    this.processedData = processedData;
    return this;
  }

  /**
   * The number of bytes of data processed till now, as part of the job.
   * @return processedData
   */
  @javax.annotation.Nullable
  public Long getProcessedData() {
    return processedData;
  }

  public void setProcessedData(Long processedData) {
    this.processedData = processedData;
  }


  public DataStatistics throughput(Long throughput) {
    this.throughput = throughput;
    return this;
  }

  /**
   * The average throughput of data processed(bytes/sec), as part of the job.
   * @return throughput
   */
  @javax.annotation.Nullable
  public Long getThroughput() {
    return throughput;
  }

  public void setThroughput(Long throughput) {
    this.throughput = throughput;
  }


  public DataStatistics totalData(Long totalData) {
    this.totalData = totalData;
    return this;
  }

  /**
   * The total bytes of data to be processed, as part of the job.
   * @return totalData
   */
  @javax.annotation.Nullable
  public Long getTotalData() {
    return totalData;
  }

  public void setTotalData(Long totalData) {
    this.totalData = totalData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataStatistics dataStatistics = (DataStatistics) o;
    return Objects.equals(this.cloudData, dataStatistics.cloudData) &&
        Objects.equals(this.processedData, dataStatistics.processedData) &&
        Objects.equals(this.throughput, dataStatistics.throughput) &&
        Objects.equals(this.totalData, dataStatistics.totalData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudData, processedData, throughput, totalData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataStatistics {\n");
    sb.append("    cloudData: ").append(toIndentedString(cloudData)).append("\n");
    sb.append("    processedData: ").append(toIndentedString(processedData)).append("\n");
    sb.append("    throughput: ").append(toIndentedString(throughput)).append("\n");
    sb.append("    totalData: ").append(toIndentedString(totalData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudData");
    openapiFields.add("processedData");
    openapiFields.add("throughput");
    openapiFields.add("totalData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataStatistics is not found in the empty JSON string", DataStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<DataStatistics>() {
           @Override
           public void write(JsonWriter out, DataStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataStatistics
   * @throws IOException if the JSON string is invalid with respect to DataStatistics
   */
  public static DataStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataStatistics.class);
  }

  /**
   * Convert an instance of DataStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

