/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TargetEligibilityResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the eligibility of a device as a failover target device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailoverTarget {
  public static final String SERIALIZED_NAME_AVAILABLE_LOCAL_STORAGE_IN_BYTES = "availableLocalStorageInBytes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_LOCAL_STORAGE_IN_BYTES)
  private Long availableLocalStorageInBytes;

  public static final String SERIALIZED_NAME_AVAILABLE_TIERED_STORAGE_IN_BYTES = "availableTieredStorageInBytes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_TIERED_STORAGE_IN_BYTES)
  private Long availableTieredStorageInBytes;

  public static final String SERIALIZED_NAME_DATA_CONTAINERS_COUNT = "dataContainersCount";
  @SerializedName(SERIALIZED_NAME_DATA_CONTAINERS_COUNT)
  private Integer dataContainersCount;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_LOCATION = "deviceLocation";
  @SerializedName(SERIALIZED_NAME_DEVICE_LOCATION)
  private String deviceLocation;

  public static final String SERIALIZED_NAME_DEVICE_SOFTWARE_VERSION = "deviceSoftwareVersion";
  @SerializedName(SERIALIZED_NAME_DEVICE_SOFTWARE_VERSION)
  private String deviceSoftwareVersion;

  /**
   * The status of the device.
   */
  @JsonAdapter(DeviceStatusEnum.Adapter.class)
  public enum DeviceStatusEnum {
    UNKNOWN("Unknown"),
    
    ONLINE("Online"),
    
    OFFLINE("Offline"),
    
    DEACTIVATED("Deactivated"),
    
    REQUIRES_ATTENTION("RequiresAttention"),
    
    MAINTENANCE_MODE("MaintenanceMode"),
    
    CREATING("Creating"),
    
    PROVISIONING("Provisioning"),
    
    DEACTIVATING("Deactivating"),
    
    DELETED("Deleted"),
    
    READY_TO_SETUP("ReadyToSetup");

    private String value;

    DeviceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceStatusEnum fromValue(String value) {
      for (DeviceStatusEnum b : DeviceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_STATUS = "deviceStatus";
  @SerializedName(SERIALIZED_NAME_DEVICE_STATUS)
  private DeviceStatusEnum deviceStatus;

  public static final String SERIALIZED_NAME_ELIGIBILITY_RESULT = "eligibilityResult";
  @SerializedName(SERIALIZED_NAME_ELIGIBILITY_RESULT)
  private TargetEligibilityResult eligibilityResult;

  public static final String SERIALIZED_NAME_FRIENDLY_DEVICE_SOFTWARE_VERSION = "friendlyDeviceSoftwareVersion";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_DEVICE_SOFTWARE_VERSION)
  private String friendlyDeviceSoftwareVersion;

  public static final String SERIALIZED_NAME_MODEL_DESCRIPTION = "modelDescription";
  @SerializedName(SERIALIZED_NAME_MODEL_DESCRIPTION)
  private String modelDescription;

  public static final String SERIALIZED_NAME_VOLUMES_COUNT = "volumesCount";
  @SerializedName(SERIALIZED_NAME_VOLUMES_COUNT)
  private Integer volumesCount;

  public FailoverTarget() {
  }

  public FailoverTarget availableLocalStorageInBytes(Long availableLocalStorageInBytes) {
    this.availableLocalStorageInBytes = availableLocalStorageInBytes;
    return this;
  }

  /**
   * The amount of free local storage available on the device in bytes.
   * @return availableLocalStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getAvailableLocalStorageInBytes() {
    return availableLocalStorageInBytes;
  }

  public void setAvailableLocalStorageInBytes(Long availableLocalStorageInBytes) {
    this.availableLocalStorageInBytes = availableLocalStorageInBytes;
  }


  public FailoverTarget availableTieredStorageInBytes(Long availableTieredStorageInBytes) {
    this.availableTieredStorageInBytes = availableTieredStorageInBytes;
    return this;
  }

  /**
   * The amount of free tiered storage available for the device in bytes.
   * @return availableTieredStorageInBytes
   */
  @javax.annotation.Nullable
  public Long getAvailableTieredStorageInBytes() {
    return availableTieredStorageInBytes;
  }

  public void setAvailableTieredStorageInBytes(Long availableTieredStorageInBytes) {
    this.availableTieredStorageInBytes = availableTieredStorageInBytes;
  }


  public FailoverTarget dataContainersCount(Integer dataContainersCount) {
    this.dataContainersCount = dataContainersCount;
    return this;
  }

  /**
   * The count of data containers on the device.
   * @return dataContainersCount
   */
  @javax.annotation.Nullable
  public Integer getDataContainersCount() {
    return dataContainersCount;
  }

  public void setDataContainersCount(Integer dataContainersCount) {
    this.dataContainersCount = dataContainersCount;
  }


  public FailoverTarget deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The path ID of the device.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public FailoverTarget deviceLocation(String deviceLocation) {
    this.deviceLocation = deviceLocation;
    return this;
  }

  /**
   * The geo location (applicable only for cloud appliances) of the device.
   * @return deviceLocation
   */
  @javax.annotation.Nullable
  public String getDeviceLocation() {
    return deviceLocation;
  }

  public void setDeviceLocation(String deviceLocation) {
    this.deviceLocation = deviceLocation;
  }


  public FailoverTarget deviceSoftwareVersion(String deviceSoftwareVersion) {
    this.deviceSoftwareVersion = deviceSoftwareVersion;
    return this;
  }

  /**
   * The software version of the device.
   * @return deviceSoftwareVersion
   */
  @javax.annotation.Nullable
  public String getDeviceSoftwareVersion() {
    return deviceSoftwareVersion;
  }

  public void setDeviceSoftwareVersion(String deviceSoftwareVersion) {
    this.deviceSoftwareVersion = deviceSoftwareVersion;
  }


  public FailoverTarget deviceStatus(DeviceStatusEnum deviceStatus) {
    this.deviceStatus = deviceStatus;
    return this;
  }

  /**
   * The status of the device.
   * @return deviceStatus
   */
  @javax.annotation.Nullable
  public DeviceStatusEnum getDeviceStatus() {
    return deviceStatus;
  }

  public void setDeviceStatus(DeviceStatusEnum deviceStatus) {
    this.deviceStatus = deviceStatus;
  }


  public FailoverTarget eligibilityResult(TargetEligibilityResult eligibilityResult) {
    this.eligibilityResult = eligibilityResult;
    return this;
  }

  /**
   * Get eligibilityResult
   * @return eligibilityResult
   */
  @javax.annotation.Nullable
  public TargetEligibilityResult getEligibilityResult() {
    return eligibilityResult;
  }

  public void setEligibilityResult(TargetEligibilityResult eligibilityResult) {
    this.eligibilityResult = eligibilityResult;
  }


  public FailoverTarget friendlyDeviceSoftwareVersion(String friendlyDeviceSoftwareVersion) {
    this.friendlyDeviceSoftwareVersion = friendlyDeviceSoftwareVersion;
    return this;
  }

  /**
   * The friendly name for the current version of software on the device.
   * @return friendlyDeviceSoftwareVersion
   */
  @javax.annotation.Nullable
  public String getFriendlyDeviceSoftwareVersion() {
    return friendlyDeviceSoftwareVersion;
  }

  public void setFriendlyDeviceSoftwareVersion(String friendlyDeviceSoftwareVersion) {
    this.friendlyDeviceSoftwareVersion = friendlyDeviceSoftwareVersion;
  }


  public FailoverTarget modelDescription(String modelDescription) {
    this.modelDescription = modelDescription;
    return this;
  }

  /**
   * The model number of the device.
   * @return modelDescription
   */
  @javax.annotation.Nullable
  public String getModelDescription() {
    return modelDescription;
  }

  public void setModelDescription(String modelDescription) {
    this.modelDescription = modelDescription;
  }


  public FailoverTarget volumesCount(Integer volumesCount) {
    this.volumesCount = volumesCount;
    return this;
  }

  /**
   * The count of volumes on the device.
   * @return volumesCount
   */
  @javax.annotation.Nullable
  public Integer getVolumesCount() {
    return volumesCount;
  }

  public void setVolumesCount(Integer volumesCount) {
    this.volumesCount = volumesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailoverTarget failoverTarget = (FailoverTarget) o;
    return Objects.equals(this.availableLocalStorageInBytes, failoverTarget.availableLocalStorageInBytes) &&
        Objects.equals(this.availableTieredStorageInBytes, failoverTarget.availableTieredStorageInBytes) &&
        Objects.equals(this.dataContainersCount, failoverTarget.dataContainersCount) &&
        Objects.equals(this.deviceId, failoverTarget.deviceId) &&
        Objects.equals(this.deviceLocation, failoverTarget.deviceLocation) &&
        Objects.equals(this.deviceSoftwareVersion, failoverTarget.deviceSoftwareVersion) &&
        Objects.equals(this.deviceStatus, failoverTarget.deviceStatus) &&
        Objects.equals(this.eligibilityResult, failoverTarget.eligibilityResult) &&
        Objects.equals(this.friendlyDeviceSoftwareVersion, failoverTarget.friendlyDeviceSoftwareVersion) &&
        Objects.equals(this.modelDescription, failoverTarget.modelDescription) &&
        Objects.equals(this.volumesCount, failoverTarget.volumesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableLocalStorageInBytes, availableTieredStorageInBytes, dataContainersCount, deviceId, deviceLocation, deviceSoftwareVersion, deviceStatus, eligibilityResult, friendlyDeviceSoftwareVersion, modelDescription, volumesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailoverTarget {\n");
    sb.append("    availableLocalStorageInBytes: ").append(toIndentedString(availableLocalStorageInBytes)).append("\n");
    sb.append("    availableTieredStorageInBytes: ").append(toIndentedString(availableTieredStorageInBytes)).append("\n");
    sb.append("    dataContainersCount: ").append(toIndentedString(dataContainersCount)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceLocation: ").append(toIndentedString(deviceLocation)).append("\n");
    sb.append("    deviceSoftwareVersion: ").append(toIndentedString(deviceSoftwareVersion)).append("\n");
    sb.append("    deviceStatus: ").append(toIndentedString(deviceStatus)).append("\n");
    sb.append("    eligibilityResult: ").append(toIndentedString(eligibilityResult)).append("\n");
    sb.append("    friendlyDeviceSoftwareVersion: ").append(toIndentedString(friendlyDeviceSoftwareVersion)).append("\n");
    sb.append("    modelDescription: ").append(toIndentedString(modelDescription)).append("\n");
    sb.append("    volumesCount: ").append(toIndentedString(volumesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableLocalStorageInBytes");
    openapiFields.add("availableTieredStorageInBytes");
    openapiFields.add("dataContainersCount");
    openapiFields.add("deviceId");
    openapiFields.add("deviceLocation");
    openapiFields.add("deviceSoftwareVersion");
    openapiFields.add("deviceStatus");
    openapiFields.add("eligibilityResult");
    openapiFields.add("friendlyDeviceSoftwareVersion");
    openapiFields.add("modelDescription");
    openapiFields.add("volumesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailoverTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailoverTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailoverTarget is not found in the empty JSON string", FailoverTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailoverTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailoverTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      if ((jsonObj.get("deviceLocation") != null && !jsonObj.get("deviceLocation").isJsonNull()) && !jsonObj.get("deviceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceLocation").toString()));
      }
      if ((jsonObj.get("deviceSoftwareVersion") != null && !jsonObj.get("deviceSoftwareVersion").isJsonNull()) && !jsonObj.get("deviceSoftwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSoftwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSoftwareVersion").toString()));
      }
      if ((jsonObj.get("deviceStatus") != null && !jsonObj.get("deviceStatus").isJsonNull()) && !jsonObj.get("deviceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceStatus").toString()));
      }
      // validate the optional field `deviceStatus`
      if (jsonObj.get("deviceStatus") != null && !jsonObj.get("deviceStatus").isJsonNull()) {
        DeviceStatusEnum.validateJsonElement(jsonObj.get("deviceStatus"));
      }
      // validate the optional field `eligibilityResult`
      if (jsonObj.get("eligibilityResult") != null && !jsonObj.get("eligibilityResult").isJsonNull()) {
        TargetEligibilityResult.validateJsonElement(jsonObj.get("eligibilityResult"));
      }
      if ((jsonObj.get("friendlyDeviceSoftwareVersion") != null && !jsonObj.get("friendlyDeviceSoftwareVersion").isJsonNull()) && !jsonObj.get("friendlyDeviceSoftwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyDeviceSoftwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyDeviceSoftwareVersion").toString()));
      }
      if ((jsonObj.get("modelDescription") != null && !jsonObj.get("modelDescription").isJsonNull()) && !jsonObj.get("modelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailoverTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailoverTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailoverTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailoverTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<FailoverTarget>() {
           @Override
           public void write(JsonWriter out, FailoverTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailoverTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailoverTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailoverTarget
   * @throws IOException if the JSON string is invalid with respect to FailoverTarget
   */
  public static FailoverTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailoverTarget.class);
  }

  /**
   * Convert an instance of FailoverTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

