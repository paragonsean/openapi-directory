/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the backup policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupPolicyProperties {
  /**
   * The backup policy creation type. Indicates whether this was created through SaaS or through StorSimple Snapshot Manager.
   */
  @JsonAdapter(BackupPolicyCreationTypeEnum.Adapter.class)
  public enum BackupPolicyCreationTypeEnum {
    BY_SAA_S("BySaaS"),
    
    BY_SSM("BySSM");

    private String value;

    BackupPolicyCreationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupPolicyCreationTypeEnum fromValue(String value) {
      for (BackupPolicyCreationTypeEnum b : BackupPolicyCreationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupPolicyCreationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupPolicyCreationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupPolicyCreationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupPolicyCreationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupPolicyCreationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_POLICY_CREATION_TYPE = "backupPolicyCreationType";
  @SerializedName(SERIALIZED_NAME_BACKUP_POLICY_CREATION_TYPE)
  private BackupPolicyCreationTypeEnum backupPolicyCreationType;

  public static final String SERIALIZED_NAME_LAST_BACKUP_TIME = "lastBackupTime";
  @SerializedName(SERIALIZED_NAME_LAST_BACKUP_TIME)
  private OffsetDateTime lastBackupTime;

  public static final String SERIALIZED_NAME_NEXT_BACKUP_TIME = "nextBackupTime";
  @SerializedName(SERIALIZED_NAME_NEXT_BACKUP_TIME)
  private OffsetDateTime nextBackupTime;

  /**
   * Indicates whether at least one of the schedules in the backup policy is active or not.
   */
  @JsonAdapter(ScheduledBackupStatusEnum.Adapter.class)
  public enum ScheduledBackupStatusEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    ScheduledBackupStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduledBackupStatusEnum fromValue(String value) {
      for (ScheduledBackupStatusEnum b : ScheduledBackupStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduledBackupStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduledBackupStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduledBackupStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScheduledBackupStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScheduledBackupStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULED_BACKUP_STATUS = "scheduledBackupStatus";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_BACKUP_STATUS)
  private ScheduledBackupStatusEnum scheduledBackupStatus;

  public static final String SERIALIZED_NAME_SCHEDULES_COUNT = "schedulesCount";
  @SerializedName(SERIALIZED_NAME_SCHEDULES_COUNT)
  private Long schedulesCount;

  public static final String SERIALIZED_NAME_SSM_HOST_NAME = "ssmHostName";
  @SerializedName(SERIALIZED_NAME_SSM_HOST_NAME)
  private String ssmHostName;

  public static final String SERIALIZED_NAME_VOLUME_IDS = "volumeIds";
  @SerializedName(SERIALIZED_NAME_VOLUME_IDS)
  private List<String> volumeIds = new ArrayList<>();

  public BackupPolicyProperties() {
  }

  public BackupPolicyProperties(
     BackupPolicyCreationTypeEnum backupPolicyCreationType, 
     OffsetDateTime lastBackupTime, 
     OffsetDateTime nextBackupTime, 
     ScheduledBackupStatusEnum scheduledBackupStatus, 
     Long schedulesCount, 
     String ssmHostName
  ) {
    this();
    this.backupPolicyCreationType = backupPolicyCreationType;
    this.lastBackupTime = lastBackupTime;
    this.nextBackupTime = nextBackupTime;
    this.scheduledBackupStatus = scheduledBackupStatus;
    this.schedulesCount = schedulesCount;
    this.ssmHostName = ssmHostName;
  }

  /**
   * The backup policy creation type. Indicates whether this was created through SaaS or through StorSimple Snapshot Manager.
   * @return backupPolicyCreationType
   */
  @javax.annotation.Nullable
  public BackupPolicyCreationTypeEnum getBackupPolicyCreationType() {
    return backupPolicyCreationType;
  }



  /**
   * The time of the last backup for the backup policy.
   * @return lastBackupTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastBackupTime() {
    return lastBackupTime;
  }



  /**
   * The time of the next backup for the backup policy.
   * @return nextBackupTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextBackupTime() {
    return nextBackupTime;
  }



  /**
   * Indicates whether at least one of the schedules in the backup policy is active or not.
   * @return scheduledBackupStatus
   */
  @javax.annotation.Nullable
  public ScheduledBackupStatusEnum getScheduledBackupStatus() {
    return scheduledBackupStatus;
  }



  /**
   * The count of schedules the backup policy contains.
   * @return schedulesCount
   */
  @javax.annotation.Nullable
  public Long getSchedulesCount() {
    return schedulesCount;
  }



  /**
   * If the backup policy was created by StorSimple Snapshot Manager, then this field indicates the hostname of the StorSimple Snapshot Manager.
   * @return ssmHostName
   */
  @javax.annotation.Nullable
  public String getSsmHostName() {
    return ssmHostName;
  }



  public BackupPolicyProperties volumeIds(List<String> volumeIds) {
    this.volumeIds = volumeIds;
    return this;
  }

  public BackupPolicyProperties addVolumeIdsItem(String volumeIdsItem) {
    if (this.volumeIds == null) {
      this.volumeIds = new ArrayList<>();
    }
    this.volumeIds.add(volumeIdsItem);
    return this;
  }

  /**
   * The path IDs of the volumes which are part of the backup policy.
   * @return volumeIds
   */
  @javax.annotation.Nonnull
  public List<String> getVolumeIds() {
    return volumeIds;
  }

  public void setVolumeIds(List<String> volumeIds) {
    this.volumeIds = volumeIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupPolicyProperties backupPolicyProperties = (BackupPolicyProperties) o;
    return Objects.equals(this.backupPolicyCreationType, backupPolicyProperties.backupPolicyCreationType) &&
        Objects.equals(this.lastBackupTime, backupPolicyProperties.lastBackupTime) &&
        Objects.equals(this.nextBackupTime, backupPolicyProperties.nextBackupTime) &&
        Objects.equals(this.scheduledBackupStatus, backupPolicyProperties.scheduledBackupStatus) &&
        Objects.equals(this.schedulesCount, backupPolicyProperties.schedulesCount) &&
        Objects.equals(this.ssmHostName, backupPolicyProperties.ssmHostName) &&
        Objects.equals(this.volumeIds, backupPolicyProperties.volumeIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupPolicyCreationType, lastBackupTime, nextBackupTime, scheduledBackupStatus, schedulesCount, ssmHostName, volumeIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupPolicyProperties {\n");
    sb.append("    backupPolicyCreationType: ").append(toIndentedString(backupPolicyCreationType)).append("\n");
    sb.append("    lastBackupTime: ").append(toIndentedString(lastBackupTime)).append("\n");
    sb.append("    nextBackupTime: ").append(toIndentedString(nextBackupTime)).append("\n");
    sb.append("    scheduledBackupStatus: ").append(toIndentedString(scheduledBackupStatus)).append("\n");
    sb.append("    schedulesCount: ").append(toIndentedString(schedulesCount)).append("\n");
    sb.append("    ssmHostName: ").append(toIndentedString(ssmHostName)).append("\n");
    sb.append("    volumeIds: ").append(toIndentedString(volumeIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupPolicyCreationType");
    openapiFields.add("lastBackupTime");
    openapiFields.add("nextBackupTime");
    openapiFields.add("scheduledBackupStatus");
    openapiFields.add("schedulesCount");
    openapiFields.add("ssmHostName");
    openapiFields.add("volumeIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("volumeIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupPolicyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupPolicyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupPolicyProperties is not found in the empty JSON string", BackupPolicyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupPolicyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupPolicyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupPolicyProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupPolicyCreationType") != null && !jsonObj.get("backupPolicyCreationType").isJsonNull()) && !jsonObj.get("backupPolicyCreationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupPolicyCreationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupPolicyCreationType").toString()));
      }
      // validate the optional field `backupPolicyCreationType`
      if (jsonObj.get("backupPolicyCreationType") != null && !jsonObj.get("backupPolicyCreationType").isJsonNull()) {
        BackupPolicyCreationTypeEnum.validateJsonElement(jsonObj.get("backupPolicyCreationType"));
      }
      if ((jsonObj.get("scheduledBackupStatus") != null && !jsonObj.get("scheduledBackupStatus").isJsonNull()) && !jsonObj.get("scheduledBackupStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledBackupStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledBackupStatus").toString()));
      }
      // validate the optional field `scheduledBackupStatus`
      if (jsonObj.get("scheduledBackupStatus") != null && !jsonObj.get("scheduledBackupStatus").isJsonNull()) {
        ScheduledBackupStatusEnum.validateJsonElement(jsonObj.get("scheduledBackupStatus"));
      }
      if ((jsonObj.get("ssmHostName") != null && !jsonObj.get("ssmHostName").isJsonNull()) && !jsonObj.get("ssmHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssmHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssmHostName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("volumeIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("volumeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeIds` to be an array in the JSON string but got `%s`", jsonObj.get("volumeIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupPolicyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupPolicyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupPolicyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupPolicyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupPolicyProperties>() {
           @Override
           public void write(JsonWriter out, BackupPolicyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupPolicyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupPolicyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupPolicyProperties
   * @throws IOException if the JSON string is invalid with respect to BackupPolicyProperties
   */
  public static BackupPolicyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupPolicyProperties.class);
  }

  /**
   * Convert an instance of BackupPolicyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

