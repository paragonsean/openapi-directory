/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DNSSettings;
import org.openapitools.client.model.NetworkAdapterList;
import org.openapitools.client.model.WebproxySettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the network settings of device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkSettingsProperties {
  public static final String SERIALIZED_NAME_DNS_SETTINGS = "dnsSettings";
  @SerializedName(SERIALIZED_NAME_DNS_SETTINGS)
  private DNSSettings dnsSettings;

  public static final String SERIALIZED_NAME_NETWORK_ADAPTERS = "networkAdapters";
  @SerializedName(SERIALIZED_NAME_NETWORK_ADAPTERS)
  private NetworkAdapterList networkAdapters;

  public static final String SERIALIZED_NAME_WEBPROXY_SETTINGS = "webproxySettings";
  @SerializedName(SERIALIZED_NAME_WEBPROXY_SETTINGS)
  private WebproxySettings webproxySettings;

  public NetworkSettingsProperties() {
  }

  public NetworkSettingsProperties dnsSettings(DNSSettings dnsSettings) {
    this.dnsSettings = dnsSettings;
    return this;
  }

  /**
   * Get dnsSettings
   * @return dnsSettings
   */
  @javax.annotation.Nonnull
  public DNSSettings getDnsSettings() {
    return dnsSettings;
  }

  public void setDnsSettings(DNSSettings dnsSettings) {
    this.dnsSettings = dnsSettings;
  }


  public NetworkSettingsProperties networkAdapters(NetworkAdapterList networkAdapters) {
    this.networkAdapters = networkAdapters;
    return this;
  }

  /**
   * Get networkAdapters
   * @return networkAdapters
   */
  @javax.annotation.Nonnull
  public NetworkAdapterList getNetworkAdapters() {
    return networkAdapters;
  }

  public void setNetworkAdapters(NetworkAdapterList networkAdapters) {
    this.networkAdapters = networkAdapters;
  }


  public NetworkSettingsProperties webproxySettings(WebproxySettings webproxySettings) {
    this.webproxySettings = webproxySettings;
    return this;
  }

  /**
   * Get webproxySettings
   * @return webproxySettings
   */
  @javax.annotation.Nonnull
  public WebproxySettings getWebproxySettings() {
    return webproxySettings;
  }

  public void setWebproxySettings(WebproxySettings webproxySettings) {
    this.webproxySettings = webproxySettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkSettingsProperties networkSettingsProperties = (NetworkSettingsProperties) o;
    return Objects.equals(this.dnsSettings, networkSettingsProperties.dnsSettings) &&
        Objects.equals(this.networkAdapters, networkSettingsProperties.networkAdapters) &&
        Objects.equals(this.webproxySettings, networkSettingsProperties.webproxySettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsSettings, networkAdapters, webproxySettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkSettingsProperties {\n");
    sb.append("    dnsSettings: ").append(toIndentedString(dnsSettings)).append("\n");
    sb.append("    networkAdapters: ").append(toIndentedString(networkAdapters)).append("\n");
    sb.append("    webproxySettings: ").append(toIndentedString(webproxySettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsSettings");
    openapiFields.add("networkAdapters");
    openapiFields.add("webproxySettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dnsSettings");
    openapiRequiredFields.add("networkAdapters");
    openapiRequiredFields.add("webproxySettings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkSettingsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkSettingsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkSettingsProperties is not found in the empty JSON string", NetworkSettingsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkSettingsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkSettingsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NetworkSettingsProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dnsSettings`
      DNSSettings.validateJsonElement(jsonObj.get("dnsSettings"));
      // validate the required field `networkAdapters`
      NetworkAdapterList.validateJsonElement(jsonObj.get("networkAdapters"));
      // validate the required field `webproxySettings`
      WebproxySettings.validateJsonElement(jsonObj.get("webproxySettings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkSettingsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkSettingsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkSettingsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkSettingsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkSettingsProperties>() {
           @Override
           public void write(JsonWriter out, NetworkSettingsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkSettingsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkSettingsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkSettingsProperties
   * @throws IOException if the JSON string is invalid with respect to NetworkSettingsProperties
   */
  public static NetworkSettingsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkSettingsProperties.class);
  }

  /**
   * Convert an instance of NetworkSettingsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

