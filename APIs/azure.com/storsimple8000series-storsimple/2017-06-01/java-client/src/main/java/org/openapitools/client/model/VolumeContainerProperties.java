/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AsymmetricEncryptedSecret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of volume container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeContainerProperties {
  public static final String SERIALIZED_NAME_BAND_WIDTH_RATE_IN_MBPS = "bandWidthRateInMbps";
  @SerializedName(SERIALIZED_NAME_BAND_WIDTH_RATE_IN_MBPS)
  private Integer bandWidthRateInMbps;

  public static final String SERIALIZED_NAME_BANDWIDTH_SETTING_ID = "bandwidthSettingId";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_SETTING_ID)
  private String bandwidthSettingId;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private AsymmetricEncryptedSecret encryptionKey;

  /**
   * The flag to denote whether encryption is enabled or not.
   */
  @JsonAdapter(EncryptionStatusEnum.Adapter.class)
  public enum EncryptionStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EncryptionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionStatusEnum fromValue(String value) {
      for (EncryptionStatusEnum b : EncryptionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_STATUS = "encryptionStatus";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_STATUS)
  private EncryptionStatusEnum encryptionStatus;

  /**
   * The owner ship status of the volume container. Only when the status is \&quot;NotOwned\&quot;, the delete operation on the volume container is permitted.
   */
  @JsonAdapter(OwnerShipStatusEnum.Adapter.class)
  public enum OwnerShipStatusEnum {
    OWNED("Owned"),
    
    NOT_OWNED("NotOwned");

    private String value;

    OwnerShipStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerShipStatusEnum fromValue(String value) {
      for (OwnerShipStatusEnum b : OwnerShipStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerShipStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerShipStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerShipStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerShipStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerShipStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER_SHIP_STATUS = "ownerShipStatus";
  @SerializedName(SERIALIZED_NAME_OWNER_SHIP_STATUS)
  private OwnerShipStatusEnum ownerShipStatus;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_CREDENTIAL_ID = "storageAccountCredentialId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_CREDENTIAL_ID)
  private String storageAccountCredentialId;

  public static final String SERIALIZED_NAME_TOTAL_CLOUD_STORAGE_USAGE_IN_BYTES = "totalCloudStorageUsageInBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_CLOUD_STORAGE_USAGE_IN_BYTES)
  private Long totalCloudStorageUsageInBytes;

  public static final String SERIALIZED_NAME_VOLUME_COUNT = "volumeCount";
  @SerializedName(SERIALIZED_NAME_VOLUME_COUNT)
  private Integer volumeCount;

  public VolumeContainerProperties() {
  }

  public VolumeContainerProperties(
     EncryptionStatusEnum encryptionStatus, 
     OwnerShipStatusEnum ownerShipStatus, 
     Long totalCloudStorageUsageInBytes, 
     Integer volumeCount
  ) {
    this();
    this.encryptionStatus = encryptionStatus;
    this.ownerShipStatus = ownerShipStatus;
    this.totalCloudStorageUsageInBytes = totalCloudStorageUsageInBytes;
    this.volumeCount = volumeCount;
  }

  public VolumeContainerProperties bandWidthRateInMbps(Integer bandWidthRateInMbps) {
    this.bandWidthRateInMbps = bandWidthRateInMbps;
    return this;
  }

  /**
   * The bandwidth-rate set on the volume container.
   * @return bandWidthRateInMbps
   */
  @javax.annotation.Nullable
  public Integer getBandWidthRateInMbps() {
    return bandWidthRateInMbps;
  }

  public void setBandWidthRateInMbps(Integer bandWidthRateInMbps) {
    this.bandWidthRateInMbps = bandWidthRateInMbps;
  }


  public VolumeContainerProperties bandwidthSettingId(String bandwidthSettingId) {
    this.bandwidthSettingId = bandwidthSettingId;
    return this;
  }

  /**
   * The ID of the bandwidth setting associated with the volume container.
   * @return bandwidthSettingId
   */
  @javax.annotation.Nullable
  public String getBandwidthSettingId() {
    return bandwidthSettingId;
  }

  public void setBandwidthSettingId(String bandwidthSettingId) {
    this.bandwidthSettingId = bandwidthSettingId;
  }


  public VolumeContainerProperties encryptionKey(AsymmetricEncryptedSecret encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public AsymmetricEncryptedSecret getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(AsymmetricEncryptedSecret encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  /**
   * The flag to denote whether encryption is enabled or not.
   * @return encryptionStatus
   */
  @javax.annotation.Nullable
  public EncryptionStatusEnum getEncryptionStatus() {
    return encryptionStatus;
  }



  /**
   * The owner ship status of the volume container. Only when the status is \&quot;NotOwned\&quot;, the delete operation on the volume container is permitted.
   * @return ownerShipStatus
   */
  @javax.annotation.Nullable
  public OwnerShipStatusEnum getOwnerShipStatus() {
    return ownerShipStatus;
  }



  public VolumeContainerProperties storageAccountCredentialId(String storageAccountCredentialId) {
    this.storageAccountCredentialId = storageAccountCredentialId;
    return this;
  }

  /**
   * The path ID of storage account associated with the volume container.
   * @return storageAccountCredentialId
   */
  @javax.annotation.Nonnull
  public String getStorageAccountCredentialId() {
    return storageAccountCredentialId;
  }

  public void setStorageAccountCredentialId(String storageAccountCredentialId) {
    this.storageAccountCredentialId = storageAccountCredentialId;
  }


  /**
   * The total cloud storage for the volume container.
   * @return totalCloudStorageUsageInBytes
   */
  @javax.annotation.Nullable
  public Long getTotalCloudStorageUsageInBytes() {
    return totalCloudStorageUsageInBytes;
  }



  /**
   * The number of volumes in the volume Container.
   * @return volumeCount
   */
  @javax.annotation.Nullable
  public Integer getVolumeCount() {
    return volumeCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeContainerProperties volumeContainerProperties = (VolumeContainerProperties) o;
    return Objects.equals(this.bandWidthRateInMbps, volumeContainerProperties.bandWidthRateInMbps) &&
        Objects.equals(this.bandwidthSettingId, volumeContainerProperties.bandwidthSettingId) &&
        Objects.equals(this.encryptionKey, volumeContainerProperties.encryptionKey) &&
        Objects.equals(this.encryptionStatus, volumeContainerProperties.encryptionStatus) &&
        Objects.equals(this.ownerShipStatus, volumeContainerProperties.ownerShipStatus) &&
        Objects.equals(this.storageAccountCredentialId, volumeContainerProperties.storageAccountCredentialId) &&
        Objects.equals(this.totalCloudStorageUsageInBytes, volumeContainerProperties.totalCloudStorageUsageInBytes) &&
        Objects.equals(this.volumeCount, volumeContainerProperties.volumeCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandWidthRateInMbps, bandwidthSettingId, encryptionKey, encryptionStatus, ownerShipStatus, storageAccountCredentialId, totalCloudStorageUsageInBytes, volumeCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeContainerProperties {\n");
    sb.append("    bandWidthRateInMbps: ").append(toIndentedString(bandWidthRateInMbps)).append("\n");
    sb.append("    bandwidthSettingId: ").append(toIndentedString(bandwidthSettingId)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    encryptionStatus: ").append(toIndentedString(encryptionStatus)).append("\n");
    sb.append("    ownerShipStatus: ").append(toIndentedString(ownerShipStatus)).append("\n");
    sb.append("    storageAccountCredentialId: ").append(toIndentedString(storageAccountCredentialId)).append("\n");
    sb.append("    totalCloudStorageUsageInBytes: ").append(toIndentedString(totalCloudStorageUsageInBytes)).append("\n");
    sb.append("    volumeCount: ").append(toIndentedString(volumeCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandWidthRateInMbps");
    openapiFields.add("bandwidthSettingId");
    openapiFields.add("encryptionKey");
    openapiFields.add("encryptionStatus");
    openapiFields.add("ownerShipStatus");
    openapiFields.add("storageAccountCredentialId");
    openapiFields.add("totalCloudStorageUsageInBytes");
    openapiFields.add("volumeCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("storageAccountCredentialId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeContainerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeContainerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeContainerProperties is not found in the empty JSON string", VolumeContainerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeContainerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeContainerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VolumeContainerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bandwidthSettingId") != null && !jsonObj.get("bandwidthSettingId").isJsonNull()) && !jsonObj.get("bandwidthSettingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidthSettingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidthSettingId").toString()));
      }
      // validate the optional field `encryptionKey`
      if (jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) {
        AsymmetricEncryptedSecret.validateJsonElement(jsonObj.get("encryptionKey"));
      }
      if ((jsonObj.get("encryptionStatus") != null && !jsonObj.get("encryptionStatus").isJsonNull()) && !jsonObj.get("encryptionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionStatus").toString()));
      }
      // validate the optional field `encryptionStatus`
      if (jsonObj.get("encryptionStatus") != null && !jsonObj.get("encryptionStatus").isJsonNull()) {
        EncryptionStatusEnum.validateJsonElement(jsonObj.get("encryptionStatus"));
      }
      if ((jsonObj.get("ownerShipStatus") != null && !jsonObj.get("ownerShipStatus").isJsonNull()) && !jsonObj.get("ownerShipStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerShipStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerShipStatus").toString()));
      }
      // validate the optional field `ownerShipStatus`
      if (jsonObj.get("ownerShipStatus") != null && !jsonObj.get("ownerShipStatus").isJsonNull()) {
        OwnerShipStatusEnum.validateJsonElement(jsonObj.get("ownerShipStatus"));
      }
      if (!jsonObj.get("storageAccountCredentialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountCredentialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountCredentialId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeContainerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeContainerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeContainerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeContainerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeContainerProperties>() {
           @Override
           public void write(JsonWriter out, VolumeContainerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeContainerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeContainerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeContainerProperties
   * @throws IOException if the JSON string is invalid with respect to VolumeContainerProperties
   */
  public static VolumeContainerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeContainerProperties.class);
  }

  /**
   * Convert an instance of VolumeContainerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

