/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of time settings of a device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSettingsProperties {
  public static final String SERIALIZED_NAME_PRIMARY_TIME_SERVER = "primaryTimeServer";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TIME_SERVER)
  private String primaryTimeServer;

  public static final String SERIALIZED_NAME_SECONDARY_TIME_SERVER = "secondaryTimeServer";
  @SerializedName(SERIALIZED_NAME_SECONDARY_TIME_SERVER)
  private List<String> secondaryTimeServer = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public TimeSettingsProperties() {
  }

  public TimeSettingsProperties primaryTimeServer(String primaryTimeServer) {
    this.primaryTimeServer = primaryTimeServer;
    return this;
  }

  /**
   * The primary Network Time Protocol (NTP) server name, like &#39;time.windows.com&#39;.
   * @return primaryTimeServer
   */
  @javax.annotation.Nullable
  public String getPrimaryTimeServer() {
    return primaryTimeServer;
  }

  public void setPrimaryTimeServer(String primaryTimeServer) {
    this.primaryTimeServer = primaryTimeServer;
  }


  public TimeSettingsProperties secondaryTimeServer(List<String> secondaryTimeServer) {
    this.secondaryTimeServer = secondaryTimeServer;
    return this;
  }

  public TimeSettingsProperties addSecondaryTimeServerItem(String secondaryTimeServerItem) {
    if (this.secondaryTimeServer == null) {
      this.secondaryTimeServer = new ArrayList<>();
    }
    this.secondaryTimeServer.add(secondaryTimeServerItem);
    return this;
  }

  /**
   * The secondary Network Time Protocol (NTP) server name, like &#39;time.contoso.com&#39;. It&#39;s optional.
   * @return secondaryTimeServer
   */
  @javax.annotation.Nullable
  public List<String> getSecondaryTimeServer() {
    return secondaryTimeServer;
  }

  public void setSecondaryTimeServer(List<String> secondaryTimeServer) {
    this.secondaryTimeServer = secondaryTimeServer;
  }


  public TimeSettingsProperties timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The timezone of device, like &#39;(UTC -06:00) Central America&#39;
   * @return timeZone
   */
  @javax.annotation.Nonnull
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSettingsProperties timeSettingsProperties = (TimeSettingsProperties) o;
    return Objects.equals(this.primaryTimeServer, timeSettingsProperties.primaryTimeServer) &&
        Objects.equals(this.secondaryTimeServer, timeSettingsProperties.secondaryTimeServer) &&
        Objects.equals(this.timeZone, timeSettingsProperties.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryTimeServer, secondaryTimeServer, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSettingsProperties {\n");
    sb.append("    primaryTimeServer: ").append(toIndentedString(primaryTimeServer)).append("\n");
    sb.append("    secondaryTimeServer: ").append(toIndentedString(secondaryTimeServer)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primaryTimeServer");
    openapiFields.add("secondaryTimeServer");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timeZone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSettingsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSettingsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSettingsProperties is not found in the empty JSON string", TimeSettingsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSettingsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSettingsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeSettingsProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("primaryTimeServer") != null && !jsonObj.get("primaryTimeServer").isJsonNull()) && !jsonObj.get("primaryTimeServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryTimeServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryTimeServer").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secondaryTimeServer") != null && !jsonObj.get("secondaryTimeServer").isJsonNull() && !jsonObj.get("secondaryTimeServer").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryTimeServer` to be an array in the JSON string but got `%s`", jsonObj.get("secondaryTimeServer").toString()));
      }
      if (!jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSettingsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSettingsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSettingsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSettingsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSettingsProperties>() {
           @Override
           public void write(JsonWriter out, TimeSettingsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSettingsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSettingsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSettingsProperties
   * @throws IOException if the JSON string is invalid with respect to TimeSettingsProperties
   */
  public static TimeSettingsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSettingsProperties.class);
  }

  /**
   * Convert an instance of TimeSettingsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

