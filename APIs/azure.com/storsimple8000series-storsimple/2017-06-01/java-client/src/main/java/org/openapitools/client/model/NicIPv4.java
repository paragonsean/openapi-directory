/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details related to the IPv4 address configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NicIPv4 {
  public static final String SERIALIZED_NAME_CONTROLLER0_IPV4_ADDRESS = "controller0Ipv4Address";
  @SerializedName(SERIALIZED_NAME_CONTROLLER0_IPV4_ADDRESS)
  private String controller0Ipv4Address;

  public static final String SERIALIZED_NAME_CONTROLLER1_IPV4_ADDRESS = "controller1Ipv4Address";
  @SerializedName(SERIALIZED_NAME_CONTROLLER1_IPV4_ADDRESS)
  private String controller1Ipv4Address;

  public static final String SERIALIZED_NAME_IPV4_ADDRESS = "ipv4Address";
  @SerializedName(SERIALIZED_NAME_IPV4_ADDRESS)
  private String ipv4Address;

  public static final String SERIALIZED_NAME_IPV4_GATEWAY = "ipv4Gateway";
  @SerializedName(SERIALIZED_NAME_IPV4_GATEWAY)
  private String ipv4Gateway;

  public static final String SERIALIZED_NAME_IPV4_NETMASK = "ipv4Netmask";
  @SerializedName(SERIALIZED_NAME_IPV4_NETMASK)
  private String ipv4Netmask;

  public NicIPv4() {
  }

  public NicIPv4 controller0Ipv4Address(String controller0Ipv4Address) {
    this.controller0Ipv4Address = controller0Ipv4Address;
    return this;
  }

  /**
   * The IPv4 address of Controller0.
   * @return controller0Ipv4Address
   */
  @javax.annotation.Nullable
  public String getController0Ipv4Address() {
    return controller0Ipv4Address;
  }

  public void setController0Ipv4Address(String controller0Ipv4Address) {
    this.controller0Ipv4Address = controller0Ipv4Address;
  }


  public NicIPv4 controller1Ipv4Address(String controller1Ipv4Address) {
    this.controller1Ipv4Address = controller1Ipv4Address;
    return this;
  }

  /**
   * The IPv4 address of Controller1.
   * @return controller1Ipv4Address
   */
  @javax.annotation.Nullable
  public String getController1Ipv4Address() {
    return controller1Ipv4Address;
  }

  public void setController1Ipv4Address(String controller1Ipv4Address) {
    this.controller1Ipv4Address = controller1Ipv4Address;
  }


  public NicIPv4 ipv4Address(String ipv4Address) {
    this.ipv4Address = ipv4Address;
    return this;
  }

  /**
   * The IPv4 address of the network adapter.
   * @return ipv4Address
   */
  @javax.annotation.Nullable
  public String getIpv4Address() {
    return ipv4Address;
  }

  public void setIpv4Address(String ipv4Address) {
    this.ipv4Address = ipv4Address;
  }


  public NicIPv4 ipv4Gateway(String ipv4Gateway) {
    this.ipv4Gateway = ipv4Gateway;
    return this;
  }

  /**
   * The IPv4 gateway of the network adapter.
   * @return ipv4Gateway
   */
  @javax.annotation.Nullable
  public String getIpv4Gateway() {
    return ipv4Gateway;
  }

  public void setIpv4Gateway(String ipv4Gateway) {
    this.ipv4Gateway = ipv4Gateway;
  }


  public NicIPv4 ipv4Netmask(String ipv4Netmask) {
    this.ipv4Netmask = ipv4Netmask;
    return this;
  }

  /**
   * The IPv4 netmask of the network adapter.
   * @return ipv4Netmask
   */
  @javax.annotation.Nullable
  public String getIpv4Netmask() {
    return ipv4Netmask;
  }

  public void setIpv4Netmask(String ipv4Netmask) {
    this.ipv4Netmask = ipv4Netmask;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NicIPv4 nicIPv4 = (NicIPv4) o;
    return Objects.equals(this.controller0Ipv4Address, nicIPv4.controller0Ipv4Address) &&
        Objects.equals(this.controller1Ipv4Address, nicIPv4.controller1Ipv4Address) &&
        Objects.equals(this.ipv4Address, nicIPv4.ipv4Address) &&
        Objects.equals(this.ipv4Gateway, nicIPv4.ipv4Gateway) &&
        Objects.equals(this.ipv4Netmask, nicIPv4.ipv4Netmask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controller0Ipv4Address, controller1Ipv4Address, ipv4Address, ipv4Gateway, ipv4Netmask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NicIPv4 {\n");
    sb.append("    controller0Ipv4Address: ").append(toIndentedString(controller0Ipv4Address)).append("\n");
    sb.append("    controller1Ipv4Address: ").append(toIndentedString(controller1Ipv4Address)).append("\n");
    sb.append("    ipv4Address: ").append(toIndentedString(ipv4Address)).append("\n");
    sb.append("    ipv4Gateway: ").append(toIndentedString(ipv4Gateway)).append("\n");
    sb.append("    ipv4Netmask: ").append(toIndentedString(ipv4Netmask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controller0Ipv4Address");
    openapiFields.add("controller1Ipv4Address");
    openapiFields.add("ipv4Address");
    openapiFields.add("ipv4Gateway");
    openapiFields.add("ipv4Netmask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NicIPv4
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NicIPv4.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NicIPv4 is not found in the empty JSON string", NicIPv4.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NicIPv4.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NicIPv4` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("controller0Ipv4Address") != null && !jsonObj.get("controller0Ipv4Address").isJsonNull()) && !jsonObj.get("controller0Ipv4Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controller0Ipv4Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controller0Ipv4Address").toString()));
      }
      if ((jsonObj.get("controller1Ipv4Address") != null && !jsonObj.get("controller1Ipv4Address").isJsonNull()) && !jsonObj.get("controller1Ipv4Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controller1Ipv4Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controller1Ipv4Address").toString()));
      }
      if ((jsonObj.get("ipv4Address") != null && !jsonObj.get("ipv4Address").isJsonNull()) && !jsonObj.get("ipv4Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv4Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv4Address").toString()));
      }
      if ((jsonObj.get("ipv4Gateway") != null && !jsonObj.get("ipv4Gateway").isJsonNull()) && !jsonObj.get("ipv4Gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv4Gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv4Gateway").toString()));
      }
      if ((jsonObj.get("ipv4Netmask") != null && !jsonObj.get("ipv4Netmask").isJsonNull()) && !jsonObj.get("ipv4Netmask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv4Netmask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv4Netmask").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NicIPv4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NicIPv4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NicIPv4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NicIPv4.class));

       return (TypeAdapter<T>) new TypeAdapter<NicIPv4>() {
           @Override
           public void write(JsonWriter out, NicIPv4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NicIPv4 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NicIPv4 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NicIPv4
   * @throws IOException if the JSON string is invalid with respect to NicIPv4
   */
  public static NicIPv4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NicIPv4.class);
  }

  /**
   * Convert an instance of NicIPv4 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

