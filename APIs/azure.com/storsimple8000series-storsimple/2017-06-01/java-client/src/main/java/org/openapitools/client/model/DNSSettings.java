/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The DNS(Domain Name Server) settings of a device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DNSSettings {
  public static final String SERIALIZED_NAME_PRIMARY_DNS_SERVER = "primaryDnsServer";
  @SerializedName(SERIALIZED_NAME_PRIMARY_DNS_SERVER)
  private String primaryDnsServer;

  public static final String SERIALIZED_NAME_PRIMARY_IPV6_DNS_SERVER = "primaryIpv6DnsServer";
  @SerializedName(SERIALIZED_NAME_PRIMARY_IPV6_DNS_SERVER)
  private String primaryIpv6DnsServer;

  public static final String SERIALIZED_NAME_SECONDARY_DNS_SERVERS = "secondaryDnsServers";
  @SerializedName(SERIALIZED_NAME_SECONDARY_DNS_SERVERS)
  private List<String> secondaryDnsServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECONDARY_IPV6_DNS_SERVERS = "secondaryIpv6DnsServers";
  @SerializedName(SERIALIZED_NAME_SECONDARY_IPV6_DNS_SERVERS)
  private List<String> secondaryIpv6DnsServers = new ArrayList<>();

  public DNSSettings() {
  }

  public DNSSettings primaryDnsServer(String primaryDnsServer) {
    this.primaryDnsServer = primaryDnsServer;
    return this;
  }

  /**
   * The primary IPv4 DNS server for the device
   * @return primaryDnsServer
   */
  @javax.annotation.Nullable
  public String getPrimaryDnsServer() {
    return primaryDnsServer;
  }

  public void setPrimaryDnsServer(String primaryDnsServer) {
    this.primaryDnsServer = primaryDnsServer;
  }


  public DNSSettings primaryIpv6DnsServer(String primaryIpv6DnsServer) {
    this.primaryIpv6DnsServer = primaryIpv6DnsServer;
    return this;
  }

  /**
   * The primary IPv6 DNS server for the device
   * @return primaryIpv6DnsServer
   */
  @javax.annotation.Nullable
  public String getPrimaryIpv6DnsServer() {
    return primaryIpv6DnsServer;
  }

  public void setPrimaryIpv6DnsServer(String primaryIpv6DnsServer) {
    this.primaryIpv6DnsServer = primaryIpv6DnsServer;
  }


  public DNSSettings secondaryDnsServers(List<String> secondaryDnsServers) {
    this.secondaryDnsServers = secondaryDnsServers;
    return this;
  }

  public DNSSettings addSecondaryDnsServersItem(String secondaryDnsServersItem) {
    if (this.secondaryDnsServers == null) {
      this.secondaryDnsServers = new ArrayList<>();
    }
    this.secondaryDnsServers.add(secondaryDnsServersItem);
    return this;
  }

  /**
   * The secondary IPv4 DNS server for the device
   * @return secondaryDnsServers
   */
  @javax.annotation.Nullable
  public List<String> getSecondaryDnsServers() {
    return secondaryDnsServers;
  }

  public void setSecondaryDnsServers(List<String> secondaryDnsServers) {
    this.secondaryDnsServers = secondaryDnsServers;
  }


  public DNSSettings secondaryIpv6DnsServers(List<String> secondaryIpv6DnsServers) {
    this.secondaryIpv6DnsServers = secondaryIpv6DnsServers;
    return this;
  }

  public DNSSettings addSecondaryIpv6DnsServersItem(String secondaryIpv6DnsServersItem) {
    if (this.secondaryIpv6DnsServers == null) {
      this.secondaryIpv6DnsServers = new ArrayList<>();
    }
    this.secondaryIpv6DnsServers.add(secondaryIpv6DnsServersItem);
    return this;
  }

  /**
   * The secondary IPv6 DNS server for the device
   * @return secondaryIpv6DnsServers
   */
  @javax.annotation.Nullable
  public List<String> getSecondaryIpv6DnsServers() {
    return secondaryIpv6DnsServers;
  }

  public void setSecondaryIpv6DnsServers(List<String> secondaryIpv6DnsServers) {
    this.secondaryIpv6DnsServers = secondaryIpv6DnsServers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DNSSettings dnSSettings = (DNSSettings) o;
    return Objects.equals(this.primaryDnsServer, dnSSettings.primaryDnsServer) &&
        Objects.equals(this.primaryIpv6DnsServer, dnSSettings.primaryIpv6DnsServer) &&
        Objects.equals(this.secondaryDnsServers, dnSSettings.secondaryDnsServers) &&
        Objects.equals(this.secondaryIpv6DnsServers, dnSSettings.secondaryIpv6DnsServers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryDnsServer, primaryIpv6DnsServer, secondaryDnsServers, secondaryIpv6DnsServers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DNSSettings {\n");
    sb.append("    primaryDnsServer: ").append(toIndentedString(primaryDnsServer)).append("\n");
    sb.append("    primaryIpv6DnsServer: ").append(toIndentedString(primaryIpv6DnsServer)).append("\n");
    sb.append("    secondaryDnsServers: ").append(toIndentedString(secondaryDnsServers)).append("\n");
    sb.append("    secondaryIpv6DnsServers: ").append(toIndentedString(secondaryIpv6DnsServers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primaryDnsServer");
    openapiFields.add("primaryIpv6DnsServer");
    openapiFields.add("secondaryDnsServers");
    openapiFields.add("secondaryIpv6DnsServers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DNSSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DNSSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DNSSettings is not found in the empty JSON string", DNSSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DNSSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DNSSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("primaryDnsServer") != null && !jsonObj.get("primaryDnsServer").isJsonNull()) && !jsonObj.get("primaryDnsServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryDnsServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryDnsServer").toString()));
      }
      if ((jsonObj.get("primaryIpv6DnsServer") != null && !jsonObj.get("primaryIpv6DnsServer").isJsonNull()) && !jsonObj.get("primaryIpv6DnsServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryIpv6DnsServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryIpv6DnsServer").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secondaryDnsServers") != null && !jsonObj.get("secondaryDnsServers").isJsonNull() && !jsonObj.get("secondaryDnsServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryDnsServers` to be an array in the JSON string but got `%s`", jsonObj.get("secondaryDnsServers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secondaryIpv6DnsServers") != null && !jsonObj.get("secondaryIpv6DnsServers").isJsonNull() && !jsonObj.get("secondaryIpv6DnsServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryIpv6DnsServers` to be an array in the JSON string but got `%s`", jsonObj.get("secondaryIpv6DnsServers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DNSSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DNSSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DNSSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DNSSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DNSSettings>() {
           @Override
           public void write(JsonWriter out, DNSSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DNSSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DNSSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DNSSettings
   * @throws IOException if the JSON string is invalid with respect to DNSSettings
   */
  public static DNSSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DNSSettings.class);
  }

  /**
   * Convert an instance of DNSSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

