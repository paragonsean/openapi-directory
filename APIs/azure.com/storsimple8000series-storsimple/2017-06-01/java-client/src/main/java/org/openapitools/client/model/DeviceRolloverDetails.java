/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The additional device details for the service data encryption key rollover.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceRolloverDetails {
  /**
   * The eligibility status of device for service data encryption key rollover.
   */
  @JsonAdapter(AuthorizationEligibilityEnum.Adapter.class)
  public enum AuthorizationEligibilityEnum {
    IN_ELIGIBLE("InEligible"),
    
    ELIGIBLE("Eligible");

    private String value;

    AuthorizationEligibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationEligibilityEnum fromValue(String value) {
      for (AuthorizationEligibilityEnum b : AuthorizationEligibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationEligibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationEligibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationEligibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationEligibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationEligibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_ELIGIBILITY = "authorizationEligibility";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ELIGIBILITY)
  private AuthorizationEligibilityEnum authorizationEligibility;

  /**
   * The authorization status of the device for service data encryption key rollover.
   */
  @JsonAdapter(AuthorizationStatusEnum.Adapter.class)
  public enum AuthorizationStatusEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    AuthorizationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationStatusEnum fromValue(String value) {
      for (AuthorizationStatusEnum b : AuthorizationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_STATUS = "authorizationStatus";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_STATUS)
  private AuthorizationStatusEnum authorizationStatus;

  /**
   * The reason for inEligibility of device, in case it&#39;s not eligible for service data encryption key rollover.
   */
  @JsonAdapter(InEligibilityReasonEnum.Adapter.class)
  public enum InEligibilityReasonEnum {
    DEVICE_NOT_ONLINE("DeviceNotOnline"),
    
    NOT_SUPPORTED_APPLIANCE("NotSupportedAppliance"),
    
    ROLLOVER_PENDING("RolloverPending");

    private String value;

    InEligibilityReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InEligibilityReasonEnum fromValue(String value) {
      for (InEligibilityReasonEnum b : InEligibilityReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InEligibilityReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InEligibilityReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InEligibilityReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InEligibilityReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InEligibilityReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IN_ELIGIBILITY_REASON = "inEligibilityReason";
  @SerializedName(SERIALIZED_NAME_IN_ELIGIBILITY_REASON)
  private InEligibilityReasonEnum inEligibilityReason;

  public DeviceRolloverDetails() {
  }

  public DeviceRolloverDetails authorizationEligibility(AuthorizationEligibilityEnum authorizationEligibility) {
    this.authorizationEligibility = authorizationEligibility;
    return this;
  }

  /**
   * The eligibility status of device for service data encryption key rollover.
   * @return authorizationEligibility
   */
  @javax.annotation.Nullable
  public AuthorizationEligibilityEnum getAuthorizationEligibility() {
    return authorizationEligibility;
  }

  public void setAuthorizationEligibility(AuthorizationEligibilityEnum authorizationEligibility) {
    this.authorizationEligibility = authorizationEligibility;
  }


  public DeviceRolloverDetails authorizationStatus(AuthorizationStatusEnum authorizationStatus) {
    this.authorizationStatus = authorizationStatus;
    return this;
  }

  /**
   * The authorization status of the device for service data encryption key rollover.
   * @return authorizationStatus
   */
  @javax.annotation.Nullable
  public AuthorizationStatusEnum getAuthorizationStatus() {
    return authorizationStatus;
  }

  public void setAuthorizationStatus(AuthorizationStatusEnum authorizationStatus) {
    this.authorizationStatus = authorizationStatus;
  }


  public DeviceRolloverDetails inEligibilityReason(InEligibilityReasonEnum inEligibilityReason) {
    this.inEligibilityReason = inEligibilityReason;
    return this;
  }

  /**
   * The reason for inEligibility of device, in case it&#39;s not eligible for service data encryption key rollover.
   * @return inEligibilityReason
   */
  @javax.annotation.Nullable
  public InEligibilityReasonEnum getInEligibilityReason() {
    return inEligibilityReason;
  }

  public void setInEligibilityReason(InEligibilityReasonEnum inEligibilityReason) {
    this.inEligibilityReason = inEligibilityReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceRolloverDetails deviceRolloverDetails = (DeviceRolloverDetails) o;
    return Objects.equals(this.authorizationEligibility, deviceRolloverDetails.authorizationEligibility) &&
        Objects.equals(this.authorizationStatus, deviceRolloverDetails.authorizationStatus) &&
        Objects.equals(this.inEligibilityReason, deviceRolloverDetails.inEligibilityReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationEligibility, authorizationStatus, inEligibilityReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceRolloverDetails {\n");
    sb.append("    authorizationEligibility: ").append(toIndentedString(authorizationEligibility)).append("\n");
    sb.append("    authorizationStatus: ").append(toIndentedString(authorizationStatus)).append("\n");
    sb.append("    inEligibilityReason: ").append(toIndentedString(inEligibilityReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationEligibility");
    openapiFields.add("authorizationStatus");
    openapiFields.add("inEligibilityReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceRolloverDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceRolloverDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceRolloverDetails is not found in the empty JSON string", DeviceRolloverDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceRolloverDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceRolloverDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizationEligibility") != null && !jsonObj.get("authorizationEligibility").isJsonNull()) && !jsonObj.get("authorizationEligibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationEligibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationEligibility").toString()));
      }
      // validate the optional field `authorizationEligibility`
      if (jsonObj.get("authorizationEligibility") != null && !jsonObj.get("authorizationEligibility").isJsonNull()) {
        AuthorizationEligibilityEnum.validateJsonElement(jsonObj.get("authorizationEligibility"));
      }
      if ((jsonObj.get("authorizationStatus") != null && !jsonObj.get("authorizationStatus").isJsonNull()) && !jsonObj.get("authorizationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationStatus").toString()));
      }
      // validate the optional field `authorizationStatus`
      if (jsonObj.get("authorizationStatus") != null && !jsonObj.get("authorizationStatus").isJsonNull()) {
        AuthorizationStatusEnum.validateJsonElement(jsonObj.get("authorizationStatus"));
      }
      if ((jsonObj.get("inEligibilityReason") != null && !jsonObj.get("inEligibilityReason").isJsonNull()) && !jsonObj.get("inEligibilityReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inEligibilityReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inEligibilityReason").toString()));
      }
      // validate the optional field `inEligibilityReason`
      if (jsonObj.get("inEligibilityReason") != null && !jsonObj.get("inEligibilityReason").isJsonNull()) {
        InEligibilityReasonEnum.validateJsonElement(jsonObj.get("inEligibilityReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceRolloverDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceRolloverDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceRolloverDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceRolloverDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceRolloverDetails>() {
           @Override
           public void write(JsonWriter out, DeviceRolloverDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceRolloverDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceRolloverDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceRolloverDetails
   * @throws IOException if the JSON string is invalid with respect to DeviceRolloverDetails
   */
  public static DeviceRolloverDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceRolloverDetails.class);
  }

  /**
   * Convert an instance of DeviceRolloverDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

