/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NicIPv4;
import org.openapitools.client.model.NicIPv6;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the network adapter on device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkAdapters {
  /**
   * The ID of the network adapter.
   */
  @JsonAdapter(InterfaceIdEnum.Adapter.class)
  public enum InterfaceIdEnum {
    INVALID("Invalid"),
    
    DATA0("Data0"),
    
    DATA1("Data1"),
    
    DATA2("Data2"),
    
    DATA3("Data3"),
    
    DATA4("Data4"),
    
    DATA5("Data5");

    private String value;

    InterfaceIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterfaceIdEnum fromValue(String value) {
      for (InterfaceIdEnum b : InterfaceIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterfaceIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterfaceIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterfaceIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterfaceIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterfaceIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERFACE_ID = "interfaceId";
  @SerializedName(SERIALIZED_NAME_INTERFACE_ID)
  private InterfaceIdEnum interfaceId;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  /**
   * Value indicating cloud and ISCSI status of network adapter.
   */
  @JsonAdapter(IscsiAndCloudStatusEnum.Adapter.class)
  public enum IscsiAndCloudStatusEnum {
    DISABLED("Disabled"),
    
    ISCSI_ENABLED("IscsiEnabled"),
    
    CLOUD_ENABLED("CloudEnabled"),
    
    ISCSI_AND_CLOUD_ENABLED("IscsiAndCloudEnabled");

    private String value;

    IscsiAndCloudStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IscsiAndCloudStatusEnum fromValue(String value) {
      for (IscsiAndCloudStatusEnum b : IscsiAndCloudStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IscsiAndCloudStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IscsiAndCloudStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IscsiAndCloudStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IscsiAndCloudStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IscsiAndCloudStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISCSI_AND_CLOUD_STATUS = "iscsiAndCloudStatus";
  @SerializedName(SERIALIZED_NAME_ISCSI_AND_CLOUD_STATUS)
  private IscsiAndCloudStatusEnum iscsiAndCloudStatus;

  /**
   * The mode of network adapter, either IPv4, IPv6 or both.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    INVALID("Invalid"),
    
    IPV4("IPV4"),
    
    IPV6("IPV6"),
    
    BOTH("BOTH");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  /**
   * Value indicating status of network adapter.
   */
  @JsonAdapter(NetInterfaceStatusEnum.Adapter.class)
  public enum NetInterfaceStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    NetInterfaceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetInterfaceStatusEnum fromValue(String value) {
      for (NetInterfaceStatusEnum b : NetInterfaceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetInterfaceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetInterfaceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetInterfaceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetInterfaceStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetInterfaceStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NET_INTERFACE_STATUS = "netInterfaceStatus";
  @SerializedName(SERIALIZED_NAME_NET_INTERFACE_STATUS)
  private NetInterfaceStatusEnum netInterfaceStatus;

  public static final String SERIALIZED_NAME_NIC_IPV4_SETTINGS = "nicIpv4Settings";
  @SerializedName(SERIALIZED_NAME_NIC_IPV4_SETTINGS)
  private NicIPv4 nicIpv4Settings;

  public static final String SERIALIZED_NAME_NIC_IPV6_SETTINGS = "nicIpv6Settings";
  @SerializedName(SERIALIZED_NAME_NIC_IPV6_SETTINGS)
  private NicIPv6 nicIpv6Settings;

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Long speed;

  public NetworkAdapters() {
  }

  public NetworkAdapters interfaceId(InterfaceIdEnum interfaceId) {
    this.interfaceId = interfaceId;
    return this;
  }

  /**
   * The ID of the network adapter.
   * @return interfaceId
   */
  @javax.annotation.Nonnull
  public InterfaceIdEnum getInterfaceId() {
    return interfaceId;
  }

  public void setInterfaceId(InterfaceIdEnum interfaceId) {
    this.interfaceId = interfaceId;
  }


  public NetworkAdapters isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Value indicating whether this instance is default.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public NetworkAdapters iscsiAndCloudStatus(IscsiAndCloudStatusEnum iscsiAndCloudStatus) {
    this.iscsiAndCloudStatus = iscsiAndCloudStatus;
    return this;
  }

  /**
   * Value indicating cloud and ISCSI status of network adapter.
   * @return iscsiAndCloudStatus
   */
  @javax.annotation.Nonnull
  public IscsiAndCloudStatusEnum getIscsiAndCloudStatus() {
    return iscsiAndCloudStatus;
  }

  public void setIscsiAndCloudStatus(IscsiAndCloudStatusEnum iscsiAndCloudStatus) {
    this.iscsiAndCloudStatus = iscsiAndCloudStatus;
  }


  public NetworkAdapters mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * The mode of network adapter, either IPv4, IPv6 or both.
   * @return mode
   */
  @javax.annotation.Nonnull
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public NetworkAdapters netInterfaceStatus(NetInterfaceStatusEnum netInterfaceStatus) {
    this.netInterfaceStatus = netInterfaceStatus;
    return this;
  }

  /**
   * Value indicating status of network adapter.
   * @return netInterfaceStatus
   */
  @javax.annotation.Nonnull
  public NetInterfaceStatusEnum getNetInterfaceStatus() {
    return netInterfaceStatus;
  }

  public void setNetInterfaceStatus(NetInterfaceStatusEnum netInterfaceStatus) {
    this.netInterfaceStatus = netInterfaceStatus;
  }


  public NetworkAdapters nicIpv4Settings(NicIPv4 nicIpv4Settings) {
    this.nicIpv4Settings = nicIpv4Settings;
    return this;
  }

  /**
   * Get nicIpv4Settings
   * @return nicIpv4Settings
   */
  @javax.annotation.Nullable
  public NicIPv4 getNicIpv4Settings() {
    return nicIpv4Settings;
  }

  public void setNicIpv4Settings(NicIPv4 nicIpv4Settings) {
    this.nicIpv4Settings = nicIpv4Settings;
  }


  public NetworkAdapters nicIpv6Settings(NicIPv6 nicIpv6Settings) {
    this.nicIpv6Settings = nicIpv6Settings;
    return this;
  }

  /**
   * Get nicIpv6Settings
   * @return nicIpv6Settings
   */
  @javax.annotation.Nullable
  public NicIPv6 getNicIpv6Settings() {
    return nicIpv6Settings;
  }

  public void setNicIpv6Settings(NicIPv6 nicIpv6Settings) {
    this.nicIpv6Settings = nicIpv6Settings;
  }


  public NetworkAdapters speed(Long speed) {
    this.speed = speed;
    return this;
  }

  /**
   * The speed of the network adapter.
   * @return speed
   */
  @javax.annotation.Nullable
  public Long getSpeed() {
    return speed;
  }

  public void setSpeed(Long speed) {
    this.speed = speed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkAdapters networkAdapters = (NetworkAdapters) o;
    return Objects.equals(this.interfaceId, networkAdapters.interfaceId) &&
        Objects.equals(this.isDefault, networkAdapters.isDefault) &&
        Objects.equals(this.iscsiAndCloudStatus, networkAdapters.iscsiAndCloudStatus) &&
        Objects.equals(this.mode, networkAdapters.mode) &&
        Objects.equals(this.netInterfaceStatus, networkAdapters.netInterfaceStatus) &&
        Objects.equals(this.nicIpv4Settings, networkAdapters.nicIpv4Settings) &&
        Objects.equals(this.nicIpv6Settings, networkAdapters.nicIpv6Settings) &&
        Objects.equals(this.speed, networkAdapters.speed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceId, isDefault, iscsiAndCloudStatus, mode, netInterfaceStatus, nicIpv4Settings, nicIpv6Settings, speed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkAdapters {\n");
    sb.append("    interfaceId: ").append(toIndentedString(interfaceId)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    iscsiAndCloudStatus: ").append(toIndentedString(iscsiAndCloudStatus)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    netInterfaceStatus: ").append(toIndentedString(netInterfaceStatus)).append("\n");
    sb.append("    nicIpv4Settings: ").append(toIndentedString(nicIpv4Settings)).append("\n");
    sb.append("    nicIpv6Settings: ").append(toIndentedString(nicIpv6Settings)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interfaceId");
    openapiFields.add("isDefault");
    openapiFields.add("iscsiAndCloudStatus");
    openapiFields.add("mode");
    openapiFields.add("netInterfaceStatus");
    openapiFields.add("nicIpv4Settings");
    openapiFields.add("nicIpv6Settings");
    openapiFields.add("speed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interfaceId");
    openapiRequiredFields.add("iscsiAndCloudStatus");
    openapiRequiredFields.add("mode");
    openapiRequiredFields.add("netInterfaceStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkAdapters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkAdapters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkAdapters is not found in the empty JSON string", NetworkAdapters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkAdapters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkAdapters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NetworkAdapters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("interfaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interfaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interfaceId").toString()));
      }
      // validate the required field `interfaceId`
      InterfaceIdEnum.validateJsonElement(jsonObj.get("interfaceId"));
      if (!jsonObj.get("iscsiAndCloudStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iscsiAndCloudStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iscsiAndCloudStatus").toString()));
      }
      // validate the required field `iscsiAndCloudStatus`
      IscsiAndCloudStatusEnum.validateJsonElement(jsonObj.get("iscsiAndCloudStatus"));
      if (!jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the required field `mode`
      ModeEnum.validateJsonElement(jsonObj.get("mode"));
      if (!jsonObj.get("netInterfaceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `netInterfaceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("netInterfaceStatus").toString()));
      }
      // validate the required field `netInterfaceStatus`
      NetInterfaceStatusEnum.validateJsonElement(jsonObj.get("netInterfaceStatus"));
      // validate the optional field `nicIpv4Settings`
      if (jsonObj.get("nicIpv4Settings") != null && !jsonObj.get("nicIpv4Settings").isJsonNull()) {
        NicIPv4.validateJsonElement(jsonObj.get("nicIpv4Settings"));
      }
      // validate the optional field `nicIpv6Settings`
      if (jsonObj.get("nicIpv6Settings") != null && !jsonObj.get("nicIpv6Settings").isJsonNull()) {
        NicIPv6.validateJsonElement(jsonObj.get("nicIpv6Settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkAdapters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkAdapters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkAdapters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkAdapters.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkAdapters>() {
           @Override
           public void write(JsonWriter out, NetworkAdapters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkAdapters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkAdapters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkAdapters
   * @throws IOException if the JSON string is invalid with respect to NetworkAdapters
   */
  public static NetworkAdapters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkAdapters.class);
  }

  /**
   * Convert an instance of NetworkAdapters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

