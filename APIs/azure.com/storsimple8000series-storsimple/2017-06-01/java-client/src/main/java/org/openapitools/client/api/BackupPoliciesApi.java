/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BackupPolicy;
import org.openapitools.client.model.BackupPolicyList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackupPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackupPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackupPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for backupPoliciesBackupNow
     * @param deviceName The device name (required)
     * @param backupPolicyName The backup policy name. (required)
     * @param backupType The backup Type. This can be cloudSnapshot or localSnapshot. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to backup the backup policy. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully completed backup of the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesBackupNowCall(String deviceName, String backupPolicyName, String backupType, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/backup"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "backupPolicyName" + "}", localVarApiClient.escapeString(backupPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backupType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backupType", backupType));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupPoliciesBackupNowValidateBeforeCall(String deviceName, String backupPolicyName, String backupType, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling backupPoliciesBackupNow(Async)");
        }

        // verify the required parameter 'backupPolicyName' is set
        if (backupPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyName' when calling backupPoliciesBackupNow(Async)");
        }

        // verify the required parameter 'backupType' is set
        if (backupType == null) {
            throw new ApiException("Missing the required parameter 'backupType' when calling backupPoliciesBackupNow(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupPoliciesBackupNow(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupPoliciesBackupNow(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupPoliciesBackupNow(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupPoliciesBackupNow(Async)");
        }

        return backupPoliciesBackupNowCall(deviceName, backupPolicyName, backupType, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Backup the backup policy now.
     * @param deviceName The device name (required)
     * @param backupPolicyName The backup policy name. (required)
     * @param backupType The backup Type. This can be cloudSnapshot or localSnapshot. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to backup the backup policy. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully completed backup of the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public void backupPoliciesBackupNow(String deviceName, String backupPolicyName, String backupType, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        backupPoliciesBackupNowWithHttpInfo(deviceName, backupPolicyName, backupType, subscriptionId, resourceGroupName, managerName, apiVersion);
    }

    /**
     * 
     * Backup the backup policy now.
     * @param deviceName The device name (required)
     * @param backupPolicyName The backup policy name. (required)
     * @param backupType The backup Type. This can be cloudSnapshot or localSnapshot. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to backup the backup policy. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully completed backup of the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> backupPoliciesBackupNowWithHttpInfo(String deviceName, String backupPolicyName, String backupType, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = backupPoliciesBackupNowValidateBeforeCall(deviceName, backupPolicyName, backupType, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Backup the backup policy now.
     * @param deviceName The device name (required)
     * @param backupPolicyName The backup policy name. (required)
     * @param backupType The backup Type. This can be cloudSnapshot or localSnapshot. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to backup the backup policy. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully completed backup of the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesBackupNowAsync(String deviceName, String backupPolicyName, String backupType, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupPoliciesBackupNowValidateBeforeCall(deviceName, backupPolicyName, backupType, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupPoliciesCreateOrUpdate
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of the backup policy to be created/updated. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters The backup policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the backup policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesCreateOrUpdateCall(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BackupPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "backupPolicyName" + "}", localVarApiClient.escapeString(backupPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupPoliciesCreateOrUpdateValidateBeforeCall(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BackupPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling backupPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'backupPolicyName' is set
        if (backupPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyName' when calling backupPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling backupPoliciesCreateOrUpdate(Async)");
        }

        return backupPoliciesCreateOrUpdateCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the backup policy.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of the backup policy to be created/updated. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters The backup policy. (required)
     * @return BackupPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the backup policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public BackupPolicy backupPoliciesCreateOrUpdate(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BackupPolicy parameters) throws ApiException {
        ApiResponse<BackupPolicy> localVarResp = backupPoliciesCreateOrUpdateWithHttpInfo(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the backup policy.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of the backup policy to be created/updated. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters The backup policy. (required)
     * @return ApiResponse&lt;BackupPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the backup policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupPolicy> backupPoliciesCreateOrUpdateWithHttpInfo(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BackupPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = backupPoliciesCreateOrUpdateValidateBeforeCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<BackupPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the backup policy.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of the backup policy to be created/updated. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param parameters The backup policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the backup policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesCreateOrUpdateAsync(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, BackupPolicy parameters, final ApiCallback<BackupPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupPoliciesCreateOrUpdateValidateBeforeCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<BackupPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupPoliciesDelete
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of the backup policy. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the backup policy. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesDeleteCall(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "backupPolicyName" + "}", localVarApiClient.escapeString(backupPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupPoliciesDeleteValidateBeforeCall(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling backupPoliciesDelete(Async)");
        }

        // verify the required parameter 'backupPolicyName' is set
        if (backupPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyName' when calling backupPoliciesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupPoliciesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupPoliciesDelete(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupPoliciesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupPoliciesDelete(Async)");
        }

        return backupPoliciesDeleteCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the backup policy.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of the backup policy. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the backup policy. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public void backupPoliciesDelete(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        backupPoliciesDeleteWithHttpInfo(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion);
    }

    /**
     * 
     * Deletes the backup policy.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of the backup policy. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the backup policy. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> backupPoliciesDeleteWithHttpInfo(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = backupPoliciesDeleteValidateBeforeCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the backup policy.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of the backup policy. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the backup policy. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesDeleteAsync(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupPoliciesDeleteValidateBeforeCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupPoliciesGet
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of backup policy to be fetched. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesGetCall(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "backupPolicyName" + "}", localVarApiClient.escapeString(backupPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupPoliciesGetValidateBeforeCall(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling backupPoliciesGet(Async)");
        }

        // verify the required parameter 'backupPolicyName' is set
        if (backupPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyName' when calling backupPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupPoliciesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupPoliciesGet(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupPoliciesGet(Async)");
        }

        return backupPoliciesGetCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the properties of the specified backup policy name.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of backup policy to be fetched. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return BackupPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public BackupPolicy backupPoliciesGet(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<BackupPolicy> localVarResp = backupPoliciesGetWithHttpInfo(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the properties of the specified backup policy name.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of backup policy to be fetched. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;BackupPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupPolicy> backupPoliciesGetWithHttpInfo(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = backupPoliciesGetValidateBeforeCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the properties of the specified backup policy name.
     * @param deviceName The device name (required)
     * @param backupPolicyName The name of backup policy to be fetched. (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesGetAsync(String deviceName, String backupPolicyName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<BackupPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupPoliciesGetValidateBeforeCall(deviceName, backupPolicyName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupPoliciesListByDevice
     * @param deviceName The device name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backup policies. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesListByDeviceCall(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managerName" + "}", localVarApiClient.escapeString(managerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupPoliciesListByDeviceValidateBeforeCall(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling backupPoliciesListByDevice(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupPoliciesListByDevice(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupPoliciesListByDevice(Async)");
        }

        // verify the required parameter 'managerName' is set
        if (managerName == null) {
            throw new ApiException("Missing the required parameter 'managerName' when calling backupPoliciesListByDevice(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupPoliciesListByDevice(Async)");
        }

        return backupPoliciesListByDeviceCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets all the backup policies in a device.
     * @param deviceName The device name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return BackupPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backup policies. </td><td>  -  </td></tr>
     </table>
     */
    public BackupPolicyList backupPoliciesListByDevice(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        ApiResponse<BackupPolicyList> localVarResp = backupPoliciesListByDeviceWithHttpInfo(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the backup policies in a device.
     * @param deviceName The device name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @return ApiResponse&lt;BackupPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backup policies. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupPolicyList> backupPoliciesListByDeviceWithHttpInfo(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = backupPoliciesListByDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the backup policies in a device.
     * @param deviceName The device name (required)
     * @param subscriptionId The subscription id (required)
     * @param resourceGroupName The resource group name (required)
     * @param managerName The manager name (required)
     * @param apiVersion The api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of backup policies. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPoliciesListByDeviceAsync(String deviceName, String subscriptionId, String resourceGroupName, String managerName, String apiVersion, final ApiCallback<BackupPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupPoliciesListByDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, managerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
