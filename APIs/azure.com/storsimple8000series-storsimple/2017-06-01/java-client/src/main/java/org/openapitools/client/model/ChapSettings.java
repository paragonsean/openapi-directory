/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AsymmetricEncryptedSecret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Challenge-Handshake Authentication Protocol (CHAP) settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChapSettings {
  public static final String SERIALIZED_NAME_INITIATOR_SECRET = "initiatorSecret";
  @SerializedName(SERIALIZED_NAME_INITIATOR_SECRET)
  private AsymmetricEncryptedSecret initiatorSecret;

  public static final String SERIALIZED_NAME_INITIATOR_USER = "initiatorUser";
  @SerializedName(SERIALIZED_NAME_INITIATOR_USER)
  private String initiatorUser;

  public static final String SERIALIZED_NAME_TARGET_SECRET = "targetSecret";
  @SerializedName(SERIALIZED_NAME_TARGET_SECRET)
  private AsymmetricEncryptedSecret targetSecret;

  public static final String SERIALIZED_NAME_TARGET_USER = "targetUser";
  @SerializedName(SERIALIZED_NAME_TARGET_USER)
  private String targetUser;

  public ChapSettings() {
  }

  public ChapSettings initiatorSecret(AsymmetricEncryptedSecret initiatorSecret) {
    this.initiatorSecret = initiatorSecret;
    return this;
  }

  /**
   * Get initiatorSecret
   * @return initiatorSecret
   */
  @javax.annotation.Nullable
  public AsymmetricEncryptedSecret getInitiatorSecret() {
    return initiatorSecret;
  }

  public void setInitiatorSecret(AsymmetricEncryptedSecret initiatorSecret) {
    this.initiatorSecret = initiatorSecret;
  }


  public ChapSettings initiatorUser(String initiatorUser) {
    this.initiatorUser = initiatorUser;
    return this;
  }

  /**
   * The CHAP initiator user.
   * @return initiatorUser
   */
  @javax.annotation.Nullable
  public String getInitiatorUser() {
    return initiatorUser;
  }

  public void setInitiatorUser(String initiatorUser) {
    this.initiatorUser = initiatorUser;
  }


  public ChapSettings targetSecret(AsymmetricEncryptedSecret targetSecret) {
    this.targetSecret = targetSecret;
    return this;
  }

  /**
   * Get targetSecret
   * @return targetSecret
   */
  @javax.annotation.Nullable
  public AsymmetricEncryptedSecret getTargetSecret() {
    return targetSecret;
  }

  public void setTargetSecret(AsymmetricEncryptedSecret targetSecret) {
    this.targetSecret = targetSecret;
  }


  public ChapSettings targetUser(String targetUser) {
    this.targetUser = targetUser;
    return this;
  }

  /**
   * The CHAP target user.
   * @return targetUser
   */
  @javax.annotation.Nullable
  public String getTargetUser() {
    return targetUser;
  }

  public void setTargetUser(String targetUser) {
    this.targetUser = targetUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChapSettings chapSettings = (ChapSettings) o;
    return Objects.equals(this.initiatorSecret, chapSettings.initiatorSecret) &&
        Objects.equals(this.initiatorUser, chapSettings.initiatorUser) &&
        Objects.equals(this.targetSecret, chapSettings.targetSecret) &&
        Objects.equals(this.targetUser, chapSettings.targetUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(initiatorSecret, initiatorUser, targetSecret, targetUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChapSettings {\n");
    sb.append("    initiatorSecret: ").append(toIndentedString(initiatorSecret)).append("\n");
    sb.append("    initiatorUser: ").append(toIndentedString(initiatorUser)).append("\n");
    sb.append("    targetSecret: ").append(toIndentedString(targetSecret)).append("\n");
    sb.append("    targetUser: ").append(toIndentedString(targetUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("initiatorSecret");
    openapiFields.add("initiatorUser");
    openapiFields.add("targetSecret");
    openapiFields.add("targetUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChapSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChapSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChapSettings is not found in the empty JSON string", ChapSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChapSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChapSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `initiatorSecret`
      if (jsonObj.get("initiatorSecret") != null && !jsonObj.get("initiatorSecret").isJsonNull()) {
        AsymmetricEncryptedSecret.validateJsonElement(jsonObj.get("initiatorSecret"));
      }
      if ((jsonObj.get("initiatorUser") != null && !jsonObj.get("initiatorUser").isJsonNull()) && !jsonObj.get("initiatorUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiatorUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiatorUser").toString()));
      }
      // validate the optional field `targetSecret`
      if (jsonObj.get("targetSecret") != null && !jsonObj.get("targetSecret").isJsonNull()) {
        AsymmetricEncryptedSecret.validateJsonElement(jsonObj.get("targetSecret"));
      }
      if ((jsonObj.get("targetUser") != null && !jsonObj.get("targetUser").isJsonNull()) && !jsonObj.get("targetUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetUser").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChapSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChapSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChapSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChapSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ChapSettings>() {
           @Override
           public void write(JsonWriter out, ChapSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChapSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChapSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChapSettings
   * @throws IOException if the JSON string is invalid with respect to ChapSettings
   */
  public static ChapSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChapSettings.class);
  }

  /**
   * Convert an instance of ChapSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

