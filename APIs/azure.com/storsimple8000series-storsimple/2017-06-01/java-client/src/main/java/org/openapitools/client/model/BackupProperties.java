/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackupElement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupProperties {
  /**
   * The backup job creation type.
   */
  @JsonAdapter(BackupJobCreationTypeEnum.Adapter.class)
  public enum BackupJobCreationTypeEnum {
    ADHOC("Adhoc"),
    
    BY_SCHEDULE("BySchedule"),
    
    BY_SSM("BySSM");

    private String value;

    BackupJobCreationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupJobCreationTypeEnum fromValue(String value) {
      for (BackupJobCreationTypeEnum b : BackupJobCreationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupJobCreationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupJobCreationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupJobCreationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupJobCreationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupJobCreationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_JOB_CREATION_TYPE = "backupJobCreationType";
  @SerializedName(SERIALIZED_NAME_BACKUP_JOB_CREATION_TYPE)
  private BackupJobCreationTypeEnum backupJobCreationType;

  public static final String SERIALIZED_NAME_BACKUP_POLICY_ID = "backupPolicyId";
  @SerializedName(SERIALIZED_NAME_BACKUP_POLICY_ID)
  private String backupPolicyId;

  /**
   * The type of the backup.
   */
  @JsonAdapter(BackupTypeEnum.Adapter.class)
  public enum BackupTypeEnum {
    LOCAL_SNAPSHOT("LocalSnapshot"),
    
    CLOUD_SNAPSHOT("CloudSnapshot");

    private String value;

    BackupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupTypeEnum fromValue(String value) {
      for (BackupTypeEnum b : BackupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_TYPE = "backupType";
  @SerializedName(SERIALIZED_NAME_BACKUP_TYPE)
  private BackupTypeEnum backupType;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<BackupElement> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIZE_IN_BYTES = "sizeInBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_BYTES)
  private Long sizeInBytes;

  public static final String SERIALIZED_NAME_SSM_HOST_NAME = "ssmHostName";
  @SerializedName(SERIALIZED_NAME_SSM_HOST_NAME)
  private String ssmHostName;

  public BackupProperties() {
  }

  public BackupProperties backupJobCreationType(BackupJobCreationTypeEnum backupJobCreationType) {
    this.backupJobCreationType = backupJobCreationType;
    return this;
  }

  /**
   * The backup job creation type.
   * @return backupJobCreationType
   */
  @javax.annotation.Nullable
  public BackupJobCreationTypeEnum getBackupJobCreationType() {
    return backupJobCreationType;
  }

  public void setBackupJobCreationType(BackupJobCreationTypeEnum backupJobCreationType) {
    this.backupJobCreationType = backupJobCreationType;
  }


  public BackupProperties backupPolicyId(String backupPolicyId) {
    this.backupPolicyId = backupPolicyId;
    return this;
  }

  /**
   * The path ID of the backup policy.
   * @return backupPolicyId
   */
  @javax.annotation.Nullable
  public String getBackupPolicyId() {
    return backupPolicyId;
  }

  public void setBackupPolicyId(String backupPolicyId) {
    this.backupPolicyId = backupPolicyId;
  }


  public BackupProperties backupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
    return this;
  }

  /**
   * The type of the backup.
   * @return backupType
   */
  @javax.annotation.Nullable
  public BackupTypeEnum getBackupType() {
    return backupType;
  }

  public void setBackupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
  }


  public BackupProperties createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * The time when the backup was created.
   * @return createdOn
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public BackupProperties elements(List<BackupElement> elements) {
    this.elements = elements;
    return this;
  }

  public BackupProperties addElementsItem(BackupElement elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * The backup elements.
   * @return elements
   */
  @javax.annotation.Nonnull
  public List<BackupElement> getElements() {
    return elements;
  }

  public void setElements(List<BackupElement> elements) {
    this.elements = elements;
  }


  public BackupProperties sizeInBytes(Long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    return this;
  }

  /**
   * The backup size in bytes.
   * @return sizeInBytes
   */
  @javax.annotation.Nonnull
  public Long getSizeInBytes() {
    return sizeInBytes;
  }

  public void setSizeInBytes(Long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
  }


  public BackupProperties ssmHostName(String ssmHostName) {
    this.ssmHostName = ssmHostName;
    return this;
  }

  /**
   * The StorSimple Snapshot Manager host name.
   * @return ssmHostName
   */
  @javax.annotation.Nullable
  public String getSsmHostName() {
    return ssmHostName;
  }

  public void setSsmHostName(String ssmHostName) {
    this.ssmHostName = ssmHostName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupProperties backupProperties = (BackupProperties) o;
    return Objects.equals(this.backupJobCreationType, backupProperties.backupJobCreationType) &&
        Objects.equals(this.backupPolicyId, backupProperties.backupPolicyId) &&
        Objects.equals(this.backupType, backupProperties.backupType) &&
        Objects.equals(this.createdOn, backupProperties.createdOn) &&
        Objects.equals(this.elements, backupProperties.elements) &&
        Objects.equals(this.sizeInBytes, backupProperties.sizeInBytes) &&
        Objects.equals(this.ssmHostName, backupProperties.ssmHostName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupJobCreationType, backupPolicyId, backupType, createdOn, elements, sizeInBytes, ssmHostName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupProperties {\n");
    sb.append("    backupJobCreationType: ").append(toIndentedString(backupJobCreationType)).append("\n");
    sb.append("    backupPolicyId: ").append(toIndentedString(backupPolicyId)).append("\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    sizeInBytes: ").append(toIndentedString(sizeInBytes)).append("\n");
    sb.append("    ssmHostName: ").append(toIndentedString(ssmHostName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupJobCreationType");
    openapiFields.add("backupPolicyId");
    openapiFields.add("backupType");
    openapiFields.add("createdOn");
    openapiFields.add("elements");
    openapiFields.add("sizeInBytes");
    openapiFields.add("ssmHostName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdOn");
    openapiRequiredFields.add("elements");
    openapiRequiredFields.add("sizeInBytes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupProperties is not found in the empty JSON string", BackupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupJobCreationType") != null && !jsonObj.get("backupJobCreationType").isJsonNull()) && !jsonObj.get("backupJobCreationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupJobCreationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupJobCreationType").toString()));
      }
      // validate the optional field `backupJobCreationType`
      if (jsonObj.get("backupJobCreationType") != null && !jsonObj.get("backupJobCreationType").isJsonNull()) {
        BackupJobCreationTypeEnum.validateJsonElement(jsonObj.get("backupJobCreationType"));
      }
      if ((jsonObj.get("backupPolicyId") != null && !jsonObj.get("backupPolicyId").isJsonNull()) && !jsonObj.get("backupPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupPolicyId").toString()));
      }
      if ((jsonObj.get("backupType") != null && !jsonObj.get("backupType").isJsonNull()) && !jsonObj.get("backupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupType").toString()));
      }
      // validate the optional field `backupType`
      if (jsonObj.get("backupType") != null && !jsonObj.get("backupType").isJsonNull()) {
        BackupTypeEnum.validateJsonElement(jsonObj.get("backupType"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("elements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
      }

      JsonArray jsonArrayelements = jsonObj.getAsJsonArray("elements");
      // validate the required field `elements` (array)
      for (int i = 0; i < jsonArrayelements.size(); i++) {
        BackupElement.validateJsonElement(jsonArrayelements.get(i));
      };
      if ((jsonObj.get("ssmHostName") != null && !jsonObj.get("ssmHostName").isJsonNull()) && !jsonObj.get("ssmHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssmHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssmHostName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupProperties>() {
           @Override
           public void write(JsonWriter out, BackupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupProperties
   * @throws IOException if the JSON string is invalid with respect to BackupProperties
   */
  public static BackupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupProperties.class);
  }

  /**
   * Convert an instance of BackupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

