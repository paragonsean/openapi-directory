/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of volume.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeProperties {
  public static final String SERIALIZED_NAME_ACCESS_CONTROL_RECORD_IDS = "accessControlRecordIds";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_RECORD_IDS)
  private List<String> accessControlRecordIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKUP_POLICY_IDS = "backupPolicyIds";
  @SerializedName(SERIALIZED_NAME_BACKUP_POLICY_IDS)
  private List<String> backupPolicyIds = new ArrayList<>();

  /**
   * The backup status of the volume.
   */
  @JsonAdapter(BackupStatusEnum.Adapter.class)
  public enum BackupStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    BackupStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupStatusEnum fromValue(String value) {
      for (BackupStatusEnum b : BackupStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_STATUS = "backupStatus";
  @SerializedName(SERIALIZED_NAME_BACKUP_STATUS)
  private BackupStatusEnum backupStatus;

  /**
   * The monitoring status of the volume.
   */
  @JsonAdapter(MonitoringStatusEnum.Adapter.class)
  public enum MonitoringStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    MonitoringStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonitoringStatusEnum fromValue(String value) {
      for (MonitoringStatusEnum b : MonitoringStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonitoringStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonitoringStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonitoringStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonitoringStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonitoringStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONITORING_STATUS = "monitoringStatus";
  @SerializedName(SERIALIZED_NAME_MONITORING_STATUS)
  private MonitoringStatusEnum monitoringStatus;

  /**
   * The operation status on the volume.
   */
  @JsonAdapter(OperationStatusEnum.Adapter.class)
  public enum OperationStatusEnum {
    NONE("None"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    RESTORING("Restoring");

    private String value;

    OperationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationStatusEnum fromValue(String value) {
      for (OperationStatusEnum b : OperationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_STATUS = "operationStatus";
  @SerializedName(SERIALIZED_NAME_OPERATION_STATUS)
  private OperationStatusEnum operationStatus;

  public static final String SERIALIZED_NAME_SIZE_IN_BYTES = "sizeInBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_BYTES)
  private Long sizeInBytes;

  public static final String SERIALIZED_NAME_VOLUME_CONTAINER_ID = "volumeContainerId";
  @SerializedName(SERIALIZED_NAME_VOLUME_CONTAINER_ID)
  private String volumeContainerId;

  /**
   * The volume status.
   */
  @JsonAdapter(VolumeStatusEnum.Adapter.class)
  public enum VolumeStatusEnum {
    ONLINE("Online"),
    
    OFFLINE("Offline");

    private String value;

    VolumeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VolumeStatusEnum fromValue(String value) {
      for (VolumeStatusEnum b : VolumeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VolumeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VolumeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VolumeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VolumeStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VolumeStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOLUME_STATUS = "volumeStatus";
  @SerializedName(SERIALIZED_NAME_VOLUME_STATUS)
  private VolumeStatusEnum volumeStatus;

  /**
   * The type of the volume.
   */
  @JsonAdapter(VolumeTypeEnum.Adapter.class)
  public enum VolumeTypeEnum {
    TIERED("Tiered"),
    
    ARCHIVAL("Archival"),
    
    LOCALLY_PINNED("LocallyPinned");

    private String value;

    VolumeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VolumeTypeEnum fromValue(String value) {
      for (VolumeTypeEnum b : VolumeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VolumeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VolumeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VolumeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VolumeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VolumeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOLUME_TYPE = "volumeType";
  @SerializedName(SERIALIZED_NAME_VOLUME_TYPE)
  private VolumeTypeEnum volumeType;

  public VolumeProperties() {
  }

  public VolumeProperties(
     List<String> backupPolicyIds, 
     BackupStatusEnum backupStatus, 
     OperationStatusEnum operationStatus, 
     String volumeContainerId
  ) {
    this();
    this.backupPolicyIds = backupPolicyIds;
    this.backupStatus = backupStatus;
    this.operationStatus = operationStatus;
    this.volumeContainerId = volumeContainerId;
  }

  public VolumeProperties accessControlRecordIds(List<String> accessControlRecordIds) {
    this.accessControlRecordIds = accessControlRecordIds;
    return this;
  }

  public VolumeProperties addAccessControlRecordIdsItem(String accessControlRecordIdsItem) {
    if (this.accessControlRecordIds == null) {
      this.accessControlRecordIds = new ArrayList<>();
    }
    this.accessControlRecordIds.add(accessControlRecordIdsItem);
    return this;
  }

  /**
   * The IDs of the access control records, associated with the volume.
   * @return accessControlRecordIds
   */
  @javax.annotation.Nonnull
  public List<String> getAccessControlRecordIds() {
    return accessControlRecordIds;
  }

  public void setAccessControlRecordIds(List<String> accessControlRecordIds) {
    this.accessControlRecordIds = accessControlRecordIds;
  }


  /**
   * The IDs of the backup policies, in which this volume is part of.
   * @return backupPolicyIds
   */
  @javax.annotation.Nullable
  public List<String> getBackupPolicyIds() {
    return backupPolicyIds;
  }



  /**
   * The backup status of the volume.
   * @return backupStatus
   */
  @javax.annotation.Nullable
  public BackupStatusEnum getBackupStatus() {
    return backupStatus;
  }



  public VolumeProperties monitoringStatus(MonitoringStatusEnum monitoringStatus) {
    this.monitoringStatus = monitoringStatus;
    return this;
  }

  /**
   * The monitoring status of the volume.
   * @return monitoringStatus
   */
  @javax.annotation.Nonnull
  public MonitoringStatusEnum getMonitoringStatus() {
    return monitoringStatus;
  }

  public void setMonitoringStatus(MonitoringStatusEnum monitoringStatus) {
    this.monitoringStatus = monitoringStatus;
  }


  /**
   * The operation status on the volume.
   * @return operationStatus
   */
  @javax.annotation.Nullable
  public OperationStatusEnum getOperationStatus() {
    return operationStatus;
  }



  public VolumeProperties sizeInBytes(Long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    return this;
  }

  /**
   * The size of the volume in bytes.
   * @return sizeInBytes
   */
  @javax.annotation.Nonnull
  public Long getSizeInBytes() {
    return sizeInBytes;
  }

  public void setSizeInBytes(Long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
  }


  /**
   * The ID of the volume container, in which this volume is created.
   * @return volumeContainerId
   */
  @javax.annotation.Nullable
  public String getVolumeContainerId() {
    return volumeContainerId;
  }



  public VolumeProperties volumeStatus(VolumeStatusEnum volumeStatus) {
    this.volumeStatus = volumeStatus;
    return this;
  }

  /**
   * The volume status.
   * @return volumeStatus
   */
  @javax.annotation.Nonnull
  public VolumeStatusEnum getVolumeStatus() {
    return volumeStatus;
  }

  public void setVolumeStatus(VolumeStatusEnum volumeStatus) {
    this.volumeStatus = volumeStatus;
  }


  public VolumeProperties volumeType(VolumeTypeEnum volumeType) {
    this.volumeType = volumeType;
    return this;
  }

  /**
   * The type of the volume.
   * @return volumeType
   */
  @javax.annotation.Nonnull
  public VolumeTypeEnum getVolumeType() {
    return volumeType;
  }

  public void setVolumeType(VolumeTypeEnum volumeType) {
    this.volumeType = volumeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeProperties volumeProperties = (VolumeProperties) o;
    return Objects.equals(this.accessControlRecordIds, volumeProperties.accessControlRecordIds) &&
        Objects.equals(this.backupPolicyIds, volumeProperties.backupPolicyIds) &&
        Objects.equals(this.backupStatus, volumeProperties.backupStatus) &&
        Objects.equals(this.monitoringStatus, volumeProperties.monitoringStatus) &&
        Objects.equals(this.operationStatus, volumeProperties.operationStatus) &&
        Objects.equals(this.sizeInBytes, volumeProperties.sizeInBytes) &&
        Objects.equals(this.volumeContainerId, volumeProperties.volumeContainerId) &&
        Objects.equals(this.volumeStatus, volumeProperties.volumeStatus) &&
        Objects.equals(this.volumeType, volumeProperties.volumeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessControlRecordIds, backupPolicyIds, backupStatus, monitoringStatus, operationStatus, sizeInBytes, volumeContainerId, volumeStatus, volumeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeProperties {\n");
    sb.append("    accessControlRecordIds: ").append(toIndentedString(accessControlRecordIds)).append("\n");
    sb.append("    backupPolicyIds: ").append(toIndentedString(backupPolicyIds)).append("\n");
    sb.append("    backupStatus: ").append(toIndentedString(backupStatus)).append("\n");
    sb.append("    monitoringStatus: ").append(toIndentedString(monitoringStatus)).append("\n");
    sb.append("    operationStatus: ").append(toIndentedString(operationStatus)).append("\n");
    sb.append("    sizeInBytes: ").append(toIndentedString(sizeInBytes)).append("\n");
    sb.append("    volumeContainerId: ").append(toIndentedString(volumeContainerId)).append("\n");
    sb.append("    volumeStatus: ").append(toIndentedString(volumeStatus)).append("\n");
    sb.append("    volumeType: ").append(toIndentedString(volumeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessControlRecordIds");
    openapiFields.add("backupPolicyIds");
    openapiFields.add("backupStatus");
    openapiFields.add("monitoringStatus");
    openapiFields.add("operationStatus");
    openapiFields.add("sizeInBytes");
    openapiFields.add("volumeContainerId");
    openapiFields.add("volumeStatus");
    openapiFields.add("volumeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessControlRecordIds");
    openapiRequiredFields.add("monitoringStatus");
    openapiRequiredFields.add("sizeInBytes");
    openapiRequiredFields.add("volumeStatus");
    openapiRequiredFields.add("volumeType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeProperties is not found in the empty JSON string", VolumeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VolumeProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("accessControlRecordIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("accessControlRecordIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessControlRecordIds` to be an array in the JSON string but got `%s`", jsonObj.get("accessControlRecordIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("backupPolicyIds") != null && !jsonObj.get("backupPolicyIds").isJsonNull() && !jsonObj.get("backupPolicyIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupPolicyIds` to be an array in the JSON string but got `%s`", jsonObj.get("backupPolicyIds").toString()));
      }
      if ((jsonObj.get("backupStatus") != null && !jsonObj.get("backupStatus").isJsonNull()) && !jsonObj.get("backupStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupStatus").toString()));
      }
      // validate the optional field `backupStatus`
      if (jsonObj.get("backupStatus") != null && !jsonObj.get("backupStatus").isJsonNull()) {
        BackupStatusEnum.validateJsonElement(jsonObj.get("backupStatus"));
      }
      if (!jsonObj.get("monitoringStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitoringStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitoringStatus").toString()));
      }
      // validate the required field `monitoringStatus`
      MonitoringStatusEnum.validateJsonElement(jsonObj.get("monitoringStatus"));
      if ((jsonObj.get("operationStatus") != null && !jsonObj.get("operationStatus").isJsonNull()) && !jsonObj.get("operationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationStatus").toString()));
      }
      // validate the optional field `operationStatus`
      if (jsonObj.get("operationStatus") != null && !jsonObj.get("operationStatus").isJsonNull()) {
        OperationStatusEnum.validateJsonElement(jsonObj.get("operationStatus"));
      }
      if ((jsonObj.get("volumeContainerId") != null && !jsonObj.get("volumeContainerId").isJsonNull()) && !jsonObj.get("volumeContainerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeContainerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeContainerId").toString()));
      }
      if (!jsonObj.get("volumeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeStatus").toString()));
      }
      // validate the required field `volumeStatus`
      VolumeStatusEnum.validateJsonElement(jsonObj.get("volumeStatus"));
      if (!jsonObj.get("volumeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeType").toString()));
      }
      // validate the required field `volumeType`
      VolumeTypeEnum.validateJsonElement(jsonObj.get("volumeType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeProperties>() {
           @Override
           public void write(JsonWriter out, VolumeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeProperties
   * @throws IOException if the JSON string is invalid with respect to VolumeProperties
   */
  public static VolumeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeProperties.class);
  }

  /**
   * Convert an instance of VolumeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

