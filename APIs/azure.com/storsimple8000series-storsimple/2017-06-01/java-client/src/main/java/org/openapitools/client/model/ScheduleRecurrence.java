/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The schedule recurrence.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduleRecurrence {
  /**
   * The recurrence type.
   */
  @JsonAdapter(RecurrenceTypeEnum.Adapter.class)
  public enum RecurrenceTypeEnum {
    MINUTES("Minutes"),
    
    HOURLY("Hourly"),
    
    DAILY("Daily"),
    
    WEEKLY("Weekly");

    private String value;

    RecurrenceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurrenceTypeEnum fromValue(String value) {
      for (RecurrenceTypeEnum b : RecurrenceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecurrenceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurrenceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurrenceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecurrenceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecurrenceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECURRENCE_TYPE = "recurrenceType";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_TYPE)
  private RecurrenceTypeEnum recurrenceType;

  public static final String SERIALIZED_NAME_RECURRENCE_VALUE = "recurrenceValue";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_VALUE)
  private Integer recurrenceValue;

  /**
   * Gets or Sets weeklyDaysList
   */
  @JsonAdapter(WeeklyDaysListEnum.Adapter.class)
  public enum WeeklyDaysListEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    WeeklyDaysListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WeeklyDaysListEnum fromValue(String value) {
      for (WeeklyDaysListEnum b : WeeklyDaysListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WeeklyDaysListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WeeklyDaysListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WeeklyDaysListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WeeklyDaysListEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WeeklyDaysListEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WEEKLY_DAYS_LIST = "weeklyDaysList";
  @SerializedName(SERIALIZED_NAME_WEEKLY_DAYS_LIST)
  private List<WeeklyDaysListEnum> weeklyDaysList = new ArrayList<>();

  public ScheduleRecurrence() {
  }

  public ScheduleRecurrence recurrenceType(RecurrenceTypeEnum recurrenceType) {
    this.recurrenceType = recurrenceType;
    return this;
  }

  /**
   * The recurrence type.
   * @return recurrenceType
   */
  @javax.annotation.Nonnull
  public RecurrenceTypeEnum getRecurrenceType() {
    return recurrenceType;
  }

  public void setRecurrenceType(RecurrenceTypeEnum recurrenceType) {
    this.recurrenceType = recurrenceType;
  }


  public ScheduleRecurrence recurrenceValue(Integer recurrenceValue) {
    this.recurrenceValue = recurrenceValue;
    return this;
  }

  /**
   * The recurrence value.
   * @return recurrenceValue
   */
  @javax.annotation.Nonnull
  public Integer getRecurrenceValue() {
    return recurrenceValue;
  }

  public void setRecurrenceValue(Integer recurrenceValue) {
    this.recurrenceValue = recurrenceValue;
  }


  public ScheduleRecurrence weeklyDaysList(List<WeeklyDaysListEnum> weeklyDaysList) {
    this.weeklyDaysList = weeklyDaysList;
    return this;
  }

  public ScheduleRecurrence addWeeklyDaysListItem(WeeklyDaysListEnum weeklyDaysListItem) {
    if (this.weeklyDaysList == null) {
      this.weeklyDaysList = new ArrayList<>();
    }
    this.weeklyDaysList.add(weeklyDaysListItem);
    return this;
  }

  /**
   * The week days list. Applicable only for schedules of recurrence type &#39;weekly&#39;.
   * @return weeklyDaysList
   */
  @javax.annotation.Nullable
  public List<WeeklyDaysListEnum> getWeeklyDaysList() {
    return weeklyDaysList;
  }

  public void setWeeklyDaysList(List<WeeklyDaysListEnum> weeklyDaysList) {
    this.weeklyDaysList = weeklyDaysList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleRecurrence scheduleRecurrence = (ScheduleRecurrence) o;
    return Objects.equals(this.recurrenceType, scheduleRecurrence.recurrenceType) &&
        Objects.equals(this.recurrenceValue, scheduleRecurrence.recurrenceValue) &&
        Objects.equals(this.weeklyDaysList, scheduleRecurrence.weeklyDaysList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recurrenceType, recurrenceValue, weeklyDaysList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleRecurrence {\n");
    sb.append("    recurrenceType: ").append(toIndentedString(recurrenceType)).append("\n");
    sb.append("    recurrenceValue: ").append(toIndentedString(recurrenceValue)).append("\n");
    sb.append("    weeklyDaysList: ").append(toIndentedString(weeklyDaysList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recurrenceType");
    openapiFields.add("recurrenceValue");
    openapiFields.add("weeklyDaysList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recurrenceType");
    openapiRequiredFields.add("recurrenceValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduleRecurrence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduleRecurrence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleRecurrence is not found in the empty JSON string", ScheduleRecurrence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduleRecurrence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduleRecurrence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduleRecurrence.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("recurrenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrenceType").toString()));
      }
      // validate the required field `recurrenceType`
      RecurrenceTypeEnum.validateJsonElement(jsonObj.get("recurrenceType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("weeklyDaysList") != null && !jsonObj.get("weeklyDaysList").isJsonNull() && !jsonObj.get("weeklyDaysList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `weeklyDaysList` to be an array in the JSON string but got `%s`", jsonObj.get("weeklyDaysList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleRecurrence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleRecurrence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleRecurrence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleRecurrence.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleRecurrence>() {
           @Override
           public void write(JsonWriter out, ScheduleRecurrence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleRecurrence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduleRecurrence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduleRecurrence
   * @throws IOException if the JSON string is invalid with respect to ScheduleRecurrence
   */
  public static ScheduleRecurrence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleRecurrence.class);
  }

  /**
   * Convert an instance of ScheduleRecurrence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

