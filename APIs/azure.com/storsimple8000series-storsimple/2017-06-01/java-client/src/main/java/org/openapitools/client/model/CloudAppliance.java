/*
 * StorSimple8000SeriesManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The cloud appliance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:41.316643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudAppliance {
  public static final String SERIALIZED_NAME_IS_VNET_DNS_CONFIGURED = "isVnetDnsConfigured";
  @SerializedName(SERIALIZED_NAME_IS_VNET_DNS_CONFIGURED)
  private Boolean isVnetDnsConfigured;

  public static final String SERIALIZED_NAME_IS_VNET_EXPRESS_CONFIGURED = "isVnetExpressConfigured";
  @SerializedName(SERIALIZED_NAME_IS_VNET_EXPRESS_CONFIGURED)
  private Boolean isVnetExpressConfigured;

  public static final String SERIALIZED_NAME_MODEL_NUMBER = "modelNumber";
  @SerializedName(SERIALIZED_NAME_MODEL_NUMBER)
  private String modelNumber;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_NAME = "storageAccountName";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_NAME)
  private String storageAccountName;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_TYPE = "storageAccountType";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_TYPE)
  private String storageAccountType;

  public static final String SERIALIZED_NAME_SUBNET_NAME = "subnetName";
  @SerializedName(SERIALIZED_NAME_SUBNET_NAME)
  private String subnetName;

  public static final String SERIALIZED_NAME_VM_IMAGE_NAME = "vmImageName";
  @SerializedName(SERIALIZED_NAME_VM_IMAGE_NAME)
  private String vmImageName;

  public static final String SERIALIZED_NAME_VM_TYPE = "vmType";
  @SerializedName(SERIALIZED_NAME_VM_TYPE)
  private String vmType;

  public static final String SERIALIZED_NAME_VNET_NAME = "vnetName";
  @SerializedName(SERIALIZED_NAME_VNET_NAME)
  private String vnetName;

  public static final String SERIALIZED_NAME_VNET_REGION = "vnetRegion";
  @SerializedName(SERIALIZED_NAME_VNET_REGION)
  private String vnetRegion;

  public CloudAppliance() {
  }

  public CloudAppliance isVnetDnsConfigured(Boolean isVnetDnsConfigured) {
    this.isVnetDnsConfigured = isVnetDnsConfigured;
    return this;
  }

  /**
   * Indicates whether virtual network used is configured with DNS or not.
   * @return isVnetDnsConfigured
   */
  @javax.annotation.Nullable
  public Boolean getIsVnetDnsConfigured() {
    return isVnetDnsConfigured;
  }

  public void setIsVnetDnsConfigured(Boolean isVnetDnsConfigured) {
    this.isVnetDnsConfigured = isVnetDnsConfigured;
  }


  public CloudAppliance isVnetExpressConfigured(Boolean isVnetExpressConfigured) {
    this.isVnetExpressConfigured = isVnetExpressConfigured;
    return this;
  }

  /**
   * Indicates whether virtual network used is configured with express route or not.
   * @return isVnetExpressConfigured
   */
  @javax.annotation.Nullable
  public Boolean getIsVnetExpressConfigured() {
    return isVnetExpressConfigured;
  }

  public void setIsVnetExpressConfigured(Boolean isVnetExpressConfigured) {
    this.isVnetExpressConfigured = isVnetExpressConfigured;
  }


  public CloudAppliance modelNumber(String modelNumber) {
    this.modelNumber = modelNumber;
    return this;
  }

  /**
   * The model number.
   * @return modelNumber
   */
  @javax.annotation.Nullable
  public String getModelNumber() {
    return modelNumber;
  }

  public void setModelNumber(String modelNumber) {
    this.modelNumber = modelNumber;
  }


  public CloudAppliance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CloudAppliance storageAccountName(String storageAccountName) {
    this.storageAccountName = storageAccountName;
    return this;
  }

  /**
   * The name of the storage account.
   * @return storageAccountName
   */
  @javax.annotation.Nullable
  public String getStorageAccountName() {
    return storageAccountName;
  }

  public void setStorageAccountName(String storageAccountName) {
    this.storageAccountName = storageAccountName;
  }


  public CloudAppliance storageAccountType(String storageAccountType) {
    this.storageAccountType = storageAccountType;
    return this;
  }

  /**
   * The type of the storage account.
   * @return storageAccountType
   */
  @javax.annotation.Nullable
  public String getStorageAccountType() {
    return storageAccountType;
  }

  public void setStorageAccountType(String storageAccountType) {
    this.storageAccountType = storageAccountType;
  }


  public CloudAppliance subnetName(String subnetName) {
    this.subnetName = subnetName;
    return this;
  }

  /**
   * The name of the subnet.
   * @return subnetName
   */
  @javax.annotation.Nullable
  public String getSubnetName() {
    return subnetName;
  }

  public void setSubnetName(String subnetName) {
    this.subnetName = subnetName;
  }


  public CloudAppliance vmImageName(String vmImageName) {
    this.vmImageName = vmImageName;
    return this;
  }

  /**
   * The name of the virtual machine image.
   * @return vmImageName
   */
  @javax.annotation.Nullable
  public String getVmImageName() {
    return vmImageName;
  }

  public void setVmImageName(String vmImageName) {
    this.vmImageName = vmImageName;
  }


  public CloudAppliance vmType(String vmType) {
    this.vmType = vmType;
    return this;
  }

  /**
   * The type of the virtual machine.
   * @return vmType
   */
  @javax.annotation.Nullable
  public String getVmType() {
    return vmType;
  }

  public void setVmType(String vmType) {
    this.vmType = vmType;
  }


  public CloudAppliance vnetName(String vnetName) {
    this.vnetName = vnetName;
    return this;
  }

  /**
   * The name of the virtual network.
   * @return vnetName
   */
  @javax.annotation.Nullable
  public String getVnetName() {
    return vnetName;
  }

  public void setVnetName(String vnetName) {
    this.vnetName = vnetName;
  }


  public CloudAppliance vnetRegion(String vnetRegion) {
    this.vnetRegion = vnetRegion;
    return this;
  }

  /**
   * The virtual network region.
   * @return vnetRegion
   */
  @javax.annotation.Nonnull
  public String getVnetRegion() {
    return vnetRegion;
  }

  public void setVnetRegion(String vnetRegion) {
    this.vnetRegion = vnetRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudAppliance cloudAppliance = (CloudAppliance) o;
    return Objects.equals(this.isVnetDnsConfigured, cloudAppliance.isVnetDnsConfigured) &&
        Objects.equals(this.isVnetExpressConfigured, cloudAppliance.isVnetExpressConfigured) &&
        Objects.equals(this.modelNumber, cloudAppliance.modelNumber) &&
        Objects.equals(this.name, cloudAppliance.name) &&
        Objects.equals(this.storageAccountName, cloudAppliance.storageAccountName) &&
        Objects.equals(this.storageAccountType, cloudAppliance.storageAccountType) &&
        Objects.equals(this.subnetName, cloudAppliance.subnetName) &&
        Objects.equals(this.vmImageName, cloudAppliance.vmImageName) &&
        Objects.equals(this.vmType, cloudAppliance.vmType) &&
        Objects.equals(this.vnetName, cloudAppliance.vnetName) &&
        Objects.equals(this.vnetRegion, cloudAppliance.vnetRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isVnetDnsConfigured, isVnetExpressConfigured, modelNumber, name, storageAccountName, storageAccountType, subnetName, vmImageName, vmType, vnetName, vnetRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudAppliance {\n");
    sb.append("    isVnetDnsConfigured: ").append(toIndentedString(isVnetDnsConfigured)).append("\n");
    sb.append("    isVnetExpressConfigured: ").append(toIndentedString(isVnetExpressConfigured)).append("\n");
    sb.append("    modelNumber: ").append(toIndentedString(modelNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    storageAccountName: ").append(toIndentedString(storageAccountName)).append("\n");
    sb.append("    storageAccountType: ").append(toIndentedString(storageAccountType)).append("\n");
    sb.append("    subnetName: ").append(toIndentedString(subnetName)).append("\n");
    sb.append("    vmImageName: ").append(toIndentedString(vmImageName)).append("\n");
    sb.append("    vmType: ").append(toIndentedString(vmType)).append("\n");
    sb.append("    vnetName: ").append(toIndentedString(vnetName)).append("\n");
    sb.append("    vnetRegion: ").append(toIndentedString(vnetRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isVnetDnsConfigured");
    openapiFields.add("isVnetExpressConfigured");
    openapiFields.add("modelNumber");
    openapiFields.add("name");
    openapiFields.add("storageAccountName");
    openapiFields.add("storageAccountType");
    openapiFields.add("subnetName");
    openapiFields.add("vmImageName");
    openapiFields.add("vmType");
    openapiFields.add("vnetName");
    openapiFields.add("vnetRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("vnetRegion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudAppliance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudAppliance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudAppliance is not found in the empty JSON string", CloudAppliance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudAppliance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudAppliance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CloudAppliance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("modelNumber") != null && !jsonObj.get("modelNumber").isJsonNull()) && !jsonObj.get("modelNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelNumber").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("storageAccountName") != null && !jsonObj.get("storageAccountName").isJsonNull()) && !jsonObj.get("storageAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountName").toString()));
      }
      if ((jsonObj.get("storageAccountType") != null && !jsonObj.get("storageAccountType").isJsonNull()) && !jsonObj.get("storageAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountType").toString()));
      }
      if ((jsonObj.get("subnetName") != null && !jsonObj.get("subnetName").isJsonNull()) && !jsonObj.get("subnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetName").toString()));
      }
      if ((jsonObj.get("vmImageName") != null && !jsonObj.get("vmImageName").isJsonNull()) && !jsonObj.get("vmImageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmImageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmImageName").toString()));
      }
      if ((jsonObj.get("vmType") != null && !jsonObj.get("vmType").isJsonNull()) && !jsonObj.get("vmType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmType").toString()));
      }
      if ((jsonObj.get("vnetName") != null && !jsonObj.get("vnetName").isJsonNull()) && !jsonObj.get("vnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetName").toString()));
      }
      if (!jsonObj.get("vnetRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetRegion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudAppliance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudAppliance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudAppliance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudAppliance.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudAppliance>() {
           @Override
           public void write(JsonWriter out, CloudAppliance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudAppliance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudAppliance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudAppliance
   * @throws IOException if the JSON string is invalid with respect to CloudAppliance
   */
  public static CloudAppliance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudAppliance.class);
  }

  /**
   * Convert an instance of CloudAppliance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

