# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None):
        """StorageAccount - a model defined in OpenAPI

        :param id: The id of this StorageAccount.
        :param type: The type of this StorageAccount.
        """
        self.openapi_types = {
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type'
        }

        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccount of this StorageAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StorageAccount.

        The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.

        :return: The id of this StorageAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageAccount.

        The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.

        :param id: The id of this StorageAccount.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this StorageAccount.

        The type of the storage account.

        :return: The type of this StorageAccount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageAccount.

        The type of the storage account.

        :param type: The type of this StorageAccount.
        :type type: str
        """
        allowed_values = ["Primary", "Secondary"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
