/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_aggregation_type_isSet = false;
    m_aggregation_type_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_display_description_isSet = false;
    m_display_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_aggregation_type_isValid = ::OpenAPI::fromJsonValue(m_aggregation_type, json[QString("aggregationType")]);
    m_aggregation_type_isSet = !json[QString("aggregationType")].isNull() && m_aggregation_type_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_display_description_isValid = ::OpenAPI::fromJsonValue(m_display_description, json[QString("displayDescription")]);
    m_display_description_isSet = !json[QString("displayDescription")].isNull() && m_display_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_type_isSet) {
        obj.insert(QString("aggregationType"), ::OpenAPI::toJsonValue(m_aggregation_type));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_display_description_isSet) {
        obj.insert(QString("displayDescription"), ::OpenAPI::toJsonValue(m_display_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIMetric::getAggregationType() const {
    return m_aggregation_type;
}
void OAIMetric::setAggregationType(const QString &aggregation_type) {
    m_aggregation_type = aggregation_type;
    m_aggregation_type_isSet = true;
}

bool OAIMetric::is_aggregation_type_Set() const{
    return m_aggregation_type_isSet;
}

bool OAIMetric::is_aggregation_type_Valid() const{
    return m_aggregation_type_isValid;
}

QList<OAIMetricDimension> OAIMetric::getDimensions() const {
    return m_dimensions;
}
void OAIMetric::setDimensions(const QList<OAIMetricDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetric::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetric::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIMetric::getDisplayDescription() const {
    return m_display_description;
}
void OAIMetric::setDisplayDescription(const QString &display_description) {
    m_display_description = display_description;
    m_display_description_isSet = true;
}

bool OAIMetric::is_display_description_Set() const{
    return m_display_description_isSet;
}

bool OAIMetric::is_display_description_Valid() const{
    return m_display_description_isValid;
}

QString OAIMetric::getDisplayName() const {
    return m_display_name;
}
void OAIMetric::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMetric::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMetric::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIMetric::getName() const {
    return m_name;
}
void OAIMetric::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetric::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMetric::getUnit() const {
    return m_unit;
}
void OAIMetric::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetric::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetric::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
