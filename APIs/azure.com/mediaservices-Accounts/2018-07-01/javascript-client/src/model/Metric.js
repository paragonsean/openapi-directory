/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricDimension from './MetricDimension';

/**
 * The Metric model module.
 * @module model/Metric
 * @version 2018-07-01
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * A metric emitted by service.
     * @alias module:model/Metric
     */
    constructor() { 
        
        Metric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('aggregationType')) {
                obj['aggregationType'] = ApiClient.convertToType(data['aggregationType'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [MetricDimension]);
            }
            if (data.hasOwnProperty('displayDescription')) {
                obj['displayDescription'] = ApiClient.convertToType(data['displayDescription'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregationType'] && !(typeof data['aggregationType'] === 'string' || data['aggregationType'] instanceof String)) {
            throw new Error("Expected the field `aggregationType` to be a primitive type in the JSON string but got " + data['aggregationType']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                MetricDimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayDescription'] && !(typeof data['displayDescription'] === 'string' || data['displayDescription'] instanceof String)) {
            throw new Error("Expected the field `displayDescription` to be a primitive type in the JSON string but got " + data['displayDescription']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * The metric aggregation type
 * @member {module:model/Metric.AggregationTypeEnum} aggregationType
 */
Metric.prototype['aggregationType'] = undefined;

/**
 * The metric dimensions.
 * @member {Array.<module:model/MetricDimension>} dimensions
 */
Metric.prototype['dimensions'] = undefined;

/**
 * The metric display description.
 * @member {String} displayDescription
 */
Metric.prototype['displayDescription'] = undefined;

/**
 * The metric display name.
 * @member {String} displayName
 */
Metric.prototype['displayName'] = undefined;

/**
 * The metric name.
 * @member {String} name
 */
Metric.prototype['name'] = undefined;

/**
 * The metric unit
 * @member {module:model/Metric.UnitEnum} unit
 */
Metric.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>aggregationType</code> property.
 * @enum {String}
 * @readonly
 */
Metric['AggregationTypeEnum'] = {

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total"
};


/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
Metric['UnitEnum'] = {

    /**
     * value: "Bytes"
     * @const
     */
    "Bytes": "Bytes",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "Milliseconds"
     * @const
     */
    "Milliseconds": "Milliseconds"
};



export default Metric;

