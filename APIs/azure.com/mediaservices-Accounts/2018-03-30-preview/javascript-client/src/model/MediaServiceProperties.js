/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StorageAccount from './StorageAccount';

/**
 * The MediaServiceProperties model module.
 * @module model/MediaServiceProperties
 * @version 2018-03-30-preview
 */
class MediaServiceProperties {
    /**
     * Constructs a new <code>MediaServiceProperties</code>.
     * Properties of the Media Services account.
     * @alias module:model/MediaServiceProperties
     */
    constructor() { 
        
        MediaServiceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaServiceProperties} obj Optional instance to populate.
     * @return {module:model/MediaServiceProperties} The populated <code>MediaServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaServiceProperties();

            if (data.hasOwnProperty('mediaServiceId')) {
                obj['mediaServiceId'] = ApiClient.convertToType(data['mediaServiceId'], 'String');
            }
            if (data.hasOwnProperty('storageAccounts')) {
                obj['storageAccounts'] = ApiClient.convertToType(data['storageAccounts'], [StorageAccount]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaServiceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mediaServiceId'] && !(typeof data['mediaServiceId'] === 'string' || data['mediaServiceId'] instanceof String)) {
            throw new Error("Expected the field `mediaServiceId` to be a primitive type in the JSON string but got " + data['mediaServiceId']);
        }
        if (data['storageAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storageAccounts'])) {
                throw new Error("Expected the field `storageAccounts` to be an array in the JSON data but got " + data['storageAccounts']);
            }
            // validate the optional field `storageAccounts` (array)
            for (const item of data['storageAccounts']) {
                StorageAccount.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The Media Services account ID.
 * @member {String} mediaServiceId
 */
MediaServiceProperties.prototype['mediaServiceId'] = undefined;

/**
 * The storage accounts for this resource.
 * @member {Array.<module:model/StorageAccount>} storageAccounts
 */
MediaServiceProperties.prototype['storageAccounts'] = undefined;






export default MediaServiceProperties;

