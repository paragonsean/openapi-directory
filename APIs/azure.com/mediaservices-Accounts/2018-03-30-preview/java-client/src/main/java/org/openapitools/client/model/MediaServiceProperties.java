/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.StorageAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the Media Services account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:37.578436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaServiceProperties {
  public static final String SERIALIZED_NAME_MEDIA_SERVICE_ID = "mediaServiceId";
  @SerializedName(SERIALIZED_NAME_MEDIA_SERVICE_ID)
  private UUID mediaServiceId;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNTS = "storageAccounts";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNTS)
  private List<StorageAccount> storageAccounts = new ArrayList<>();

  public MediaServiceProperties() {
  }

  public MediaServiceProperties(
     UUID mediaServiceId
  ) {
    this();
    this.mediaServiceId = mediaServiceId;
  }

  /**
   * The Media Services account ID.
   * @return mediaServiceId
   */
  @javax.annotation.Nullable
  public UUID getMediaServiceId() {
    return mediaServiceId;
  }



  public MediaServiceProperties storageAccounts(List<StorageAccount> storageAccounts) {
    this.storageAccounts = storageAccounts;
    return this;
  }

  public MediaServiceProperties addStorageAccountsItem(StorageAccount storageAccountsItem) {
    if (this.storageAccounts == null) {
      this.storageAccounts = new ArrayList<>();
    }
    this.storageAccounts.add(storageAccountsItem);
    return this;
  }

  /**
   * The storage accounts for this resource.
   * @return storageAccounts
   */
  @javax.annotation.Nullable
  public List<StorageAccount> getStorageAccounts() {
    return storageAccounts;
  }

  public void setStorageAccounts(List<StorageAccount> storageAccounts) {
    this.storageAccounts = storageAccounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaServiceProperties mediaServiceProperties = (MediaServiceProperties) o;
    return Objects.equals(this.mediaServiceId, mediaServiceProperties.mediaServiceId) &&
        Objects.equals(this.storageAccounts, mediaServiceProperties.storageAccounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaServiceId, storageAccounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaServiceProperties {\n");
    sb.append("    mediaServiceId: ").append(toIndentedString(mediaServiceId)).append("\n");
    sb.append("    storageAccounts: ").append(toIndentedString(storageAccounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mediaServiceId");
    openapiFields.add("storageAccounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaServiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaServiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaServiceProperties is not found in the empty JSON string", MediaServiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaServiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaServiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mediaServiceId") != null && !jsonObj.get("mediaServiceId").isJsonNull()) && !jsonObj.get("mediaServiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaServiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaServiceId").toString()));
      }
      if (jsonObj.get("storageAccounts") != null && !jsonObj.get("storageAccounts").isJsonNull()) {
        JsonArray jsonArraystorageAccounts = jsonObj.getAsJsonArray("storageAccounts");
        if (jsonArraystorageAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storageAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storageAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("storageAccounts").toString()));
          }

          // validate the optional field `storageAccounts` (array)
          for (int i = 0; i < jsonArraystorageAccounts.size(); i++) {
            StorageAccount.validateJsonElement(jsonArraystorageAccounts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaServiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaServiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaServiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaServiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaServiceProperties>() {
           @Override
           public void write(JsonWriter out, MediaServiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaServiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaServiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaServiceProperties
   * @throws IOException if the JSON string is invalid with respect to MediaServiceProperties
   */
  public static MediaServiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaServiceProperties.class);
  }

  /**
   * Convert an instance of MediaServiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

