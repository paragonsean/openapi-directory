/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckNameAvailabilityInput;
import org.openapitools.client.model.EntityNameAvailabilityCheckOutput;
import org.openapitools.client.model.MediaService;
import org.openapitools.client.model.MediaServiceCollection;
import org.openapitools.client.model.OperationCollection;
import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.SubscriptionMediaService;
import org.openapitools.client.model.SubscriptionMediaServiceCollection;
import org.openapitools.client.model.SyncStorageKeysInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Check Name Availability
     *
     * Checks whether the Media Service resource name is available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsCheckNameAvailabilityTest() throws ApiException {
        String subscriptionId = null;
        String locationName = null;
        String apiVersion = null;
        CheckNameAvailabilityInput parameters = null;
        EntityNameAvailabilityCheckOutput response = api.locationsCheckNameAvailability(subscriptionId, locationName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Create or update a Media Services account
     *
     * Creates or updates a Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaservicesCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        MediaService parameters = null;
        MediaService response = api.mediaservicesCreateOrUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete a Media Services account.
     *
     * Deletes a Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaservicesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        api.mediaservicesDelete(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Media Services account
     *
     * Get the details of a Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaservicesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        MediaService response = api.mediaservicesGet(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Media Services account
     *
     * Get the details of a Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaservicesGetBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String accountName = null;
        String apiVersion = null;
        SubscriptionMediaService response = api.mediaservicesGetBySubscription(subscriptionId, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * List Media Services accounts
     *
     * List Media Services accounts in the resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaservicesListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        MediaServiceCollection response = api.mediaservicesList(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * List Media Services accounts
     *
     * List Media Services accounts in the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaservicesListBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        SubscriptionMediaServiceCollection response = api.mediaservicesListBySubscription(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Synchronizes Storage Account Keys
     *
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaservicesSyncStorageKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        SyncStorageKeysInput parameters = null;
        api.mediaservicesSyncStorageKeys(subscriptionId, resourceGroupName, accountName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Update a Media Services account
     *
     * Updates an existing Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaservicesUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        MediaService parameters = null;
        MediaService response = api.mediaservicesUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * List Operations
     *
     * Lists all the Media Services operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void operationsListTest() throws ApiException {
        String apiVersion = null;
        OperationCollection response = api.operationsList(apiVersion);
        // TODO: test validations
    }

}
