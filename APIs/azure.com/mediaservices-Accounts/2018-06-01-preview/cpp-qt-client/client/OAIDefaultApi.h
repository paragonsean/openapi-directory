/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAICheckNameAvailabilityInput.h"
#include "OAIEntityNameAvailabilityCheckOutput.h"
#include "OAIMediaService.h"
#include "OAIMediaServiceCollection.h"
#include "OAIOperationCollection.h"
#include "OAISubscriptionMediaService.h"
#include "OAISubscriptionMediaServiceCollection.h"
#include "OAISyncStorageKeysInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICheckNameAvailabilityInput [required]
    */
    virtual void locationsCheckNameAvailability(const QString &subscription_id, const QString &location_name, const QString &api_version, const OAICheckNameAvailabilityInput &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIMediaService [required]
    */
    virtual void mediaservicesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIMediaService &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaservicesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaservicesGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaservicesGetBySubscription(const QString &subscription_id, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaservicesList(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaservicesListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISyncStorageKeysInput [required]
    */
    virtual void mediaservicesSyncStorageKeys(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAISyncStorageKeysInput &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIMediaService [required]
    */
    virtual void mediaservicesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const OAIMediaService &parameters);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void locationsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void mediaservicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void mediaservicesDeleteCallback(OAIHttpRequestWorker *worker);
    void mediaservicesGetCallback(OAIHttpRequestWorker *worker);
    void mediaservicesGetBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void mediaservicesListCallback(OAIHttpRequestWorker *worker);
    void mediaservicesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void mediaservicesSyncStorageKeysCallback(OAIHttpRequestWorker *worker);
    void mediaservicesUpdateCallback(OAIHttpRequestWorker *worker);
    void operationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void locationsCheckNameAvailabilitySignal(OAIEntityNameAvailabilityCheckOutput summary);
    void mediaservicesCreateOrUpdateSignal(OAIMediaService summary);
    void mediaservicesDeleteSignal();
    void mediaservicesGetSignal(OAIMediaService summary);
    void mediaservicesGetBySubscriptionSignal(OAISubscriptionMediaService summary);
    void mediaservicesListSignal(OAIMediaServiceCollection summary);
    void mediaservicesListBySubscriptionSignal(OAISubscriptionMediaServiceCollection summary);
    void mediaservicesSyncStorageKeysSignal();
    void mediaservicesUpdateSignal(OAIMediaService summary);
    void operationsListSignal(OAIOperationCollection summary);


    void locationsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIEntityNameAvailabilityCheckOutput summary);
    void mediaservicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMediaService summary);
    void mediaservicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void mediaservicesGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaService summary);
    void mediaservicesGetBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionMediaService summary);
    void mediaservicesListSignalFull(OAIHttpRequestWorker *worker, OAIMediaServiceCollection summary);
    void mediaservicesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionMediaServiceCollection summary);
    void mediaservicesSyncStorageKeysSignalFull(OAIHttpRequestWorker *worker);
    void mediaservicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMediaService summary);
    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationCollection summary);

    Q_DECL_DEPRECATED_X("Use locationsCheckNameAvailabilitySignalError() instead")
    void locationsCheckNameAvailabilitySignalE(OAIEntityNameAvailabilityCheckOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsCheckNameAvailabilitySignalError(OAIEntityNameAvailabilityCheckOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesCreateOrUpdateSignalError() instead")
    void mediaservicesCreateOrUpdateSignalE(OAIMediaService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesCreateOrUpdateSignalError(OAIMediaService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesDeleteSignalError() instead")
    void mediaservicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesGetSignalError() instead")
    void mediaservicesGetSignalE(OAIMediaService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesGetSignalError(OAIMediaService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesGetBySubscriptionSignalError() instead")
    void mediaservicesGetBySubscriptionSignalE(OAISubscriptionMediaService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesGetBySubscriptionSignalError(OAISubscriptionMediaService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesListSignalError() instead")
    void mediaservicesListSignalE(OAIMediaServiceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesListSignalError(OAIMediaServiceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesListBySubscriptionSignalError() instead")
    void mediaservicesListBySubscriptionSignalE(OAISubscriptionMediaServiceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesListBySubscriptionSignalError(OAISubscriptionMediaServiceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesSyncStorageKeysSignalError() instead")
    void mediaservicesSyncStorageKeysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesSyncStorageKeysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesUpdateSignalError() instead")
    void mediaservicesUpdateSignalE(OAIMediaService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesUpdateSignalError(OAIMediaService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use locationsCheckNameAvailabilitySignalErrorFull() instead")
    void locationsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesCreateOrUpdateSignalErrorFull() instead")
    void mediaservicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesDeleteSignalErrorFull() instead")
    void mediaservicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesGetSignalErrorFull() instead")
    void mediaservicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesGetBySubscriptionSignalErrorFull() instead")
    void mediaservicesGetBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesGetBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesListSignalErrorFull() instead")
    void mediaservicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesListBySubscriptionSignalErrorFull() instead")
    void mediaservicesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesSyncStorageKeysSignalErrorFull() instead")
    void mediaservicesSyncStorageKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesSyncStorageKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaservicesUpdateSignalErrorFull() instead")
    void mediaservicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaservicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
