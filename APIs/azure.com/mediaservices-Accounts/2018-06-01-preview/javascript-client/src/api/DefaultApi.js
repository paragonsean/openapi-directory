/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import CheckNameAvailabilityInput from '../model/CheckNameAvailabilityInput';
import EntityNameAvailabilityCheckOutput from '../model/EntityNameAvailabilityCheckOutput';
import MediaService from '../model/MediaService';
import MediaServiceCollection from '../model/MediaServiceCollection';
import OperationCollection from '../model/OperationCollection';
import SubscriptionMediaService from '../model/SubscriptionMediaService';
import SubscriptionMediaServiceCollection from '../model/SubscriptionMediaServiceCollection';
import SyncStorageKeysInput from '../model/SyncStorageKeysInput';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-06-01-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the locationsCheckNameAvailability operation.
     * @callback module:api/DefaultApi~locationsCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityNameAvailabilityCheckOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check Name Availability
     * Checks whether the Media Service resource name is available.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} locationName 
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/CheckNameAvailabilityInput} parameters The request parameters
     * @param {module:api/DefaultApi~locationsCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityNameAvailabilityCheckOutput}
     */
    locationsCheckNameAvailability(subscriptionId, locationName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling locationsCheckNameAvailability");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling locationsCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling locationsCheckNameAvailability");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling locationsCheckNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'locationName': locationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntityNameAvailabilityCheckOutput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Media/locations/{locationName}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaservicesCreateOrUpdate operation.
     * @callback module:api/DefaultApi~mediaservicesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Media Services account
     * Creates or updates a Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/MediaService} parameters The request parameters
     * @param {module:api/DefaultApi~mediaservicesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaService}
     */
    mediaservicesCreateOrUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaservicesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaservicesCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaservicesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaservicesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling mediaservicesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MediaService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaservicesDelete operation.
     * @callback module:api/DefaultApi~mediaservicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Media Services account.
     * Deletes a Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaservicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaservicesDelete(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaservicesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaservicesDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaservicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaservicesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaservicesGet operation.
     * @callback module:api/DefaultApi~mediaservicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Media Services account
     * Get the details of a Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaservicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaService}
     */
    mediaservicesGet(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaservicesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaservicesGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaservicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaservicesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaservicesGetBySubscription operation.
     * @callback module:api/DefaultApi~mediaservicesGetBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionMediaService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Media Services account
     * Get the details of a Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaservicesGetBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionMediaService}
     */
    mediaservicesGetBySubscription(subscriptionId, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaservicesGetBySubscription");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaservicesGetBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaservicesGetBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionMediaService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Media/mediaservices/{accountName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaservicesList operation.
     * @callback module:api/DefaultApi~mediaservicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaServiceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Media Services accounts
     * List Media Services accounts in the resource group
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaservicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaServiceCollection}
     */
    mediaservicesList(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaservicesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaservicesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaservicesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaServiceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaservicesListBySubscription operation.
     * @callback module:api/DefaultApi~mediaservicesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionMediaServiceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Media Services accounts
     * List Media Services accounts in the subscription.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaservicesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionMediaServiceCollection}
     */
    mediaservicesListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaservicesListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaservicesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionMediaServiceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Media/mediaservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaservicesSyncStorageKeys operation.
     * @callback module:api/DefaultApi~mediaservicesSyncStorageKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Synchronizes Storage Account Keys
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/SyncStorageKeysInput} parameters The request parameters
     * @param {module:api/DefaultApi~mediaservicesSyncStorageKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaservicesSyncStorageKeys(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaservicesSyncStorageKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaservicesSyncStorageKeys");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaservicesSyncStorageKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaservicesSyncStorageKeys");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling mediaservicesSyncStorageKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/syncStorageKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaservicesUpdate operation.
     * @callback module:api/DefaultApi~mediaservicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Media Services account
     * Updates an existing Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/MediaService} parameters The request parameters
     * @param {module:api/DefaultApi~mediaservicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaService}
     */
    mediaservicesUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaservicesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaservicesUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaservicesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaservicesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling mediaservicesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MediaService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/DefaultApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Operations
     * Lists all the Media Services operations.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationCollection}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Media/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
