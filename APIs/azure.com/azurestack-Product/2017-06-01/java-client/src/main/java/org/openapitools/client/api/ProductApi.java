/*
 * AzureStack Azure Bridge Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeviceConfiguration;
import org.openapitools.client.model.ExtendedProduct;
import org.openapitools.client.model.MarketplaceProductLogUpdate;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductList;
import org.openapitools.client.model.ProductLog;
import org.openapitools.client.model.ProductsListDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productsGet
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetCall(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "registrationName" + "}", localVarApiClient.escapeString(registrationName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetValidateBeforeCall(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling productsGet(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling productsGet(Async)");
        }

        // verify the required parameter 'registrationName' is set
        if (registrationName == null) {
            throw new ApiException("Missing the required parameter 'registrationName' when calling productsGet(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsGet(Async)");
        }

        return productsGetCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, _callback);

    }

    /**
     * 
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Product productsGet(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion) throws ApiException {
        ApiResponse<Product> localVarResp = productsGetWithHttpInfo(subscriptionId, resourceGroup, registrationName, productName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> productsGetWithHttpInfo(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = productsGetValidateBeforeCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetAsync(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetValidateBeforeCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsGetProduct
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param deviceConfiguration Device configuration. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetProductCall(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, DeviceConfiguration deviceConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceConfiguration;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/GetProduct"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "registrationName" + "}", localVarApiClient.escapeString(registrationName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetProductValidateBeforeCall(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, DeviceConfiguration deviceConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling productsGetProduct(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling productsGetProduct(Async)");
        }

        // verify the required parameter 'registrationName' is set
        if (registrationName == null) {
            throw new ApiException("Missing the required parameter 'registrationName' when calling productsGetProduct(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsGetProduct(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsGetProduct(Async)");
        }

        return productsGetProductCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, deviceConfiguration, _callback);

    }

    /**
     * 
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param deviceConfiguration Device configuration. (optional)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Product productsGetProduct(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, DeviceConfiguration deviceConfiguration) throws ApiException {
        ApiResponse<Product> localVarResp = productsGetProductWithHttpInfo(subscriptionId, resourceGroup, registrationName, productName, apiVersion, deviceConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param deviceConfiguration Device configuration. (optional)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> productsGetProductWithHttpInfo(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, DeviceConfiguration deviceConfiguration) throws ApiException {
        okhttp3.Call localVarCall = productsGetProductValidateBeforeCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, deviceConfiguration, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param deviceConfiguration Device configuration. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetProductAsync(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, DeviceConfiguration deviceConfiguration, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetProductValidateBeforeCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, deviceConfiguration, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsGetProducts
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param apiVersion Client API Version. (required)
     * @param deviceConfiguration Device configuration. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetProductsCall(String subscriptionId, String resourceGroup, String registrationName, String apiVersion, DeviceConfiguration deviceConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceConfiguration;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/_all/GetProducts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "registrationName" + "}", localVarApiClient.escapeString(registrationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetProductsValidateBeforeCall(String subscriptionId, String resourceGroup, String registrationName, String apiVersion, DeviceConfiguration deviceConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling productsGetProducts(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling productsGetProducts(Async)");
        }

        // verify the required parameter 'registrationName' is set
        if (registrationName == null) {
            throw new ApiException("Missing the required parameter 'registrationName' when calling productsGetProducts(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsGetProducts(Async)");
        }

        return productsGetProductsCall(subscriptionId, resourceGroup, registrationName, apiVersion, deviceConfiguration, _callback);

    }

    /**
     * 
     * Returns a list of products.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param apiVersion Client API Version. (required)
     * @param deviceConfiguration Device configuration. (optional)
     * @return ProductList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProductList productsGetProducts(String subscriptionId, String resourceGroup, String registrationName, String apiVersion, DeviceConfiguration deviceConfiguration) throws ApiException {
        ApiResponse<ProductList> localVarResp = productsGetProductsWithHttpInfo(subscriptionId, resourceGroup, registrationName, apiVersion, deviceConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of products.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param apiVersion Client API Version. (required)
     * @param deviceConfiguration Device configuration. (optional)
     * @return ApiResponse&lt;ProductList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductList> productsGetProductsWithHttpInfo(String subscriptionId, String resourceGroup, String registrationName, String apiVersion, DeviceConfiguration deviceConfiguration) throws ApiException {
        okhttp3.Call localVarCall = productsGetProductsValidateBeforeCall(subscriptionId, resourceGroup, registrationName, apiVersion, deviceConfiguration, null);
        Type localVarReturnType = new TypeToken<ProductList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of products.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param apiVersion Client API Version. (required)
     * @param deviceConfiguration Device configuration. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetProductsAsync(String subscriptionId, String resourceGroup, String registrationName, String apiVersion, DeviceConfiguration deviceConfiguration, final ApiCallback<ProductList> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetProductsValidateBeforeCall(subscriptionId, resourceGroup, registrationName, apiVersion, deviceConfiguration, _callback);
        Type localVarReturnType = new TypeToken<ProductList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsList
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsListCall(String subscriptionId, String resourceGroup, String registrationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "registrationName" + "}", localVarApiClient.escapeString(registrationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsListValidateBeforeCall(String subscriptionId, String resourceGroup, String registrationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling productsList(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling productsList(Async)");
        }

        // verify the required parameter 'registrationName' is set
        if (registrationName == null) {
            throw new ApiException("Missing the required parameter 'registrationName' when calling productsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsList(Async)");
        }

        return productsListCall(subscriptionId, resourceGroup, registrationName, apiVersion, _callback);

    }

    /**
     * 
     * Returns a list of products.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param apiVersion Client API Version. (required)
     * @return ProductList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProductList productsList(String subscriptionId, String resourceGroup, String registrationName, String apiVersion) throws ApiException {
        ApiResponse<ProductList> localVarResp = productsListWithHttpInfo(subscriptionId, resourceGroup, registrationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of products.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;ProductList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductList> productsListWithHttpInfo(String subscriptionId, String resourceGroup, String registrationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = productsListValidateBeforeCall(subscriptionId, resourceGroup, registrationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProductList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of products.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsListAsync(String subscriptionId, String resourceGroup, String registrationName, String apiVersion, final ApiCallback<ProductList> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsListValidateBeforeCall(subscriptionId, resourceGroup, registrationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProductList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsListDetails
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsListDetailsCall(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listDetails"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "registrationName" + "}", localVarApiClient.escapeString(registrationName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsListDetailsValidateBeforeCall(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling productsListDetails(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling productsListDetails(Async)");
        }

        // verify the required parameter 'registrationName' is set
        if (registrationName == null) {
            throw new ApiException("Missing the required parameter 'registrationName' when calling productsListDetails(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsListDetails(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsListDetails(Async)");
        }

        return productsListDetailsCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, _callback);

    }

    /**
     * 
     * Returns the extended properties of a product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @return ExtendedProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedProduct productsListDetails(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion) throws ApiException {
        ApiResponse<ExtendedProduct> localVarResp = productsListDetailsWithHttpInfo(subscriptionId, resourceGroup, registrationName, productName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the extended properties of a product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;ExtendedProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedProduct> productsListDetailsWithHttpInfo(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = productsListDetailsValidateBeforeCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ExtendedProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the extended properties of a product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsListDetailsAsync(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, final ApiCallback<ExtendedProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsListDetailsValidateBeforeCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ExtendedProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsUploadLog
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param marketplaceProductLogUpdate Update details for product log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsUploadLogCall(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, MarketplaceProductLogUpdate marketplaceProductLogUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marketplaceProductLogUpdate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/uploadProductLog"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "registrationName" + "}", localVarApiClient.escapeString(registrationName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsUploadLogValidateBeforeCall(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, MarketplaceProductLogUpdate marketplaceProductLogUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling productsUploadLog(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling productsUploadLog(Async)");
        }

        // verify the required parameter 'registrationName' is set
        if (registrationName == null) {
            throw new ApiException("Missing the required parameter 'registrationName' when calling productsUploadLog(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsUploadLog(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsUploadLog(Async)");
        }

        return productsUploadLogCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, marketplaceProductLogUpdate, _callback);

    }

    /**
     * 
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param marketplaceProductLogUpdate Update details for product log. (optional)
     * @return ProductLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProductLog productsUploadLog(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, MarketplaceProductLogUpdate marketplaceProductLogUpdate) throws ApiException {
        ApiResponse<ProductLog> localVarResp = productsUploadLogWithHttpInfo(subscriptionId, resourceGroup, registrationName, productName, apiVersion, marketplaceProductLogUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param marketplaceProductLogUpdate Update details for product log. (optional)
     * @return ApiResponse&lt;ProductLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductLog> productsUploadLogWithHttpInfo(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, MarketplaceProductLogUpdate marketplaceProductLogUpdate) throws ApiException {
        okhttp3.Call localVarCall = productsUploadLogValidateBeforeCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, marketplaceProductLogUpdate, null);
        Type localVarReturnType = new TypeToken<ProductLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the specified product.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Name of the resource group. (required)
     * @param registrationName Name of the Azure Stack registration. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client API Version. (required)
     * @param marketplaceProductLogUpdate Update details for product log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsUploadLogAsync(String subscriptionId, String resourceGroup, String registrationName, String productName, String apiVersion, MarketplaceProductLogUpdate marketplaceProductLogUpdate, final ApiCallback<ProductLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsUploadLogValidateBeforeCall(subscriptionId, resourceGroup, registrationName, productName, apiVersion, marketplaceProductLogUpdate, _callback);
        Type localVarReturnType = new TypeToken<ProductLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
