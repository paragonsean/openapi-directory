/**
 * AzureStack Azure Bridge Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceConfiguration from '../model/DeviceConfiguration';
import ExtendedProduct from '../model/ExtendedProduct';
import MarketplaceProductLogUpdate from '../model/MarketplaceProductLogUpdate';
import Product from '../model/Product';
import ProductList from '../model/ProductList';
import ProductLog from '../model/ProductLog';
import ProductsListDefaultResponse from '../model/ProductsListDefaultResponse';

/**
* Product service.
* @module api/ProductApi
* @version 2017-06-01
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productsGet operation.
     * @callback module:api/ProductApi~productsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified product.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup Name of the resource group.
     * @param {String} registrationName Name of the Azure Stack registration.
     * @param {String} productName Name of the product.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/ProductApi~productsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    productsGet(subscriptionId, resourceGroup, registrationName, productName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsGet");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsGet");
      }
      // verify the required parameter 'registrationName' is set
      if (registrationName === undefined || registrationName === null) {
        throw new Error("Missing the required parameter 'registrationName' when calling productsGet");
      }
      // verify the required parameter 'productName' is set
      if (productName === undefined || productName === null) {
        throw new Error("Missing the required parameter 'productName' when calling productsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'registrationName': registrationName,
        'productName': productName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsGetProduct operation.
     * @callback module:api/ProductApi~productsGetProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified product.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup Name of the resource group.
     * @param {String} registrationName Name of the Azure Stack registration.
     * @param {String} productName Name of the product.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceConfiguration} [deviceConfiguration] Device configuration.
     * @param {module:api/ProductApi~productsGetProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    productsGetProduct(subscriptionId, resourceGroup, registrationName, productName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceConfiguration'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsGetProduct");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsGetProduct");
      }
      // verify the required parameter 'registrationName' is set
      if (registrationName === undefined || registrationName === null) {
        throw new Error("Missing the required parameter 'registrationName' when calling productsGetProduct");
      }
      // verify the required parameter 'productName' is set
      if (productName === undefined || productName === null) {
        throw new Error("Missing the required parameter 'productName' when calling productsGetProduct");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsGetProduct");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'registrationName': registrationName,
        'productName': productName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/GetProduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsGetProducts operation.
     * @callback module:api/ProductApi~productsGetProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of products.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup Name of the resource group.
     * @param {String} registrationName Name of the Azure Stack registration.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceConfiguration} [deviceConfiguration] Device configuration.
     * @param {module:api/ProductApi~productsGetProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductList}
     */
    productsGetProducts(subscriptionId, resourceGroup, registrationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceConfiguration'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsGetProducts");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsGetProducts");
      }
      // verify the required parameter 'registrationName' is set
      if (registrationName === undefined || registrationName === null) {
        throw new Error("Missing the required parameter 'registrationName' when calling productsGetProducts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsGetProducts");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'registrationName': registrationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/_all/GetProducts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsList operation.
     * @callback module:api/ProductApi~productsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of products.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup Name of the resource group.
     * @param {String} registrationName Name of the Azure Stack registration.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/ProductApi~productsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductList}
     */
    productsList(subscriptionId, resourceGroup, registrationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsList");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsList");
      }
      // verify the required parameter 'registrationName' is set
      if (registrationName === undefined || registrationName === null) {
        throw new Error("Missing the required parameter 'registrationName' when calling productsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'registrationName': registrationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsListDetails operation.
     * @callback module:api/ProductApi~productsListDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the extended properties of a product.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup Name of the resource group.
     * @param {String} registrationName Name of the Azure Stack registration.
     * @param {String} productName Name of the product.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/ProductApi~productsListDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendedProduct}
     */
    productsListDetails(subscriptionId, resourceGroup, registrationName, productName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsListDetails");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsListDetails");
      }
      // verify the required parameter 'registrationName' is set
      if (registrationName === undefined || registrationName === null) {
        throw new Error("Missing the required parameter 'registrationName' when calling productsListDetails");
      }
      // verify the required parameter 'productName' is set
      if (productName === undefined || productName === null) {
        throw new Error("Missing the required parameter 'productName' when calling productsListDetails");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsListDetails");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'registrationName': registrationName,
        'productName': productName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtendedProduct;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsUploadLog operation.
     * @callback module:api/ProductApi~productsUploadLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified product.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup Name of the resource group.
     * @param {String} registrationName Name of the Azure Stack registration.
     * @param {String} productName Name of the product.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {module:model/MarketplaceProductLogUpdate} [marketplaceProductLogUpdate] Update details for product log.
     * @param {module:api/ProductApi~productsUploadLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductLog}
     */
    productsUploadLog(subscriptionId, resourceGroup, registrationName, productName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['marketplaceProductLogUpdate'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsUploadLog");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsUploadLog");
      }
      // verify the required parameter 'registrationName' is set
      if (registrationName === undefined || registrationName === null) {
        throw new Error("Missing the required parameter 'registrationName' when calling productsUploadLog");
      }
      // verify the required parameter 'productName' is set
      if (productName === undefined || productName === null) {
        throw new Error("Missing the required parameter 'productName' when calling productsUploadLog");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsUploadLog");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'registrationName': registrationName,
        'productName': productName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductLog;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/uploadProductLog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
