/**
 * AzureStack Azure Bridge Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedProductProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedProductProperties::OAIExtendedProductProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedProductProperties::OAIExtendedProductProperties() {
    this->initializeModel();
}

OAIExtendedProductProperties::~OAIExtendedProductProperties() {}

void OAIExtendedProductProperties::initializeModel() {

    m_compute_role_isSet = false;
    m_compute_role_isValid = false;

    m_is_system_extension_isSet = false;
    m_is_system_extension_isValid = false;

    m_source_blob_isSet = false;
    m_source_blob_isValid = false;

    m_support_multiple_extensions_isSet = false;
    m_support_multiple_extensions_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_vm_os_type_isSet = false;
    m_vm_os_type_isValid = false;

    m_vm_scale_set_enabled_isSet = false;
    m_vm_scale_set_enabled_isValid = false;

    m_data_disk_images_isSet = false;
    m_data_disk_images_isValid = false;

    m_os_disk_image_isSet = false;
    m_os_disk_image_isValid = false;
}

void OAIExtendedProductProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedProductProperties::fromJsonObject(QJsonObject json) {

    m_compute_role_isValid = ::OpenAPI::fromJsonValue(m_compute_role, json[QString("computeRole")]);
    m_compute_role_isSet = !json[QString("computeRole")].isNull() && m_compute_role_isValid;

    m_is_system_extension_isValid = ::OpenAPI::fromJsonValue(m_is_system_extension, json[QString("isSystemExtension")]);
    m_is_system_extension_isSet = !json[QString("isSystemExtension")].isNull() && m_is_system_extension_isValid;

    m_source_blob_isValid = ::OpenAPI::fromJsonValue(m_source_blob, json[QString("sourceBlob")]);
    m_source_blob_isSet = !json[QString("sourceBlob")].isNull() && m_source_blob_isValid;

    m_support_multiple_extensions_isValid = ::OpenAPI::fromJsonValue(m_support_multiple_extensions, json[QString("supportMultipleExtensions")]);
    m_support_multiple_extensions_isSet = !json[QString("supportMultipleExtensions")].isNull() && m_support_multiple_extensions_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_vm_os_type_isValid = ::OpenAPI::fromJsonValue(m_vm_os_type, json[QString("vmOsType")]);
    m_vm_os_type_isSet = !json[QString("vmOsType")].isNull() && m_vm_os_type_isValid;

    m_vm_scale_set_enabled_isValid = ::OpenAPI::fromJsonValue(m_vm_scale_set_enabled, json[QString("vmScaleSetEnabled")]);
    m_vm_scale_set_enabled_isSet = !json[QString("vmScaleSetEnabled")].isNull() && m_vm_scale_set_enabled_isValid;

    m_data_disk_images_isValid = ::OpenAPI::fromJsonValue(m_data_disk_images, json[QString("dataDiskImages")]);
    m_data_disk_images_isSet = !json[QString("dataDiskImages")].isNull() && m_data_disk_images_isValid;

    m_os_disk_image_isValid = ::OpenAPI::fromJsonValue(m_os_disk_image, json[QString("osDiskImage")]);
    m_os_disk_image_isSet = !json[QString("osDiskImage")].isNull() && m_os_disk_image_isValid;
}

QString OAIExtendedProductProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedProductProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_role.isSet()) {
        obj.insert(QString("computeRole"), ::OpenAPI::toJsonValue(m_compute_role));
    }
    if (m_is_system_extension_isSet) {
        obj.insert(QString("isSystemExtension"), ::OpenAPI::toJsonValue(m_is_system_extension));
    }
    if (m_source_blob.isSet()) {
        obj.insert(QString("sourceBlob"), ::OpenAPI::toJsonValue(m_source_blob));
    }
    if (m_support_multiple_extensions_isSet) {
        obj.insert(QString("supportMultipleExtensions"), ::OpenAPI::toJsonValue(m_support_multiple_extensions));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_vm_os_type.isSet()) {
        obj.insert(QString("vmOsType"), ::OpenAPI::toJsonValue(m_vm_os_type));
    }
    if (m_vm_scale_set_enabled_isSet) {
        obj.insert(QString("vmScaleSetEnabled"), ::OpenAPI::toJsonValue(m_vm_scale_set_enabled));
    }
    if (m_data_disk_images.size() > 0) {
        obj.insert(QString("dataDiskImages"), ::OpenAPI::toJsonValue(m_data_disk_images));
    }
    if (m_os_disk_image.isSet()) {
        obj.insert(QString("osDiskImage"), ::OpenAPI::toJsonValue(m_os_disk_image));
    }
    return obj;
}

OAIComputeRole OAIExtendedProductProperties::getComputeRole() const {
    return m_compute_role;
}
void OAIExtendedProductProperties::setComputeRole(const OAIComputeRole &compute_role) {
    m_compute_role = compute_role;
    m_compute_role_isSet = true;
}

bool OAIExtendedProductProperties::is_compute_role_Set() const{
    return m_compute_role_isSet;
}

bool OAIExtendedProductProperties::is_compute_role_Valid() const{
    return m_compute_role_isValid;
}

bool OAIExtendedProductProperties::isIsSystemExtension() const {
    return m_is_system_extension;
}
void OAIExtendedProductProperties::setIsSystemExtension(const bool &is_system_extension) {
    m_is_system_extension = is_system_extension;
    m_is_system_extension_isSet = true;
}

bool OAIExtendedProductProperties::is_is_system_extension_Set() const{
    return m_is_system_extension_isSet;
}

bool OAIExtendedProductProperties::is_is_system_extension_Valid() const{
    return m_is_system_extension_isValid;
}

OAIUri OAIExtendedProductProperties::getSourceBlob() const {
    return m_source_blob;
}
void OAIExtendedProductProperties::setSourceBlob(const OAIUri &source_blob) {
    m_source_blob = source_blob;
    m_source_blob_isSet = true;
}

bool OAIExtendedProductProperties::is_source_blob_Set() const{
    return m_source_blob_isSet;
}

bool OAIExtendedProductProperties::is_source_blob_Valid() const{
    return m_source_blob_isValid;
}

bool OAIExtendedProductProperties::isSupportMultipleExtensions() const {
    return m_support_multiple_extensions;
}
void OAIExtendedProductProperties::setSupportMultipleExtensions(const bool &support_multiple_extensions) {
    m_support_multiple_extensions = support_multiple_extensions;
    m_support_multiple_extensions_isSet = true;
}

bool OAIExtendedProductProperties::is_support_multiple_extensions_Set() const{
    return m_support_multiple_extensions_isSet;
}

bool OAIExtendedProductProperties::is_support_multiple_extensions_Valid() const{
    return m_support_multiple_extensions_isValid;
}

QString OAIExtendedProductProperties::getVersion() const {
    return m_version;
}
void OAIExtendedProductProperties::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExtendedProductProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExtendedProductProperties::is_version_Valid() const{
    return m_version_isValid;
}

OAIOperatingSystem OAIExtendedProductProperties::getVmOsType() const {
    return m_vm_os_type;
}
void OAIExtendedProductProperties::setVmOsType(const OAIOperatingSystem &vm_os_type) {
    m_vm_os_type = vm_os_type;
    m_vm_os_type_isSet = true;
}

bool OAIExtendedProductProperties::is_vm_os_type_Set() const{
    return m_vm_os_type_isSet;
}

bool OAIExtendedProductProperties::is_vm_os_type_Valid() const{
    return m_vm_os_type_isValid;
}

bool OAIExtendedProductProperties::isVmScaleSetEnabled() const {
    return m_vm_scale_set_enabled;
}
void OAIExtendedProductProperties::setVmScaleSetEnabled(const bool &vm_scale_set_enabled) {
    m_vm_scale_set_enabled = vm_scale_set_enabled;
    m_vm_scale_set_enabled_isSet = true;
}

bool OAIExtendedProductProperties::is_vm_scale_set_enabled_Set() const{
    return m_vm_scale_set_enabled_isSet;
}

bool OAIExtendedProductProperties::is_vm_scale_set_enabled_Valid() const{
    return m_vm_scale_set_enabled_isValid;
}

QList<OAIDataDiskImage> OAIExtendedProductProperties::getDataDiskImages() const {
    return m_data_disk_images;
}
void OAIExtendedProductProperties::setDataDiskImages(const QList<OAIDataDiskImage> &data_disk_images) {
    m_data_disk_images = data_disk_images;
    m_data_disk_images_isSet = true;
}

bool OAIExtendedProductProperties::is_data_disk_images_Set() const{
    return m_data_disk_images_isSet;
}

bool OAIExtendedProductProperties::is_data_disk_images_Valid() const{
    return m_data_disk_images_isValid;
}

OAIOsDiskImage OAIExtendedProductProperties::getOsDiskImage() const {
    return m_os_disk_image;
}
void OAIExtendedProductProperties::setOsDiskImage(const OAIOsDiskImage &os_disk_image) {
    m_os_disk_image = os_disk_image;
    m_os_disk_image_isSet = true;
}

bool OAIExtendedProductProperties::is_os_disk_image_Set() const{
    return m_os_disk_image_isSet;
}

bool OAIExtendedProductProperties::is_os_disk_image_Valid() const{
    return m_os_disk_image_isValid;
}

bool OAIExtendedProductProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_blob.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_multiple_extensions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_scale_set_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disk_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disk_image.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedProductProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
