/**
 * AzureStack Azure Bridge Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductNestedProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductNestedProperties::OAIProductNestedProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductNestedProperties::OAIProductNestedProperties() {
    this->initializeModel();
}

OAIProductNestedProperties::~OAIProductNestedProperties() {}

void OAIProductNestedProperties::initializeModel() {

    m_billing_part_number_isSet = false;
    m_billing_part_number_isValid = false;

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_gallery_item_identity_isSet = false;
    m_gallery_item_identity_isValid = false;

    m_icon_uris_isSet = false;
    m_icon_uris_isValid = false;

    m_legal_terms_isSet = false;
    m_legal_terms_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_offer_isSet = false;
    m_offer_isValid = false;

    m_offer_version_isSet = false;
    m_offer_version_isValid = false;

    m_payload_length_isSet = false;
    m_payload_length_isValid = false;

    m_privacy_policy_isSet = false;
    m_privacy_policy_isValid = false;

    m_product_kind_isSet = false;
    m_product_kind_isValid = false;

    m_product_properties_isSet = false;
    m_product_properties_isValid = false;

    m_publisher_display_name_isSet = false;
    m_publisher_display_name_isValid = false;

    m_publisher_identifier_isSet = false;
    m_publisher_identifier_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_vm_extension_type_isSet = false;
    m_vm_extension_type_isValid = false;
}

void OAIProductNestedProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductNestedProperties::fromJsonObject(QJsonObject json) {

    m_billing_part_number_isValid = ::OpenAPI::fromJsonValue(m_billing_part_number, json[QString("billingPartNumber")]);
    m_billing_part_number_isSet = !json[QString("billingPartNumber")].isNull() && m_billing_part_number_isValid;

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("compatibility")]);
    m_compatibility_isSet = !json[QString("compatibility")].isNull() && m_compatibility_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_gallery_item_identity_isValid = ::OpenAPI::fromJsonValue(m_gallery_item_identity, json[QString("galleryItemIdentity")]);
    m_gallery_item_identity_isSet = !json[QString("galleryItemIdentity")].isNull() && m_gallery_item_identity_isValid;

    m_icon_uris_isValid = ::OpenAPI::fromJsonValue(m_icon_uris, json[QString("iconUris")]);
    m_icon_uris_isSet = !json[QString("iconUris")].isNull() && m_icon_uris_isValid;

    m_legal_terms_isValid = ::OpenAPI::fromJsonValue(m_legal_terms, json[QString("legalTerms")]);
    m_legal_terms_isSet = !json[QString("legalTerms")].isNull() && m_legal_terms_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_offer_isValid = ::OpenAPI::fromJsonValue(m_offer, json[QString("offer")]);
    m_offer_isSet = !json[QString("offer")].isNull() && m_offer_isValid;

    m_offer_version_isValid = ::OpenAPI::fromJsonValue(m_offer_version, json[QString("offerVersion")]);
    m_offer_version_isSet = !json[QString("offerVersion")].isNull() && m_offer_version_isValid;

    m_payload_length_isValid = ::OpenAPI::fromJsonValue(m_payload_length, json[QString("payloadLength")]);
    m_payload_length_isSet = !json[QString("payloadLength")].isNull() && m_payload_length_isValid;

    m_privacy_policy_isValid = ::OpenAPI::fromJsonValue(m_privacy_policy, json[QString("privacyPolicy")]);
    m_privacy_policy_isSet = !json[QString("privacyPolicy")].isNull() && m_privacy_policy_isValid;

    m_product_kind_isValid = ::OpenAPI::fromJsonValue(m_product_kind, json[QString("productKind")]);
    m_product_kind_isSet = !json[QString("productKind")].isNull() && m_product_kind_isValid;

    m_product_properties_isValid = ::OpenAPI::fromJsonValue(m_product_properties, json[QString("productProperties")]);
    m_product_properties_isSet = !json[QString("productProperties")].isNull() && m_product_properties_isValid;

    m_publisher_display_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_display_name, json[QString("publisherDisplayName")]);
    m_publisher_display_name_isSet = !json[QString("publisherDisplayName")].isNull() && m_publisher_display_name_isValid;

    m_publisher_identifier_isValid = ::OpenAPI::fromJsonValue(m_publisher_identifier, json[QString("publisherIdentifier")]);
    m_publisher_identifier_isSet = !json[QString("publisherIdentifier")].isNull() && m_publisher_identifier_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_vm_extension_type_isValid = ::OpenAPI::fromJsonValue(m_vm_extension_type, json[QString("vmExtensionType")]);
    m_vm_extension_type_isSet = !json[QString("vmExtensionType")].isNull() && m_vm_extension_type_isValid;
}

QString OAIProductNestedProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductNestedProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_part_number_isSet) {
        obj.insert(QString("billingPartNumber"), ::OpenAPI::toJsonValue(m_billing_part_number));
    }
    if (m_compatibility.isSet()) {
        obj.insert(QString("compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_gallery_item_identity_isSet) {
        obj.insert(QString("galleryItemIdentity"), ::OpenAPI::toJsonValue(m_gallery_item_identity));
    }
    if (m_icon_uris.isSet()) {
        obj.insert(QString("iconUris"), ::OpenAPI::toJsonValue(m_icon_uris));
    }
    if (m_legal_terms_isSet) {
        obj.insert(QString("legalTerms"), ::OpenAPI::toJsonValue(m_legal_terms));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_offer_isSet) {
        obj.insert(QString("offer"), ::OpenAPI::toJsonValue(m_offer));
    }
    if (m_offer_version_isSet) {
        obj.insert(QString("offerVersion"), ::OpenAPI::toJsonValue(m_offer_version));
    }
    if (m_payload_length_isSet) {
        obj.insert(QString("payloadLength"), ::OpenAPI::toJsonValue(m_payload_length));
    }
    if (m_privacy_policy_isSet) {
        obj.insert(QString("privacyPolicy"), ::OpenAPI::toJsonValue(m_privacy_policy));
    }
    if (m_product_kind_isSet) {
        obj.insert(QString("productKind"), ::OpenAPI::toJsonValue(m_product_kind));
    }
    if (m_product_properties.isSet()) {
        obj.insert(QString("productProperties"), ::OpenAPI::toJsonValue(m_product_properties));
    }
    if (m_publisher_display_name_isSet) {
        obj.insert(QString("publisherDisplayName"), ::OpenAPI::toJsonValue(m_publisher_display_name));
    }
    if (m_publisher_identifier_isSet) {
        obj.insert(QString("publisherIdentifier"), ::OpenAPI::toJsonValue(m_publisher_identifier));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_vm_extension_type_isSet) {
        obj.insert(QString("vmExtensionType"), ::OpenAPI::toJsonValue(m_vm_extension_type));
    }
    return obj;
}

QString OAIProductNestedProperties::getBillingPartNumber() const {
    return m_billing_part_number;
}
void OAIProductNestedProperties::setBillingPartNumber(const QString &billing_part_number) {
    m_billing_part_number = billing_part_number;
    m_billing_part_number_isSet = true;
}

bool OAIProductNestedProperties::is_billing_part_number_Set() const{
    return m_billing_part_number_isSet;
}

bool OAIProductNestedProperties::is_billing_part_number_Valid() const{
    return m_billing_part_number_isValid;
}

OAICompatibility OAIProductNestedProperties::getCompatibility() const {
    return m_compatibility;
}
void OAIProductNestedProperties::setCompatibility(const OAICompatibility &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAIProductNestedProperties::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAIProductNestedProperties::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

QString OAIProductNestedProperties::getDescription() const {
    return m_description;
}
void OAIProductNestedProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductNestedProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductNestedProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProductNestedProperties::getDisplayName() const {
    return m_display_name;
}
void OAIProductNestedProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProductNestedProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProductNestedProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIProductNestedProperties::getGalleryItemIdentity() const {
    return m_gallery_item_identity;
}
void OAIProductNestedProperties::setGalleryItemIdentity(const QString &gallery_item_identity) {
    m_gallery_item_identity = gallery_item_identity;
    m_gallery_item_identity_isSet = true;
}

bool OAIProductNestedProperties::is_gallery_item_identity_Set() const{
    return m_gallery_item_identity_isSet;
}

bool OAIProductNestedProperties::is_gallery_item_identity_Valid() const{
    return m_gallery_item_identity_isValid;
}

OAIIconUris OAIProductNestedProperties::getIconUris() const {
    return m_icon_uris;
}
void OAIProductNestedProperties::setIconUris(const OAIIconUris &icon_uris) {
    m_icon_uris = icon_uris;
    m_icon_uris_isSet = true;
}

bool OAIProductNestedProperties::is_icon_uris_Set() const{
    return m_icon_uris_isSet;
}

bool OAIProductNestedProperties::is_icon_uris_Valid() const{
    return m_icon_uris_isValid;
}

QString OAIProductNestedProperties::getLegalTerms() const {
    return m_legal_terms;
}
void OAIProductNestedProperties::setLegalTerms(const QString &legal_terms) {
    m_legal_terms = legal_terms;
    m_legal_terms_isSet = true;
}

bool OAIProductNestedProperties::is_legal_terms_Set() const{
    return m_legal_terms_isSet;
}

bool OAIProductNestedProperties::is_legal_terms_Valid() const{
    return m_legal_terms_isValid;
}

QList<OAIProductLink> OAIProductNestedProperties::getLinks() const {
    return m_links;
}
void OAIProductNestedProperties::setLinks(const QList<OAIProductLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIProductNestedProperties::is_links_Set() const{
    return m_links_isSet;
}

bool OAIProductNestedProperties::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIProductNestedProperties::getOffer() const {
    return m_offer;
}
void OAIProductNestedProperties::setOffer(const QString &offer) {
    m_offer = offer;
    m_offer_isSet = true;
}

bool OAIProductNestedProperties::is_offer_Set() const{
    return m_offer_isSet;
}

bool OAIProductNestedProperties::is_offer_Valid() const{
    return m_offer_isValid;
}

QString OAIProductNestedProperties::getOfferVersion() const {
    return m_offer_version;
}
void OAIProductNestedProperties::setOfferVersion(const QString &offer_version) {
    m_offer_version = offer_version;
    m_offer_version_isSet = true;
}

bool OAIProductNestedProperties::is_offer_version_Set() const{
    return m_offer_version_isSet;
}

bool OAIProductNestedProperties::is_offer_version_Valid() const{
    return m_offer_version_isValid;
}

qint64 OAIProductNestedProperties::getPayloadLength() const {
    return m_payload_length;
}
void OAIProductNestedProperties::setPayloadLength(const qint64 &payload_length) {
    m_payload_length = payload_length;
    m_payload_length_isSet = true;
}

bool OAIProductNestedProperties::is_payload_length_Set() const{
    return m_payload_length_isSet;
}

bool OAIProductNestedProperties::is_payload_length_Valid() const{
    return m_payload_length_isValid;
}

QString OAIProductNestedProperties::getPrivacyPolicy() const {
    return m_privacy_policy;
}
void OAIProductNestedProperties::setPrivacyPolicy(const QString &privacy_policy) {
    m_privacy_policy = privacy_policy;
    m_privacy_policy_isSet = true;
}

bool OAIProductNestedProperties::is_privacy_policy_Set() const{
    return m_privacy_policy_isSet;
}

bool OAIProductNestedProperties::is_privacy_policy_Valid() const{
    return m_privacy_policy_isValid;
}

QString OAIProductNestedProperties::getProductKind() const {
    return m_product_kind;
}
void OAIProductNestedProperties::setProductKind(const QString &product_kind) {
    m_product_kind = product_kind;
    m_product_kind_isSet = true;
}

bool OAIProductNestedProperties::is_product_kind_Set() const{
    return m_product_kind_isSet;
}

bool OAIProductNestedProperties::is_product_kind_Valid() const{
    return m_product_kind_isValid;
}

OAIProductProperties OAIProductNestedProperties::getProductProperties() const {
    return m_product_properties;
}
void OAIProductNestedProperties::setProductProperties(const OAIProductProperties &product_properties) {
    m_product_properties = product_properties;
    m_product_properties_isSet = true;
}

bool OAIProductNestedProperties::is_product_properties_Set() const{
    return m_product_properties_isSet;
}

bool OAIProductNestedProperties::is_product_properties_Valid() const{
    return m_product_properties_isValid;
}

QString OAIProductNestedProperties::getPublisherDisplayName() const {
    return m_publisher_display_name;
}
void OAIProductNestedProperties::setPublisherDisplayName(const QString &publisher_display_name) {
    m_publisher_display_name = publisher_display_name;
    m_publisher_display_name_isSet = true;
}

bool OAIProductNestedProperties::is_publisher_display_name_Set() const{
    return m_publisher_display_name_isSet;
}

bool OAIProductNestedProperties::is_publisher_display_name_Valid() const{
    return m_publisher_display_name_isValid;
}

QString OAIProductNestedProperties::getPublisherIdentifier() const {
    return m_publisher_identifier;
}
void OAIProductNestedProperties::setPublisherIdentifier(const QString &publisher_identifier) {
    m_publisher_identifier = publisher_identifier;
    m_publisher_identifier_isSet = true;
}

bool OAIProductNestedProperties::is_publisher_identifier_Set() const{
    return m_publisher_identifier_isSet;
}

bool OAIProductNestedProperties::is_publisher_identifier_Valid() const{
    return m_publisher_identifier_isValid;
}

QString OAIProductNestedProperties::getSku() const {
    return m_sku;
}
void OAIProductNestedProperties::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIProductNestedProperties::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIProductNestedProperties::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIProductNestedProperties::getVmExtensionType() const {
    return m_vm_extension_type;
}
void OAIProductNestedProperties::setVmExtensionType(const QString &vm_extension_type) {
    m_vm_extension_type = vm_extension_type;
    m_vm_extension_type_isSet = true;
}

bool OAIProductNestedProperties::is_vm_extension_type_Set() const{
    return m_vm_extension_type_isSet;
}

bool OAIProductNestedProperties::is_vm_extension_type_Valid() const{
    return m_vm_extension_type_isValid;
}

bool OAIProductNestedProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gallery_item_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_uris.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_extension_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductNestedProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
