/**
 * AzureStack Azure Bridge Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductLog::OAIProductLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductLog::OAIProductLog() {
    this->initializeModel();
}

OAIProductLog::~OAIProductLog() {}

void OAIProductLog::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_registration_name_isSet = false;
    m_registration_name_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIProductLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductLog::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_registration_name_isValid = ::OpenAPI::fromJsonValue(m_registration_name, json[QString("registrationName")]);
    m_registration_name_isSet = !json[QString("registrationName")].isNull() && m_registration_name_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIProductLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductLog::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_registration_name_isSet) {
        obj.insert(QString("registrationName"), ::OpenAPI::toJsonValue(m_registration_name));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QString OAIProductLog::getDetails() const {
    return m_details;
}
void OAIProductLog::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIProductLog::is_details_Set() const{
    return m_details_isSet;
}

bool OAIProductLog::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIProductLog::getEndDate() const {
    return m_end_date;
}
void OAIProductLog::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIProductLog::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIProductLog::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIProductLog::getError() const {
    return m_error;
}
void OAIProductLog::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIProductLog::is_error_Set() const{
    return m_error_isSet;
}

bool OAIProductLog::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIProductLog::getId() const {
    return m_id;
}
void OAIProductLog::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductLog::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductLog::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProductLog::getOperation() const {
    return m_operation;
}
void OAIProductLog::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIProductLog::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIProductLog::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIProductLog::getProductId() const {
    return m_product_id;
}
void OAIProductLog::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductLog::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductLog::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProductLog::getRegistrationName() const {
    return m_registration_name;
}
void OAIProductLog::setRegistrationName(const QString &registration_name) {
    m_registration_name = registration_name;
    m_registration_name_isSet = true;
}

bool OAIProductLog::is_registration_name_Set() const{
    return m_registration_name_isSet;
}

bool OAIProductLog::is_registration_name_Valid() const{
    return m_registration_name_isValid;
}

QString OAIProductLog::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAIProductLog::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAIProductLog::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAIProductLog::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAIProductLog::getStartDate() const {
    return m_start_date;
}
void OAIProductLog::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProductLog::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProductLog::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIProductLog::getStatus() const {
    return m_status;
}
void OAIProductLog::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProductLog::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProductLog::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProductLog::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIProductLog::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIProductLog::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIProductLog::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIProductLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
