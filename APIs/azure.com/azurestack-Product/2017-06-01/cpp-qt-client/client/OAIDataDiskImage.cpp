/**
 * AzureStack Azure Bridge Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataDiskImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataDiskImage::OAIDataDiskImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataDiskImage::OAIDataDiskImage() {
    this->initializeModel();
}

OAIDataDiskImage::~OAIDataDiskImage() {}

void OAIDataDiskImage::initializeModel() {

    m_lun_isSet = false;
    m_lun_isValid = false;

    m_source_blob_sas_uri_isSet = false;
    m_source_blob_sas_uri_isValid = false;
}

void OAIDataDiskImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataDiskImage::fromJsonObject(QJsonObject json) {

    m_lun_isValid = ::OpenAPI::fromJsonValue(m_lun, json[QString("lun")]);
    m_lun_isSet = !json[QString("lun")].isNull() && m_lun_isValid;

    m_source_blob_sas_uri_isValid = ::OpenAPI::fromJsonValue(m_source_blob_sas_uri, json[QString("sourceBlobSasUri")]);
    m_source_blob_sas_uri_isSet = !json[QString("sourceBlobSasUri")].isNull() && m_source_blob_sas_uri_isValid;
}

QString OAIDataDiskImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataDiskImage::asJsonObject() const {
    QJsonObject obj;
    if (m_lun_isSet) {
        obj.insert(QString("lun"), ::OpenAPI::toJsonValue(m_lun));
    }
    if (m_source_blob_sas_uri_isSet) {
        obj.insert(QString("sourceBlobSasUri"), ::OpenAPI::toJsonValue(m_source_blob_sas_uri));
    }
    return obj;
}

qint32 OAIDataDiskImage::getLun() const {
    return m_lun;
}
void OAIDataDiskImage::setLun(const qint32 &lun) {
    m_lun = lun;
    m_lun_isSet = true;
}

bool OAIDataDiskImage::is_lun_Set() const{
    return m_lun_isSet;
}

bool OAIDataDiskImage::is_lun_Valid() const{
    return m_lun_isValid;
}

QString OAIDataDiskImage::getSourceBlobSasUri() const {
    return m_source_blob_sas_uri;
}
void OAIDataDiskImage::setSourceBlobSasUri(const QString &source_blob_sas_uri) {
    m_source_blob_sas_uri = source_blob_sas_uri;
    m_source_blob_sas_uri_isSet = true;
}

bool OAIDataDiskImage::is_source_blob_sas_uri_Set() const{
    return m_source_blob_sas_uri_isSet;
}

bool OAIDataDiskImage::is_source_blob_sas_uri_Valid() const{
    return m_source_blob_sas_uri_isValid;
}

bool OAIDataDiskImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lun_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_blob_sas_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataDiskImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
