# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, end_date: str=None, error: str=None, id: str=None, operation: str=None, product_id: str=None, registration_name: str=None, resource_group_name: str=None, start_date: str=None, status: str=None, subscription_id: str=None):
        """ProductLog - a model defined in OpenAPI

        :param details: The details of this ProductLog.
        :param end_date: The end_date of this ProductLog.
        :param error: The error of this ProductLog.
        :param id: The id of this ProductLog.
        :param operation: The operation of this ProductLog.
        :param product_id: The product_id of this ProductLog.
        :param registration_name: The registration_name of this ProductLog.
        :param resource_group_name: The resource_group_name of this ProductLog.
        :param start_date: The start_date of this ProductLog.
        :param status: The status of this ProductLog.
        :param subscription_id: The subscription_id of this ProductLog.
        """
        self.openapi_types = {
            'details': str,
            'end_date': str,
            'error': str,
            'id': str,
            'operation': str,
            'product_id': str,
            'registration_name': str,
            'resource_group_name': str,
            'start_date': str,
            'status': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'details': 'details',
            'end_date': 'endDate',
            'error': 'error',
            'id': 'id',
            'operation': 'operation',
            'product_id': 'productId',
            'registration_name': 'registrationName',
            'resource_group_name': 'resourceGroupName',
            'start_date': 'startDate',
            'status': 'status',
            'subscription_id': 'subscriptionId'
        }

        self._details = details
        self._end_date = end_date
        self._error = error
        self._id = id
        self._operation = operation
        self._product_id = product_id
        self._registration_name = registration_name
        self._resource_group_name = resource_group_name
        self._start_date = start_date
        self._status = status
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductLog of this ProductLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this ProductLog.

        Operation error details.

        :return: The details of this ProductLog.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ProductLog.

        Operation error details.

        :param details: The details of this ProductLog.
        :type details: str
        """

        self._details = details

    @property
    def end_date(self):
        """Gets the end_date of this ProductLog.

        Operation end datetime.

        :return: The end_date of this ProductLog.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ProductLog.

        Operation end datetime.

        :param end_date: The end_date of this ProductLog.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def error(self):
        """Gets the error of this ProductLog.

        Operation error data.

        :return: The error of this ProductLog.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ProductLog.

        Operation error data.

        :param error: The error of this ProductLog.
        :type error: str
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this ProductLog.

        Log ID.

        :return: The id of this ProductLog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductLog.

        Log ID.

        :param id: The id of this ProductLog.
        :type id: str
        """

        self._id = id

    @property
    def operation(self):
        """Gets the operation of this ProductLog.

        Logged operation.

        :return: The operation of this ProductLog.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ProductLog.

        Logged operation.

        :param operation: The operation of this ProductLog.
        :type operation: str
        """

        self._operation = operation

    @property
    def product_id(self):
        """Gets the product_id of this ProductLog.

        Logged product ID.

        :return: The product_id of this ProductLog.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductLog.

        Logged product ID.

        :param product_id: The product_id of this ProductLog.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def registration_name(self):
        """Gets the registration_name of this ProductLog.

        Logged registration name.

        :return: The registration_name of this ProductLog.
        :rtype: str
        """
        return self._registration_name

    @registration_name.setter
    def registration_name(self, registration_name):
        """Sets the registration_name of this ProductLog.

        Logged registration name.

        :param registration_name: The registration_name of this ProductLog.
        :type registration_name: str
        """

        self._registration_name = registration_name

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this ProductLog.

        Logged resource group name.

        :return: The resource_group_name of this ProductLog.
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this ProductLog.

        Logged resource group name.

        :param resource_group_name: The resource_group_name of this ProductLog.
        :type resource_group_name: str
        """

        self._resource_group_name = resource_group_name

    @property
    def start_date(self):
        """Gets the start_date of this ProductLog.

        Operation start datetime.

        :return: The start_date of this ProductLog.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ProductLog.

        Operation start datetime.

        :param start_date: The start_date of this ProductLog.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this ProductLog.

        Operation status.

        :return: The status of this ProductLog.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductLog.

        Operation status.

        :param status: The status of this ProductLog.
        :type status: str
        """

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ProductLog.

        Logged subscription ID.

        :return: The subscription_id of this ProductLog.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ProductLog.

        Logged subscription ID.

        :param subscription_id: The subscription_id of this ProductLog.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id
