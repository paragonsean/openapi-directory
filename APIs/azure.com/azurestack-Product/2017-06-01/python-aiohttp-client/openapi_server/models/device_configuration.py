# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_version: str=None, identity_system: str=None):
        """DeviceConfiguration - a model defined in OpenAPI

        :param device_version: The device_version of this DeviceConfiguration.
        :param identity_system: The identity_system of this DeviceConfiguration.
        """
        self.openapi_types = {
            'device_version': str,
            'identity_system': str
        }

        self.attribute_map = {
            'device_version': 'deviceVersion',
            'identity_system': 'identitySystem'
        }

        self._device_version = device_version
        self._identity_system = identity_system

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceConfiguration of this DeviceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_version(self):
        """Gets the device_version of this DeviceConfiguration.

        Version of the device.

        :return: The device_version of this DeviceConfiguration.
        :rtype: str
        """
        return self._device_version

    @device_version.setter
    def device_version(self, device_version):
        """Sets the device_version of this DeviceConfiguration.

        Version of the device.

        :param device_version: The device_version of this DeviceConfiguration.
        :type device_version: str
        """

        self._device_version = device_version

    @property
    def identity_system(self):
        """Gets the identity_system of this DeviceConfiguration.

        Identity system of the device.

        :return: The identity_system of this DeviceConfiguration.
        :rtype: str
        """
        return self._identity_system

    @identity_system.setter
    def identity_system(self, identity_system):
        """Sets the identity_system of this DeviceConfiguration.

        Identity system of the device.

        :param identity_system: The identity_system of this DeviceConfiguration.
        :type identity_system: str
        """
        allowed_values = ["AzureAD", "ADFS"]  # noqa: E501
        if identity_system not in allowed_values:
            raise ValueError(
                "Invalid value for `identity_system` ({0}), must be one of {1}"
                .format(identity_system, allowed_values)
            )

        self._identity_system = identity_system
