/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFirewallNatRuleCollectionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFirewallNatRuleCollectionProperties::OAIAzureFirewallNatRuleCollectionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFirewallNatRuleCollectionProperties::OAIAzureFirewallNatRuleCollectionProperties() {
    this->initializeModel();
}

OAIAzureFirewallNatRuleCollectionProperties::~OAIAzureFirewallNatRuleCollectionProperties() {}

void OAIAzureFirewallNatRuleCollectionProperties::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIAzureFirewallNatRuleCollectionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFirewallNatRuleCollectionProperties::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIAzureFirewallNatRuleCollectionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFirewallNatRuleCollectionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

OAIAzureFirewallNatRCAction OAIAzureFirewallNatRuleCollectionProperties::getAction() const {
    return m_action;
}
void OAIAzureFirewallNatRuleCollectionProperties::setAction(const OAIAzureFirewallNatRCAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAzureFirewallNatRuleCollectionProperties::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAzureFirewallNatRuleCollectionProperties::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAIAzureFirewallNatRuleCollectionProperties::getPriority() const {
    return m_priority;
}
void OAIAzureFirewallNatRuleCollectionProperties::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIAzureFirewallNatRuleCollectionProperties::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIAzureFirewallNatRuleCollectionProperties::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIProvisioningState OAIAzureFirewallNatRuleCollectionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAzureFirewallNatRuleCollectionProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAzureFirewallNatRuleCollectionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAzureFirewallNatRuleCollectionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIAzureFirewallNatRule> OAIAzureFirewallNatRuleCollectionProperties::getRules() const {
    return m_rules;
}
void OAIAzureFirewallNatRuleCollectionProperties::setRules(const QList<OAIAzureFirewallNatRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIAzureFirewallNatRuleCollectionProperties::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIAzureFirewallNatRuleCollectionProperties::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIAzureFirewallNatRuleCollectionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFirewallNatRuleCollectionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
