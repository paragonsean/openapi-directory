/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFirewallNetworkRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFirewallNetworkRule::OAIAzureFirewallNetworkRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFirewallNetworkRule::OAIAzureFirewallNetworkRule() {
    this->initializeModel();
}

OAIAzureFirewallNetworkRule::~OAIAzureFirewallNetworkRule() {}

void OAIAzureFirewallNetworkRule::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_addresses_isSet = false;
    m_destination_addresses_isValid = false;

    m_destination_ports_isSet = false;
    m_destination_ports_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_source_addresses_isSet = false;
    m_source_addresses_isValid = false;
}

void OAIAzureFirewallNetworkRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFirewallNetworkRule::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_addresses_isValid = ::OpenAPI::fromJsonValue(m_destination_addresses, json[QString("destinationAddresses")]);
    m_destination_addresses_isSet = !json[QString("destinationAddresses")].isNull() && m_destination_addresses_isValid;

    m_destination_ports_isValid = ::OpenAPI::fromJsonValue(m_destination_ports, json[QString("destinationPorts")]);
    m_destination_ports_isSet = !json[QString("destinationPorts")].isNull() && m_destination_ports_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;

    m_source_addresses_isValid = ::OpenAPI::fromJsonValue(m_source_addresses, json[QString("sourceAddresses")]);
    m_source_addresses_isSet = !json[QString("sourceAddresses")].isNull() && m_source_addresses_isValid;
}

QString OAIAzureFirewallNetworkRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFirewallNetworkRule::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_addresses.size() > 0) {
        obj.insert(QString("destinationAddresses"), ::OpenAPI::toJsonValue(m_destination_addresses));
    }
    if (m_destination_ports.size() > 0) {
        obj.insert(QString("destinationPorts"), ::OpenAPI::toJsonValue(m_destination_ports));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_source_addresses.size() > 0) {
        obj.insert(QString("sourceAddresses"), ::OpenAPI::toJsonValue(m_source_addresses));
    }
    return obj;
}

QString OAIAzureFirewallNetworkRule::getDescription() const {
    return m_description;
}
void OAIAzureFirewallNetworkRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAzureFirewallNetworkRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAzureFirewallNetworkRule::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIAzureFirewallNetworkRule::getDestinationAddresses() const {
    return m_destination_addresses;
}
void OAIAzureFirewallNetworkRule::setDestinationAddresses(const QList<QString> &destination_addresses) {
    m_destination_addresses = destination_addresses;
    m_destination_addresses_isSet = true;
}

bool OAIAzureFirewallNetworkRule::is_destination_addresses_Set() const{
    return m_destination_addresses_isSet;
}

bool OAIAzureFirewallNetworkRule::is_destination_addresses_Valid() const{
    return m_destination_addresses_isValid;
}

QList<QString> OAIAzureFirewallNetworkRule::getDestinationPorts() const {
    return m_destination_ports;
}
void OAIAzureFirewallNetworkRule::setDestinationPorts(const QList<QString> &destination_ports) {
    m_destination_ports = destination_ports;
    m_destination_ports_isSet = true;
}

bool OAIAzureFirewallNetworkRule::is_destination_ports_Set() const{
    return m_destination_ports_isSet;
}

bool OAIAzureFirewallNetworkRule::is_destination_ports_Valid() const{
    return m_destination_ports_isValid;
}

QString OAIAzureFirewallNetworkRule::getName() const {
    return m_name;
}
void OAIAzureFirewallNetworkRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAzureFirewallNetworkRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAzureFirewallNetworkRule::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIAzureFirewallNetworkRuleProtocol> OAIAzureFirewallNetworkRule::getProtocols() const {
    return m_protocols;
}
void OAIAzureFirewallNetworkRule::setProtocols(const QList<OAIAzureFirewallNetworkRuleProtocol> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIAzureFirewallNetworkRule::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIAzureFirewallNetworkRule::is_protocols_Valid() const{
    return m_protocols_isValid;
}

QList<QString> OAIAzureFirewallNetworkRule::getSourceAddresses() const {
    return m_source_addresses;
}
void OAIAzureFirewallNetworkRule::setSourceAddresses(const QList<QString> &source_addresses) {
    m_source_addresses = source_addresses;
    m_source_addresses_isSet = true;
}

bool OAIAzureFirewallNetworkRule::is_source_addresses_Set() const{
    return m_source_addresses_isSet;
}

bool OAIAzureFirewallNetworkRule::is_source_addresses_Valid() const{
    return m_source_addresses_isValid;
}

bool OAIAzureFirewallNetworkRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFirewallNetworkRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
