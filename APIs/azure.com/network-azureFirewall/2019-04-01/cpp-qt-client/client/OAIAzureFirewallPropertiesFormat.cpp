/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFirewallPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFirewallPropertiesFormat::OAIAzureFirewallPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFirewallPropertiesFormat::OAIAzureFirewallPropertiesFormat() {
    this->initializeModel();
}

OAIAzureFirewallPropertiesFormat::~OAIAzureFirewallPropertiesFormat() {}

void OAIAzureFirewallPropertiesFormat::initializeModel() {

    m_application_rule_collections_isSet = false;
    m_application_rule_collections_isValid = false;

    m_ip_configurations_isSet = false;
    m_ip_configurations_isValid = false;

    m_nat_rule_collections_isSet = false;
    m_nat_rule_collections_isValid = false;

    m_network_rule_collections_isSet = false;
    m_network_rule_collections_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_threat_intel_mode_isSet = false;
    m_threat_intel_mode_isValid = false;
}

void OAIAzureFirewallPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFirewallPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_application_rule_collections_isValid = ::OpenAPI::fromJsonValue(m_application_rule_collections, json[QString("applicationRuleCollections")]);
    m_application_rule_collections_isSet = !json[QString("applicationRuleCollections")].isNull() && m_application_rule_collections_isValid;

    m_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_ip_configurations, json[QString("ipConfigurations")]);
    m_ip_configurations_isSet = !json[QString("ipConfigurations")].isNull() && m_ip_configurations_isValid;

    m_nat_rule_collections_isValid = ::OpenAPI::fromJsonValue(m_nat_rule_collections, json[QString("natRuleCollections")]);
    m_nat_rule_collections_isSet = !json[QString("natRuleCollections")].isNull() && m_nat_rule_collections_isValid;

    m_network_rule_collections_isValid = ::OpenAPI::fromJsonValue(m_network_rule_collections, json[QString("networkRuleCollections")]);
    m_network_rule_collections_isSet = !json[QString("networkRuleCollections")].isNull() && m_network_rule_collections_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_threat_intel_mode_isValid = ::OpenAPI::fromJsonValue(m_threat_intel_mode, json[QString("threatIntelMode")]);
    m_threat_intel_mode_isSet = !json[QString("threatIntelMode")].isNull() && m_threat_intel_mode_isValid;
}

QString OAIAzureFirewallPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFirewallPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_application_rule_collections.size() > 0) {
        obj.insert(QString("applicationRuleCollections"), ::OpenAPI::toJsonValue(m_application_rule_collections));
    }
    if (m_ip_configurations.size() > 0) {
        obj.insert(QString("ipConfigurations"), ::OpenAPI::toJsonValue(m_ip_configurations));
    }
    if (m_nat_rule_collections.size() > 0) {
        obj.insert(QString("natRuleCollections"), ::OpenAPI::toJsonValue(m_nat_rule_collections));
    }
    if (m_network_rule_collections.size() > 0) {
        obj.insert(QString("networkRuleCollections"), ::OpenAPI::toJsonValue(m_network_rule_collections));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_threat_intel_mode.isSet()) {
        obj.insert(QString("threatIntelMode"), ::OpenAPI::toJsonValue(m_threat_intel_mode));
    }
    return obj;
}

QList<OAIAzureFirewallApplicationRuleCollection> OAIAzureFirewallPropertiesFormat::getApplicationRuleCollections() const {
    return m_application_rule_collections;
}
void OAIAzureFirewallPropertiesFormat::setApplicationRuleCollections(const QList<OAIAzureFirewallApplicationRuleCollection> &application_rule_collections) {
    m_application_rule_collections = application_rule_collections;
    m_application_rule_collections_isSet = true;
}

bool OAIAzureFirewallPropertiesFormat::is_application_rule_collections_Set() const{
    return m_application_rule_collections_isSet;
}

bool OAIAzureFirewallPropertiesFormat::is_application_rule_collections_Valid() const{
    return m_application_rule_collections_isValid;
}

QList<OAIAzureFirewallIPConfiguration> OAIAzureFirewallPropertiesFormat::getIpConfigurations() const {
    return m_ip_configurations;
}
void OAIAzureFirewallPropertiesFormat::setIpConfigurations(const QList<OAIAzureFirewallIPConfiguration> &ip_configurations) {
    m_ip_configurations = ip_configurations;
    m_ip_configurations_isSet = true;
}

bool OAIAzureFirewallPropertiesFormat::is_ip_configurations_Set() const{
    return m_ip_configurations_isSet;
}

bool OAIAzureFirewallPropertiesFormat::is_ip_configurations_Valid() const{
    return m_ip_configurations_isValid;
}

QList<OAIAzureFirewallNatRuleCollection> OAIAzureFirewallPropertiesFormat::getNatRuleCollections() const {
    return m_nat_rule_collections;
}
void OAIAzureFirewallPropertiesFormat::setNatRuleCollections(const QList<OAIAzureFirewallNatRuleCollection> &nat_rule_collections) {
    m_nat_rule_collections = nat_rule_collections;
    m_nat_rule_collections_isSet = true;
}

bool OAIAzureFirewallPropertiesFormat::is_nat_rule_collections_Set() const{
    return m_nat_rule_collections_isSet;
}

bool OAIAzureFirewallPropertiesFormat::is_nat_rule_collections_Valid() const{
    return m_nat_rule_collections_isValid;
}

QList<OAIAzureFirewallNetworkRuleCollection> OAIAzureFirewallPropertiesFormat::getNetworkRuleCollections() const {
    return m_network_rule_collections;
}
void OAIAzureFirewallPropertiesFormat::setNetworkRuleCollections(const QList<OAIAzureFirewallNetworkRuleCollection> &network_rule_collections) {
    m_network_rule_collections = network_rule_collections;
    m_network_rule_collections_isSet = true;
}

bool OAIAzureFirewallPropertiesFormat::is_network_rule_collections_Set() const{
    return m_network_rule_collections_isSet;
}

bool OAIAzureFirewallPropertiesFormat::is_network_rule_collections_Valid() const{
    return m_network_rule_collections_isValid;
}

QString OAIAzureFirewallPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAzureFirewallPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAzureFirewallPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAzureFirewallPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIAzureFirewallThreatIntelMode OAIAzureFirewallPropertiesFormat::getThreatIntelMode() const {
    return m_threat_intel_mode;
}
void OAIAzureFirewallPropertiesFormat::setThreatIntelMode(const OAIAzureFirewallThreatIntelMode &threat_intel_mode) {
    m_threat_intel_mode = threat_intel_mode;
    m_threat_intel_mode_isSet = true;
}

bool OAIAzureFirewallPropertiesFormat::is_threat_intel_mode_Set() const{
    return m_threat_intel_mode_isSet;
}

bool OAIAzureFirewallPropertiesFormat::is_threat_intel_mode_Valid() const{
    return m_threat_intel_mode_isValid;
}

bool OAIAzureFirewallPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_rule_collections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nat_rule_collections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_rule_collections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threat_intel_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFirewallPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
