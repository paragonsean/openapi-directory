/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFirewallNetworkRuleProtocol.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFirewallNetworkRuleProtocol::OAIAzureFirewallNetworkRuleProtocol(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFirewallNetworkRuleProtocol::OAIAzureFirewallNetworkRuleProtocol() {
    this->initializeModel();
}

OAIAzureFirewallNetworkRuleProtocol::~OAIAzureFirewallNetworkRuleProtocol() {}

void OAIAzureFirewallNetworkRuleProtocol::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAzureFirewallNetworkRuleProtocol::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAzureFirewallNetworkRuleProtocol::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TCP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAzureFirewallNetworkRuleProtocol::TCP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UDP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAzureFirewallNetworkRuleProtocol::UDP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Any", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAzureFirewallNetworkRuleProtocol::ANY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ICMP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAzureFirewallNetworkRuleProtocol::ICMP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAzureFirewallNetworkRuleProtocol::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAzureFirewallNetworkRuleProtocol::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAzureFirewallNetworkRuleProtocol::TCP:
            val = "TCP";
            break;
        case eOAIAzureFirewallNetworkRuleProtocol::UDP:
            val = "UDP";
            break;
        case eOAIAzureFirewallNetworkRuleProtocol::ANY:
            val = "Any";
            break;
        case eOAIAzureFirewallNetworkRuleProtocol::ICMP:
            val = "ICMP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAzureFirewallNetworkRuleProtocol::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAzureFirewallNetworkRuleProtocol::eOAIAzureFirewallNetworkRuleProtocol OAIAzureFirewallNetworkRuleProtocol::getValue() const {
    return m_value;
}

void OAIAzureFirewallNetworkRuleProtocol::setValue(const OAIAzureFirewallNetworkRuleProtocol::eOAIAzureFirewallNetworkRuleProtocol& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAzureFirewallNetworkRuleProtocol::isSet() const {
    
    return m_value_isSet;
}

bool OAIAzureFirewallNetworkRuleProtocol::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
