/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFirewallApplicationRuleProtocol.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFirewallApplicationRuleProtocol::OAIAzureFirewallApplicationRuleProtocol(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFirewallApplicationRuleProtocol::OAIAzureFirewallApplicationRuleProtocol() {
    this->initializeModel();
}

OAIAzureFirewallApplicationRuleProtocol::~OAIAzureFirewallApplicationRuleProtocol() {}

void OAIAzureFirewallApplicationRuleProtocol::initializeModel() {

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_type_isSet = false;
    m_protocol_type_isValid = false;
}

void OAIAzureFirewallApplicationRuleProtocol::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFirewallApplicationRuleProtocol::fromJsonObject(QJsonObject json) {

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_type_isValid = ::OpenAPI::fromJsonValue(m_protocol_type, json[QString("protocolType")]);
    m_protocol_type_isSet = !json[QString("protocolType")].isNull() && m_protocol_type_isValid;
}

QString OAIAzureFirewallApplicationRuleProtocol::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFirewallApplicationRuleProtocol::asJsonObject() const {
    QJsonObject obj;
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_type.isSet()) {
        obj.insert(QString("protocolType"), ::OpenAPI::toJsonValue(m_protocol_type));
    }
    return obj;
}

qint32 OAIAzureFirewallApplicationRuleProtocol::getPort() const {
    return m_port;
}
void OAIAzureFirewallApplicationRuleProtocol::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIAzureFirewallApplicationRuleProtocol::is_port_Set() const{
    return m_port_isSet;
}

bool OAIAzureFirewallApplicationRuleProtocol::is_port_Valid() const{
    return m_port_isValid;
}

OAIAzureFirewallApplicationRuleProtocolType OAIAzureFirewallApplicationRuleProtocol::getProtocolType() const {
    return m_protocol_type;
}
void OAIAzureFirewallApplicationRuleProtocol::setProtocolType(const OAIAzureFirewallApplicationRuleProtocolType &protocol_type) {
    m_protocol_type = protocol_type;
    m_protocol_type_isSet = true;
}

bool OAIAzureFirewallApplicationRuleProtocol::is_protocol_type_Set() const{
    return m_protocol_type_isSet;
}

bool OAIAzureFirewallApplicationRuleProtocol::is_protocol_type_Valid() const{
    return m_protocol_type_isValid;
}

bool OAIAzureFirewallApplicationRuleProtocol::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFirewallApplicationRuleProtocol::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
