/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFirewallApplicationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFirewallApplicationRule::OAIAzureFirewallApplicationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFirewallApplicationRule::OAIAzureFirewallApplicationRule() {
    this->initializeModel();
}

OAIAzureFirewallApplicationRule::~OAIAzureFirewallApplicationRule() {}

void OAIAzureFirewallApplicationRule::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_fqdn_tags_isSet = false;
    m_fqdn_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_source_addresses_isSet = false;
    m_source_addresses_isValid = false;

    m_target_fqdns_isSet = false;
    m_target_fqdns_isValid = false;
}

void OAIAzureFirewallApplicationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFirewallApplicationRule::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fqdn_tags_isValid = ::OpenAPI::fromJsonValue(m_fqdn_tags, json[QString("fqdnTags")]);
    m_fqdn_tags_isSet = !json[QString("fqdnTags")].isNull() && m_fqdn_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;

    m_source_addresses_isValid = ::OpenAPI::fromJsonValue(m_source_addresses, json[QString("sourceAddresses")]);
    m_source_addresses_isSet = !json[QString("sourceAddresses")].isNull() && m_source_addresses_isValid;

    m_target_fqdns_isValid = ::OpenAPI::fromJsonValue(m_target_fqdns, json[QString("targetFqdns")]);
    m_target_fqdns_isSet = !json[QString("targetFqdns")].isNull() && m_target_fqdns_isValid;
}

QString OAIAzureFirewallApplicationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFirewallApplicationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fqdn_tags.size() > 0) {
        obj.insert(QString("fqdnTags"), ::OpenAPI::toJsonValue(m_fqdn_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_source_addresses.size() > 0) {
        obj.insert(QString("sourceAddresses"), ::OpenAPI::toJsonValue(m_source_addresses));
    }
    if (m_target_fqdns.size() > 0) {
        obj.insert(QString("targetFqdns"), ::OpenAPI::toJsonValue(m_target_fqdns));
    }
    return obj;
}

QString OAIAzureFirewallApplicationRule::getDescription() const {
    return m_description;
}
void OAIAzureFirewallApplicationRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAzureFirewallApplicationRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAzureFirewallApplicationRule::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIAzureFirewallApplicationRule::getFqdnTags() const {
    return m_fqdn_tags;
}
void OAIAzureFirewallApplicationRule::setFqdnTags(const QList<QString> &fqdn_tags) {
    m_fqdn_tags = fqdn_tags;
    m_fqdn_tags_isSet = true;
}

bool OAIAzureFirewallApplicationRule::is_fqdn_tags_Set() const{
    return m_fqdn_tags_isSet;
}

bool OAIAzureFirewallApplicationRule::is_fqdn_tags_Valid() const{
    return m_fqdn_tags_isValid;
}

QString OAIAzureFirewallApplicationRule::getName() const {
    return m_name;
}
void OAIAzureFirewallApplicationRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAzureFirewallApplicationRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAzureFirewallApplicationRule::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIAzureFirewallApplicationRuleProtocol> OAIAzureFirewallApplicationRule::getProtocols() const {
    return m_protocols;
}
void OAIAzureFirewallApplicationRule::setProtocols(const QList<OAIAzureFirewallApplicationRuleProtocol> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIAzureFirewallApplicationRule::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIAzureFirewallApplicationRule::is_protocols_Valid() const{
    return m_protocols_isValid;
}

QList<QString> OAIAzureFirewallApplicationRule::getSourceAddresses() const {
    return m_source_addresses;
}
void OAIAzureFirewallApplicationRule::setSourceAddresses(const QList<QString> &source_addresses) {
    m_source_addresses = source_addresses;
    m_source_addresses_isSet = true;
}

bool OAIAzureFirewallApplicationRule::is_source_addresses_Set() const{
    return m_source_addresses_isSet;
}

bool OAIAzureFirewallApplicationRule::is_source_addresses_Valid() const{
    return m_source_addresses_isValid;
}

QList<QString> OAIAzureFirewallApplicationRule::getTargetFqdns() const {
    return m_target_fqdns;
}
void OAIAzureFirewallApplicationRule::setTargetFqdns(const QList<QString> &target_fqdns) {
    m_target_fqdns = target_fqdns;
    m_target_fqdns_isSet = true;
}

bool OAIAzureFirewallApplicationRule::is_target_fqdns_Set() const{
    return m_target_fqdns_isSet;
}

bool OAIAzureFirewallApplicationRule::is_target_fqdns_Valid() const{
    return m_target_fqdns_isValid;
}

bool OAIAzureFirewallApplicationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_fqdns.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFirewallApplicationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
