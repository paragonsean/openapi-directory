/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAzureFirewallsApi_H
#define OAI_OAIAzureFirewallsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAzureFirewall.h"
#include "OAIAzureFirewallListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAzureFirewallsApi : public QObject {
    Q_OBJECT

public:
    OAIAzureFirewallsApi(const int timeOut = 0);
    ~OAIAzureFirewallsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  azure_firewall_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAzureFirewall [required]
    */
    virtual void azureFirewallsCreateOrUpdate(const QString &resource_group_name, const QString &azure_firewall_name, const QString &api_version, const QString &subscription_id, const OAIAzureFirewall &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  azure_firewall_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void azureFirewallsDelete(const QString &resource_group_name, const QString &azure_firewall_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  azure_firewall_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void azureFirewallsGet(const QString &resource_group_name, const QString &azure_firewall_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void azureFirewallsList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void azureFirewallsListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  azure_firewall_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAzureFirewall [required]
    */
    virtual void azureFirewallsUpdateTags(const QString &resource_group_name, const QString &azure_firewall_name, const QString &api_version, const QString &subscription_id, const OAIAzureFirewall &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void azureFirewallsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void azureFirewallsDeleteCallback(OAIHttpRequestWorker *worker);
    void azureFirewallsGetCallback(OAIHttpRequestWorker *worker);
    void azureFirewallsListCallback(OAIHttpRequestWorker *worker);
    void azureFirewallsListAllCallback(OAIHttpRequestWorker *worker);
    void azureFirewallsUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void azureFirewallsCreateOrUpdateSignal(OAIAzureFirewall summary);
    void azureFirewallsDeleteSignal();
    void azureFirewallsGetSignal(OAIAzureFirewall summary);
    void azureFirewallsListSignal(OAIAzureFirewallListResult summary);
    void azureFirewallsListAllSignal(OAIAzureFirewallListResult summary);
    void azureFirewallsUpdateTagsSignal(OAIAzureFirewall summary);


    void azureFirewallsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAzureFirewall summary);
    void azureFirewallsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void azureFirewallsGetSignalFull(OAIHttpRequestWorker *worker, OAIAzureFirewall summary);
    void azureFirewallsListSignalFull(OAIHttpRequestWorker *worker, OAIAzureFirewallListResult summary);
    void azureFirewallsListAllSignalFull(OAIHttpRequestWorker *worker, OAIAzureFirewallListResult summary);
    void azureFirewallsUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIAzureFirewall summary);

    Q_DECL_DEPRECATED_X("Use azureFirewallsCreateOrUpdateSignalError() instead")
    void azureFirewallsCreateOrUpdateSignalE(OAIAzureFirewall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsCreateOrUpdateSignalError(OAIAzureFirewall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsDeleteSignalError() instead")
    void azureFirewallsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsGetSignalError() instead")
    void azureFirewallsGetSignalE(OAIAzureFirewall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsGetSignalError(OAIAzureFirewall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsListSignalError() instead")
    void azureFirewallsListSignalE(OAIAzureFirewallListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsListSignalError(OAIAzureFirewallListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsListAllSignalError() instead")
    void azureFirewallsListAllSignalE(OAIAzureFirewallListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsListAllSignalError(OAIAzureFirewallListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsUpdateTagsSignalError() instead")
    void azureFirewallsUpdateTagsSignalE(OAIAzureFirewall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsUpdateTagsSignalError(OAIAzureFirewall summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use azureFirewallsCreateOrUpdateSignalErrorFull() instead")
    void azureFirewallsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsDeleteSignalErrorFull() instead")
    void azureFirewallsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsGetSignalErrorFull() instead")
    void azureFirewallsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsListSignalErrorFull() instead")
    void azureFirewallsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsListAllSignalErrorFull() instead")
    void azureFirewallsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureFirewallsUpdateTagsSignalErrorFull() instead")
    void azureFirewallsUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureFirewallsUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
