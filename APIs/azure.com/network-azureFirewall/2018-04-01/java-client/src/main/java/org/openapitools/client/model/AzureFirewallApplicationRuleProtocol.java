/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AzureFirewallApplicationRuleProtocolType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the application rule protocol.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:32.470253-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureFirewallApplicationRuleProtocol {
  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL_TYPE = "protocolType";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_TYPE)
  private AzureFirewallApplicationRuleProtocolType protocolType;

  public AzureFirewallApplicationRuleProtocol() {
  }

  public AzureFirewallApplicationRuleProtocol port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Port number for the protocol, cannot be greater than 64000. This field is optional.
   * minimum: 0
   * maximum: 64000
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public AzureFirewallApplicationRuleProtocol protocolType(AzureFirewallApplicationRuleProtocolType protocolType) {
    this.protocolType = protocolType;
    return this;
  }

  /**
   * Get protocolType
   * @return protocolType
   */
  @javax.annotation.Nullable
  public AzureFirewallApplicationRuleProtocolType getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(AzureFirewallApplicationRuleProtocolType protocolType) {
    this.protocolType = protocolType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureFirewallApplicationRuleProtocol azureFirewallApplicationRuleProtocol = (AzureFirewallApplicationRuleProtocol) o;
    return Objects.equals(this.port, azureFirewallApplicationRuleProtocol.port) &&
        Objects.equals(this.protocolType, azureFirewallApplicationRuleProtocol.protocolType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(port, protocolType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureFirewallApplicationRuleProtocol {\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("port");
    openapiFields.add("protocolType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureFirewallApplicationRuleProtocol
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureFirewallApplicationRuleProtocol.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureFirewallApplicationRuleProtocol is not found in the empty JSON string", AzureFirewallApplicationRuleProtocol.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureFirewallApplicationRuleProtocol.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureFirewallApplicationRuleProtocol` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `protocolType`
      if (jsonObj.get("protocolType") != null && !jsonObj.get("protocolType").isJsonNull()) {
        AzureFirewallApplicationRuleProtocolType.validateJsonElement(jsonObj.get("protocolType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureFirewallApplicationRuleProtocol.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureFirewallApplicationRuleProtocol' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureFirewallApplicationRuleProtocol> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureFirewallApplicationRuleProtocol.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureFirewallApplicationRuleProtocol>() {
           @Override
           public void write(JsonWriter out, AzureFirewallApplicationRuleProtocol value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureFirewallApplicationRuleProtocol read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureFirewallApplicationRuleProtocol given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureFirewallApplicationRuleProtocol
   * @throws IOException if the JSON string is invalid with respect to AzureFirewallApplicationRuleProtocol
   */
  public static AzureFirewallApplicationRuleProtocol fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureFirewallApplicationRuleProtocol.class);
  }

  /**
   * Convert an instance of AzureFirewallApplicationRuleProtocol to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

