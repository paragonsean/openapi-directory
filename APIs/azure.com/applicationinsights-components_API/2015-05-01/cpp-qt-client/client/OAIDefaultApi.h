/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for Components.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationInsightsComponent.h"
#include "OAIApplicationInsightsComponentListResult.h"
#include "OAIComponentPurgeBody.h"
#include "OAIComponentPurgeResponse.h"
#include "OAIComponentPurgeStatusResponse.h"
#include "OAITagsResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  insight_properties OAIApplicationInsightsComponent [required]
    */
    virtual void componentsCreateOrUpdate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &resource_name, const OAIApplicationInsightsComponent &insight_properties);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void componentsDelete(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void componentsGet(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  purge_id QString [required]
    */
    virtual void componentsGetPurgeStatus(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &resource_name, const QString &purge_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void componentsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void componentsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  body OAIComponentPurgeBody [required]
    */
    virtual void componentsPurge(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &resource_name, const OAIComponentPurgeBody &body);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  component_tags OAITagsResource [required]
    */
    virtual void componentsUpdateTags(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &resource_name, const OAITagsResource &component_tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void componentsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void componentsDeleteCallback(OAIHttpRequestWorker *worker);
    void componentsGetCallback(OAIHttpRequestWorker *worker);
    void componentsGetPurgeStatusCallback(OAIHttpRequestWorker *worker);
    void componentsListCallback(OAIHttpRequestWorker *worker);
    void componentsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void componentsPurgeCallback(OAIHttpRequestWorker *worker);
    void componentsUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void componentsCreateOrUpdateSignal(OAIApplicationInsightsComponent summary);
    void componentsDeleteSignal();
    void componentsGetSignal(OAIApplicationInsightsComponent summary);
    void componentsGetPurgeStatusSignal(OAIComponentPurgeStatusResponse summary);
    void componentsListSignal(OAIApplicationInsightsComponentListResult summary);
    void componentsListByResourceGroupSignal(OAIApplicationInsightsComponentListResult summary);
    void componentsPurgeSignal(OAIComponentPurgeResponse summary);
    void componentsUpdateTagsSignal(OAIApplicationInsightsComponent summary);


    void componentsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInsightsComponent summary);
    void componentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void componentsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInsightsComponent summary);
    void componentsGetPurgeStatusSignalFull(OAIHttpRequestWorker *worker, OAIComponentPurgeStatusResponse summary);
    void componentsListSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInsightsComponentListResult summary);
    void componentsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInsightsComponentListResult summary);
    void componentsPurgeSignalFull(OAIHttpRequestWorker *worker, OAIComponentPurgeResponse summary);
    void componentsUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInsightsComponent summary);

    Q_DECL_DEPRECATED_X("Use componentsCreateOrUpdateSignalError() instead")
    void componentsCreateOrUpdateSignalE(OAIApplicationInsightsComponent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsCreateOrUpdateSignalError(OAIApplicationInsightsComponent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsDeleteSignalError() instead")
    void componentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void componentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsGetSignalError() instead")
    void componentsGetSignalE(OAIApplicationInsightsComponent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsGetSignalError(OAIApplicationInsightsComponent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsGetPurgeStatusSignalError() instead")
    void componentsGetPurgeStatusSignalE(OAIComponentPurgeStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsGetPurgeStatusSignalError(OAIComponentPurgeStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsListSignalError() instead")
    void componentsListSignalE(OAIApplicationInsightsComponentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsListSignalError(OAIApplicationInsightsComponentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsListByResourceGroupSignalError() instead")
    void componentsListByResourceGroupSignalE(OAIApplicationInsightsComponentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsListByResourceGroupSignalError(OAIApplicationInsightsComponentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsPurgeSignalError() instead")
    void componentsPurgeSignalE(OAIComponentPurgeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsPurgeSignalError(OAIComponentPurgeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsUpdateTagsSignalError() instead")
    void componentsUpdateTagsSignalE(OAIApplicationInsightsComponent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsUpdateTagsSignalError(OAIApplicationInsightsComponent summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use componentsCreateOrUpdateSignalErrorFull() instead")
    void componentsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsDeleteSignalErrorFull() instead")
    void componentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsGetSignalErrorFull() instead")
    void componentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsGetPurgeStatusSignalErrorFull() instead")
    void componentsGetPurgeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsGetPurgeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsListSignalErrorFull() instead")
    void componentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsListByResourceGroupSignalErrorFull() instead")
    void componentsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsPurgeSignalErrorFull() instead")
    void componentsPurgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsPurgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use componentsUpdateTagsSignalErrorFull() instead")
    void componentsUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void componentsUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
