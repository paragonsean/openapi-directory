/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for Components.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationInsightsComponentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationInsightsComponentProperties::OAIApplicationInsightsComponentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationInsightsComponentProperties::OAIApplicationInsightsComponentProperties() {
    this->initializeModel();
}

OAIApplicationInsightsComponentProperties::~OAIApplicationInsightsComponentProperties() {}

void OAIApplicationInsightsComponentProperties::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_type_isSet = false;
    m_application_type_isValid = false;

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_disable_ip_masking_isSet = false;
    m_disable_ip_masking_isValid = false;

    m_flow_type_isSet = false;
    m_flow_type_isValid = false;

    m_hockey_app_id_isSet = false;
    m_hockey_app_id_isValid = false;

    m_hockey_app_token_isSet = false;
    m_hockey_app_token_isValid = false;

    m_immediate_purge_data_on30_days_isSet = false;
    m_immediate_purge_data_on30_days_isValid = false;

    m_instrumentation_key_isSet = false;
    m_instrumentation_key_isValid = false;

    m_request_source_isSet = false;
    m_request_source_isValid = false;

    m_retention_in_days_isSet = false;
    m_retention_in_days_isValid = false;

    m_sampling_percentage_isSet = false;
    m_sampling_percentage_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIApplicationInsightsComponentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationInsightsComponentProperties::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("AppId")]);
    m_app_id_isSet = !json[QString("AppId")].isNull() && m_app_id_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_application_type_isValid = ::OpenAPI::fromJsonValue(m_application_type, json[QString("Application_Type")]);
    m_application_type_isSet = !json[QString("Application_Type")].isNull() && m_application_type_isValid;

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("ConnectionString")]);
    m_connection_string_isSet = !json[QString("ConnectionString")].isNull() && m_connection_string_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_disable_ip_masking_isValid = ::OpenAPI::fromJsonValue(m_disable_ip_masking, json[QString("DisableIpMasking")]);
    m_disable_ip_masking_isSet = !json[QString("DisableIpMasking")].isNull() && m_disable_ip_masking_isValid;

    m_flow_type_isValid = ::OpenAPI::fromJsonValue(m_flow_type, json[QString("Flow_Type")]);
    m_flow_type_isSet = !json[QString("Flow_Type")].isNull() && m_flow_type_isValid;

    m_hockey_app_id_isValid = ::OpenAPI::fromJsonValue(m_hockey_app_id, json[QString("HockeyAppId")]);
    m_hockey_app_id_isSet = !json[QString("HockeyAppId")].isNull() && m_hockey_app_id_isValid;

    m_hockey_app_token_isValid = ::OpenAPI::fromJsonValue(m_hockey_app_token, json[QString("HockeyAppToken")]);
    m_hockey_app_token_isSet = !json[QString("HockeyAppToken")].isNull() && m_hockey_app_token_isValid;

    m_immediate_purge_data_on30_days_isValid = ::OpenAPI::fromJsonValue(m_immediate_purge_data_on30_days, json[QString("ImmediatePurgeDataOn30Days")]);
    m_immediate_purge_data_on30_days_isSet = !json[QString("ImmediatePurgeDataOn30Days")].isNull() && m_immediate_purge_data_on30_days_isValid;

    m_instrumentation_key_isValid = ::OpenAPI::fromJsonValue(m_instrumentation_key, json[QString("InstrumentationKey")]);
    m_instrumentation_key_isSet = !json[QString("InstrumentationKey")].isNull() && m_instrumentation_key_isValid;

    m_request_source_isValid = ::OpenAPI::fromJsonValue(m_request_source, json[QString("Request_Source")]);
    m_request_source_isSet = !json[QString("Request_Source")].isNull() && m_request_source_isValid;

    m_retention_in_days_isValid = ::OpenAPI::fromJsonValue(m_retention_in_days, json[QString("RetentionInDays")]);
    m_retention_in_days_isSet = !json[QString("RetentionInDays")].isNull() && m_retention_in_days_isValid;

    m_sampling_percentage_isValid = ::OpenAPI::fromJsonValue(m_sampling_percentage, json[QString("SamplingPercentage")]);
    m_sampling_percentage_isSet = !json[QString("SamplingPercentage")].isNull() && m_sampling_percentage_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("TenantId")]);
    m_tenant_id_isSet = !json[QString("TenantId")].isNull() && m_tenant_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIApplicationInsightsComponentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationInsightsComponentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("AppId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_type_isSet) {
        obj.insert(QString("Application_Type"), ::OpenAPI::toJsonValue(m_application_type));
    }
    if (m_connection_string_isSet) {
        obj.insert(QString("ConnectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_disable_ip_masking_isSet) {
        obj.insert(QString("DisableIpMasking"), ::OpenAPI::toJsonValue(m_disable_ip_masking));
    }
    if (m_flow_type_isSet) {
        obj.insert(QString("Flow_Type"), ::OpenAPI::toJsonValue(m_flow_type));
    }
    if (m_hockey_app_id_isSet) {
        obj.insert(QString("HockeyAppId"), ::OpenAPI::toJsonValue(m_hockey_app_id));
    }
    if (m_hockey_app_token_isSet) {
        obj.insert(QString("HockeyAppToken"), ::OpenAPI::toJsonValue(m_hockey_app_token));
    }
    if (m_immediate_purge_data_on30_days_isSet) {
        obj.insert(QString("ImmediatePurgeDataOn30Days"), ::OpenAPI::toJsonValue(m_immediate_purge_data_on30_days));
    }
    if (m_instrumentation_key_isSet) {
        obj.insert(QString("InstrumentationKey"), ::OpenAPI::toJsonValue(m_instrumentation_key));
    }
    if (m_request_source_isSet) {
        obj.insert(QString("Request_Source"), ::OpenAPI::toJsonValue(m_request_source));
    }
    if (m_retention_in_days_isSet) {
        obj.insert(QString("RetentionInDays"), ::OpenAPI::toJsonValue(m_retention_in_days));
    }
    if (m_sampling_percentage_isSet) {
        obj.insert(QString("SamplingPercentage"), ::OpenAPI::toJsonValue(m_sampling_percentage));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("TenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIApplicationInsightsComponentProperties::getAppId() const {
    return m_app_id;
}
void OAIApplicationInsightsComponentProperties::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIApplicationInsightsComponentProperties::getApplicationId() const {
    return m_application_id;
}
void OAIApplicationInsightsComponentProperties::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIApplicationInsightsComponentProperties::getApplicationType() const {
    return m_application_type;
}
void OAIApplicationInsightsComponentProperties::setApplicationType(const QString &application_type) {
    m_application_type = application_type;
    m_application_type_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_application_type_Set() const{
    return m_application_type_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_application_type_Valid() const{
    return m_application_type_isValid;
}

QString OAIApplicationInsightsComponentProperties::getConnectionString() const {
    return m_connection_string;
}
void OAIApplicationInsightsComponentProperties::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QDateTime OAIApplicationInsightsComponentProperties::getCreationDate() const {
    return m_creation_date;
}
void OAIApplicationInsightsComponentProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIApplicationInsightsComponentProperties::isDisableIpMasking() const {
    return m_disable_ip_masking;
}
void OAIApplicationInsightsComponentProperties::setDisableIpMasking(const bool &disable_ip_masking) {
    m_disable_ip_masking = disable_ip_masking;
    m_disable_ip_masking_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_disable_ip_masking_Set() const{
    return m_disable_ip_masking_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_disable_ip_masking_Valid() const{
    return m_disable_ip_masking_isValid;
}

QString OAIApplicationInsightsComponentProperties::getFlowType() const {
    return m_flow_type;
}
void OAIApplicationInsightsComponentProperties::setFlowType(const QString &flow_type) {
    m_flow_type = flow_type;
    m_flow_type_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_flow_type_Set() const{
    return m_flow_type_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_flow_type_Valid() const{
    return m_flow_type_isValid;
}

QString OAIApplicationInsightsComponentProperties::getHockeyAppId() const {
    return m_hockey_app_id;
}
void OAIApplicationInsightsComponentProperties::setHockeyAppId(const QString &hockey_app_id) {
    m_hockey_app_id = hockey_app_id;
    m_hockey_app_id_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_hockey_app_id_Set() const{
    return m_hockey_app_id_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_hockey_app_id_Valid() const{
    return m_hockey_app_id_isValid;
}

QString OAIApplicationInsightsComponentProperties::getHockeyAppToken() const {
    return m_hockey_app_token;
}
void OAIApplicationInsightsComponentProperties::setHockeyAppToken(const QString &hockey_app_token) {
    m_hockey_app_token = hockey_app_token;
    m_hockey_app_token_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_hockey_app_token_Set() const{
    return m_hockey_app_token_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_hockey_app_token_Valid() const{
    return m_hockey_app_token_isValid;
}

bool OAIApplicationInsightsComponentProperties::isImmediatePurgeDataOn30Days() const {
    return m_immediate_purge_data_on30_days;
}
void OAIApplicationInsightsComponentProperties::setImmediatePurgeDataOn30Days(const bool &immediate_purge_data_on30_days) {
    m_immediate_purge_data_on30_days = immediate_purge_data_on30_days;
    m_immediate_purge_data_on30_days_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_immediate_purge_data_on30_days_Set() const{
    return m_immediate_purge_data_on30_days_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_immediate_purge_data_on30_days_Valid() const{
    return m_immediate_purge_data_on30_days_isValid;
}

QString OAIApplicationInsightsComponentProperties::getInstrumentationKey() const {
    return m_instrumentation_key;
}
void OAIApplicationInsightsComponentProperties::setInstrumentationKey(const QString &instrumentation_key) {
    m_instrumentation_key = instrumentation_key;
    m_instrumentation_key_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_instrumentation_key_Set() const{
    return m_instrumentation_key_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_instrumentation_key_Valid() const{
    return m_instrumentation_key_isValid;
}

QString OAIApplicationInsightsComponentProperties::getRequestSource() const {
    return m_request_source;
}
void OAIApplicationInsightsComponentProperties::setRequestSource(const QString &request_source) {
    m_request_source = request_source;
    m_request_source_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_request_source_Set() const{
    return m_request_source_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_request_source_Valid() const{
    return m_request_source_isValid;
}

qint32 OAIApplicationInsightsComponentProperties::getRetentionInDays() const {
    return m_retention_in_days;
}
void OAIApplicationInsightsComponentProperties::setRetentionInDays(const qint32 &retention_in_days) {
    m_retention_in_days = retention_in_days;
    m_retention_in_days_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_retention_in_days_Set() const{
    return m_retention_in_days_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_retention_in_days_Valid() const{
    return m_retention_in_days_isValid;
}

double OAIApplicationInsightsComponentProperties::getSamplingPercentage() const {
    return m_sampling_percentage;
}
void OAIApplicationInsightsComponentProperties::setSamplingPercentage(const double &sampling_percentage) {
    m_sampling_percentage = sampling_percentage;
    m_sampling_percentage_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_sampling_percentage_Set() const{
    return m_sampling_percentage_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_sampling_percentage_Valid() const{
    return m_sampling_percentage_isValid;
}

QString OAIApplicationInsightsComponentProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIApplicationInsightsComponentProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIApplicationInsightsComponentProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationInsightsComponentProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationInsightsComponentProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationInsightsComponentProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIApplicationInsightsComponentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_ip_masking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hockey_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hockey_app_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_purge_data_on30_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instrumentation_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationInsightsComponentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_type_isValid && true;
}

} // namespace OpenAPI
