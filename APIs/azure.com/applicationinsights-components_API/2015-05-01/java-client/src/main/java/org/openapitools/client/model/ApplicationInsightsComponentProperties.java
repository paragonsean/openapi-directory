/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for Components.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties that define an Application Insights component resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:43.143918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationInsightsComponentProperties {
  public static final String SERIALIZED_NAME_APP_ID = "AppId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  /**
   * Type of application being monitored.
   */
  @JsonAdapter(ApplicationTypeEnum.Adapter.class)
  public enum ApplicationTypeEnum {
    WEB("web"),
    
    OTHER("other");

    private String value;

    ApplicationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationTypeEnum fromValue(String value) {
      for (ApplicationTypeEnum b : ApplicationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApplicationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_TYPE = "Application_Type";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE)
  private ApplicationTypeEnum applicationType = ApplicationTypeEnum.WEB;

  public static final String SERIALIZED_NAME_CONNECTION_STRING = "ConnectionString";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING)
  private String connectionString;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DISABLE_IP_MASKING = "DisableIpMasking";
  @SerializedName(SERIALIZED_NAME_DISABLE_IP_MASKING)
  private Boolean disableIpMasking;

  /**
   * Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to &#39;Bluefield&#39; when creating/updating a component via the REST API.
   */
  @JsonAdapter(FlowTypeEnum.Adapter.class)
  public enum FlowTypeEnum {
    BLUEFIELD("Bluefield");

    private String value;

    FlowTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlowTypeEnum fromValue(String value) {
      for (FlowTypeEnum b : FlowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlowTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlowTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlowTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlowTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlowTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLOW_TYPE = "Flow_Type";
  @SerializedName(SERIALIZED_NAME_FLOW_TYPE)
  private FlowTypeEnum flowType = FlowTypeEnum.BLUEFIELD;

  public static final String SERIALIZED_NAME_HOCKEY_APP_ID = "HockeyAppId";
  @SerializedName(SERIALIZED_NAME_HOCKEY_APP_ID)
  private String hockeyAppId;

  public static final String SERIALIZED_NAME_HOCKEY_APP_TOKEN = "HockeyAppToken";
  @SerializedName(SERIALIZED_NAME_HOCKEY_APP_TOKEN)
  private String hockeyAppToken;

  public static final String SERIALIZED_NAME_IMMEDIATE_PURGE_DATA_ON30_DAYS = "ImmediatePurgeDataOn30Days";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_PURGE_DATA_ON30_DAYS)
  private Boolean immediatePurgeDataOn30Days;

  public static final String SERIALIZED_NAME_INSTRUMENTATION_KEY = "InstrumentationKey";
  @SerializedName(SERIALIZED_NAME_INSTRUMENTATION_KEY)
  private String instrumentationKey;

  /**
   * Describes what tool created this Application Insights component. Customers using this API should set this to the default &#39;rest&#39;.
   */
  @JsonAdapter(RequestSourceEnum.Adapter.class)
  public enum RequestSourceEnum {
    REST("rest");

    private String value;

    RequestSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestSourceEnum fromValue(String value) {
      for (RequestSourceEnum b : RequestSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_SOURCE = "Request_Source";
  @SerializedName(SERIALIZED_NAME_REQUEST_SOURCE)
  private RequestSourceEnum requestSource = RequestSourceEnum.REST;

  public static final String SERIALIZED_NAME_RETENTION_IN_DAYS = "RetentionInDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_IN_DAYS)
  private Integer retentionInDays;

  public static final String SERIALIZED_NAME_SAMPLING_PERCENTAGE = "SamplingPercentage";
  @SerializedName(SERIALIZED_NAME_SAMPLING_PERCENTAGE)
  private Double samplingPercentage;

  public static final String SERIALIZED_NAME_TENANT_ID = "TenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public ApplicationInsightsComponentProperties() {
  }

  public ApplicationInsightsComponentProperties(
     String appId, 
     String applicationId, 
     String connectionString, 
     OffsetDateTime creationDate, 
     String hockeyAppToken, 
     String instrumentationKey, 
     String tenantId, 
     String provisioningState
  ) {
    this();
    this.appId = appId;
    this.applicationId = applicationId;
    this.connectionString = connectionString;
    this.creationDate = creationDate;
    this.hockeyAppToken = hockeyAppToken;
    this.instrumentationKey = instrumentationKey;
    this.tenantId = tenantId;
    this.provisioningState = provisioningState;
  }

  /**
   * Application Insights Unique ID for your Application.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }



  /**
   * The unique ID of your application. This field mirrors the &#39;Name&#39; field and cannot be changed.
   * @return applicationId
   */
  @javax.annotation.Nullable
  public String getApplicationId() {
    return applicationId;
  }



  public ApplicationInsightsComponentProperties applicationType(ApplicationTypeEnum applicationType) {
    this.applicationType = applicationType;
    return this;
  }

  /**
   * Type of application being monitored.
   * @return applicationType
   */
  @javax.annotation.Nonnull
  public ApplicationTypeEnum getApplicationType() {
    return applicationType;
  }

  public void setApplicationType(ApplicationTypeEnum applicationType) {
    this.applicationType = applicationType;
  }


  /**
   * Application Insights component connection string.
   * @return connectionString
   */
  @javax.annotation.Nullable
  public String getConnectionString() {
    return connectionString;
  }



  /**
   * Creation Date for the Application Insights component, in ISO 8601 format.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }



  public ApplicationInsightsComponentProperties disableIpMasking(Boolean disableIpMasking) {
    this.disableIpMasking = disableIpMasking;
    return this;
  }

  /**
   * Disable IP masking.
   * @return disableIpMasking
   */
  @javax.annotation.Nullable
  public Boolean getDisableIpMasking() {
    return disableIpMasking;
  }

  public void setDisableIpMasking(Boolean disableIpMasking) {
    this.disableIpMasking = disableIpMasking;
  }


  public ApplicationInsightsComponentProperties flowType(FlowTypeEnum flowType) {
    this.flowType = flowType;
    return this;
  }

  /**
   * Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to &#39;Bluefield&#39; when creating/updating a component via the REST API.
   * @return flowType
   */
  @javax.annotation.Nullable
  public FlowTypeEnum getFlowType() {
    return flowType;
  }

  public void setFlowType(FlowTypeEnum flowType) {
    this.flowType = flowType;
  }


  public ApplicationInsightsComponentProperties hockeyAppId(String hockeyAppId) {
    this.hockeyAppId = hockeyAppId;
    return this;
  }

  /**
   * The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
   * @return hockeyAppId
   */
  @javax.annotation.Nullable
  public String getHockeyAppId() {
    return hockeyAppId;
  }

  public void setHockeyAppId(String hockeyAppId) {
    this.hockeyAppId = hockeyAppId;
  }


  /**
   * Token used to authenticate communications with between Application Insights and HockeyApp.
   * @return hockeyAppToken
   */
  @javax.annotation.Nullable
  public String getHockeyAppToken() {
    return hockeyAppToken;
  }



  public ApplicationInsightsComponentProperties immediatePurgeDataOn30Days(Boolean immediatePurgeDataOn30Days) {
    this.immediatePurgeDataOn30Days = immediatePurgeDataOn30Days;
    return this;
  }

  /**
   * Purge data immediately after 30 days.
   * @return immediatePurgeDataOn30Days
   */
  @javax.annotation.Nullable
  public Boolean getImmediatePurgeDataOn30Days() {
    return immediatePurgeDataOn30Days;
  }

  public void setImmediatePurgeDataOn30Days(Boolean immediatePurgeDataOn30Days) {
    this.immediatePurgeDataOn30Days = immediatePurgeDataOn30Days;
  }


  /**
   * Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.
   * @return instrumentationKey
   */
  @javax.annotation.Nullable
  public String getInstrumentationKey() {
    return instrumentationKey;
  }



  public ApplicationInsightsComponentProperties requestSource(RequestSourceEnum requestSource) {
    this.requestSource = requestSource;
    return this;
  }

  /**
   * Describes what tool created this Application Insights component. Customers using this API should set this to the default &#39;rest&#39;.
   * @return requestSource
   */
  @javax.annotation.Nullable
  public RequestSourceEnum getRequestSource() {
    return requestSource;
  }

  public void setRequestSource(RequestSourceEnum requestSource) {
    this.requestSource = requestSource;
  }


  public ApplicationInsightsComponentProperties retentionInDays(Integer retentionInDays) {
    this.retentionInDays = retentionInDays;
    return this;
  }

  /**
   * Retention period in days.
   * @return retentionInDays
   */
  @javax.annotation.Nullable
  public Integer getRetentionInDays() {
    return retentionInDays;
  }

  public void setRetentionInDays(Integer retentionInDays) {
    this.retentionInDays = retentionInDays;
  }


  public ApplicationInsightsComponentProperties samplingPercentage(Double samplingPercentage) {
    this.samplingPercentage = samplingPercentage;
    return this;
  }

  /**
   * Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
   * @return samplingPercentage
   */
  @javax.annotation.Nullable
  public Double getSamplingPercentage() {
    return samplingPercentage;
  }

  public void setSamplingPercentage(Double samplingPercentage) {
    this.samplingPercentage = samplingPercentage;
  }


  /**
   * Azure Tenant Id.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }



  /**
   * Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationInsightsComponentProperties applicationInsightsComponentProperties = (ApplicationInsightsComponentProperties) o;
    return Objects.equals(this.appId, applicationInsightsComponentProperties.appId) &&
        Objects.equals(this.applicationId, applicationInsightsComponentProperties.applicationId) &&
        Objects.equals(this.applicationType, applicationInsightsComponentProperties.applicationType) &&
        Objects.equals(this.connectionString, applicationInsightsComponentProperties.connectionString) &&
        Objects.equals(this.creationDate, applicationInsightsComponentProperties.creationDate) &&
        Objects.equals(this.disableIpMasking, applicationInsightsComponentProperties.disableIpMasking) &&
        Objects.equals(this.flowType, applicationInsightsComponentProperties.flowType) &&
        Objects.equals(this.hockeyAppId, applicationInsightsComponentProperties.hockeyAppId) &&
        Objects.equals(this.hockeyAppToken, applicationInsightsComponentProperties.hockeyAppToken) &&
        Objects.equals(this.immediatePurgeDataOn30Days, applicationInsightsComponentProperties.immediatePurgeDataOn30Days) &&
        Objects.equals(this.instrumentationKey, applicationInsightsComponentProperties.instrumentationKey) &&
        Objects.equals(this.requestSource, applicationInsightsComponentProperties.requestSource) &&
        Objects.equals(this.retentionInDays, applicationInsightsComponentProperties.retentionInDays) &&
        Objects.equals(this.samplingPercentage, applicationInsightsComponentProperties.samplingPercentage) &&
        Objects.equals(this.tenantId, applicationInsightsComponentProperties.tenantId) &&
        Objects.equals(this.provisioningState, applicationInsightsComponentProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, applicationId, applicationType, connectionString, creationDate, disableIpMasking, flowType, hockeyAppId, hockeyAppToken, immediatePurgeDataOn30Days, instrumentationKey, requestSource, retentionInDays, samplingPercentage, tenantId, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationInsightsComponentProperties {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    disableIpMasking: ").append(toIndentedString(disableIpMasking)).append("\n");
    sb.append("    flowType: ").append(toIndentedString(flowType)).append("\n");
    sb.append("    hockeyAppId: ").append(toIndentedString(hockeyAppId)).append("\n");
    sb.append("    hockeyAppToken: ").append(toIndentedString(hockeyAppToken)).append("\n");
    sb.append("    immediatePurgeDataOn30Days: ").append(toIndentedString(immediatePurgeDataOn30Days)).append("\n");
    sb.append("    instrumentationKey: ").append(toIndentedString(instrumentationKey)).append("\n");
    sb.append("    requestSource: ").append(toIndentedString(requestSource)).append("\n");
    sb.append("    retentionInDays: ").append(toIndentedString(retentionInDays)).append("\n");
    sb.append("    samplingPercentage: ").append(toIndentedString(samplingPercentage)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppId");
    openapiFields.add("ApplicationId");
    openapiFields.add("Application_Type");
    openapiFields.add("ConnectionString");
    openapiFields.add("CreationDate");
    openapiFields.add("DisableIpMasking");
    openapiFields.add("Flow_Type");
    openapiFields.add("HockeyAppId");
    openapiFields.add("HockeyAppToken");
    openapiFields.add("ImmediatePurgeDataOn30Days");
    openapiFields.add("InstrumentationKey");
    openapiFields.add("Request_Source");
    openapiFields.add("RetentionInDays");
    openapiFields.add("SamplingPercentage");
    openapiFields.add("TenantId");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Application_Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationInsightsComponentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationInsightsComponentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationInsightsComponentProperties is not found in the empty JSON string", ApplicationInsightsComponentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationInsightsComponentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationInsightsComponentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationInsightsComponentProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AppId") != null && !jsonObj.get("AppId").isJsonNull()) && !jsonObj.get("AppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AppId").toString()));
      }
      if ((jsonObj.get("ApplicationId") != null && !jsonObj.get("ApplicationId").isJsonNull()) && !jsonObj.get("ApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationId").toString()));
      }
      if (!jsonObj.get("Application_Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Application_Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Application_Type").toString()));
      }
      // validate the required field `Application_Type`
      ApplicationTypeEnum.validateJsonElement(jsonObj.get("Application_Type"));
      if ((jsonObj.get("ConnectionString") != null && !jsonObj.get("ConnectionString").isJsonNull()) && !jsonObj.get("ConnectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConnectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConnectionString").toString()));
      }
      if ((jsonObj.get("Flow_Type") != null && !jsonObj.get("Flow_Type").isJsonNull()) && !jsonObj.get("Flow_Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Flow_Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Flow_Type").toString()));
      }
      // validate the optional field `Flow_Type`
      if (jsonObj.get("Flow_Type") != null && !jsonObj.get("Flow_Type").isJsonNull()) {
        FlowTypeEnum.validateJsonElement(jsonObj.get("Flow_Type"));
      }
      if ((jsonObj.get("HockeyAppId") != null && !jsonObj.get("HockeyAppId").isJsonNull()) && !jsonObj.get("HockeyAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HockeyAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HockeyAppId").toString()));
      }
      if ((jsonObj.get("HockeyAppToken") != null && !jsonObj.get("HockeyAppToken").isJsonNull()) && !jsonObj.get("HockeyAppToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HockeyAppToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HockeyAppToken").toString()));
      }
      if ((jsonObj.get("InstrumentationKey") != null && !jsonObj.get("InstrumentationKey").isJsonNull()) && !jsonObj.get("InstrumentationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstrumentationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstrumentationKey").toString()));
      }
      if ((jsonObj.get("Request_Source") != null && !jsonObj.get("Request_Source").isJsonNull()) && !jsonObj.get("Request_Source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Request_Source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Request_Source").toString()));
      }
      // validate the optional field `Request_Source`
      if (jsonObj.get("Request_Source") != null && !jsonObj.get("Request_Source").isJsonNull()) {
        RequestSourceEnum.validateJsonElement(jsonObj.get("Request_Source"));
      }
      if ((jsonObj.get("TenantId") != null && !jsonObj.get("TenantId").isJsonNull()) && !jsonObj.get("TenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantId").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationInsightsComponentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationInsightsComponentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationInsightsComponentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationInsightsComponentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationInsightsComponentProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationInsightsComponentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationInsightsComponentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationInsightsComponentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationInsightsComponentProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationInsightsComponentProperties
   */
  public static ApplicationInsightsComponentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationInsightsComponentProperties.class);
  }

  /**
   * Convert an instance of ApplicationInsightsComponentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

