/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for Components.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ComponentPurgeBodyFilters model module.
 * @module model/ComponentPurgeBodyFilters
 * @version 2015-05-01
 */
class ComponentPurgeBodyFilters {
    /**
     * Constructs a new <code>ComponentPurgeBodyFilters</code>.
     * User-defined filters to return data which will be purged from the table.
     * @alias module:model/ComponentPurgeBodyFilters
     */
    constructor() { 
        
        ComponentPurgeBodyFilters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComponentPurgeBodyFilters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComponentPurgeBodyFilters} obj Optional instance to populate.
     * @return {module:model/ComponentPurgeBodyFilters} The populated <code>ComponentPurgeBodyFilters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComponentPurgeBodyFilters();

            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComponentPurgeBodyFilters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComponentPurgeBodyFilters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}



/**
 * The column of the table over which the given query should run
 * @member {String} column
 */
ComponentPurgeBodyFilters.prototype['column'] = undefined;

/**
 * When filtering over custom dimensions, this key will be used as the name of the custom dimension.
 * @member {String} key
 */
ComponentPurgeBodyFilters.prototype['key'] = undefined;

/**
 * A query operator to evaluate over the provided column and value(s). Supported operators are ==, =~, in, in~, >, >=, <, <=, between, and have the same behavior as they would in a KQL query.
 * @member {String} operator
 */
ComponentPurgeBodyFilters.prototype['operator'] = undefined;

/**
 * the value for the operator to function over. This can be a number (e.g., > 100), a string (timestamp >= '2017-09-01') or array of values.
 * @member {Object} value
 */
ComponentPurgeBodyFilters.prototype['value'] = undefined;






export default ComponentPurgeBodyFilters;

