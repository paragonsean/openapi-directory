# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_purge_body_filters import ComponentPurgeBodyFilters
from openapi_server import util


class ComponentPurgeBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[ComponentPurgeBodyFilters]=None, table: str=None):
        """ComponentPurgeBody - a model defined in OpenAPI

        :param filters: The filters of this ComponentPurgeBody.
        :param table: The table of this ComponentPurgeBody.
        """
        self.openapi_types = {
            'filters': List[ComponentPurgeBodyFilters],
            'table': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'table': 'table'
        }

        self._filters = filters
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentPurgeBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentPurgeBody of this ComponentPurgeBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this ComponentPurgeBody.

        The set of columns and filters (queries) to run over them to purge the resulting data.

        :return: The filters of this ComponentPurgeBody.
        :rtype: List[ComponentPurgeBodyFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ComponentPurgeBody.

        The set of columns and filters (queries) to run over them to purge the resulting data.

        :param filters: The filters of this ComponentPurgeBody.
        :type filters: List[ComponentPurgeBodyFilters]
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")

        self._filters = filters

    @property
    def table(self):
        """Gets the table of this ComponentPurgeBody.

        Table from which to purge data.

        :return: The table of this ComponentPurgeBody.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this ComponentPurgeBody.

        Table from which to purge data.

        :param table: The table of this ComponentPurgeBody.
        :type table: str
        """
        if table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")

        self._table = table
