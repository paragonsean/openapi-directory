/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElasticPoolActivityProperties.h
 *
 * Represents the properties of an elastic pool.
 */

#ifndef OAIElasticPoolActivityProperties_H
#define OAIElasticPoolActivityProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIElasticPoolActivityProperties : public OAIObject {
public:
    OAIElasticPoolActivityProperties();
    OAIElasticPoolActivityProperties(QString json);
    ~OAIElasticPoolActivityProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getElasticPoolName() const;
    void setElasticPoolName(const QString &elastic_pool_name);
    bool is_elastic_pool_name_Set() const;
    bool is_elastic_pool_name_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getErrorCode() const;
    void setErrorCode(const qint32 &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    qint32 getErrorSeverity() const;
    void setErrorSeverity(const qint32 &error_severity);
    bool is_error_severity_Set() const;
    bool is_error_severity_Valid() const;

    QString getOperation() const;
    void setOperation(const QString &operation);
    bool is_operation_Set() const;
    bool is_operation_Valid() const;

    QString getOperationId() const;
    void setOperationId(const QString &operation_id);
    bool is_operation_id_Set() const;
    bool is_operation_id_Valid() const;

    qint32 getPercentComplete() const;
    void setPercentComplete(const qint32 &percent_complete);
    bool is_percent_complete_Set() const;
    bool is_percent_complete_Valid() const;

    qint32 getRequestedDatabaseDtuCap() const;
    void setRequestedDatabaseDtuCap(const qint32 &requested_database_dtu_cap);
    bool is_requested_database_dtu_cap_Set() const;
    bool is_requested_database_dtu_cap_Valid() const;

    qint32 getRequestedDatabaseDtuGuarantee() const;
    void setRequestedDatabaseDtuGuarantee(const qint32 &requested_database_dtu_guarantee);
    bool is_requested_database_dtu_guarantee_Set() const;
    bool is_requested_database_dtu_guarantee_Valid() const;

    qint32 getRequestedDatabaseDtuMax() const;
    void setRequestedDatabaseDtuMax(const qint32 &requested_database_dtu_max);
    bool is_requested_database_dtu_max_Set() const;
    bool is_requested_database_dtu_max_Valid() const;

    qint32 getRequestedDatabaseDtuMin() const;
    void setRequestedDatabaseDtuMin(const qint32 &requested_database_dtu_min);
    bool is_requested_database_dtu_min_Set() const;
    bool is_requested_database_dtu_min_Valid() const;

    qint32 getRequestedDtu() const;
    void setRequestedDtu(const qint32 &requested_dtu);
    bool is_requested_dtu_Set() const;
    bool is_requested_dtu_Valid() const;

    qint32 getRequestedDtuGuarantee() const;
    void setRequestedDtuGuarantee(const qint32 &requested_dtu_guarantee);
    bool is_requested_dtu_guarantee_Set() const;
    bool is_requested_dtu_guarantee_Valid() const;

    QString getRequestedElasticPoolName() const;
    void setRequestedElasticPoolName(const QString &requested_elastic_pool_name);
    bool is_requested_elastic_pool_name_Set() const;
    bool is_requested_elastic_pool_name_Valid() const;

    qint64 getRequestedStorageLimitInGb() const;
    void setRequestedStorageLimitInGb(const qint64 &requested_storage_limit_in_gb);
    bool is_requested_storage_limit_in_gb_Set() const;
    bool is_requested_storage_limit_in_gb_Valid() const;

    qint32 getRequestedStorageLimitInMb() const;
    void setRequestedStorageLimitInMb(const qint32 &requested_storage_limit_in_mb);
    bool is_requested_storage_limit_in_mb_Set() const;
    bool is_requested_storage_limit_in_mb_Valid() const;

    QString getServerName() const;
    void setServerName(const QString &server_name);
    bool is_server_name_Set() const;
    bool is_server_name_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_elastic_pool_name;
    bool m_elastic_pool_name_isSet;
    bool m_elastic_pool_name_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    qint32 m_error_severity;
    bool m_error_severity_isSet;
    bool m_error_severity_isValid;

    QString m_operation;
    bool m_operation_isSet;
    bool m_operation_isValid;

    QString m_operation_id;
    bool m_operation_id_isSet;
    bool m_operation_id_isValid;

    qint32 m_percent_complete;
    bool m_percent_complete_isSet;
    bool m_percent_complete_isValid;

    qint32 m_requested_database_dtu_cap;
    bool m_requested_database_dtu_cap_isSet;
    bool m_requested_database_dtu_cap_isValid;

    qint32 m_requested_database_dtu_guarantee;
    bool m_requested_database_dtu_guarantee_isSet;
    bool m_requested_database_dtu_guarantee_isValid;

    qint32 m_requested_database_dtu_max;
    bool m_requested_database_dtu_max_isSet;
    bool m_requested_database_dtu_max_isValid;

    qint32 m_requested_database_dtu_min;
    bool m_requested_database_dtu_min_isSet;
    bool m_requested_database_dtu_min_isValid;

    qint32 m_requested_dtu;
    bool m_requested_dtu_isSet;
    bool m_requested_dtu_isValid;

    qint32 m_requested_dtu_guarantee;
    bool m_requested_dtu_guarantee_isSet;
    bool m_requested_dtu_guarantee_isValid;

    QString m_requested_elastic_pool_name;
    bool m_requested_elastic_pool_name_isSet;
    bool m_requested_elastic_pool_name_isValid;

    qint64 m_requested_storage_limit_in_gb;
    bool m_requested_storage_limit_in_gb_isSet;
    bool m_requested_storage_limit_in_gb_isValid;

    qint32 m_requested_storage_limit_in_mb;
    bool m_requested_storage_limit_in_mb_isSet;
    bool m_requested_storage_limit_in_mb_isValid;

    QString m_server_name;
    bool m_server_name_isSet;
    bool m_server_name_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElasticPoolActivityProperties)

#endif // OAIElasticPoolActivityProperties_H
