/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticPoolActivityProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticPoolActivityProperties::OAIElasticPoolActivityProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticPoolActivityProperties::OAIElasticPoolActivityProperties() {
    this->initializeModel();
}

OAIElasticPoolActivityProperties::~OAIElasticPoolActivityProperties() {}

void OAIElasticPoolActivityProperties::initializeModel() {

    m_elastic_pool_name_isSet = false;
    m_elastic_pool_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_severity_isSet = false;
    m_error_severity_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_requested_database_dtu_cap_isSet = false;
    m_requested_database_dtu_cap_isValid = false;

    m_requested_database_dtu_guarantee_isSet = false;
    m_requested_database_dtu_guarantee_isValid = false;

    m_requested_database_dtu_max_isSet = false;
    m_requested_database_dtu_max_isValid = false;

    m_requested_database_dtu_min_isSet = false;
    m_requested_database_dtu_min_isValid = false;

    m_requested_dtu_isSet = false;
    m_requested_dtu_isValid = false;

    m_requested_dtu_guarantee_isSet = false;
    m_requested_dtu_guarantee_isValid = false;

    m_requested_elastic_pool_name_isSet = false;
    m_requested_elastic_pool_name_isValid = false;

    m_requested_storage_limit_in_gb_isSet = false;
    m_requested_storage_limit_in_gb_isValid = false;

    m_requested_storage_limit_in_mb_isSet = false;
    m_requested_storage_limit_in_mb_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIElasticPoolActivityProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticPoolActivityProperties::fromJsonObject(QJsonObject json) {

    m_elastic_pool_name_isValid = ::OpenAPI::fromJsonValue(m_elastic_pool_name, json[QString("elasticPoolName")]);
    m_elastic_pool_name_isSet = !json[QString("elasticPoolName")].isNull() && m_elastic_pool_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_severity_isValid = ::OpenAPI::fromJsonValue(m_error_severity, json[QString("errorSeverity")]);
    m_error_severity_isSet = !json[QString("errorSeverity")].isNull() && m_error_severity_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_requested_database_dtu_cap_isValid = ::OpenAPI::fromJsonValue(m_requested_database_dtu_cap, json[QString("requestedDatabaseDtuCap")]);
    m_requested_database_dtu_cap_isSet = !json[QString("requestedDatabaseDtuCap")].isNull() && m_requested_database_dtu_cap_isValid;

    m_requested_database_dtu_guarantee_isValid = ::OpenAPI::fromJsonValue(m_requested_database_dtu_guarantee, json[QString("requestedDatabaseDtuGuarantee")]);
    m_requested_database_dtu_guarantee_isSet = !json[QString("requestedDatabaseDtuGuarantee")].isNull() && m_requested_database_dtu_guarantee_isValid;

    m_requested_database_dtu_max_isValid = ::OpenAPI::fromJsonValue(m_requested_database_dtu_max, json[QString("requestedDatabaseDtuMax")]);
    m_requested_database_dtu_max_isSet = !json[QString("requestedDatabaseDtuMax")].isNull() && m_requested_database_dtu_max_isValid;

    m_requested_database_dtu_min_isValid = ::OpenAPI::fromJsonValue(m_requested_database_dtu_min, json[QString("requestedDatabaseDtuMin")]);
    m_requested_database_dtu_min_isSet = !json[QString("requestedDatabaseDtuMin")].isNull() && m_requested_database_dtu_min_isValid;

    m_requested_dtu_isValid = ::OpenAPI::fromJsonValue(m_requested_dtu, json[QString("requestedDtu")]);
    m_requested_dtu_isSet = !json[QString("requestedDtu")].isNull() && m_requested_dtu_isValid;

    m_requested_dtu_guarantee_isValid = ::OpenAPI::fromJsonValue(m_requested_dtu_guarantee, json[QString("requestedDtuGuarantee")]);
    m_requested_dtu_guarantee_isSet = !json[QString("requestedDtuGuarantee")].isNull() && m_requested_dtu_guarantee_isValid;

    m_requested_elastic_pool_name_isValid = ::OpenAPI::fromJsonValue(m_requested_elastic_pool_name, json[QString("requestedElasticPoolName")]);
    m_requested_elastic_pool_name_isSet = !json[QString("requestedElasticPoolName")].isNull() && m_requested_elastic_pool_name_isValid;

    m_requested_storage_limit_in_gb_isValid = ::OpenAPI::fromJsonValue(m_requested_storage_limit_in_gb, json[QString("requestedStorageLimitInGB")]);
    m_requested_storage_limit_in_gb_isSet = !json[QString("requestedStorageLimitInGB")].isNull() && m_requested_storage_limit_in_gb_isValid;

    m_requested_storage_limit_in_mb_isValid = ::OpenAPI::fromJsonValue(m_requested_storage_limit_in_mb, json[QString("requestedStorageLimitInMB")]);
    m_requested_storage_limit_in_mb_isSet = !json[QString("requestedStorageLimitInMB")].isNull() && m_requested_storage_limit_in_mb_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIElasticPoolActivityProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticPoolActivityProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_elastic_pool_name_isSet) {
        obj.insert(QString("elasticPoolName"), ::OpenAPI::toJsonValue(m_elastic_pool_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_severity_isSet) {
        obj.insert(QString("errorSeverity"), ::OpenAPI::toJsonValue(m_error_severity));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_requested_database_dtu_cap_isSet) {
        obj.insert(QString("requestedDatabaseDtuCap"), ::OpenAPI::toJsonValue(m_requested_database_dtu_cap));
    }
    if (m_requested_database_dtu_guarantee_isSet) {
        obj.insert(QString("requestedDatabaseDtuGuarantee"), ::OpenAPI::toJsonValue(m_requested_database_dtu_guarantee));
    }
    if (m_requested_database_dtu_max_isSet) {
        obj.insert(QString("requestedDatabaseDtuMax"), ::OpenAPI::toJsonValue(m_requested_database_dtu_max));
    }
    if (m_requested_database_dtu_min_isSet) {
        obj.insert(QString("requestedDatabaseDtuMin"), ::OpenAPI::toJsonValue(m_requested_database_dtu_min));
    }
    if (m_requested_dtu_isSet) {
        obj.insert(QString("requestedDtu"), ::OpenAPI::toJsonValue(m_requested_dtu));
    }
    if (m_requested_dtu_guarantee_isSet) {
        obj.insert(QString("requestedDtuGuarantee"), ::OpenAPI::toJsonValue(m_requested_dtu_guarantee));
    }
    if (m_requested_elastic_pool_name_isSet) {
        obj.insert(QString("requestedElasticPoolName"), ::OpenAPI::toJsonValue(m_requested_elastic_pool_name));
    }
    if (m_requested_storage_limit_in_gb_isSet) {
        obj.insert(QString("requestedStorageLimitInGB"), ::OpenAPI::toJsonValue(m_requested_storage_limit_in_gb));
    }
    if (m_requested_storage_limit_in_mb_isSet) {
        obj.insert(QString("requestedStorageLimitInMB"), ::OpenAPI::toJsonValue(m_requested_storage_limit_in_mb));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIElasticPoolActivityProperties::getElasticPoolName() const {
    return m_elastic_pool_name;
}
void OAIElasticPoolActivityProperties::setElasticPoolName(const QString &elastic_pool_name) {
    m_elastic_pool_name = elastic_pool_name;
    m_elastic_pool_name_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_elastic_pool_name_Set() const{
    return m_elastic_pool_name_isSet;
}

bool OAIElasticPoolActivityProperties::is_elastic_pool_name_Valid() const{
    return m_elastic_pool_name_isValid;
}

QDateTime OAIElasticPoolActivityProperties::getEndTime() const {
    return m_end_time;
}
void OAIElasticPoolActivityProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIElasticPoolActivityProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIElasticPoolActivityProperties::getErrorCode() const {
    return m_error_code;
}
void OAIElasticPoolActivityProperties::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIElasticPoolActivityProperties::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIElasticPoolActivityProperties::getErrorMessage() const {
    return m_error_message;
}
void OAIElasticPoolActivityProperties::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIElasticPoolActivityProperties::is_error_message_Valid() const{
    return m_error_message_isValid;
}

qint32 OAIElasticPoolActivityProperties::getErrorSeverity() const {
    return m_error_severity;
}
void OAIElasticPoolActivityProperties::setErrorSeverity(const qint32 &error_severity) {
    m_error_severity = error_severity;
    m_error_severity_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_error_severity_Set() const{
    return m_error_severity_isSet;
}

bool OAIElasticPoolActivityProperties::is_error_severity_Valid() const{
    return m_error_severity_isValid;
}

QString OAIElasticPoolActivityProperties::getOperation() const {
    return m_operation;
}
void OAIElasticPoolActivityProperties::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIElasticPoolActivityProperties::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIElasticPoolActivityProperties::getOperationId() const {
    return m_operation_id;
}
void OAIElasticPoolActivityProperties::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIElasticPoolActivityProperties::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

qint32 OAIElasticPoolActivityProperties::getPercentComplete() const {
    return m_percent_complete;
}
void OAIElasticPoolActivityProperties::setPercentComplete(const qint32 &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAIElasticPoolActivityProperties::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

qint32 OAIElasticPoolActivityProperties::getRequestedDatabaseDtuCap() const {
    return m_requested_database_dtu_cap;
}
void OAIElasticPoolActivityProperties::setRequestedDatabaseDtuCap(const qint32 &requested_database_dtu_cap) {
    m_requested_database_dtu_cap = requested_database_dtu_cap;
    m_requested_database_dtu_cap_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_database_dtu_cap_Set() const{
    return m_requested_database_dtu_cap_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_database_dtu_cap_Valid() const{
    return m_requested_database_dtu_cap_isValid;
}

qint32 OAIElasticPoolActivityProperties::getRequestedDatabaseDtuGuarantee() const {
    return m_requested_database_dtu_guarantee;
}
void OAIElasticPoolActivityProperties::setRequestedDatabaseDtuGuarantee(const qint32 &requested_database_dtu_guarantee) {
    m_requested_database_dtu_guarantee = requested_database_dtu_guarantee;
    m_requested_database_dtu_guarantee_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_database_dtu_guarantee_Set() const{
    return m_requested_database_dtu_guarantee_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_database_dtu_guarantee_Valid() const{
    return m_requested_database_dtu_guarantee_isValid;
}

qint32 OAIElasticPoolActivityProperties::getRequestedDatabaseDtuMax() const {
    return m_requested_database_dtu_max;
}
void OAIElasticPoolActivityProperties::setRequestedDatabaseDtuMax(const qint32 &requested_database_dtu_max) {
    m_requested_database_dtu_max = requested_database_dtu_max;
    m_requested_database_dtu_max_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_database_dtu_max_Set() const{
    return m_requested_database_dtu_max_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_database_dtu_max_Valid() const{
    return m_requested_database_dtu_max_isValid;
}

qint32 OAIElasticPoolActivityProperties::getRequestedDatabaseDtuMin() const {
    return m_requested_database_dtu_min;
}
void OAIElasticPoolActivityProperties::setRequestedDatabaseDtuMin(const qint32 &requested_database_dtu_min) {
    m_requested_database_dtu_min = requested_database_dtu_min;
    m_requested_database_dtu_min_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_database_dtu_min_Set() const{
    return m_requested_database_dtu_min_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_database_dtu_min_Valid() const{
    return m_requested_database_dtu_min_isValid;
}

qint32 OAIElasticPoolActivityProperties::getRequestedDtu() const {
    return m_requested_dtu;
}
void OAIElasticPoolActivityProperties::setRequestedDtu(const qint32 &requested_dtu) {
    m_requested_dtu = requested_dtu;
    m_requested_dtu_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_dtu_Set() const{
    return m_requested_dtu_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_dtu_Valid() const{
    return m_requested_dtu_isValid;
}

qint32 OAIElasticPoolActivityProperties::getRequestedDtuGuarantee() const {
    return m_requested_dtu_guarantee;
}
void OAIElasticPoolActivityProperties::setRequestedDtuGuarantee(const qint32 &requested_dtu_guarantee) {
    m_requested_dtu_guarantee = requested_dtu_guarantee;
    m_requested_dtu_guarantee_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_dtu_guarantee_Set() const{
    return m_requested_dtu_guarantee_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_dtu_guarantee_Valid() const{
    return m_requested_dtu_guarantee_isValid;
}

QString OAIElasticPoolActivityProperties::getRequestedElasticPoolName() const {
    return m_requested_elastic_pool_name;
}
void OAIElasticPoolActivityProperties::setRequestedElasticPoolName(const QString &requested_elastic_pool_name) {
    m_requested_elastic_pool_name = requested_elastic_pool_name;
    m_requested_elastic_pool_name_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_elastic_pool_name_Set() const{
    return m_requested_elastic_pool_name_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_elastic_pool_name_Valid() const{
    return m_requested_elastic_pool_name_isValid;
}

qint64 OAIElasticPoolActivityProperties::getRequestedStorageLimitInGb() const {
    return m_requested_storage_limit_in_gb;
}
void OAIElasticPoolActivityProperties::setRequestedStorageLimitInGb(const qint64 &requested_storage_limit_in_gb) {
    m_requested_storage_limit_in_gb = requested_storage_limit_in_gb;
    m_requested_storage_limit_in_gb_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_storage_limit_in_gb_Set() const{
    return m_requested_storage_limit_in_gb_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_storage_limit_in_gb_Valid() const{
    return m_requested_storage_limit_in_gb_isValid;
}

qint32 OAIElasticPoolActivityProperties::getRequestedStorageLimitInMb() const {
    return m_requested_storage_limit_in_mb;
}
void OAIElasticPoolActivityProperties::setRequestedStorageLimitInMb(const qint32 &requested_storage_limit_in_mb) {
    m_requested_storage_limit_in_mb = requested_storage_limit_in_mb;
    m_requested_storage_limit_in_mb_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_requested_storage_limit_in_mb_Set() const{
    return m_requested_storage_limit_in_mb_isSet;
}

bool OAIElasticPoolActivityProperties::is_requested_storage_limit_in_mb_Valid() const{
    return m_requested_storage_limit_in_mb_isValid;
}

QString OAIElasticPoolActivityProperties::getServerName() const {
    return m_server_name;
}
void OAIElasticPoolActivityProperties::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIElasticPoolActivityProperties::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QDateTime OAIElasticPoolActivityProperties::getStartTime() const {
    return m_start_time;
}
void OAIElasticPoolActivityProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIElasticPoolActivityProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIElasticPoolActivityProperties::getState() const {
    return m_state;
}
void OAIElasticPoolActivityProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIElasticPoolActivityProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIElasticPoolActivityProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIElasticPoolActivityProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elastic_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_database_dtu_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_database_dtu_guarantee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_database_dtu_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_database_dtu_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_dtu_guarantee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_elastic_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_storage_limit_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_storage_limit_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticPoolActivityProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
