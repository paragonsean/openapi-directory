/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticPoolDatabaseActivityProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticPoolDatabaseActivityProperties::OAIElasticPoolDatabaseActivityProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticPoolDatabaseActivityProperties::OAIElasticPoolDatabaseActivityProperties() {
    this->initializeModel();
}

OAIElasticPoolDatabaseActivityProperties::~OAIElasticPoolDatabaseActivityProperties() {}

void OAIElasticPoolDatabaseActivityProperties::initializeModel() {

    m_current_elastic_pool_name_isSet = false;
    m_current_elastic_pool_name_isValid = false;

    m_current_service_objective_isSet = false;
    m_current_service_objective_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_severity_isSet = false;
    m_error_severity_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_requested_elastic_pool_name_isSet = false;
    m_requested_elastic_pool_name_isValid = false;

    m_requested_service_objective_isSet = false;
    m_requested_service_objective_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIElasticPoolDatabaseActivityProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticPoolDatabaseActivityProperties::fromJsonObject(QJsonObject json) {

    m_current_elastic_pool_name_isValid = ::OpenAPI::fromJsonValue(m_current_elastic_pool_name, json[QString("currentElasticPoolName")]);
    m_current_elastic_pool_name_isSet = !json[QString("currentElasticPoolName")].isNull() && m_current_elastic_pool_name_isValid;

    m_current_service_objective_isValid = ::OpenAPI::fromJsonValue(m_current_service_objective, json[QString("currentServiceObjective")]);
    m_current_service_objective_isSet = !json[QString("currentServiceObjective")].isNull() && m_current_service_objective_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_severity_isValid = ::OpenAPI::fromJsonValue(m_error_severity, json[QString("errorSeverity")]);
    m_error_severity_isSet = !json[QString("errorSeverity")].isNull() && m_error_severity_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_requested_elastic_pool_name_isValid = ::OpenAPI::fromJsonValue(m_requested_elastic_pool_name, json[QString("requestedElasticPoolName")]);
    m_requested_elastic_pool_name_isSet = !json[QString("requestedElasticPoolName")].isNull() && m_requested_elastic_pool_name_isValid;

    m_requested_service_objective_isValid = ::OpenAPI::fromJsonValue(m_requested_service_objective, json[QString("requestedServiceObjective")]);
    m_requested_service_objective_isSet = !json[QString("requestedServiceObjective")].isNull() && m_requested_service_objective_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticPoolDatabaseActivityProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_current_elastic_pool_name_isSet) {
        obj.insert(QString("currentElasticPoolName"), ::OpenAPI::toJsonValue(m_current_elastic_pool_name));
    }
    if (m_current_service_objective_isSet) {
        obj.insert(QString("currentServiceObjective"), ::OpenAPI::toJsonValue(m_current_service_objective));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_severity_isSet) {
        obj.insert(QString("errorSeverity"), ::OpenAPI::toJsonValue(m_error_severity));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_requested_elastic_pool_name_isSet) {
        obj.insert(QString("requestedElasticPoolName"), ::OpenAPI::toJsonValue(m_requested_elastic_pool_name));
    }
    if (m_requested_service_objective_isSet) {
        obj.insert(QString("requestedServiceObjective"), ::OpenAPI::toJsonValue(m_requested_service_objective));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIElasticPoolDatabaseActivityProperties::getCurrentElasticPoolName() const {
    return m_current_elastic_pool_name;
}
void OAIElasticPoolDatabaseActivityProperties::setCurrentElasticPoolName(const QString &current_elastic_pool_name) {
    m_current_elastic_pool_name = current_elastic_pool_name;
    m_current_elastic_pool_name_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_current_elastic_pool_name_Set() const{
    return m_current_elastic_pool_name_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_current_elastic_pool_name_Valid() const{
    return m_current_elastic_pool_name_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getCurrentServiceObjective() const {
    return m_current_service_objective;
}
void OAIElasticPoolDatabaseActivityProperties::setCurrentServiceObjective(const QString &current_service_objective) {
    m_current_service_objective = current_service_objective;
    m_current_service_objective_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_current_service_objective_Set() const{
    return m_current_service_objective_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_current_service_objective_Valid() const{
    return m_current_service_objective_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getDatabaseName() const {
    return m_database_name;
}
void OAIElasticPoolDatabaseActivityProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QDateTime OAIElasticPoolDatabaseActivityProperties::getEndTime() const {
    return m_end_time;
}
void OAIElasticPoolDatabaseActivityProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIElasticPoolDatabaseActivityProperties::getErrorCode() const {
    return m_error_code;
}
void OAIElasticPoolDatabaseActivityProperties::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getErrorMessage() const {
    return m_error_message;
}
void OAIElasticPoolDatabaseActivityProperties::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_error_message_Valid() const{
    return m_error_message_isValid;
}

qint32 OAIElasticPoolDatabaseActivityProperties::getErrorSeverity() const {
    return m_error_severity;
}
void OAIElasticPoolDatabaseActivityProperties::setErrorSeverity(const qint32 &error_severity) {
    m_error_severity = error_severity;
    m_error_severity_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_error_severity_Set() const{
    return m_error_severity_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_error_severity_Valid() const{
    return m_error_severity_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getOperation() const {
    return m_operation;
}
void OAIElasticPoolDatabaseActivityProperties::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getOperationId() const {
    return m_operation_id;
}
void OAIElasticPoolDatabaseActivityProperties::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

qint32 OAIElasticPoolDatabaseActivityProperties::getPercentComplete() const {
    return m_percent_complete;
}
void OAIElasticPoolDatabaseActivityProperties::setPercentComplete(const qint32 &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getRequestedElasticPoolName() const {
    return m_requested_elastic_pool_name;
}
void OAIElasticPoolDatabaseActivityProperties::setRequestedElasticPoolName(const QString &requested_elastic_pool_name) {
    m_requested_elastic_pool_name = requested_elastic_pool_name;
    m_requested_elastic_pool_name_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_requested_elastic_pool_name_Set() const{
    return m_requested_elastic_pool_name_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_requested_elastic_pool_name_Valid() const{
    return m_requested_elastic_pool_name_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getRequestedServiceObjective() const {
    return m_requested_service_objective;
}
void OAIElasticPoolDatabaseActivityProperties::setRequestedServiceObjective(const QString &requested_service_objective) {
    m_requested_service_objective = requested_service_objective;
    m_requested_service_objective_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_requested_service_objective_Set() const{
    return m_requested_service_objective_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_requested_service_objective_Valid() const{
    return m_requested_service_objective_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getServerName() const {
    return m_server_name;
}
void OAIElasticPoolDatabaseActivityProperties::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QDateTime OAIElasticPoolDatabaseActivityProperties::getStartTime() const {
    return m_start_time;
}
void OAIElasticPoolDatabaseActivityProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIElasticPoolDatabaseActivityProperties::getState() const {
    return m_state;
}
void OAIElasticPoolDatabaseActivityProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIElasticPoolDatabaseActivityProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIElasticPoolDatabaseActivityProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIElasticPoolDatabaseActivityProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_elastic_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_service_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_elastic_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_service_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticPoolDatabaseActivityProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
