/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransparentDataEncryptionActivityProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransparentDataEncryptionActivityProperties::OAITransparentDataEncryptionActivityProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransparentDataEncryptionActivityProperties::OAITransparentDataEncryptionActivityProperties() {
    this->initializeModel();
}

OAITransparentDataEncryptionActivityProperties::~OAITransparentDataEncryptionActivityProperties() {}

void OAITransparentDataEncryptionActivityProperties::initializeModel() {

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITransparentDataEncryptionActivityProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransparentDataEncryptionActivityProperties::fromJsonObject(QJsonObject json) {

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITransparentDataEncryptionActivityProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransparentDataEncryptionActivityProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

float OAITransparentDataEncryptionActivityProperties::getPercentComplete() const {
    return m_percent_complete;
}
void OAITransparentDataEncryptionActivityProperties::setPercentComplete(const float &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAITransparentDataEncryptionActivityProperties::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAITransparentDataEncryptionActivityProperties::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

QString OAITransparentDataEncryptionActivityProperties::getStatus() const {
    return m_status;
}
void OAITransparentDataEncryptionActivityProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransparentDataEncryptionActivityProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransparentDataEncryptionActivityProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITransparentDataEncryptionActivityProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransparentDataEncryptionActivityProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
