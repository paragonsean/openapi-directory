/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceTierAdvisorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceTierAdvisorProperties::OAIServiceTierAdvisorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceTierAdvisorProperties::OAIServiceTierAdvisorProperties() {
    this->initializeModel();
}

OAIServiceTierAdvisorProperties::~OAIServiceTierAdvisorProperties() {}

void OAIServiceTierAdvisorProperties::initializeModel() {

    m_active_time_ratio_isSet = false;
    m_active_time_ratio_isValid = false;

    m_avg_dtu_isSet = false;
    m_avg_dtu_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_current_service_level_objective_isSet = false;
    m_current_service_level_objective_isValid = false;

    m_current_service_level_objective_id_isSet = false;
    m_current_service_level_objective_id_isValid = false;

    m_database_size_based_recommendation_service_level_objective_isSet = false;
    m_database_size_based_recommendation_service_level_objective_isValid = false;

    m_database_size_based_recommendation_service_level_objective_id_isSet = false;
    m_database_size_based_recommendation_service_level_objective_id_isValid = false;

    m_disaster_plan_based_recommendation_service_level_objective_isSet = false;
    m_disaster_plan_based_recommendation_service_level_objective_isValid = false;

    m_disaster_plan_based_recommendation_service_level_objective_id_isSet = false;
    m_disaster_plan_based_recommendation_service_level_objective_id_isValid = false;

    m_max_dtu_isSet = false;
    m_max_dtu_isValid = false;

    m_max_size_in_gb_isSet = false;
    m_max_size_in_gb_isValid = false;

    m_min_dtu_isSet = false;
    m_min_dtu_isValid = false;

    m_observation_period_end_isSet = false;
    m_observation_period_end_isValid = false;

    m_observation_period_start_isSet = false;
    m_observation_period_start_isValid = false;

    m_overall_recommendation_service_level_objective_isSet = false;
    m_overall_recommendation_service_level_objective_isValid = false;

    m_overall_recommendation_service_level_objective_id_isSet = false;
    m_overall_recommendation_service_level_objective_id_isValid = false;

    m_service_level_objective_usage_metrics_isSet = false;
    m_service_level_objective_usage_metrics_isValid = false;

    m_usage_based_recommendation_service_level_objective_isSet = false;
    m_usage_based_recommendation_service_level_objective_isValid = false;

    m_usage_based_recommendation_service_level_objective_id_isSet = false;
    m_usage_based_recommendation_service_level_objective_id_isValid = false;
}

void OAIServiceTierAdvisorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceTierAdvisorProperties::fromJsonObject(QJsonObject json) {

    m_active_time_ratio_isValid = ::OpenAPI::fromJsonValue(m_active_time_ratio, json[QString("activeTimeRatio")]);
    m_active_time_ratio_isSet = !json[QString("activeTimeRatio")].isNull() && m_active_time_ratio_isValid;

    m_avg_dtu_isValid = ::OpenAPI::fromJsonValue(m_avg_dtu, json[QString("avgDtu")]);
    m_avg_dtu_isSet = !json[QString("avgDtu")].isNull() && m_avg_dtu_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_current_service_level_objective_isValid = ::OpenAPI::fromJsonValue(m_current_service_level_objective, json[QString("currentServiceLevelObjective")]);
    m_current_service_level_objective_isSet = !json[QString("currentServiceLevelObjective")].isNull() && m_current_service_level_objective_isValid;

    m_current_service_level_objective_id_isValid = ::OpenAPI::fromJsonValue(m_current_service_level_objective_id, json[QString("currentServiceLevelObjectiveId")]);
    m_current_service_level_objective_id_isSet = !json[QString("currentServiceLevelObjectiveId")].isNull() && m_current_service_level_objective_id_isValid;

    m_database_size_based_recommendation_service_level_objective_isValid = ::OpenAPI::fromJsonValue(m_database_size_based_recommendation_service_level_objective, json[QString("databaseSizeBasedRecommendationServiceLevelObjective")]);
    m_database_size_based_recommendation_service_level_objective_isSet = !json[QString("databaseSizeBasedRecommendationServiceLevelObjective")].isNull() && m_database_size_based_recommendation_service_level_objective_isValid;

    m_database_size_based_recommendation_service_level_objective_id_isValid = ::OpenAPI::fromJsonValue(m_database_size_based_recommendation_service_level_objective_id, json[QString("databaseSizeBasedRecommendationServiceLevelObjectiveId")]);
    m_database_size_based_recommendation_service_level_objective_id_isSet = !json[QString("databaseSizeBasedRecommendationServiceLevelObjectiveId")].isNull() && m_database_size_based_recommendation_service_level_objective_id_isValid;

    m_disaster_plan_based_recommendation_service_level_objective_isValid = ::OpenAPI::fromJsonValue(m_disaster_plan_based_recommendation_service_level_objective, json[QString("disasterPlanBasedRecommendationServiceLevelObjective")]);
    m_disaster_plan_based_recommendation_service_level_objective_isSet = !json[QString("disasterPlanBasedRecommendationServiceLevelObjective")].isNull() && m_disaster_plan_based_recommendation_service_level_objective_isValid;

    m_disaster_plan_based_recommendation_service_level_objective_id_isValid = ::OpenAPI::fromJsonValue(m_disaster_plan_based_recommendation_service_level_objective_id, json[QString("disasterPlanBasedRecommendationServiceLevelObjectiveId")]);
    m_disaster_plan_based_recommendation_service_level_objective_id_isSet = !json[QString("disasterPlanBasedRecommendationServiceLevelObjectiveId")].isNull() && m_disaster_plan_based_recommendation_service_level_objective_id_isValid;

    m_max_dtu_isValid = ::OpenAPI::fromJsonValue(m_max_dtu, json[QString("maxDtu")]);
    m_max_dtu_isSet = !json[QString("maxDtu")].isNull() && m_max_dtu_isValid;

    m_max_size_in_gb_isValid = ::OpenAPI::fromJsonValue(m_max_size_in_gb, json[QString("maxSizeInGB")]);
    m_max_size_in_gb_isSet = !json[QString("maxSizeInGB")].isNull() && m_max_size_in_gb_isValid;

    m_min_dtu_isValid = ::OpenAPI::fromJsonValue(m_min_dtu, json[QString("minDtu")]);
    m_min_dtu_isSet = !json[QString("minDtu")].isNull() && m_min_dtu_isValid;

    m_observation_period_end_isValid = ::OpenAPI::fromJsonValue(m_observation_period_end, json[QString("observationPeriodEnd")]);
    m_observation_period_end_isSet = !json[QString("observationPeriodEnd")].isNull() && m_observation_period_end_isValid;

    m_observation_period_start_isValid = ::OpenAPI::fromJsonValue(m_observation_period_start, json[QString("observationPeriodStart")]);
    m_observation_period_start_isSet = !json[QString("observationPeriodStart")].isNull() && m_observation_period_start_isValid;

    m_overall_recommendation_service_level_objective_isValid = ::OpenAPI::fromJsonValue(m_overall_recommendation_service_level_objective, json[QString("overallRecommendationServiceLevelObjective")]);
    m_overall_recommendation_service_level_objective_isSet = !json[QString("overallRecommendationServiceLevelObjective")].isNull() && m_overall_recommendation_service_level_objective_isValid;

    m_overall_recommendation_service_level_objective_id_isValid = ::OpenAPI::fromJsonValue(m_overall_recommendation_service_level_objective_id, json[QString("overallRecommendationServiceLevelObjectiveId")]);
    m_overall_recommendation_service_level_objective_id_isSet = !json[QString("overallRecommendationServiceLevelObjectiveId")].isNull() && m_overall_recommendation_service_level_objective_id_isValid;

    m_service_level_objective_usage_metrics_isValid = ::OpenAPI::fromJsonValue(m_service_level_objective_usage_metrics, json[QString("serviceLevelObjectiveUsageMetrics")]);
    m_service_level_objective_usage_metrics_isSet = !json[QString("serviceLevelObjectiveUsageMetrics")].isNull() && m_service_level_objective_usage_metrics_isValid;

    m_usage_based_recommendation_service_level_objective_isValid = ::OpenAPI::fromJsonValue(m_usage_based_recommendation_service_level_objective, json[QString("usageBasedRecommendationServiceLevelObjective")]);
    m_usage_based_recommendation_service_level_objective_isSet = !json[QString("usageBasedRecommendationServiceLevelObjective")].isNull() && m_usage_based_recommendation_service_level_objective_isValid;

    m_usage_based_recommendation_service_level_objective_id_isValid = ::OpenAPI::fromJsonValue(m_usage_based_recommendation_service_level_objective_id, json[QString("usageBasedRecommendationServiceLevelObjectiveId")]);
    m_usage_based_recommendation_service_level_objective_id_isSet = !json[QString("usageBasedRecommendationServiceLevelObjectiveId")].isNull() && m_usage_based_recommendation_service_level_objective_id_isValid;
}

QString OAIServiceTierAdvisorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceTierAdvisorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_active_time_ratio_isSet) {
        obj.insert(QString("activeTimeRatio"), ::OpenAPI::toJsonValue(m_active_time_ratio));
    }
    if (m_avg_dtu_isSet) {
        obj.insert(QString("avgDtu"), ::OpenAPI::toJsonValue(m_avg_dtu));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_current_service_level_objective_isSet) {
        obj.insert(QString("currentServiceLevelObjective"), ::OpenAPI::toJsonValue(m_current_service_level_objective));
    }
    if (m_current_service_level_objective_id_isSet) {
        obj.insert(QString("currentServiceLevelObjectiveId"), ::OpenAPI::toJsonValue(m_current_service_level_objective_id));
    }
    if (m_database_size_based_recommendation_service_level_objective_isSet) {
        obj.insert(QString("databaseSizeBasedRecommendationServiceLevelObjective"), ::OpenAPI::toJsonValue(m_database_size_based_recommendation_service_level_objective));
    }
    if (m_database_size_based_recommendation_service_level_objective_id_isSet) {
        obj.insert(QString("databaseSizeBasedRecommendationServiceLevelObjectiveId"), ::OpenAPI::toJsonValue(m_database_size_based_recommendation_service_level_objective_id));
    }
    if (m_disaster_plan_based_recommendation_service_level_objective_isSet) {
        obj.insert(QString("disasterPlanBasedRecommendationServiceLevelObjective"), ::OpenAPI::toJsonValue(m_disaster_plan_based_recommendation_service_level_objective));
    }
    if (m_disaster_plan_based_recommendation_service_level_objective_id_isSet) {
        obj.insert(QString("disasterPlanBasedRecommendationServiceLevelObjectiveId"), ::OpenAPI::toJsonValue(m_disaster_plan_based_recommendation_service_level_objective_id));
    }
    if (m_max_dtu_isSet) {
        obj.insert(QString("maxDtu"), ::OpenAPI::toJsonValue(m_max_dtu));
    }
    if (m_max_size_in_gb_isSet) {
        obj.insert(QString("maxSizeInGB"), ::OpenAPI::toJsonValue(m_max_size_in_gb));
    }
    if (m_min_dtu_isSet) {
        obj.insert(QString("minDtu"), ::OpenAPI::toJsonValue(m_min_dtu));
    }
    if (m_observation_period_end_isSet) {
        obj.insert(QString("observationPeriodEnd"), ::OpenAPI::toJsonValue(m_observation_period_end));
    }
    if (m_observation_period_start_isSet) {
        obj.insert(QString("observationPeriodStart"), ::OpenAPI::toJsonValue(m_observation_period_start));
    }
    if (m_overall_recommendation_service_level_objective_isSet) {
        obj.insert(QString("overallRecommendationServiceLevelObjective"), ::OpenAPI::toJsonValue(m_overall_recommendation_service_level_objective));
    }
    if (m_overall_recommendation_service_level_objective_id_isSet) {
        obj.insert(QString("overallRecommendationServiceLevelObjectiveId"), ::OpenAPI::toJsonValue(m_overall_recommendation_service_level_objective_id));
    }
    if (m_service_level_objective_usage_metrics.size() > 0) {
        obj.insert(QString("serviceLevelObjectiveUsageMetrics"), ::OpenAPI::toJsonValue(m_service_level_objective_usage_metrics));
    }
    if (m_usage_based_recommendation_service_level_objective_isSet) {
        obj.insert(QString("usageBasedRecommendationServiceLevelObjective"), ::OpenAPI::toJsonValue(m_usage_based_recommendation_service_level_objective));
    }
    if (m_usage_based_recommendation_service_level_objective_id_isSet) {
        obj.insert(QString("usageBasedRecommendationServiceLevelObjectiveId"), ::OpenAPI::toJsonValue(m_usage_based_recommendation_service_level_objective_id));
    }
    return obj;
}

double OAIServiceTierAdvisorProperties::getActiveTimeRatio() const {
    return m_active_time_ratio;
}
void OAIServiceTierAdvisorProperties::setActiveTimeRatio(const double &active_time_ratio) {
    m_active_time_ratio = active_time_ratio;
    m_active_time_ratio_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_active_time_ratio_Set() const{
    return m_active_time_ratio_isSet;
}

bool OAIServiceTierAdvisorProperties::is_active_time_ratio_Valid() const{
    return m_active_time_ratio_isValid;
}

double OAIServiceTierAdvisorProperties::getAvgDtu() const {
    return m_avg_dtu;
}
void OAIServiceTierAdvisorProperties::setAvgDtu(const double &avg_dtu) {
    m_avg_dtu = avg_dtu;
    m_avg_dtu_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_avg_dtu_Set() const{
    return m_avg_dtu_isSet;
}

bool OAIServiceTierAdvisorProperties::is_avg_dtu_Valid() const{
    return m_avg_dtu_isValid;
}

double OAIServiceTierAdvisorProperties::getConfidence() const {
    return m_confidence;
}
void OAIServiceTierAdvisorProperties::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIServiceTierAdvisorProperties::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIServiceTierAdvisorProperties::getCurrentServiceLevelObjective() const {
    return m_current_service_level_objective;
}
void OAIServiceTierAdvisorProperties::setCurrentServiceLevelObjective(const QString &current_service_level_objective) {
    m_current_service_level_objective = current_service_level_objective;
    m_current_service_level_objective_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_current_service_level_objective_Set() const{
    return m_current_service_level_objective_isSet;
}

bool OAIServiceTierAdvisorProperties::is_current_service_level_objective_Valid() const{
    return m_current_service_level_objective_isValid;
}

QString OAIServiceTierAdvisorProperties::getCurrentServiceLevelObjectiveId() const {
    return m_current_service_level_objective_id;
}
void OAIServiceTierAdvisorProperties::setCurrentServiceLevelObjectiveId(const QString &current_service_level_objective_id) {
    m_current_service_level_objective_id = current_service_level_objective_id;
    m_current_service_level_objective_id_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_current_service_level_objective_id_Set() const{
    return m_current_service_level_objective_id_isSet;
}

bool OAIServiceTierAdvisorProperties::is_current_service_level_objective_id_Valid() const{
    return m_current_service_level_objective_id_isValid;
}

QString OAIServiceTierAdvisorProperties::getDatabaseSizeBasedRecommendationServiceLevelObjective() const {
    return m_database_size_based_recommendation_service_level_objective;
}
void OAIServiceTierAdvisorProperties::setDatabaseSizeBasedRecommendationServiceLevelObjective(const QString &database_size_based_recommendation_service_level_objective) {
    m_database_size_based_recommendation_service_level_objective = database_size_based_recommendation_service_level_objective;
    m_database_size_based_recommendation_service_level_objective_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_database_size_based_recommendation_service_level_objective_Set() const{
    return m_database_size_based_recommendation_service_level_objective_isSet;
}

bool OAIServiceTierAdvisorProperties::is_database_size_based_recommendation_service_level_objective_Valid() const{
    return m_database_size_based_recommendation_service_level_objective_isValid;
}

QString OAIServiceTierAdvisorProperties::getDatabaseSizeBasedRecommendationServiceLevelObjectiveId() const {
    return m_database_size_based_recommendation_service_level_objective_id;
}
void OAIServiceTierAdvisorProperties::setDatabaseSizeBasedRecommendationServiceLevelObjectiveId(const QString &database_size_based_recommendation_service_level_objective_id) {
    m_database_size_based_recommendation_service_level_objective_id = database_size_based_recommendation_service_level_objective_id;
    m_database_size_based_recommendation_service_level_objective_id_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_database_size_based_recommendation_service_level_objective_id_Set() const{
    return m_database_size_based_recommendation_service_level_objective_id_isSet;
}

bool OAIServiceTierAdvisorProperties::is_database_size_based_recommendation_service_level_objective_id_Valid() const{
    return m_database_size_based_recommendation_service_level_objective_id_isValid;
}

QString OAIServiceTierAdvisorProperties::getDisasterPlanBasedRecommendationServiceLevelObjective() const {
    return m_disaster_plan_based_recommendation_service_level_objective;
}
void OAIServiceTierAdvisorProperties::setDisasterPlanBasedRecommendationServiceLevelObjective(const QString &disaster_plan_based_recommendation_service_level_objective) {
    m_disaster_plan_based_recommendation_service_level_objective = disaster_plan_based_recommendation_service_level_objective;
    m_disaster_plan_based_recommendation_service_level_objective_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_disaster_plan_based_recommendation_service_level_objective_Set() const{
    return m_disaster_plan_based_recommendation_service_level_objective_isSet;
}

bool OAIServiceTierAdvisorProperties::is_disaster_plan_based_recommendation_service_level_objective_Valid() const{
    return m_disaster_plan_based_recommendation_service_level_objective_isValid;
}

QString OAIServiceTierAdvisorProperties::getDisasterPlanBasedRecommendationServiceLevelObjectiveId() const {
    return m_disaster_plan_based_recommendation_service_level_objective_id;
}
void OAIServiceTierAdvisorProperties::setDisasterPlanBasedRecommendationServiceLevelObjectiveId(const QString &disaster_plan_based_recommendation_service_level_objective_id) {
    m_disaster_plan_based_recommendation_service_level_objective_id = disaster_plan_based_recommendation_service_level_objective_id;
    m_disaster_plan_based_recommendation_service_level_objective_id_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_disaster_plan_based_recommendation_service_level_objective_id_Set() const{
    return m_disaster_plan_based_recommendation_service_level_objective_id_isSet;
}

bool OAIServiceTierAdvisorProperties::is_disaster_plan_based_recommendation_service_level_objective_id_Valid() const{
    return m_disaster_plan_based_recommendation_service_level_objective_id_isValid;
}

double OAIServiceTierAdvisorProperties::getMaxDtu() const {
    return m_max_dtu;
}
void OAIServiceTierAdvisorProperties::setMaxDtu(const double &max_dtu) {
    m_max_dtu = max_dtu;
    m_max_dtu_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_max_dtu_Set() const{
    return m_max_dtu_isSet;
}

bool OAIServiceTierAdvisorProperties::is_max_dtu_Valid() const{
    return m_max_dtu_isValid;
}

double OAIServiceTierAdvisorProperties::getMaxSizeInGb() const {
    return m_max_size_in_gb;
}
void OAIServiceTierAdvisorProperties::setMaxSizeInGb(const double &max_size_in_gb) {
    m_max_size_in_gb = max_size_in_gb;
    m_max_size_in_gb_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_max_size_in_gb_Set() const{
    return m_max_size_in_gb_isSet;
}

bool OAIServiceTierAdvisorProperties::is_max_size_in_gb_Valid() const{
    return m_max_size_in_gb_isValid;
}

double OAIServiceTierAdvisorProperties::getMinDtu() const {
    return m_min_dtu;
}
void OAIServiceTierAdvisorProperties::setMinDtu(const double &min_dtu) {
    m_min_dtu = min_dtu;
    m_min_dtu_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_min_dtu_Set() const{
    return m_min_dtu_isSet;
}

bool OAIServiceTierAdvisorProperties::is_min_dtu_Valid() const{
    return m_min_dtu_isValid;
}

QDateTime OAIServiceTierAdvisorProperties::getObservationPeriodEnd() const {
    return m_observation_period_end;
}
void OAIServiceTierAdvisorProperties::setObservationPeriodEnd(const QDateTime &observation_period_end) {
    m_observation_period_end = observation_period_end;
    m_observation_period_end_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_observation_period_end_Set() const{
    return m_observation_period_end_isSet;
}

bool OAIServiceTierAdvisorProperties::is_observation_period_end_Valid() const{
    return m_observation_period_end_isValid;
}

QDateTime OAIServiceTierAdvisorProperties::getObservationPeriodStart() const {
    return m_observation_period_start;
}
void OAIServiceTierAdvisorProperties::setObservationPeriodStart(const QDateTime &observation_period_start) {
    m_observation_period_start = observation_period_start;
    m_observation_period_start_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_observation_period_start_Set() const{
    return m_observation_period_start_isSet;
}

bool OAIServiceTierAdvisorProperties::is_observation_period_start_Valid() const{
    return m_observation_period_start_isValid;
}

QString OAIServiceTierAdvisorProperties::getOverallRecommendationServiceLevelObjective() const {
    return m_overall_recommendation_service_level_objective;
}
void OAIServiceTierAdvisorProperties::setOverallRecommendationServiceLevelObjective(const QString &overall_recommendation_service_level_objective) {
    m_overall_recommendation_service_level_objective = overall_recommendation_service_level_objective;
    m_overall_recommendation_service_level_objective_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_overall_recommendation_service_level_objective_Set() const{
    return m_overall_recommendation_service_level_objective_isSet;
}

bool OAIServiceTierAdvisorProperties::is_overall_recommendation_service_level_objective_Valid() const{
    return m_overall_recommendation_service_level_objective_isValid;
}

QString OAIServiceTierAdvisorProperties::getOverallRecommendationServiceLevelObjectiveId() const {
    return m_overall_recommendation_service_level_objective_id;
}
void OAIServiceTierAdvisorProperties::setOverallRecommendationServiceLevelObjectiveId(const QString &overall_recommendation_service_level_objective_id) {
    m_overall_recommendation_service_level_objective_id = overall_recommendation_service_level_objective_id;
    m_overall_recommendation_service_level_objective_id_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_overall_recommendation_service_level_objective_id_Set() const{
    return m_overall_recommendation_service_level_objective_id_isSet;
}

bool OAIServiceTierAdvisorProperties::is_overall_recommendation_service_level_objective_id_Valid() const{
    return m_overall_recommendation_service_level_objective_id_isValid;
}

QList<OAISloUsageMetric> OAIServiceTierAdvisorProperties::getServiceLevelObjectiveUsageMetrics() const {
    return m_service_level_objective_usage_metrics;
}
void OAIServiceTierAdvisorProperties::setServiceLevelObjectiveUsageMetrics(const QList<OAISloUsageMetric> &service_level_objective_usage_metrics) {
    m_service_level_objective_usage_metrics = service_level_objective_usage_metrics;
    m_service_level_objective_usage_metrics_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_service_level_objective_usage_metrics_Set() const{
    return m_service_level_objective_usage_metrics_isSet;
}

bool OAIServiceTierAdvisorProperties::is_service_level_objective_usage_metrics_Valid() const{
    return m_service_level_objective_usage_metrics_isValid;
}

QString OAIServiceTierAdvisorProperties::getUsageBasedRecommendationServiceLevelObjective() const {
    return m_usage_based_recommendation_service_level_objective;
}
void OAIServiceTierAdvisorProperties::setUsageBasedRecommendationServiceLevelObjective(const QString &usage_based_recommendation_service_level_objective) {
    m_usage_based_recommendation_service_level_objective = usage_based_recommendation_service_level_objective;
    m_usage_based_recommendation_service_level_objective_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_usage_based_recommendation_service_level_objective_Set() const{
    return m_usage_based_recommendation_service_level_objective_isSet;
}

bool OAIServiceTierAdvisorProperties::is_usage_based_recommendation_service_level_objective_Valid() const{
    return m_usage_based_recommendation_service_level_objective_isValid;
}

QString OAIServiceTierAdvisorProperties::getUsageBasedRecommendationServiceLevelObjectiveId() const {
    return m_usage_based_recommendation_service_level_objective_id;
}
void OAIServiceTierAdvisorProperties::setUsageBasedRecommendationServiceLevelObjectiveId(const QString &usage_based_recommendation_service_level_objective_id) {
    m_usage_based_recommendation_service_level_objective_id = usage_based_recommendation_service_level_objective_id;
    m_usage_based_recommendation_service_level_objective_id_isSet = true;
}

bool OAIServiceTierAdvisorProperties::is_usage_based_recommendation_service_level_objective_id_Set() const{
    return m_usage_based_recommendation_service_level_objective_id_isSet;
}

bool OAIServiceTierAdvisorProperties::is_usage_based_recommendation_service_level_objective_id_Valid() const{
    return m_usage_based_recommendation_service_level_objective_id_isValid;
}

bool OAIServiceTierAdvisorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_time_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_service_level_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_service_level_objective_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_size_based_recommendation_service_level_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_size_based_recommendation_service_level_objective_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disaster_plan_based_recommendation_service_level_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disaster_plan_based_recommendation_service_level_objective_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_recommendation_service_level_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_recommendation_service_level_objective_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_objective_usage_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_based_recommendation_service_level_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_based_recommendation_service_level_objective_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceTierAdvisorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
