# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElasticPoolDatabaseActivityProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_elastic_pool_name: str=None, current_service_objective: str=None, database_name: str=None, end_time: datetime=None, error_code: int=None, error_message: str=None, error_severity: int=None, operation: str=None, operation_id: str=None, percent_complete: int=None, requested_elastic_pool_name: str=None, requested_service_objective: str=None, server_name: str=None, start_time: datetime=None, state: str=None):
        """ElasticPoolDatabaseActivityProperties - a model defined in OpenAPI

        :param current_elastic_pool_name: The current_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.
        :param current_service_objective: The current_service_objective of this ElasticPoolDatabaseActivityProperties.
        :param database_name: The database_name of this ElasticPoolDatabaseActivityProperties.
        :param end_time: The end_time of this ElasticPoolDatabaseActivityProperties.
        :param error_code: The error_code of this ElasticPoolDatabaseActivityProperties.
        :param error_message: The error_message of this ElasticPoolDatabaseActivityProperties.
        :param error_severity: The error_severity of this ElasticPoolDatabaseActivityProperties.
        :param operation: The operation of this ElasticPoolDatabaseActivityProperties.
        :param operation_id: The operation_id of this ElasticPoolDatabaseActivityProperties.
        :param percent_complete: The percent_complete of this ElasticPoolDatabaseActivityProperties.
        :param requested_elastic_pool_name: The requested_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.
        :param requested_service_objective: The requested_service_objective of this ElasticPoolDatabaseActivityProperties.
        :param server_name: The server_name of this ElasticPoolDatabaseActivityProperties.
        :param start_time: The start_time of this ElasticPoolDatabaseActivityProperties.
        :param state: The state of this ElasticPoolDatabaseActivityProperties.
        """
        self.openapi_types = {
            'current_elastic_pool_name': str,
            'current_service_objective': str,
            'database_name': str,
            'end_time': datetime,
            'error_code': int,
            'error_message': str,
            'error_severity': int,
            'operation': str,
            'operation_id': str,
            'percent_complete': int,
            'requested_elastic_pool_name': str,
            'requested_service_objective': str,
            'server_name': str,
            'start_time': datetime,
            'state': str
        }

        self.attribute_map = {
            'current_elastic_pool_name': 'currentElasticPoolName',
            'current_service_objective': 'currentServiceObjective',
            'database_name': 'databaseName',
            'end_time': 'endTime',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'error_severity': 'errorSeverity',
            'operation': 'operation',
            'operation_id': 'operationId',
            'percent_complete': 'percentComplete',
            'requested_elastic_pool_name': 'requestedElasticPoolName',
            'requested_service_objective': 'requestedServiceObjective',
            'server_name': 'serverName',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._current_elastic_pool_name = current_elastic_pool_name
        self._current_service_objective = current_service_objective
        self._database_name = database_name
        self._end_time = end_time
        self._error_code = error_code
        self._error_message = error_message
        self._error_severity = error_severity
        self._operation = operation
        self._operation_id = operation_id
        self._percent_complete = percent_complete
        self._requested_elastic_pool_name = requested_elastic_pool_name
        self._requested_service_objective = requested_service_objective
        self._server_name = server_name
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticPoolDatabaseActivityProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticPoolDatabaseActivityProperties of this ElasticPoolDatabaseActivityProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_elastic_pool_name(self):
        """Gets the current_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.

        The name of the current elastic pool the database is in if available.

        :return: The current_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._current_elastic_pool_name

    @current_elastic_pool_name.setter
    def current_elastic_pool_name(self, current_elastic_pool_name):
        """Sets the current_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.

        The name of the current elastic pool the database is in if available.

        :param current_elastic_pool_name: The current_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.
        :type current_elastic_pool_name: str
        """

        self._current_elastic_pool_name = current_elastic_pool_name

    @property
    def current_service_objective(self):
        """Gets the current_service_objective of this ElasticPoolDatabaseActivityProperties.

        The name of the current service objective if available.

        :return: The current_service_objective of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._current_service_objective

    @current_service_objective.setter
    def current_service_objective(self, current_service_objective):
        """Sets the current_service_objective of this ElasticPoolDatabaseActivityProperties.

        The name of the current service objective if available.

        :param current_service_objective: The current_service_objective of this ElasticPoolDatabaseActivityProperties.
        :type current_service_objective: str
        """

        self._current_service_objective = current_service_objective

    @property
    def database_name(self):
        """Gets the database_name of this ElasticPoolDatabaseActivityProperties.

        The database name.

        :return: The database_name of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this ElasticPoolDatabaseActivityProperties.

        The database name.

        :param database_name: The database_name of this ElasticPoolDatabaseActivityProperties.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def end_time(self):
        """Gets the end_time of this ElasticPoolDatabaseActivityProperties.

        The time the operation finished (ISO8601 format).

        :return: The end_time of this ElasticPoolDatabaseActivityProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ElasticPoolDatabaseActivityProperties.

        The time the operation finished (ISO8601 format).

        :param end_time: The end_time of this ElasticPoolDatabaseActivityProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def error_code(self):
        """Gets the error_code of this ElasticPoolDatabaseActivityProperties.

        The error code if available.

        :return: The error_code of this ElasticPoolDatabaseActivityProperties.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ElasticPoolDatabaseActivityProperties.

        The error code if available.

        :param error_code: The error_code of this ElasticPoolDatabaseActivityProperties.
        :type error_code: int
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ElasticPoolDatabaseActivityProperties.

        The error message if available.

        :return: The error_message of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ElasticPoolDatabaseActivityProperties.

        The error message if available.

        :param error_message: The error_message of this ElasticPoolDatabaseActivityProperties.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def error_severity(self):
        """Gets the error_severity of this ElasticPoolDatabaseActivityProperties.

        The error severity if available.

        :return: The error_severity of this ElasticPoolDatabaseActivityProperties.
        :rtype: int
        """
        return self._error_severity

    @error_severity.setter
    def error_severity(self, error_severity):
        """Sets the error_severity of this ElasticPoolDatabaseActivityProperties.

        The error severity if available.

        :param error_severity: The error_severity of this ElasticPoolDatabaseActivityProperties.
        :type error_severity: int
        """

        self._error_severity = error_severity

    @property
    def operation(self):
        """Gets the operation of this ElasticPoolDatabaseActivityProperties.

        The operation name.

        :return: The operation of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ElasticPoolDatabaseActivityProperties.

        The operation name.

        :param operation: The operation of this ElasticPoolDatabaseActivityProperties.
        :type operation: str
        """

        self._operation = operation

    @property
    def operation_id(self):
        """Gets the operation_id of this ElasticPoolDatabaseActivityProperties.

        The unique operation ID.

        :return: The operation_id of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this ElasticPoolDatabaseActivityProperties.

        The unique operation ID.

        :param operation_id: The operation_id of this ElasticPoolDatabaseActivityProperties.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def percent_complete(self):
        """Gets the percent_complete of this ElasticPoolDatabaseActivityProperties.

        The percentage complete if available.

        :return: The percent_complete of this ElasticPoolDatabaseActivityProperties.
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this ElasticPoolDatabaseActivityProperties.

        The percentage complete if available.

        :param percent_complete: The percent_complete of this ElasticPoolDatabaseActivityProperties.
        :type percent_complete: int
        """

        self._percent_complete = percent_complete

    @property
    def requested_elastic_pool_name(self):
        """Gets the requested_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.

        The name for the elastic pool the database is moving into if available.

        :return: The requested_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._requested_elastic_pool_name

    @requested_elastic_pool_name.setter
    def requested_elastic_pool_name(self, requested_elastic_pool_name):
        """Sets the requested_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.

        The name for the elastic pool the database is moving into if available.

        :param requested_elastic_pool_name: The requested_elastic_pool_name of this ElasticPoolDatabaseActivityProperties.
        :type requested_elastic_pool_name: str
        """

        self._requested_elastic_pool_name = requested_elastic_pool_name

    @property
    def requested_service_objective(self):
        """Gets the requested_service_objective of this ElasticPoolDatabaseActivityProperties.

        The name of the requested service objective if available.

        :return: The requested_service_objective of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._requested_service_objective

    @requested_service_objective.setter
    def requested_service_objective(self, requested_service_objective):
        """Sets the requested_service_objective of this ElasticPoolDatabaseActivityProperties.

        The name of the requested service objective if available.

        :param requested_service_objective: The requested_service_objective of this ElasticPoolDatabaseActivityProperties.
        :type requested_service_objective: str
        """

        self._requested_service_objective = requested_service_objective

    @property
    def server_name(self):
        """Gets the server_name of this ElasticPoolDatabaseActivityProperties.

        The name of the server the elastic pool is in.

        :return: The server_name of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this ElasticPoolDatabaseActivityProperties.

        The name of the server the elastic pool is in.

        :param server_name: The server_name of this ElasticPoolDatabaseActivityProperties.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def start_time(self):
        """Gets the start_time of this ElasticPoolDatabaseActivityProperties.

        The time the operation started (ISO8601 format).

        :return: The start_time of this ElasticPoolDatabaseActivityProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ElasticPoolDatabaseActivityProperties.

        The time the operation started (ISO8601 format).

        :param start_time: The start_time of this ElasticPoolDatabaseActivityProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this ElasticPoolDatabaseActivityProperties.

        The current state of the operation.

        :return: The state of this ElasticPoolDatabaseActivityProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ElasticPoolDatabaseActivityProperties.

        The current state of the operation.

        :param state: The state of this ElasticPoolDatabaseActivityProperties.
        :type state: str
        """

        self._state = state
