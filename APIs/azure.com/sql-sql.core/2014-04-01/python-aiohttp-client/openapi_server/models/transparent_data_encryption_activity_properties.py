# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransparentDataEncryptionActivityProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percent_complete: float=None, status: str=None):
        """TransparentDataEncryptionActivityProperties - a model defined in OpenAPI

        :param percent_complete: The percent_complete of this TransparentDataEncryptionActivityProperties.
        :param status: The status of this TransparentDataEncryptionActivityProperties.
        """
        self.openapi_types = {
            'percent_complete': float,
            'status': str
        }

        self.attribute_map = {
            'percent_complete': 'percentComplete',
            'status': 'status'
        }

        self._percent_complete = percent_complete
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransparentDataEncryptionActivityProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransparentDataEncryptionActivityProperties of this TransparentDataEncryptionActivityProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percent_complete(self):
        """Gets the percent_complete of this TransparentDataEncryptionActivityProperties.

        The percent complete of the transparent data encryption scan for a database.

        :return: The percent_complete of this TransparentDataEncryptionActivityProperties.
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this TransparentDataEncryptionActivityProperties.

        The percent complete of the transparent data encryption scan for a database.

        :param percent_complete: The percent_complete of this TransparentDataEncryptionActivityProperties.
        :type percent_complete: float
        """

        self._percent_complete = percent_complete

    @property
    def status(self):
        """Gets the status of this TransparentDataEncryptionActivityProperties.

        The status of the database.

        :return: The status of this TransparentDataEncryptionActivityProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransparentDataEncryptionActivityProperties.

        The status of the database.

        :param status: The status of this TransparentDataEncryptionActivityProperties.
        :type status: str
        """
        allowed_values = ["Encrypting", "Decrypting"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
