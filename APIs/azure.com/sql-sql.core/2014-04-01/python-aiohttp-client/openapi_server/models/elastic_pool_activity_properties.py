# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElasticPoolActivityProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elastic_pool_name: str=None, end_time: datetime=None, error_code: int=None, error_message: str=None, error_severity: int=None, operation: str=None, operation_id: str=None, percent_complete: int=None, requested_database_dtu_cap: int=None, requested_database_dtu_guarantee: int=None, requested_database_dtu_max: int=None, requested_database_dtu_min: int=None, requested_dtu: int=None, requested_dtu_guarantee: int=None, requested_elastic_pool_name: str=None, requested_storage_limit_in_gb: int=None, requested_storage_limit_in_mb: int=None, server_name: str=None, start_time: datetime=None, state: str=None):
        """ElasticPoolActivityProperties - a model defined in OpenAPI

        :param elastic_pool_name: The elastic_pool_name of this ElasticPoolActivityProperties.
        :param end_time: The end_time of this ElasticPoolActivityProperties.
        :param error_code: The error_code of this ElasticPoolActivityProperties.
        :param error_message: The error_message of this ElasticPoolActivityProperties.
        :param error_severity: The error_severity of this ElasticPoolActivityProperties.
        :param operation: The operation of this ElasticPoolActivityProperties.
        :param operation_id: The operation_id of this ElasticPoolActivityProperties.
        :param percent_complete: The percent_complete of this ElasticPoolActivityProperties.
        :param requested_database_dtu_cap: The requested_database_dtu_cap of this ElasticPoolActivityProperties.
        :param requested_database_dtu_guarantee: The requested_database_dtu_guarantee of this ElasticPoolActivityProperties.
        :param requested_database_dtu_max: The requested_database_dtu_max of this ElasticPoolActivityProperties.
        :param requested_database_dtu_min: The requested_database_dtu_min of this ElasticPoolActivityProperties.
        :param requested_dtu: The requested_dtu of this ElasticPoolActivityProperties.
        :param requested_dtu_guarantee: The requested_dtu_guarantee of this ElasticPoolActivityProperties.
        :param requested_elastic_pool_name: The requested_elastic_pool_name of this ElasticPoolActivityProperties.
        :param requested_storage_limit_in_gb: The requested_storage_limit_in_gb of this ElasticPoolActivityProperties.
        :param requested_storage_limit_in_mb: The requested_storage_limit_in_mb of this ElasticPoolActivityProperties.
        :param server_name: The server_name of this ElasticPoolActivityProperties.
        :param start_time: The start_time of this ElasticPoolActivityProperties.
        :param state: The state of this ElasticPoolActivityProperties.
        """
        self.openapi_types = {
            'elastic_pool_name': str,
            'end_time': datetime,
            'error_code': int,
            'error_message': str,
            'error_severity': int,
            'operation': str,
            'operation_id': str,
            'percent_complete': int,
            'requested_database_dtu_cap': int,
            'requested_database_dtu_guarantee': int,
            'requested_database_dtu_max': int,
            'requested_database_dtu_min': int,
            'requested_dtu': int,
            'requested_dtu_guarantee': int,
            'requested_elastic_pool_name': str,
            'requested_storage_limit_in_gb': int,
            'requested_storage_limit_in_mb': int,
            'server_name': str,
            'start_time': datetime,
            'state': str
        }

        self.attribute_map = {
            'elastic_pool_name': 'elasticPoolName',
            'end_time': 'endTime',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'error_severity': 'errorSeverity',
            'operation': 'operation',
            'operation_id': 'operationId',
            'percent_complete': 'percentComplete',
            'requested_database_dtu_cap': 'requestedDatabaseDtuCap',
            'requested_database_dtu_guarantee': 'requestedDatabaseDtuGuarantee',
            'requested_database_dtu_max': 'requestedDatabaseDtuMax',
            'requested_database_dtu_min': 'requestedDatabaseDtuMin',
            'requested_dtu': 'requestedDtu',
            'requested_dtu_guarantee': 'requestedDtuGuarantee',
            'requested_elastic_pool_name': 'requestedElasticPoolName',
            'requested_storage_limit_in_gb': 'requestedStorageLimitInGB',
            'requested_storage_limit_in_mb': 'requestedStorageLimitInMB',
            'server_name': 'serverName',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._elastic_pool_name = elastic_pool_name
        self._end_time = end_time
        self._error_code = error_code
        self._error_message = error_message
        self._error_severity = error_severity
        self._operation = operation
        self._operation_id = operation_id
        self._percent_complete = percent_complete
        self._requested_database_dtu_cap = requested_database_dtu_cap
        self._requested_database_dtu_guarantee = requested_database_dtu_guarantee
        self._requested_database_dtu_max = requested_database_dtu_max
        self._requested_database_dtu_min = requested_database_dtu_min
        self._requested_dtu = requested_dtu
        self._requested_dtu_guarantee = requested_dtu_guarantee
        self._requested_elastic_pool_name = requested_elastic_pool_name
        self._requested_storage_limit_in_gb = requested_storage_limit_in_gb
        self._requested_storage_limit_in_mb = requested_storage_limit_in_mb
        self._server_name = server_name
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticPoolActivityProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticPoolActivityProperties of this ElasticPoolActivityProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elastic_pool_name(self):
        """Gets the elastic_pool_name of this ElasticPoolActivityProperties.

        The name of the elastic pool.

        :return: The elastic_pool_name of this ElasticPoolActivityProperties.
        :rtype: str
        """
        return self._elastic_pool_name

    @elastic_pool_name.setter
    def elastic_pool_name(self, elastic_pool_name):
        """Sets the elastic_pool_name of this ElasticPoolActivityProperties.

        The name of the elastic pool.

        :param elastic_pool_name: The elastic_pool_name of this ElasticPoolActivityProperties.
        :type elastic_pool_name: str
        """

        self._elastic_pool_name = elastic_pool_name

    @property
    def end_time(self):
        """Gets the end_time of this ElasticPoolActivityProperties.

        The time the operation finished (ISO8601 format).

        :return: The end_time of this ElasticPoolActivityProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ElasticPoolActivityProperties.

        The time the operation finished (ISO8601 format).

        :param end_time: The end_time of this ElasticPoolActivityProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def error_code(self):
        """Gets the error_code of this ElasticPoolActivityProperties.

        The error code if available.

        :return: The error_code of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ElasticPoolActivityProperties.

        The error code if available.

        :param error_code: The error_code of this ElasticPoolActivityProperties.
        :type error_code: int
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ElasticPoolActivityProperties.

        The error message if available.

        :return: The error_message of this ElasticPoolActivityProperties.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ElasticPoolActivityProperties.

        The error message if available.

        :param error_message: The error_message of this ElasticPoolActivityProperties.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def error_severity(self):
        """Gets the error_severity of this ElasticPoolActivityProperties.

        The error severity if available.

        :return: The error_severity of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._error_severity

    @error_severity.setter
    def error_severity(self, error_severity):
        """Sets the error_severity of this ElasticPoolActivityProperties.

        The error severity if available.

        :param error_severity: The error_severity of this ElasticPoolActivityProperties.
        :type error_severity: int
        """

        self._error_severity = error_severity

    @property
    def operation(self):
        """Gets the operation of this ElasticPoolActivityProperties.

        The operation name.

        :return: The operation of this ElasticPoolActivityProperties.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ElasticPoolActivityProperties.

        The operation name.

        :param operation: The operation of this ElasticPoolActivityProperties.
        :type operation: str
        """

        self._operation = operation

    @property
    def operation_id(self):
        """Gets the operation_id of this ElasticPoolActivityProperties.

        The unique operation ID.

        :return: The operation_id of this ElasticPoolActivityProperties.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this ElasticPoolActivityProperties.

        The unique operation ID.

        :param operation_id: The operation_id of this ElasticPoolActivityProperties.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def percent_complete(self):
        """Gets the percent_complete of this ElasticPoolActivityProperties.

        The percentage complete if available.

        :return: The percent_complete of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this ElasticPoolActivityProperties.

        The percentage complete if available.

        :param percent_complete: The percent_complete of this ElasticPoolActivityProperties.
        :type percent_complete: int
        """

        self._percent_complete = percent_complete

    @property
    def requested_database_dtu_cap(self):
        """Gets the requested_database_dtu_cap of this ElasticPoolActivityProperties.

        The requested per database DTU cap.

        :return: The requested_database_dtu_cap of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._requested_database_dtu_cap

    @requested_database_dtu_cap.setter
    def requested_database_dtu_cap(self, requested_database_dtu_cap):
        """Sets the requested_database_dtu_cap of this ElasticPoolActivityProperties.

        The requested per database DTU cap.

        :param requested_database_dtu_cap: The requested_database_dtu_cap of this ElasticPoolActivityProperties.
        :type requested_database_dtu_cap: int
        """

        self._requested_database_dtu_cap = requested_database_dtu_cap

    @property
    def requested_database_dtu_guarantee(self):
        """Gets the requested_database_dtu_guarantee of this ElasticPoolActivityProperties.

        The requested per database DTU guarantee.

        :return: The requested_database_dtu_guarantee of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._requested_database_dtu_guarantee

    @requested_database_dtu_guarantee.setter
    def requested_database_dtu_guarantee(self, requested_database_dtu_guarantee):
        """Sets the requested_database_dtu_guarantee of this ElasticPoolActivityProperties.

        The requested per database DTU guarantee.

        :param requested_database_dtu_guarantee: The requested_database_dtu_guarantee of this ElasticPoolActivityProperties.
        :type requested_database_dtu_guarantee: int
        """

        self._requested_database_dtu_guarantee = requested_database_dtu_guarantee

    @property
    def requested_database_dtu_max(self):
        """Gets the requested_database_dtu_max of this ElasticPoolActivityProperties.

        The requested max DTU per database if available.

        :return: The requested_database_dtu_max of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._requested_database_dtu_max

    @requested_database_dtu_max.setter
    def requested_database_dtu_max(self, requested_database_dtu_max):
        """Sets the requested_database_dtu_max of this ElasticPoolActivityProperties.

        The requested max DTU per database if available.

        :param requested_database_dtu_max: The requested_database_dtu_max of this ElasticPoolActivityProperties.
        :type requested_database_dtu_max: int
        """

        self._requested_database_dtu_max = requested_database_dtu_max

    @property
    def requested_database_dtu_min(self):
        """Gets the requested_database_dtu_min of this ElasticPoolActivityProperties.

        The requested min DTU per database if available.

        :return: The requested_database_dtu_min of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._requested_database_dtu_min

    @requested_database_dtu_min.setter
    def requested_database_dtu_min(self, requested_database_dtu_min):
        """Sets the requested_database_dtu_min of this ElasticPoolActivityProperties.

        The requested min DTU per database if available.

        :param requested_database_dtu_min: The requested_database_dtu_min of this ElasticPoolActivityProperties.
        :type requested_database_dtu_min: int
        """

        self._requested_database_dtu_min = requested_database_dtu_min

    @property
    def requested_dtu(self):
        """Gets the requested_dtu of this ElasticPoolActivityProperties.

        The requested DTU for the pool if available.

        :return: The requested_dtu of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._requested_dtu

    @requested_dtu.setter
    def requested_dtu(self, requested_dtu):
        """Sets the requested_dtu of this ElasticPoolActivityProperties.

        The requested DTU for the pool if available.

        :param requested_dtu: The requested_dtu of this ElasticPoolActivityProperties.
        :type requested_dtu: int
        """

        self._requested_dtu = requested_dtu

    @property
    def requested_dtu_guarantee(self):
        """Gets the requested_dtu_guarantee of this ElasticPoolActivityProperties.

        The requested DTU guarantee.

        :return: The requested_dtu_guarantee of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._requested_dtu_guarantee

    @requested_dtu_guarantee.setter
    def requested_dtu_guarantee(self, requested_dtu_guarantee):
        """Sets the requested_dtu_guarantee of this ElasticPoolActivityProperties.

        The requested DTU guarantee.

        :param requested_dtu_guarantee: The requested_dtu_guarantee of this ElasticPoolActivityProperties.
        :type requested_dtu_guarantee: int
        """

        self._requested_dtu_guarantee = requested_dtu_guarantee

    @property
    def requested_elastic_pool_name(self):
        """Gets the requested_elastic_pool_name of this ElasticPoolActivityProperties.

        The requested name for the elastic pool if available.

        :return: The requested_elastic_pool_name of this ElasticPoolActivityProperties.
        :rtype: str
        """
        return self._requested_elastic_pool_name

    @requested_elastic_pool_name.setter
    def requested_elastic_pool_name(self, requested_elastic_pool_name):
        """Sets the requested_elastic_pool_name of this ElasticPoolActivityProperties.

        The requested name for the elastic pool if available.

        :param requested_elastic_pool_name: The requested_elastic_pool_name of this ElasticPoolActivityProperties.
        :type requested_elastic_pool_name: str
        """

        self._requested_elastic_pool_name = requested_elastic_pool_name

    @property
    def requested_storage_limit_in_gb(self):
        """Gets the requested_storage_limit_in_gb of this ElasticPoolActivityProperties.

        The requested storage limit for the pool in GB if available.

        :return: The requested_storage_limit_in_gb of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._requested_storage_limit_in_gb

    @requested_storage_limit_in_gb.setter
    def requested_storage_limit_in_gb(self, requested_storage_limit_in_gb):
        """Sets the requested_storage_limit_in_gb of this ElasticPoolActivityProperties.

        The requested storage limit for the pool in GB if available.

        :param requested_storage_limit_in_gb: The requested_storage_limit_in_gb of this ElasticPoolActivityProperties.
        :type requested_storage_limit_in_gb: int
        """

        self._requested_storage_limit_in_gb = requested_storage_limit_in_gb

    @property
    def requested_storage_limit_in_mb(self):
        """Gets the requested_storage_limit_in_mb of this ElasticPoolActivityProperties.

        The requested storage limit in MB.

        :return: The requested_storage_limit_in_mb of this ElasticPoolActivityProperties.
        :rtype: int
        """
        return self._requested_storage_limit_in_mb

    @requested_storage_limit_in_mb.setter
    def requested_storage_limit_in_mb(self, requested_storage_limit_in_mb):
        """Sets the requested_storage_limit_in_mb of this ElasticPoolActivityProperties.

        The requested storage limit in MB.

        :param requested_storage_limit_in_mb: The requested_storage_limit_in_mb of this ElasticPoolActivityProperties.
        :type requested_storage_limit_in_mb: int
        """

        self._requested_storage_limit_in_mb = requested_storage_limit_in_mb

    @property
    def server_name(self):
        """Gets the server_name of this ElasticPoolActivityProperties.

        The name of the server the elastic pool is in.

        :return: The server_name of this ElasticPoolActivityProperties.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this ElasticPoolActivityProperties.

        The name of the server the elastic pool is in.

        :param server_name: The server_name of this ElasticPoolActivityProperties.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def start_time(self):
        """Gets the start_time of this ElasticPoolActivityProperties.

        The time the operation started (ISO8601 format).

        :return: The start_time of this ElasticPoolActivityProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ElasticPoolActivityProperties.

        The time the operation started (ISO8601 format).

        :param start_time: The start_time of this ElasticPoolActivityProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this ElasticPoolActivityProperties.

        The current state of the operation.

        :return: The state of this ElasticPoolActivityProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ElasticPoolActivityProperties.

        The current state of the operation.

        :param state: The state of this ElasticPoolActivityProperties.
        :type state: str
        """

        self._state = state
