/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ElasticPoolDatabaseActivityProperties model module.
 * @module model/ElasticPoolDatabaseActivityProperties
 * @version 2014-04-01
 */
class ElasticPoolDatabaseActivityProperties {
    /**
     * Constructs a new <code>ElasticPoolDatabaseActivityProperties</code>.
     * Represents the properties of an elastic pool database activity.
     * @alias module:model/ElasticPoolDatabaseActivityProperties
     */
    constructor() { 
        
        ElasticPoolDatabaseActivityProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElasticPoolDatabaseActivityProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElasticPoolDatabaseActivityProperties} obj Optional instance to populate.
     * @return {module:model/ElasticPoolDatabaseActivityProperties} The populated <code>ElasticPoolDatabaseActivityProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElasticPoolDatabaseActivityProperties();

            if (data.hasOwnProperty('currentElasticPoolName')) {
                obj['currentElasticPoolName'] = ApiClient.convertToType(data['currentElasticPoolName'], 'String');
            }
            if (data.hasOwnProperty('currentServiceObjective')) {
                obj['currentServiceObjective'] = ApiClient.convertToType(data['currentServiceObjective'], 'String');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'Number');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('errorSeverity')) {
                obj['errorSeverity'] = ApiClient.convertToType(data['errorSeverity'], 'Number');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('percentComplete')) {
                obj['percentComplete'] = ApiClient.convertToType(data['percentComplete'], 'Number');
            }
            if (data.hasOwnProperty('requestedElasticPoolName')) {
                obj['requestedElasticPoolName'] = ApiClient.convertToType(data['requestedElasticPoolName'], 'String');
            }
            if (data.hasOwnProperty('requestedServiceObjective')) {
                obj['requestedServiceObjective'] = ApiClient.convertToType(data['requestedServiceObjective'], 'String');
            }
            if (data.hasOwnProperty('serverName')) {
                obj['serverName'] = ApiClient.convertToType(data['serverName'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElasticPoolDatabaseActivityProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElasticPoolDatabaseActivityProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currentElasticPoolName'] && !(typeof data['currentElasticPoolName'] === 'string' || data['currentElasticPoolName'] instanceof String)) {
            throw new Error("Expected the field `currentElasticPoolName` to be a primitive type in the JSON string but got " + data['currentElasticPoolName']);
        }
        // ensure the json data is a string
        if (data['currentServiceObjective'] && !(typeof data['currentServiceObjective'] === 'string' || data['currentServiceObjective'] instanceof String)) {
            throw new Error("Expected the field `currentServiceObjective` to be a primitive type in the JSON string but got " + data['currentServiceObjective']);
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        // ensure the json data is a string
        if (data['requestedElasticPoolName'] && !(typeof data['requestedElasticPoolName'] === 'string' || data['requestedElasticPoolName'] instanceof String)) {
            throw new Error("Expected the field `requestedElasticPoolName` to be a primitive type in the JSON string but got " + data['requestedElasticPoolName']);
        }
        // ensure the json data is a string
        if (data['requestedServiceObjective'] && !(typeof data['requestedServiceObjective'] === 'string' || data['requestedServiceObjective'] instanceof String)) {
            throw new Error("Expected the field `requestedServiceObjective` to be a primitive type in the JSON string but got " + data['requestedServiceObjective']);
        }
        // ensure the json data is a string
        if (data['serverName'] && !(typeof data['serverName'] === 'string' || data['serverName'] instanceof String)) {
            throw new Error("Expected the field `serverName` to be a primitive type in the JSON string but got " + data['serverName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The name of the current elastic pool the database is in if available.
 * @member {String} currentElasticPoolName
 */
ElasticPoolDatabaseActivityProperties.prototype['currentElasticPoolName'] = undefined;

/**
 * The name of the current service objective if available.
 * @member {String} currentServiceObjective
 */
ElasticPoolDatabaseActivityProperties.prototype['currentServiceObjective'] = undefined;

/**
 * The database name.
 * @member {String} databaseName
 */
ElasticPoolDatabaseActivityProperties.prototype['databaseName'] = undefined;

/**
 * The time the operation finished (ISO8601 format).
 * @member {Date} endTime
 */
ElasticPoolDatabaseActivityProperties.prototype['endTime'] = undefined;

/**
 * The error code if available.
 * @member {Number} errorCode
 */
ElasticPoolDatabaseActivityProperties.prototype['errorCode'] = undefined;

/**
 * The error message if available.
 * @member {String} errorMessage
 */
ElasticPoolDatabaseActivityProperties.prototype['errorMessage'] = undefined;

/**
 * The error severity if available.
 * @member {Number} errorSeverity
 */
ElasticPoolDatabaseActivityProperties.prototype['errorSeverity'] = undefined;

/**
 * The operation name.
 * @member {String} operation
 */
ElasticPoolDatabaseActivityProperties.prototype['operation'] = undefined;

/**
 * The unique operation ID.
 * @member {String} operationId
 */
ElasticPoolDatabaseActivityProperties.prototype['operationId'] = undefined;

/**
 * The percentage complete if available.
 * @member {Number} percentComplete
 */
ElasticPoolDatabaseActivityProperties.prototype['percentComplete'] = undefined;

/**
 * The name for the elastic pool the database is moving into if available.
 * @member {String} requestedElasticPoolName
 */
ElasticPoolDatabaseActivityProperties.prototype['requestedElasticPoolName'] = undefined;

/**
 * The name of the requested service objective if available.
 * @member {String} requestedServiceObjective
 */
ElasticPoolDatabaseActivityProperties.prototype['requestedServiceObjective'] = undefined;

/**
 * The name of the server the elastic pool is in.
 * @member {String} serverName
 */
ElasticPoolDatabaseActivityProperties.prototype['serverName'] = undefined;

/**
 * The time the operation started (ISO8601 format).
 * @member {Date} startTime
 */
ElasticPoolDatabaseActivityProperties.prototype['startTime'] = undefined;

/**
 * The current state of the operation.
 * @member {String} state
 */
ElasticPoolDatabaseActivityProperties.prototype['state'] = undefined;






export default ElasticPoolDatabaseActivityProperties;

