/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SloUsageMetric model module.
 * @module model/SloUsageMetric
 * @version 2014-04-01
 */
class SloUsageMetric {
    /**
     * Constructs a new <code>SloUsageMetric</code>.
     * A Slo Usage Metric.
     * @alias module:model/SloUsageMetric
     */
    constructor() { 
        
        SloUsageMetric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SloUsageMetric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SloUsageMetric} obj Optional instance to populate.
     * @return {module:model/SloUsageMetric} The populated <code>SloUsageMetric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SloUsageMetric();

            if (data.hasOwnProperty('inRangeTimeRatio')) {
                obj['inRangeTimeRatio'] = ApiClient.convertToType(data['inRangeTimeRatio'], 'Number');
            }
            if (data.hasOwnProperty('serviceLevelObjective')) {
                obj['serviceLevelObjective'] = ApiClient.convertToType(data['serviceLevelObjective'], 'String');
            }
            if (data.hasOwnProperty('serviceLevelObjectiveId')) {
                obj['serviceLevelObjectiveId'] = ApiClient.convertToType(data['serviceLevelObjectiveId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SloUsageMetric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SloUsageMetric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['serviceLevelObjective'] && !(typeof data['serviceLevelObjective'] === 'string' || data['serviceLevelObjective'] instanceof String)) {
            throw new Error("Expected the field `serviceLevelObjective` to be a primitive type in the JSON string but got " + data['serviceLevelObjective']);
        }
        // ensure the json data is a string
        if (data['serviceLevelObjectiveId'] && !(typeof data['serviceLevelObjectiveId'] === 'string' || data['serviceLevelObjectiveId'] instanceof String)) {
            throw new Error("Expected the field `serviceLevelObjectiveId` to be a primitive type in the JSON string but got " + data['serviceLevelObjectiveId']);
        }

        return true;
    }


}



/**
 * Gets or sets inRangeTimeRatio for SLO usage metric.
 * @member {Number} inRangeTimeRatio
 */
SloUsageMetric.prototype['inRangeTimeRatio'] = undefined;

/**
 * The serviceLevelObjective for SLO usage metric.
 * @member {module:model/SloUsageMetric.ServiceLevelObjectiveEnum} serviceLevelObjective
 */
SloUsageMetric.prototype['serviceLevelObjective'] = undefined;

/**
 * The serviceLevelObjectiveId for SLO usage metric.
 * @member {String} serviceLevelObjectiveId
 */
SloUsageMetric.prototype['serviceLevelObjectiveId'] = undefined;





/**
 * Allowed values for the <code>serviceLevelObjective</code> property.
 * @enum {String}
 * @readonly
 */
SloUsageMetric['ServiceLevelObjectiveEnum'] = {

    /**
     * value: "System"
     * @const
     */
    "System": "System",

    /**
     * value: "System0"
     * @const
     */
    "System0": "System0",

    /**
     * value: "System1"
     * @const
     */
    "System1": "System1",

    /**
     * value: "System2"
     * @const
     */
    "System2": "System2",

    /**
     * value: "System3"
     * @const
     */
    "System3": "System3",

    /**
     * value: "System4"
     * @const
     */
    "System4": "System4",

    /**
     * value: "System2L"
     * @const
     */
    "System2L": "System2L",

    /**
     * value: "System3L"
     * @const
     */
    "System3L": "System3L",

    /**
     * value: "System4L"
     * @const
     */
    "System4L": "System4L",

    /**
     * value: "Free"
     * @const
     */
    "Free": "Free",

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic",

    /**
     * value: "S0"
     * @const
     */
    "S0": "S0",

    /**
     * value: "S1"
     * @const
     */
    "S1": "S1",

    /**
     * value: "S2"
     * @const
     */
    "S2": "S2",

    /**
     * value: "S3"
     * @const
     */
    "S3": "S3",

    /**
     * value: "S4"
     * @const
     */
    "S4": "S4",

    /**
     * value: "S6"
     * @const
     */
    "S6": "S6",

    /**
     * value: "S7"
     * @const
     */
    "S7": "S7",

    /**
     * value: "S9"
     * @const
     */
    "S9": "S9",

    /**
     * value: "S12"
     * @const
     */
    "S12": "S12",

    /**
     * value: "P1"
     * @const
     */
    "P1": "P1",

    /**
     * value: "P2"
     * @const
     */
    "P2": "P2",

    /**
     * value: "P3"
     * @const
     */
    "P3": "P3",

    /**
     * value: "P4"
     * @const
     */
    "P4": "P4",

    /**
     * value: "P6"
     * @const
     */
    "P6": "P6",

    /**
     * value: "P11"
     * @const
     */
    "P11": "P11",

    /**
     * value: "P15"
     * @const
     */
    "P15": "P15",

    /**
     * value: "PRS1"
     * @const
     */
    "PRS1": "PRS1",

    /**
     * value: "PRS2"
     * @const
     */
    "PRS2": "PRS2",

    /**
     * value: "PRS4"
     * @const
     */
    "PRS4": "PRS4",

    /**
     * value: "PRS6"
     * @const
     */
    "PRS6": "PRS6",

    /**
     * value: "DW100"
     * @const
     */
    "DW100": "DW100",

    /**
     * value: "DW200"
     * @const
     */
    "DW200": "DW200",

    /**
     * value: "DW300"
     * @const
     */
    "DW300": "DW300",

    /**
     * value: "DW400"
     * @const
     */
    "DW400": "DW400",

    /**
     * value: "DW500"
     * @const
     */
    "DW500": "DW500",

    /**
     * value: "DW600"
     * @const
     */
    "DW600": "DW600",

    /**
     * value: "DW1000"
     * @const
     */
    "DW1000": "DW1000",

    /**
     * value: "DW1200"
     * @const
     */
    "DW1200": "DW1200",

    /**
     * value: "DW1000c"
     * @const
     */
    "DW1000c": "DW1000c",

    /**
     * value: "DW1500"
     * @const
     */
    "DW1500": "DW1500",

    /**
     * value: "DW1500c"
     * @const
     */
    "DW1500c": "DW1500c",

    /**
     * value: "DW2000"
     * @const
     */
    "DW2000": "DW2000",

    /**
     * value: "DW2000c"
     * @const
     */
    "DW2000c": "DW2000c",

    /**
     * value: "DW3000"
     * @const
     */
    "DW3000": "DW3000",

    /**
     * value: "DW2500c"
     * @const
     */
    "DW2500c": "DW2500c",

    /**
     * value: "DW3000c"
     * @const
     */
    "DW3000c": "DW3000c",

    /**
     * value: "DW6000"
     * @const
     */
    "DW6000": "DW6000",

    /**
     * value: "DW5000c"
     * @const
     */
    "DW5000c": "DW5000c",

    /**
     * value: "DW6000c"
     * @const
     */
    "DW6000c": "DW6000c",

    /**
     * value: "DW7500c"
     * @const
     */
    "DW7500c": "DW7500c",

    /**
     * value: "DW10000c"
     * @const
     */
    "DW10000c": "DW10000c",

    /**
     * value: "DW15000c"
     * @const
     */
    "DW15000c": "DW15000c",

    /**
     * value: "DW30000c"
     * @const
     */
    "DW30000c": "DW30000c",

    /**
     * value: "DS100"
     * @const
     */
    "DS100": "DS100",

    /**
     * value: "DS200"
     * @const
     */
    "DS200": "DS200",

    /**
     * value: "DS300"
     * @const
     */
    "DS300": "DS300",

    /**
     * value: "DS400"
     * @const
     */
    "DS400": "DS400",

    /**
     * value: "DS500"
     * @const
     */
    "DS500": "DS500",

    /**
     * value: "DS600"
     * @const
     */
    "DS600": "DS600",

    /**
     * value: "DS1000"
     * @const
     */
    "DS1000": "DS1000",

    /**
     * value: "DS1200"
     * @const
     */
    "DS1200": "DS1200",

    /**
     * value: "DS1500"
     * @const
     */
    "DS1500": "DS1500",

    /**
     * value: "DS2000"
     * @const
     */
    "DS2000": "DS2000",

    /**
     * value: "ElasticPool"
     * @const
     */
    "ElasticPool": "ElasticPool"
};



export default SloUsageMetric;

