/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Slo Usage Metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:43.820756-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SloUsageMetric {
  public static final String SERIALIZED_NAME_IN_RANGE_TIME_RATIO = "inRangeTimeRatio";
  @SerializedName(SERIALIZED_NAME_IN_RANGE_TIME_RATIO)
  private Double inRangeTimeRatio;

  /**
   * The serviceLevelObjective for SLO usage metric.
   */
  @JsonAdapter(ServiceLevelObjectiveEnum.Adapter.class)
  public enum ServiceLevelObjectiveEnum {
    SYSTEM("System"),
    
    SYSTEM0("System0"),
    
    SYSTEM1("System1"),
    
    SYSTEM2("System2"),
    
    SYSTEM3("System3"),
    
    SYSTEM4("System4"),
    
    SYSTEM2_L("System2L"),
    
    SYSTEM3_L("System3L"),
    
    SYSTEM4_L("System4L"),
    
    FREE("Free"),
    
    BASIC("Basic"),
    
    S0("S0"),
    
    S1("S1"),
    
    S2("S2"),
    
    S3("S3"),
    
    S4("S4"),
    
    S6("S6"),
    
    S7("S7"),
    
    S9("S9"),
    
    S12("S12"),
    
    P1("P1"),
    
    P2("P2"),
    
    P3("P3"),
    
    P4("P4"),
    
    P6("P6"),
    
    P11("P11"),
    
    P15("P15"),
    
    PRS1("PRS1"),
    
    PRS2("PRS2"),
    
    PRS4("PRS4"),
    
    PRS6("PRS6"),
    
    DW100("DW100"),
    
    DW200("DW200"),
    
    DW300("DW300"),
    
    DW400("DW400"),
    
    DW500("DW500"),
    
    DW600("DW600"),
    
    DW1000("DW1000"),
    
    DW1200("DW1200"),
    
    DW1000C("DW1000c"),
    
    DW1500("DW1500"),
    
    DW1500C("DW1500c"),
    
    DW2000("DW2000"),
    
    DW2000C("DW2000c"),
    
    DW3000("DW3000"),
    
    DW2500C("DW2500c"),
    
    DW3000C("DW3000c"),
    
    DW6000("DW6000"),
    
    DW5000C("DW5000c"),
    
    DW6000C("DW6000c"),
    
    DW7500C("DW7500c"),
    
    DW10000C("DW10000c"),
    
    DW15000C("DW15000c"),
    
    DW30000C("DW30000c"),
    
    DS100("DS100"),
    
    DS200("DS200"),
    
    DS300("DS300"),
    
    DS400("DS400"),
    
    DS500("DS500"),
    
    DS600("DS600"),
    
    DS1000("DS1000"),
    
    DS1200("DS1200"),
    
    DS1500("DS1500"),
    
    DS2000("DS2000"),
    
    ELASTIC_POOL("ElasticPool");

    private String value;

    ServiceLevelObjectiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceLevelObjectiveEnum fromValue(String value) {
      for (ServiceLevelObjectiveEnum b : ServiceLevelObjectiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceLevelObjectiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceLevelObjectiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceLevelObjectiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceLevelObjectiveEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceLevelObjectiveEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_LEVEL_OBJECTIVE = "serviceLevelObjective";
  @SerializedName(SERIALIZED_NAME_SERVICE_LEVEL_OBJECTIVE)
  private ServiceLevelObjectiveEnum serviceLevelObjective;

  public static final String SERIALIZED_NAME_SERVICE_LEVEL_OBJECTIVE_ID = "serviceLevelObjectiveId";
  @SerializedName(SERIALIZED_NAME_SERVICE_LEVEL_OBJECTIVE_ID)
  private UUID serviceLevelObjectiveId;

  public SloUsageMetric() {
  }

  public SloUsageMetric(
     Double inRangeTimeRatio, 
     ServiceLevelObjectiveEnum serviceLevelObjective, 
     UUID serviceLevelObjectiveId
  ) {
    this();
    this.inRangeTimeRatio = inRangeTimeRatio;
    this.serviceLevelObjective = serviceLevelObjective;
    this.serviceLevelObjectiveId = serviceLevelObjectiveId;
  }

  /**
   * Gets or sets inRangeTimeRatio for SLO usage metric.
   * @return inRangeTimeRatio
   */
  @javax.annotation.Nullable
  public Double getInRangeTimeRatio() {
    return inRangeTimeRatio;
  }



  /**
   * The serviceLevelObjective for SLO usage metric.
   * @return serviceLevelObjective
   */
  @javax.annotation.Nullable
  public ServiceLevelObjectiveEnum getServiceLevelObjective() {
    return serviceLevelObjective;
  }



  /**
   * The serviceLevelObjectiveId for SLO usage metric.
   * @return serviceLevelObjectiveId
   */
  @javax.annotation.Nullable
  public UUID getServiceLevelObjectiveId() {
    return serviceLevelObjectiveId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SloUsageMetric sloUsageMetric = (SloUsageMetric) o;
    return Objects.equals(this.inRangeTimeRatio, sloUsageMetric.inRangeTimeRatio) &&
        Objects.equals(this.serviceLevelObjective, sloUsageMetric.serviceLevelObjective) &&
        Objects.equals(this.serviceLevelObjectiveId, sloUsageMetric.serviceLevelObjectiveId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inRangeTimeRatio, serviceLevelObjective, serviceLevelObjectiveId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SloUsageMetric {\n");
    sb.append("    inRangeTimeRatio: ").append(toIndentedString(inRangeTimeRatio)).append("\n");
    sb.append("    serviceLevelObjective: ").append(toIndentedString(serviceLevelObjective)).append("\n");
    sb.append("    serviceLevelObjectiveId: ").append(toIndentedString(serviceLevelObjectiveId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inRangeTimeRatio");
    openapiFields.add("serviceLevelObjective");
    openapiFields.add("serviceLevelObjectiveId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SloUsageMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SloUsageMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SloUsageMetric is not found in the empty JSON string", SloUsageMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SloUsageMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SloUsageMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("serviceLevelObjective") != null && !jsonObj.get("serviceLevelObjective").isJsonNull()) && !jsonObj.get("serviceLevelObjective").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceLevelObjective` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceLevelObjective").toString()));
      }
      // validate the optional field `serviceLevelObjective`
      if (jsonObj.get("serviceLevelObjective") != null && !jsonObj.get("serviceLevelObjective").isJsonNull()) {
        ServiceLevelObjectiveEnum.validateJsonElement(jsonObj.get("serviceLevelObjective"));
      }
      if ((jsonObj.get("serviceLevelObjectiveId") != null && !jsonObj.get("serviceLevelObjectiveId").isJsonNull()) && !jsonObj.get("serviceLevelObjectiveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceLevelObjectiveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceLevelObjectiveId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SloUsageMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SloUsageMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SloUsageMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SloUsageMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<SloUsageMetric>() {
           @Override
           public void write(JsonWriter out, SloUsageMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SloUsageMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SloUsageMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SloUsageMetric
   * @throws IOException if the JSON string is invalid with respect to SloUsageMetric
   */
  public static SloUsageMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SloUsageMetric.class);
  }

  /**
   * Convert an instance of SloUsageMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

