/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of an elastic pool database activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:43.820756-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticPoolDatabaseActivityProperties {
  public static final String SERIALIZED_NAME_CURRENT_ELASTIC_POOL_NAME = "currentElasticPoolName";
  @SerializedName(SERIALIZED_NAME_CURRENT_ELASTIC_POOL_NAME)
  private String currentElasticPoolName;

  public static final String SERIALIZED_NAME_CURRENT_SERVICE_OBJECTIVE = "currentServiceObjective";
  @SerializedName(SERIALIZED_NAME_CURRENT_SERVICE_OBJECTIVE)
  private String currentServiceObjective;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private Integer errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ERROR_SEVERITY = "errorSeverity";
  @SerializedName(SERIALIZED_NAME_ERROR_SEVERITY)
  private Integer errorSeverity;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private UUID operationId;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_REQUESTED_ELASTIC_POOL_NAME = "requestedElasticPoolName";
  @SerializedName(SERIALIZED_NAME_REQUESTED_ELASTIC_POOL_NAME)
  private String requestedElasticPoolName;

  public static final String SERIALIZED_NAME_REQUESTED_SERVICE_OBJECTIVE = "requestedServiceObjective";
  @SerializedName(SERIALIZED_NAME_REQUESTED_SERVICE_OBJECTIVE)
  private String requestedServiceObjective;

  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public ElasticPoolDatabaseActivityProperties() {
  }

  public ElasticPoolDatabaseActivityProperties(
     String currentElasticPoolName, 
     String currentServiceObjective, 
     String databaseName, 
     OffsetDateTime endTime, 
     Integer errorCode, 
     String errorMessage, 
     Integer errorSeverity, 
     String operation, 
     UUID operationId, 
     Integer percentComplete, 
     String requestedElasticPoolName, 
     String requestedServiceObjective, 
     String serverName, 
     OffsetDateTime startTime, 
     String state
  ) {
    this();
    this.currentElasticPoolName = currentElasticPoolName;
    this.currentServiceObjective = currentServiceObjective;
    this.databaseName = databaseName;
    this.endTime = endTime;
    this.errorCode = errorCode;
    this.errorMessage = errorMessage;
    this.errorSeverity = errorSeverity;
    this.operation = operation;
    this.operationId = operationId;
    this.percentComplete = percentComplete;
    this.requestedElasticPoolName = requestedElasticPoolName;
    this.requestedServiceObjective = requestedServiceObjective;
    this.serverName = serverName;
    this.startTime = startTime;
    this.state = state;
  }

  /**
   * The name of the current elastic pool the database is in if available.
   * @return currentElasticPoolName
   */
  @javax.annotation.Nullable
  public String getCurrentElasticPoolName() {
    return currentElasticPoolName;
  }



  /**
   * The name of the current service objective if available.
   * @return currentServiceObjective
   */
  @javax.annotation.Nullable
  public String getCurrentServiceObjective() {
    return currentServiceObjective;
  }



  /**
   * The database name.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }



  /**
   * The time the operation finished (ISO8601 format).
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  /**
   * The error code if available.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public Integer getErrorCode() {
    return errorCode;
  }



  /**
   * The error message if available.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }



  /**
   * The error severity if available.
   * @return errorSeverity
   */
  @javax.annotation.Nullable
  public Integer getErrorSeverity() {
    return errorSeverity;
  }



  /**
   * The operation name.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }



  /**
   * The unique operation ID.
   * @return operationId
   */
  @javax.annotation.Nullable
  public UUID getOperationId() {
    return operationId;
  }



  /**
   * The percentage complete if available.
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }



  /**
   * The name for the elastic pool the database is moving into if available.
   * @return requestedElasticPoolName
   */
  @javax.annotation.Nullable
  public String getRequestedElasticPoolName() {
    return requestedElasticPoolName;
  }



  /**
   * The name of the requested service objective if available.
   * @return requestedServiceObjective
   */
  @javax.annotation.Nullable
  public String getRequestedServiceObjective() {
    return requestedServiceObjective;
  }



  /**
   * The name of the server the elastic pool is in.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }



  /**
   * The time the operation started (ISO8601 format).
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * The current state of the operation.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticPoolDatabaseActivityProperties elasticPoolDatabaseActivityProperties = (ElasticPoolDatabaseActivityProperties) o;
    return Objects.equals(this.currentElasticPoolName, elasticPoolDatabaseActivityProperties.currentElasticPoolName) &&
        Objects.equals(this.currentServiceObjective, elasticPoolDatabaseActivityProperties.currentServiceObjective) &&
        Objects.equals(this.databaseName, elasticPoolDatabaseActivityProperties.databaseName) &&
        Objects.equals(this.endTime, elasticPoolDatabaseActivityProperties.endTime) &&
        Objects.equals(this.errorCode, elasticPoolDatabaseActivityProperties.errorCode) &&
        Objects.equals(this.errorMessage, elasticPoolDatabaseActivityProperties.errorMessage) &&
        Objects.equals(this.errorSeverity, elasticPoolDatabaseActivityProperties.errorSeverity) &&
        Objects.equals(this.operation, elasticPoolDatabaseActivityProperties.operation) &&
        Objects.equals(this.operationId, elasticPoolDatabaseActivityProperties.operationId) &&
        Objects.equals(this.percentComplete, elasticPoolDatabaseActivityProperties.percentComplete) &&
        Objects.equals(this.requestedElasticPoolName, elasticPoolDatabaseActivityProperties.requestedElasticPoolName) &&
        Objects.equals(this.requestedServiceObjective, elasticPoolDatabaseActivityProperties.requestedServiceObjective) &&
        Objects.equals(this.serverName, elasticPoolDatabaseActivityProperties.serverName) &&
        Objects.equals(this.startTime, elasticPoolDatabaseActivityProperties.startTime) &&
        Objects.equals(this.state, elasticPoolDatabaseActivityProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentElasticPoolName, currentServiceObjective, databaseName, endTime, errorCode, errorMessage, errorSeverity, operation, operationId, percentComplete, requestedElasticPoolName, requestedServiceObjective, serverName, startTime, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticPoolDatabaseActivityProperties {\n");
    sb.append("    currentElasticPoolName: ").append(toIndentedString(currentElasticPoolName)).append("\n");
    sb.append("    currentServiceObjective: ").append(toIndentedString(currentServiceObjective)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    errorSeverity: ").append(toIndentedString(errorSeverity)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    requestedElasticPoolName: ").append(toIndentedString(requestedElasticPoolName)).append("\n");
    sb.append("    requestedServiceObjective: ").append(toIndentedString(requestedServiceObjective)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentElasticPoolName");
    openapiFields.add("currentServiceObjective");
    openapiFields.add("databaseName");
    openapiFields.add("endTime");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("errorSeverity");
    openapiFields.add("operation");
    openapiFields.add("operationId");
    openapiFields.add("percentComplete");
    openapiFields.add("requestedElasticPoolName");
    openapiFields.add("requestedServiceObjective");
    openapiFields.add("serverName");
    openapiFields.add("startTime");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticPoolDatabaseActivityProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticPoolDatabaseActivityProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticPoolDatabaseActivityProperties is not found in the empty JSON string", ElasticPoolDatabaseActivityProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticPoolDatabaseActivityProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticPoolDatabaseActivityProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentElasticPoolName") != null && !jsonObj.get("currentElasticPoolName").isJsonNull()) && !jsonObj.get("currentElasticPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentElasticPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentElasticPoolName").toString()));
      }
      if ((jsonObj.get("currentServiceObjective") != null && !jsonObj.get("currentServiceObjective").isJsonNull()) && !jsonObj.get("currentServiceObjective").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentServiceObjective` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentServiceObjective").toString()));
      }
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if ((jsonObj.get("requestedElasticPoolName") != null && !jsonObj.get("requestedElasticPoolName").isJsonNull()) && !jsonObj.get("requestedElasticPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedElasticPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedElasticPoolName").toString()));
      }
      if ((jsonObj.get("requestedServiceObjective") != null && !jsonObj.get("requestedServiceObjective").isJsonNull()) && !jsonObj.get("requestedServiceObjective").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedServiceObjective` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedServiceObjective").toString()));
      }
      if ((jsonObj.get("serverName") != null && !jsonObj.get("serverName").isJsonNull()) && !jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticPoolDatabaseActivityProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticPoolDatabaseActivityProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticPoolDatabaseActivityProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticPoolDatabaseActivityProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticPoolDatabaseActivityProperties>() {
           @Override
           public void write(JsonWriter out, ElasticPoolDatabaseActivityProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticPoolDatabaseActivityProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticPoolDatabaseActivityProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticPoolDatabaseActivityProperties
   * @throws IOException if the JSON string is invalid with respect to ElasticPoolDatabaseActivityProperties
   */
  public static ElasticPoolDatabaseActivityProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticPoolDatabaseActivityProperties.class);
  }

  /**
   * Convert an instance of ElasticPoolDatabaseActivityProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

