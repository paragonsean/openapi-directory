/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OperationImpact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of a database recommended index.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:43.820756-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendedIndexProperties {
  /**
   * The proposed index action. You can create a missing index, drop an unused index, or rebuild an existing index to improve its performance.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    CREATE("Create"),
    
    DROP("Drop"),
    
    REBUILD("Rebuild");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<String> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_ESTIMATED_IMPACT = "estimatedImpact";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_IMPACT)
  private List<OperationImpact> estimatedImpact = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_COLUMNS = "includedColumns";
  @SerializedName(SERIALIZED_NAME_INCLUDED_COLUMNS)
  private List<String> includedColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDEX_SCRIPT = "indexScript";
  @SerializedName(SERIALIZED_NAME_INDEX_SCRIPT)
  private String indexScript;

  /**
   * The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE)
   */
  @JsonAdapter(IndexTypeEnum.Adapter.class)
  public enum IndexTypeEnum {
    CLUSTERED("CLUSTERED"),
    
    NONCLUSTERED("NONCLUSTERED"),
    
    COLUMNSTORE("COLUMNSTORE"),
    
    CLUSTERED_COLUMNSTORE("CLUSTERED COLUMNSTORE");

    private String value;

    IndexTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndexTypeEnum fromValue(String value) {
      for (IndexTypeEnum b : IndexTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndexTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndexTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndexTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndexTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndexTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDEX_TYPE = "indexType";
  @SerializedName(SERIALIZED_NAME_INDEX_TYPE)
  private IndexTypeEnum indexType;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_REPORTED_IMPACT = "reportedImpact";
  @SerializedName(SERIALIZED_NAME_REPORTED_IMPACT)
  private List<OperationImpact> reportedImpact = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  /**
   * The current recommendation state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("Active"),
    
    PENDING("Pending"),
    
    EXECUTING("Executing"),
    
    VERIFYING("Verifying"),
    
    PENDING_REVERT("Pending Revert"),
    
    REVERTING("Reverting"),
    
    REVERTED("Reverted"),
    
    IGNORED("Ignored"),
    
    EXPIRED("Expired"),
    
    BLOCKED("Blocked"),
    
    SUCCESS("Success");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public RecommendedIndexProperties() {
  }

  public RecommendedIndexProperties(
     ActionEnum action, 
     List<String> columns, 
     OffsetDateTime created, 
     List<OperationImpact> estimatedImpact, 
     List<String> includedColumns, 
     String indexScript, 
     IndexTypeEnum indexType, 
     OffsetDateTime lastModified, 
     List<OperationImpact> reportedImpact, 
     String schema, 
     StateEnum state, 
     String table
  ) {
    this();
    this.action = action;
    this.columns = columns;
    this.created = created;
    this.estimatedImpact = estimatedImpact;
    this.includedColumns = includedColumns;
    this.indexScript = indexScript;
    this.indexType = indexType;
    this.lastModified = lastModified;
    this.reportedImpact = reportedImpact;
    this.schema = schema;
    this.state = state;
    this.table = table;
  }

  /**
   * The proposed index action. You can create a missing index, drop an unused index, or rebuild an existing index to improve its performance.
   * @return action
   */
  @javax.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }



  /**
   * Columns over which to build index
   * @return columns
   */
  @javax.annotation.Nullable
  public List<String> getColumns() {
    return columns;
  }



  /**
   * The UTC datetime showing when this resource was created (ISO8601 format).
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * The estimated impact of doing recommended index action.
   * @return estimatedImpact
   */
  @javax.annotation.Nullable
  public List<OperationImpact> getEstimatedImpact() {
    return estimatedImpact;
  }



  /**
   * The list of column names to be included in the index
   * @return includedColumns
   */
  @javax.annotation.Nullable
  public List<String> getIncludedColumns() {
    return includedColumns;
  }



  /**
   * The full build index script
   * @return indexScript
   */
  @javax.annotation.Nullable
  public String getIndexScript() {
    return indexScript;
  }



  /**
   * The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE)
   * @return indexType
   */
  @javax.annotation.Nullable
  public IndexTypeEnum getIndexType() {
    return indexType;
  }



  /**
   * The UTC datetime of when was this resource last changed (ISO8601 format).
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }



  /**
   * The values reported after index action is complete.
   * @return reportedImpact
   */
  @javax.annotation.Nullable
  public List<OperationImpact> getReportedImpact() {
    return reportedImpact;
  }



  /**
   * The schema where table to build index over resides
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }



  /**
   * The current recommendation state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * The table on which to build index.
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendedIndexProperties recommendedIndexProperties = (RecommendedIndexProperties) o;
    return Objects.equals(this.action, recommendedIndexProperties.action) &&
        Objects.equals(this.columns, recommendedIndexProperties.columns) &&
        Objects.equals(this.created, recommendedIndexProperties.created) &&
        Objects.equals(this.estimatedImpact, recommendedIndexProperties.estimatedImpact) &&
        Objects.equals(this.includedColumns, recommendedIndexProperties.includedColumns) &&
        Objects.equals(this.indexScript, recommendedIndexProperties.indexScript) &&
        Objects.equals(this.indexType, recommendedIndexProperties.indexType) &&
        Objects.equals(this.lastModified, recommendedIndexProperties.lastModified) &&
        Objects.equals(this.reportedImpact, recommendedIndexProperties.reportedImpact) &&
        Objects.equals(this.schema, recommendedIndexProperties.schema) &&
        Objects.equals(this.state, recommendedIndexProperties.state) &&
        Objects.equals(this.table, recommendedIndexProperties.table);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, columns, created, estimatedImpact, includedColumns, indexScript, indexType, lastModified, reportedImpact, schema, state, table);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendedIndexProperties {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    estimatedImpact: ").append(toIndentedString(estimatedImpact)).append("\n");
    sb.append("    includedColumns: ").append(toIndentedString(includedColumns)).append("\n");
    sb.append("    indexScript: ").append(toIndentedString(indexScript)).append("\n");
    sb.append("    indexType: ").append(toIndentedString(indexType)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    reportedImpact: ").append(toIndentedString(reportedImpact)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("columns");
    openapiFields.add("created");
    openapiFields.add("estimatedImpact");
    openapiFields.add("includedColumns");
    openapiFields.add("indexScript");
    openapiFields.add("indexType");
    openapiFields.add("lastModified");
    openapiFields.add("reportedImpact");
    openapiFields.add("schema");
    openapiFields.add("state");
    openapiFields.add("table");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendedIndexProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendedIndexProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendedIndexProperties is not found in the empty JSON string", RecommendedIndexProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendedIndexProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendedIndexProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull() && !jsonObj.get("columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
      }
      if (jsonObj.get("estimatedImpact") != null && !jsonObj.get("estimatedImpact").isJsonNull()) {
        JsonArray jsonArrayestimatedImpact = jsonObj.getAsJsonArray("estimatedImpact");
        if (jsonArrayestimatedImpact != null) {
          // ensure the json data is an array
          if (!jsonObj.get("estimatedImpact").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `estimatedImpact` to be an array in the JSON string but got `%s`", jsonObj.get("estimatedImpact").toString()));
          }

          // validate the optional field `estimatedImpact` (array)
          for (int i = 0; i < jsonArrayestimatedImpact.size(); i++) {
            OperationImpact.validateJsonElement(jsonArrayestimatedImpact.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedColumns") != null && !jsonObj.get("includedColumns").isJsonNull() && !jsonObj.get("includedColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedColumns` to be an array in the JSON string but got `%s`", jsonObj.get("includedColumns").toString()));
      }
      if ((jsonObj.get("indexScript") != null && !jsonObj.get("indexScript").isJsonNull()) && !jsonObj.get("indexScript").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexScript` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexScript").toString()));
      }
      if ((jsonObj.get("indexType") != null && !jsonObj.get("indexType").isJsonNull()) && !jsonObj.get("indexType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexType").toString()));
      }
      // validate the optional field `indexType`
      if (jsonObj.get("indexType") != null && !jsonObj.get("indexType").isJsonNull()) {
        IndexTypeEnum.validateJsonElement(jsonObj.get("indexType"));
      }
      if (jsonObj.get("reportedImpact") != null && !jsonObj.get("reportedImpact").isJsonNull()) {
        JsonArray jsonArrayreportedImpact = jsonObj.getAsJsonArray("reportedImpact");
        if (jsonArrayreportedImpact != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reportedImpact").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reportedImpact` to be an array in the JSON string but got `%s`", jsonObj.get("reportedImpact").toString()));
          }

          // validate the optional field `reportedImpact` (array)
          for (int i = 0; i < jsonArrayreportedImpact.size(); i++) {
            OperationImpact.validateJsonElement(jsonArrayreportedImpact.get(i));
          };
        }
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) && !jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendedIndexProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendedIndexProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendedIndexProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendedIndexProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendedIndexProperties>() {
           @Override
           public void write(JsonWriter out, RecommendedIndexProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendedIndexProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendedIndexProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendedIndexProperties
   * @throws IOException if the JSON string is invalid with respect to RecommendedIndexProperties
   */
  public static RecommendedIndexProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendedIndexProperties.class);
  }

  /**
   * Convert an instance of RecommendedIndexProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

