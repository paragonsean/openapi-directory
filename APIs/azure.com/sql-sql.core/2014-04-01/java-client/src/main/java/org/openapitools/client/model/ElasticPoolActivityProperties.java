/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of an elastic pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:43.820756-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticPoolActivityProperties {
  public static final String SERIALIZED_NAME_ELASTIC_POOL_NAME = "elasticPoolName";
  @SerializedName(SERIALIZED_NAME_ELASTIC_POOL_NAME)
  private String elasticPoolName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private Integer errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ERROR_SEVERITY = "errorSeverity";
  @SerializedName(SERIALIZED_NAME_ERROR_SEVERITY)
  private Integer errorSeverity;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private UUID operationId;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_REQUESTED_DATABASE_DTU_CAP = "requestedDatabaseDtuCap";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DATABASE_DTU_CAP)
  private Integer requestedDatabaseDtuCap;

  public static final String SERIALIZED_NAME_REQUESTED_DATABASE_DTU_GUARANTEE = "requestedDatabaseDtuGuarantee";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DATABASE_DTU_GUARANTEE)
  private Integer requestedDatabaseDtuGuarantee;

  public static final String SERIALIZED_NAME_REQUESTED_DATABASE_DTU_MAX = "requestedDatabaseDtuMax";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DATABASE_DTU_MAX)
  private Integer requestedDatabaseDtuMax;

  public static final String SERIALIZED_NAME_REQUESTED_DATABASE_DTU_MIN = "requestedDatabaseDtuMin";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DATABASE_DTU_MIN)
  private Integer requestedDatabaseDtuMin;

  public static final String SERIALIZED_NAME_REQUESTED_DTU = "requestedDtu";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DTU)
  private Integer requestedDtu;

  public static final String SERIALIZED_NAME_REQUESTED_DTU_GUARANTEE = "requestedDtuGuarantee";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DTU_GUARANTEE)
  private Integer requestedDtuGuarantee;

  public static final String SERIALIZED_NAME_REQUESTED_ELASTIC_POOL_NAME = "requestedElasticPoolName";
  @SerializedName(SERIALIZED_NAME_REQUESTED_ELASTIC_POOL_NAME)
  private String requestedElasticPoolName;

  public static final String SERIALIZED_NAME_REQUESTED_STORAGE_LIMIT_IN_G_B = "requestedStorageLimitInGB";
  @SerializedName(SERIALIZED_NAME_REQUESTED_STORAGE_LIMIT_IN_G_B)
  private Long requestedStorageLimitInGB;

  public static final String SERIALIZED_NAME_REQUESTED_STORAGE_LIMIT_IN_M_B = "requestedStorageLimitInMB";
  @SerializedName(SERIALIZED_NAME_REQUESTED_STORAGE_LIMIT_IN_M_B)
  private Integer requestedStorageLimitInMB;

  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public ElasticPoolActivityProperties() {
  }

  public ElasticPoolActivityProperties(
     String elasticPoolName, 
     OffsetDateTime endTime, 
     Integer errorCode, 
     String errorMessage, 
     Integer errorSeverity, 
     String operation, 
     UUID operationId, 
     Integer percentComplete, 
     Integer requestedDatabaseDtuCap, 
     Integer requestedDatabaseDtuGuarantee, 
     Integer requestedDatabaseDtuMax, 
     Integer requestedDatabaseDtuMin, 
     Integer requestedDtu, 
     Integer requestedDtuGuarantee, 
     String requestedElasticPoolName, 
     Long requestedStorageLimitInGB, 
     Integer requestedStorageLimitInMB, 
     String serverName, 
     OffsetDateTime startTime, 
     String state
  ) {
    this();
    this.elasticPoolName = elasticPoolName;
    this.endTime = endTime;
    this.errorCode = errorCode;
    this.errorMessage = errorMessage;
    this.errorSeverity = errorSeverity;
    this.operation = operation;
    this.operationId = operationId;
    this.percentComplete = percentComplete;
    this.requestedDatabaseDtuCap = requestedDatabaseDtuCap;
    this.requestedDatabaseDtuGuarantee = requestedDatabaseDtuGuarantee;
    this.requestedDatabaseDtuMax = requestedDatabaseDtuMax;
    this.requestedDatabaseDtuMin = requestedDatabaseDtuMin;
    this.requestedDtu = requestedDtu;
    this.requestedDtuGuarantee = requestedDtuGuarantee;
    this.requestedElasticPoolName = requestedElasticPoolName;
    this.requestedStorageLimitInGB = requestedStorageLimitInGB;
    this.requestedStorageLimitInMB = requestedStorageLimitInMB;
    this.serverName = serverName;
    this.startTime = startTime;
    this.state = state;
  }

  /**
   * The name of the elastic pool.
   * @return elasticPoolName
   */
  @javax.annotation.Nullable
  public String getElasticPoolName() {
    return elasticPoolName;
  }



  /**
   * The time the operation finished (ISO8601 format).
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  /**
   * The error code if available.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public Integer getErrorCode() {
    return errorCode;
  }



  /**
   * The error message if available.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }



  /**
   * The error severity if available.
   * @return errorSeverity
   */
  @javax.annotation.Nullable
  public Integer getErrorSeverity() {
    return errorSeverity;
  }



  /**
   * The operation name.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }



  /**
   * The unique operation ID.
   * @return operationId
   */
  @javax.annotation.Nullable
  public UUID getOperationId() {
    return operationId;
  }



  /**
   * The percentage complete if available.
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }



  /**
   * The requested per database DTU cap.
   * @return requestedDatabaseDtuCap
   */
  @javax.annotation.Nullable
  public Integer getRequestedDatabaseDtuCap() {
    return requestedDatabaseDtuCap;
  }



  /**
   * The requested per database DTU guarantee.
   * @return requestedDatabaseDtuGuarantee
   */
  @javax.annotation.Nullable
  public Integer getRequestedDatabaseDtuGuarantee() {
    return requestedDatabaseDtuGuarantee;
  }



  /**
   * The requested max DTU per database if available.
   * @return requestedDatabaseDtuMax
   */
  @javax.annotation.Nullable
  public Integer getRequestedDatabaseDtuMax() {
    return requestedDatabaseDtuMax;
  }



  /**
   * The requested min DTU per database if available.
   * @return requestedDatabaseDtuMin
   */
  @javax.annotation.Nullable
  public Integer getRequestedDatabaseDtuMin() {
    return requestedDatabaseDtuMin;
  }



  /**
   * The requested DTU for the pool if available.
   * @return requestedDtu
   */
  @javax.annotation.Nullable
  public Integer getRequestedDtu() {
    return requestedDtu;
  }



  /**
   * The requested DTU guarantee.
   * @return requestedDtuGuarantee
   */
  @javax.annotation.Nullable
  public Integer getRequestedDtuGuarantee() {
    return requestedDtuGuarantee;
  }



  /**
   * The requested name for the elastic pool if available.
   * @return requestedElasticPoolName
   */
  @javax.annotation.Nullable
  public String getRequestedElasticPoolName() {
    return requestedElasticPoolName;
  }



  /**
   * The requested storage limit for the pool in GB if available.
   * @return requestedStorageLimitInGB
   */
  @javax.annotation.Nullable
  public Long getRequestedStorageLimitInGB() {
    return requestedStorageLimitInGB;
  }



  /**
   * The requested storage limit in MB.
   * @return requestedStorageLimitInMB
   */
  @javax.annotation.Nullable
  public Integer getRequestedStorageLimitInMB() {
    return requestedStorageLimitInMB;
  }



  /**
   * The name of the server the elastic pool is in.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }



  /**
   * The time the operation started (ISO8601 format).
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * The current state of the operation.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticPoolActivityProperties elasticPoolActivityProperties = (ElasticPoolActivityProperties) o;
    return Objects.equals(this.elasticPoolName, elasticPoolActivityProperties.elasticPoolName) &&
        Objects.equals(this.endTime, elasticPoolActivityProperties.endTime) &&
        Objects.equals(this.errorCode, elasticPoolActivityProperties.errorCode) &&
        Objects.equals(this.errorMessage, elasticPoolActivityProperties.errorMessage) &&
        Objects.equals(this.errorSeverity, elasticPoolActivityProperties.errorSeverity) &&
        Objects.equals(this.operation, elasticPoolActivityProperties.operation) &&
        Objects.equals(this.operationId, elasticPoolActivityProperties.operationId) &&
        Objects.equals(this.percentComplete, elasticPoolActivityProperties.percentComplete) &&
        Objects.equals(this.requestedDatabaseDtuCap, elasticPoolActivityProperties.requestedDatabaseDtuCap) &&
        Objects.equals(this.requestedDatabaseDtuGuarantee, elasticPoolActivityProperties.requestedDatabaseDtuGuarantee) &&
        Objects.equals(this.requestedDatabaseDtuMax, elasticPoolActivityProperties.requestedDatabaseDtuMax) &&
        Objects.equals(this.requestedDatabaseDtuMin, elasticPoolActivityProperties.requestedDatabaseDtuMin) &&
        Objects.equals(this.requestedDtu, elasticPoolActivityProperties.requestedDtu) &&
        Objects.equals(this.requestedDtuGuarantee, elasticPoolActivityProperties.requestedDtuGuarantee) &&
        Objects.equals(this.requestedElasticPoolName, elasticPoolActivityProperties.requestedElasticPoolName) &&
        Objects.equals(this.requestedStorageLimitInGB, elasticPoolActivityProperties.requestedStorageLimitInGB) &&
        Objects.equals(this.requestedStorageLimitInMB, elasticPoolActivityProperties.requestedStorageLimitInMB) &&
        Objects.equals(this.serverName, elasticPoolActivityProperties.serverName) &&
        Objects.equals(this.startTime, elasticPoolActivityProperties.startTime) &&
        Objects.equals(this.state, elasticPoolActivityProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elasticPoolName, endTime, errorCode, errorMessage, errorSeverity, operation, operationId, percentComplete, requestedDatabaseDtuCap, requestedDatabaseDtuGuarantee, requestedDatabaseDtuMax, requestedDatabaseDtuMin, requestedDtu, requestedDtuGuarantee, requestedElasticPoolName, requestedStorageLimitInGB, requestedStorageLimitInMB, serverName, startTime, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticPoolActivityProperties {\n");
    sb.append("    elasticPoolName: ").append(toIndentedString(elasticPoolName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    errorSeverity: ").append(toIndentedString(errorSeverity)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    requestedDatabaseDtuCap: ").append(toIndentedString(requestedDatabaseDtuCap)).append("\n");
    sb.append("    requestedDatabaseDtuGuarantee: ").append(toIndentedString(requestedDatabaseDtuGuarantee)).append("\n");
    sb.append("    requestedDatabaseDtuMax: ").append(toIndentedString(requestedDatabaseDtuMax)).append("\n");
    sb.append("    requestedDatabaseDtuMin: ").append(toIndentedString(requestedDatabaseDtuMin)).append("\n");
    sb.append("    requestedDtu: ").append(toIndentedString(requestedDtu)).append("\n");
    sb.append("    requestedDtuGuarantee: ").append(toIndentedString(requestedDtuGuarantee)).append("\n");
    sb.append("    requestedElasticPoolName: ").append(toIndentedString(requestedElasticPoolName)).append("\n");
    sb.append("    requestedStorageLimitInGB: ").append(toIndentedString(requestedStorageLimitInGB)).append("\n");
    sb.append("    requestedStorageLimitInMB: ").append(toIndentedString(requestedStorageLimitInMB)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("elasticPoolName");
    openapiFields.add("endTime");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("errorSeverity");
    openapiFields.add("operation");
    openapiFields.add("operationId");
    openapiFields.add("percentComplete");
    openapiFields.add("requestedDatabaseDtuCap");
    openapiFields.add("requestedDatabaseDtuGuarantee");
    openapiFields.add("requestedDatabaseDtuMax");
    openapiFields.add("requestedDatabaseDtuMin");
    openapiFields.add("requestedDtu");
    openapiFields.add("requestedDtuGuarantee");
    openapiFields.add("requestedElasticPoolName");
    openapiFields.add("requestedStorageLimitInGB");
    openapiFields.add("requestedStorageLimitInMB");
    openapiFields.add("serverName");
    openapiFields.add("startTime");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticPoolActivityProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticPoolActivityProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticPoolActivityProperties is not found in the empty JSON string", ElasticPoolActivityProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticPoolActivityProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticPoolActivityProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("elasticPoolName") != null && !jsonObj.get("elasticPoolName").isJsonNull()) && !jsonObj.get("elasticPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elasticPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elasticPoolName").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if ((jsonObj.get("requestedElasticPoolName") != null && !jsonObj.get("requestedElasticPoolName").isJsonNull()) && !jsonObj.get("requestedElasticPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedElasticPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedElasticPoolName").toString()));
      }
      if ((jsonObj.get("serverName") != null && !jsonObj.get("serverName").isJsonNull()) && !jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticPoolActivityProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticPoolActivityProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticPoolActivityProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticPoolActivityProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticPoolActivityProperties>() {
           @Override
           public void write(JsonWriter out, ElasticPoolActivityProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticPoolActivityProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticPoolActivityProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticPoolActivityProperties
   * @throws IOException if the JSON string is invalid with respect to ElasticPoolActivityProperties
   */
  public static ElasticPoolActivityProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticPoolActivityProperties.class);
  }

  /**
   * Convert an instance of ElasticPoolActivityProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

