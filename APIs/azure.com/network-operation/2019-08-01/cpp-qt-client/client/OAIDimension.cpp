/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimension::OAIDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimension::OAIDimension() {
    this->initializeModel();
}

OAIDimension::~OAIDimension() {}

void OAIDimension::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_internal_name_isSet = false;
    m_internal_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimension::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_internal_name_isValid = ::OpenAPI::fromJsonValue(m_internal_name, json[QString("internalName")]);
    m_internal_name_isSet = !json[QString("internalName")].isNull() && m_internal_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_internal_name_isSet) {
        obj.insert(QString("internalName"), ::OpenAPI::toJsonValue(m_internal_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIDimension::getDisplayName() const {
    return m_display_name;
}
void OAIDimension::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDimension::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDimension::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDimension::getInternalName() const {
    return m_internal_name;
}
void OAIDimension::setInternalName(const QString &internal_name) {
    m_internal_name = internal_name;
    m_internal_name_isSet = true;
}

bool OAIDimension::is_internal_name_Set() const{
    return m_internal_name_isSet;
}

bool OAIDimension::is_internal_name_Valid() const{
    return m_internal_name_isValid;
}

QString OAIDimension::getName() const {
    return m_name;
}
void OAIDimension::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDimension::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDimension::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
