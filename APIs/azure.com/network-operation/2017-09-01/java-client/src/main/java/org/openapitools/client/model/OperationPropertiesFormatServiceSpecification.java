/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogSpecification;
import org.openapitools.client.model.MetricSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification of the service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:06:48.830346-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationPropertiesFormatServiceSpecification {
  public static final String SERIALIZED_NAME_LOG_SPECIFICATIONS = "logSpecifications";
  @SerializedName(SERIALIZED_NAME_LOG_SPECIFICATIONS)
  private List<LogSpecification> logSpecifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_SPECIFICATIONS = "metricSpecifications";
  @SerializedName(SERIALIZED_NAME_METRIC_SPECIFICATIONS)
  private List<MetricSpecification> metricSpecifications = new ArrayList<>();

  public OperationPropertiesFormatServiceSpecification() {
  }

  public OperationPropertiesFormatServiceSpecification logSpecifications(List<LogSpecification> logSpecifications) {
    this.logSpecifications = logSpecifications;
    return this;
  }

  public OperationPropertiesFormatServiceSpecification addLogSpecificationsItem(LogSpecification logSpecificationsItem) {
    if (this.logSpecifications == null) {
      this.logSpecifications = new ArrayList<>();
    }
    this.logSpecifications.add(logSpecificationsItem);
    return this;
  }

  /**
   * Operation log specification.
   * @return logSpecifications
   */
  @javax.annotation.Nullable
  public List<LogSpecification> getLogSpecifications() {
    return logSpecifications;
  }

  public void setLogSpecifications(List<LogSpecification> logSpecifications) {
    this.logSpecifications = logSpecifications;
  }


  public OperationPropertiesFormatServiceSpecification metricSpecifications(List<MetricSpecification> metricSpecifications) {
    this.metricSpecifications = metricSpecifications;
    return this;
  }

  public OperationPropertiesFormatServiceSpecification addMetricSpecificationsItem(MetricSpecification metricSpecificationsItem) {
    if (this.metricSpecifications == null) {
      this.metricSpecifications = new ArrayList<>();
    }
    this.metricSpecifications.add(metricSpecificationsItem);
    return this;
  }

  /**
   * Operation service specification.
   * @return metricSpecifications
   */
  @javax.annotation.Nullable
  public List<MetricSpecification> getMetricSpecifications() {
    return metricSpecifications;
  }

  public void setMetricSpecifications(List<MetricSpecification> metricSpecifications) {
    this.metricSpecifications = metricSpecifications;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationPropertiesFormatServiceSpecification operationPropertiesFormatServiceSpecification = (OperationPropertiesFormatServiceSpecification) o;
    return Objects.equals(this.logSpecifications, operationPropertiesFormatServiceSpecification.logSpecifications) &&
        Objects.equals(this.metricSpecifications, operationPropertiesFormatServiceSpecification.metricSpecifications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logSpecifications, metricSpecifications);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationPropertiesFormatServiceSpecification {\n");
    sb.append("    logSpecifications: ").append(toIndentedString(logSpecifications)).append("\n");
    sb.append("    metricSpecifications: ").append(toIndentedString(metricSpecifications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logSpecifications");
    openapiFields.add("metricSpecifications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationPropertiesFormatServiceSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationPropertiesFormatServiceSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationPropertiesFormatServiceSpecification is not found in the empty JSON string", OperationPropertiesFormatServiceSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationPropertiesFormatServiceSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationPropertiesFormatServiceSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("logSpecifications") != null && !jsonObj.get("logSpecifications").isJsonNull()) {
        JsonArray jsonArraylogSpecifications = jsonObj.getAsJsonArray("logSpecifications");
        if (jsonArraylogSpecifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logSpecifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logSpecifications` to be an array in the JSON string but got `%s`", jsonObj.get("logSpecifications").toString()));
          }

          // validate the optional field `logSpecifications` (array)
          for (int i = 0; i < jsonArraylogSpecifications.size(); i++) {
            LogSpecification.validateJsonElement(jsonArraylogSpecifications.get(i));
          };
        }
      }
      if (jsonObj.get("metricSpecifications") != null && !jsonObj.get("metricSpecifications").isJsonNull()) {
        JsonArray jsonArraymetricSpecifications = jsonObj.getAsJsonArray("metricSpecifications");
        if (jsonArraymetricSpecifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricSpecifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricSpecifications` to be an array in the JSON string but got `%s`", jsonObj.get("metricSpecifications").toString()));
          }

          // validate the optional field `metricSpecifications` (array)
          for (int i = 0; i < jsonArraymetricSpecifications.size(); i++) {
            MetricSpecification.validateJsonElement(jsonArraymetricSpecifications.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationPropertiesFormatServiceSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationPropertiesFormatServiceSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationPropertiesFormatServiceSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationPropertiesFormatServiceSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationPropertiesFormatServiceSpecification>() {
           @Override
           public void write(JsonWriter out, OperationPropertiesFormatServiceSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationPropertiesFormatServiceSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationPropertiesFormatServiceSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationPropertiesFormatServiceSpecification
   * @throws IOException if the JSON string is invalid with respect to OperationPropertiesFormatServiceSpecification
   */
  public static OperationPropertiesFormatServiceSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationPropertiesFormatServiceSpecification.class);
  }

  /**
   * Convert an instance of OperationPropertiesFormatServiceSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

