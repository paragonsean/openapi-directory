/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Availability;
import org.openapitools.client.model.Dimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of metrics specification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:06:34.220782-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricSpecification {
  public static final String SERIALIZED_NAME_AGGREGATION_TYPE = "aggregationType";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_TYPE)
  private String aggregationType;

  public static final String SERIALIZED_NAME_AVAILABILITIES = "availabilities";
  @SerializedName(SERIALIZED_NAME_AVAILABILITIES)
  private List<Availability> availabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_DESCRIPTION = "displayDescription";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DESCRIPTION)
  private String displayDescription;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_REGIONAL_MDM_ACCOUNT = "enableRegionalMdmAccount";
  @SerializedName(SERIALIZED_NAME_ENABLE_REGIONAL_MDM_ACCOUNT)
  private Boolean enableRegionalMdmAccount;

  public static final String SERIALIZED_NAME_FILL_GAP_WITH_ZERO = "fillGapWithZero";
  @SerializedName(SERIALIZED_NAME_FILL_GAP_WITH_ZERO)
  private Boolean fillGapWithZero;

  public static final String SERIALIZED_NAME_IS_INTERNAL = "isInternal";
  @SerializedName(SERIALIZED_NAME_IS_INTERNAL)
  private Boolean isInternal;

  public static final String SERIALIZED_NAME_METRIC_FILTER_PATTERN = "metricFilterPattern";
  @SerializedName(SERIALIZED_NAME_METRIC_FILTER_PATTERN)
  private String metricFilterPattern;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_ID_DIMENSION_NAME_OVERRIDE = "resourceIdDimensionNameOverride";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID_DIMENSION_NAME_OVERRIDE)
  private String resourceIdDimensionNameOverride;

  public static final String SERIALIZED_NAME_SOURCE_MDM_ACCOUNT = "sourceMdmAccount";
  @SerializedName(SERIALIZED_NAME_SOURCE_MDM_ACCOUNT)
  private String sourceMdmAccount;

  public static final String SERIALIZED_NAME_SOURCE_MDM_NAMESPACE = "sourceMdmNamespace";
  @SerializedName(SERIALIZED_NAME_SOURCE_MDM_NAMESPACE)
  private String sourceMdmNamespace;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public MetricSpecification() {
  }

  public MetricSpecification aggregationType(String aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

  /**
   * The aggregation type.
   * @return aggregationType
   */
  @javax.annotation.Nullable
  public String getAggregationType() {
    return aggregationType;
  }

  public void setAggregationType(String aggregationType) {
    this.aggregationType = aggregationType;
  }


  public MetricSpecification availabilities(List<Availability> availabilities) {
    this.availabilities = availabilities;
    return this;
  }

  public MetricSpecification addAvailabilitiesItem(Availability availabilitiesItem) {
    if (this.availabilities == null) {
      this.availabilities = new ArrayList<>();
    }
    this.availabilities.add(availabilitiesItem);
    return this;
  }

  /**
   * List of availability.
   * @return availabilities
   */
  @javax.annotation.Nullable
  public List<Availability> getAvailabilities() {
    return availabilities;
  }

  public void setAvailabilities(List<Availability> availabilities) {
    this.availabilities = availabilities;
  }


  public MetricSpecification dimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public MetricSpecification addDimensionsItem(Dimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * List of dimensions.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  public MetricSpecification displayDescription(String displayDescription) {
    this.displayDescription = displayDescription;
    return this;
  }

  /**
   * The description of the metric.
   * @return displayDescription
   */
  @javax.annotation.Nullable
  public String getDisplayDescription() {
    return displayDescription;
  }

  public void setDisplayDescription(String displayDescription) {
    this.displayDescription = displayDescription;
  }


  public MetricSpecification displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the metric.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MetricSpecification enableRegionalMdmAccount(Boolean enableRegionalMdmAccount) {
    this.enableRegionalMdmAccount = enableRegionalMdmAccount;
    return this;
  }

  /**
   * Whether regional MDM account enabled.
   * @return enableRegionalMdmAccount
   */
  @javax.annotation.Nullable
  public Boolean getEnableRegionalMdmAccount() {
    return enableRegionalMdmAccount;
  }

  public void setEnableRegionalMdmAccount(Boolean enableRegionalMdmAccount) {
    this.enableRegionalMdmAccount = enableRegionalMdmAccount;
  }


  public MetricSpecification fillGapWithZero(Boolean fillGapWithZero) {
    this.fillGapWithZero = fillGapWithZero;
    return this;
  }

  /**
   * Whether gaps would be filled with zeros.
   * @return fillGapWithZero
   */
  @javax.annotation.Nullable
  public Boolean getFillGapWithZero() {
    return fillGapWithZero;
  }

  public void setFillGapWithZero(Boolean fillGapWithZero) {
    this.fillGapWithZero = fillGapWithZero;
  }


  public MetricSpecification isInternal(Boolean isInternal) {
    this.isInternal = isInternal;
    return this;
  }

  /**
   * Whether the metric is internal.
   * @return isInternal
   */
  @javax.annotation.Nullable
  public Boolean getIsInternal() {
    return isInternal;
  }

  public void setIsInternal(Boolean isInternal) {
    this.isInternal = isInternal;
  }


  public MetricSpecification metricFilterPattern(String metricFilterPattern) {
    this.metricFilterPattern = metricFilterPattern;
    return this;
  }

  /**
   * Pattern for the filter of the metric.
   * @return metricFilterPattern
   */
  @javax.annotation.Nullable
  public String getMetricFilterPattern() {
    return metricFilterPattern;
  }

  public void setMetricFilterPattern(String metricFilterPattern) {
    this.metricFilterPattern = metricFilterPattern;
  }


  public MetricSpecification name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the metric.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MetricSpecification resourceIdDimensionNameOverride(String resourceIdDimensionNameOverride) {
    this.resourceIdDimensionNameOverride = resourceIdDimensionNameOverride;
    return this;
  }

  /**
   * The resource Id dimension name override.
   * @return resourceIdDimensionNameOverride
   */
  @javax.annotation.Nullable
  public String getResourceIdDimensionNameOverride() {
    return resourceIdDimensionNameOverride;
  }

  public void setResourceIdDimensionNameOverride(String resourceIdDimensionNameOverride) {
    this.resourceIdDimensionNameOverride = resourceIdDimensionNameOverride;
  }


  public MetricSpecification sourceMdmAccount(String sourceMdmAccount) {
    this.sourceMdmAccount = sourceMdmAccount;
    return this;
  }

  /**
   * The source MDM account.
   * @return sourceMdmAccount
   */
  @javax.annotation.Nullable
  public String getSourceMdmAccount() {
    return sourceMdmAccount;
  }

  public void setSourceMdmAccount(String sourceMdmAccount) {
    this.sourceMdmAccount = sourceMdmAccount;
  }


  public MetricSpecification sourceMdmNamespace(String sourceMdmNamespace) {
    this.sourceMdmNamespace = sourceMdmNamespace;
    return this;
  }

  /**
   * The source MDM namespace.
   * @return sourceMdmNamespace
   */
  @javax.annotation.Nullable
  public String getSourceMdmNamespace() {
    return sourceMdmNamespace;
  }

  public void setSourceMdmNamespace(String sourceMdmNamespace) {
    this.sourceMdmNamespace = sourceMdmNamespace;
  }


  public MetricSpecification unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Units the metric to be displayed in.
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricSpecification metricSpecification = (MetricSpecification) o;
    return Objects.equals(this.aggregationType, metricSpecification.aggregationType) &&
        Objects.equals(this.availabilities, metricSpecification.availabilities) &&
        Objects.equals(this.dimensions, metricSpecification.dimensions) &&
        Objects.equals(this.displayDescription, metricSpecification.displayDescription) &&
        Objects.equals(this.displayName, metricSpecification.displayName) &&
        Objects.equals(this.enableRegionalMdmAccount, metricSpecification.enableRegionalMdmAccount) &&
        Objects.equals(this.fillGapWithZero, metricSpecification.fillGapWithZero) &&
        Objects.equals(this.isInternal, metricSpecification.isInternal) &&
        Objects.equals(this.metricFilterPattern, metricSpecification.metricFilterPattern) &&
        Objects.equals(this.name, metricSpecification.name) &&
        Objects.equals(this.resourceIdDimensionNameOverride, metricSpecification.resourceIdDimensionNameOverride) &&
        Objects.equals(this.sourceMdmAccount, metricSpecification.sourceMdmAccount) &&
        Objects.equals(this.sourceMdmNamespace, metricSpecification.sourceMdmNamespace) &&
        Objects.equals(this.unit, metricSpecification.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationType, availabilities, dimensions, displayDescription, displayName, enableRegionalMdmAccount, fillGapWithZero, isInternal, metricFilterPattern, name, resourceIdDimensionNameOverride, sourceMdmAccount, sourceMdmNamespace, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricSpecification {\n");
    sb.append("    aggregationType: ").append(toIndentedString(aggregationType)).append("\n");
    sb.append("    availabilities: ").append(toIndentedString(availabilities)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    displayDescription: ").append(toIndentedString(displayDescription)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableRegionalMdmAccount: ").append(toIndentedString(enableRegionalMdmAccount)).append("\n");
    sb.append("    fillGapWithZero: ").append(toIndentedString(fillGapWithZero)).append("\n");
    sb.append("    isInternal: ").append(toIndentedString(isInternal)).append("\n");
    sb.append("    metricFilterPattern: ").append(toIndentedString(metricFilterPattern)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceIdDimensionNameOverride: ").append(toIndentedString(resourceIdDimensionNameOverride)).append("\n");
    sb.append("    sourceMdmAccount: ").append(toIndentedString(sourceMdmAccount)).append("\n");
    sb.append("    sourceMdmNamespace: ").append(toIndentedString(sourceMdmNamespace)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationType");
    openapiFields.add("availabilities");
    openapiFields.add("dimensions");
    openapiFields.add("displayDescription");
    openapiFields.add("displayName");
    openapiFields.add("enableRegionalMdmAccount");
    openapiFields.add("fillGapWithZero");
    openapiFields.add("isInternal");
    openapiFields.add("metricFilterPattern");
    openapiFields.add("name");
    openapiFields.add("resourceIdDimensionNameOverride");
    openapiFields.add("sourceMdmAccount");
    openapiFields.add("sourceMdmNamespace");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricSpecification is not found in the empty JSON string", MetricSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregationType") != null && !jsonObj.get("aggregationType").isJsonNull()) && !jsonObj.get("aggregationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationType").toString()));
      }
      if (jsonObj.get("availabilities") != null && !jsonObj.get("availabilities").isJsonNull()) {
        JsonArray jsonArrayavailabilities = jsonObj.getAsJsonArray("availabilities");
        if (jsonArrayavailabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availabilities` to be an array in the JSON string but got `%s`", jsonObj.get("availabilities").toString()));
          }

          // validate the optional field `availabilities` (array)
          for (int i = 0; i < jsonArrayavailabilities.size(); i++) {
            Availability.validateJsonElement(jsonArrayavailabilities.get(i));
          };
        }
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("displayDescription") != null && !jsonObj.get("displayDescription").isJsonNull()) && !jsonObj.get("displayDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayDescription").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("metricFilterPattern") != null && !jsonObj.get("metricFilterPattern").isJsonNull()) && !jsonObj.get("metricFilterPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricFilterPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricFilterPattern").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resourceIdDimensionNameOverride") != null && !jsonObj.get("resourceIdDimensionNameOverride").isJsonNull()) && !jsonObj.get("resourceIdDimensionNameOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceIdDimensionNameOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceIdDimensionNameOverride").toString()));
      }
      if ((jsonObj.get("sourceMdmAccount") != null && !jsonObj.get("sourceMdmAccount").isJsonNull()) && !jsonObj.get("sourceMdmAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceMdmAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceMdmAccount").toString()));
      }
      if ((jsonObj.get("sourceMdmNamespace") != null && !jsonObj.get("sourceMdmNamespace").isJsonNull()) && !jsonObj.get("sourceMdmNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceMdmNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceMdmNamespace").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricSpecification>() {
           @Override
           public void write(JsonWriter out, MetricSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricSpecification
   * @throws IOException if the JSON string is invalid with respect to MetricSpecification
   */
  public static MetricSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricSpecification.class);
  }

  /**
   * Convert an instance of MetricSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

