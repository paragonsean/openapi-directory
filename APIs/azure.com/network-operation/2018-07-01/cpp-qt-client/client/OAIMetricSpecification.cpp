/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricSpecification::OAIMetricSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricSpecification::OAIMetricSpecification() {
    this->initializeModel();
}

OAIMetricSpecification::~OAIMetricSpecification() {}

void OAIMetricSpecification::initializeModel() {

    m_aggregation_type_isSet = false;
    m_aggregation_type_isValid = false;

    m_availabilities_isSet = false;
    m_availabilities_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_display_description_isSet = false;
    m_display_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_regional_mdm_account_isSet = false;
    m_enable_regional_mdm_account_isValid = false;

    m_fill_gap_with_zero_isSet = false;
    m_fill_gap_with_zero_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_metric_filter_pattern_isSet = false;
    m_metric_filter_pattern_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_id_dimension_name_override_isSet = false;
    m_resource_id_dimension_name_override_isValid = false;

    m_source_mdm_account_isSet = false;
    m_source_mdm_account_isValid = false;

    m_source_mdm_namespace_isSet = false;
    m_source_mdm_namespace_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMetricSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricSpecification::fromJsonObject(QJsonObject json) {

    m_aggregation_type_isValid = ::OpenAPI::fromJsonValue(m_aggregation_type, json[QString("aggregationType")]);
    m_aggregation_type_isSet = !json[QString("aggregationType")].isNull() && m_aggregation_type_isValid;

    m_availabilities_isValid = ::OpenAPI::fromJsonValue(m_availabilities, json[QString("availabilities")]);
    m_availabilities_isSet = !json[QString("availabilities")].isNull() && m_availabilities_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_display_description_isValid = ::OpenAPI::fromJsonValue(m_display_description, json[QString("displayDescription")]);
    m_display_description_isSet = !json[QString("displayDescription")].isNull() && m_display_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enable_regional_mdm_account_isValid = ::OpenAPI::fromJsonValue(m_enable_regional_mdm_account, json[QString("enableRegionalMdmAccount")]);
    m_enable_regional_mdm_account_isSet = !json[QString("enableRegionalMdmAccount")].isNull() && m_enable_regional_mdm_account_isValid;

    m_fill_gap_with_zero_isValid = ::OpenAPI::fromJsonValue(m_fill_gap_with_zero, json[QString("fillGapWithZero")]);
    m_fill_gap_with_zero_isSet = !json[QString("fillGapWithZero")].isNull() && m_fill_gap_with_zero_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_metric_filter_pattern_isValid = ::OpenAPI::fromJsonValue(m_metric_filter_pattern, json[QString("metricFilterPattern")]);
    m_metric_filter_pattern_isSet = !json[QString("metricFilterPattern")].isNull() && m_metric_filter_pattern_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_id_dimension_name_override_isValid = ::OpenAPI::fromJsonValue(m_resource_id_dimension_name_override, json[QString("resourceIdDimensionNameOverride")]);
    m_resource_id_dimension_name_override_isSet = !json[QString("resourceIdDimensionNameOverride")].isNull() && m_resource_id_dimension_name_override_isValid;

    m_source_mdm_account_isValid = ::OpenAPI::fromJsonValue(m_source_mdm_account, json[QString("sourceMdmAccount")]);
    m_source_mdm_account_isSet = !json[QString("sourceMdmAccount")].isNull() && m_source_mdm_account_isValid;

    m_source_mdm_namespace_isValid = ::OpenAPI::fromJsonValue(m_source_mdm_namespace, json[QString("sourceMdmNamespace")]);
    m_source_mdm_namespace_isSet = !json[QString("sourceMdmNamespace")].isNull() && m_source_mdm_namespace_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIMetricSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_type_isSet) {
        obj.insert(QString("aggregationType"), ::OpenAPI::toJsonValue(m_aggregation_type));
    }
    if (m_availabilities.size() > 0) {
        obj.insert(QString("availabilities"), ::OpenAPI::toJsonValue(m_availabilities));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_display_description_isSet) {
        obj.insert(QString("displayDescription"), ::OpenAPI::toJsonValue(m_display_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_regional_mdm_account_isSet) {
        obj.insert(QString("enableRegionalMdmAccount"), ::OpenAPI::toJsonValue(m_enable_regional_mdm_account));
    }
    if (m_fill_gap_with_zero_isSet) {
        obj.insert(QString("fillGapWithZero"), ::OpenAPI::toJsonValue(m_fill_gap_with_zero));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_metric_filter_pattern_isSet) {
        obj.insert(QString("metricFilterPattern"), ::OpenAPI::toJsonValue(m_metric_filter_pattern));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_id_dimension_name_override_isSet) {
        obj.insert(QString("resourceIdDimensionNameOverride"), ::OpenAPI::toJsonValue(m_resource_id_dimension_name_override));
    }
    if (m_source_mdm_account_isSet) {
        obj.insert(QString("sourceMdmAccount"), ::OpenAPI::toJsonValue(m_source_mdm_account));
    }
    if (m_source_mdm_namespace_isSet) {
        obj.insert(QString("sourceMdmNamespace"), ::OpenAPI::toJsonValue(m_source_mdm_namespace));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIMetricSpecification::getAggregationType() const {
    return m_aggregation_type;
}
void OAIMetricSpecification::setAggregationType(const QString &aggregation_type) {
    m_aggregation_type = aggregation_type;
    m_aggregation_type_isSet = true;
}

bool OAIMetricSpecification::is_aggregation_type_Set() const{
    return m_aggregation_type_isSet;
}

bool OAIMetricSpecification::is_aggregation_type_Valid() const{
    return m_aggregation_type_isValid;
}

QList<OAIAvailability> OAIMetricSpecification::getAvailabilities() const {
    return m_availabilities;
}
void OAIMetricSpecification::setAvailabilities(const QList<OAIAvailability> &availabilities) {
    m_availabilities = availabilities;
    m_availabilities_isSet = true;
}

bool OAIMetricSpecification::is_availabilities_Set() const{
    return m_availabilities_isSet;
}

bool OAIMetricSpecification::is_availabilities_Valid() const{
    return m_availabilities_isValid;
}

QList<OAIDimension> OAIMetricSpecification::getDimensions() const {
    return m_dimensions;
}
void OAIMetricSpecification::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricSpecification::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricSpecification::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIMetricSpecification::getDisplayDescription() const {
    return m_display_description;
}
void OAIMetricSpecification::setDisplayDescription(const QString &display_description) {
    m_display_description = display_description;
    m_display_description_isSet = true;
}

bool OAIMetricSpecification::is_display_description_Set() const{
    return m_display_description_isSet;
}

bool OAIMetricSpecification::is_display_description_Valid() const{
    return m_display_description_isValid;
}

QString OAIMetricSpecification::getDisplayName() const {
    return m_display_name;
}
void OAIMetricSpecification::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMetricSpecification::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMetricSpecification::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIMetricSpecification::isEnableRegionalMdmAccount() const {
    return m_enable_regional_mdm_account;
}
void OAIMetricSpecification::setEnableRegionalMdmAccount(const bool &enable_regional_mdm_account) {
    m_enable_regional_mdm_account = enable_regional_mdm_account;
    m_enable_regional_mdm_account_isSet = true;
}

bool OAIMetricSpecification::is_enable_regional_mdm_account_Set() const{
    return m_enable_regional_mdm_account_isSet;
}

bool OAIMetricSpecification::is_enable_regional_mdm_account_Valid() const{
    return m_enable_regional_mdm_account_isValid;
}

bool OAIMetricSpecification::isFillGapWithZero() const {
    return m_fill_gap_with_zero;
}
void OAIMetricSpecification::setFillGapWithZero(const bool &fill_gap_with_zero) {
    m_fill_gap_with_zero = fill_gap_with_zero;
    m_fill_gap_with_zero_isSet = true;
}

bool OAIMetricSpecification::is_fill_gap_with_zero_Set() const{
    return m_fill_gap_with_zero_isSet;
}

bool OAIMetricSpecification::is_fill_gap_with_zero_Valid() const{
    return m_fill_gap_with_zero_isValid;
}

bool OAIMetricSpecification::isIsInternal() const {
    return m_is_internal;
}
void OAIMetricSpecification::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAIMetricSpecification::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAIMetricSpecification::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

QString OAIMetricSpecification::getMetricFilterPattern() const {
    return m_metric_filter_pattern;
}
void OAIMetricSpecification::setMetricFilterPattern(const QString &metric_filter_pattern) {
    m_metric_filter_pattern = metric_filter_pattern;
    m_metric_filter_pattern_isSet = true;
}

bool OAIMetricSpecification::is_metric_filter_pattern_Set() const{
    return m_metric_filter_pattern_isSet;
}

bool OAIMetricSpecification::is_metric_filter_pattern_Valid() const{
    return m_metric_filter_pattern_isValid;
}

QString OAIMetricSpecification::getName() const {
    return m_name;
}
void OAIMetricSpecification::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetricSpecification::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetricSpecification::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMetricSpecification::getResourceIdDimensionNameOverride() const {
    return m_resource_id_dimension_name_override;
}
void OAIMetricSpecification::setResourceIdDimensionNameOverride(const QString &resource_id_dimension_name_override) {
    m_resource_id_dimension_name_override = resource_id_dimension_name_override;
    m_resource_id_dimension_name_override_isSet = true;
}

bool OAIMetricSpecification::is_resource_id_dimension_name_override_Set() const{
    return m_resource_id_dimension_name_override_isSet;
}

bool OAIMetricSpecification::is_resource_id_dimension_name_override_Valid() const{
    return m_resource_id_dimension_name_override_isValid;
}

QString OAIMetricSpecification::getSourceMdmAccount() const {
    return m_source_mdm_account;
}
void OAIMetricSpecification::setSourceMdmAccount(const QString &source_mdm_account) {
    m_source_mdm_account = source_mdm_account;
    m_source_mdm_account_isSet = true;
}

bool OAIMetricSpecification::is_source_mdm_account_Set() const{
    return m_source_mdm_account_isSet;
}

bool OAIMetricSpecification::is_source_mdm_account_Valid() const{
    return m_source_mdm_account_isValid;
}

QString OAIMetricSpecification::getSourceMdmNamespace() const {
    return m_source_mdm_namespace;
}
void OAIMetricSpecification::setSourceMdmNamespace(const QString &source_mdm_namespace) {
    m_source_mdm_namespace = source_mdm_namespace;
    m_source_mdm_namespace_isSet = true;
}

bool OAIMetricSpecification::is_source_mdm_namespace_Set() const{
    return m_source_mdm_namespace_isSet;
}

bool OAIMetricSpecification::is_source_mdm_namespace_Valid() const{
    return m_source_mdm_namespace_isValid;
}

QString OAIMetricSpecification::getUnit() const {
    return m_unit;
}
void OAIMetricSpecification::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetricSpecification::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetricSpecification::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetricSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_regional_mdm_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_gap_with_zero_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_filter_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_dimension_name_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_mdm_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_mdm_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
