/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Cache entity in your Azure API Management deployment. Azure API Management also allows for caching responses in an external Azure Cache for Redis. For more information refer to [External Redis Cache in ApiManagement](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external).
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CacheGet200Response;
import org.openapitools.client.model.CacheListByService200Response;
import org.openapitools.client.model.CacheListByServiceDefaultResponse;
import org.openapitools.client.model.CacheUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CachesApi
 */
@Disabled
public class CachesApiTest {

    private final CachesApi api = new CachesApi();

    /**
     * Creates or updates an External Cache to be used in Api Management instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String cacheId = null;
        String apiVersion = null;
        String subscriptionId = null;
        CacheGet200Response parameters = null;
        String ifMatch = null;
        CacheGet200Response response = api.cacheCreateOrUpdate(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes specific Cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String cacheId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.cacheDelete(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the Cache specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String cacheId = null;
        String apiVersion = null;
        String subscriptionId = null;
        CacheGet200Response response = api.cacheGet(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the Cache specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String cacheId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.cacheGetEntityTag(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of all external Caches in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        Integer $skip = null;
        CacheListByService200Response response = api.cacheListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the details of the cache specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cacheUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String cacheId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        CacheUpdateRequest parameters = null;
        api.cacheUpdate(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
