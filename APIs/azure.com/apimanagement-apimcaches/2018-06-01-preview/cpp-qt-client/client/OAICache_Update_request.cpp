/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Cache entity in your Azure API Management deployment. Azure API Management also allows for caching responses in an external Azure Cache for Redis. For more information refer to [External Redis Cache in ApiManagement](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external).
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICache_Update_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICache_Update_request::OAICache_Update_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICache_Update_request::OAICache_Update_request() {
    this->initializeModel();
}

OAICache_Update_request::~OAICache_Update_request() {}

void OAICache_Update_request::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAICache_Update_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICache_Update_request::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAICache_Update_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICache_Update_request::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAICache_Update_request_properties OAICache_Update_request::getProperties() const {
    return m_properties;
}
void OAICache_Update_request::setProperties(const OAICache_Update_request_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICache_Update_request::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICache_Update_request::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAICache_Update_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICache_Update_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
