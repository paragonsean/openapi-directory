/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Cache entity in your Azure API Management deployment. Azure API Management also allows for caching responses in an external Azure Cache for Redis. For more information refer to [External Redis Cache in ApiManagement](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external).
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICache_ListByService_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICache_ListByService_200_response_value_inner_properties::OAICache_ListByService_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICache_ListByService_200_response_value_inner_properties::OAICache_ListByService_200_response_value_inner_properties() {
    this->initializeModel();
}

OAICache_ListByService_200_response_value_inner_properties::~OAICache_ListByService_200_response_value_inner_properties() {}

void OAICache_ListByService_200_response_value_inner_properties::initializeModel() {

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAICache_ListByService_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICache_ListByService_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("connectionString")]);
    m_connection_string_isSet = !json[QString("connectionString")].isNull() && m_connection_string_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAICache_ListByService_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICache_ListByService_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_string_isSet) {
        obj.insert(QString("connectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAICache_ListByService_200_response_value_inner_properties::getConnectionString() const {
    return m_connection_string;
}
void OAICache_ListByService_200_response_value_inner_properties::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAICache_ListByService_200_response_value_inner_properties::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAICache_ListByService_200_response_value_inner_properties::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QString OAICache_ListByService_200_response_value_inner_properties::getDescription() const {
    return m_description;
}
void OAICache_ListByService_200_response_value_inner_properties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICache_ListByService_200_response_value_inner_properties::is_description_Set() const{
    return m_description_isSet;
}

bool OAICache_ListByService_200_response_value_inner_properties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICache_ListByService_200_response_value_inner_properties::getResourceId() const {
    return m_resource_id;
}
void OAICache_ListByService_200_response_value_inner_properties::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICache_ListByService_200_response_value_inner_properties::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICache_ListByService_200_response_value_inner_properties::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAICache_ListByService_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICache_ListByService_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_string_isValid && true;
}

} // namespace OpenAPI
