/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Cache entity in your Azure API Management deployment. Azure API Management also allows for caching responses in an external Azure Cache for Redis. For more information refer to [External Redis Cache in ApiManagement](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external).
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICache_ListByService_default_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICache_ListByService_default_response::OAICache_ListByService_default_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICache_ListByService_default_response::OAICache_ListByService_default_response() {
    this->initializeModel();
}

OAICache_ListByService_default_response::~OAICache_ListByService_default_response() {}

void OAICache_ListByService_default_response::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAICache_ListByService_default_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICache_ListByService_default_response::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAICache_ListByService_default_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICache_ListByService_default_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAICache_ListByService_default_response_error OAICache_ListByService_default_response::getError() const {
    return m_error;
}
void OAICache_ListByService_default_response::setError(const OAICache_ListByService_default_response_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICache_ListByService_default_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAICache_ListByService_default_response::is_error_Valid() const{
    return m_error_isValid;
}

bool OAICache_ListByService_default_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICache_ListByService_default_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
