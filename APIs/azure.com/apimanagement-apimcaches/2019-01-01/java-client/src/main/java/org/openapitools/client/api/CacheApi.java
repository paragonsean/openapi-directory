/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Cache entity in your Azure API Management deployment. Azure API Management also allows for caching responses in an external Azure Cache for Redis. For more information refer to [External Redis Cache in ApiManagement](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external).
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CacheGet200Response;
import org.openapitools.client.model.CacheListByService200Response;
import org.openapitools.client.model.CacheListByServiceDefaultResponse;
import org.openapitools.client.model.CacheUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CacheApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CacheApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CacheApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cacheCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create or Update parameters. (required)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cache details were successfully updated. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> The new Cache was successfully added. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * Use an external cache in Azure API Management
     * @see <a href="https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external"> Documentation</a>
     */
    public okhttp3.Call cacheCreateOrUpdateCall(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, CacheGet200Response parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "cacheId" + "}", localVarApiClient.escapeString(cacheId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, CacheGet200Response parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cacheCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling cacheCreateOrUpdate(Async)");
        }

        // verify the required parameter 'cacheId' is set
        if (cacheId == null) {
            throw new ApiException("Missing the required parameter 'cacheId' when calling cacheCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cacheCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cacheCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling cacheCreateOrUpdate(Async)");
        }

        return cacheCreateOrUpdateCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, parameters, ifMatch, _callback);

    }

    /**
     * 
     * Creates or updates an External Cache to be used in Api Management instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create or Update parameters. (required)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @return CacheGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cache details were successfully updated. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> The new Cache was successfully added. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * Use an external cache in Azure API Management
     * @see <a href="https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external"> Documentation</a>
     */
    public CacheGet200Response cacheCreateOrUpdate(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, CacheGet200Response parameters, String ifMatch) throws ApiException {
        ApiResponse<CacheGet200Response> localVarResp = cacheCreateOrUpdateWithHttpInfo(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, parameters, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an External Cache to be used in Api Management instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create or Update parameters. (required)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @return ApiResponse&lt;CacheGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cache details were successfully updated. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> The new Cache was successfully added. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * Use an external cache in Azure API Management
     * @see <a href="https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external"> Documentation</a>
     */
    public ApiResponse<CacheGet200Response> cacheCreateOrUpdateWithHttpInfo(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, CacheGet200Response parameters, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = cacheCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, parameters, ifMatch, null);
        Type localVarReturnType = new TypeToken<CacheGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an External Cache to be used in Api Management instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create or Update parameters. (required)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cache details were successfully updated. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> The new Cache was successfully added. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * Use an external cache in Azure API Management
     * @see <a href="https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external"> Documentation</a>
     */
    public okhttp3.Call cacheCreateOrUpdateAsync(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, CacheGet200Response parameters, String ifMatch, final ApiCallback<CacheGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, parameters, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<CacheGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cache was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cache was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheDeleteCall(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "cacheId" + "}", localVarApiClient.escapeString(cacheId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheDeleteValidateBeforeCall(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cacheDelete(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling cacheDelete(Async)");
        }

        // verify the required parameter 'cacheId' is set
        if (cacheId == null) {
            throw new ApiException("Missing the required parameter 'cacheId' when calling cacheDelete(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling cacheDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cacheDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cacheDelete(Async)");
        }

        return cacheDeleteCall(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes specific Cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cache was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cache was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void cacheDelete(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId) throws ApiException {
        cacheDeleteWithHttpInfo(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes specific Cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cache was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cache was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cacheDeleteWithHttpInfo(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = cacheDeleteValidateBeforeCall(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes specific Cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Cache was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Cache was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheDeleteAsync(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheDeleteValidateBeforeCall(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Cache entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheGetCall(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "cacheId" + "}", localVarApiClient.escapeString(cacheId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheGetValidateBeforeCall(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cacheGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling cacheGet(Async)");
        }

        // verify the required parameter 'cacheId' is set
        if (cacheId == null) {
            throw new ApiException("Missing the required parameter 'cacheId' when calling cacheGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cacheGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cacheGet(Async)");
        }

        return cacheGetCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the details of the Cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return CacheGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Cache entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CacheGet200Response cacheGet(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<CacheGet200Response> localVarResp = cacheGetWithHttpInfo(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of the Cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;CacheGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Cache entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheGet200Response> cacheGetWithHttpInfo(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = cacheGetValidateBeforeCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<CacheGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of the Cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Cache entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheGetAsync(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, final ApiCallback<CacheGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheGetValidateBeforeCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<CacheGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheGetEntityTag
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified Cache entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheGetEntityTagCall(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "cacheId" + "}", localVarApiClient.escapeString(cacheId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheGetEntityTagValidateBeforeCall(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cacheGetEntityTag(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling cacheGetEntityTag(Async)");
        }

        // verify the required parameter 'cacheId' is set
        if (cacheId == null) {
            throw new ApiException("Missing the required parameter 'cacheId' when calling cacheGetEntityTag(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cacheGetEntityTag(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cacheGetEntityTag(Async)");
        }

        return cacheGetEntityTagCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the entity state (Etag) version of the Cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified Cache entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void cacheGetEntityTag(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId) throws ApiException {
        cacheGetEntityTagWithHttpInfo(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId);
    }

    /**
     * 
     * Gets the entity state (Etag) version of the Cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified Cache entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cacheGetEntityTagWithHttpInfo(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = cacheGetEntityTagValidateBeforeCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets the entity state (Etag) version of the Cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified Cache entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheGetEntityTagAsync(String resourceGroupName, String serviceName, String cacheId, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheGetEntityTagValidateBeforeCall(resourceGroupName, serviceName, cacheId, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheListByService
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Cache entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheListByServiceCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheListByServiceValidateBeforeCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cacheListByService(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling cacheListByService(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cacheListByService(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cacheListByService(Async)");
        }

        return cacheListByServiceCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $top, $skip, _callback);

    }

    /**
     * 
     * Lists a collection of all external Caches in the specified service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @return CacheListByService200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Cache entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CacheListByService200Response cacheListByService(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, Integer $top, Integer $skip) throws ApiException {
        ApiResponse<CacheListByService200Response> localVarResp = cacheListByServiceWithHttpInfo(resourceGroupName, serviceName, apiVersion, subscriptionId, $top, $skip);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists a collection of all external Caches in the specified service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @return ApiResponse&lt;CacheListByService200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Cache entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheListByService200Response> cacheListByServiceWithHttpInfo(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, Integer $top, Integer $skip) throws ApiException {
        okhttp3.Call localVarCall = cacheListByServiceValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $top, $skip, null);
        Type localVarReturnType = new TypeToken<CacheListByService200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists a collection of all external Caches in the specified service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Cache entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheListByServiceAsync(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, Integer $top, Integer $skip, final ApiCallback<CacheListByService200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheListByServiceValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $top, $skip, _callback);
        Type localVarReturnType = new TypeToken<CacheListByService200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Update parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The cache details were successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheUpdateCall(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId, CacheUpdateRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/caches/{cacheId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "cacheId" + "}", localVarApiClient.escapeString(cacheId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheUpdateValidateBeforeCall(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId, CacheUpdateRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling cacheUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling cacheUpdate(Async)");
        }

        // verify the required parameter 'cacheId' is set
        if (cacheId == null) {
            throw new ApiException("Missing the required parameter 'cacheId' when calling cacheUpdate(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling cacheUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling cacheUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cacheUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling cacheUpdate(Async)");
        }

        return cacheUpdateCall(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates the details of the cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Update parameters. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The cache details were successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void cacheUpdate(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId, CacheUpdateRequest parameters) throws ApiException {
        cacheUpdateWithHttpInfo(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId, parameters);
    }

    /**
     * 
     * Updates the details of the cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Update parameters. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The cache details were successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cacheUpdateWithHttpInfo(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId, CacheUpdateRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = cacheUpdateValidateBeforeCall(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the details of the cache specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier). (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Update parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The cache details were successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheUpdateAsync(String resourceGroupName, String serviceName, String cacheId, String ifMatch, String apiVersion, String subscriptionId, CacheUpdateRequest parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheUpdateValidateBeforeCall(resourceGroupName, serviceName, cacheId, ifMatch, apiVersion, subscriptionId, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
