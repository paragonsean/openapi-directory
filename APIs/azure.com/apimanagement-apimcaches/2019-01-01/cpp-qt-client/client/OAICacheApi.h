/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Cache entity in your Azure API Management deployment. Azure API Management also allows for caching responses in an external Azure Cache for Redis. For more information refer to [External Redis Cache in ApiManagement](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external).
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICacheApi_H
#define OAI_OAICacheApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICache_Get_200_response.h"
#include "OAICache_ListByService_200_response.h"
#include "OAICache_ListByService_default_response.h"
#include "OAICache_Update_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICacheApi : public QObject {
    Q_OBJECT

public:
    OAICacheApi(const int timeOut = 0);
    ~OAICacheApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  cache_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICache_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void cacheCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &cache_id, const QString &api_version, const QString &subscription_id, const OAICache_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  cache_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void cacheDelete(const QString &resource_group_name, const QString &service_name, const QString &cache_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  cache_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void cacheGet(const QString &resource_group_name, const QString &service_name, const QString &cache_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  cache_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void cacheGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &cache_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void cacheListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  cache_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICache_Update_request [required]
    */
    virtual void cacheUpdate(const QString &resource_group_name, const QString &service_name, const QString &cache_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAICache_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cacheCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void cacheDeleteCallback(OAIHttpRequestWorker *worker);
    void cacheGetCallback(OAIHttpRequestWorker *worker);
    void cacheGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void cacheListByServiceCallback(OAIHttpRequestWorker *worker);
    void cacheUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cacheCreateOrUpdateSignal(OAICache_Get_200_response summary);
    void cacheDeleteSignal();
    void cacheGetSignal(OAICache_Get_200_response summary);
    void cacheGetEntityTagSignal();
    void cacheListByServiceSignal(OAICache_ListByService_200_response summary);
    void cacheUpdateSignal();


    void cacheCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICache_Get_200_response summary);
    void cacheDeleteSignalFull(OAIHttpRequestWorker *worker);
    void cacheGetSignalFull(OAIHttpRequestWorker *worker, OAICache_Get_200_response summary);
    void cacheGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void cacheListByServiceSignalFull(OAIHttpRequestWorker *worker, OAICache_ListByService_200_response summary);
    void cacheUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cacheCreateOrUpdateSignalError() instead")
    void cacheCreateOrUpdateSignalE(OAICache_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheCreateOrUpdateSignalError(OAICache_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheDeleteSignalError() instead")
    void cacheDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cacheDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheGetSignalError() instead")
    void cacheGetSignalE(OAICache_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheGetSignalError(OAICache_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheGetEntityTagSignalError() instead")
    void cacheGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cacheGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheListByServiceSignalError() instead")
    void cacheListByServiceSignalE(OAICache_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheListByServiceSignalError(OAICache_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheUpdateSignalError() instead")
    void cacheUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cacheUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cacheCreateOrUpdateSignalErrorFull() instead")
    void cacheCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheDeleteSignalErrorFull() instead")
    void cacheDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheGetSignalErrorFull() instead")
    void cacheGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheGetEntityTagSignalErrorFull() instead")
    void cacheGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheListByServiceSignalErrorFull() instead")
    void cacheListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cacheUpdateSignalErrorFull() instead")
    void cacheUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cacheUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
