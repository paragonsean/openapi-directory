/**
 * portal
 * Allows creation and deletion of Azure Shared Dashboards.
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DashboardPartsPosition model module.
 * @module model/DashboardPartsPosition
 * @version 2019-01-01-preview
 */
class DashboardPartsPosition {
    /**
     * Constructs a new <code>DashboardPartsPosition</code>.
     * The dashboard&#39;s part position.
     * @alias module:model/DashboardPartsPosition
     * @param colSpan {Number} The dashboard's part column span.
     * @param rowSpan {Number} The dashboard's part row span.
     * @param x {Number} The dashboard's part x coordinate.
     * @param y {Number} The dashboard's part y coordinate.
     */
    constructor(colSpan, rowSpan, x, y) { 
        
        DashboardPartsPosition.initialize(this, colSpan, rowSpan, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, colSpan, rowSpan, x, y) { 
        obj['colSpan'] = colSpan;
        obj['rowSpan'] = rowSpan;
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>DashboardPartsPosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardPartsPosition} obj Optional instance to populate.
     * @return {module:model/DashboardPartsPosition} The populated <code>DashboardPartsPosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardPartsPosition();

            if (data.hasOwnProperty('colSpan')) {
                obj['colSpan'] = ApiClient.convertToType(data['colSpan'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('rowSpan')) {
                obj['rowSpan'] = ApiClient.convertToType(data['rowSpan'], 'Number');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardPartsPosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardPartsPosition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DashboardPartsPosition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DashboardPartsPosition.RequiredProperties = ["colSpan", "rowSpan", "x", "y"];

/**
 * The dashboard's part column span.
 * @member {Number} colSpan
 */
DashboardPartsPosition.prototype['colSpan'] = undefined;

/**
 * The dashboard part's metadata.
 * @member {Object.<String, Object>} metadata
 */
DashboardPartsPosition.prototype['metadata'] = undefined;

/**
 * The dashboard's part row span.
 * @member {Number} rowSpan
 */
DashboardPartsPosition.prototype['rowSpan'] = undefined;

/**
 * The dashboard's part x coordinate.
 * @member {Number} x
 */
DashboardPartsPosition.prototype['x'] = undefined;

/**
 * The dashboard's part y coordinate.
 * @member {Number} y
 */
DashboardPartsPosition.prototype['y'] = undefined;






export default DashboardPartsPosition;

