/**
 * portal
 * Allows creation and deletion of Azure Shared Dashboards.
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DashboardParts from './DashboardParts';

/**
 * The DashboardLens model module.
 * @module model/DashboardLens
 * @version 2019-01-01-preview
 */
class DashboardLens {
    /**
     * Constructs a new <code>DashboardLens</code>.
     * A dashboard lens.
     * @alias module:model/DashboardLens
     * @param order {Number} The lens order.
     * @param parts {Object.<String, module:model/DashboardParts>} The dashboard parts.
     */
    constructor(order, parts) { 
        
        DashboardLens.initialize(this, order, parts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, order, parts) { 
        obj['order'] = order;
        obj['parts'] = parts;
    }

    /**
     * Constructs a <code>DashboardLens</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardLens} obj Optional instance to populate.
     * @return {module:model/DashboardLens} The populated <code>DashboardLens</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardLens();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('parts')) {
                obj['parts'] = ApiClient.convertToType(data['parts'], {'String': DashboardParts});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardLens</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardLens</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DashboardLens.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DashboardLens.RequiredProperties = ["order", "parts"];

/**
 * The dashboard len's metadata.
 * @member {Object.<String, Object>} metadata
 */
DashboardLens.prototype['metadata'] = undefined;

/**
 * The lens order.
 * @member {Number} order
 */
DashboardLens.prototype['order'] = undefined;

/**
 * The dashboard parts.
 * @member {Object.<String, module:model/DashboardParts>} parts
 */
DashboardLens.prototype['parts'] = undefined;






export default DashboardLens;

