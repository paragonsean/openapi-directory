/**
 * portal
 * Allows creation and deletion of Azure Shared Dashboards.
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DashboardPartsPosition from './DashboardPartsPosition';

/**
 * The DashboardParts model module.
 * @module model/DashboardParts
 * @version 2019-01-01-preview
 */
class DashboardParts {
    /**
     * Constructs a new <code>DashboardParts</code>.
     * A dashboard part.
     * @alias module:model/DashboardParts
     * @param position {module:model/DashboardPartsPosition} 
     */
    constructor(position) { 
        
        DashboardParts.initialize(this, position);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, position) { 
        obj['position'] = position;
    }

    /**
     * Constructs a <code>DashboardParts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardParts} obj Optional instance to populate.
     * @return {module:model/DashboardParts} The populated <code>DashboardParts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardParts();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = DashboardPartsPosition.constructFromObject(data['position']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardParts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardParts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DashboardParts.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          DashboardPartsPosition.validateJSON(data['position']);
        }

        return true;
    }


}

DashboardParts.RequiredProperties = ["position"];

/**
 * The dashboard part's metadata.
 * @member {Object.<String, Object>} metadata
 */
DashboardParts.prototype['metadata'] = undefined;

/**
 * @member {module:model/DashboardPartsPosition} position
 */
DashboardParts.prototype['position'] = undefined;






export default DashboardParts;

