# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DashboardPartsPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, col_span: float=None, metadata: Dict[str, object]=None, row_span: float=None, x: float=None, y: float=None):
        """DashboardPartsPosition - a model defined in OpenAPI

        :param col_span: The col_span of this DashboardPartsPosition.
        :param metadata: The metadata of this DashboardPartsPosition.
        :param row_span: The row_span of this DashboardPartsPosition.
        :param x: The x of this DashboardPartsPosition.
        :param y: The y of this DashboardPartsPosition.
        """
        self.openapi_types = {
            'col_span': float,
            'metadata': Dict[str, object],
            'row_span': float,
            'x': float,
            'y': float
        }

        self.attribute_map = {
            'col_span': 'colSpan',
            'metadata': 'metadata',
            'row_span': 'rowSpan',
            'x': 'x',
            'y': 'y'
        }

        self._col_span = col_span
        self._metadata = metadata
        self._row_span = row_span
        self._x = x
        self._y = y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardPartsPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardParts_position of this DashboardPartsPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def col_span(self):
        """Gets the col_span of this DashboardPartsPosition.

        The dashboard's part column span.

        :return: The col_span of this DashboardPartsPosition.
        :rtype: float
        """
        return self._col_span

    @col_span.setter
    def col_span(self, col_span):
        """Sets the col_span of this DashboardPartsPosition.

        The dashboard's part column span.

        :param col_span: The col_span of this DashboardPartsPosition.
        :type col_span: float
        """
        if col_span is None:
            raise ValueError("Invalid value for `col_span`, must not be `None`")

        self._col_span = col_span

    @property
    def metadata(self):
        """Gets the metadata of this DashboardPartsPosition.

        The dashboard part's metadata.

        :return: The metadata of this DashboardPartsPosition.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DashboardPartsPosition.

        The dashboard part's metadata.

        :param metadata: The metadata of this DashboardPartsPosition.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def row_span(self):
        """Gets the row_span of this DashboardPartsPosition.

        The dashboard's part row span.

        :return: The row_span of this DashboardPartsPosition.
        :rtype: float
        """
        return self._row_span

    @row_span.setter
    def row_span(self, row_span):
        """Sets the row_span of this DashboardPartsPosition.

        The dashboard's part row span.

        :param row_span: The row_span of this DashboardPartsPosition.
        :type row_span: float
        """
        if row_span is None:
            raise ValueError("Invalid value for `row_span`, must not be `None`")

        self._row_span = row_span

    @property
    def x(self):
        """Gets the x of this DashboardPartsPosition.

        The dashboard's part x coordinate.

        :return: The x of this DashboardPartsPosition.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this DashboardPartsPosition.

        The dashboard's part x coordinate.

        :param x: The x of this DashboardPartsPosition.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")

        self._x = x

    @property
    def y(self):
        """Gets the y of this DashboardPartsPosition.

        The dashboard's part y coordinate.

        :return: The y of this DashboardPartsPosition.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this DashboardPartsPosition.

        The dashboard's part y coordinate.

        :param y: The y of this DashboardPartsPosition.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")

        self._y = y
