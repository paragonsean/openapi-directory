# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_parts_position import DashboardPartsPosition
from openapi_server import util


class DashboardParts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: Dict[str, object]=None, position: DashboardPartsPosition=None):
        """DashboardParts - a model defined in OpenAPI

        :param metadata: The metadata of this DashboardParts.
        :param position: The position of this DashboardParts.
        """
        self.openapi_types = {
            'metadata': Dict[str, object],
            'position': DashboardPartsPosition
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'position': 'position'
        }

        self._metadata = metadata
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardParts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardParts of this DashboardParts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this DashboardParts.

        The dashboard part's metadata.

        :return: The metadata of this DashboardParts.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DashboardParts.

        The dashboard part's metadata.

        :param metadata: The metadata of this DashboardParts.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def position(self):
        """Gets the position of this DashboardParts.


        :return: The position of this DashboardParts.
        :rtype: DashboardPartsPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DashboardParts.


        :param position: The position of this DashboardParts.
        :type position: DashboardPartsPosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position
