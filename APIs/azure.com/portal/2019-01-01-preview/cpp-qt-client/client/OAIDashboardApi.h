/**
 * portal
 * Allows creation and deletion of Azure Shared Dashboards.
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDashboardApi_H
#define OAI_OAIDashboardApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDashboard.h"
#include "OAIDashboardListResult.h"
#include "OAIErrorResponse.h"
#include "OAIPatchableDashboard.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDashboardApi : public QObject {
    Q_OBJECT

public:
    OAIDashboardApi(const int timeOut = 0);
    ~OAIDashboardApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dashboard_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  dashboard OAIDashboard [required]
    */
    virtual void dashboardsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &dashboard_name, const QString &api_version, const OAIDashboard &dashboard);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dashboard_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dashboardsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &dashboard_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dashboard_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dashboardsGet(const QString &subscription_id, const QString &resource_group_name, const QString &dashboard_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dashboardsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dashboardsListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dashboard_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  dashboard OAIPatchableDashboard [required]
    */
    virtual void dashboardsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &dashboard_name, const QString &api_version, const OAIPatchableDashboard &dashboard);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dashboardsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void dashboardsDeleteCallback(OAIHttpRequestWorker *worker);
    void dashboardsGetCallback(OAIHttpRequestWorker *worker);
    void dashboardsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void dashboardsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void dashboardsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dashboardsCreateOrUpdateSignal(OAIDashboard summary);
    void dashboardsDeleteSignal();
    void dashboardsGetSignal(OAIDashboard summary);
    void dashboardsListByResourceGroupSignal(OAIDashboardListResult summary);
    void dashboardsListBySubscriptionSignal(OAIDashboardListResult summary);
    void dashboardsUpdateSignal(OAIDashboard summary);


    void dashboardsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void dashboardsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dashboardsGetSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void dashboardsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDashboardListResult summary);
    void dashboardsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDashboardListResult summary);
    void dashboardsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);

    Q_DECL_DEPRECATED_X("Use dashboardsCreateOrUpdateSignalError() instead")
    void dashboardsCreateOrUpdateSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsCreateOrUpdateSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsDeleteSignalError() instead")
    void dashboardsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsGetSignalError() instead")
    void dashboardsGetSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsGetSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsListByResourceGroupSignalError() instead")
    void dashboardsListByResourceGroupSignalE(OAIDashboardListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsListByResourceGroupSignalError(OAIDashboardListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsListBySubscriptionSignalError() instead")
    void dashboardsListBySubscriptionSignalE(OAIDashboardListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsListBySubscriptionSignalError(OAIDashboardListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsUpdateSignalError() instead")
    void dashboardsUpdateSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsUpdateSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dashboardsCreateOrUpdateSignalErrorFull() instead")
    void dashboardsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsDeleteSignalErrorFull() instead")
    void dashboardsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsGetSignalErrorFull() instead")
    void dashboardsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsListByResourceGroupSignalErrorFull() instead")
    void dashboardsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsListBySubscriptionSignalErrorFull() instead")
    void dashboardsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardsUpdateSignalErrorFull() instead")
    void dashboardsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
