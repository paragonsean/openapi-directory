# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_lens import DashboardLens
from openapi_server import util


class DashboardProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lenses: Dict[str, DashboardLens]=None, metadata: Dict[str, object]=None):
        """DashboardProperties - a model defined in OpenAPI

        :param lenses: The lenses of this DashboardProperties.
        :param metadata: The metadata of this DashboardProperties.
        """
        self.openapi_types = {
            'lenses': Dict[str, DashboardLens],
            'metadata': Dict[str, object]
        }

        self.attribute_map = {
            'lenses': 'lenses',
            'metadata': 'metadata'
        }

        self._lenses = lenses
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardProperties of this DashboardProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lenses(self):
        """Gets the lenses of this DashboardProperties.

        The dashboard lenses.

        :return: The lenses of this DashboardProperties.
        :rtype: Dict[str, DashboardLens]
        """
        return self._lenses

    @lenses.setter
    def lenses(self, lenses):
        """Sets the lenses of this DashboardProperties.

        The dashboard lenses.

        :param lenses: The lenses of this DashboardProperties.
        :type lenses: Dict[str, DashboardLens]
        """

        self._lenses = lenses

    @property
    def metadata(self):
        """Gets the metadata of this DashboardProperties.

        The dashboard metadata.

        :return: The metadata of this DashboardProperties.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DashboardProperties.

        The dashboard metadata.

        :param metadata: The metadata of this DashboardProperties.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata
