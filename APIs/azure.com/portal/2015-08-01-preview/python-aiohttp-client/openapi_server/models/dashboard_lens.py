# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_parts import DashboardParts
from openapi_server import util


class DashboardLens(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: Dict[str, object]=None, order: int=None, parts: Dict[str, DashboardParts]=None):
        """DashboardLens - a model defined in OpenAPI

        :param metadata: The metadata of this DashboardLens.
        :param order: The order of this DashboardLens.
        :param parts: The parts of this DashboardLens.
        """
        self.openapi_types = {
            'metadata': Dict[str, object],
            'order': int,
            'parts': Dict[str, DashboardParts]
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'order': 'order',
            'parts': 'parts'
        }

        self._metadata = metadata
        self._order = order
        self._parts = parts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardLens':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardLens of this DashboardLens.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this DashboardLens.

        The dashboard len's metadata.

        :return: The metadata of this DashboardLens.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DashboardLens.

        The dashboard len's metadata.

        :param metadata: The metadata of this DashboardLens.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def order(self):
        """Gets the order of this DashboardLens.

        The lens order.

        :return: The order of this DashboardLens.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DashboardLens.

        The lens order.

        :param order: The order of this DashboardLens.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order

    @property
    def parts(self):
        """Gets the parts of this DashboardLens.

        The dashboard parts.

        :return: The parts of this DashboardLens.
        :rtype: Dict[str, DashboardParts]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this DashboardLens.

        The dashboard parts.

        :param parts: The parts of this DashboardLens.
        :type parts: Dict[str, DashboardParts]
        """
        if parts is None:
            raise ValueError("Invalid value for `parts`, must not be `None`")

        self._parts = parts
