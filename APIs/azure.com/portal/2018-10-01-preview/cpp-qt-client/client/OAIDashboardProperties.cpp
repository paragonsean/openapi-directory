/**
 * portal
 * Allows creation and deletion of Azure Shared Dashboards.
 *
 * The version of the OpenAPI document: 2018-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardProperties::OAIDashboardProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardProperties::OAIDashboardProperties() {
    this->initializeModel();
}

OAIDashboardProperties::~OAIDashboardProperties() {}

void OAIDashboardProperties::initializeModel() {

    m_lenses_isSet = false;
    m_lenses_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIDashboardProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardProperties::fromJsonObject(QJsonObject json) {

    m_lenses_isValid = ::OpenAPI::fromJsonValue(m_lenses, json[QString("lenses")]);
    m_lenses_isSet = !json[QString("lenses")].isNull() && m_lenses_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIDashboardProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_lenses.size() > 0) {
        obj.insert(QString("lenses"), ::OpenAPI::toJsonValue(m_lenses));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QMap<QString, OAIDashboardLens> OAIDashboardProperties::getLenses() const {
    return m_lenses;
}
void OAIDashboardProperties::setLenses(const QMap<QString, OAIDashboardLens> &lenses) {
    m_lenses = lenses;
    m_lenses_isSet = true;
}

bool OAIDashboardProperties::is_lenses_Set() const{
    return m_lenses_isSet;
}

bool OAIDashboardProperties::is_lenses_Valid() const{
    return m_lenses_isValid;
}

QMap<QString, OAIObject> OAIDashboardProperties::getMetadata() const {
    return m_metadata;
}
void OAIDashboardProperties::setMetadata(const QMap<QString, OAIObject> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDashboardProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDashboardProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIDashboardProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
