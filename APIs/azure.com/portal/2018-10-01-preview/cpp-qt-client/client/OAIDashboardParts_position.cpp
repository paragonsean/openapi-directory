/**
 * portal
 * Allows creation and deletion of Azure Shared Dashboards.
 *
 * The version of the OpenAPI document: 2018-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardParts_position.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardParts_position::OAIDashboardParts_position(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardParts_position::OAIDashboardParts_position() {
    this->initializeModel();
}

OAIDashboardParts_position::~OAIDashboardParts_position() {}

void OAIDashboardParts_position::initializeModel() {

    m_col_span_isSet = false;
    m_col_span_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_row_span_isSet = false;
    m_row_span_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIDashboardParts_position::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardParts_position::fromJsonObject(QJsonObject json) {

    m_col_span_isValid = ::OpenAPI::fromJsonValue(m_col_span, json[QString("colSpan")]);
    m_col_span_isSet = !json[QString("colSpan")].isNull() && m_col_span_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_row_span_isValid = ::OpenAPI::fromJsonValue(m_row_span, json[QString("rowSpan")]);
    m_row_span_isSet = !json[QString("rowSpan")].isNull() && m_row_span_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAIDashboardParts_position::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardParts_position::asJsonObject() const {
    QJsonObject obj;
    if (m_col_span_isSet) {
        obj.insert(QString("colSpan"), ::OpenAPI::toJsonValue(m_col_span));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_row_span_isSet) {
        obj.insert(QString("rowSpan"), ::OpenAPI::toJsonValue(m_row_span));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

double OAIDashboardParts_position::getColSpan() const {
    return m_col_span;
}
void OAIDashboardParts_position::setColSpan(const double &col_span) {
    m_col_span = col_span;
    m_col_span_isSet = true;
}

bool OAIDashboardParts_position::is_col_span_Set() const{
    return m_col_span_isSet;
}

bool OAIDashboardParts_position::is_col_span_Valid() const{
    return m_col_span_isValid;
}

QMap<QString, OAIObject> OAIDashboardParts_position::getMetadata() const {
    return m_metadata;
}
void OAIDashboardParts_position::setMetadata(const QMap<QString, OAIObject> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDashboardParts_position::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDashboardParts_position::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAIDashboardParts_position::getRowSpan() const {
    return m_row_span;
}
void OAIDashboardParts_position::setRowSpan(const double &row_span) {
    m_row_span = row_span;
    m_row_span_isSet = true;
}

bool OAIDashboardParts_position::is_row_span_Set() const{
    return m_row_span_isSet;
}

bool OAIDashboardParts_position::is_row_span_Valid() const{
    return m_row_span_isValid;
}

double OAIDashboardParts_position::getX() const {
    return m_x;
}
void OAIDashboardParts_position::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIDashboardParts_position::is_x_Set() const{
    return m_x_isSet;
}

bool OAIDashboardParts_position::is_x_Valid() const{
    return m_x_isValid;
}

double OAIDashboardParts_position::getY() const {
    return m_y;
}
void OAIDashboardParts_position::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIDashboardParts_position::is_y_Set() const{
    return m_y_isSet;
}

bool OAIDashboardParts_position::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIDashboardParts_position::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_col_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardParts_position::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_col_span_isValid && m_row_span_isValid && m_x_isValid && m_y_isValid && true;
}

} // namespace OpenAPI
