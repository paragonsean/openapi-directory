/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitor::OAIConnectionMonitor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitor::OAIConnectionMonitor() {
    this->initializeModel();
}

OAIConnectionMonitor::~OAIConnectionMonitor() {}

void OAIConnectionMonitor::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIConnectionMonitor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitor::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIConnectionMonitor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitor::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIConnectionMonitor::getLocation() const {
    return m_location;
}
void OAIConnectionMonitor::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIConnectionMonitor::is_location_Set() const{
    return m_location_isSet;
}

bool OAIConnectionMonitor::is_location_Valid() const{
    return m_location_isValid;
}

OAIConnectionMonitorParameters OAIConnectionMonitor::getProperties() const {
    return m_properties;
}
void OAIConnectionMonitor::setProperties(const OAIConnectionMonitorParameters &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIConnectionMonitor::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIConnectionMonitor::is_properties_Valid() const{
    return m_properties_isValid;
}

QMap<QString, QString> OAIConnectionMonitor::getTags() const {
    return m_tags;
}
void OAIConnectionMonitor::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIConnectionMonitor::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIConnectionMonitor::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIConnectionMonitor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_properties_isValid && true;
}

} // namespace OpenAPI
