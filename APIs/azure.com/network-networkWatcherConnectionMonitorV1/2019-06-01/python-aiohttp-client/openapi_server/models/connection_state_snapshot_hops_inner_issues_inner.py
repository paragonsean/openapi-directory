# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionStateSnapshotHopsInnerIssuesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: List[Dict[str, str]]=None, origin: str=None, severity: str=None, type: str=None):
        """ConnectionStateSnapshotHopsInnerIssuesInner - a model defined in OpenAPI

        :param context: The context of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :param origin: The origin of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :param severity: The severity of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :param type: The type of this ConnectionStateSnapshotHopsInnerIssuesInner.
        """
        self.openapi_types = {
            'context': List[Dict[str, str]],
            'origin': str,
            'severity': str,
            'type': str
        }

        self.attribute_map = {
            'context': 'context',
            'origin': 'origin',
            'severity': 'severity',
            'type': 'type'
        }

        self._context = context
        self._origin = origin
        self._severity = severity
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionStateSnapshotHopsInnerIssuesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionStateSnapshot_hops_inner_issues_inner of this ConnectionStateSnapshotHopsInnerIssuesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this ConnectionStateSnapshotHopsInnerIssuesInner.

        Provides additional context on the issue.

        :return: The context of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :rtype: List[Dict[str, str]]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ConnectionStateSnapshotHopsInnerIssuesInner.

        Provides additional context on the issue.

        :param context: The context of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :type context: List[Dict[str, str]]
        """

        self._context = context

    @property
    def origin(self):
        """Gets the origin of this ConnectionStateSnapshotHopsInnerIssuesInner.

        The origin of the issue.

        :return: The origin of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ConnectionStateSnapshotHopsInnerIssuesInner.

        The origin of the issue.

        :param origin: The origin of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :type origin: str
        """
        allowed_values = ["Local", "Inbound", "Outbound"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def severity(self):
        """Gets the severity of this ConnectionStateSnapshotHopsInnerIssuesInner.

        The severity of the issue.

        :return: The severity of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ConnectionStateSnapshotHopsInnerIssuesInner.

        The severity of the issue.

        :param severity: The severity of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :type severity: str
        """
        allowed_values = ["Error", "Warning"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def type(self):
        """Gets the type of this ConnectionStateSnapshotHopsInnerIssuesInner.

        The type of issue.

        :return: The type of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectionStateSnapshotHopsInnerIssuesInner.

        The type of issue.

        :param type: The type of this ConnectionStateSnapshotHopsInnerIssuesInner.
        :type type: str
        """
        allowed_values = ["Unknown", "AgentStopped", "GuestFirewall", "DnsResolution", "SocketBind", "NetworkSecurityRule", "UserDefinedRoute", "PortThrottled", "Platform"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
