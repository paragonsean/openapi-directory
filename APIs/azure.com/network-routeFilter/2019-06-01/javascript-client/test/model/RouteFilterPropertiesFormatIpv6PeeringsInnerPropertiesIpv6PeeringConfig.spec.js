/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig', function() {
    it('should create an instance of RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig', function() {
      // uncomment below and update the code to test RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig
      //var instance = new NetworkManagementClient.RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig();
      //expect(instance).to.be.a(NetworkManagementClient.RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig);
    });

    it('should have the property microsoftPeeringConfig (base name: "microsoftPeeringConfig")', function() {
      // uncomment below and update the code to test the property microsoftPeeringConfig
      //var instance = new NetworkManagementClient.RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig();
      //expect(instance).to.be();
    });

    it('should have the property primaryPeerAddressPrefix (base name: "primaryPeerAddressPrefix")', function() {
      // uncomment below and update the code to test the property primaryPeerAddressPrefix
      //var instance = new NetworkManagementClient.RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig();
      //expect(instance).to.be();
    });

    it('should have the property routeFilter (base name: "routeFilter")', function() {
      // uncomment below and update the code to test the property routeFilter
      //var instance = new NetworkManagementClient.RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig();
      //expect(instance).to.be();
    });

    it('should have the property secondaryPeerAddressPrefix (base name: "secondaryPeerAddressPrefix")', function() {
      // uncomment below and update the code to test the property secondaryPeerAddressPrefix
      //var instance = new NetworkManagementClient.RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new NetworkManagementClient.RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig();
      //expect(instance).to.be();
    });

  });

}));
