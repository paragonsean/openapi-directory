# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.route_filter_properties_format_ipv6_peerings_inner_properties_connections_inner_properties_express_route_circuit_peering import RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesConnectionsInnerPropertiesExpressRouteCircuitPeering
from openapi_server.models.route_filter_properties_format_ipv6_peerings_inner_properties_ipv6_peering_config_microsoft_peering_config import RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
from openapi_server import util


class RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, microsoft_peering_config: RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig=None, primary_peer_address_prefix: str=None, route_filter: RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesConnectionsInnerPropertiesExpressRouteCircuitPeering=None, secondary_peer_address_prefix: str=None, state: str=None):
        """RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig - a model defined in OpenAPI

        :param microsoft_peering_config: The microsoft_peering_config of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :param primary_peer_address_prefix: The primary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :param route_filter: The route_filter of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :param secondary_peer_address_prefix: The secondary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :param state: The state of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        """
        self.openapi_types = {
            'microsoft_peering_config': RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig,
            'primary_peer_address_prefix': str,
            'route_filter': RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesConnectionsInnerPropertiesExpressRouteCircuitPeering,
            'secondary_peer_address_prefix': str,
            'state': str
        }

        self.attribute_map = {
            'microsoft_peering_config': 'microsoftPeeringConfig',
            'primary_peer_address_prefix': 'primaryPeerAddressPrefix',
            'route_filter': 'routeFilter',
            'secondary_peer_address_prefix': 'secondaryPeerAddressPrefix',
            'state': 'state'
        }

        self._microsoft_peering_config = microsoft_peering_config
        self._primary_peer_address_prefix = primary_peer_address_prefix
        self._route_filter = route_filter
        self._secondary_peer_address_prefix = secondary_peer_address_prefix
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteFilterPropertiesFormat_ipv6Peerings_inner_properties_ipv6PeeringConfig of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def microsoft_peering_config(self):
        """Gets the microsoft_peering_config of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.


        :return: The microsoft_peering_config of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :rtype: RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
        """
        return self._microsoft_peering_config

    @microsoft_peering_config.setter
    def microsoft_peering_config(self, microsoft_peering_config):
        """Sets the microsoft_peering_config of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.


        :param microsoft_peering_config: The microsoft_peering_config of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :type microsoft_peering_config: RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
        """

        self._microsoft_peering_config = microsoft_peering_config

    @property
    def primary_peer_address_prefix(self):
        """Gets the primary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.

        The primary address prefix.

        :return: The primary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :rtype: str
        """
        return self._primary_peer_address_prefix

    @primary_peer_address_prefix.setter
    def primary_peer_address_prefix(self, primary_peer_address_prefix):
        """Sets the primary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.

        The primary address prefix.

        :param primary_peer_address_prefix: The primary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :type primary_peer_address_prefix: str
        """

        self._primary_peer_address_prefix = primary_peer_address_prefix

    @property
    def route_filter(self):
        """Gets the route_filter of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.


        :return: The route_filter of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :rtype: RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesConnectionsInnerPropertiesExpressRouteCircuitPeering
        """
        return self._route_filter

    @route_filter.setter
    def route_filter(self, route_filter):
        """Sets the route_filter of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.


        :param route_filter: The route_filter of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :type route_filter: RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesConnectionsInnerPropertiesExpressRouteCircuitPeering
        """

        self._route_filter = route_filter

    @property
    def secondary_peer_address_prefix(self):
        """Gets the secondary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.

        The secondary address prefix.

        :return: The secondary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :rtype: str
        """
        return self._secondary_peer_address_prefix

    @secondary_peer_address_prefix.setter
    def secondary_peer_address_prefix(self, secondary_peer_address_prefix):
        """Sets the secondary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.

        The secondary address prefix.

        :param secondary_peer_address_prefix: The secondary_peer_address_prefix of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :type secondary_peer_address_prefix: str
        """

        self._secondary_peer_address_prefix = secondary_peer_address_prefix

    @property
    def state(self):
        """Gets the state of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.

        The state of peering.

        :return: The state of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.

        The state of peering.

        :param state: The state of this RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfig.
        :type state: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
