/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties() {
    this->initializeModel();
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::~OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties() {}

void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::initializeModel() {

    m_azure_asn_isSet = false;
    m_azure_asn_isValid = false;

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_express_route_connection_isSet = false;
    m_express_route_connection_isValid = false;

    m_gateway_manager_etag_isSet = false;
    m_gateway_manager_etag_isValid = false;

    m_ipv6_peering_config_isSet = false;
    m_ipv6_peering_config_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_microsoft_peering_config_isSet = false;
    m_microsoft_peering_config_isValid = false;

    m_peer_asn_isSet = false;
    m_peer_asn_isValid = false;

    m_peered_connections_isSet = false;
    m_peered_connections_isValid = false;

    m_peering_type_isSet = false;
    m_peering_type_isValid = false;

    m_primary_azure_port_isSet = false;
    m_primary_azure_port_isValid = false;

    m_primary_peer_address_prefix_isSet = false;
    m_primary_peer_address_prefix_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_route_filter_isSet = false;
    m_route_filter_isValid = false;

    m_secondary_azure_port_isSet = false;
    m_secondary_azure_port_isValid = false;

    m_secondary_peer_address_prefix_isSet = false;
    m_secondary_peer_address_prefix_isValid = false;

    m_shared_key_isSet = false;
    m_shared_key_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_vlan_id_isSet = false;
    m_vlan_id_isValid = false;
}

void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::fromJsonObject(QJsonObject json) {

    m_azure_asn_isValid = ::OpenAPI::fromJsonValue(m_azure_asn, json[QString("azureASN")]);
    m_azure_asn_isSet = !json[QString("azureASN")].isNull() && m_azure_asn_isValid;

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("connections")]);
    m_connections_isSet = !json[QString("connections")].isNull() && m_connections_isValid;

    m_express_route_connection_isValid = ::OpenAPI::fromJsonValue(m_express_route_connection, json[QString("expressRouteConnection")]);
    m_express_route_connection_isSet = !json[QString("expressRouteConnection")].isNull() && m_express_route_connection_isValid;

    m_gateway_manager_etag_isValid = ::OpenAPI::fromJsonValue(m_gateway_manager_etag, json[QString("gatewayManagerEtag")]);
    m_gateway_manager_etag_isSet = !json[QString("gatewayManagerEtag")].isNull() && m_gateway_manager_etag_isValid;

    m_ipv6_peering_config_isValid = ::OpenAPI::fromJsonValue(m_ipv6_peering_config, json[QString("ipv6PeeringConfig")]);
    m_ipv6_peering_config_isSet = !json[QString("ipv6PeeringConfig")].isNull() && m_ipv6_peering_config_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("lastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("lastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_microsoft_peering_config_isValid = ::OpenAPI::fromJsonValue(m_microsoft_peering_config, json[QString("microsoftPeeringConfig")]);
    m_microsoft_peering_config_isSet = !json[QString("microsoftPeeringConfig")].isNull() && m_microsoft_peering_config_isValid;

    m_peer_asn_isValid = ::OpenAPI::fromJsonValue(m_peer_asn, json[QString("peerASN")]);
    m_peer_asn_isSet = !json[QString("peerASN")].isNull() && m_peer_asn_isValid;

    m_peered_connections_isValid = ::OpenAPI::fromJsonValue(m_peered_connections, json[QString("peeredConnections")]);
    m_peered_connections_isSet = !json[QString("peeredConnections")].isNull() && m_peered_connections_isValid;

    m_peering_type_isValid = ::OpenAPI::fromJsonValue(m_peering_type, json[QString("peeringType")]);
    m_peering_type_isSet = !json[QString("peeringType")].isNull() && m_peering_type_isValid;

    m_primary_azure_port_isValid = ::OpenAPI::fromJsonValue(m_primary_azure_port, json[QString("primaryAzurePort")]);
    m_primary_azure_port_isSet = !json[QString("primaryAzurePort")].isNull() && m_primary_azure_port_isValid;

    m_primary_peer_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_primary_peer_address_prefix, json[QString("primaryPeerAddressPrefix")]);
    m_primary_peer_address_prefix_isSet = !json[QString("primaryPeerAddressPrefix")].isNull() && m_primary_peer_address_prefix_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_route_filter_isValid = ::OpenAPI::fromJsonValue(m_route_filter, json[QString("routeFilter")]);
    m_route_filter_isSet = !json[QString("routeFilter")].isNull() && m_route_filter_isValid;

    m_secondary_azure_port_isValid = ::OpenAPI::fromJsonValue(m_secondary_azure_port, json[QString("secondaryAzurePort")]);
    m_secondary_azure_port_isSet = !json[QString("secondaryAzurePort")].isNull() && m_secondary_azure_port_isValid;

    m_secondary_peer_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_secondary_peer_address_prefix, json[QString("secondaryPeerAddressPrefix")]);
    m_secondary_peer_address_prefix_isSet = !json[QString("secondaryPeerAddressPrefix")].isNull() && m_secondary_peer_address_prefix_isValid;

    m_shared_key_isValid = ::OpenAPI::fromJsonValue(m_shared_key, json[QString("sharedKey")]);
    m_shared_key_isSet = !json[QString("sharedKey")].isNull() && m_shared_key_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_vlan_id, json[QString("vlanId")]);
    m_vlan_id_isSet = !json[QString("vlanId")].isNull() && m_vlan_id_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_asn_isSet) {
        obj.insert(QString("azureASN"), ::OpenAPI::toJsonValue(m_azure_asn));
    }
    if (m_connections.size() > 0) {
        obj.insert(QString("connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_express_route_connection.isSet()) {
        obj.insert(QString("expressRouteConnection"), ::OpenAPI::toJsonValue(m_express_route_connection));
    }
    if (m_gateway_manager_etag_isSet) {
        obj.insert(QString("gatewayManagerEtag"), ::OpenAPI::toJsonValue(m_gateway_manager_etag));
    }
    if (m_ipv6_peering_config.isSet()) {
        obj.insert(QString("ipv6PeeringConfig"), ::OpenAPI::toJsonValue(m_ipv6_peering_config));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("lastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_microsoft_peering_config.isSet()) {
        obj.insert(QString("microsoftPeeringConfig"), ::OpenAPI::toJsonValue(m_microsoft_peering_config));
    }
    if (m_peer_asn_isSet) {
        obj.insert(QString("peerASN"), ::OpenAPI::toJsonValue(m_peer_asn));
    }
    if (m_peered_connections.size() > 0) {
        obj.insert(QString("peeredConnections"), ::OpenAPI::toJsonValue(m_peered_connections));
    }
    if (m_peering_type_isSet) {
        obj.insert(QString("peeringType"), ::OpenAPI::toJsonValue(m_peering_type));
    }
    if (m_primary_azure_port_isSet) {
        obj.insert(QString("primaryAzurePort"), ::OpenAPI::toJsonValue(m_primary_azure_port));
    }
    if (m_primary_peer_address_prefix_isSet) {
        obj.insert(QString("primaryPeerAddressPrefix"), ::OpenAPI::toJsonValue(m_primary_peer_address_prefix));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_route_filter.isSet()) {
        obj.insert(QString("routeFilter"), ::OpenAPI::toJsonValue(m_route_filter));
    }
    if (m_secondary_azure_port_isSet) {
        obj.insert(QString("secondaryAzurePort"), ::OpenAPI::toJsonValue(m_secondary_azure_port));
    }
    if (m_secondary_peer_address_prefix_isSet) {
        obj.insert(QString("secondaryPeerAddressPrefix"), ::OpenAPI::toJsonValue(m_secondary_peer_address_prefix));
    }
    if (m_shared_key_isSet) {
        obj.insert(QString("sharedKey"), ::OpenAPI::toJsonValue(m_shared_key));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_vlan_id_isSet) {
        obj.insert(QString("vlanId"), ::OpenAPI::toJsonValue(m_vlan_id));
    }
    return obj;
}

qint32 OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getAzureAsn() const {
    return m_azure_asn;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setAzureAsn(const qint32 &azure_asn) {
    m_azure_asn = azure_asn;
    m_azure_asn_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_azure_asn_Set() const{
    return m_azure_asn_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_azure_asn_Valid() const{
    return m_azure_asn_isValid;
}

QList<OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner> OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getConnections() const {
    return m_connections;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setConnections(const QList<OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner> &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_connections_Valid() const{
    return m_connections_isValid;
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_expressRouteConnection OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getExpressRouteConnection() const {
    return m_express_route_connection;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setExpressRouteConnection(const OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_expressRouteConnection &express_route_connection) {
    m_express_route_connection = express_route_connection;
    m_express_route_connection_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_express_route_connection_Set() const{
    return m_express_route_connection_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_express_route_connection_Valid() const{
    return m_express_route_connection_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getGatewayManagerEtag() const {
    return m_gateway_manager_etag;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setGatewayManagerEtag(const QString &gateway_manager_etag) {
    m_gateway_manager_etag = gateway_manager_etag;
    m_gateway_manager_etag_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_gateway_manager_etag_Set() const{
    return m_gateway_manager_etag_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_gateway_manager_etag_Valid() const{
    return m_gateway_manager_etag_isValid;
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_ipv6PeeringConfig OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getIpv6PeeringConfig() const {
    return m_ipv6_peering_config;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setIpv6PeeringConfig(const OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_ipv6PeeringConfig &ipv6_peering_config) {
    m_ipv6_peering_config = ipv6_peering_config;
    m_ipv6_peering_config_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_ipv6_peering_config_Set() const{
    return m_ipv6_peering_config_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_ipv6_peering_config_Valid() const{
    return m_ipv6_peering_config_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_ipv6PeeringConfig_microsoftPeeringConfig OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getMicrosoftPeeringConfig() const {
    return m_microsoft_peering_config;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setMicrosoftPeeringConfig(const OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_ipv6PeeringConfig_microsoftPeeringConfig &microsoft_peering_config) {
    m_microsoft_peering_config = microsoft_peering_config;
    m_microsoft_peering_config_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_microsoft_peering_config_Set() const{
    return m_microsoft_peering_config_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_microsoft_peering_config_Valid() const{
    return m_microsoft_peering_config_isValid;
}

qint64 OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getPeerAsn() const {
    return m_peer_asn;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setPeerAsn(const qint64 &peer_asn) {
    m_peer_asn = peer_asn;
    m_peer_asn_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_peer_asn_Set() const{
    return m_peer_asn_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_peer_asn_Valid() const{
    return m_peer_asn_isValid;
}

QList<OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_peeredConnections_inner> OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getPeeredConnections() const {
    return m_peered_connections;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setPeeredConnections(const QList<OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_peeredConnections_inner> &peered_connections) {
    m_peered_connections = peered_connections;
    m_peered_connections_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_peered_connections_Set() const{
    return m_peered_connections_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_peered_connections_Valid() const{
    return m_peered_connections_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getPeeringType() const {
    return m_peering_type;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setPeeringType(const QString &peering_type) {
    m_peering_type = peering_type;
    m_peering_type_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_peering_type_Set() const{
    return m_peering_type_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_peering_type_Valid() const{
    return m_peering_type_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getPrimaryAzurePort() const {
    return m_primary_azure_port;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setPrimaryAzurePort(const QString &primary_azure_port) {
    m_primary_azure_port = primary_azure_port;
    m_primary_azure_port_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_primary_azure_port_Set() const{
    return m_primary_azure_port_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_primary_azure_port_Valid() const{
    return m_primary_azure_port_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getPrimaryPeerAddressPrefix() const {
    return m_primary_peer_address_prefix;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setPrimaryPeerAddressPrefix(const QString &primary_peer_address_prefix) {
    m_primary_peer_address_prefix = primary_peer_address_prefix;
    m_primary_peer_address_prefix_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_primary_peer_address_prefix_Set() const{
    return m_primary_peer_address_prefix_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_primary_peer_address_prefix_Valid() const{
    return m_primary_peer_address_prefix_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getRouteFilter() const {
    return m_route_filter;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setRouteFilter(const OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering &route_filter) {
    m_route_filter = route_filter;
    m_route_filter_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_route_filter_Set() const{
    return m_route_filter_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_route_filter_Valid() const{
    return m_route_filter_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getSecondaryAzurePort() const {
    return m_secondary_azure_port;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setSecondaryAzurePort(const QString &secondary_azure_port) {
    m_secondary_azure_port = secondary_azure_port;
    m_secondary_azure_port_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_secondary_azure_port_Set() const{
    return m_secondary_azure_port_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_secondary_azure_port_Valid() const{
    return m_secondary_azure_port_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getSecondaryPeerAddressPrefix() const {
    return m_secondary_peer_address_prefix;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setSecondaryPeerAddressPrefix(const QString &secondary_peer_address_prefix) {
    m_secondary_peer_address_prefix = secondary_peer_address_prefix;
    m_secondary_peer_address_prefix_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_secondary_peer_address_prefix_Set() const{
    return m_secondary_peer_address_prefix_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_secondary_peer_address_prefix_Valid() const{
    return m_secondary_peer_address_prefix_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getSharedKey() const {
    return m_shared_key;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setSharedKey(const QString &shared_key) {
    m_shared_key = shared_key;
    m_shared_key_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_shared_key_Set() const{
    return m_shared_key_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_shared_key_Valid() const{
    return m_shared_key_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getState() const {
    return m_state;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_state_Valid() const{
    return m_state_isValid;
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_stats OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getStats() const {
    return m_stats;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setStats(const OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_stats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_stats_Valid() const{
    return m_stats_isValid;
}

qint32 OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::getVlanId() const {
    return m_vlan_id;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::setVlanId(const qint32 &vlan_id) {
    m_vlan_id = vlan_id;
    m_vlan_id_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_vlan_id_Set() const{
    return m_vlan_id_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::is_vlan_id_Valid() const{
    return m_vlan_id_isValid;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_express_route_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_manager_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_peering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_peering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peered_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_azure_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_peer_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_azure_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_peer_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
