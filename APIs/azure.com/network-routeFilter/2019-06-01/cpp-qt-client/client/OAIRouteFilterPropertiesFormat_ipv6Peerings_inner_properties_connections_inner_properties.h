/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties.h
 *
 * Properties of the express route circuit connection.
 */

#ifndef OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_H
#define OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_H

#include <QJsonObject>

#include "OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering;

class OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties : public OAIObject {
public:
    OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties();
    OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties(QString json);
    ~OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddressPrefix() const;
    void setAddressPrefix(const QString &address_prefix);
    bool is_address_prefix_Set() const;
    bool is_address_prefix_Valid() const;

    QString getAuthorizationKey() const;
    void setAuthorizationKey(const QString &authorization_key);
    bool is_authorization_key_Set() const;
    bool is_authorization_key_Valid() const;

    QString getCircuitConnectionStatus() const;
    void setCircuitConnectionStatus(const QString &circuit_connection_status);
    bool is_circuit_connection_status_Set() const;
    bool is_circuit_connection_status_Valid() const;

    OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering getExpressRouteCircuitPeering() const;
    void setExpressRouteCircuitPeering(const OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering &express_route_circuit_peering);
    bool is_express_route_circuit_peering_Set() const;
    bool is_express_route_circuit_peering_Valid() const;

    OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering getPeerExpressRouteCircuitPeering() const;
    void setPeerExpressRouteCircuitPeering(const OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering &peer_express_route_circuit_peering);
    bool is_peer_express_route_circuit_peering_Set() const;
    bool is_peer_express_route_circuit_peering_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address_prefix;
    bool m_address_prefix_isSet;
    bool m_address_prefix_isValid;

    QString m_authorization_key;
    bool m_authorization_key_isSet;
    bool m_authorization_key_isValid;

    QString m_circuit_connection_status;
    bool m_circuit_connection_status_isSet;
    bool m_circuit_connection_status_isValid;

    OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering m_express_route_circuit_peering;
    bool m_express_route_circuit_peering_isSet;
    bool m_express_route_circuit_peering_isValid;

    OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_expressRouteCircuitPeering m_peer_express_route_circuit_peering;
    bool m_peer_express_route_circuit_peering_isSet;
    bool m_peer_express_route_circuit_peering_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties)

#endif // OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties_H
