/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchRouteFilterRule from '../model/PatchRouteFilterRule';
import RouteFilterRule from '../model/RouteFilterRule';
import RouteFilterRuleListResult from '../model/RouteFilterRuleListResult';

/**
* RouteFilterRules service.
* @module api/RouteFilterRulesApi
* @version 2019-07-01
*/
export default class RouteFilterRulesApi {

    /**
    * Constructs a new RouteFilterRulesApi. 
    * @alias module:api/RouteFilterRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the routeFilterRulesCreateOrUpdate operation.
     * @callback module:api/RouteFilterRulesApi~routeFilterRulesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilterRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a route in the specified route filter.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} ruleName The name of the route filter rule.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/RouteFilterRule} routeFilterRuleParameters Parameters supplied to the create or update route filter rule operation.
     * @param {module:api/RouteFilterRulesApi~routeFilterRulesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilterRule}
     */
    routeFilterRulesCreateOrUpdate(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters, callback) {
      let postBody = routeFilterRuleParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesCreateOrUpdate");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFilterRulesCreateOrUpdate");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling routeFilterRulesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFilterRulesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFilterRulesCreateOrUpdate");
      }
      // verify the required parameter 'routeFilterRuleParameters' is set
      if (routeFilterRuleParameters === undefined || routeFilterRuleParameters === null) {
        throw new Error("Missing the required parameter 'routeFilterRuleParameters' when calling routeFilterRulesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'ruleName': ruleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteFilterRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFilterRulesDelete operation.
     * @callback module:api/RouteFilterRulesApi~routeFilterRulesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified rule from a route filter.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteFilterRulesApi~routeFilterRulesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routeFilterRulesDelete(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesDelete");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFilterRulesDelete");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling routeFilterRulesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFilterRulesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFilterRulesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'ruleName': ruleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFilterRulesGet operation.
     * @callback module:api/RouteFilterRulesApi~routeFilterRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilterRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified rule from a route filter.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteFilterRulesApi~routeFilterRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilterRule}
     */
    routeFilterRulesGet(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesGet");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFilterRulesGet");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling routeFilterRulesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFilterRulesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFilterRulesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'ruleName': ruleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteFilterRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFilterRulesListByRouteFilter operation.
     * @callback module:api/RouteFilterRulesApi~routeFilterRulesListByRouteFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilterRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all RouteFilterRules in a route filter.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteFilterRulesApi~routeFilterRulesListByRouteFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilterRuleListResult}
     */
    routeFilterRulesListByRouteFilter(resourceGroupName, routeFilterName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesListByRouteFilter");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFilterRulesListByRouteFilter");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFilterRulesListByRouteFilter");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFilterRulesListByRouteFilter");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteFilterRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFilterRulesUpdate operation.
     * @callback module:api/RouteFilterRulesApi~routeFilterRulesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilterRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a route in the specified route filter.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} ruleName The name of the route filter rule.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/PatchRouteFilterRule} routeFilterRuleParameters Parameters supplied to the update route filter rule operation.
     * @param {module:api/RouteFilterRulesApi~routeFilterRulesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilterRule}
     */
    routeFilterRulesUpdate(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters, callback) {
      let postBody = routeFilterRuleParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesUpdate");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFilterRulesUpdate");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling routeFilterRulesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFilterRulesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFilterRulesUpdate");
      }
      // verify the required parameter 'routeFilterRuleParameters' is set
      if (routeFilterRuleParameters === undefined || routeFilterRuleParameters === null) {
        throw new Error("Missing the required parameter 'routeFilterRuleParameters' when calling routeFilterRulesUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'ruleName': ruleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteFilterRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
