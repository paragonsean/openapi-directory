/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PatchRouteFilterRule;
import org.openapitools.client.model.RouteFilterRule;
import org.openapitools.client.model.RouteFilterRuleListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RouteFilterRulesApi
 */
@Disabled
public class RouteFilterRulesApiTest {

    private final RouteFilterRulesApi api = new RouteFilterRulesApi();

    /**
     * Creates or updates a route in the specified route filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFilterRulesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RouteFilterRule routeFilterRuleParameters = null;
        RouteFilterRule response = api.routeFilterRulesCreateOrUpdate(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified rule from a route filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFilterRulesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.routeFilterRulesDelete(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified rule from a route filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFilterRulesGetTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RouteFilterRule response = api.routeFilterRulesGet(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFilterRulesListByRouteFilterTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RouteFilterRuleListResult response = api.routeFilterRulesListByRouteFilter(resourceGroupName, routeFilterName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates a route in the specified route filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFilterRulesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PatchRouteFilterRule routeFilterRuleParameters = null;
        RouteFilterRule response = api.routeFilterRulesUpdate(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters);
        // TODO: test validations
    }

}
