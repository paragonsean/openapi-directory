/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRouteFiltersApi_H
#define OAI_OAIRouteFiltersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPatchRouteFilter.h"
#include "OAIRouteFilter.h"
#include "OAIRouteFilterListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRouteFiltersApi : public QObject {
    Q_OBJECT

public:
    OAIRouteFiltersApi(const int timeOut = 0);
    ~OAIRouteFiltersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  route_filter_parameters OAIRouteFilter [required]
    */
    virtual void routeFiltersCreateOrUpdate(const QString &resource_group_name, const QString &route_filter_name, const QString &api_version, const QString &subscription_id, const OAIRouteFilter &route_filter_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeFiltersDelete(const QString &resource_group_name, const QString &route_filter_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void routeFiltersGet(const QString &resource_group_name, const QString &route_filter_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeFiltersList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeFiltersListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  route_filter_parameters OAIPatchRouteFilter [required]
    */
    virtual void routeFiltersUpdate(const QString &resource_group_name, const QString &route_filter_name, const QString &api_version, const QString &subscription_id, const OAIPatchRouteFilter &route_filter_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void routeFiltersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void routeFiltersDeleteCallback(OAIHttpRequestWorker *worker);
    void routeFiltersGetCallback(OAIHttpRequestWorker *worker);
    void routeFiltersListCallback(OAIHttpRequestWorker *worker);
    void routeFiltersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void routeFiltersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void routeFiltersCreateOrUpdateSignal(OAIRouteFilter summary);
    void routeFiltersDeleteSignal();
    void routeFiltersGetSignal(OAIRouteFilter summary);
    void routeFiltersListSignal(OAIRouteFilterListResult summary);
    void routeFiltersListByResourceGroupSignal(OAIRouteFilterListResult summary);
    void routeFiltersUpdateSignal(OAIRouteFilter summary);


    void routeFiltersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilter summary);
    void routeFiltersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void routeFiltersGetSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilter summary);
    void routeFiltersListSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilterListResult summary);
    void routeFiltersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilterListResult summary);
    void routeFiltersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilter summary);

    Q_DECL_DEPRECATED_X("Use routeFiltersCreateOrUpdateSignalError() instead")
    void routeFiltersCreateOrUpdateSignalE(OAIRouteFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersCreateOrUpdateSignalError(OAIRouteFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersDeleteSignalError() instead")
    void routeFiltersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersGetSignalError() instead")
    void routeFiltersGetSignalE(OAIRouteFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersGetSignalError(OAIRouteFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersListSignalError() instead")
    void routeFiltersListSignalE(OAIRouteFilterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersListSignalError(OAIRouteFilterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersListByResourceGroupSignalError() instead")
    void routeFiltersListByResourceGroupSignalE(OAIRouteFilterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersListByResourceGroupSignalError(OAIRouteFilterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersUpdateSignalError() instead")
    void routeFiltersUpdateSignalE(OAIRouteFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersUpdateSignalError(OAIRouteFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use routeFiltersCreateOrUpdateSignalErrorFull() instead")
    void routeFiltersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersDeleteSignalErrorFull() instead")
    void routeFiltersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersGetSignalErrorFull() instead")
    void routeFiltersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersListSignalErrorFull() instead")
    void routeFiltersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersListByResourceGroupSignalErrorFull() instead")
    void routeFiltersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFiltersUpdateSignalErrorFull() instead")
    void routeFiltersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFiltersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
