/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner() {
    this->initializeModel();
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::~OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner() {}

void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::getEtag() const {
    return m_etag;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::getName() const {
    return m_name;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::getProperties() const {
    return m_properties;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::setProperties(const OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::getType() const {
    return m_type;
}
void OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteFilterPropertiesFormat_ipv6Peerings_inner_properties_connections_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
