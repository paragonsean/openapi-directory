# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RouteFilterRulePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, communities: List[str]=None, provisioning_state: str=None, route_filter_rule_type: str=None):
        """RouteFilterRulePropertiesFormat - a model defined in OpenAPI

        :param access: The access of this RouteFilterRulePropertiesFormat.
        :param communities: The communities of this RouteFilterRulePropertiesFormat.
        :param provisioning_state: The provisioning_state of this RouteFilterRulePropertiesFormat.
        :param route_filter_rule_type: The route_filter_rule_type of this RouteFilterRulePropertiesFormat.
        """
        self.openapi_types = {
            'access': str,
            'communities': List[str],
            'provisioning_state': str,
            'route_filter_rule_type': str
        }

        self.attribute_map = {
            'access': 'access',
            'communities': 'communities',
            'provisioning_state': 'provisioningState',
            'route_filter_rule_type': 'routeFilterRuleType'
        }

        self._access = access
        self._communities = communities
        self._provisioning_state = provisioning_state
        self._route_filter_rule_type = route_filter_rule_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteFilterRulePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteFilterRulePropertiesFormat of this RouteFilterRulePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this RouteFilterRulePropertiesFormat.

        Access to be allowed or denied.

        :return: The access of this RouteFilterRulePropertiesFormat.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this RouteFilterRulePropertiesFormat.

        Access to be allowed or denied.

        :param access: The access of this RouteFilterRulePropertiesFormat.
        :type access: str
        """
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def communities(self):
        """Gets the communities of this RouteFilterRulePropertiesFormat.

        The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].

        :return: The communities of this RouteFilterRulePropertiesFormat.
        :rtype: List[str]
        """
        return self._communities

    @communities.setter
    def communities(self, communities):
        """Sets the communities of this RouteFilterRulePropertiesFormat.

        The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].

        :param communities: The communities of this RouteFilterRulePropertiesFormat.
        :type communities: List[str]
        """
        if communities is None:
            raise ValueError("Invalid value for `communities`, must not be `None`")

        self._communities = communities

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RouteFilterRulePropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this RouteFilterRulePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RouteFilterRulePropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this RouteFilterRulePropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def route_filter_rule_type(self):
        """Gets the route_filter_rule_type of this RouteFilterRulePropertiesFormat.

        The rule type of the rule.

        :return: The route_filter_rule_type of this RouteFilterRulePropertiesFormat.
        :rtype: str
        """
        return self._route_filter_rule_type

    @route_filter_rule_type.setter
    def route_filter_rule_type(self, route_filter_rule_type):
        """Sets the route_filter_rule_type of this RouteFilterRulePropertiesFormat.

        The rule type of the rule.

        :param route_filter_rule_type: The route_filter_rule_type of this RouteFilterRulePropertiesFormat.
        :type route_filter_rule_type: str
        """
        allowed_values = ["Community"]  # noqa: E501
        if route_filter_rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_filter_rule_type` ({0}), must be one of {1}"
                .format(route_filter_rule_type, allowed_values)
            )

        self._route_filter_rule_type = route_filter_rule_type
