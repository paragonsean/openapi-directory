# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.route_filter_properties_format_ipv6_peerings_inner import RouteFilterPropertiesFormatIpv6PeeringsInner
from openapi_server.models.route_filter_rule import RouteFilterRule
from openapi_server import util


class RouteFilterPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipv6_peerings: List[RouteFilterPropertiesFormatIpv6PeeringsInner]=None, peerings: List[RouteFilterPropertiesFormatIpv6PeeringsInner]=None, provisioning_state: str=None, rules: List[RouteFilterRule]=None):
        """RouteFilterPropertiesFormat - a model defined in OpenAPI

        :param ipv6_peerings: The ipv6_peerings of this RouteFilterPropertiesFormat.
        :param peerings: The peerings of this RouteFilterPropertiesFormat.
        :param provisioning_state: The provisioning_state of this RouteFilterPropertiesFormat.
        :param rules: The rules of this RouteFilterPropertiesFormat.
        """
        self.openapi_types = {
            'ipv6_peerings': List[RouteFilterPropertiesFormatIpv6PeeringsInner],
            'peerings': List[RouteFilterPropertiesFormatIpv6PeeringsInner],
            'provisioning_state': str,
            'rules': List[RouteFilterRule]
        }

        self.attribute_map = {
            'ipv6_peerings': 'ipv6Peerings',
            'peerings': 'peerings',
            'provisioning_state': 'provisioningState',
            'rules': 'rules'
        }

        self._ipv6_peerings = ipv6_peerings
        self._peerings = peerings
        self._provisioning_state = provisioning_state
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteFilterPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteFilterPropertiesFormat of this RouteFilterPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipv6_peerings(self):
        """Gets the ipv6_peerings of this RouteFilterPropertiesFormat.

        A collection of references to express route circuit ipv6 peerings.

        :return: The ipv6_peerings of this RouteFilterPropertiesFormat.
        :rtype: List[RouteFilterPropertiesFormatIpv6PeeringsInner]
        """
        return self._ipv6_peerings

    @ipv6_peerings.setter
    def ipv6_peerings(self, ipv6_peerings):
        """Sets the ipv6_peerings of this RouteFilterPropertiesFormat.

        A collection of references to express route circuit ipv6 peerings.

        :param ipv6_peerings: The ipv6_peerings of this RouteFilterPropertiesFormat.
        :type ipv6_peerings: List[RouteFilterPropertiesFormatIpv6PeeringsInner]
        """

        self._ipv6_peerings = ipv6_peerings

    @property
    def peerings(self):
        """Gets the peerings of this RouteFilterPropertiesFormat.

        A collection of references to express route circuit peerings.

        :return: The peerings of this RouteFilterPropertiesFormat.
        :rtype: List[RouteFilterPropertiesFormatIpv6PeeringsInner]
        """
        return self._peerings

    @peerings.setter
    def peerings(self, peerings):
        """Sets the peerings of this RouteFilterPropertiesFormat.

        A collection of references to express route circuit peerings.

        :param peerings: The peerings of this RouteFilterPropertiesFormat.
        :type peerings: List[RouteFilterPropertiesFormatIpv6PeeringsInner]
        """

        self._peerings = peerings

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RouteFilterPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this RouteFilterPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RouteFilterPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this RouteFilterPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def rules(self):
        """Gets the rules of this RouteFilterPropertiesFormat.

        Collection of RouteFilterRules contained within a route filter.

        :return: The rules of this RouteFilterPropertiesFormat.
        :rtype: List[RouteFilterRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this RouteFilterPropertiesFormat.

        Collection of RouteFilterRules contained within a route filter.

        :param rules: The rules of this RouteFilterPropertiesFormat.
        :type rules: List[RouteFilterRule]
        """

        self._rules = rules
