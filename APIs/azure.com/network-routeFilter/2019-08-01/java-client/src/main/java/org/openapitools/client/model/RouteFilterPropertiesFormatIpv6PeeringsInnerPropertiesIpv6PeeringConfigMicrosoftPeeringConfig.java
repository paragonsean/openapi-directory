/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the peering configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:35.201681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig {
  public static final String SERIALIZED_NAME_ADVERTISED_COMMUNITIES = "advertisedCommunities";
  @SerializedName(SERIALIZED_NAME_ADVERTISED_COMMUNITIES)
  private List<String> advertisedCommunities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADVERTISED_PUBLIC_PREFIXES = "advertisedPublicPrefixes";
  @SerializedName(SERIALIZED_NAME_ADVERTISED_PUBLIC_PREFIXES)
  private List<String> advertisedPublicPrefixes = new ArrayList<>();

  /**
   * The advertised public prefix state of the Peering resource.
   */
  @JsonAdapter(AdvertisedPublicPrefixesStateEnum.Adapter.class)
  public enum AdvertisedPublicPrefixesStateEnum {
    NOT_CONFIGURED("NotConfigured"),
    
    CONFIGURING("Configuring"),
    
    CONFIGURED("Configured"),
    
    VALIDATION_NEEDED("ValidationNeeded");

    private String value;

    AdvertisedPublicPrefixesStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdvertisedPublicPrefixesStateEnum fromValue(String value) {
      for (AdvertisedPublicPrefixesStateEnum b : AdvertisedPublicPrefixesStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdvertisedPublicPrefixesStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdvertisedPublicPrefixesStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdvertisedPublicPrefixesStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdvertisedPublicPrefixesStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdvertisedPublicPrefixesStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADVERTISED_PUBLIC_PREFIXES_STATE = "advertisedPublicPrefixesState";
  @SerializedName(SERIALIZED_NAME_ADVERTISED_PUBLIC_PREFIXES_STATE)
  private AdvertisedPublicPrefixesStateEnum advertisedPublicPrefixesState;

  public static final String SERIALIZED_NAME_CUSTOMER_A_S_N = "customerASN";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_A_S_N)
  private Integer customerASN;

  public static final String SERIALIZED_NAME_LEGACY_MODE = "legacyMode";
  @SerializedName(SERIALIZED_NAME_LEGACY_MODE)
  private Integer legacyMode;

  public static final String SERIALIZED_NAME_ROUTING_REGISTRY_NAME = "routingRegistryName";
  @SerializedName(SERIALIZED_NAME_ROUTING_REGISTRY_NAME)
  private String routingRegistryName;

  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig() {
  }

  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig advertisedCommunities(List<String> advertisedCommunities) {
    this.advertisedCommunities = advertisedCommunities;
    return this;
  }

  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig addAdvertisedCommunitiesItem(String advertisedCommunitiesItem) {
    if (this.advertisedCommunities == null) {
      this.advertisedCommunities = new ArrayList<>();
    }
    this.advertisedCommunities.add(advertisedCommunitiesItem);
    return this;
  }

  /**
   * The communities of bgp peering. Specified for microsoft peering.
   * @return advertisedCommunities
   */
  @javax.annotation.Nullable
  public List<String> getAdvertisedCommunities() {
    return advertisedCommunities;
  }

  public void setAdvertisedCommunities(List<String> advertisedCommunities) {
    this.advertisedCommunities = advertisedCommunities;
  }


  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig advertisedPublicPrefixes(List<String> advertisedPublicPrefixes) {
    this.advertisedPublicPrefixes = advertisedPublicPrefixes;
    return this;
  }

  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig addAdvertisedPublicPrefixesItem(String advertisedPublicPrefixesItem) {
    if (this.advertisedPublicPrefixes == null) {
      this.advertisedPublicPrefixes = new ArrayList<>();
    }
    this.advertisedPublicPrefixes.add(advertisedPublicPrefixesItem);
    return this;
  }

  /**
   * The reference of AdvertisedPublicPrefixes.
   * @return advertisedPublicPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getAdvertisedPublicPrefixes() {
    return advertisedPublicPrefixes;
  }

  public void setAdvertisedPublicPrefixes(List<String> advertisedPublicPrefixes) {
    this.advertisedPublicPrefixes = advertisedPublicPrefixes;
  }


  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig advertisedPublicPrefixesState(AdvertisedPublicPrefixesStateEnum advertisedPublicPrefixesState) {
    this.advertisedPublicPrefixesState = advertisedPublicPrefixesState;
    return this;
  }

  /**
   * The advertised public prefix state of the Peering resource.
   * @return advertisedPublicPrefixesState
   */
  @javax.annotation.Nullable
  public AdvertisedPublicPrefixesStateEnum getAdvertisedPublicPrefixesState() {
    return advertisedPublicPrefixesState;
  }

  public void setAdvertisedPublicPrefixesState(AdvertisedPublicPrefixesStateEnum advertisedPublicPrefixesState) {
    this.advertisedPublicPrefixesState = advertisedPublicPrefixesState;
  }


  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig customerASN(Integer customerASN) {
    this.customerASN = customerASN;
    return this;
  }

  /**
   * The CustomerASN of the peering.
   * @return customerASN
   */
  @javax.annotation.Nullable
  public Integer getCustomerASN() {
    return customerASN;
  }

  public void setCustomerASN(Integer customerASN) {
    this.customerASN = customerASN;
  }


  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig legacyMode(Integer legacyMode) {
    this.legacyMode = legacyMode;
    return this;
  }

  /**
   * The legacy mode of the peering.
   * @return legacyMode
   */
  @javax.annotation.Nullable
  public Integer getLegacyMode() {
    return legacyMode;
  }

  public void setLegacyMode(Integer legacyMode) {
    this.legacyMode = legacyMode;
  }


  public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig routingRegistryName(String routingRegistryName) {
    this.routingRegistryName = routingRegistryName;
    return this;
  }

  /**
   * The RoutingRegistryName of the configuration.
   * @return routingRegistryName
   */
  @javax.annotation.Nullable
  public String getRoutingRegistryName() {
    return routingRegistryName;
  }

  public void setRoutingRegistryName(String routingRegistryName) {
    this.routingRegistryName = routingRegistryName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig routeFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig = (RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig) o;
    return Objects.equals(this.advertisedCommunities, routeFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.advertisedCommunities) &&
        Objects.equals(this.advertisedPublicPrefixes, routeFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.advertisedPublicPrefixes) &&
        Objects.equals(this.advertisedPublicPrefixesState, routeFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.advertisedPublicPrefixesState) &&
        Objects.equals(this.customerASN, routeFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.customerASN) &&
        Objects.equals(this.legacyMode, routeFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.legacyMode) &&
        Objects.equals(this.routingRegistryName, routeFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.routingRegistryName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertisedCommunities, advertisedPublicPrefixes, advertisedPublicPrefixesState, customerASN, legacyMode, routingRegistryName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig {\n");
    sb.append("    advertisedCommunities: ").append(toIndentedString(advertisedCommunities)).append("\n");
    sb.append("    advertisedPublicPrefixes: ").append(toIndentedString(advertisedPublicPrefixes)).append("\n");
    sb.append("    advertisedPublicPrefixesState: ").append(toIndentedString(advertisedPublicPrefixesState)).append("\n");
    sb.append("    customerASN: ").append(toIndentedString(customerASN)).append("\n");
    sb.append("    legacyMode: ").append(toIndentedString(legacyMode)).append("\n");
    sb.append("    routingRegistryName: ").append(toIndentedString(routingRegistryName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertisedCommunities");
    openapiFields.add("advertisedPublicPrefixes");
    openapiFields.add("advertisedPublicPrefixesState");
    openapiFields.add("customerASN");
    openapiFields.add("legacyMode");
    openapiFields.add("routingRegistryName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig is not found in the empty JSON string", RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("advertisedCommunities") != null && !jsonObj.get("advertisedCommunities").isJsonNull() && !jsonObj.get("advertisedCommunities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertisedCommunities` to be an array in the JSON string but got `%s`", jsonObj.get("advertisedCommunities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("advertisedPublicPrefixes") != null && !jsonObj.get("advertisedPublicPrefixes").isJsonNull() && !jsonObj.get("advertisedPublicPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertisedPublicPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("advertisedPublicPrefixes").toString()));
      }
      if ((jsonObj.get("advertisedPublicPrefixesState") != null && !jsonObj.get("advertisedPublicPrefixesState").isJsonNull()) && !jsonObj.get("advertisedPublicPrefixesState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertisedPublicPrefixesState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertisedPublicPrefixesState").toString()));
      }
      // validate the optional field `advertisedPublicPrefixesState`
      if (jsonObj.get("advertisedPublicPrefixesState") != null && !jsonObj.get("advertisedPublicPrefixesState").isJsonNull()) {
        AdvertisedPublicPrefixesStateEnum.validateJsonElement(jsonObj.get("advertisedPublicPrefixesState"));
      }
      if ((jsonObj.get("routingRegistryName") != null && !jsonObj.get("routingRegistryName").isJsonNull()) && !jsonObj.get("routingRegistryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingRegistryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingRegistryName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig>() {
           @Override
           public void write(JsonWriter out, RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
   * @throws IOException if the JSON string is invalid with respect to RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
   */
  public static RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.class);
  }

  /**
   * Convert an instance of RouteFilterPropertiesFormatIpv6PeeringsInnerPropertiesIpv6PeeringConfigMicrosoftPeeringConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

