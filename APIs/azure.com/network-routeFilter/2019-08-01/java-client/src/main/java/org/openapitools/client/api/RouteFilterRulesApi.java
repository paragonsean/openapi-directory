/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PatchRouteFilterRule;
import org.openapitools.client.model.RouteFilterRule;
import org.openapitools.client.model.RouteFilterRuleListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RouteFilterRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RouteFilterRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RouteFilterRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for routeFilterRulesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the route filter rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param routeFilterRuleParameters Parameters supplied to the create or update route filter rule operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesCreateOrUpdateCall(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, RouteFilterRule routeFilterRuleParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeFilterRuleParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "routeFilterName" + "}", localVarApiClient.escapeString(routeFilterName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routeFilterRulesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, RouteFilterRule routeFilterRuleParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'routeFilterName' is set
        if (routeFilterName == null) {
            throw new ApiException("Missing the required parameter 'routeFilterName' when calling routeFilterRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling routeFilterRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling routeFilterRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling routeFilterRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'routeFilterRuleParameters' is set
        if (routeFilterRuleParameters == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRuleParameters' when calling routeFilterRulesCreateOrUpdate(Async)");
        }

        return routeFilterRulesCreateOrUpdateCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters, _callback);

    }

    /**
     * 
     * Creates or updates a route in the specified route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the route filter rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param routeFilterRuleParameters Parameters supplied to the create or update route filter rule operation. (required)
     * @return RouteFilterRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRule routeFilterRulesCreateOrUpdate(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, RouteFilterRule routeFilterRuleParameters) throws ApiException {
        ApiResponse<RouteFilterRule> localVarResp = routeFilterRulesCreateOrUpdateWithHttpInfo(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a route in the specified route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the route filter rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param routeFilterRuleParameters Parameters supplied to the create or update route filter rule operation. (required)
     * @return ApiResponse&lt;RouteFilterRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRule> routeFilterRulesCreateOrUpdateWithHttpInfo(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, RouteFilterRule routeFilterRuleParameters) throws ApiException {
        okhttp3.Call localVarCall = routeFilterRulesCreateOrUpdateValidateBeforeCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters, null);
        Type localVarReturnType = new TypeToken<RouteFilterRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a route in the specified route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the route filter rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param routeFilterRuleParameters Parameters supplied to the create or update route filter rule operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesCreateOrUpdateAsync(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, RouteFilterRule routeFilterRuleParameters, final ApiCallback<RouteFilterRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = routeFilterRulesCreateOrUpdateValidateBeforeCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for routeFilterRulesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Rule was deleted or not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesDeleteCall(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "routeFilterName" + "}", localVarApiClient.escapeString(routeFilterName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routeFilterRulesDeleteValidateBeforeCall(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesDelete(Async)");
        }

        // verify the required parameter 'routeFilterName' is set
        if (routeFilterName == null) {
            throw new ApiException("Missing the required parameter 'routeFilterName' when calling routeFilterRulesDelete(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling routeFilterRulesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling routeFilterRulesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling routeFilterRulesDelete(Async)");
        }

        return routeFilterRulesDeleteCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified rule from a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Rule was deleted or not found. </td><td>  -  </td></tr>
     </table>
     */
    public void routeFilterRulesDelete(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        routeFilterRulesDeleteWithHttpInfo(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified rule from a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Rule was deleted or not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> routeFilterRulesDeleteWithHttpInfo(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = routeFilterRulesDeleteValidateBeforeCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified rule from a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Rule was deleted or not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesDeleteAsync(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = routeFilterRulesDeleteValidateBeforeCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for routeFilterRulesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesGetCall(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "routeFilterName" + "}", localVarApiClient.escapeString(routeFilterName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routeFilterRulesGetValidateBeforeCall(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesGet(Async)");
        }

        // verify the required parameter 'routeFilterName' is set
        if (routeFilterName == null) {
            throw new ApiException("Missing the required parameter 'routeFilterName' when calling routeFilterRulesGet(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling routeFilterRulesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling routeFilterRulesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling routeFilterRulesGet(Async)");
        }

        return routeFilterRulesGetCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified rule from a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return RouteFilterRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRule routeFilterRulesGet(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<RouteFilterRule> localVarResp = routeFilterRulesGetWithHttpInfo(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified rule from a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;RouteFilterRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRule> routeFilterRulesGetWithHttpInfo(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = routeFilterRulesGetValidateBeforeCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<RouteFilterRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified rule from a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesGetAsync(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<RouteFilterRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = routeFilterRulesGetValidateBeforeCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for routeFilterRulesListByRouteFilter
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of Route Filter Rule resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesListByRouteFilterCall(String resourceGroupName, String routeFilterName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "routeFilterName" + "}", localVarApiClient.escapeString(routeFilterName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routeFilterRulesListByRouteFilterValidateBeforeCall(String resourceGroupName, String routeFilterName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesListByRouteFilter(Async)");
        }

        // verify the required parameter 'routeFilterName' is set
        if (routeFilterName == null) {
            throw new ApiException("Missing the required parameter 'routeFilterName' when calling routeFilterRulesListByRouteFilter(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling routeFilterRulesListByRouteFilter(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling routeFilterRulesListByRouteFilter(Async)");
        }

        return routeFilterRulesListByRouteFilterCall(resourceGroupName, routeFilterName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all RouteFilterRules in a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return RouteFilterRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of Route Filter Rule resources. </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRuleListResult routeFilterRulesListByRouteFilter(String resourceGroupName, String routeFilterName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<RouteFilterRuleListResult> localVarResp = routeFilterRulesListByRouteFilterWithHttpInfo(resourceGroupName, routeFilterName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all RouteFilterRules in a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;RouteFilterRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of Route Filter Rule resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRuleListResult> routeFilterRulesListByRouteFilterWithHttpInfo(String resourceGroupName, String routeFilterName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = routeFilterRulesListByRouteFilterValidateBeforeCall(resourceGroupName, routeFilterName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<RouteFilterRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all RouteFilterRules in a route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of Route Filter Rule resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesListByRouteFilterAsync(String resourceGroupName, String routeFilterName, String apiVersion, String subscriptionId, final ApiCallback<RouteFilterRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = routeFilterRulesListByRouteFilterValidateBeforeCall(resourceGroupName, routeFilterName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for routeFilterRulesUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the route filter rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param routeFilterRuleParameters Parameters supplied to the update route filter rule operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesUpdateCall(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, PatchRouteFilterRule routeFilterRuleParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routeFilterRuleParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "routeFilterName" + "}", localVarApiClient.escapeString(routeFilterName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routeFilterRulesUpdateValidateBeforeCall(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, PatchRouteFilterRule routeFilterRuleParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling routeFilterRulesUpdate(Async)");
        }

        // verify the required parameter 'routeFilterName' is set
        if (routeFilterName == null) {
            throw new ApiException("Missing the required parameter 'routeFilterName' when calling routeFilterRulesUpdate(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling routeFilterRulesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling routeFilterRulesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling routeFilterRulesUpdate(Async)");
        }

        // verify the required parameter 'routeFilterRuleParameters' is set
        if (routeFilterRuleParameters == null) {
            throw new ApiException("Missing the required parameter 'routeFilterRuleParameters' when calling routeFilterRulesUpdate(Async)");
        }

        return routeFilterRulesUpdateCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters, _callback);

    }

    /**
     * 
     * Updates a route in the specified route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the route filter rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param routeFilterRuleParameters Parameters supplied to the update route filter rule operation. (required)
     * @return RouteFilterRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public RouteFilterRule routeFilterRulesUpdate(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, PatchRouteFilterRule routeFilterRuleParameters) throws ApiException {
        ApiResponse<RouteFilterRule> localVarResp = routeFilterRulesUpdateWithHttpInfo(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a route in the specified route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the route filter rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param routeFilterRuleParameters Parameters supplied to the update route filter rule operation. (required)
     * @return ApiResponse&lt;RouteFilterRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RouteFilterRule> routeFilterRulesUpdateWithHttpInfo(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, PatchRouteFilterRule routeFilterRuleParameters) throws ApiException {
        okhttp3.Call localVarCall = routeFilterRulesUpdateValidateBeforeCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters, null);
        Type localVarReturnType = new TypeToken<RouteFilterRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a route in the specified route filter.
     * @param resourceGroupName The name of the resource group. (required)
     * @param routeFilterName The name of the route filter. (required)
     * @param ruleName The name of the route filter rule. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param routeFilterRuleParameters Parameters supplied to the update route filter rule operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting Route Filter Rule resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routeFilterRulesUpdateAsync(String resourceGroupName, String routeFilterName, String ruleName, String apiVersion, String subscriptionId, PatchRouteFilterRule routeFilterRuleParameters, final ApiCallback<RouteFilterRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = routeFilterRulesUpdateValidateBeforeCall(resourceGroupName, routeFilterName, ruleName, apiVersion, subscriptionId, routeFilterRuleParameters, _callback);
        Type localVarReturnType = new TypeToken<RouteFilterRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
