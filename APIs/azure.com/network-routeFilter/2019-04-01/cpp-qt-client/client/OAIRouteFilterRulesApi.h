/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRouteFilterRulesApi_H
#define OAI_OAIRouteFilterRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPatchRouteFilterRule.h"
#include "OAIRouteFilterRule.h"
#include "OAIRouteFilterRuleListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRouteFilterRulesApi : public QObject {
    Q_OBJECT

public:
    OAIRouteFilterRulesApi(const int timeOut = 0);
    ~OAIRouteFilterRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  route_filter_rule_parameters OAIRouteFilterRule [required]
    */
    virtual void routeFilterRulesCreateOrUpdate(const QString &resource_group_name, const QString &route_filter_name, const QString &rule_name, const QString &api_version, const QString &subscription_id, const OAIRouteFilterRule &route_filter_rule_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeFilterRulesDelete(const QString &resource_group_name, const QString &route_filter_name, const QString &rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeFilterRulesGet(const QString &resource_group_name, const QString &route_filter_name, const QString &rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeFilterRulesListByRouteFilter(const QString &resource_group_name, const QString &route_filter_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_filter_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  route_filter_rule_parameters OAIPatchRouteFilterRule [required]
    */
    virtual void routeFilterRulesUpdate(const QString &resource_group_name, const QString &route_filter_name, const QString &rule_name, const QString &api_version, const QString &subscription_id, const OAIPatchRouteFilterRule &route_filter_rule_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void routeFilterRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void routeFilterRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void routeFilterRulesGetCallback(OAIHttpRequestWorker *worker);
    void routeFilterRulesListByRouteFilterCallback(OAIHttpRequestWorker *worker);
    void routeFilterRulesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void routeFilterRulesCreateOrUpdateSignal(OAIRouteFilterRule summary);
    void routeFilterRulesDeleteSignal();
    void routeFilterRulesGetSignal(OAIRouteFilterRule summary);
    void routeFilterRulesListByRouteFilterSignal(OAIRouteFilterRuleListResult summary);
    void routeFilterRulesUpdateSignal(OAIRouteFilterRule summary);


    void routeFilterRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilterRule summary);
    void routeFilterRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void routeFilterRulesGetSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilterRule summary);
    void routeFilterRulesListByRouteFilterSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilterRuleListResult summary);
    void routeFilterRulesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteFilterRule summary);

    Q_DECL_DEPRECATED_X("Use routeFilterRulesCreateOrUpdateSignalError() instead")
    void routeFilterRulesCreateOrUpdateSignalE(OAIRouteFilterRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesCreateOrUpdateSignalError(OAIRouteFilterRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFilterRulesDeleteSignalError() instead")
    void routeFilterRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFilterRulesGetSignalError() instead")
    void routeFilterRulesGetSignalE(OAIRouteFilterRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesGetSignalError(OAIRouteFilterRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFilterRulesListByRouteFilterSignalError() instead")
    void routeFilterRulesListByRouteFilterSignalE(OAIRouteFilterRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesListByRouteFilterSignalError(OAIRouteFilterRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFilterRulesUpdateSignalError() instead")
    void routeFilterRulesUpdateSignalE(OAIRouteFilterRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesUpdateSignalError(OAIRouteFilterRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use routeFilterRulesCreateOrUpdateSignalErrorFull() instead")
    void routeFilterRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFilterRulesDeleteSignalErrorFull() instead")
    void routeFilterRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFilterRulesGetSignalErrorFull() instead")
    void routeFilterRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFilterRulesListByRouteFilterSignalErrorFull() instead")
    void routeFilterRulesListByRouteFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesListByRouteFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeFilterRulesUpdateSignalErrorFull() instead")
    void routeFilterRulesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeFilterRulesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
