/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteFilterPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteFilterPropertiesFormat::OAIRouteFilterPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteFilterPropertiesFormat::OAIRouteFilterPropertiesFormat() {
    this->initializeModel();
}

OAIRouteFilterPropertiesFormat::~OAIRouteFilterPropertiesFormat() {}

void OAIRouteFilterPropertiesFormat::initializeModel() {

    m_ipv6_peerings_isSet = false;
    m_ipv6_peerings_isValid = false;

    m_peerings_isSet = false;
    m_peerings_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIRouteFilterPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteFilterPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_ipv6_peerings_isValid = ::OpenAPI::fromJsonValue(m_ipv6_peerings, json[QString("ipv6Peerings")]);
    m_ipv6_peerings_isSet = !json[QString("ipv6Peerings")].isNull() && m_ipv6_peerings_isValid;

    m_peerings_isValid = ::OpenAPI::fromJsonValue(m_peerings, json[QString("peerings")]);
    m_peerings_isSet = !json[QString("peerings")].isNull() && m_peerings_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIRouteFilterPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteFilterPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_ipv6_peerings.size() > 0) {
        obj.insert(QString("ipv6Peerings"), ::OpenAPI::toJsonValue(m_ipv6_peerings));
    }
    if (m_peerings.size() > 0) {
        obj.insert(QString("peerings"), ::OpenAPI::toJsonValue(m_peerings));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

QList<OAIRouteFilterPropertiesFormat_ipv6Peerings_inner> OAIRouteFilterPropertiesFormat::getIpv6Peerings() const {
    return m_ipv6_peerings;
}
void OAIRouteFilterPropertiesFormat::setIpv6Peerings(const QList<OAIRouteFilterPropertiesFormat_ipv6Peerings_inner> &ipv6_peerings) {
    m_ipv6_peerings = ipv6_peerings;
    m_ipv6_peerings_isSet = true;
}

bool OAIRouteFilterPropertiesFormat::is_ipv6_peerings_Set() const{
    return m_ipv6_peerings_isSet;
}

bool OAIRouteFilterPropertiesFormat::is_ipv6_peerings_Valid() const{
    return m_ipv6_peerings_isValid;
}

QList<OAIRouteFilterPropertiesFormat_ipv6Peerings_inner> OAIRouteFilterPropertiesFormat::getPeerings() const {
    return m_peerings;
}
void OAIRouteFilterPropertiesFormat::setPeerings(const QList<OAIRouteFilterPropertiesFormat_ipv6Peerings_inner> &peerings) {
    m_peerings = peerings;
    m_peerings_isSet = true;
}

bool OAIRouteFilterPropertiesFormat::is_peerings_Set() const{
    return m_peerings_isSet;
}

bool OAIRouteFilterPropertiesFormat::is_peerings_Valid() const{
    return m_peerings_isValid;
}

QString OAIRouteFilterPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRouteFilterPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRouteFilterPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRouteFilterPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIRouteFilterRule> OAIRouteFilterPropertiesFormat::getRules() const {
    return m_rules;
}
void OAIRouteFilterPropertiesFormat::setRules(const QList<OAIRouteFilterRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIRouteFilterPropertiesFormat::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIRouteFilterPropertiesFormat::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIRouteFilterPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ipv6_peerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteFilterPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
