/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteFilterRulePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteFilterRulePropertiesFormat::OAIRouteFilterRulePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteFilterRulePropertiesFormat::OAIRouteFilterRulePropertiesFormat() {
    this->initializeModel();
}

OAIRouteFilterRulePropertiesFormat::~OAIRouteFilterRulePropertiesFormat() {}

void OAIRouteFilterRulePropertiesFormat::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_communities_isSet = false;
    m_communities_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_route_filter_rule_type_isSet = false;
    m_route_filter_rule_type_isValid = false;
}

void OAIRouteFilterRulePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteFilterRulePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_communities_isValid = ::OpenAPI::fromJsonValue(m_communities, json[QString("communities")]);
    m_communities_isSet = !json[QString("communities")].isNull() && m_communities_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_route_filter_rule_type_isValid = ::OpenAPI::fromJsonValue(m_route_filter_rule_type, json[QString("routeFilterRuleType")]);
    m_route_filter_rule_type_isSet = !json[QString("routeFilterRuleType")].isNull() && m_route_filter_rule_type_isValid;
}

QString OAIRouteFilterRulePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteFilterRulePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_communities.size() > 0) {
        obj.insert(QString("communities"), ::OpenAPI::toJsonValue(m_communities));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_route_filter_rule_type_isSet) {
        obj.insert(QString("routeFilterRuleType"), ::OpenAPI::toJsonValue(m_route_filter_rule_type));
    }
    return obj;
}

QString OAIRouteFilterRulePropertiesFormat::getAccess() const {
    return m_access;
}
void OAIRouteFilterRulePropertiesFormat::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIRouteFilterRulePropertiesFormat::is_access_Set() const{
    return m_access_isSet;
}

bool OAIRouteFilterRulePropertiesFormat::is_access_Valid() const{
    return m_access_isValid;
}

QList<QString> OAIRouteFilterRulePropertiesFormat::getCommunities() const {
    return m_communities;
}
void OAIRouteFilterRulePropertiesFormat::setCommunities(const QList<QString> &communities) {
    m_communities = communities;
    m_communities_isSet = true;
}

bool OAIRouteFilterRulePropertiesFormat::is_communities_Set() const{
    return m_communities_isSet;
}

bool OAIRouteFilterRulePropertiesFormat::is_communities_Valid() const{
    return m_communities_isValid;
}

QString OAIRouteFilterRulePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRouteFilterRulePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRouteFilterRulePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRouteFilterRulePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIRouteFilterRulePropertiesFormat::getRouteFilterRuleType() const {
    return m_route_filter_rule_type;
}
void OAIRouteFilterRulePropertiesFormat::setRouteFilterRuleType(const QString &route_filter_rule_type) {
    m_route_filter_rule_type = route_filter_rule_type;
    m_route_filter_rule_type_isSet = true;
}

bool OAIRouteFilterRulePropertiesFormat::is_route_filter_rule_type_Set() const{
    return m_route_filter_rule_type_isSet;
}

bool OAIRouteFilterRulePropertiesFormat::is_route_filter_rule_type_Valid() const{
    return m_route_filter_rule_type_isValid;
}

bool OAIRouteFilterRulePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_filter_rule_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteFilterRulePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_isValid && m_communities_isValid && m_route_filter_rule_type_isValid && true;
}

} // namespace OpenAPI
