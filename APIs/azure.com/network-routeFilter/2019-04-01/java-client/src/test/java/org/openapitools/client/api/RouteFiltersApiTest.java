/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PatchRouteFilter;
import org.openapitools.client.model.RouteFilter;
import org.openapitools.client.model.RouteFilterListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RouteFiltersApi
 */
@Disabled
public class RouteFiltersApiTest {

    private final RouteFiltersApi api = new RouteFiltersApi();

    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFiltersCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RouteFilter routeFilterParameters = null;
        RouteFilter response = api.routeFiltersCreateOrUpdate(resourceGroupName, routeFilterName, apiVersion, subscriptionId, routeFilterParameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified route filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFiltersDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.routeFiltersDelete(resourceGroupName, routeFilterName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified route filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFiltersGetTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $expand = null;
        RouteFilter response = api.routeFiltersGet(resourceGroupName, routeFilterName, apiVersion, subscriptionId, $expand);
        // TODO: test validations
    }

    /**
     * Gets all route filters in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFiltersListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        RouteFilterListResult response = api.routeFiltersList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all route filters in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFiltersListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RouteFilterListResult response = api.routeFiltersListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates a route filter in a specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeFiltersUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String routeFilterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PatchRouteFilter routeFilterParameters = null;
        RouteFilter response = api.routeFiltersUpdate(resourceGroupName, routeFilterName, apiVersion, subscriptionId, routeFilterParameters);
        // TODO: test validations
    }

}
