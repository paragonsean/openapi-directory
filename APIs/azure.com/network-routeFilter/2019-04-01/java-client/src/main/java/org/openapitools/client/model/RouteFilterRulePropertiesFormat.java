/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Route Filter Rule Resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:50.388135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteFilterRulePropertiesFormat {
  /**
   * Access to be allowed or denied.
   */
  @JsonAdapter(AccessEnum.Adapter.class)
  public enum AccessEnum {
    ALLOW("Allow"),
    
    DENY("Deny");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String value) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private AccessEnum access;

  public static final String SERIALIZED_NAME_COMMUNITIES = "communities";
  @SerializedName(SERIALIZED_NAME_COMMUNITIES)
  private List<String> communities = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * The rule type of the rule.
   */
  @JsonAdapter(RouteFilterRuleTypeEnum.Adapter.class)
  public enum RouteFilterRuleTypeEnum {
    COMMUNITY("Community");

    private String value;

    RouteFilterRuleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteFilterRuleTypeEnum fromValue(String value) {
      for (RouteFilterRuleTypeEnum b : RouteFilterRuleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RouteFilterRuleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteFilterRuleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteFilterRuleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RouteFilterRuleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RouteFilterRuleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTE_FILTER_RULE_TYPE = "routeFilterRuleType";
  @SerializedName(SERIALIZED_NAME_ROUTE_FILTER_RULE_TYPE)
  private RouteFilterRuleTypeEnum routeFilterRuleType;

  public RouteFilterRulePropertiesFormat() {
  }

  public RouteFilterRulePropertiesFormat(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public RouteFilterRulePropertiesFormat access(AccessEnum access) {
    this.access = access;
    return this;
  }

  /**
   * Access to be allowed or denied.
   * @return access
   */
  @javax.annotation.Nonnull
  public AccessEnum getAccess() {
    return access;
  }

  public void setAccess(AccessEnum access) {
    this.access = access;
  }


  public RouteFilterRulePropertiesFormat communities(List<String> communities) {
    this.communities = communities;
    return this;
  }

  public RouteFilterRulePropertiesFormat addCommunitiesItem(String communitiesItem) {
    if (this.communities == null) {
      this.communities = new ArrayList<>();
    }
    this.communities.add(communitiesItem);
    return this;
  }

  /**
   * The collection for bgp community values to filter on. e.g. [&#39;12076:5010&#39;,&#39;12076:5020&#39;].
   * @return communities
   */
  @javax.annotation.Nonnull
  public List<String> getCommunities() {
    return communities;
  }

  public void setCommunities(List<String> communities) {
    this.communities = communities;
  }


  /**
   * The provisioning state of the resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39; and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public RouteFilterRulePropertiesFormat routeFilterRuleType(RouteFilterRuleTypeEnum routeFilterRuleType) {
    this.routeFilterRuleType = routeFilterRuleType;
    return this;
  }

  /**
   * The rule type of the rule.
   * @return routeFilterRuleType
   */
  @javax.annotation.Nonnull
  public RouteFilterRuleTypeEnum getRouteFilterRuleType() {
    return routeFilterRuleType;
  }

  public void setRouteFilterRuleType(RouteFilterRuleTypeEnum routeFilterRuleType) {
    this.routeFilterRuleType = routeFilterRuleType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteFilterRulePropertiesFormat routeFilterRulePropertiesFormat = (RouteFilterRulePropertiesFormat) o;
    return Objects.equals(this.access, routeFilterRulePropertiesFormat.access) &&
        Objects.equals(this.communities, routeFilterRulePropertiesFormat.communities) &&
        Objects.equals(this.provisioningState, routeFilterRulePropertiesFormat.provisioningState) &&
        Objects.equals(this.routeFilterRuleType, routeFilterRulePropertiesFormat.routeFilterRuleType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, communities, provisioningState, routeFilterRuleType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteFilterRulePropertiesFormat {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    communities: ").append(toIndentedString(communities)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    routeFilterRuleType: ").append(toIndentedString(routeFilterRuleType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("communities");
    openapiFields.add("provisioningState");
    openapiFields.add("routeFilterRuleType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access");
    openapiRequiredFields.add("communities");
    openapiRequiredFields.add("routeFilterRuleType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteFilterRulePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteFilterRulePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteFilterRulePropertiesFormat is not found in the empty JSON string", RouteFilterRulePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteFilterRulePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteFilterRulePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RouteFilterRulePropertiesFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // validate the required field `access`
      AccessEnum.validateJsonElement(jsonObj.get("access"));
      // ensure the required json array is present
      if (jsonObj.get("communities") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("communities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `communities` to be an array in the JSON string but got `%s`", jsonObj.get("communities").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (!jsonObj.get("routeFilterRuleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeFilterRuleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeFilterRuleType").toString()));
      }
      // validate the required field `routeFilterRuleType`
      RouteFilterRuleTypeEnum.validateJsonElement(jsonObj.get("routeFilterRuleType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteFilterRulePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteFilterRulePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteFilterRulePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteFilterRulePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteFilterRulePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, RouteFilterRulePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteFilterRulePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteFilterRulePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteFilterRulePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to RouteFilterRulePropertiesFormat
   */
  public static RouteFilterRulePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteFilterRulePropertiesFormat.class);
  }

  /**
   * Convert an instance of RouteFilterRulePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

