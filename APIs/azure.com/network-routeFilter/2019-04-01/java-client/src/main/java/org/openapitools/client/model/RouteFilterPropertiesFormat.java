/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RouteFilterPropertiesFormatIpv6PeeringsInner;
import org.openapitools.client.model.RouteFilterRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Route Filter Resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:50.388135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteFilterPropertiesFormat {
  public static final String SERIALIZED_NAME_IPV6_PEERINGS = "ipv6Peerings";
  @SerializedName(SERIALIZED_NAME_IPV6_PEERINGS)
  private List<RouteFilterPropertiesFormatIpv6PeeringsInner> ipv6Peerings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PEERINGS = "peerings";
  @SerializedName(SERIALIZED_NAME_PEERINGS)
  private List<RouteFilterPropertiesFormatIpv6PeeringsInner> peerings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<RouteFilterRule> rules = new ArrayList<>();

  public RouteFilterPropertiesFormat() {
  }

  public RouteFilterPropertiesFormat(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public RouteFilterPropertiesFormat ipv6Peerings(List<RouteFilterPropertiesFormatIpv6PeeringsInner> ipv6Peerings) {
    this.ipv6Peerings = ipv6Peerings;
    return this;
  }

  public RouteFilterPropertiesFormat addIpv6PeeringsItem(RouteFilterPropertiesFormatIpv6PeeringsInner ipv6PeeringsItem) {
    if (this.ipv6Peerings == null) {
      this.ipv6Peerings = new ArrayList<>();
    }
    this.ipv6Peerings.add(ipv6PeeringsItem);
    return this;
  }

  /**
   * A collection of references to express route circuit ipv6 peerings.
   * @return ipv6Peerings
   */
  @javax.annotation.Nullable
  public List<RouteFilterPropertiesFormatIpv6PeeringsInner> getIpv6Peerings() {
    return ipv6Peerings;
  }

  public void setIpv6Peerings(List<RouteFilterPropertiesFormatIpv6PeeringsInner> ipv6Peerings) {
    this.ipv6Peerings = ipv6Peerings;
  }


  public RouteFilterPropertiesFormat peerings(List<RouteFilterPropertiesFormatIpv6PeeringsInner> peerings) {
    this.peerings = peerings;
    return this;
  }

  public RouteFilterPropertiesFormat addPeeringsItem(RouteFilterPropertiesFormatIpv6PeeringsInner peeringsItem) {
    if (this.peerings == null) {
      this.peerings = new ArrayList<>();
    }
    this.peerings.add(peeringsItem);
    return this;
  }

  /**
   * A collection of references to express route circuit peerings.
   * @return peerings
   */
  @javax.annotation.Nullable
  public List<RouteFilterPropertiesFormatIpv6PeeringsInner> getPeerings() {
    return peerings;
  }

  public void setPeerings(List<RouteFilterPropertiesFormatIpv6PeeringsInner> peerings) {
    this.peerings = peerings;
  }


  /**
   * The provisioning state of the resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39; and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public RouteFilterPropertiesFormat rules(List<RouteFilterRule> rules) {
    this.rules = rules;
    return this;
  }

  public RouteFilterPropertiesFormat addRulesItem(RouteFilterRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * Collection of RouteFilterRules contained within a route filter.
   * @return rules
   */
  @javax.annotation.Nullable
  public List<RouteFilterRule> getRules() {
    return rules;
  }

  public void setRules(List<RouteFilterRule> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteFilterPropertiesFormat routeFilterPropertiesFormat = (RouteFilterPropertiesFormat) o;
    return Objects.equals(this.ipv6Peerings, routeFilterPropertiesFormat.ipv6Peerings) &&
        Objects.equals(this.peerings, routeFilterPropertiesFormat.peerings) &&
        Objects.equals(this.provisioningState, routeFilterPropertiesFormat.provisioningState) &&
        Objects.equals(this.rules, routeFilterPropertiesFormat.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipv6Peerings, peerings, provisioningState, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteFilterPropertiesFormat {\n");
    sb.append("    ipv6Peerings: ").append(toIndentedString(ipv6Peerings)).append("\n");
    sb.append("    peerings: ").append(toIndentedString(peerings)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipv6Peerings");
    openapiFields.add("peerings");
    openapiFields.add("provisioningState");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteFilterPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteFilterPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteFilterPropertiesFormat is not found in the empty JSON string", RouteFilterPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteFilterPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteFilterPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ipv6Peerings") != null && !jsonObj.get("ipv6Peerings").isJsonNull()) {
        JsonArray jsonArrayipv6Peerings = jsonObj.getAsJsonArray("ipv6Peerings");
        if (jsonArrayipv6Peerings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipv6Peerings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipv6Peerings` to be an array in the JSON string but got `%s`", jsonObj.get("ipv6Peerings").toString()));
          }

          // validate the optional field `ipv6Peerings` (array)
          for (int i = 0; i < jsonArrayipv6Peerings.size(); i++) {
            RouteFilterPropertiesFormatIpv6PeeringsInner.validateJsonElement(jsonArrayipv6Peerings.get(i));
          };
        }
      }
      if (jsonObj.get("peerings") != null && !jsonObj.get("peerings").isJsonNull()) {
        JsonArray jsonArraypeerings = jsonObj.getAsJsonArray("peerings");
        if (jsonArraypeerings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("peerings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `peerings` to be an array in the JSON string but got `%s`", jsonObj.get("peerings").toString()));
          }

          // validate the optional field `peerings` (array)
          for (int i = 0; i < jsonArraypeerings.size(); i++) {
            RouteFilterPropertiesFormatIpv6PeeringsInner.validateJsonElement(jsonArraypeerings.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            RouteFilterRule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteFilterPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteFilterPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteFilterPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteFilterPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteFilterPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, RouteFilterPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteFilterPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteFilterPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteFilterPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to RouteFilterPropertiesFormat
   */
  public static RouteFilterPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteFilterPropertiesFormat.class);
  }

  /**
   * Convert an instance of RouteFilterPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

