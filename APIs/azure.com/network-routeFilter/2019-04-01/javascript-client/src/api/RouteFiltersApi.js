/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchRouteFilter from '../model/PatchRouteFilter';
import RouteFilter from '../model/RouteFilter';
import RouteFilterListResult from '../model/RouteFilterListResult';

/**
* RouteFilters service.
* @module api/RouteFiltersApi
* @version 2019-04-01
*/
export default class RouteFiltersApi {

    /**
    * Constructs a new RouteFiltersApi. 
    * @alias module:api/RouteFiltersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the routeFiltersCreateOrUpdate operation.
     * @callback module:api/RouteFiltersApi~routeFiltersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a route filter in a specified resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/RouteFilter} routeFilterParameters Parameters supplied to the create or update route filter operation.
     * @param {module:api/RouteFiltersApi~routeFiltersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilter}
     */
    routeFiltersCreateOrUpdate(resourceGroupName, routeFilterName, apiVersion, subscriptionId, routeFilterParameters, callback) {
      let postBody = routeFilterParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFiltersCreateOrUpdate");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFiltersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFiltersCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFiltersCreateOrUpdate");
      }
      // verify the required parameter 'routeFilterParameters' is set
      if (routeFilterParameters === undefined || routeFilterParameters === null) {
        throw new Error("Missing the required parameter 'routeFilterParameters' when calling routeFiltersCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteFilter;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFiltersDelete operation.
     * @callback module:api/RouteFiltersApi~routeFiltersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified route filter.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteFiltersApi~routeFiltersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routeFiltersDelete(resourceGroupName, routeFilterName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFiltersDelete");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFiltersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFiltersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFiltersDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFiltersGet operation.
     * @callback module:api/RouteFiltersApi~routeFiltersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified route filter.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Expands referenced express route bgp peering resources.
     * @param {module:api/RouteFiltersApi~routeFiltersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilter}
     */
    routeFiltersGet(resourceGroupName, routeFilterName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFiltersGet");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFiltersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFiltersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFiltersGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteFilter;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFiltersList operation.
     * @callback module:api/RouteFiltersApi~routeFiltersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilterListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all route filters in a subscription.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteFiltersApi~routeFiltersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilterListResult}
     */
    routeFiltersList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFiltersList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFiltersList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteFilterListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/routeFilters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFiltersListByResourceGroup operation.
     * @callback module:api/RouteFiltersApi~routeFiltersListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilterListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all route filters in a resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteFiltersApi~routeFiltersListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilterListResult}
     */
    routeFiltersListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFiltersListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFiltersListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFiltersListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteFilterListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeFiltersUpdate operation.
     * @callback module:api/RouteFiltersApi~routeFiltersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a route filter in a specified resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeFilterName The name of the route filter.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/PatchRouteFilter} routeFilterParameters Parameters supplied to the update route filter operation.
     * @param {module:api/RouteFiltersApi~routeFiltersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteFilter}
     */
    routeFiltersUpdate(resourceGroupName, routeFilterName, apiVersion, subscriptionId, routeFilterParameters, callback) {
      let postBody = routeFilterParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeFiltersUpdate");
      }
      // verify the required parameter 'routeFilterName' is set
      if (routeFilterName === undefined || routeFilterName === null) {
        throw new Error("Missing the required parameter 'routeFilterName' when calling routeFiltersUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeFiltersUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeFiltersUpdate");
      }
      // verify the required parameter 'routeFilterParameters' is set
      if (routeFilterParameters === undefined || routeFilterParameters === null) {
        throw new Error("Missing the required parameter 'routeFilterParameters' when calling routeFiltersUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeFilterName': routeFilterName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteFilter;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
