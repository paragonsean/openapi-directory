/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AnalyzeResult from './model/AnalyzeResult';
import AnalyzeWithCustomModelRequest from './model/AnalyzeWithCustomModelRequest';
import ErrorInformation from './model/ErrorInformation';
import ErrorResponse from './model/ErrorResponse';
import ExtractedKeyValuePair from './model/ExtractedKeyValuePair';
import ExtractedPage from './model/ExtractedPage';
import ExtractedTable from './model/ExtractedTable';
import ExtractedTableColumn from './model/ExtractedTableColumn';
import ExtractedToken from './model/ExtractedToken';
import FormDocumentReport from './model/FormDocumentReport';
import FormOperationError from './model/FormOperationError';
import InnerError from './model/InnerError';
import KeysResult from './model/KeysResult';
import ModelResult from './model/ModelResult';
import ModelsResult from './model/ModelsResult';
import TrainRequest from './model/TrainRequest';
import TrainResult from './model/TrainResult';
import TrainSourceFilter from './model/TrainSourceFilter';
import DefaultApi from './api/DefaultApi';


/**
* Extracts information from forms and images into structured data based on a model created by a set of representative training forms..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FormRecognizerClient = require('index'); // See note below*.
* var xxxSvc = new FormRecognizerClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FormRecognizerClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FormRecognizerClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FormRecognizerClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0-preview
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AnalyzeResult model constructor.
     * @property {module:model/AnalyzeResult}
     */
    AnalyzeResult,

    /**
     * The AnalyzeWithCustomModelRequest model constructor.
     * @property {module:model/AnalyzeWithCustomModelRequest}
     */
    AnalyzeWithCustomModelRequest,

    /**
     * The ErrorInformation model constructor.
     * @property {module:model/ErrorInformation}
     */
    ErrorInformation,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The ExtractedKeyValuePair model constructor.
     * @property {module:model/ExtractedKeyValuePair}
     */
    ExtractedKeyValuePair,

    /**
     * The ExtractedPage model constructor.
     * @property {module:model/ExtractedPage}
     */
    ExtractedPage,

    /**
     * The ExtractedTable model constructor.
     * @property {module:model/ExtractedTable}
     */
    ExtractedTable,

    /**
     * The ExtractedTableColumn model constructor.
     * @property {module:model/ExtractedTableColumn}
     */
    ExtractedTableColumn,

    /**
     * The ExtractedToken model constructor.
     * @property {module:model/ExtractedToken}
     */
    ExtractedToken,

    /**
     * The FormDocumentReport model constructor.
     * @property {module:model/FormDocumentReport}
     */
    FormDocumentReport,

    /**
     * The FormOperationError model constructor.
     * @property {module:model/FormOperationError}
     */
    FormOperationError,

    /**
     * The InnerError model constructor.
     * @property {module:model/InnerError}
     */
    InnerError,

    /**
     * The KeysResult model constructor.
     * @property {module:model/KeysResult}
     */
    KeysResult,

    /**
     * The ModelResult model constructor.
     * @property {module:model/ModelResult}
     */
    ModelResult,

    /**
     * The ModelsResult model constructor.
     * @property {module:model/ModelsResult}
     */
    ModelsResult,

    /**
     * The TrainRequest model constructor.
     * @property {module:model/TrainRequest}
     */
    TrainRequest,

    /**
     * The TrainResult model constructor.
     * @property {module:model/TrainResult}
     */
    TrainResult,

    /**
     * The TrainSourceFilter model constructor.
     * @property {module:model/TrainSourceFilter}
     */
    TrainSourceFilter,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
