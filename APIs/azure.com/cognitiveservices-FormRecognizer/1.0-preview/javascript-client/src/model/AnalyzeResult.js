/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtractedPage from './ExtractedPage';
import FormOperationError from './FormOperationError';

/**
 * The AnalyzeResult model module.
 * @module model/AnalyzeResult
 * @version 1.0-preview
 */
class AnalyzeResult {
    /**
     * Constructs a new <code>AnalyzeResult</code>.
     * Analyze API call result.
     * @alias module:model/AnalyzeResult
     */
    constructor() { 
        
        AnalyzeResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalyzeResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyzeResult} obj Optional instance to populate.
     * @return {module:model/AnalyzeResult} The populated <code>AnalyzeResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyzeResult();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [FormOperationError]);
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], [ExtractedPage]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyzeResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyzeResult</code>.
     */
    static validateJSON(data) {
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                FormOperationError.validateJSON(item);
            };
        }
        if (data['pages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pages'])) {
                throw new Error("Expected the field `pages` to be an array in the JSON data but got " + data['pages']);
            }
            // validate the optional field `pages` (array)
            for (const item of data['pages']) {
                ExtractedPage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * List of errors reported during the analyze  operation.
 * @member {Array.<module:model/FormOperationError>} errors
 */
AnalyzeResult.prototype['errors'] = undefined;

/**
 * Page level information extracted in the analyzed  document.
 * @member {Array.<module:model/ExtractedPage>} pages
 */
AnalyzeResult.prototype['pages'] = undefined;

/**
 * Status of the analyze operation.
 * @member {module:model/AnalyzeResult.StatusEnum} status
 */
AnalyzeResult.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AnalyzeResult['StatusEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "partialSuccess"
     * @const
     */
    "partialSuccess": "partialSuccess",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure"
};



export default AnalyzeResult;

