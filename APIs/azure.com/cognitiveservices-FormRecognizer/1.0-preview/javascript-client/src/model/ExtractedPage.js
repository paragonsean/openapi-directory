/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtractedKeyValuePair from './ExtractedKeyValuePair';
import ExtractedTable from './ExtractedTable';

/**
 * The ExtractedPage model module.
 * @module model/ExtractedPage
 * @version 1.0-preview
 */
class ExtractedPage {
    /**
     * Constructs a new <code>ExtractedPage</code>.
     * Extraction information of a single page in a  with a document.
     * @alias module:model/ExtractedPage
     */
    constructor() { 
        
        ExtractedPage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtractedPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtractedPage} obj Optional instance to populate.
     * @return {module:model/ExtractedPage} The populated <code>ExtractedPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtractedPage();

            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('keyValuePairs')) {
                obj['keyValuePairs'] = ApiClient.convertToType(data['keyValuePairs'], [ExtractedKeyValuePair]);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('tables')) {
                obj['tables'] = ApiClient.convertToType(data['tables'], [ExtractedTable]);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtractedPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtractedPage</code>.
     */
    static validateJSON(data) {
        if (data['keyValuePairs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keyValuePairs'])) {
                throw new Error("Expected the field `keyValuePairs` to be an array in the JSON data but got " + data['keyValuePairs']);
            }
            // validate the optional field `keyValuePairs` (array)
            for (const item of data['keyValuePairs']) {
                ExtractedKeyValuePair.validateJSON(item);
            };
        }
        if (data['tables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tables'])) {
                throw new Error("Expected the field `tables` to be an array in the JSON data but got " + data['tables']);
            }
            // validate the optional field `tables` (array)
            for (const item of data['tables']) {
                ExtractedTable.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Cluster identifier.
 * @member {Number} clusterId
 */
ExtractedPage.prototype['clusterId'] = undefined;

/**
 * Height of the page (in pixels).
 * @member {Number} height
 */
ExtractedPage.prototype['height'] = undefined;

/**
 * List of Key-Value pairs extracted from the page.
 * @member {Array.<module:model/ExtractedKeyValuePair>} keyValuePairs
 */
ExtractedPage.prototype['keyValuePairs'] = undefined;

/**
 * Page number.
 * @member {Number} number
 */
ExtractedPage.prototype['number'] = undefined;

/**
 * List of Tables and their information extracted from the page.
 * @member {Array.<module:model/ExtractedTable>} tables
 */
ExtractedPage.prototype['tables'] = undefined;

/**
 * Width of the page (in pixels).
 * @member {Number} width
 */
ExtractedPage.prototype['width'] = undefined;






export default ExtractedPage;

