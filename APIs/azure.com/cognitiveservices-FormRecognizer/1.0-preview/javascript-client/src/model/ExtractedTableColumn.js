/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtractedToken from './ExtractedToken';

/**
 * The ExtractedTableColumn model module.
 * @module model/ExtractedTableColumn
 * @version 1.0-preview
 */
class ExtractedTableColumn {
    /**
     * Constructs a new <code>ExtractedTableColumn</code>.
     * Extraction information of a column in  a table.
     * @alias module:model/ExtractedTableColumn
     */
    constructor() { 
        
        ExtractedTableColumn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtractedTableColumn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtractedTableColumn} obj Optional instance to populate.
     * @return {module:model/ExtractedTableColumn} The populated <code>ExtractedTableColumn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtractedTableColumn();

            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [[ExtractedToken]]);
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], [ExtractedToken]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtractedTableColumn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtractedTableColumn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['entries'])) {
            throw new Error("Expected the field `entries` to be an array in the JSON data but got " + data['entries']);
        }
        if (data['header']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['header'])) {
                throw new Error("Expected the field `header` to be an array in the JSON data but got " + data['header']);
            }
            // validate the optional field `header` (array)
            for (const item of data['header']) {
                ExtractedToken.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Extracted text for each cell of a column. Each cell  in the column can have a list of one or more tokens.
 * @member {Array.<Array.<module:model/ExtractedToken>>} entries
 */
ExtractedTableColumn.prototype['entries'] = undefined;

/**
 * List of extracted tokens for the column header.
 * @member {Array.<module:model/ExtractedToken>} header
 */
ExtractedTableColumn.prototype['header'] = undefined;






export default ExtractedTableColumn;

