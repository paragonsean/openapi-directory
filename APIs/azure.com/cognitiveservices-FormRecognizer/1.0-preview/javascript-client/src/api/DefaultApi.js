/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalyzeResult from '../model/AnalyzeResult';
import AnalyzeWithCustomModelRequest from '../model/AnalyzeWithCustomModelRequest';
import ErrorResponse from '../model/ErrorResponse';
import KeysResult from '../model/KeysResult';
import ModelResult from '../model/ModelResult';
import ModelsResult from '../model/ModelsResult';
import TrainRequest from '../model/TrainRequest';
import TrainResult from '../model/TrainResult';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyzeWithCustomModel operation.
     * @callback module:api/DefaultApi~analyzeWithCustomModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyzeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze Form
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.
     * @param {String} id Model Identifier to analyze the document with.
     * @param {module:model/AnalyzeWithCustomModelRequest} analyzeWithCustomModelRequest 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [keys] An optional list of known keys to extract the values for.
     * @param {module:api/DefaultApi~analyzeWithCustomModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyzeResult}
     */
    analyzeWithCustomModel(id, analyzeWithCustomModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = analyzeWithCustomModelRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling analyzeWithCustomModel");
      }
      // verify the required parameter 'analyzeWithCustomModelRequest' is set
      if (analyzeWithCustomModelRequest === undefined || analyzeWithCustomModelRequest === null) {
        throw new Error("Missing the required parameter 'analyzeWithCustomModelRequest' when calling analyzeWithCustomModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'keys': this.apiClient.buildCollectionParam(opts['keys'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/pdf', 'image/jpeg', 'image/png', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AnalyzeResult;
      return this.apiClient.callApi(
        '/custom/models/{id}/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomModel operation.
     * @callback module:api/DefaultApi~deleteCustomModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Model
     * Delete model artifacts.
     * @param {String} id The identifier of the model to delete.
     * @param {module:api/DefaultApi~deleteCustomModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomModel(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCustomModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/custom/models/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomModel operation.
     * @callback module:api/DefaultApi~getCustomModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Model
     * Get information about a model.
     * @param {String} id Model identifier.
     * @param {module:api/DefaultApi~getCustomModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResult}
     */
    getCustomModel(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomModel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResult;
      return this.apiClient.callApi(
        '/custom/models/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomModels operation.
     * @callback module:api/DefaultApi~getCustomModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Models
     * Get information about all trained custom models
     * @param {module:api/DefaultApi~getCustomModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsResult}
     */
    getCustomModels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsResult;
      return this.apiClient.callApi(
        '/custom/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtractedKeys operation.
     * @callback module:api/DefaultApi~getExtractedKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeysResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Keys
     * Retrieve the keys that were   extracted during the training of the specified model.
     * @param {String} id Model identifier.
     * @param {module:api/DefaultApi~getExtractedKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeysResult}
     */
    getExtractedKeys(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExtractedKeys");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeysResult;
      return this.apiClient.callApi(
        '/custom/models/{id}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trainCustomModel operation.
     * @callback module:api/DefaultApi~trainCustomModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Train Model
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration   setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'.\"   Other type of content is ignored.
     * @param {module:model/TrainRequest} trainRequest Request object for training.
     * @param {module:api/DefaultApi~trainCustomModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainResult}
     */
    trainCustomModel(trainRequest, callback) {
      let postBody = trainRequest;
      // verify the required parameter 'trainRequest' is set
      if (trainRequest === undefined || trainRequest === null) {
        throw new Error("Missing the required parameter 'trainRequest' when calling trainCustomModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrainResult;
      return this.apiClient.callApi(
        '/custom/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
