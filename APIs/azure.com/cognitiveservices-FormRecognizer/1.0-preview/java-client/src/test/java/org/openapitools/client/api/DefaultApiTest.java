/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalyzeResult;
import org.openapitools.client.model.AnalyzeWithCustomModelRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.KeysResult;
import org.openapitools.client.model.ModelResult;
import org.openapitools.client.model.ModelsResult;
import org.openapitools.client.model.TrainRequest;
import org.openapitools.client.model.TrainResult;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Analyze Form
     *
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39; or &#39;image/png&#39;. A success response is returned in JSON.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyzeWithCustomModelTest() throws ApiException {
        UUID id = null;
        AnalyzeWithCustomModelRequest analyzeWithCustomModelRequest = null;
        List<String> keys = null;
        AnalyzeResult response = api.analyzeWithCustomModel(id, analyzeWithCustomModelRequest, keys);
        // TODO: test validations
    }

    /**
     * Delete Model
     *
     * Delete model artifacts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomModelTest() throws ApiException {
        UUID id = null;
        api.deleteCustomModel(id);
        // TODO: test validations
    }

    /**
     * Get Model
     *
     * Get information about a model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomModelTest() throws ApiException {
        UUID id = null;
        ModelResult response = api.getCustomModel(id);
        // TODO: test validations
    }

    /**
     * Get Models
     *
     * Get information about all trained custom models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomModelsTest() throws ApiException {
        ModelsResult response = api.getCustomModels();
        // TODO: test validations
    }

    /**
     * Get Keys
     *
     * Retrieve the keys that were   extracted during the training of the specified model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtractedKeysTest() throws ApiException {
        UUID id = null;
        KeysResult response = api.getExtractedKeys(id);
        // TODO: test validations
    }

    /**
     * Train Model
     *
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration   setting value e.g., if &#39;{Mounts:Input}&#39; configuration setting value is &#39;/input&#39; then a valid source path would be &#39;/input/contosodataset&#39;. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - &#39;application/pdf&#39;, &#39;image/jpeg&#39; and &#39;image/png&#39;.\&quot;   Other type of content is ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trainCustomModelTest() throws ApiException {
        TrainRequest trainRequest = null;
        TrainResult response = api.trainCustomModel(trainRequest);
        // TODO: test validations
    }

}
