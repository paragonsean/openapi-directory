/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExtractedKeyValuePair;
import org.openapitools.client.model.ExtractedTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Extraction information of a single page in a  with a document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:43.523364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtractedPage {
  public static final String SERIALIZED_NAME_CLUSTER_ID = "clusterId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private Integer clusterId;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_KEY_VALUE_PAIRS = "keyValuePairs";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE_PAIRS)
  private List<ExtractedKeyValuePair> keyValuePairs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_TABLES = "tables";
  @SerializedName(SERIALIZED_NAME_TABLES)
  private List<ExtractedTable> tables = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public ExtractedPage() {
  }

  public ExtractedPage clusterId(Integer clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * Cluster identifier.
   * @return clusterId
   */
  @javax.annotation.Nullable
  public Integer getClusterId() {
    return clusterId;
  }

  public void setClusterId(Integer clusterId) {
    this.clusterId = clusterId;
  }


  public ExtractedPage height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Height of the page (in pixels).
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public ExtractedPage keyValuePairs(List<ExtractedKeyValuePair> keyValuePairs) {
    this.keyValuePairs = keyValuePairs;
    return this;
  }

  public ExtractedPage addKeyValuePairsItem(ExtractedKeyValuePair keyValuePairsItem) {
    if (this.keyValuePairs == null) {
      this.keyValuePairs = new ArrayList<>();
    }
    this.keyValuePairs.add(keyValuePairsItem);
    return this;
  }

  /**
   * List of Key-Value pairs extracted from the page.
   * @return keyValuePairs
   */
  @javax.annotation.Nullable
  public List<ExtractedKeyValuePair> getKeyValuePairs() {
    return keyValuePairs;
  }

  public void setKeyValuePairs(List<ExtractedKeyValuePair> keyValuePairs) {
    this.keyValuePairs = keyValuePairs;
  }


  public ExtractedPage number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Page number.
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public ExtractedPage tables(List<ExtractedTable> tables) {
    this.tables = tables;
    return this;
  }

  public ExtractedPage addTablesItem(ExtractedTable tablesItem) {
    if (this.tables == null) {
      this.tables = new ArrayList<>();
    }
    this.tables.add(tablesItem);
    return this;
  }

  /**
   * List of Tables and their information extracted from the page.
   * @return tables
   */
  @javax.annotation.Nullable
  public List<ExtractedTable> getTables() {
    return tables;
  }

  public void setTables(List<ExtractedTable> tables) {
    this.tables = tables;
  }


  public ExtractedPage width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Width of the page (in pixels).
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtractedPage extractedPage = (ExtractedPage) o;
    return Objects.equals(this.clusterId, extractedPage.clusterId) &&
        Objects.equals(this.height, extractedPage.height) &&
        Objects.equals(this.keyValuePairs, extractedPage.keyValuePairs) &&
        Objects.equals(this.number, extractedPage.number) &&
        Objects.equals(this.tables, extractedPage.tables) &&
        Objects.equals(this.width, extractedPage.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterId, height, keyValuePairs, number, tables, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtractedPage {\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    keyValuePairs: ").append(toIndentedString(keyValuePairs)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterId");
    openapiFields.add("height");
    openapiFields.add("keyValuePairs");
    openapiFields.add("number");
    openapiFields.add("tables");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtractedPage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtractedPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtractedPage is not found in the empty JSON string", ExtractedPage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtractedPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtractedPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("keyValuePairs") != null && !jsonObj.get("keyValuePairs").isJsonNull()) {
        JsonArray jsonArraykeyValuePairs = jsonObj.getAsJsonArray("keyValuePairs");
        if (jsonArraykeyValuePairs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keyValuePairs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keyValuePairs` to be an array in the JSON string but got `%s`", jsonObj.get("keyValuePairs").toString()));
          }

          // validate the optional field `keyValuePairs` (array)
          for (int i = 0; i < jsonArraykeyValuePairs.size(); i++) {
            ExtractedKeyValuePair.validateJsonElement(jsonArraykeyValuePairs.get(i));
          };
        }
      }
      if (jsonObj.get("tables") != null && !jsonObj.get("tables").isJsonNull()) {
        JsonArray jsonArraytables = jsonObj.getAsJsonArray("tables");
        if (jsonArraytables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tables` to be an array in the JSON string but got `%s`", jsonObj.get("tables").toString()));
          }

          // validate the optional field `tables` (array)
          for (int i = 0; i < jsonArraytables.size(); i++) {
            ExtractedTable.validateJsonElement(jsonArraytables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtractedPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtractedPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtractedPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtractedPage.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtractedPage>() {
           @Override
           public void write(JsonWriter out, ExtractedPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtractedPage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtractedPage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtractedPage
   * @throws IOException if the JSON string is invalid with respect to ExtractedPage
   */
  public static ExtractedPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtractedPage.class);
  }

  /**
   * Convert an instance of ExtractedPage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

