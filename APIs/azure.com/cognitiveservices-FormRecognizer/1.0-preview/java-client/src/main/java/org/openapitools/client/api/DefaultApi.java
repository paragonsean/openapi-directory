/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnalyzeResult;
import org.openapitools.client.model.AnalyzeWithCustomModelRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.KeysResult;
import org.openapitools.client.model.ModelResult;
import org.openapitools.client.model.ModelsResult;
import org.openapitools.client.model.TrainRequest;
import org.openapitools.client.model.TrainResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyzeWithCustomModel
     * @param id Model Identifier to analyze the document with. (required)
     * @param analyzeWithCustomModelRequest  (required)
     * @param keys An optional list of known keys to extract the values for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeWithCustomModelCall(UUID id, AnalyzeWithCustomModelRequest analyzeWithCustomModelRequest, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyzeWithCustomModelRequest;

        // create path and map variables
        String localVarPath = "/custom/models/{id}/analyze"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/pdf",
            "image/jpeg",
            "image/png",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeWithCustomModelValidateBeforeCall(UUID id, AnalyzeWithCustomModelRequest analyzeWithCustomModelRequest, List<String> keys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling analyzeWithCustomModel(Async)");
        }

        // verify the required parameter 'analyzeWithCustomModelRequest' is set
        if (analyzeWithCustomModelRequest == null) {
            throw new ApiException("Missing the required parameter 'analyzeWithCustomModelRequest' when calling analyzeWithCustomModel(Async)");
        }

        return analyzeWithCustomModelCall(id, analyzeWithCustomModelRequest, keys, _callback);

    }

    /**
     * Analyze Form
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39; or &#39;image/png&#39;. A success response is returned in JSON.
     * @param id Model Identifier to analyze the document with. (required)
     * @param analyzeWithCustomModelRequest  (required)
     * @param keys An optional list of known keys to extract the values for. (optional)
     * @return AnalyzeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzeResult analyzeWithCustomModel(UUID id, AnalyzeWithCustomModelRequest analyzeWithCustomModelRequest, List<String> keys) throws ApiException {
        ApiResponse<AnalyzeResult> localVarResp = analyzeWithCustomModelWithHttpInfo(id, analyzeWithCustomModelRequest, keys);
        return localVarResp.getData();
    }

    /**
     * Analyze Form
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39; or &#39;image/png&#39;. A success response is returned in JSON.
     * @param id Model Identifier to analyze the document with. (required)
     * @param analyzeWithCustomModelRequest  (required)
     * @param keys An optional list of known keys to extract the values for. (optional)
     * @return ApiResponse&lt;AnalyzeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeResult> analyzeWithCustomModelWithHttpInfo(UUID id, AnalyzeWithCustomModelRequest analyzeWithCustomModelRequest, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = analyzeWithCustomModelValidateBeforeCall(id, analyzeWithCustomModelRequest, keys, null);
        Type localVarReturnType = new TypeToken<AnalyzeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze Form (asynchronously)
     * Extract key-value pairs from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39; or &#39;image/png&#39;. A success response is returned in JSON.
     * @param id Model Identifier to analyze the document with. (required)
     * @param analyzeWithCustomModelRequest  (required)
     * @param keys An optional list of known keys to extract the values for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeWithCustomModelAsync(UUID id, AnalyzeWithCustomModelRequest analyzeWithCustomModelRequest, List<String> keys, final ApiCallback<AnalyzeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeWithCustomModelValidateBeforeCall(id, analyzeWithCustomModelRequest, keys, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomModel
     * @param id The identifier of the model to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed model artifacts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomModelCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom/models/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomModelValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCustomModel(Async)");
        }

        return deleteCustomModelCall(id, _callback);

    }

    /**
     * Delete Model
     * Delete model artifacts.
     * @param id The identifier of the model to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed model artifacts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomModel(UUID id) throws ApiException {
        deleteCustomModelWithHttpInfo(id);
    }

    /**
     * Delete Model
     * Delete model artifacts.
     * @param id The identifier of the model to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed model artifacts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomModelWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomModelValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Model (asynchronously)
     * Delete model artifacts.
     * @param id The identifier of the model to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed model artifacts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomModelAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomModelValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomModel
     * @param id Model identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomModelCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom/models/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomModelValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCustomModel(Async)");
        }

        return getCustomModelCall(id, _callback);

    }

    /**
     * Get Model
     * Get information about a model.
     * @param id Model identifier. (required)
     * @return ModelResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ModelResult getCustomModel(UUID id) throws ApiException {
        ApiResponse<ModelResult> localVarResp = getCustomModelWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Model
     * Get information about a model.
     * @param id Model identifier. (required)
     * @return ApiResponse&lt;ModelResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResult> getCustomModelWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getCustomModelValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModelResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Model (asynchronously)
     * Get information about a model.
     * @param id Model identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomModelAsync(UUID id, final ApiCallback<ModelResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomModelValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModelResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomModels
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomModelsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomModelsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCustomModelsCall(_callback);

    }

    /**
     * Get Models
     * Get information about all trained custom models
     * @return ModelsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ModelsResult getCustomModels() throws ApiException {
        ApiResponse<ModelsResult> localVarResp = getCustomModelsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Models
     * Get information about all trained custom models
     * @return ApiResponse&lt;ModelsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsResult> getCustomModelsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomModelsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Models (asynchronously)
     * Get information about all trained custom models
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomModelsAsync(final ApiCallback<ModelsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomModelsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtractedKeys
     * @param id Model identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtractedKeysCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom/models/{id}/keys"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtractedKeysValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getExtractedKeys(Async)");
        }

        return getExtractedKeysCall(id, _callback);

    }

    /**
     * Get Keys
     * Retrieve the keys that were   extracted during the training of the specified model.
     * @param id Model identifier. (required)
     * @return KeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public KeysResult getExtractedKeys(UUID id) throws ApiException {
        ApiResponse<KeysResult> localVarResp = getExtractedKeysWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Keys
     * Retrieve the keys that were   extracted during the training of the specified model.
     * @param id Model identifier. (required)
     * @return ApiResponse&lt;KeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeysResult> getExtractedKeysWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getExtractedKeysValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Keys (asynchronously)
     * Retrieve the keys that were   extracted during the training of the specified model.
     * @param id Model identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtractedKeysAsync(UUID id, final ApiCallback<KeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtractedKeysValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trainCustomModel
     * @param trainRequest Request object for training. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainCustomModelCall(TrainRequest trainRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainRequest;

        // create path and map variables
        String localVarPath = "/custom/train";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trainCustomModelValidateBeforeCall(TrainRequest trainRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trainRequest' is set
        if (trainRequest == null) {
            throw new ApiException("Missing the required parameter 'trainRequest' when calling trainCustomModel(Async)");
        }

        return trainCustomModelCall(trainRequest, _callback);

    }

    /**
     * Train Model
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration   setting value e.g., if &#39;{Mounts:Input}&#39; configuration setting value is &#39;/input&#39; then a valid source path would be &#39;/input/contosodataset&#39;. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - &#39;application/pdf&#39;, &#39;image/jpeg&#39; and &#39;image/png&#39;.\&quot;   Other type of content is ignored.
     * @param trainRequest Request object for training. (required)
     * @return TrainResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public TrainResult trainCustomModel(TrainRequest trainRequest) throws ApiException {
        ApiResponse<TrainResult> localVarResp = trainCustomModelWithHttpInfo(trainRequest);
        return localVarResp.getData();
    }

    /**
     * Train Model
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration   setting value e.g., if &#39;{Mounts:Input}&#39; configuration setting value is &#39;/input&#39; then a valid source path would be &#39;/input/contosodataset&#39;. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - &#39;application/pdf&#39;, &#39;image/jpeg&#39; and &#39;image/png&#39;.\&quot;   Other type of content is ignored.
     * @param trainRequest Request object for training. (required)
     * @return ApiResponse&lt;TrainResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrainResult> trainCustomModelWithHttpInfo(TrainRequest trainRequest) throws ApiException {
        okhttp3.Call localVarCall = trainCustomModelValidateBeforeCall(trainRequest, null);
        Type localVarReturnType = new TypeToken<TrainResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Train Model (asynchronously)
     * Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration   setting value e.g., if &#39;{Mounts:Input}&#39; configuration setting value is &#39;/input&#39; then a valid source path would be &#39;/input/contosodataset&#39;. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - &#39;application/pdf&#39;, &#39;image/jpeg&#39; and &#39;image/png&#39;.\&quot;   Other type of content is ignored.
     * @param trainRequest Request object for training. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainCustomModelAsync(TrainRequest trainRequest, final ApiCallback<TrainResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = trainCustomModelValidateBeforeCall(trainRequest, _callback);
        Type localVarReturnType = new TypeToken<TrainResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
