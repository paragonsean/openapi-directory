# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date_time: datetime=None, last_updated_date_time: datetime=None, model_id: str=None, status: str=None):
        """ModelResult - a model defined in OpenAPI

        :param created_date_time: The created_date_time of this ModelResult.
        :param last_updated_date_time: The last_updated_date_time of this ModelResult.
        :param model_id: The model_id of this ModelResult.
        :param status: The status of this ModelResult.
        """
        self.openapi_types = {
            'created_date_time': datetime,
            'last_updated_date_time': datetime,
            'model_id': str,
            'status': str
        }

        self.attribute_map = {
            'created_date_time': 'createdDateTime',
            'last_updated_date_time': 'lastUpdatedDateTime',
            'model_id': 'modelId',
            'status': 'status'
        }

        self._created_date_time = created_date_time
        self._last_updated_date_time = last_updated_date_time
        self._model_id = model_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelResult of this ModelResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date_time(self):
        """Gets the created_date_time of this ModelResult.

        Get or set the created date time of the model.

        :return: The created_date_time of this ModelResult.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this ModelResult.

        Get or set the created date time of the model.

        :param created_date_time: The created_date_time of this ModelResult.
        :type created_date_time: datetime
        """

        self._created_date_time = created_date_time

    @property
    def last_updated_date_time(self):
        """Gets the last_updated_date_time of this ModelResult.

        Get or set the model last updated datetime.

        :return: The last_updated_date_time of this ModelResult.
        :rtype: datetime
        """
        return self._last_updated_date_time

    @last_updated_date_time.setter
    def last_updated_date_time(self, last_updated_date_time):
        """Sets the last_updated_date_time of this ModelResult.

        Get or set the model last updated datetime.

        :param last_updated_date_time: The last_updated_date_time of this ModelResult.
        :type last_updated_date_time: datetime
        """

        self._last_updated_date_time = last_updated_date_time

    @property
    def model_id(self):
        """Gets the model_id of this ModelResult.

        Get or set model identifier.

        :return: The model_id of this ModelResult.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelResult.

        Get or set model identifier.

        :param model_id: The model_id of this ModelResult.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def status(self):
        """Gets the status of this ModelResult.

        Get or set the status of model.

        :return: The status of this ModelResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelResult.

        Get or set the status of model.

        :param status: The status of this ModelResult.
        :type status: str
        """
        allowed_values = ["created", "ready", "invalid"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
