# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtractedToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: List[float]=None, confidence: float=None, text: str=None):
        """ExtractedToken - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this ExtractedToken.
        :param confidence: The confidence of this ExtractedToken.
        :param text: The text of this ExtractedToken.
        """
        self.openapi_types = {
            'bounding_box': List[float],
            'confidence': float,
            'text': str
        }

        self.attribute_map = {
            'bounding_box': 'boundingBox',
            'confidence': 'confidence',
            'text': 'text'
        }

        self._bounding_box = bounding_box
        self._confidence = confidence
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtractedToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtractedToken of this ExtractedToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this ExtractedToken.

        Bounding box of the extracted text. Represents the  location of the extracted text as a pair of  cartesian co-ordinates. The co-ordinate pairs are arranged by  top-left, top-right, bottom-right and bottom-left endpoints box  with origin reference from the bottom-left of the page.

        :return: The bounding_box of this ExtractedToken.
        :rtype: List[float]
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this ExtractedToken.

        Bounding box of the extracted text. Represents the  location of the extracted text as a pair of  cartesian co-ordinates. The co-ordinate pairs are arranged by  top-left, top-right, bottom-right and bottom-left endpoints box  with origin reference from the bottom-left of the page.

        :param bounding_box: The bounding_box of this ExtractedToken.
        :type bounding_box: List[float]
        """

        self._bounding_box = bounding_box

    @property
    def confidence(self):
        """Gets the confidence of this ExtractedToken.

        A measure of accuracy of the extracted text.

        :return: The confidence of this ExtractedToken.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this ExtractedToken.

        A measure of accuracy of the extracted text.

        :param confidence: The confidence of this ExtractedToken.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def text(self):
        """Gets the text of this ExtractedToken.

        String value of the extracted text.

        :return: The text of this ExtractedToken.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ExtractedToken.

        String value of the extracted text.

        :param text: The text of this ExtractedToken.
        :type text: str
        """

        self._text = text
