# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.train_source_filter import TrainSourceFilter
from openapi_server import util


class TrainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source: str=None, source_filter: TrainSourceFilter=None):
        """TrainRequest - a model defined in OpenAPI

        :param source: The source of this TrainRequest.
        :param source_filter: The source_filter of this TrainRequest.
        """
        self.openapi_types = {
            'source': str,
            'source_filter': TrainSourceFilter
        }

        self.attribute_map = {
            'source': 'source',
            'source_filter': 'sourceFilter'
        }

        self._source = source
        self._source_filter = source_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainRequest of this TrainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this TrainRequest.

        Get or set source path.

        :return: The source of this TrainRequest.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TrainRequest.

        Get or set source path.

        :param source: The source of this TrainRequest.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")
        if source is not None and len(source) > 2048:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `2048`")
        if source is not None and len(source) < 0:
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `0`")

        self._source = source

    @property
    def source_filter(self):
        """Gets the source_filter of this TrainRequest.


        :return: The source_filter of this TrainRequest.
        :rtype: TrainSourceFilter
        """
        return self._source_filter

    @source_filter.setter
    def source_filter(self, source_filter):
        """Sets the source_filter of this TrainRequest.


        :param source_filter: The source_filter of this TrainRequest.
        :type source_filter: TrainSourceFilter
        """

        self._source_filter = source_filter
