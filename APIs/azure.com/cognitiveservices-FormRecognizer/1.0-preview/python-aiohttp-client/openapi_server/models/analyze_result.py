# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extracted_page import ExtractedPage
from openapi_server.models.form_operation_error import FormOperationError
from openapi_server import util


class AnalyzeResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[FormOperationError]=None, pages: List[ExtractedPage]=None, status: str=None):
        """AnalyzeResult - a model defined in OpenAPI

        :param errors: The errors of this AnalyzeResult.
        :param pages: The pages of this AnalyzeResult.
        :param status: The status of this AnalyzeResult.
        """
        self.openapi_types = {
            'errors': List[FormOperationError],
            'pages': List[ExtractedPage],
            'status': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'pages': 'pages',
            'status': 'status'
        }

        self._errors = errors
        self._pages = pages
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeResult of this AnalyzeResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this AnalyzeResult.

        List of errors reported during the analyze  operation.

        :return: The errors of this AnalyzeResult.
        :rtype: List[FormOperationError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this AnalyzeResult.

        List of errors reported during the analyze  operation.

        :param errors: The errors of this AnalyzeResult.
        :type errors: List[FormOperationError]
        """

        self._errors = errors

    @property
    def pages(self):
        """Gets the pages of this AnalyzeResult.

        Page level information extracted in the analyzed  document.

        :return: The pages of this AnalyzeResult.
        :rtype: List[ExtractedPage]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this AnalyzeResult.

        Page level information extracted in the analyzed  document.

        :param pages: The pages of this AnalyzeResult.
        :type pages: List[ExtractedPage]
        """

        self._pages = pages

    @property
    def status(self):
        """Gets the status of this AnalyzeResult.

        Status of the analyze operation.

        :return: The status of this AnalyzeResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnalyzeResult.

        Status of the analyze operation.

        :param status: The status of this AnalyzeResult.
        :type status: str
        """
        allowed_values = ["success", "partialSuccess", "failure"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
