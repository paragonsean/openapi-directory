# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extracted_token import ExtractedToken
from openapi_server import util


class ExtractedTableColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entries: List[List[ExtractedToken]]=None, header: List[ExtractedToken]=None):
        """ExtractedTableColumn - a model defined in OpenAPI

        :param entries: The entries of this ExtractedTableColumn.
        :param header: The header of this ExtractedTableColumn.
        """
        self.openapi_types = {
            'entries': List[List[ExtractedToken]],
            'header': List[ExtractedToken]
        }

        self.attribute_map = {
            'entries': 'entries',
            'header': 'header'
        }

        self._entries = entries
        self._header = header

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtractedTableColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtractedTableColumn of this ExtractedTableColumn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entries(self):
        """Gets the entries of this ExtractedTableColumn.

        Extracted text for each cell of a column. Each cell  in the column can have a list of one or more tokens.

        :return: The entries of this ExtractedTableColumn.
        :rtype: List[List[ExtractedToken]]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this ExtractedTableColumn.

        Extracted text for each cell of a column. Each cell  in the column can have a list of one or more tokens.

        :param entries: The entries of this ExtractedTableColumn.
        :type entries: List[List[ExtractedToken]]
        """

        self._entries = entries

    @property
    def header(self):
        """Gets the header of this ExtractedTableColumn.

        List of extracted tokens for the column header.

        :return: The header of this ExtractedTableColumn.
        :rtype: List[ExtractedToken]
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this ExtractedTableColumn.

        List of extracted tokens for the column header.

        :param header: The header of this ExtractedTableColumn.
        :type header: List[ExtractedToken]
        """

        self._header = header
