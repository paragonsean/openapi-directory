# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extracted_key_value_pair import ExtractedKeyValuePair
from openapi_server.models.extracted_table import ExtractedTable
from openapi_server import util


class ExtractedPage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_id: int=None, height: int=None, key_value_pairs: List[ExtractedKeyValuePair]=None, number: int=None, tables: List[ExtractedTable]=None, width: int=None):
        """ExtractedPage - a model defined in OpenAPI

        :param cluster_id: The cluster_id of this ExtractedPage.
        :param height: The height of this ExtractedPage.
        :param key_value_pairs: The key_value_pairs of this ExtractedPage.
        :param number: The number of this ExtractedPage.
        :param tables: The tables of this ExtractedPage.
        :param width: The width of this ExtractedPage.
        """
        self.openapi_types = {
            'cluster_id': int,
            'height': int,
            'key_value_pairs': List[ExtractedKeyValuePair],
            'number': int,
            'tables': List[ExtractedTable],
            'width': int
        }

        self.attribute_map = {
            'cluster_id': 'clusterId',
            'height': 'height',
            'key_value_pairs': 'keyValuePairs',
            'number': 'number',
            'tables': 'tables',
            'width': 'width'
        }

        self._cluster_id = cluster_id
        self._height = height
        self._key_value_pairs = key_value_pairs
        self._number = number
        self._tables = tables
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtractedPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtractedPage of this ExtractedPage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ExtractedPage.

        Cluster identifier.

        :return: The cluster_id of this ExtractedPage.
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ExtractedPage.

        Cluster identifier.

        :param cluster_id: The cluster_id of this ExtractedPage.
        :type cluster_id: int
        """

        self._cluster_id = cluster_id

    @property
    def height(self):
        """Gets the height of this ExtractedPage.

        Height of the page (in pixels).

        :return: The height of this ExtractedPage.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ExtractedPage.

        Height of the page (in pixels).

        :param height: The height of this ExtractedPage.
        :type height: int
        """

        self._height = height

    @property
    def key_value_pairs(self):
        """Gets the key_value_pairs of this ExtractedPage.

        List of Key-Value pairs extracted from the page.

        :return: The key_value_pairs of this ExtractedPage.
        :rtype: List[ExtractedKeyValuePair]
        """
        return self._key_value_pairs

    @key_value_pairs.setter
    def key_value_pairs(self, key_value_pairs):
        """Sets the key_value_pairs of this ExtractedPage.

        List of Key-Value pairs extracted from the page.

        :param key_value_pairs: The key_value_pairs of this ExtractedPage.
        :type key_value_pairs: List[ExtractedKeyValuePair]
        """

        self._key_value_pairs = key_value_pairs

    @property
    def number(self):
        """Gets the number of this ExtractedPage.

        Page number.

        :return: The number of this ExtractedPage.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ExtractedPage.

        Page number.

        :param number: The number of this ExtractedPage.
        :type number: int
        """

        self._number = number

    @property
    def tables(self):
        """Gets the tables of this ExtractedPage.

        List of Tables and their information extracted from the page.

        :return: The tables of this ExtractedPage.
        :rtype: List[ExtractedTable]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this ExtractedPage.

        List of Tables and their information extracted from the page.

        :param tables: The tables of this ExtractedPage.
        :type tables: List[ExtractedTable]
        """

        self._tables = tables

    @property
    def width(self):
        """Gets the width of this ExtractedPage.

        Width of the page (in pixels).

        :return: The width of this ExtractedPage.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ExtractedPage.

        Width of the page (in pixels).

        :param width: The width of this ExtractedPage.
        :type width: int
        """

        self._width = width
