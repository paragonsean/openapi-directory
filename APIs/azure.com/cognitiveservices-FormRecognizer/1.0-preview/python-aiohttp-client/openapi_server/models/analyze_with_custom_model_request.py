# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalyzeWithCustomModelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, form_stream: file=None):
        """AnalyzeWithCustomModelRequest - a model defined in OpenAPI

        :param form_stream: The form_stream of this AnalyzeWithCustomModelRequest.
        """
        self.openapi_types = {
            'form_stream': file
        }

        self.attribute_map = {
            'form_stream': 'form_stream'
        }

        self._form_stream = form_stream

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeWithCustomModelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeWithCustomModel_request of this AnalyzeWithCustomModelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def form_stream(self):
        """Gets the form_stream of this AnalyzeWithCustomModelRequest.

        A pdf document or image (jpg,png) file to analyze.

        :return: The form_stream of this AnalyzeWithCustomModelRequest.
        :rtype: file
        """
        return self._form_stream

    @form_stream.setter
    def form_stream(self, form_stream):
        """Sets the form_stream of this AnalyzeWithCustomModelRequest.

        A pdf document or image (jpg,png) file to analyze.

        :param form_stream: The form_stream of this AnalyzeWithCustomModelRequest.
        :type form_stream: file
        """
        if form_stream is None:
            raise ValueError("Invalid value for `form_stream`, must not be `None`")

        self._form_stream = form_stream
