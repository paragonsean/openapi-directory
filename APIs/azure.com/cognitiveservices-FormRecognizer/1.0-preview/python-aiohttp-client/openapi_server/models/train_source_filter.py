# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrainSourceFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_sub_folders: bool=None, prefix: str=None):
        """TrainSourceFilter - a model defined in OpenAPI

        :param include_sub_folders: The include_sub_folders of this TrainSourceFilter.
        :param prefix: The prefix of this TrainSourceFilter.
        """
        self.openapi_types = {
            'include_sub_folders': bool,
            'prefix': str
        }

        self.attribute_map = {
            'include_sub_folders': 'includeSubFolders',
            'prefix': 'prefix'
        }

        self._include_sub_folders = include_sub_folders
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainSourceFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainSourceFilter of this TrainSourceFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_sub_folders(self):
        """Gets the include_sub_folders of this TrainSourceFilter.

        A flag to indicate if sub folders within the set of  prefix folders will also need to be included when searching  for content to be preprocessed.

        :return: The include_sub_folders of this TrainSourceFilter.
        :rtype: bool
        """
        return self._include_sub_folders

    @include_sub_folders.setter
    def include_sub_folders(self, include_sub_folders):
        """Sets the include_sub_folders of this TrainSourceFilter.

        A flag to indicate if sub folders within the set of  prefix folders will also need to be included when searching  for content to be preprocessed.

        :param include_sub_folders: The include_sub_folders of this TrainSourceFilter.
        :type include_sub_folders: bool
        """

        self._include_sub_folders = include_sub_folders

    @property
    def prefix(self):
        """Gets the prefix of this TrainSourceFilter.

        A case-sensitive prefix string to filter content  under the source location. For e.g., when using a Azure Blob  Uri use the prefix to restrict subfolders for content.

        :return: The prefix of this TrainSourceFilter.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this TrainSourceFilter.

        A case-sensitive prefix string to filter content  under the source location. For e.g., when using a Azure Blob  Uri use the prefix to restrict subfolders for content.

        :param prefix: The prefix of this TrainSourceFilter.
        :type prefix: str
        """
        if prefix is not None and len(prefix) > 128:
            raise ValueError("Invalid value for `prefix`, length must be less than or equal to `128`")
        if prefix is not None and len(prefix) < 0:
            raise ValueError("Invalid value for `prefix`, length must be greater than or equal to `0`")

        self._prefix = prefix
