/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtractedPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtractedPage::OAIExtractedPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtractedPage::OAIExtractedPage() {
    this->initializeModel();
}

OAIExtractedPage::~OAIExtractedPage() {}

void OAIExtractedPage::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_key_value_pairs_isSet = false;
    m_key_value_pairs_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIExtractedPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtractedPage::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_key_value_pairs_isValid = ::OpenAPI::fromJsonValue(m_key_value_pairs, json[QString("keyValuePairs")]);
    m_key_value_pairs_isSet = !json[QString("keyValuePairs")].isNull() && m_key_value_pairs_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("tables")]);
    m_tables_isSet = !json[QString("tables")].isNull() && m_tables_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIExtractedPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtractedPage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_key_value_pairs.size() > 0) {
        obj.insert(QString("keyValuePairs"), ::OpenAPI::toJsonValue(m_key_value_pairs));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_tables.size() > 0) {
        obj.insert(QString("tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIExtractedPage::getClusterId() const {
    return m_cluster_id;
}
void OAIExtractedPage::setClusterId(const qint32 &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIExtractedPage::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIExtractedPage::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

qint32 OAIExtractedPage::getHeight() const {
    return m_height;
}
void OAIExtractedPage::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIExtractedPage::is_height_Set() const{
    return m_height_isSet;
}

bool OAIExtractedPage::is_height_Valid() const{
    return m_height_isValid;
}

QList<OAIExtractedKeyValuePair> OAIExtractedPage::getKeyValuePairs() const {
    return m_key_value_pairs;
}
void OAIExtractedPage::setKeyValuePairs(const QList<OAIExtractedKeyValuePair> &key_value_pairs) {
    m_key_value_pairs = key_value_pairs;
    m_key_value_pairs_isSet = true;
}

bool OAIExtractedPage::is_key_value_pairs_Set() const{
    return m_key_value_pairs_isSet;
}

bool OAIExtractedPage::is_key_value_pairs_Valid() const{
    return m_key_value_pairs_isValid;
}

qint32 OAIExtractedPage::getNumber() const {
    return m_number;
}
void OAIExtractedPage::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIExtractedPage::is_number_Set() const{
    return m_number_isSet;
}

bool OAIExtractedPage::is_number_Valid() const{
    return m_number_isValid;
}

QList<OAIExtractedTable> OAIExtractedPage::getTables() const {
    return m_tables;
}
void OAIExtractedPage::setTables(const QList<OAIExtractedTable> &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAIExtractedPage::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAIExtractedPage::is_tables_Valid() const{
    return m_tables_isValid;
}

qint32 OAIExtractedPage::getWidth() const {
    return m_width;
}
void OAIExtractedPage::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIExtractedPage::is_width_Set() const{
    return m_width_isSet;
}

bool OAIExtractedPage::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIExtractedPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_pairs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtractedPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
