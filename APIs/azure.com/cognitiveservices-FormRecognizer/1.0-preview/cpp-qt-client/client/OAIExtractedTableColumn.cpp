/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtractedTableColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtractedTableColumn::OAIExtractedTableColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtractedTableColumn::OAIExtractedTableColumn() {
    this->initializeModel();
}

OAIExtractedTableColumn::~OAIExtractedTableColumn() {}

void OAIExtractedTableColumn::initializeModel() {

    m_entries_isSet = false;
    m_entries_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;
}

void OAIExtractedTableColumn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtractedTableColumn::fromJsonObject(QJsonObject json) {

    if(json["entries"].isArray()){
        auto arr = json["entries"].toArray();
        m_entries_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIExtractedToken> item;
                m_entries_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_entries_isSet = !jval.isNull() && m_entries_isValid;
                m_entries.push_back(item);
            }
        }
    }

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;
}

QString OAIExtractedTableColumn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtractedTableColumn::asJsonObject() const {
    QJsonObject obj;
    if (m_entries.size() > 0) {
        
        obj.insert(QString("entries"), toJsonValue(m_entries));
    }
    if (m_header.size() > 0) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    return obj;
}

QList<QList<OAIExtractedToken>> OAIExtractedTableColumn::getEntries() const {
    return m_entries;
}
void OAIExtractedTableColumn::setEntries(const QList<QList<OAIExtractedToken>> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAIExtractedTableColumn::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAIExtractedTableColumn::is_entries_Valid() const{
    return m_entries_isValid;
}

QList<OAIExtractedToken> OAIExtractedTableColumn::getHeader() const {
    return m_header;
}
void OAIExtractedTableColumn::setHeader(const QList<OAIExtractedToken> &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIExtractedTableColumn::is_header_Set() const{
    return m_header_isSet;
}

bool OAIExtractedTableColumn::is_header_Valid() const{
    return m_header_isValid;
}

bool OAIExtractedTableColumn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtractedTableColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
