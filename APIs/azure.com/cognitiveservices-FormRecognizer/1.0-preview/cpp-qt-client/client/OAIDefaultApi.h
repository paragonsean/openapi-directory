/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data based on a model created by a set of representative training forms.
 *
 * The version of the OpenAPI document: 1.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalyzeResult.h"
#include "OAIAnalyzeWithCustomModel_request.h"
#include "OAIErrorResponse.h"
#include "OAIKeysResult.h"
#include "OAIModelResult.h"
#include "OAIModelsResult.h"
#include "OAITrainRequest.h"
#include "OAITrainResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_analyze_with_custom_model_request OAIAnalyzeWithCustomModel_request [required]
    * @param[in]  keys QList<QString> [optional]
    */
    virtual void analyzeWithCustomModel(const QString &id, const OAIAnalyzeWithCustomModel_request &oai_analyze_with_custom_model_request, const ::OpenAPI::OptionalParam<QList<QString>> &keys = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteCustomModel(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getCustomModel(const QString &id);


    virtual void getCustomModels();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getExtractedKeys(const QString &id);

    /**
    * @param[in]  train_request OAITrainRequest [required]
    */
    virtual void trainCustomModel(const OAITrainRequest &train_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyzeWithCustomModelCallback(OAIHttpRequestWorker *worker);
    void deleteCustomModelCallback(OAIHttpRequestWorker *worker);
    void getCustomModelCallback(OAIHttpRequestWorker *worker);
    void getCustomModelsCallback(OAIHttpRequestWorker *worker);
    void getExtractedKeysCallback(OAIHttpRequestWorker *worker);
    void trainCustomModelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyzeWithCustomModelSignal(OAIAnalyzeResult summary);
    void deleteCustomModelSignal();
    void getCustomModelSignal(OAIModelResult summary);
    void getCustomModelsSignal(OAIModelsResult summary);
    void getExtractedKeysSignal(OAIKeysResult summary);
    void trainCustomModelSignal(OAITrainResult summary);


    void analyzeWithCustomModelSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeResult summary);
    void deleteCustomModelSignalFull(OAIHttpRequestWorker *worker);
    void getCustomModelSignalFull(OAIHttpRequestWorker *worker, OAIModelResult summary);
    void getCustomModelsSignalFull(OAIHttpRequestWorker *worker, OAIModelsResult summary);
    void getExtractedKeysSignalFull(OAIHttpRequestWorker *worker, OAIKeysResult summary);
    void trainCustomModelSignalFull(OAIHttpRequestWorker *worker, OAITrainResult summary);

    Q_DECL_DEPRECATED_X("Use analyzeWithCustomModelSignalError() instead")
    void analyzeWithCustomModelSignalE(OAIAnalyzeResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeWithCustomModelSignalError(OAIAnalyzeResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomModelSignalError() instead")
    void deleteCustomModelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomModelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomModelSignalError() instead")
    void getCustomModelSignalE(OAIModelResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomModelSignalError(OAIModelResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomModelsSignalError() instead")
    void getCustomModelsSignalE(OAIModelsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomModelsSignalError(OAIModelsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExtractedKeysSignalError() instead")
    void getExtractedKeysSignalE(OAIKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExtractedKeysSignalError(OAIKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainCustomModelSignalError() instead")
    void trainCustomModelSignalE(OAITrainResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trainCustomModelSignalError(OAITrainResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyzeWithCustomModelSignalErrorFull() instead")
    void analyzeWithCustomModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeWithCustomModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomModelSignalErrorFull() instead")
    void deleteCustomModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomModelSignalErrorFull() instead")
    void getCustomModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomModelsSignalErrorFull() instead")
    void getCustomModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExtractedKeysSignalErrorFull() instead")
    void getExtractedKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExtractedKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainCustomModelSignalErrorFull() instead")
    void trainCustomModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trainCustomModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
