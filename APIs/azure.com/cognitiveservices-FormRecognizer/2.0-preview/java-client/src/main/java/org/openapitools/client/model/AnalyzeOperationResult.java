/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AnalyzeResult;
import org.openapitools.client.model.OperationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status and result of the queued analyze operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:45.327612-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeOperationResult {
  public static final String SERIALIZED_NAME_ANALYZE_RESULT = "analyzeResult";
  @SerializedName(SERIALIZED_NAME_ANALYZE_RESULT)
  private AnalyzeResult analyzeResult;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OperationStatus status;

  public AnalyzeOperationResult() {
  }

  public AnalyzeOperationResult analyzeResult(AnalyzeResult analyzeResult) {
    this.analyzeResult = analyzeResult;
    return this;
  }

  /**
   * Get analyzeResult
   * @return analyzeResult
   */
  @javax.annotation.Nullable
  public AnalyzeResult getAnalyzeResult() {
    return analyzeResult;
  }

  public void setAnalyzeResult(AnalyzeResult analyzeResult) {
    this.analyzeResult = analyzeResult;
  }


  public AnalyzeOperationResult createdDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

  /**
   * Date and time (UTC) when the analyze operation was submitted.
   * @return createdDateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
  }


  public AnalyzeOperationResult lastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    return this;
  }

  /**
   * Date and time (UTC) when the status was last updated.
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }

  public void setLastUpdatedDateTime(OffsetDateTime lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }


  public AnalyzeOperationResult status(OperationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public OperationStatus getStatus() {
    return status;
  }

  public void setStatus(OperationStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeOperationResult analyzeOperationResult = (AnalyzeOperationResult) o;
    return Objects.equals(this.analyzeResult, analyzeOperationResult.analyzeResult) &&
        Objects.equals(this.createdDateTime, analyzeOperationResult.createdDateTime) &&
        Objects.equals(this.lastUpdatedDateTime, analyzeOperationResult.lastUpdatedDateTime) &&
        Objects.equals(this.status, analyzeOperationResult.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzeResult, createdDateTime, lastUpdatedDateTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeOperationResult {\n");
    sb.append("    analyzeResult: ").append(toIndentedString(analyzeResult)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyzeResult");
    openapiFields.add("createdDateTime");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdDateTime");
    openapiRequiredFields.add("lastUpdatedDateTime");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeOperationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeOperationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeOperationResult is not found in the empty JSON string", AnalyzeOperationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeOperationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeOperationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalyzeOperationResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analyzeResult`
      if (jsonObj.get("analyzeResult") != null && !jsonObj.get("analyzeResult").isJsonNull()) {
        AnalyzeResult.validateJsonElement(jsonObj.get("analyzeResult"));
      }
      // validate the required field `status`
      OperationStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeOperationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeOperationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeOperationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeOperationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeOperationResult>() {
           @Override
           public void write(JsonWriter out, AnalyzeOperationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeOperationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeOperationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeOperationResult
   * @throws IOException if the JSON string is invalid with respect to AnalyzeOperationResult
   */
  public static AnalyzeOperationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeOperationResult.class);
  }

  /**
   * Convert an instance of AnalyzeOperationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

