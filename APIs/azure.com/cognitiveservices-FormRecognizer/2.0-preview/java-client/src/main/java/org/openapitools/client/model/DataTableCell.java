/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the extracted cell in a table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:45.327612-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataTableCell {
  public static final String SERIALIZED_NAME_BOUNDING_BOX = "boundingBox";
  @SerializedName(SERIALIZED_NAME_BOUNDING_BOX)
  private List<BigDecimal> boundingBox = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLUMN_INDEX = "columnIndex";
  @SerializedName(SERIALIZED_NAME_COLUMN_INDEX)
  private Integer columnIndex;

  public static final String SERIALIZED_NAME_COLUMN_SPAN = "columnSpan";
  @SerializedName(SERIALIZED_NAME_COLUMN_SPAN)
  private Integer columnSpan;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private BigDecimal confidence;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<String> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_FOOTER = "isFooter";
  @SerializedName(SERIALIZED_NAME_IS_FOOTER)
  private Boolean isFooter = false;

  public static final String SERIALIZED_NAME_IS_HEADER = "isHeader";
  @SerializedName(SERIALIZED_NAME_IS_HEADER)
  private Boolean isHeader = false;

  public static final String SERIALIZED_NAME_ROW_INDEX = "rowIndex";
  @SerializedName(SERIALIZED_NAME_ROW_INDEX)
  private Integer rowIndex;

  public static final String SERIALIZED_NAME_ROW_SPAN = "rowSpan";
  @SerializedName(SERIALIZED_NAME_ROW_SPAN)
  private Integer rowSpan;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public DataTableCell() {
  }

  public DataTableCell boundingBox(List<BigDecimal> boundingBox) {
    this.boundingBox = boundingBox;
    return this;
  }

  public DataTableCell addBoundingBoxItem(BigDecimal boundingBoxItem) {
    if (this.boundingBox == null) {
      this.boundingBox = new ArrayList<>();
    }
    this.boundingBox.add(boundingBoxItem);
    return this;
  }

  /**
   * Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.
   * @return boundingBox
   */
  @javax.annotation.Nonnull
  public List<BigDecimal> getBoundingBox() {
    return boundingBox;
  }

  public void setBoundingBox(List<BigDecimal> boundingBox) {
    this.boundingBox = boundingBox;
  }


  public DataTableCell columnIndex(Integer columnIndex) {
    this.columnIndex = columnIndex;
    return this;
  }

  /**
   * Column index of the cell.
   * minimum: 0
   * @return columnIndex
   */
  @javax.annotation.Nonnull
  public Integer getColumnIndex() {
    return columnIndex;
  }

  public void setColumnIndex(Integer columnIndex) {
    this.columnIndex = columnIndex;
  }


  public DataTableCell columnSpan(Integer columnSpan) {
    this.columnSpan = columnSpan;
    return this;
  }

  /**
   * Number of columns spanned by this cell.
   * minimum: 1
   * @return columnSpan
   */
  @javax.annotation.Nullable
  public Integer getColumnSpan() {
    return columnSpan;
  }

  public void setColumnSpan(Integer columnSpan) {
    this.columnSpan = columnSpan;
  }


  public DataTableCell confidence(BigDecimal confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Confidence value.
   * minimum: 0
   * maximum: 1
   * @return confidence
   */
  @javax.annotation.Nonnull
  public BigDecimal getConfidence() {
    return confidence;
  }

  public void setConfidence(BigDecimal confidence) {
    this.confidence = confidence;
  }


  public DataTableCell elements(List<String> elements) {
    this.elements = elements;
    return this;
  }

  public DataTableCell addElementsItem(String elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * When includeTextDetails is set to true, a list of references to the text elements constituting this table cell.
   * @return elements
   */
  @javax.annotation.Nullable
  public List<String> getElements() {
    return elements;
  }

  public void setElements(List<String> elements) {
    this.elements = elements;
  }


  public DataTableCell isFooter(Boolean isFooter) {
    this.isFooter = isFooter;
    return this;
  }

  /**
   * Is the current cell a footer cell?
   * @return isFooter
   */
  @javax.annotation.Nullable
  public Boolean getIsFooter() {
    return isFooter;
  }

  public void setIsFooter(Boolean isFooter) {
    this.isFooter = isFooter;
  }


  public DataTableCell isHeader(Boolean isHeader) {
    this.isHeader = isHeader;
    return this;
  }

  /**
   * Is the current cell a header cell?
   * @return isHeader
   */
  @javax.annotation.Nullable
  public Boolean getIsHeader() {
    return isHeader;
  }

  public void setIsHeader(Boolean isHeader) {
    this.isHeader = isHeader;
  }


  public DataTableCell rowIndex(Integer rowIndex) {
    this.rowIndex = rowIndex;
    return this;
  }

  /**
   * Row index of the cell.
   * minimum: 0
   * @return rowIndex
   */
  @javax.annotation.Nonnull
  public Integer getRowIndex() {
    return rowIndex;
  }

  public void setRowIndex(Integer rowIndex) {
    this.rowIndex = rowIndex;
  }


  public DataTableCell rowSpan(Integer rowSpan) {
    this.rowSpan = rowSpan;
    return this;
  }

  /**
   * Number of rows spanned by this cell.
   * minimum: 1
   * @return rowSpan
   */
  @javax.annotation.Nullable
  public Integer getRowSpan() {
    return rowSpan;
  }

  public void setRowSpan(Integer rowSpan) {
    this.rowSpan = rowSpan;
  }


  public DataTableCell text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Text content of the cell.
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataTableCell dataTableCell = (DataTableCell) o;
    return Objects.equals(this.boundingBox, dataTableCell.boundingBox) &&
        Objects.equals(this.columnIndex, dataTableCell.columnIndex) &&
        Objects.equals(this.columnSpan, dataTableCell.columnSpan) &&
        Objects.equals(this.confidence, dataTableCell.confidence) &&
        Objects.equals(this.elements, dataTableCell.elements) &&
        Objects.equals(this.isFooter, dataTableCell.isFooter) &&
        Objects.equals(this.isHeader, dataTableCell.isHeader) &&
        Objects.equals(this.rowIndex, dataTableCell.rowIndex) &&
        Objects.equals(this.rowSpan, dataTableCell.rowSpan) &&
        Objects.equals(this.text, dataTableCell.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingBox, columnIndex, columnSpan, confidence, elements, isFooter, isHeader, rowIndex, rowSpan, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataTableCell {\n");
    sb.append("    boundingBox: ").append(toIndentedString(boundingBox)).append("\n");
    sb.append("    columnIndex: ").append(toIndentedString(columnIndex)).append("\n");
    sb.append("    columnSpan: ").append(toIndentedString(columnSpan)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    isFooter: ").append(toIndentedString(isFooter)).append("\n");
    sb.append("    isHeader: ").append(toIndentedString(isHeader)).append("\n");
    sb.append("    rowIndex: ").append(toIndentedString(rowIndex)).append("\n");
    sb.append("    rowSpan: ").append(toIndentedString(rowSpan)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingBox");
    openapiFields.add("columnIndex");
    openapiFields.add("columnSpan");
    openapiFields.add("confidence");
    openapiFields.add("elements");
    openapiFields.add("isFooter");
    openapiFields.add("isHeader");
    openapiFields.add("rowIndex");
    openapiFields.add("rowSpan");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("boundingBox");
    openapiRequiredFields.add("columnIndex");
    openapiRequiredFields.add("confidence");
    openapiRequiredFields.add("rowIndex");
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataTableCell
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataTableCell.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataTableCell is not found in the empty JSON string", DataTableCell.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataTableCell.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataTableCell` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataTableCell.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("boundingBox") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("boundingBox").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boundingBox` to be an array in the JSON string but got `%s`", jsonObj.get("boundingBox").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("elements") != null && !jsonObj.get("elements").isJsonNull() && !jsonObj.get("elements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataTableCell.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataTableCell' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataTableCell> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataTableCell.class));

       return (TypeAdapter<T>) new TypeAdapter<DataTableCell>() {
           @Override
           public void write(JsonWriter out, DataTableCell value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataTableCell read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataTableCell given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataTableCell
   * @throws IOException if the JSON string is invalid with respect to DataTableCell
   */
  public static DataTableCell fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataTableCell.class);
  }

  /**
   * Convert an instance of DataTableCell to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

