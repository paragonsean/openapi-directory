/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.TextLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Text extracted from a page in the input document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:45.327612-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReadResult {
  public static final String SERIALIZED_NAME_ANGLE = "angle";
  @SerializedName(SERIALIZED_NAME_ANGLE)
  private BigDecimal angle;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private Language language;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<TextLine> lines = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  /**
   * The unit used by the width, height and boundingBox properties. For images, the unit is \&quot;pixel\&quot;. For PDF, the unit is \&quot;inch\&quot;.
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    PIXEL("pixel"),
    
    INCH("inch");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;

  public ReadResult() {
  }

  public ReadResult angle(BigDecimal angle) {
    this.angle = angle;
    return this;
  }

  /**
   * The general orientation of the text in clockwise direction, measured in degrees between (-180, 180].
   * minimum: -1.8E+2
   * maximum: 1.8E+2
   * @return angle
   */
  @javax.annotation.Nonnull
  public BigDecimal getAngle() {
    return angle;
  }

  public void setAngle(BigDecimal angle) {
    this.angle = angle;
  }


  public ReadResult height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * The height of the image/PDF in pixels/inches, respectively.
   * minimum: 0
   * @return height
   */
  @javax.annotation.Nonnull
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public ReadResult language(Language language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public Language getLanguage() {
    return language;
  }

  public void setLanguage(Language language) {
    this.language = language;
  }


  public ReadResult lines(List<TextLine> lines) {
    this.lines = lines;
    return this;
  }

  public ReadResult addLinesItem(TextLine linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

  /**
   * When includeTextDetails is set to true, a list of recognized text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order.
   * @return lines
   */
  @javax.annotation.Nullable
  public List<TextLine> getLines() {
    return lines;
  }

  public void setLines(List<TextLine> lines) {
    this.lines = lines;
  }


  public ReadResult page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * The 1-based page number in the input document.
   * minimum: 1
   * @return page
   */
  @javax.annotation.Nonnull
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public ReadResult unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The unit used by the width, height and boundingBox properties. For images, the unit is \&quot;pixel\&quot;. For PDF, the unit is \&quot;inch\&quot;.
   * @return unit
   */
  @javax.annotation.Nonnull
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  public ReadResult width(BigDecimal width) {
    this.width = width;
    return this;
  }

  /**
   * The width of the image/PDF in pixels/inches, respectively.
   * minimum: 0
   * @return width
   */
  @javax.annotation.Nonnull
  public BigDecimal getWidth() {
    return width;
  }

  public void setWidth(BigDecimal width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadResult readResult = (ReadResult) o;
    return Objects.equals(this.angle, readResult.angle) &&
        Objects.equals(this.height, readResult.height) &&
        Objects.equals(this.language, readResult.language) &&
        Objects.equals(this.lines, readResult.lines) &&
        Objects.equals(this.page, readResult.page) &&
        Objects.equals(this.unit, readResult.unit) &&
        Objects.equals(this.width, readResult.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(angle, height, language, lines, page, unit, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadResult {\n");
    sb.append("    angle: ").append(toIndentedString(angle)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("angle");
    openapiFields.add("height");
    openapiFields.add("language");
    openapiFields.add("lines");
    openapiFields.add("page");
    openapiFields.add("unit");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("angle");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("page");
    openapiRequiredFields.add("unit");
    openapiRequiredFields.add("width");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReadResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReadResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReadResult is not found in the empty JSON string", ReadResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReadResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReadResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReadResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        Language.validateJsonElement(jsonObj.get("language"));
      }
      if (jsonObj.get("lines") != null && !jsonObj.get("lines").isJsonNull()) {
        JsonArray jsonArraylines = jsonObj.getAsJsonArray("lines");
        if (jsonArraylines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
          }

          // validate the optional field `lines` (array)
          for (int i = 0; i < jsonArraylines.size(); i++) {
            TextLine.validateJsonElement(jsonArraylines.get(i));
          };
        }
      }
      if (!jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the required field `unit`
      UnitEnum.validateJsonElement(jsonObj.get("unit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReadResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReadResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReadResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReadResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ReadResult>() {
           @Override
           public void write(JsonWriter out, ReadResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReadResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReadResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReadResult
   * @throws IOException if the JSON string is invalid with respect to ReadResult
   */
  public static ReadResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReadResult.class);
  }

  /**
   * Convert an instance of ReadResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

