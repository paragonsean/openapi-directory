/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentResult;
import org.openapitools.client.model.ErrorInformation;
import org.openapitools.client.model.PageResult;
import org.openapitools.client.model.ReadResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Analyze operation result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:45.327612-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeResult {
  public static final String SERIALIZED_NAME_DOCUMENT_RESULTS = "documentResults";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_RESULTS)
  private List<DocumentResult> documentResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ErrorInformation> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_RESULTS = "pageResults";
  @SerializedName(SERIALIZED_NAME_PAGE_RESULTS)
  private List<PageResult> pageResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_READ_RESULTS = "readResults";
  @SerializedName(SERIALIZED_NAME_READ_RESULTS)
  private List<ReadResult> readResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public AnalyzeResult() {
  }

  public AnalyzeResult documentResults(List<DocumentResult> documentResults) {
    this.documentResults = documentResults;
    return this;
  }

  public AnalyzeResult addDocumentResultsItem(DocumentResult documentResultsItem) {
    if (this.documentResults == null) {
      this.documentResults = new ArrayList<>();
    }
    this.documentResults.add(documentResultsItem);
    return this;
  }

  /**
   * Document-level information extracted from the input.
   * @return documentResults
   */
  @javax.annotation.Nullable
  public List<DocumentResult> getDocumentResults() {
    return documentResults;
  }

  public void setDocumentResults(List<DocumentResult> documentResults) {
    this.documentResults = documentResults;
  }


  public AnalyzeResult errors(List<ErrorInformation> errors) {
    this.errors = errors;
    return this;
  }

  public AnalyzeResult addErrorsItem(ErrorInformation errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * List of errors reported during the analyze operation.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ErrorInformation> getErrors() {
    return errors;
  }

  public void setErrors(List<ErrorInformation> errors) {
    this.errors = errors;
  }


  public AnalyzeResult pageResults(List<PageResult> pageResults) {
    this.pageResults = pageResults;
    return this;
  }

  public AnalyzeResult addPageResultsItem(PageResult pageResultsItem) {
    if (this.pageResults == null) {
      this.pageResults = new ArrayList<>();
    }
    this.pageResults.add(pageResultsItem);
    return this;
  }

  /**
   * Page-level information extracted from the input.
   * @return pageResults
   */
  @javax.annotation.Nullable
  public List<PageResult> getPageResults() {
    return pageResults;
  }

  public void setPageResults(List<PageResult> pageResults) {
    this.pageResults = pageResults;
  }


  public AnalyzeResult readResults(List<ReadResult> readResults) {
    this.readResults = readResults;
    return this;
  }

  public AnalyzeResult addReadResultsItem(ReadResult readResultsItem) {
    if (this.readResults == null) {
      this.readResults = new ArrayList<>();
    }
    this.readResults.add(readResultsItem);
    return this;
  }

  /**
   * Text extracted from the input.
   * @return readResults
   */
  @javax.annotation.Nonnull
  public List<ReadResult> getReadResults() {
    return readResults;
  }

  public void setReadResults(List<ReadResult> readResults) {
    this.readResults = readResults;
  }


  public AnalyzeResult version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of schema used for this result.
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeResult analyzeResult = (AnalyzeResult) o;
    return Objects.equals(this.documentResults, analyzeResult.documentResults) &&
        Objects.equals(this.errors, analyzeResult.errors) &&
        Objects.equals(this.pageResults, analyzeResult.pageResults) &&
        Objects.equals(this.readResults, analyzeResult.readResults) &&
        Objects.equals(this.version, analyzeResult.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentResults, errors, pageResults, readResults, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeResult {\n");
    sb.append("    documentResults: ").append(toIndentedString(documentResults)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    pageResults: ").append(toIndentedString(pageResults)).append("\n");
    sb.append("    readResults: ").append(toIndentedString(readResults)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentResults");
    openapiFields.add("errors");
    openapiFields.add("pageResults");
    openapiFields.add("readResults");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("readResults");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeResult is not found in the empty JSON string", AnalyzeResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalyzeResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("documentResults") != null && !jsonObj.get("documentResults").isJsonNull()) {
        JsonArray jsonArraydocumentResults = jsonObj.getAsJsonArray("documentResults");
        if (jsonArraydocumentResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentResults` to be an array in the JSON string but got `%s`", jsonObj.get("documentResults").toString()));
          }

          // validate the optional field `documentResults` (array)
          for (int i = 0; i < jsonArraydocumentResults.size(); i++) {
            DocumentResult.validateJsonElement(jsonArraydocumentResults.get(i));
          };
        }
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ErrorInformation.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if (jsonObj.get("pageResults") != null && !jsonObj.get("pageResults").isJsonNull()) {
        JsonArray jsonArraypageResults = jsonObj.getAsJsonArray("pageResults");
        if (jsonArraypageResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pageResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pageResults` to be an array in the JSON string but got `%s`", jsonObj.get("pageResults").toString()));
          }

          // validate the optional field `pageResults` (array)
          for (int i = 0; i < jsonArraypageResults.size(); i++) {
            PageResult.validateJsonElement(jsonArraypageResults.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("readResults").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `readResults` to be an array in the JSON string but got `%s`", jsonObj.get("readResults").toString()));
      }

      JsonArray jsonArrayreadResults = jsonObj.getAsJsonArray("readResults");
      // validate the required field `readResults` (array)
      for (int i = 0; i < jsonArrayreadResults.size(); i++) {
        ReadResult.validateJsonElement(jsonArrayreadResults.get(i));
      };
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeResult.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeResult>() {
           @Override
           public void write(JsonWriter out, AnalyzeResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeResult
   * @throws IOException if the JSON string is invalid with respect to AnalyzeResult
   */
  public static AnalyzeResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeResult.class);
  }

  /**
   * Convert an instance of AnalyzeResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

