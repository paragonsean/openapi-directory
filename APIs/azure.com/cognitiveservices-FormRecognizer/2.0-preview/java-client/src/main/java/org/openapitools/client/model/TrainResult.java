/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorInformation;
import org.openapitools.client.model.FormFieldsReport;
import org.openapitools.client.model.TrainingDocumentInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom model training result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:45.327612-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrainResult {
  public static final String SERIALIZED_NAME_AVERAGE_MODEL_ACCURACY = "averageModelAccuracy";
  @SerializedName(SERIALIZED_NAME_AVERAGE_MODEL_ACCURACY)
  private BigDecimal averageModelAccuracy;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ErrorInformation> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<FormFieldsReport> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAINING_DOCUMENTS = "trainingDocuments";
  @SerializedName(SERIALIZED_NAME_TRAINING_DOCUMENTS)
  private List<TrainingDocumentInfo> trainingDocuments = new ArrayList<>();

  public TrainResult() {
  }

  public TrainResult averageModelAccuracy(BigDecimal averageModelAccuracy) {
    this.averageModelAccuracy = averageModelAccuracy;
    return this;
  }

  /**
   * Average accuracy.
   * @return averageModelAccuracy
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageModelAccuracy() {
    return averageModelAccuracy;
  }

  public void setAverageModelAccuracy(BigDecimal averageModelAccuracy) {
    this.averageModelAccuracy = averageModelAccuracy;
  }


  public TrainResult errors(List<ErrorInformation> errors) {
    this.errors = errors;
    return this;
  }

  public TrainResult addErrorsItem(ErrorInformation errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Errors returned during the training operation.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ErrorInformation> getErrors() {
    return errors;
  }

  public void setErrors(List<ErrorInformation> errors) {
    this.errors = errors;
  }


  public TrainResult fields(List<FormFieldsReport> fields) {
    this.fields = fields;
    return this;
  }

  public TrainResult addFieldsItem(FormFieldsReport fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * List of fields used to train the model and the train operation error reported by each.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<FormFieldsReport> getFields() {
    return fields;
  }

  public void setFields(List<FormFieldsReport> fields) {
    this.fields = fields;
  }


  public TrainResult trainingDocuments(List<TrainingDocumentInfo> trainingDocuments) {
    this.trainingDocuments = trainingDocuments;
    return this;
  }

  public TrainResult addTrainingDocumentsItem(TrainingDocumentInfo trainingDocumentsItem) {
    if (this.trainingDocuments == null) {
      this.trainingDocuments = new ArrayList<>();
    }
    this.trainingDocuments.add(trainingDocumentsItem);
    return this;
  }

  /**
   * List of the documents used to train the model and any errors reported in each document.
   * @return trainingDocuments
   */
  @javax.annotation.Nonnull
  public List<TrainingDocumentInfo> getTrainingDocuments() {
    return trainingDocuments;
  }

  public void setTrainingDocuments(List<TrainingDocumentInfo> trainingDocuments) {
    this.trainingDocuments = trainingDocuments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainResult trainResult = (TrainResult) o;
    return Objects.equals(this.averageModelAccuracy, trainResult.averageModelAccuracy) &&
        Objects.equals(this.errors, trainResult.errors) &&
        Objects.equals(this.fields, trainResult.fields) &&
        Objects.equals(this.trainingDocuments, trainResult.trainingDocuments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageModelAccuracy, errors, fields, trainingDocuments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainResult {\n");
    sb.append("    averageModelAccuracy: ").append(toIndentedString(averageModelAccuracy)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    trainingDocuments: ").append(toIndentedString(trainingDocuments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageModelAccuracy");
    openapiFields.add("errors");
    openapiFields.add("fields");
    openapiFields.add("trainingDocuments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("trainingDocuments");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrainResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrainResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainResult is not found in the empty JSON string", TrainResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrainResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrainResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrainResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ErrorInformation.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            FormFieldsReport.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("trainingDocuments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingDocuments` to be an array in the JSON string but got `%s`", jsonObj.get("trainingDocuments").toString()));
      }

      JsonArray jsonArraytrainingDocuments = jsonObj.getAsJsonArray("trainingDocuments");
      // validate the required field `trainingDocuments` (array)
      for (int i = 0; i < jsonArraytrainingDocuments.size(); i++) {
        TrainingDocumentInfo.validateJsonElement(jsonArraytrainingDocuments.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainResult>() {
           @Override
           public void write(JsonWriter out, TrainResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrainResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrainResult
   * @throws IOException if the JSON string is invalid with respect to TrainResult
   */
  public static TrainResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainResult.class);
  }

  /**
   * Convert an instance of TrainResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

