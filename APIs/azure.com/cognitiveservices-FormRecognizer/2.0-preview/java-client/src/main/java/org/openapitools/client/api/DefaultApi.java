/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnalyzeOperationResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.Models;
import org.openapitools.client.model.TrainRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyzeLayoutAsync
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeLayoutAsyncCall(Object fileStream, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileStream;

        // create path and map variables
        String localVarPath = "/layout/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/pdf",
            "application/json",
            "image/jpeg",
            "image/png",
            "image/tiff"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeLayoutAsyncValidateBeforeCall(Object fileStream, final ApiCallback _callback) throws ApiException {
        return analyzeLayoutAsyncCall(fileStream, _callback);

    }

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public void analyzeLayoutAsync(Object fileStream) throws ApiException {
        analyzeLayoutAsyncWithHttpInfo(fileStream);
    }

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyzeLayoutAsyncWithHttpInfo(Object fileStream) throws ApiException {
        okhttp3.Call localVarCall = analyzeLayoutAsyncValidateBeforeCall(fileStream, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Analyze Layout (asynchronously)
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeLayoutAsyncAsync(Object fileStream, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeLayoutAsyncValidateBeforeCall(fileStream, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyzeReceiptAsync
     * @param includeTextDetails Include text lines and element references in the result. (optional, default to false)
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeReceiptAsyncCall(Boolean includeTextDetails, Object fileStream, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileStream;

        // create path and map variables
        String localVarPath = "/prebuilt/receipt/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTextDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTextDetails", includeTextDetails));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/pdf",
            "application/json",
            "image/jpeg",
            "image/png",
            "image/tiff"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeReceiptAsyncValidateBeforeCall(Boolean includeTextDetails, Object fileStream, final ApiCallback _callback) throws ApiException {
        return analyzeReceiptAsyncCall(includeTextDetails, fileStream, _callback);

    }

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param includeTextDetails Include text lines and element references in the result. (optional, default to false)
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public void analyzeReceiptAsync(Boolean includeTextDetails, Object fileStream) throws ApiException {
        analyzeReceiptAsyncWithHttpInfo(includeTextDetails, fileStream);
    }

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param includeTextDetails Include text lines and element references in the result. (optional, default to false)
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyzeReceiptAsyncWithHttpInfo(Boolean includeTextDetails, Object fileStream) throws ApiException {
        okhttp3.Call localVarCall = analyzeReceiptAsyncValidateBeforeCall(includeTextDetails, fileStream, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Analyze Receipt (asynchronously)
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param includeTextDetails Include text lines and element references in the result. (optional, default to false)
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeReceiptAsyncAsync(Boolean includeTextDetails, Object fileStream, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeReceiptAsyncValidateBeforeCall(includeTextDetails, fileStream, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyzeWithCustomModel
     * @param modelId Model identifier. (required)
     * @param includeTextDetails Include text lines and element references in the result. (optional, default to false)
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeWithCustomModelCall(UUID modelId, Boolean includeTextDetails, Object fileStream, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileStream;

        // create path and map variables
        String localVarPath = "/custom/models/{modelId}/analyze"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTextDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTextDetails", includeTextDetails));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/pdf",
            "application/json",
            "image/jpeg",
            "image/png",
            "image/tiff"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeWithCustomModelValidateBeforeCall(UUID modelId, Boolean includeTextDetails, Object fileStream, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling analyzeWithCustomModel(Async)");
        }

        return analyzeWithCustomModelCall(modelId, includeTextDetails, fileStream, _callback);

    }

    /**
     * Analyze Form
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param modelId Model identifier. (required)
     * @param includeTextDetails Include text lines and element references in the result. (optional, default to false)
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public void analyzeWithCustomModel(UUID modelId, Boolean includeTextDetails, Object fileStream) throws ApiException {
        analyzeWithCustomModelWithHttpInfo(modelId, includeTextDetails, fileStream);
    }

    /**
     * Analyze Form
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param modelId Model identifier. (required)
     * @param includeTextDetails Include text lines and element references in the result. (optional, default to false)
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyzeWithCustomModelWithHttpInfo(UUID modelId, Boolean includeTextDetails, Object fileStream) throws ApiException {
        okhttp3.Call localVarCall = analyzeWithCustomModelValidateBeforeCall(modelId, includeTextDetails, fileStream, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Analyze Form (asynchronously)
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     * @param modelId Model identifier. (required)
     * @param includeTextDetails Include text lines and element references in the result. (optional, default to false)
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request is queued successfully. </td><td>  * Operation-Location - URL containing the resultId used to track the progress and obtain the result of the analyze operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeWithCustomModelAsync(UUID modelId, Boolean includeTextDetails, Object fileStream, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeWithCustomModelValidateBeforeCall(modelId, includeTextDetails, fileStream, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomModel
     * @param modelId Model identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully marked model for deletion. Model artifacts will be removed within a predefined time period. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomModelCall(UUID modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom/models/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomModelValidateBeforeCall(UUID modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling deleteCustomModel(Async)");
        }

        return deleteCustomModelCall(modelId, _callback);

    }

    /**
     * Delete Custom Model
     * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
     * @param modelId Model identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully marked model for deletion. Model artifacts will be removed within a predefined time period. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomModel(UUID modelId) throws ApiException {
        deleteCustomModelWithHttpInfo(modelId);
    }

    /**
     * Delete Custom Model
     * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
     * @param modelId Model identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully marked model for deletion. Model artifacts will be removed within a predefined time period. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomModelWithHttpInfo(UUID modelId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomModelValidateBeforeCall(modelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Custom Model (asynchronously)
     * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
     * @param modelId Model identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully marked model for deletion. Model artifacts will be removed within a predefined time period. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomModelAsync(UUID modelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomModelValidateBeforeCall(modelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyzeFormResult
     * @param modelId Model identifier. (required)
     * @param resultId Analyze operation result identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyzeFormResultCall(UUID modelId, UUID resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom/models/{modelId}/analyzeResults/{resultId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyzeFormResultValidateBeforeCall(UUID modelId, UUID resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getAnalyzeFormResult(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getAnalyzeFormResult(Async)");
        }

        return getAnalyzeFormResultCall(modelId, resultId, _callback);

    }

    /**
     * Get Analyze Form Result
     * Obtain current status and the result of the analyze form operation.
     * @param modelId Model identifier. (required)
     * @param resultId Analyze operation result identifier. (required)
     * @return AnalyzeOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzeOperationResult getAnalyzeFormResult(UUID modelId, UUID resultId) throws ApiException {
        ApiResponse<AnalyzeOperationResult> localVarResp = getAnalyzeFormResultWithHttpInfo(modelId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Analyze Form Result
     * Obtain current status and the result of the analyze form operation.
     * @param modelId Model identifier. (required)
     * @param resultId Analyze operation result identifier. (required)
     * @return ApiResponse&lt;AnalyzeOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeOperationResult> getAnalyzeFormResultWithHttpInfo(UUID modelId, UUID resultId) throws ApiException {
        okhttp3.Call localVarCall = getAnalyzeFormResultValidateBeforeCall(modelId, resultId, null);
        Type localVarReturnType = new TypeToken<AnalyzeOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Analyze Form Result (asynchronously)
     * Obtain current status and the result of the analyze form operation.
     * @param modelId Model identifier. (required)
     * @param resultId Analyze operation result identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyzeFormResultAsync(UUID modelId, UUID resultId, final ApiCallback<AnalyzeOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyzeFormResultValidateBeforeCall(modelId, resultId, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyzeLayoutResult
     * @param resultId Analyze operation result identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyzeLayoutResultCall(UUID resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layout/analyzeResults/{resultId}"
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyzeLayoutResultValidateBeforeCall(UUID resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getAnalyzeLayoutResult(Async)");
        }

        return getAnalyzeLayoutResultCall(resultId, _callback);

    }

    /**
     * Get Analyze Layout Result
     * Track the progress and obtain the result of the analyze layout operation
     * @param resultId Analyze operation result identifier. (required)
     * @return AnalyzeOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzeOperationResult getAnalyzeLayoutResult(UUID resultId) throws ApiException {
        ApiResponse<AnalyzeOperationResult> localVarResp = getAnalyzeLayoutResultWithHttpInfo(resultId);
        return localVarResp.getData();
    }

    /**
     * Get Analyze Layout Result
     * Track the progress and obtain the result of the analyze layout operation
     * @param resultId Analyze operation result identifier. (required)
     * @return ApiResponse&lt;AnalyzeOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeOperationResult> getAnalyzeLayoutResultWithHttpInfo(UUID resultId) throws ApiException {
        okhttp3.Call localVarCall = getAnalyzeLayoutResultValidateBeforeCall(resultId, null);
        Type localVarReturnType = new TypeToken<AnalyzeOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Analyze Layout Result (asynchronously)
     * Track the progress and obtain the result of the analyze layout operation
     * @param resultId Analyze operation result identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyzeLayoutResultAsync(UUID resultId, final ApiCallback<AnalyzeOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyzeLayoutResultValidateBeforeCall(resultId, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyzeReceiptResult
     * @param resultId Analyze operation result identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyzeReceiptResultCall(UUID resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prebuilt/receipt/analyzeResults/{resultId}"
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyzeReceiptResultValidateBeforeCall(UUID resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getAnalyzeReceiptResult(Async)");
        }

        return getAnalyzeReceiptResultCall(resultId, _callback);

    }

    /**
     * Get Analyze Receipt Result
     * Track the progress and obtain the result of the analyze receipt operation.
     * @param resultId Analyze operation result identifier. (required)
     * @return AnalyzeOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzeOperationResult getAnalyzeReceiptResult(UUID resultId) throws ApiException {
        ApiResponse<AnalyzeOperationResult> localVarResp = getAnalyzeReceiptResultWithHttpInfo(resultId);
        return localVarResp.getData();
    }

    /**
     * Get Analyze Receipt Result
     * Track the progress and obtain the result of the analyze receipt operation.
     * @param resultId Analyze operation result identifier. (required)
     * @return ApiResponse&lt;AnalyzeOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeOperationResult> getAnalyzeReceiptResultWithHttpInfo(UUID resultId) throws ApiException {
        okhttp3.Call localVarCall = getAnalyzeReceiptResultValidateBeforeCall(resultId, null);
        Type localVarReturnType = new TypeToken<AnalyzeOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Analyze Receipt Result (asynchronously)
     * Track the progress and obtain the result of the analyze receipt operation.
     * @param resultId Analyze operation result identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyzeReceiptResultAsync(UUID resultId, final ApiCallback<AnalyzeOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyzeReceiptResultValidateBeforeCall(resultId, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomModel
     * @param modelId Model identifier. (required)
     * @param includeKeys Include list of extracted keys in model information. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomModelCall(UUID modelId, Boolean includeKeys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom/models/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeKeys", includeKeys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomModelValidateBeforeCall(UUID modelId, Boolean includeKeys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getCustomModel(Async)");
        }

        return getCustomModelCall(modelId, includeKeys, _callback);

    }

    /**
     * Get Custom Model
     * Get detailed information about a custom model.
     * @param modelId Model identifier. (required)
     * @param includeKeys Include list of extracted keys in model information. (optional, default to false)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public Model getCustomModel(UUID modelId, Boolean includeKeys) throws ApiException {
        ApiResponse<Model> localVarResp = getCustomModelWithHttpInfo(modelId, includeKeys);
        return localVarResp.getData();
    }

    /**
     * Get Custom Model
     * Get detailed information about a custom model.
     * @param modelId Model identifier. (required)
     * @param includeKeys Include list of extracted keys in model information. (optional, default to false)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model> getCustomModelWithHttpInfo(UUID modelId, Boolean includeKeys) throws ApiException {
        okhttp3.Call localVarCall = getCustomModelValidateBeforeCall(modelId, includeKeys, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Custom Model (asynchronously)
     * Get detailed information about a custom model.
     * @param modelId Model identifier. (required)
     * @param includeKeys Include list of extracted keys in model information. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomModelAsync(UUID modelId, Boolean includeKeys, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomModelValidateBeforeCall(modelId, includeKeys, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomModels
     * @param op Specify whether to return summary or full list of models. (optional, default to full)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomModelsCall(String op, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomModelsValidateBeforeCall(String op, final ApiCallback _callback) throws ApiException {
        return getCustomModelsCall(op, _callback);

    }

    /**
     * List Custom Models
     * Get information about all custom models
     * @param op Specify whether to return summary or full list of models. (optional, default to full)
     * @return Models
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public Models getCustomModels(String op) throws ApiException {
        ApiResponse<Models> localVarResp = getCustomModelsWithHttpInfo(op);
        return localVarResp.getData();
    }

    /**
     * List Custom Models
     * Get information about all custom models
     * @param op Specify whether to return summary or full list of models. (optional, default to full)
     * @return ApiResponse&lt;Models&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Models> getCustomModelsWithHttpInfo(String op) throws ApiException {
        okhttp3.Call localVarCall = getCustomModelsValidateBeforeCall(op, null);
        Type localVarReturnType = new TypeToken<Models>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Custom Models (asynchronously)
     * Get information about all custom models
     * @param op Specify whether to return summary or full list of models. (optional, default to full)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomModelsAsync(String op, final ApiCallback<Models> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomModelsValidateBeforeCall(op, _callback);
        Type localVarReturnType = new TypeToken<Models>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trainCustomModelAsync
     * @param trainRequest Training request parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request is queued successfully. </td><td>  * Location - Location and ID of the model being trained. The status of model training is specified in the status property at the model location. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainCustomModelAsyncCall(TrainRequest trainRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainRequest;

        // create path and map variables
        String localVarPath = "/custom/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trainCustomModelAsyncValidateBeforeCall(TrainRequest trainRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trainRequest' is set
        if (trainRequest == null) {
            throw new ApiException("Missing the required parameter 'trainRequest' when calling trainCustomModelAsync(Async)");
        }

        return trainCustomModelAsyncCall(trainRequest, _callback);

    }

    /**
     * Train Custom Model
     * Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if &#39;{Mounts:Input}&#39; configuration setting value is &#39;/input&#39; then a valid source path would be &#39;/input/contosodataset&#39;. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;, &#39;image/tiff&#39;. Other type of content is ignored.
     * @param trainRequest Training request parameters. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request is queued successfully. </td><td>  * Location - Location and ID of the model being trained. The status of model training is specified in the status property at the model location. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public void trainCustomModelAsync(TrainRequest trainRequest) throws ApiException {
        trainCustomModelAsyncWithHttpInfo(trainRequest);
    }

    /**
     * Train Custom Model
     * Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if &#39;{Mounts:Input}&#39; configuration setting value is &#39;/input&#39; then a valid source path would be &#39;/input/contosodataset&#39;. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;, &#39;image/tiff&#39;. Other type of content is ignored.
     * @param trainRequest Training request parameters. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request is queued successfully. </td><td>  * Location - Location and ID of the model being trained. The status of model training is specified in the status property at the model location. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> trainCustomModelAsyncWithHttpInfo(TrainRequest trainRequest) throws ApiException {
        okhttp3.Call localVarCall = trainCustomModelAsyncValidateBeforeCall(trainRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Train Custom Model (asynchronously)
     * Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if &#39;{Mounts:Input}&#39; configuration setting value is &#39;/input&#39; then a valid source path would be &#39;/input/contosodataset&#39;. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;, &#39;image/tiff&#39;. Other type of content is ignored.
     * @param trainRequest Training request parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request is queued successfully. </td><td>  * Location - Location and ID of the model being trained. The status of model training is specified in the status property at the model location. <br>  </td></tr>
        <tr><td> 0 </td><td> Response entity accompanying non-successful responses containing additional details about the error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainCustomModelAsyncAsync(TrainRequest trainRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trainCustomModelAsyncValidateBeforeCall(trainRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
