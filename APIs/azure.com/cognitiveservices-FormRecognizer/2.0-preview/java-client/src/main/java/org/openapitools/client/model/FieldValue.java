/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FieldValueType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recognized field value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:45.327612-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldValue {
  public static final String SERIALIZED_NAME_BOUNDING_BOX = "boundingBox";
  @SerializedName(SERIALIZED_NAME_BOUNDING_BOX)
  private List<BigDecimal> boundingBox = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private BigDecimal confidence;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<String> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private FieldValueType type;

  public static final String SERIALIZED_NAME_VALUE_ARRAY = "valueArray";
  @SerializedName(SERIALIZED_NAME_VALUE_ARRAY)
  private List<FieldValue> valueArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_DATE = "valueDate";
  @SerializedName(SERIALIZED_NAME_VALUE_DATE)
  private OffsetDateTime valueDate;

  public static final String SERIALIZED_NAME_VALUE_INTEGER = "valueInteger";
  @SerializedName(SERIALIZED_NAME_VALUE_INTEGER)
  private Integer valueInteger;

  public static final String SERIALIZED_NAME_VALUE_NUMBER = "valueNumber";
  @SerializedName(SERIALIZED_NAME_VALUE_NUMBER)
  private BigDecimal valueNumber;

  public static final String SERIALIZED_NAME_VALUE_OBJECT = "valueObject";
  @SerializedName(SERIALIZED_NAME_VALUE_OBJECT)
  private Map<String, FieldValue> valueObject = new HashMap<>();

  public static final String SERIALIZED_NAME_VALUE_PHONE_NUMBER = "valuePhoneNumber";
  @SerializedName(SERIALIZED_NAME_VALUE_PHONE_NUMBER)
  private String valuePhoneNumber;

  public static final String SERIALIZED_NAME_VALUE_STRING = "valueString";
  @SerializedName(SERIALIZED_NAME_VALUE_STRING)
  private String valueString;

  public static final String SERIALIZED_NAME_VALUE_TIME = "valueTime";
  @SerializedName(SERIALIZED_NAME_VALUE_TIME)
  private OffsetDateTime valueTime;

  public FieldValue() {
  }

  public FieldValue boundingBox(List<BigDecimal> boundingBox) {
    this.boundingBox = boundingBox;
    return this;
  }

  public FieldValue addBoundingBoxItem(BigDecimal boundingBoxItem) {
    if (this.boundingBox == null) {
      this.boundingBox = new ArrayList<>();
    }
    this.boundingBox.add(boundingBoxItem);
    return this;
  }

  /**
   * Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.
   * @return boundingBox
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getBoundingBox() {
    return boundingBox;
  }

  public void setBoundingBox(List<BigDecimal> boundingBox) {
    this.boundingBox = boundingBox;
  }


  public FieldValue confidence(BigDecimal confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Confidence value.
   * minimum: 0
   * maximum: 1
   * @return confidence
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidence() {
    return confidence;
  }

  public void setConfidence(BigDecimal confidence) {
    this.confidence = confidence;
  }


  public FieldValue elements(List<String> elements) {
    this.elements = elements;
    return this;
  }

  public FieldValue addElementsItem(String elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * When includeTextDetails is set to true, a list of references to the text elements constituting this field.
   * @return elements
   */
  @javax.annotation.Nullable
  public List<String> getElements() {
    return elements;
  }

  public void setElements(List<String> elements) {
    this.elements = elements;
  }


  public FieldValue page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * The 1-based page number in the input document.
   * minimum: 1
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public FieldValue text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Text content of the extracted field.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public FieldValue type(FieldValueType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public FieldValueType getType() {
    return type;
  }

  public void setType(FieldValueType type) {
    this.type = type;
  }


  public FieldValue valueArray(List<FieldValue> valueArray) {
    this.valueArray = valueArray;
    return this;
  }

  public FieldValue addValueArrayItem(FieldValue valueArrayItem) {
    if (this.valueArray == null) {
      this.valueArray = new ArrayList<>();
    }
    this.valueArray.add(valueArrayItem);
    return this;
  }

  /**
   * Array of field values.
   * @return valueArray
   */
  @javax.annotation.Nullable
  public List<FieldValue> getValueArray() {
    return valueArray;
  }

  public void setValueArray(List<FieldValue> valueArray) {
    this.valueArray = valueArray;
  }


  public FieldValue valueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
    return this;
  }

  /**
   * Date value.
   * @return valueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValueDate() {
    return valueDate;
  }

  public void setValueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
  }


  public FieldValue valueInteger(Integer valueInteger) {
    this.valueInteger = valueInteger;
    return this;
  }

  /**
   * Integer value.
   * @return valueInteger
   */
  @javax.annotation.Nullable
  public Integer getValueInteger() {
    return valueInteger;
  }

  public void setValueInteger(Integer valueInteger) {
    this.valueInteger = valueInteger;
  }


  public FieldValue valueNumber(BigDecimal valueNumber) {
    this.valueNumber = valueNumber;
    return this;
  }

  /**
   * Floating point value.
   * @return valueNumber
   */
  @javax.annotation.Nullable
  public BigDecimal getValueNumber() {
    return valueNumber;
  }

  public void setValueNumber(BigDecimal valueNumber) {
    this.valueNumber = valueNumber;
  }


  public FieldValue valueObject(Map<String, FieldValue> valueObject) {
    this.valueObject = valueObject;
    return this;
  }

  public FieldValue putValueObjectItem(String key, FieldValue valueObjectItem) {
    if (this.valueObject == null) {
      this.valueObject = new HashMap<>();
    }
    this.valueObject.put(key, valueObjectItem);
    return this;
  }

  /**
   * Dictionary of named field values.
   * @return valueObject
   */
  @javax.annotation.Nullable
  public Map<String, FieldValue> getValueObject() {
    return valueObject;
  }

  public void setValueObject(Map<String, FieldValue> valueObject) {
    this.valueObject = valueObject;
  }


  public FieldValue valuePhoneNumber(String valuePhoneNumber) {
    this.valuePhoneNumber = valuePhoneNumber;
    return this;
  }

  /**
   * Phone number value.
   * @return valuePhoneNumber
   */
  @javax.annotation.Nullable
  public String getValuePhoneNumber() {
    return valuePhoneNumber;
  }

  public void setValuePhoneNumber(String valuePhoneNumber) {
    this.valuePhoneNumber = valuePhoneNumber;
  }


  public FieldValue valueString(String valueString) {
    this.valueString = valueString;
    return this;
  }

  /**
   * String value.
   * @return valueString
   */
  @javax.annotation.Nullable
  public String getValueString() {
    return valueString;
  }

  public void setValueString(String valueString) {
    this.valueString = valueString;
  }


  public FieldValue valueTime(OffsetDateTime valueTime) {
    this.valueTime = valueTime;
    return this;
  }

  /**
   * Time value.
   * @return valueTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValueTime() {
    return valueTime;
  }

  public void setValueTime(OffsetDateTime valueTime) {
    this.valueTime = valueTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldValue fieldValue = (FieldValue) o;
    return Objects.equals(this.boundingBox, fieldValue.boundingBox) &&
        Objects.equals(this.confidence, fieldValue.confidence) &&
        Objects.equals(this.elements, fieldValue.elements) &&
        Objects.equals(this.page, fieldValue.page) &&
        Objects.equals(this.text, fieldValue.text) &&
        Objects.equals(this.type, fieldValue.type) &&
        Objects.equals(this.valueArray, fieldValue.valueArray) &&
        Objects.equals(this.valueDate, fieldValue.valueDate) &&
        Objects.equals(this.valueInteger, fieldValue.valueInteger) &&
        Objects.equals(this.valueNumber, fieldValue.valueNumber) &&
        Objects.equals(this.valueObject, fieldValue.valueObject) &&
        Objects.equals(this.valuePhoneNumber, fieldValue.valuePhoneNumber) &&
        Objects.equals(this.valueString, fieldValue.valueString) &&
        Objects.equals(this.valueTime, fieldValue.valueTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingBox, confidence, elements, page, text, type, valueArray, valueDate, valueInteger, valueNumber, valueObject, valuePhoneNumber, valueString, valueTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldValue {\n");
    sb.append("    boundingBox: ").append(toIndentedString(boundingBox)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valueArray: ").append(toIndentedString(valueArray)).append("\n");
    sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
    sb.append("    valueInteger: ").append(toIndentedString(valueInteger)).append("\n");
    sb.append("    valueNumber: ").append(toIndentedString(valueNumber)).append("\n");
    sb.append("    valueObject: ").append(toIndentedString(valueObject)).append("\n");
    sb.append("    valuePhoneNumber: ").append(toIndentedString(valuePhoneNumber)).append("\n");
    sb.append("    valueString: ").append(toIndentedString(valueString)).append("\n");
    sb.append("    valueTime: ").append(toIndentedString(valueTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingBox");
    openapiFields.add("confidence");
    openapiFields.add("elements");
    openapiFields.add("page");
    openapiFields.add("text");
    openapiFields.add("type");
    openapiFields.add("valueArray");
    openapiFields.add("valueDate");
    openapiFields.add("valueInteger");
    openapiFields.add("valueNumber");
    openapiFields.add("valueObject");
    openapiFields.add("valuePhoneNumber");
    openapiFields.add("valueString");
    openapiFields.add("valueTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldValue is not found in the empty JSON string", FieldValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FieldValue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("boundingBox") != null && !jsonObj.get("boundingBox").isJsonNull() && !jsonObj.get("boundingBox").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boundingBox` to be an array in the JSON string but got `%s`", jsonObj.get("boundingBox").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("elements") != null && !jsonObj.get("elements").isJsonNull() && !jsonObj.get("elements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // validate the required field `type`
      FieldValueType.validateJsonElement(jsonObj.get("type"));
      if (jsonObj.get("valueArray") != null && !jsonObj.get("valueArray").isJsonNull()) {
        JsonArray jsonArrayvalueArray = jsonObj.getAsJsonArray("valueArray");
        if (jsonArrayvalueArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("valueArray").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `valueArray` to be an array in the JSON string but got `%s`", jsonObj.get("valueArray").toString()));
          }

          // validate the optional field `valueArray` (array)
          for (int i = 0; i < jsonArrayvalueArray.size(); i++) {
            FieldValue.validateJsonElement(jsonArrayvalueArray.get(i));
          };
        }
      }
      if ((jsonObj.get("valuePhoneNumber") != null && !jsonObj.get("valuePhoneNumber").isJsonNull()) && !jsonObj.get("valuePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valuePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valuePhoneNumber").toString()));
      }
      if ((jsonObj.get("valueString") != null && !jsonObj.get("valueString").isJsonNull()) && !jsonObj.get("valueString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldValue.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldValue>() {
           @Override
           public void write(JsonWriter out, FieldValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldValue
   * @throws IOException if the JSON string is invalid with respect to FieldValue
   */
  public static FieldValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldValue.class);
  }

  /**
   * Convert an instance of FieldValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

