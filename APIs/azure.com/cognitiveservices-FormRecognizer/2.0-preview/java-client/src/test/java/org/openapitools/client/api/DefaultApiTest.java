/*
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalyzeOperationResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.Models;
import org.openapitools.client.model.TrainRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Analyze Layout
     *
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyzeLayoutAsyncTest() throws ApiException {
        Object fileStream = null;
        api.analyzeLayoutAsync(fileStream);
        // TODO: test validations
    }

    /**
     * Analyze Receipt
     *
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyzeReceiptAsyncTest() throws ApiException {
        Boolean includeTextDetails = null;
        Object fileStream = null;
        api.analyzeReceiptAsync(includeTextDetails, fileStream);
        // TODO: test validations
    }

    /**
     * Analyze Form
     *
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39; or &#39;image/tiff&#39;. Alternatively, use &#39;application/json&#39; type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyzeWithCustomModelTest() throws ApiException {
        UUID modelId = null;
        Boolean includeTextDetails = null;
        Object fileStream = null;
        api.analyzeWithCustomModel(modelId, includeTextDetails, fileStream);
        // TODO: test validations
    }

    /**
     * Delete Custom Model
     *
     * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomModelTest() throws ApiException {
        UUID modelId = null;
        api.deleteCustomModel(modelId);
        // TODO: test validations
    }

    /**
     * Get Analyze Form Result
     *
     * Obtain current status and the result of the analyze form operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyzeFormResultTest() throws ApiException {
        UUID modelId = null;
        UUID resultId = null;
        AnalyzeOperationResult response = api.getAnalyzeFormResult(modelId, resultId);
        // TODO: test validations
    }

    /**
     * Get Analyze Layout Result
     *
     * Track the progress and obtain the result of the analyze layout operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyzeLayoutResultTest() throws ApiException {
        UUID resultId = null;
        AnalyzeOperationResult response = api.getAnalyzeLayoutResult(resultId);
        // TODO: test validations
    }

    /**
     * Get Analyze Receipt Result
     *
     * Track the progress and obtain the result of the analyze receipt operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyzeReceiptResultTest() throws ApiException {
        UUID resultId = null;
        AnalyzeOperationResult response = api.getAnalyzeReceiptResult(resultId);
        // TODO: test validations
    }

    /**
     * Get Custom Model
     *
     * Get detailed information about a custom model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomModelTest() throws ApiException {
        UUID modelId = null;
        Boolean includeKeys = null;
        Model response = api.getCustomModel(modelId, includeKeys);
        // TODO: test validations
    }

    /**
     * List Custom Models
     *
     * Get information about all custom models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomModelsTest() throws ApiException {
        String op = null;
        Models response = api.getCustomModels(op);
        // TODO: test validations
    }

    /**
     * Train Custom Model
     *
     * Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if &#39;{Mounts:Input}&#39; configuration setting value is &#39;/input&#39; then a valid source path would be &#39;/input/contosodataset&#39;. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - &#39;application/pdf&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;, &#39;image/tiff&#39;. Other type of content is ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trainCustomModelAsyncTest() throws ApiException {
        TrainRequest trainRequest = null;
        api.trainCustomModelAsync(trainRequest);
        // TODO: test validations
    }

}
