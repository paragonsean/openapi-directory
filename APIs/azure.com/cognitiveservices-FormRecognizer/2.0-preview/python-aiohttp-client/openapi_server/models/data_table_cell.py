# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataTableCell(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: List[float]=None, column_index: int=None, column_span: int=None, confidence: float=None, elements: List[str]=None, is_footer: bool=False, is_header: bool=False, row_index: int=None, row_span: int=None, text: str=None):
        """DataTableCell - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this DataTableCell.
        :param column_index: The column_index of this DataTableCell.
        :param column_span: The column_span of this DataTableCell.
        :param confidence: The confidence of this DataTableCell.
        :param elements: The elements of this DataTableCell.
        :param is_footer: The is_footer of this DataTableCell.
        :param is_header: The is_header of this DataTableCell.
        :param row_index: The row_index of this DataTableCell.
        :param row_span: The row_span of this DataTableCell.
        :param text: The text of this DataTableCell.
        """
        self.openapi_types = {
            'bounding_box': List[float],
            'column_index': int,
            'column_span': int,
            'confidence': float,
            'elements': List[str],
            'is_footer': bool,
            'is_header': bool,
            'row_index': int,
            'row_span': int,
            'text': str
        }

        self.attribute_map = {
            'bounding_box': 'boundingBox',
            'column_index': 'columnIndex',
            'column_span': 'columnSpan',
            'confidence': 'confidence',
            'elements': 'elements',
            'is_footer': 'isFooter',
            'is_header': 'isHeader',
            'row_index': 'rowIndex',
            'row_span': 'rowSpan',
            'text': 'text'
        }

        self._bounding_box = bounding_box
        self._column_index = column_index
        self._column_span = column_span
        self._confidence = confidence
        self._elements = elements
        self._is_footer = is_footer
        self._is_header = is_header
        self._row_index = row_index
        self._row_span = row_span
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataTableCell':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataTableCell of this DataTableCell.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this DataTableCell.

        Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.

        :return: The bounding_box of this DataTableCell.
        :rtype: List[float]
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this DataTableCell.

        Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.

        :param bounding_box: The bounding_box of this DataTableCell.
        :type bounding_box: List[float]
        """
        if bounding_box is None:
            raise ValueError("Invalid value for `bounding_box`, must not be `None`")
        if bounding_box is not None and len(bounding_box) > 8:
            raise ValueError("Invalid value for `bounding_box`, number of items must be less than or equal to `8`")
        if bounding_box is not None and len(bounding_box) < 8:
            raise ValueError("Invalid value for `bounding_box`, number of items must be greater than or equal to `8`")

        self._bounding_box = bounding_box

    @property
    def column_index(self):
        """Gets the column_index of this DataTableCell.

        Column index of the cell.

        :return: The column_index of this DataTableCell.
        :rtype: int
        """
        return self._column_index

    @column_index.setter
    def column_index(self, column_index):
        """Sets the column_index of this DataTableCell.

        Column index of the cell.

        :param column_index: The column_index of this DataTableCell.
        :type column_index: int
        """
        if column_index is None:
            raise ValueError("Invalid value for `column_index`, must not be `None`")
        if column_index is not None and column_index < 0:
            raise ValueError("Invalid value for `column_index`, must be a value greater than or equal to `0`")

        self._column_index = column_index

    @property
    def column_span(self):
        """Gets the column_span of this DataTableCell.

        Number of columns spanned by this cell.

        :return: The column_span of this DataTableCell.
        :rtype: int
        """
        return self._column_span

    @column_span.setter
    def column_span(self, column_span):
        """Sets the column_span of this DataTableCell.

        Number of columns spanned by this cell.

        :param column_span: The column_span of this DataTableCell.
        :type column_span: int
        """
        if column_span is not None and column_span < 1:
            raise ValueError("Invalid value for `column_span`, must be a value greater than or equal to `1`")

        self._column_span = column_span

    @property
    def confidence(self):
        """Gets the confidence of this DataTableCell.

        Confidence value.

        :return: The confidence of this DataTableCell.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this DataTableCell.

        Confidence value.

        :param confidence: The confidence of this DataTableCell.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def elements(self):
        """Gets the elements of this DataTableCell.

        When includeTextDetails is set to true, a list of references to the text elements constituting this table cell.

        :return: The elements of this DataTableCell.
        :rtype: List[str]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this DataTableCell.

        When includeTextDetails is set to true, a list of references to the text elements constituting this table cell.

        :param elements: The elements of this DataTableCell.
        :type elements: List[str]
        """

        self._elements = elements

    @property
    def is_footer(self):
        """Gets the is_footer of this DataTableCell.

        Is the current cell a footer cell?

        :return: The is_footer of this DataTableCell.
        :rtype: bool
        """
        return self._is_footer

    @is_footer.setter
    def is_footer(self, is_footer):
        """Sets the is_footer of this DataTableCell.

        Is the current cell a footer cell?

        :param is_footer: The is_footer of this DataTableCell.
        :type is_footer: bool
        """

        self._is_footer = is_footer

    @property
    def is_header(self):
        """Gets the is_header of this DataTableCell.

        Is the current cell a header cell?

        :return: The is_header of this DataTableCell.
        :rtype: bool
        """
        return self._is_header

    @is_header.setter
    def is_header(self, is_header):
        """Sets the is_header of this DataTableCell.

        Is the current cell a header cell?

        :param is_header: The is_header of this DataTableCell.
        :type is_header: bool
        """

        self._is_header = is_header

    @property
    def row_index(self):
        """Gets the row_index of this DataTableCell.

        Row index of the cell.

        :return: The row_index of this DataTableCell.
        :rtype: int
        """
        return self._row_index

    @row_index.setter
    def row_index(self, row_index):
        """Sets the row_index of this DataTableCell.

        Row index of the cell.

        :param row_index: The row_index of this DataTableCell.
        :type row_index: int
        """
        if row_index is None:
            raise ValueError("Invalid value for `row_index`, must not be `None`")
        if row_index is not None and row_index < 0:
            raise ValueError("Invalid value for `row_index`, must be a value greater than or equal to `0`")

        self._row_index = row_index

    @property
    def row_span(self):
        """Gets the row_span of this DataTableCell.

        Number of rows spanned by this cell.

        :return: The row_span of this DataTableCell.
        :rtype: int
        """
        return self._row_span

    @row_span.setter
    def row_span(self, row_span):
        """Sets the row_span of this DataTableCell.

        Number of rows spanned by this cell.

        :param row_span: The row_span of this DataTableCell.
        :type row_span: int
        """
        if row_span is not None and row_span < 1:
            raise ValueError("Invalid value for `row_span`, must be a value greater than or equal to `1`")

        self._row_span = row_span

    @property
    def text(self):
        """Gets the text of this DataTableCell.

        Text content of the cell.

        :return: The text of this DataTableCell.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DataTableCell.

        Text content of the cell.

        :param text: The text of this DataTableCell.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
