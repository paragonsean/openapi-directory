# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyValueElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: List[float]=None, elements: List[str]=None, text: str=None):
        """KeyValueElement - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this KeyValueElement.
        :param elements: The elements of this KeyValueElement.
        :param text: The text of this KeyValueElement.
        """
        self.openapi_types = {
            'bounding_box': List[float],
            'elements': List[str],
            'text': str
        }

        self.attribute_map = {
            'bounding_box': 'boundingBox',
            'elements': 'elements',
            'text': 'text'
        }

        self._bounding_box = bounding_box
        self._elements = elements
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyValueElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyValueElement of this KeyValueElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this KeyValueElement.

        Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.

        :return: The bounding_box of this KeyValueElement.
        :rtype: List[float]
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this KeyValueElement.

        Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.

        :param bounding_box: The bounding_box of this KeyValueElement.
        :type bounding_box: List[float]
        """
        if bounding_box is not None and len(bounding_box) > 8:
            raise ValueError("Invalid value for `bounding_box`, number of items must be less than or equal to `8`")
        if bounding_box is not None and len(bounding_box) < 8:
            raise ValueError("Invalid value for `bounding_box`, number of items must be greater than or equal to `8`")

        self._bounding_box = bounding_box

    @property
    def elements(self):
        """Gets the elements of this KeyValueElement.

        When includeTextDetails is set to true, a list of references to the text elements constituting this key or value.

        :return: The elements of this KeyValueElement.
        :rtype: List[str]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this KeyValueElement.

        When includeTextDetails is set to true, a list of references to the text elements constituting this key or value.

        :param elements: The elements of this KeyValueElement.
        :type elements: List[str]
        """

        self._elements = elements

    @property
    def text(self):
        """Gets the text of this KeyValueElement.

        The text content of the key or value.

        :return: The text of this KeyValueElement.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this KeyValueElement.

        The text content of the key or value.

        :param text: The text of this KeyValueElement.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
