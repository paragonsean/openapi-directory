# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeysResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clusters: Dict[str, list[str]]=None):
        """KeysResult - a model defined in OpenAPI

        :param clusters: The clusters of this KeysResult.
        """
        self.openapi_types = {
            'clusters': Dict[str, list[str]]
        }

        self.attribute_map = {
            'clusters': 'clusters'
        }

        self._clusters = clusters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeysResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeysResult of this KeysResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clusters(self):
        """Gets the clusters of this KeysResult.

        Object mapping clusterIds to a list of keys.

        :return: The clusters of this KeysResult.
        :rtype: Dict[str, list[str]]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this KeysResult.

        Object mapping clusterIds to a list of keys.

        :param clusters: The clusters of this KeysResult.
        :type clusters: Dict[str, list[str]]
        """
        if clusters is None:
            raise ValueError("Invalid value for `clusters`, must not be `None`")

        self._clusters = clusters
