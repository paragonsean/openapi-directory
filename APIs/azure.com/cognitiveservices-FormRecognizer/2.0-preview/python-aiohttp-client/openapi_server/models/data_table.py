# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_table_cell import DataTableCell
from openapi_server import util


class DataTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cells: List[DataTableCell]=None, columns: int=None, rows: int=None):
        """DataTable - a model defined in OpenAPI

        :param cells: The cells of this DataTable.
        :param columns: The columns of this DataTable.
        :param rows: The rows of this DataTable.
        """
        self.openapi_types = {
            'cells': List[DataTableCell],
            'columns': int,
            'rows': int
        }

        self.attribute_map = {
            'cells': 'cells',
            'columns': 'columns',
            'rows': 'rows'
        }

        self._cells = cells
        self._columns = columns
        self._rows = rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataTable of this DataTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cells(self):
        """Gets the cells of this DataTable.

        List of cells contained in the table.

        :return: The cells of this DataTable.
        :rtype: List[DataTableCell]
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this DataTable.

        List of cells contained in the table.

        :param cells: The cells of this DataTable.
        :type cells: List[DataTableCell]
        """
        if cells is None:
            raise ValueError("Invalid value for `cells`, must not be `None`")

        self._cells = cells

    @property
    def columns(self):
        """Gets the columns of this DataTable.

        Number of columns.

        :return: The columns of this DataTable.
        :rtype: int
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DataTable.

        Number of columns.

        :param columns: The columns of this DataTable.
        :type columns: int
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")
        if columns is not None and columns < 1:
            raise ValueError("Invalid value for `columns`, must be a value greater than or equal to `1`")

        self._columns = columns

    @property
    def rows(self):
        """Gets the rows of this DataTable.

        Number of rows.

        :return: The rows of this DataTable.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this DataTable.

        Number of rows.

        :param rows: The rows of this DataTable.
        :type rows: int
        """
        if rows is None:
            raise ValueError("Invalid value for `rows`, must not be `None`")
        if rows is not None and rows < 1:
            raise ValueError("Invalid value for `rows`, must be a value greater than or equal to `1`")

        self._rows = rows
