# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_result import DocumentResult
from openapi_server.models.error_information import ErrorInformation
from openapi_server.models.page_result import PageResult
from openapi_server.models.read_result import ReadResult
from openapi_server import util


class AnalyzeResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_results: List[DocumentResult]=None, errors: List[ErrorInformation]=None, page_results: List[PageResult]=None, read_results: List[ReadResult]=None, version: str=None):
        """AnalyzeResult - a model defined in OpenAPI

        :param document_results: The document_results of this AnalyzeResult.
        :param errors: The errors of this AnalyzeResult.
        :param page_results: The page_results of this AnalyzeResult.
        :param read_results: The read_results of this AnalyzeResult.
        :param version: The version of this AnalyzeResult.
        """
        self.openapi_types = {
            'document_results': List[DocumentResult],
            'errors': List[ErrorInformation],
            'page_results': List[PageResult],
            'read_results': List[ReadResult],
            'version': str
        }

        self.attribute_map = {
            'document_results': 'documentResults',
            'errors': 'errors',
            'page_results': 'pageResults',
            'read_results': 'readResults',
            'version': 'version'
        }

        self._document_results = document_results
        self._errors = errors
        self._page_results = page_results
        self._read_results = read_results
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeResult of this AnalyzeResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_results(self):
        """Gets the document_results of this AnalyzeResult.

        Document-level information extracted from the input.

        :return: The document_results of this AnalyzeResult.
        :rtype: List[DocumentResult]
        """
        return self._document_results

    @document_results.setter
    def document_results(self, document_results):
        """Sets the document_results of this AnalyzeResult.

        Document-level information extracted from the input.

        :param document_results: The document_results of this AnalyzeResult.
        :type document_results: List[DocumentResult]
        """

        self._document_results = document_results

    @property
    def errors(self):
        """Gets the errors of this AnalyzeResult.

        List of errors reported during the analyze operation.

        :return: The errors of this AnalyzeResult.
        :rtype: List[ErrorInformation]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this AnalyzeResult.

        List of errors reported during the analyze operation.

        :param errors: The errors of this AnalyzeResult.
        :type errors: List[ErrorInformation]
        """

        self._errors = errors

    @property
    def page_results(self):
        """Gets the page_results of this AnalyzeResult.

        Page-level information extracted from the input.

        :return: The page_results of this AnalyzeResult.
        :rtype: List[PageResult]
        """
        return self._page_results

    @page_results.setter
    def page_results(self, page_results):
        """Sets the page_results of this AnalyzeResult.

        Page-level information extracted from the input.

        :param page_results: The page_results of this AnalyzeResult.
        :type page_results: List[PageResult]
        """

        self._page_results = page_results

    @property
    def read_results(self):
        """Gets the read_results of this AnalyzeResult.

        Text extracted from the input.

        :return: The read_results of this AnalyzeResult.
        :rtype: List[ReadResult]
        """
        return self._read_results

    @read_results.setter
    def read_results(self, read_results):
        """Sets the read_results of this AnalyzeResult.

        Text extracted from the input.

        :param read_results: The read_results of this AnalyzeResult.
        :type read_results: List[ReadResult]
        """
        if read_results is None:
            raise ValueError("Invalid value for `read_results`, must not be `None`")

        self._read_results = read_results

    @property
    def version(self):
        """Gets the version of this AnalyzeResult.

        Version of schema used for this result.

        :return: The version of this AnalyzeResult.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AnalyzeResult.

        Version of schema used for this result.

        :param version: The version of this AnalyzeResult.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
