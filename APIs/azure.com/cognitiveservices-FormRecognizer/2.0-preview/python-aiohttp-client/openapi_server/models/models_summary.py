# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelsSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, last_updated_date_time: datetime=None, limit: int=None):
        """ModelsSummary - a model defined in OpenAPI

        :param count: The count of this ModelsSummary.
        :param last_updated_date_time: The last_updated_date_time of this ModelsSummary.
        :param limit: The limit of this ModelsSummary.
        """
        self.openapi_types = {
            'count': int,
            'last_updated_date_time': datetime,
            'limit': int
        }

        self.attribute_map = {
            'count': 'count',
            'last_updated_date_time': 'lastUpdatedDateTime',
            'limit': 'limit'
        }

        self._count = count
        self._last_updated_date_time = last_updated_date_time
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelsSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Models_summary of this ModelsSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ModelsSummary.

        Current count of trained custom models.

        :return: The count of this ModelsSummary.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ModelsSummary.

        Current count of trained custom models.

        :param count: The count of this ModelsSummary.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def last_updated_date_time(self):
        """Gets the last_updated_date_time of this ModelsSummary.

        Date and time (UTC) when the summary was last updated.

        :return: The last_updated_date_time of this ModelsSummary.
        :rtype: datetime
        """
        return self._last_updated_date_time

    @last_updated_date_time.setter
    def last_updated_date_time(self, last_updated_date_time):
        """Sets the last_updated_date_time of this ModelsSummary.

        Date and time (UTC) when the summary was last updated.

        :param last_updated_date_time: The last_updated_date_time of this ModelsSummary.
        :type last_updated_date_time: datetime
        """
        if last_updated_date_time is None:
            raise ValueError("Invalid value for `last_updated_date_time`, must not be `None`")

        self._last_updated_date_time = last_updated_date_time

    @property
    def limit(self):
        """Gets the limit of this ModelsSummary.

        Max number of models that can be trained for this subscription.

        :return: The limit of this ModelsSummary.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ModelsSummary.

        Max number of models that can be trained for this subscription.

        :param limit: The limit of this ModelsSummary.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit
