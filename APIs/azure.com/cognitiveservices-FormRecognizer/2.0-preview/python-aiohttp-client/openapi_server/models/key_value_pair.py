# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_value_element import KeyValueElement
from openapi_server import util


class KeyValuePair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, key: KeyValueElement=None, label: str=None, value: KeyValueElement=None):
        """KeyValuePair - a model defined in OpenAPI

        :param confidence: The confidence of this KeyValuePair.
        :param key: The key of this KeyValuePair.
        :param label: The label of this KeyValuePair.
        :param value: The value of this KeyValuePair.
        """
        self.openapi_types = {
            'confidence': float,
            'key': KeyValueElement,
            'label': str,
            'value': KeyValueElement
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'key': 'key',
            'label': 'label',
            'value': 'value'
        }

        self._confidence = confidence
        self._key = key
        self._label = label
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyValuePair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyValuePair of this KeyValuePair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this KeyValuePair.

        Confidence value.

        :return: The confidence of this KeyValuePair.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this KeyValuePair.

        Confidence value.

        :param confidence: The confidence of this KeyValuePair.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def key(self):
        """Gets the key of this KeyValuePair.


        :return: The key of this KeyValuePair.
        :rtype: KeyValueElement
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this KeyValuePair.


        :param key: The key of this KeyValuePair.
        :type key: KeyValueElement
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def label(self):
        """Gets the label of this KeyValuePair.

        A user defined label for the key/value pair entry.

        :return: The label of this KeyValuePair.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this KeyValuePair.

        A user defined label for the key/value pair entry.

        :param label: The label of this KeyValuePair.
        :type label: str
        """

        self._label = label

    @property
    def value(self):
        """Gets the value of this KeyValuePair.


        :return: The value of this KeyValuePair.
        :rtype: KeyValueElement
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this KeyValuePair.


        :param value: The value of this KeyValuePair.
        :type value: KeyValueElement
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
