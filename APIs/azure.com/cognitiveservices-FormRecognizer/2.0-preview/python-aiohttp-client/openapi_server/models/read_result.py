# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language import Language
from openapi_server.models.text_line import TextLine
from openapi_server import util


class ReadResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, angle: float=None, height: float=None, language: Language=None, lines: List[TextLine]=None, page: int=None, unit: str=None, width: float=None):
        """ReadResult - a model defined in OpenAPI

        :param angle: The angle of this ReadResult.
        :param height: The height of this ReadResult.
        :param language: The language of this ReadResult.
        :param lines: The lines of this ReadResult.
        :param page: The page of this ReadResult.
        :param unit: The unit of this ReadResult.
        :param width: The width of this ReadResult.
        """
        self.openapi_types = {
            'angle': float,
            'height': float,
            'language': Language,
            'lines': List[TextLine],
            'page': int,
            'unit': str,
            'width': float
        }

        self.attribute_map = {
            'angle': 'angle',
            'height': 'height',
            'language': 'language',
            'lines': 'lines',
            'page': 'page',
            'unit': 'unit',
            'width': 'width'
        }

        self._angle = angle
        self._height = height
        self._language = language
        self._lines = lines
        self._page = page
        self._unit = unit
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadResult of this ReadResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def angle(self):
        """Gets the angle of this ReadResult.

        The general orientation of the text in clockwise direction, measured in degrees between (-180, 180].

        :return: The angle of this ReadResult.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this ReadResult.

        The general orientation of the text in clockwise direction, measured in degrees between (-180, 180].

        :param angle: The angle of this ReadResult.
        :type angle: float
        """
        if angle is None:
            raise ValueError("Invalid value for `angle`, must not be `None`")
        if angle is not None and angle > 1.8E+2:
            raise ValueError("Invalid value for `angle`, must be a value less than or equal to `1.8E+2`")
        if angle is not None and angle <= -1.8E+2:
            raise ValueError("Invalid value for `angle`, must be a value greater than `-1.8E+2`")

        self._angle = angle

    @property
    def height(self):
        """Gets the height of this ReadResult.

        The height of the image/PDF in pixels/inches, respectively.

        :return: The height of this ReadResult.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ReadResult.

        The height of the image/PDF in pixels/inches, respectively.

        :param height: The height of this ReadResult.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")
        if height is not None and height < 0:
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0`")

        self._height = height

    @property
    def language(self):
        """Gets the language of this ReadResult.


        :return: The language of this ReadResult.
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ReadResult.


        :param language: The language of this ReadResult.
        :type language: Language
        """

        self._language = language

    @property
    def lines(self):
        """Gets the lines of this ReadResult.

        When includeTextDetails is set to true, a list of recognized text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order.

        :return: The lines of this ReadResult.
        :rtype: List[TextLine]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this ReadResult.

        When includeTextDetails is set to true, a list of recognized text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order.

        :param lines: The lines of this ReadResult.
        :type lines: List[TextLine]
        """

        self._lines = lines

    @property
    def page(self):
        """Gets the page of this ReadResult.

        The 1-based page number in the input document.

        :return: The page of this ReadResult.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ReadResult.

        The 1-based page number in the input document.

        :param page: The page of this ReadResult.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def unit(self):
        """Gets the unit of this ReadResult.

        The unit used by the width, height and boundingBox properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".

        :return: The unit of this ReadResult.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ReadResult.

        The unit used by the width, height and boundingBox properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".

        :param unit: The unit of this ReadResult.
        :type unit: str
        """
        allowed_values = ["pixel", "inch"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def width(self):
        """Gets the width of this ReadResult.

        The width of the image/PDF in pixels/inches, respectively.

        :return: The width of this ReadResult.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ReadResult.

        The width of the image/PDF in pixels/inches, respectively.

        :param width: The width of this ReadResult.
        :type width: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")
        if width is not None and width < 0:
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0`")

        self._width = width
