# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_value_type import FieldValueType
from openapi_server import util


class FieldValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: List[float]=None, confidence: float=None, elements: List[str]=None, page: int=None, text: str=None, type: FieldValueType=None, value_array: List[FieldValue]=None, value_date: datetime=None, value_integer: int=None, value_number: float=None, value_object: Dict[str, FieldValue]=None, value_phone_number: str=None, value_string: str=None, value_time: datetime=None):
        """FieldValue - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this FieldValue.
        :param confidence: The confidence of this FieldValue.
        :param elements: The elements of this FieldValue.
        :param page: The page of this FieldValue.
        :param text: The text of this FieldValue.
        :param type: The type of this FieldValue.
        :param value_array: The value_array of this FieldValue.
        :param value_date: The value_date of this FieldValue.
        :param value_integer: The value_integer of this FieldValue.
        :param value_number: The value_number of this FieldValue.
        :param value_object: The value_object of this FieldValue.
        :param value_phone_number: The value_phone_number of this FieldValue.
        :param value_string: The value_string of this FieldValue.
        :param value_time: The value_time of this FieldValue.
        """
        self.openapi_types = {
            'bounding_box': List[float],
            'confidence': float,
            'elements': List[str],
            'page': int,
            'text': str,
            'type': FieldValueType,
            'value_array': List[FieldValue],
            'value_date': datetime,
            'value_integer': int,
            'value_number': float,
            'value_object': Dict[str, FieldValue],
            'value_phone_number': str,
            'value_string': str,
            'value_time': datetime
        }

        self.attribute_map = {
            'bounding_box': 'boundingBox',
            'confidence': 'confidence',
            'elements': 'elements',
            'page': 'page',
            'text': 'text',
            'type': 'type',
            'value_array': 'valueArray',
            'value_date': 'valueDate',
            'value_integer': 'valueInteger',
            'value_number': 'valueNumber',
            'value_object': 'valueObject',
            'value_phone_number': 'valuePhoneNumber',
            'value_string': 'valueString',
            'value_time': 'valueTime'
        }

        self._bounding_box = bounding_box
        self._confidence = confidence
        self._elements = elements
        self._page = page
        self._text = text
        self._type = type
        self._value_array = value_array
        self._value_date = value_date
        self._value_integer = value_integer
        self._value_number = value_number
        self._value_object = value_object
        self._value_phone_number = value_phone_number
        self._value_string = value_string
        self._value_time = value_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldValue of this FieldValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this FieldValue.

        Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.

        :return: The bounding_box of this FieldValue.
        :rtype: List[float]
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this FieldValue.

        Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.

        :param bounding_box: The bounding_box of this FieldValue.
        :type bounding_box: List[float]
        """
        if bounding_box is not None and len(bounding_box) > 8:
            raise ValueError("Invalid value for `bounding_box`, number of items must be less than or equal to `8`")
        if bounding_box is not None and len(bounding_box) < 8:
            raise ValueError("Invalid value for `bounding_box`, number of items must be greater than or equal to `8`")

        self._bounding_box = bounding_box

    @property
    def confidence(self):
        """Gets the confidence of this FieldValue.

        Confidence value.

        :return: The confidence of this FieldValue.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this FieldValue.

        Confidence value.

        :param confidence: The confidence of this FieldValue.
        :type confidence: float
        """
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def elements(self):
        """Gets the elements of this FieldValue.

        When includeTextDetails is set to true, a list of references to the text elements constituting this field.

        :return: The elements of this FieldValue.
        :rtype: List[str]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this FieldValue.

        When includeTextDetails is set to true, a list of references to the text elements constituting this field.

        :param elements: The elements of this FieldValue.
        :type elements: List[str]
        """

        self._elements = elements

    @property
    def page(self):
        """Gets the page of this FieldValue.

        The 1-based page number in the input document.

        :return: The page of this FieldValue.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this FieldValue.

        The 1-based page number in the input document.

        :param page: The page of this FieldValue.
        :type page: int
        """
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def text(self):
        """Gets the text of this FieldValue.

        Text content of the extracted field.

        :return: The text of this FieldValue.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this FieldValue.

        Text content of the extracted field.

        :param text: The text of this FieldValue.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this FieldValue.


        :return: The type of this FieldValue.
        :rtype: FieldValueType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldValue.


        :param type: The type of this FieldValue.
        :type type: FieldValueType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def value_array(self):
        """Gets the value_array of this FieldValue.

        Array of field values.

        :return: The value_array of this FieldValue.
        :rtype: List[FieldValue]
        """
        return self._value_array

    @value_array.setter
    def value_array(self, value_array):
        """Sets the value_array of this FieldValue.

        Array of field values.

        :param value_array: The value_array of this FieldValue.
        :type value_array: List[FieldValue]
        """

        self._value_array = value_array

    @property
    def value_date(self):
        """Gets the value_date of this FieldValue.

        Date value.

        :return: The value_date of this FieldValue.
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this FieldValue.

        Date value.

        :param value_date: The value_date of this FieldValue.
        :type value_date: datetime
        """

        self._value_date = value_date

    @property
    def value_integer(self):
        """Gets the value_integer of this FieldValue.

        Integer value.

        :return: The value_integer of this FieldValue.
        :rtype: int
        """
        return self._value_integer

    @value_integer.setter
    def value_integer(self, value_integer):
        """Sets the value_integer of this FieldValue.

        Integer value.

        :param value_integer: The value_integer of this FieldValue.
        :type value_integer: int
        """

        self._value_integer = value_integer

    @property
    def value_number(self):
        """Gets the value_number of this FieldValue.

        Floating point value.

        :return: The value_number of this FieldValue.
        :rtype: float
        """
        return self._value_number

    @value_number.setter
    def value_number(self, value_number):
        """Sets the value_number of this FieldValue.

        Floating point value.

        :param value_number: The value_number of this FieldValue.
        :type value_number: float
        """

        self._value_number = value_number

    @property
    def value_object(self):
        """Gets the value_object of this FieldValue.

        Dictionary of named field values.

        :return: The value_object of this FieldValue.
        :rtype: Dict[str, FieldValue]
        """
        return self._value_object

    @value_object.setter
    def value_object(self, value_object):
        """Sets the value_object of this FieldValue.

        Dictionary of named field values.

        :param value_object: The value_object of this FieldValue.
        :type value_object: Dict[str, FieldValue]
        """

        self._value_object = value_object

    @property
    def value_phone_number(self):
        """Gets the value_phone_number of this FieldValue.

        Phone number value.

        :return: The value_phone_number of this FieldValue.
        :rtype: str
        """
        return self._value_phone_number

    @value_phone_number.setter
    def value_phone_number(self, value_phone_number):
        """Sets the value_phone_number of this FieldValue.

        Phone number value.

        :param value_phone_number: The value_phone_number of this FieldValue.
        :type value_phone_number: str
        """

        self._value_phone_number = value_phone_number

    @property
    def value_string(self):
        """Gets the value_string of this FieldValue.

        String value.

        :return: The value_string of this FieldValue.
        :rtype: str
        """
        return self._value_string

    @value_string.setter
    def value_string(self, value_string):
        """Sets the value_string of this FieldValue.

        String value.

        :param value_string: The value_string of this FieldValue.
        :type value_string: str
        """

        self._value_string = value_string

    @property
    def value_time(self):
        """Gets the value_time of this FieldValue.

        Time value.

        :return: The value_time of this FieldValue.
        :rtype: datetime
        """
        return self._value_time

    @value_time.setter
    def value_time(self, value_time):
        """Sets the value_time of this FieldValue.

        Time value.

        :param value_time: The value_time of this FieldValue.
        :type value_time: datetime
        """

        self._value_time = value_time
