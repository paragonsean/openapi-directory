# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_table import DataTable
from openapi_server.models.key_value_pair import KeyValuePair
from openapi_server import util


class PageResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_id: int=None, key_value_pairs: List[KeyValuePair]=None, page: int=None, tables: List[DataTable]=None):
        """PageResult - a model defined in OpenAPI

        :param cluster_id: The cluster_id of this PageResult.
        :param key_value_pairs: The key_value_pairs of this PageResult.
        :param page: The page of this PageResult.
        :param tables: The tables of this PageResult.
        """
        self.openapi_types = {
            'cluster_id': int,
            'key_value_pairs': List[KeyValuePair],
            'page': int,
            'tables': List[DataTable]
        }

        self.attribute_map = {
            'cluster_id': 'clusterId',
            'key_value_pairs': 'keyValuePairs',
            'page': 'page',
            'tables': 'tables'
        }

        self._cluster_id = cluster_id
        self._key_value_pairs = key_value_pairs
        self._page = page
        self._tables = tables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PageResult of this PageResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this PageResult.

        Cluster identifier.

        :return: The cluster_id of this PageResult.
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this PageResult.

        Cluster identifier.

        :param cluster_id: The cluster_id of this PageResult.
        :type cluster_id: int
        """
        if cluster_id is not None and cluster_id < 0:
            raise ValueError("Invalid value for `cluster_id`, must be a value greater than or equal to `0`")

        self._cluster_id = cluster_id

    @property
    def key_value_pairs(self):
        """Gets the key_value_pairs of this PageResult.

        List of key-value pairs extracted from the page.

        :return: The key_value_pairs of this PageResult.
        :rtype: List[KeyValuePair]
        """
        return self._key_value_pairs

    @key_value_pairs.setter
    def key_value_pairs(self, key_value_pairs):
        """Sets the key_value_pairs of this PageResult.

        List of key-value pairs extracted from the page.

        :param key_value_pairs: The key_value_pairs of this PageResult.
        :type key_value_pairs: List[KeyValuePair]
        """

        self._key_value_pairs = key_value_pairs

    @property
    def page(self):
        """Gets the page of this PageResult.

        Page number.

        :return: The page of this PageResult.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PageResult.

        Page number.

        :param page: The page of this PageResult.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def tables(self):
        """Gets the tables of this PageResult.

        List of data tables extracted from the page.

        :return: The tables of this PageResult.
        :rtype: List[DataTable]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this PageResult.

        List of data tables extracted from the page.

        :param tables: The tables of this PageResult.
        :type tables: List[DataTable]
        """

        self._tables = tables
