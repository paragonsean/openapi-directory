# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analyze_result import AnalyzeResult
from openapi_server.models.operation_status import OperationStatus
from openapi_server import util


class AnalyzeOperationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyze_result: AnalyzeResult=None, created_date_time: datetime=None, last_updated_date_time: datetime=None, status: OperationStatus=None):
        """AnalyzeOperationResult - a model defined in OpenAPI

        :param analyze_result: The analyze_result of this AnalyzeOperationResult.
        :param created_date_time: The created_date_time of this AnalyzeOperationResult.
        :param last_updated_date_time: The last_updated_date_time of this AnalyzeOperationResult.
        :param status: The status of this AnalyzeOperationResult.
        """
        self.openapi_types = {
            'analyze_result': AnalyzeResult,
            'created_date_time': datetime,
            'last_updated_date_time': datetime,
            'status': OperationStatus
        }

        self.attribute_map = {
            'analyze_result': 'analyzeResult',
            'created_date_time': 'createdDateTime',
            'last_updated_date_time': 'lastUpdatedDateTime',
            'status': 'status'
        }

        self._analyze_result = analyze_result
        self._created_date_time = created_date_time
        self._last_updated_date_time = last_updated_date_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeOperationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeOperationResult of this AnalyzeOperationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyze_result(self):
        """Gets the analyze_result of this AnalyzeOperationResult.


        :return: The analyze_result of this AnalyzeOperationResult.
        :rtype: AnalyzeResult
        """
        return self._analyze_result

    @analyze_result.setter
    def analyze_result(self, analyze_result):
        """Sets the analyze_result of this AnalyzeOperationResult.


        :param analyze_result: The analyze_result of this AnalyzeOperationResult.
        :type analyze_result: AnalyzeResult
        """

        self._analyze_result = analyze_result

    @property
    def created_date_time(self):
        """Gets the created_date_time of this AnalyzeOperationResult.

        Date and time (UTC) when the analyze operation was submitted.

        :return: The created_date_time of this AnalyzeOperationResult.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this AnalyzeOperationResult.

        Date and time (UTC) when the analyze operation was submitted.

        :param created_date_time: The created_date_time of this AnalyzeOperationResult.
        :type created_date_time: datetime
        """
        if created_date_time is None:
            raise ValueError("Invalid value for `created_date_time`, must not be `None`")

        self._created_date_time = created_date_time

    @property
    def last_updated_date_time(self):
        """Gets the last_updated_date_time of this AnalyzeOperationResult.

        Date and time (UTC) when the status was last updated.

        :return: The last_updated_date_time of this AnalyzeOperationResult.
        :rtype: datetime
        """
        return self._last_updated_date_time

    @last_updated_date_time.setter
    def last_updated_date_time(self, last_updated_date_time):
        """Sets the last_updated_date_time of this AnalyzeOperationResult.

        Date and time (UTC) when the status was last updated.

        :param last_updated_date_time: The last_updated_date_time of this AnalyzeOperationResult.
        :type last_updated_date_time: datetime
        """
        if last_updated_date_time is None:
            raise ValueError("Invalid value for `last_updated_date_time`, must not be `None`")

        self._last_updated_date_time = last_updated_date_time

    @property
    def status(self):
        """Gets the status of this AnalyzeOperationResult.


        :return: The status of this AnalyzeOperationResult.
        :rtype: OperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnalyzeOperationResult.


        :param status: The status of this AnalyzeOperationResult.
        :type status: OperationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
