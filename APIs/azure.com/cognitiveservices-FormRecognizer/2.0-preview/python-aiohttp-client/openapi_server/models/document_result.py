# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_value import FieldValue
from openapi_server import util


class DocumentResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doc_type: str=None, fields: Dict[str, FieldValue]=None, page_range: List[int]=None):
        """DocumentResult - a model defined in OpenAPI

        :param doc_type: The doc_type of this DocumentResult.
        :param fields: The fields of this DocumentResult.
        :param page_range: The page_range of this DocumentResult.
        """
        self.openapi_types = {
            'doc_type': str,
            'fields': Dict[str, FieldValue],
            'page_range': List[int]
        }

        self.attribute_map = {
            'doc_type': 'docType',
            'fields': 'fields',
            'page_range': 'pageRange'
        }

        self._doc_type = doc_type
        self._fields = fields
        self._page_range = page_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentResult of this DocumentResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doc_type(self):
        """Gets the doc_type of this DocumentResult.

        Document type.

        :return: The doc_type of this DocumentResult.
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this DocumentResult.

        Document type.

        :param doc_type: The doc_type of this DocumentResult.
        :type doc_type: str
        """
        if doc_type is None:
            raise ValueError("Invalid value for `doc_type`, must not be `None`")

        self._doc_type = doc_type

    @property
    def fields(self):
        """Gets the fields of this DocumentResult.

        Dictionary of named field values.

        :return: The fields of this DocumentResult.
        :rtype: Dict[str, FieldValue]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this DocumentResult.

        Dictionary of named field values.

        :param fields: The fields of this DocumentResult.
        :type fields: Dict[str, FieldValue]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def page_range(self):
        """Gets the page_range of this DocumentResult.

        First and last page number where the document is found.

        :return: The page_range of this DocumentResult.
        :rtype: List[int]
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this DocumentResult.

        First and last page number where the document is found.

        :param page_range: The page_range of this DocumentResult.
        :type page_range: List[int]
        """
        if page_range is None:
            raise ValueError("Invalid value for `page_range`, must not be `None`")
        if page_range is not None and len(page_range) > 2:
            raise ValueError("Invalid value for `page_range`, number of items must be less than or equal to `2`")
        if page_range is not None and len(page_range) < 2:
            raise ValueError("Invalid value for `page_range`, number of items must be greater than or equal to `2`")

        self._page_range = page_range
