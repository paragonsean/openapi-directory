# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_information import ErrorInformation
from openapi_server.models.form_fields_report import FormFieldsReport
from openapi_server.models.training_document_info import TrainingDocumentInfo
from openapi_server import util


class TrainResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_model_accuracy: float=None, errors: List[ErrorInformation]=None, fields: List[FormFieldsReport]=None, training_documents: List[TrainingDocumentInfo]=None):
        """TrainResult - a model defined in OpenAPI

        :param average_model_accuracy: The average_model_accuracy of this TrainResult.
        :param errors: The errors of this TrainResult.
        :param fields: The fields of this TrainResult.
        :param training_documents: The training_documents of this TrainResult.
        """
        self.openapi_types = {
            'average_model_accuracy': float,
            'errors': List[ErrorInformation],
            'fields': List[FormFieldsReport],
            'training_documents': List[TrainingDocumentInfo]
        }

        self.attribute_map = {
            'average_model_accuracy': 'averageModelAccuracy',
            'errors': 'errors',
            'fields': 'fields',
            'training_documents': 'trainingDocuments'
        }

        self._average_model_accuracy = average_model_accuracy
        self._errors = errors
        self._fields = fields
        self._training_documents = training_documents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainResult of this TrainResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_model_accuracy(self):
        """Gets the average_model_accuracy of this TrainResult.

        Average accuracy.

        :return: The average_model_accuracy of this TrainResult.
        :rtype: float
        """
        return self._average_model_accuracy

    @average_model_accuracy.setter
    def average_model_accuracy(self, average_model_accuracy):
        """Sets the average_model_accuracy of this TrainResult.

        Average accuracy.

        :param average_model_accuracy: The average_model_accuracy of this TrainResult.
        :type average_model_accuracy: float
        """

        self._average_model_accuracy = average_model_accuracy

    @property
    def errors(self):
        """Gets the errors of this TrainResult.

        Errors returned during the training operation.

        :return: The errors of this TrainResult.
        :rtype: List[ErrorInformation]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this TrainResult.

        Errors returned during the training operation.

        :param errors: The errors of this TrainResult.
        :type errors: List[ErrorInformation]
        """

        self._errors = errors

    @property
    def fields(self):
        """Gets the fields of this TrainResult.

        List of fields used to train the model and the train operation error reported by each.

        :return: The fields of this TrainResult.
        :rtype: List[FormFieldsReport]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TrainResult.

        List of fields used to train the model and the train operation error reported by each.

        :param fields: The fields of this TrainResult.
        :type fields: List[FormFieldsReport]
        """

        self._fields = fields

    @property
    def training_documents(self):
        """Gets the training_documents of this TrainResult.

        List of the documents used to train the model and any errors reported in each document.

        :return: The training_documents of this TrainResult.
        :rtype: List[TrainingDocumentInfo]
        """
        return self._training_documents

    @training_documents.setter
    def training_documents(self, training_documents):
        """Sets the training_documents of this TrainResult.

        List of the documents used to train the model and any errors reported in each document.

        :param training_documents: The training_documents of this TrainResult.
        :type training_documents: List[TrainingDocumentInfo]
        """
        if training_documents is None:
            raise ValueError("Invalid value for `training_documents`, must not be `None`")

        self._training_documents = training_documents
