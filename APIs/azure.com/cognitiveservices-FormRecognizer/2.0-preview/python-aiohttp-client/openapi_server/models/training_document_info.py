# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_information import ErrorInformation
from openapi_server import util


class TrainingDocumentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_name: str=None, errors: List[ErrorInformation]=None, pages: int=None, status: str=None):
        """TrainingDocumentInfo - a model defined in OpenAPI

        :param document_name: The document_name of this TrainingDocumentInfo.
        :param errors: The errors of this TrainingDocumentInfo.
        :param pages: The pages of this TrainingDocumentInfo.
        :param status: The status of this TrainingDocumentInfo.
        """
        self.openapi_types = {
            'document_name': str,
            'errors': List[ErrorInformation],
            'pages': int,
            'status': str
        }

        self.attribute_map = {
            'document_name': 'documentName',
            'errors': 'errors',
            'pages': 'pages',
            'status': 'status'
        }

        self._document_name = document_name
        self._errors = errors
        self._pages = pages
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingDocumentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingDocumentInfo of this TrainingDocumentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_name(self):
        """Gets the document_name of this TrainingDocumentInfo.

        Training document name.

        :return: The document_name of this TrainingDocumentInfo.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this TrainingDocumentInfo.

        Training document name.

        :param document_name: The document_name of this TrainingDocumentInfo.
        :type document_name: str
        """
        if document_name is None:
            raise ValueError("Invalid value for `document_name`, must not be `None`")

        self._document_name = document_name

    @property
    def errors(self):
        """Gets the errors of this TrainingDocumentInfo.

        List of errors.

        :return: The errors of this TrainingDocumentInfo.
        :rtype: List[ErrorInformation]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this TrainingDocumentInfo.

        List of errors.

        :param errors: The errors of this TrainingDocumentInfo.
        :type errors: List[ErrorInformation]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def pages(self):
        """Gets the pages of this TrainingDocumentInfo.

        Total number of pages trained.

        :return: The pages of this TrainingDocumentInfo.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this TrainingDocumentInfo.

        Total number of pages trained.

        :param pages: The pages of this TrainingDocumentInfo.
        :type pages: int
        """
        if pages is None:
            raise ValueError("Invalid value for `pages`, must not be `None`")

        self._pages = pages

    @property
    def status(self):
        """Gets the status of this TrainingDocumentInfo.

        Status of the training operation.

        :return: The status of this TrainingDocumentInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrainingDocumentInfo.

        Status of the training operation.

        :param status: The status of this TrainingDocumentInfo.
        :type status: str
        """
        allowed_values = ["succeeded", "partiallySucceeded", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
