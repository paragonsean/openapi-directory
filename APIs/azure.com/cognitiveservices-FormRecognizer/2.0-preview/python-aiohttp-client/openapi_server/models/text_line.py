# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language import Language
from openapi_server.models.text_word import TextWord
from openapi_server import util


class TextLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: List[float]=None, language: Language=None, text: str=None, words: List[TextWord]=None):
        """TextLine - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this TextLine.
        :param language: The language of this TextLine.
        :param text: The text of this TextLine.
        :param words: The words of this TextLine.
        """
        self.openapi_types = {
            'bounding_box': List[float],
            'language': Language,
            'text': str,
            'words': List[TextWord]
        }

        self.attribute_map = {
            'bounding_box': 'boundingBox',
            'language': 'language',
            'text': 'text',
            'words': 'words'
        }

        self._bounding_box = bounding_box
        self._language = language
        self._text = text
        self._words = words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextLine of this TextLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this TextLine.

        Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.

        :return: The bounding_box of this TextLine.
        :rtype: List[float]
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this TextLine.

        Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.

        :param bounding_box: The bounding_box of this TextLine.
        :type bounding_box: List[float]
        """
        if bounding_box is None:
            raise ValueError("Invalid value for `bounding_box`, must not be `None`")
        if bounding_box is not None and len(bounding_box) > 8:
            raise ValueError("Invalid value for `bounding_box`, number of items must be less than or equal to `8`")
        if bounding_box is not None and len(bounding_box) < 8:
            raise ValueError("Invalid value for `bounding_box`, number of items must be greater than or equal to `8`")

        self._bounding_box = bounding_box

    @property
    def language(self):
        """Gets the language of this TextLine.


        :return: The language of this TextLine.
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TextLine.


        :param language: The language of this TextLine.
        :type language: Language
        """

        self._language = language

    @property
    def text(self):
        """Gets the text of this TextLine.

        The text content of the line.

        :return: The text of this TextLine.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TextLine.

        The text content of the line.

        :param text: The text of this TextLine.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def words(self):
        """Gets the words of this TextLine.

        List of words in the text line.

        :return: The words of this TextLine.
        :rtype: List[TextWord]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this TextLine.

        List of words in the text line.

        :param words: The words of this TextLine.
        :type words: List[TextWord]
        """
        if words is None:
            raise ValueError("Invalid value for `words`, must not be `None`")

        self._words = words
