/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataTableCell from './DataTableCell';

/**
 * The DataTable model module.
 * @module model/DataTable
 * @version 2.0-preview
 */
class DataTable {
    /**
     * Constructs a new <code>DataTable</code>.
     * Information about the extracted table contained in a page.
     * @alias module:model/DataTable
     * @param cells {Array.<module:model/DataTableCell>} List of cells contained in the table.
     * @param columns {Number} Number of columns.
     * @param rows {Number} Number of rows.
     */
    constructor(cells, columns, rows) { 
        
        DataTable.initialize(this, cells, columns, rows);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cells, columns, rows) { 
        obj['cells'] = cells;
        obj['columns'] = columns;
        obj['rows'] = rows;
    }

    /**
     * Constructs a <code>DataTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataTable} obj Optional instance to populate.
     * @return {module:model/DataTable} The populated <code>DataTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataTable();

            if (data.hasOwnProperty('cells')) {
                obj['cells'] = ApiClient.convertToType(data['cells'], [DataTableCell]);
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], 'Number');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataTable</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataTable.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['cells']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cells'])) {
                throw new Error("Expected the field `cells` to be an array in the JSON data but got " + data['cells']);
            }
            // validate the optional field `cells` (array)
            for (const item of data['cells']) {
                DataTableCell.validateJSON(item);
            };
        }

        return true;
    }


}

DataTable.RequiredProperties = ["cells", "columns", "rows"];

/**
 * List of cells contained in the table.
 * @member {Array.<module:model/DataTableCell>} cells
 */
DataTable.prototype['cells'] = undefined;

/**
 * Number of columns.
 * @member {Number} columns
 */
DataTable.prototype['columns'] = undefined;

/**
 * Number of rows.
 * @member {Number} rows
 */
DataTable.prototype['rows'] = undefined;






export default DataTable;

