/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorInformation from './ErrorInformation';
import FormFieldsReport from './FormFieldsReport';
import TrainingDocumentInfo from './TrainingDocumentInfo';

/**
 * The TrainResult model module.
 * @module model/TrainResult
 * @version 2.0-preview
 */
class TrainResult {
    /**
     * Constructs a new <code>TrainResult</code>.
     * Custom model training result.
     * @alias module:model/TrainResult
     * @param trainingDocuments {Array.<module:model/TrainingDocumentInfo>} List of the documents used to train the model and any errors reported in each document.
     */
    constructor(trainingDocuments) { 
        
        TrainResult.initialize(this, trainingDocuments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, trainingDocuments) { 
        obj['trainingDocuments'] = trainingDocuments;
    }

    /**
     * Constructs a <code>TrainResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrainResult} obj Optional instance to populate.
     * @return {module:model/TrainResult} The populated <code>TrainResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrainResult();

            if (data.hasOwnProperty('averageModelAccuracy')) {
                obj['averageModelAccuracy'] = ApiClient.convertToType(data['averageModelAccuracy'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorInformation]);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [FormFieldsReport]);
            }
            if (data.hasOwnProperty('trainingDocuments')) {
                obj['trainingDocuments'] = ApiClient.convertToType(data['trainingDocuments'], [TrainingDocumentInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrainResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrainResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrainResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ErrorInformation.validateJSON(item);
            };
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                FormFieldsReport.validateJSON(item);
            };
        }
        if (data['trainingDocuments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trainingDocuments'])) {
                throw new Error("Expected the field `trainingDocuments` to be an array in the JSON data but got " + data['trainingDocuments']);
            }
            // validate the optional field `trainingDocuments` (array)
            for (const item of data['trainingDocuments']) {
                TrainingDocumentInfo.validateJSON(item);
            };
        }

        return true;
    }


}

TrainResult.RequiredProperties = ["trainingDocuments"];

/**
 * Average accuracy.
 * @member {Number} averageModelAccuracy
 */
TrainResult.prototype['averageModelAccuracy'] = undefined;

/**
 * Errors returned during the training operation.
 * @member {Array.<module:model/ErrorInformation>} errors
 */
TrainResult.prototype['errors'] = undefined;

/**
 * List of fields used to train the model and the train operation error reported by each.
 * @member {Array.<module:model/FormFieldsReport>} fields
 */
TrainResult.prototype['fields'] = undefined;

/**
 * List of the documents used to train the model and any errors reported in each document.
 * @member {Array.<module:model/TrainingDocumentInfo>} trainingDocuments
 */
TrainResult.prototype['trainingDocuments'] = undefined;






export default TrainResult;

