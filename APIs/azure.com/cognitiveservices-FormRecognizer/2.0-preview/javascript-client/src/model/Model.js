/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeysResult from './KeysResult';
import ModelInfo from './ModelInfo';
import TrainResult from './TrainResult';

/**
 * The Model model module.
 * @module model/Model
 * @version 2.0-preview
 */
class Model {
    /**
     * Constructs a new <code>Model</code>.
     * Response to the get custom model operation.
     * @alias module:model/Model
     * @param modelInfo {module:model/ModelInfo} 
     */
    constructor(modelInfo) { 
        
        Model.initialize(this, modelInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelInfo) { 
        obj['modelInfo'] = modelInfo;
    }

    /**
     * Constructs a <code>Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Model} obj Optional instance to populate.
     * @return {module:model/Model} The populated <code>Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Model();

            if (data.hasOwnProperty('keys')) {
                obj['keys'] = KeysResult.constructFromObject(data['keys']);
            }
            if (data.hasOwnProperty('modelInfo')) {
                obj['modelInfo'] = ModelInfo.constructFromObject(data['modelInfo']);
            }
            if (data.hasOwnProperty('trainResult')) {
                obj['trainResult'] = TrainResult.constructFromObject(data['trainResult']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Model</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Model.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `keys`
        if (data['keys']) { // data not null
          KeysResult.validateJSON(data['keys']);
        }
        // validate the optional field `modelInfo`
        if (data['modelInfo']) { // data not null
          ModelInfo.validateJSON(data['modelInfo']);
        }
        // validate the optional field `trainResult`
        if (data['trainResult']) { // data not null
          TrainResult.validateJSON(data['trainResult']);
        }

        return true;
    }


}

Model.RequiredProperties = ["modelInfo"];

/**
 * @member {module:model/KeysResult} keys
 */
Model.prototype['keys'] = undefined;

/**
 * @member {module:model/ModelInfo} modelInfo
 */
Model.prototype['modelInfo'] = undefined;

/**
 * @member {module:model/TrainResult} trainResult
 */
Model.prototype['trainResult'] = undefined;






export default Model;

