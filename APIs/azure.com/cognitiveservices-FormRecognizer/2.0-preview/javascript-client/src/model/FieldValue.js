/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldValueType from './FieldValueType';

/**
 * The FieldValue model module.
 * @module model/FieldValue
 * @version 2.0-preview
 */
class FieldValue {
    /**
     * Constructs a new <code>FieldValue</code>.
     * Recognized field value.
     * @alias module:model/FieldValue
     * @param type {module:model/FieldValueType} 
     */
    constructor(type) { 
        
        FieldValue.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FieldValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldValue} obj Optional instance to populate.
     * @return {module:model/FieldValue} The populated <code>FieldValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldValue();

            if (data.hasOwnProperty('boundingBox')) {
                obj['boundingBox'] = ApiClient.convertToType(data['boundingBox'], ['Number']);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], ['String']);
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = FieldValueType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('valueArray')) {
                obj['valueArray'] = ApiClient.convertToType(data['valueArray'], [FieldValue]);
            }
            if (data.hasOwnProperty('valueDate')) {
                obj['valueDate'] = ApiClient.convertToType(data['valueDate'], 'Date');
            }
            if (data.hasOwnProperty('valueInteger')) {
                obj['valueInteger'] = ApiClient.convertToType(data['valueInteger'], 'Number');
            }
            if (data.hasOwnProperty('valueNumber')) {
                obj['valueNumber'] = ApiClient.convertToType(data['valueNumber'], 'Number');
            }
            if (data.hasOwnProperty('valueObject')) {
                obj['valueObject'] = ApiClient.convertToType(data['valueObject'], {'String': FieldValue});
            }
            if (data.hasOwnProperty('valuePhoneNumber')) {
                obj['valuePhoneNumber'] = ApiClient.convertToType(data['valuePhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('valueString')) {
                obj['valueString'] = ApiClient.convertToType(data['valueString'], 'String');
            }
            if (data.hasOwnProperty('valueTime')) {
                obj['valueTime'] = ApiClient.convertToType(data['valueTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FieldValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['boundingBox'])) {
            throw new Error("Expected the field `boundingBox` to be an array in the JSON data but got " + data['boundingBox']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['elements'])) {
            throw new Error("Expected the field `elements` to be an array in the JSON data but got " + data['elements']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        if (data['valueArray']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['valueArray'])) {
                throw new Error("Expected the field `valueArray` to be an array in the JSON data but got " + data['valueArray']);
            }
            // validate the optional field `valueArray` (array)
            for (const item of data['valueArray']) {
                FieldValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['valuePhoneNumber'] && !(typeof data['valuePhoneNumber'] === 'string' || data['valuePhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `valuePhoneNumber` to be a primitive type in the JSON string but got " + data['valuePhoneNumber']);
        }
        // ensure the json data is a string
        if (data['valueString'] && !(typeof data['valueString'] === 'string' || data['valueString'] instanceof String)) {
            throw new Error("Expected the field `valueString` to be a primitive type in the JSON string but got " + data['valueString']);
        }

        return true;
    }


}

FieldValue.RequiredProperties = ["type"];

/**
 * Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.
 * @member {Array.<Number>} boundingBox
 */
FieldValue.prototype['boundingBox'] = undefined;

/**
 * Confidence value.
 * @member {Number} confidence
 */
FieldValue.prototype['confidence'] = undefined;

/**
 * When includeTextDetails is set to true, a list of references to the text elements constituting this field.
 * @member {Array.<String>} elements
 */
FieldValue.prototype['elements'] = undefined;

/**
 * The 1-based page number in the input document.
 * @member {Number} page
 */
FieldValue.prototype['page'] = undefined;

/**
 * Text content of the extracted field.
 * @member {String} text
 */
FieldValue.prototype['text'] = undefined;

/**
 * @member {module:model/FieldValueType} type
 */
FieldValue.prototype['type'] = undefined;

/**
 * Array of field values.
 * @member {Array.<module:model/FieldValue>} valueArray
 */
FieldValue.prototype['valueArray'] = undefined;

/**
 * Date value.
 * @member {Date} valueDate
 */
FieldValue.prototype['valueDate'] = undefined;

/**
 * Integer value.
 * @member {Number} valueInteger
 */
FieldValue.prototype['valueInteger'] = undefined;

/**
 * Floating point value.
 * @member {Number} valueNumber
 */
FieldValue.prototype['valueNumber'] = undefined;

/**
 * Dictionary of named field values.
 * @member {Object.<String, module:model/FieldValue>} valueObject
 */
FieldValue.prototype['valueObject'] = undefined;

/**
 * Phone number value.
 * @member {String} valuePhoneNumber
 */
FieldValue.prototype['valuePhoneNumber'] = undefined;

/**
 * String value.
 * @member {String} valueString
 */
FieldValue.prototype['valueString'] = undefined;

/**
 * Time value.
 * @member {Date} valueTime
 */
FieldValue.prototype['valueTime'] = undefined;






export default FieldValue;

