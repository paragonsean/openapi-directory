/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FormFieldsReport model module.
 * @module model/FormFieldsReport
 * @version 2.0-preview
 */
class FormFieldsReport {
    /**
     * Constructs a new <code>FormFieldsReport</code>.
     * Report for a custom model training field.
     * @alias module:model/FormFieldsReport
     * @param accuracy {Number} Estimated extraction accuracy for this field.
     * @param fieldName {String} Training field name.
     */
    constructor(accuracy, fieldName) { 
        
        FormFieldsReport.initialize(this, accuracy, fieldName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accuracy, fieldName) { 
        obj['accuracy'] = accuracy;
        obj['fieldName'] = fieldName;
    }

    /**
     * Constructs a <code>FormFieldsReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormFieldsReport} obj Optional instance to populate.
     * @return {module:model/FormFieldsReport} The populated <code>FormFieldsReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormFieldsReport();

            if (data.hasOwnProperty('accuracy')) {
                obj['accuracy'] = ApiClient.convertToType(data['accuracy'], 'Number');
            }
            if (data.hasOwnProperty('fieldName')) {
                obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormFieldsReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormFieldsReport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FormFieldsReport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fieldName'] && !(typeof data['fieldName'] === 'string' || data['fieldName'] instanceof String)) {
            throw new Error("Expected the field `fieldName` to be a primitive type in the JSON string but got " + data['fieldName']);
        }

        return true;
    }


}

FormFieldsReport.RequiredProperties = ["accuracy", "fieldName"];

/**
 * Estimated extraction accuracy for this field.
 * @member {Number} accuracy
 */
FormFieldsReport.prototype['accuracy'] = undefined;

/**
 * Training field name.
 * @member {String} fieldName
 */
FormFieldsReport.prototype['fieldName'] = undefined;






export default FormFieldsReport;

