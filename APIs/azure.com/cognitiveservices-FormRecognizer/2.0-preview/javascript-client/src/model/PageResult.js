/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataTable from './DataTable';
import KeyValuePair from './KeyValuePair';

/**
 * The PageResult model module.
 * @module model/PageResult
 * @version 2.0-preview
 */
class PageResult {
    /**
     * Constructs a new <code>PageResult</code>.
     * Extracted information from a single page.
     * @alias module:model/PageResult
     * @param page {Number} Page number.
     */
    constructor(page) { 
        
        PageResult.initialize(this, page);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, page) { 
        obj['page'] = page;
    }

    /**
     * Constructs a <code>PageResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageResult} obj Optional instance to populate.
     * @return {module:model/PageResult} The populated <code>PageResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageResult();

            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'Number');
            }
            if (data.hasOwnProperty('keyValuePairs')) {
                obj['keyValuePairs'] = ApiClient.convertToType(data['keyValuePairs'], [KeyValuePair]);
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('tables')) {
                obj['tables'] = ApiClient.convertToType(data['tables'], [DataTable]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PageResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['keyValuePairs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keyValuePairs'])) {
                throw new Error("Expected the field `keyValuePairs` to be an array in the JSON data but got " + data['keyValuePairs']);
            }
            // validate the optional field `keyValuePairs` (array)
            for (const item of data['keyValuePairs']) {
                KeyValuePair.validateJSON(item);
            };
        }
        if (data['tables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tables'])) {
                throw new Error("Expected the field `tables` to be an array in the JSON data but got " + data['tables']);
            }
            // validate the optional field `tables` (array)
            for (const item of data['tables']) {
                DataTable.validateJSON(item);
            };
        }

        return true;
    }


}

PageResult.RequiredProperties = ["page"];

/**
 * Cluster identifier.
 * @member {Number} clusterId
 */
PageResult.prototype['clusterId'] = undefined;

/**
 * List of key-value pairs extracted from the page.
 * @member {Array.<module:model/KeyValuePair>} keyValuePairs
 */
PageResult.prototype['keyValuePairs'] = undefined;

/**
 * Page number.
 * @member {Number} page
 */
PageResult.prototype['page'] = undefined;

/**
 * List of data tables extracted from the page.
 * @member {Array.<module:model/DataTable>} tables
 */
PageResult.prototype['tables'] = undefined;






export default PageResult;

