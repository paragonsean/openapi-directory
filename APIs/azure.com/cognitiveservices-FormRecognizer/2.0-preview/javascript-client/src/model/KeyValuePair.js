/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyValueElement from './KeyValueElement';

/**
 * The KeyValuePair model module.
 * @module model/KeyValuePair
 * @version 2.0-preview
 */
class KeyValuePair {
    /**
     * Constructs a new <code>KeyValuePair</code>.
     * Information about the extracted key-value pair.
     * @alias module:model/KeyValuePair
     * @param confidence {Number} Confidence value.
     * @param key {module:model/KeyValueElement} 
     * @param value {module:model/KeyValueElement} 
     */
    constructor(confidence, key, value) { 
        
        KeyValuePair.initialize(this, confidence, key, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, confidence, key, value) { 
        obj['confidence'] = confidence;
        obj['key'] = key;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>KeyValuePair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyValuePair} obj Optional instance to populate.
     * @return {module:model/KeyValuePair} The populated <code>KeyValuePair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyValuePair();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = KeyValueElement.constructFromObject(data['key']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = KeyValueElement.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyValuePair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyValuePair</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyValuePair.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `key`
        if (data['key']) { // data not null
          KeyValueElement.validateJSON(data['key']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          KeyValueElement.validateJSON(data['value']);
        }

        return true;
    }


}

KeyValuePair.RequiredProperties = ["confidence", "key", "value"];

/**
 * Confidence value.
 * @member {Number} confidence
 */
KeyValuePair.prototype['confidence'] = undefined;

/**
 * @member {module:model/KeyValueElement} key
 */
KeyValuePair.prototype['key'] = undefined;

/**
 * A user defined label for the key/value pair entry.
 * @member {String} label
 */
KeyValuePair.prototype['label'] = undefined;

/**
 * @member {module:model/KeyValueElement} value
 */
KeyValuePair.prototype['value'] = undefined;






export default KeyValuePair;

