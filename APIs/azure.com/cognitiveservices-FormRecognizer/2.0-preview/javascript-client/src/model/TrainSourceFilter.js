/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrainSourceFilter model module.
 * @module model/TrainSourceFilter
 * @version 2.0-preview
 */
class TrainSourceFilter {
    /**
     * Constructs a new <code>TrainSourceFilter</code>.
     * Filter to apply to the documents in the source path for training.
     * @alias module:model/TrainSourceFilter
     */
    constructor() { 
        
        TrainSourceFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['includeSubFolders'] = false;
    }

    /**
     * Constructs a <code>TrainSourceFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrainSourceFilter} obj Optional instance to populate.
     * @return {module:model/TrainSourceFilter} The populated <code>TrainSourceFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrainSourceFilter();

            if (data.hasOwnProperty('includeSubFolders')) {
                obj['includeSubFolders'] = ApiClient.convertToType(data['includeSubFolders'], 'Boolean');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrainSourceFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrainSourceFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }

        return true;
    }


}



/**
 * A flag to indicate if sub folders within the set of prefix folders will also need to be included when searching for content to be preprocessed.
 * @member {Boolean} includeSubFolders
 * @default false
 */
TrainSourceFilter.prototype['includeSubFolders'] = false;

/**
 * A case-sensitive prefix string to filter documents in the source path for training. For example, when using a Azure storage blob Uri, use the prefix to restrict sub folders for training.
 * @member {String} prefix
 */
TrainSourceFilter.prototype['prefix'] = undefined;






export default TrainSourceFilter;

