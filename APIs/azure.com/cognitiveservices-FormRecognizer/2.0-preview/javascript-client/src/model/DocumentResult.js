/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldValue from './FieldValue';

/**
 * The DocumentResult model module.
 * @module model/DocumentResult
 * @version 2.0-preview
 */
class DocumentResult {
    /**
     * Constructs a new <code>DocumentResult</code>.
     * A set of extracted fields corresponding to the input document.
     * @alias module:model/DocumentResult
     * @param docType {String} Document type.
     * @param fields {Object.<String, module:model/FieldValue>} Dictionary of named field values.
     * @param pageRange {Array.<Number>} First and last page number where the document is found.
     */
    constructor(docType, fields, pageRange) { 
        
        DocumentResult.initialize(this, docType, fields, pageRange);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, docType, fields, pageRange) { 
        obj['docType'] = docType;
        obj['fields'] = fields;
        obj['pageRange'] = pageRange;
    }

    /**
     * Constructs a <code>DocumentResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentResult} obj Optional instance to populate.
     * @return {module:model/DocumentResult} The populated <code>DocumentResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentResult();

            if (data.hasOwnProperty('docType')) {
                obj['docType'] = ApiClient.convertToType(data['docType'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], {'String': FieldValue});
            }
            if (data.hasOwnProperty('pageRange')) {
                obj['pageRange'] = ApiClient.convertToType(data['pageRange'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['docType'] && !(typeof data['docType'] === 'string' || data['docType'] instanceof String)) {
            throw new Error("Expected the field `docType` to be a primitive type in the JSON string but got " + data['docType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pageRange'])) {
            throw new Error("Expected the field `pageRange` to be an array in the JSON data but got " + data['pageRange']);
        }

        return true;
    }


}

DocumentResult.RequiredProperties = ["docType", "fields", "pageRange"];

/**
 * Document type.
 * @member {String} docType
 */
DocumentResult.prototype['docType'] = undefined;

/**
 * Dictionary of named field values.
 * @member {Object.<String, module:model/FieldValue>} fields
 */
DocumentResult.prototype['fields'] = undefined;

/**
 * First and last page number where the document is found.
 * @member {Array.<Number>} pageRange
 */
DocumentResult.prototype['pageRange'] = undefined;






export default DocumentResult;

