/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentResult from './DocumentResult';
import ErrorInformation from './ErrorInformation';
import PageResult from './PageResult';
import ReadResult from './ReadResult';

/**
 * The AnalyzeResult model module.
 * @module model/AnalyzeResult
 * @version 2.0-preview
 */
class AnalyzeResult {
    /**
     * Constructs a new <code>AnalyzeResult</code>.
     * Analyze operation result.
     * @alias module:model/AnalyzeResult
     * @param readResults {Array.<module:model/ReadResult>} Text extracted from the input.
     * @param version {String} Version of schema used for this result.
     */
    constructor(readResults, version) { 
        
        AnalyzeResult.initialize(this, readResults, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, readResults, version) { 
        obj['readResults'] = readResults;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>AnalyzeResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyzeResult} obj Optional instance to populate.
     * @return {module:model/AnalyzeResult} The populated <code>AnalyzeResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyzeResult();

            if (data.hasOwnProperty('documentResults')) {
                obj['documentResults'] = ApiClient.convertToType(data['documentResults'], [DocumentResult]);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorInformation]);
            }
            if (data.hasOwnProperty('pageResults')) {
                obj['pageResults'] = ApiClient.convertToType(data['pageResults'], [PageResult]);
            }
            if (data.hasOwnProperty('readResults')) {
                obj['readResults'] = ApiClient.convertToType(data['readResults'], [ReadResult]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyzeResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyzeResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AnalyzeResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['documentResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documentResults'])) {
                throw new Error("Expected the field `documentResults` to be an array in the JSON data but got " + data['documentResults']);
            }
            // validate the optional field `documentResults` (array)
            for (const item of data['documentResults']) {
                DocumentResult.validateJSON(item);
            };
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ErrorInformation.validateJSON(item);
            };
        }
        if (data['pageResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pageResults'])) {
                throw new Error("Expected the field `pageResults` to be an array in the JSON data but got " + data['pageResults']);
            }
            // validate the optional field `pageResults` (array)
            for (const item of data['pageResults']) {
                PageResult.validateJSON(item);
            };
        }
        if (data['readResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['readResults'])) {
                throw new Error("Expected the field `readResults` to be an array in the JSON data but got " + data['readResults']);
            }
            // validate the optional field `readResults` (array)
            for (const item of data['readResults']) {
                ReadResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

AnalyzeResult.RequiredProperties = ["readResults", "version"];

/**
 * Document-level information extracted from the input.
 * @member {Array.<module:model/DocumentResult>} documentResults
 */
AnalyzeResult.prototype['documentResults'] = undefined;

/**
 * List of errors reported during the analyze operation.
 * @member {Array.<module:model/ErrorInformation>} errors
 */
AnalyzeResult.prototype['errors'] = undefined;

/**
 * Page-level information extracted from the input.
 * @member {Array.<module:model/PageResult>} pageResults
 */
AnalyzeResult.prototype['pageResults'] = undefined;

/**
 * Text extracted from the input.
 * @member {Array.<module:model/ReadResult>} readResults
 */
AnalyzeResult.prototype['readResults'] = undefined;

/**
 * Version of schema used for this result.
 * @member {String} version
 */
AnalyzeResult.prototype['version'] = undefined;






export default AnalyzeResult;

