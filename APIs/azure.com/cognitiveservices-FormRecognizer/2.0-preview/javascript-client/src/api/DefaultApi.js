/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalyzeOperationResult from '../model/AnalyzeOperationResult';
import ErrorResponse from '../model/ErrorResponse';
import Model from '../model/Model';
import Models from '../model/Models';
import TrainRequest from '../model/TrainRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyzeLayoutAsync operation.
     * @callback module:api/DefaultApi~analyzeLayoutAsyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [fileStream] .json, .pdf, .jpg, .png or .tiff type file stream.
     * @param {module:api/DefaultApi~analyzeLayoutAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analyzeLayoutAsync(opts, callback) {
      opts = opts || {};
      let postBody = opts['fileStream'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/pdf', 'application/json', 'image/jpeg', 'image/png', 'image/tiff'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/layout/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyzeReceiptAsync operation.
     * @callback module:api/DefaultApi~analyzeReceiptAsyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeTextDetails = false)] Include text lines and element references in the result.
     * @param {Object.<String, Object>} [fileStream] .json, .pdf, .jpg, .png or .tiff type file stream.
     * @param {module:api/DefaultApi~analyzeReceiptAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analyzeReceiptAsync(opts, callback) {
      opts = opts || {};
      let postBody = opts['fileStream'];

      let pathParams = {
      };
      let queryParams = {
        'includeTextDetails': opts['includeTextDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/pdf', 'application/json', 'image/jpeg', 'image/png', 'image/tiff'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/prebuilt/receipt/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyzeWithCustomModel operation.
     * @callback module:api/DefaultApi~analyzeWithCustomModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze Form
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     * @param {String} modelId Model identifier.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeTextDetails = false)] Include text lines and element references in the result.
     * @param {Object.<String, Object>} [fileStream] .json, .pdf, .jpg, .png or .tiff type file stream.
     * @param {module:api/DefaultApi~analyzeWithCustomModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analyzeWithCustomModel(modelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['fileStream'];
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling analyzeWithCustomModel");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
        'includeTextDetails': opts['includeTextDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/pdf', 'application/json', 'image/jpeg', 'image/png', 'image/tiff'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/custom/models/{modelId}/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomModel operation.
     * @callback module:api/DefaultApi~deleteCustomModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Custom Model
     * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
     * @param {String} modelId Model identifier.
     * @param {module:api/DefaultApi~deleteCustomModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomModel(modelId, callback) {
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling deleteCustomModel");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/custom/models/{modelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalyzeFormResult operation.
     * @callback module:api/DefaultApi~getAnalyzeFormResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyzeOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Analyze Form Result
     * Obtain current status and the result of the analyze form operation.
     * @param {String} modelId Model identifier.
     * @param {String} resultId Analyze operation result identifier.
     * @param {module:api/DefaultApi~getAnalyzeFormResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyzeOperationResult}
     */
    getAnalyzeFormResult(modelId, resultId, callback) {
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getAnalyzeFormResult");
      }
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling getAnalyzeFormResult");
      }

      let pathParams = {
        'modelId': modelId,
        'resultId': resultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyzeOperationResult;
      return this.apiClient.callApi(
        '/custom/models/{modelId}/analyzeResults/{resultId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalyzeLayoutResult operation.
     * @callback module:api/DefaultApi~getAnalyzeLayoutResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyzeOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Analyze Layout Result
     * Track the progress and obtain the result of the analyze layout operation
     * @param {String} resultId Analyze operation result identifier.
     * @param {module:api/DefaultApi~getAnalyzeLayoutResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyzeOperationResult}
     */
    getAnalyzeLayoutResult(resultId, callback) {
      let postBody = null;
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling getAnalyzeLayoutResult");
      }

      let pathParams = {
        'resultId': resultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyzeOperationResult;
      return this.apiClient.callApi(
        '/layout/analyzeResults/{resultId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalyzeReceiptResult operation.
     * @callback module:api/DefaultApi~getAnalyzeReceiptResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyzeOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Analyze Receipt Result
     * Track the progress and obtain the result of the analyze receipt operation.
     * @param {String} resultId Analyze operation result identifier.
     * @param {module:api/DefaultApi~getAnalyzeReceiptResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyzeOperationResult}
     */
    getAnalyzeReceiptResult(resultId, callback) {
      let postBody = null;
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling getAnalyzeReceiptResult");
      }

      let pathParams = {
        'resultId': resultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyzeOperationResult;
      return this.apiClient.callApi(
        '/prebuilt/receipt/analyzeResults/{resultId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomModel operation.
     * @callback module:api/DefaultApi~getCustomModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Custom Model
     * Get detailed information about a custom model.
     * @param {String} modelId Model identifier.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeKeys = false)] Include list of extracted keys in model information.
     * @param {module:api/DefaultApi~getCustomModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    getCustomModel(modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getCustomModel");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
        'includeKeys': opts['includeKeys']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/custom/models/{modelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomModels operation.
     * @callback module:api/DefaultApi~getCustomModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Models} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Custom Models
     * Get information about all custom models
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [op = 'full')] Specify whether to return summary or full list of models.
     * @param {module:api/DefaultApi~getCustomModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Models}
     */
    getCustomModels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'op': opts['op']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Models;
      return this.apiClient.callApi(
        '/custom/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trainCustomModelAsync operation.
     * @callback module:api/DefaultApi~trainCustomModelAsyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Train Custom Model
     * Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.
     * @param {module:model/TrainRequest} trainRequest Training request parameters.
     * @param {module:api/DefaultApi~trainCustomModelAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trainCustomModelAsync(trainRequest, callback) {
      let postBody = trainRequest;
      // verify the required parameter 'trainRequest' is set
      if (trainRequest === undefined || trainRequest === null) {
        throw new Error("Missing the required parameter 'trainRequest' when calling trainCustomModelAsync");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/custom/models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
