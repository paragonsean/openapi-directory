/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageResult::OAIPageResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageResult::OAIPageResult() {
    this->initializeModel();
}

OAIPageResult::~OAIPageResult() {}

void OAIPageResult::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_key_value_pairs_isSet = false;
    m_key_value_pairs_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;
}

void OAIPageResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageResult::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_key_value_pairs_isValid = ::OpenAPI::fromJsonValue(m_key_value_pairs, json[QString("keyValuePairs")]);
    m_key_value_pairs_isSet = !json[QString("keyValuePairs")].isNull() && m_key_value_pairs_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("tables")]);
    m_tables_isSet = !json[QString("tables")].isNull() && m_tables_isValid;
}

QString OAIPageResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageResult::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_key_value_pairs.size() > 0) {
        obj.insert(QString("keyValuePairs"), ::OpenAPI::toJsonValue(m_key_value_pairs));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_tables.size() > 0) {
        obj.insert(QString("tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    return obj;
}

qint32 OAIPageResult::getClusterId() const {
    return m_cluster_id;
}
void OAIPageResult::setClusterId(const qint32 &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIPageResult::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIPageResult::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QList<OAIKeyValuePair> OAIPageResult::getKeyValuePairs() const {
    return m_key_value_pairs;
}
void OAIPageResult::setKeyValuePairs(const QList<OAIKeyValuePair> &key_value_pairs) {
    m_key_value_pairs = key_value_pairs;
    m_key_value_pairs_isSet = true;
}

bool OAIPageResult::is_key_value_pairs_Set() const{
    return m_key_value_pairs_isSet;
}

bool OAIPageResult::is_key_value_pairs_Valid() const{
    return m_key_value_pairs_isValid;
}

qint32 OAIPageResult::getPage() const {
    return m_page;
}
void OAIPageResult::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPageResult::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPageResult::is_page_Valid() const{
    return m_page_isValid;
}

QList<OAIDataTable> OAIPageResult::getTables() const {
    return m_tables;
}
void OAIPageResult::setTables(const QList<OAIDataTable> &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAIPageResult::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAIPageResult::is_tables_Valid() const{
    return m_tables_isValid;
}

bool OAIPageResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_pairs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_isValid && true;
}

} // namespace OpenAPI
