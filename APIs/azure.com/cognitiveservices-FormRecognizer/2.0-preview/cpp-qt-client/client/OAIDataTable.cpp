/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataTable::OAIDataTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataTable::OAIDataTable() {
    this->initializeModel();
}

OAIDataTable::~OAIDataTable() {}

void OAIDataTable::initializeModel() {

    m_cells_isSet = false;
    m_cells_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAIDataTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataTable::fromJsonObject(QJsonObject json) {

    m_cells_isValid = ::OpenAPI::fromJsonValue(m_cells, json[QString("cells")]);
    m_cells_isSet = !json[QString("cells")].isNull() && m_cells_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;
}

QString OAIDataTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataTable::asJsonObject() const {
    QJsonObject obj;
    if (m_cells.size() > 0) {
        obj.insert(QString("cells"), ::OpenAPI::toJsonValue(m_cells));
    }
    if (m_columns_isSet) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    return obj;
}

QList<OAIDataTableCell> OAIDataTable::getCells() const {
    return m_cells;
}
void OAIDataTable::setCells(const QList<OAIDataTableCell> &cells) {
    m_cells = cells;
    m_cells_isSet = true;
}

bool OAIDataTable::is_cells_Set() const{
    return m_cells_isSet;
}

bool OAIDataTable::is_cells_Valid() const{
    return m_cells_isValid;
}

qint32 OAIDataTable::getColumns() const {
    return m_columns;
}
void OAIDataTable::setColumns(const qint32 &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIDataTable::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIDataTable::is_columns_Valid() const{
    return m_columns_isValid;
}

qint32 OAIDataTable::getRows() const {
    return m_rows;
}
void OAIDataTable::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIDataTable::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIDataTable::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAIDataTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cells.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cells_isValid && m_columns_isValid && m_rows_isValid && true;
}

} // namespace OpenAPI
