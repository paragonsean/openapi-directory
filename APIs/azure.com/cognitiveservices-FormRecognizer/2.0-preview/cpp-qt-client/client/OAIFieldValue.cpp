/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldValue::OAIFieldValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldValue::OAIFieldValue() {
    this->initializeModel();
}

OAIFieldValue::~OAIFieldValue() {}

void OAIFieldValue::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_array_isSet = false;
    m_value_array_isValid = false;

    m_value_date_isSet = false;
    m_value_date_isValid = false;

    m_value_integer_isSet = false;
    m_value_integer_isValid = false;

    m_value_number_isSet = false;
    m_value_number_isValid = false;

    m_value_object_isSet = false;
    m_value_object_isValid = false;

    m_value_phone_number_isSet = false;
    m_value_phone_number_isValid = false;

    m_value_string_isSet = false;
    m_value_string_isValid = false;

    m_value_time_isSet = false;
    m_value_time_isValid = false;
}

void OAIFieldValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldValue::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_array_isValid = ::OpenAPI::fromJsonValue(m_value_array, json[QString("valueArray")]);
    m_value_array_isSet = !json[QString("valueArray")].isNull() && m_value_array_isValid;

    m_value_date_isValid = ::OpenAPI::fromJsonValue(m_value_date, json[QString("valueDate")]);
    m_value_date_isSet = !json[QString("valueDate")].isNull() && m_value_date_isValid;

    m_value_integer_isValid = ::OpenAPI::fromJsonValue(m_value_integer, json[QString("valueInteger")]);
    m_value_integer_isSet = !json[QString("valueInteger")].isNull() && m_value_integer_isValid;

    m_value_number_isValid = ::OpenAPI::fromJsonValue(m_value_number, json[QString("valueNumber")]);
    m_value_number_isSet = !json[QString("valueNumber")].isNull() && m_value_number_isValid;

    m_value_object_isValid = ::OpenAPI::fromJsonValue(m_value_object, json[QString("valueObject")]);
    m_value_object_isSet = !json[QString("valueObject")].isNull() && m_value_object_isValid;

    m_value_phone_number_isValid = ::OpenAPI::fromJsonValue(m_value_phone_number, json[QString("valuePhoneNumber")]);
    m_value_phone_number_isSet = !json[QString("valuePhoneNumber")].isNull() && m_value_phone_number_isValid;

    m_value_string_isValid = ::OpenAPI::fromJsonValue(m_value_string, json[QString("valueString")]);
    m_value_string_isSet = !json[QString("valueString")].isNull() && m_value_string_isValid;

    m_value_time_isValid = ::OpenAPI::fromJsonValue(m_value_time, json[QString("valueTime")]);
    m_value_time_isSet = !json[QString("valueTime")].isNull() && m_value_time_isValid;
}

QString OAIFieldValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldValue::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box.size() > 0) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_array.size() > 0) {
        obj.insert(QString("valueArray"), ::OpenAPI::toJsonValue(m_value_array));
    }
    if (m_value_date_isSet) {
        obj.insert(QString("valueDate"), ::OpenAPI::toJsonValue(m_value_date));
    }
    if (m_value_integer_isSet) {
        obj.insert(QString("valueInteger"), ::OpenAPI::toJsonValue(m_value_integer));
    }
    if (m_value_number_isSet) {
        obj.insert(QString("valueNumber"), ::OpenAPI::toJsonValue(m_value_number));
    }
    if (m_value_object.size() > 0) {
        obj.insert(QString("valueObject"), ::OpenAPI::toJsonValue(m_value_object));
    }
    if (m_value_phone_number_isSet) {
        obj.insert(QString("valuePhoneNumber"), ::OpenAPI::toJsonValue(m_value_phone_number));
    }
    if (m_value_string_isSet) {
        obj.insert(QString("valueString"), ::OpenAPI::toJsonValue(m_value_string));
    }
    if (m_value_time_isSet) {
        obj.insert(QString("valueTime"), ::OpenAPI::toJsonValue(m_value_time));
    }
    return obj;
}

QList<double> OAIFieldValue::getBoundingBox() const {
    return m_bounding_box;
}
void OAIFieldValue::setBoundingBox(const QList<double> &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIFieldValue::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIFieldValue::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

double OAIFieldValue::getConfidence() const {
    return m_confidence;
}
void OAIFieldValue::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIFieldValue::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIFieldValue::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QList<QString> OAIFieldValue::getElements() const {
    return m_elements;
}
void OAIFieldValue::setElements(const QList<QString> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIFieldValue::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIFieldValue::is_elements_Valid() const{
    return m_elements_isValid;
}

qint32 OAIFieldValue::getPage() const {
    return m_page;
}
void OAIFieldValue::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIFieldValue::is_page_Set() const{
    return m_page_isSet;
}

bool OAIFieldValue::is_page_Valid() const{
    return m_page_isValid;
}

QString OAIFieldValue::getText() const {
    return m_text;
}
void OAIFieldValue::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIFieldValue::is_text_Set() const{
    return m_text_isSet;
}

bool OAIFieldValue::is_text_Valid() const{
    return m_text_isValid;
}

OAIFieldValueType OAIFieldValue::getType() const {
    return m_type;
}
void OAIFieldValue::setType(const OAIFieldValueType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFieldValue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFieldValue::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIFieldValue> OAIFieldValue::getValueArray() const {
    return m_value_array;
}
void OAIFieldValue::setValueArray(const QList<OAIFieldValue> &value_array) {
    m_value_array = value_array;
    m_value_array_isSet = true;
}

bool OAIFieldValue::is_value_array_Set() const{
    return m_value_array_isSet;
}

bool OAIFieldValue::is_value_array_Valid() const{
    return m_value_array_isValid;
}

QDateTime OAIFieldValue::getValueDate() const {
    return m_value_date;
}
void OAIFieldValue::setValueDate(const QDateTime &value_date) {
    m_value_date = value_date;
    m_value_date_isSet = true;
}

bool OAIFieldValue::is_value_date_Set() const{
    return m_value_date_isSet;
}

bool OAIFieldValue::is_value_date_Valid() const{
    return m_value_date_isValid;
}

qint32 OAIFieldValue::getValueInteger() const {
    return m_value_integer;
}
void OAIFieldValue::setValueInteger(const qint32 &value_integer) {
    m_value_integer = value_integer;
    m_value_integer_isSet = true;
}

bool OAIFieldValue::is_value_integer_Set() const{
    return m_value_integer_isSet;
}

bool OAIFieldValue::is_value_integer_Valid() const{
    return m_value_integer_isValid;
}

double OAIFieldValue::getValueNumber() const {
    return m_value_number;
}
void OAIFieldValue::setValueNumber(const double &value_number) {
    m_value_number = value_number;
    m_value_number_isSet = true;
}

bool OAIFieldValue::is_value_number_Set() const{
    return m_value_number_isSet;
}

bool OAIFieldValue::is_value_number_Valid() const{
    return m_value_number_isValid;
}

QMap<QString, OAIFieldValue> OAIFieldValue::getValueObject() const {
    return m_value_object;
}
void OAIFieldValue::setValueObject(const QMap<QString, OAIFieldValue> &value_object) {
    m_value_object = value_object;
    m_value_object_isSet = true;
}

bool OAIFieldValue::is_value_object_Set() const{
    return m_value_object_isSet;
}

bool OAIFieldValue::is_value_object_Valid() const{
    return m_value_object_isValid;
}

QString OAIFieldValue::getValuePhoneNumber() const {
    return m_value_phone_number;
}
void OAIFieldValue::setValuePhoneNumber(const QString &value_phone_number) {
    m_value_phone_number = value_phone_number;
    m_value_phone_number_isSet = true;
}

bool OAIFieldValue::is_value_phone_number_Set() const{
    return m_value_phone_number_isSet;
}

bool OAIFieldValue::is_value_phone_number_Valid() const{
    return m_value_phone_number_isValid;
}

QString OAIFieldValue::getValueString() const {
    return m_value_string;
}
void OAIFieldValue::setValueString(const QString &value_string) {
    m_value_string = value_string;
    m_value_string_isSet = true;
}

bool OAIFieldValue::is_value_string_Set() const{
    return m_value_string_isSet;
}

bool OAIFieldValue::is_value_string_Valid() const{
    return m_value_string_isValid;
}

QDateTime OAIFieldValue::getValueTime() const {
    return m_value_time;
}
void OAIFieldValue::setValueTime(const QDateTime &value_time) {
    m_value_time = value_time;
    m_value_time_isSet = true;
}

bool OAIFieldValue::is_value_time_Set() const{
    return m_value_time_isSet;
}

bool OAIFieldValue::is_value_time_Valid() const{
    return m_value_time_isValid;
}

bool OAIFieldValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_integer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_object.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
