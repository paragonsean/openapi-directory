/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalyzeOperationResult.h"
#include "OAIErrorResponse.h"
#include "OAIModel.h"
#include "OAIModels.h"
#include "OAIObject.h"
#include "OAITrainRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file_stream OAIObject [optional]
    */
    virtual void analyzeLayoutAsync(const ::OpenAPI::OptionalParam<OAIObject> &file_stream = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  include_text_details bool [optional]
    * @param[in]  file_stream OAIObject [optional]
    */
    virtual void analyzeReceiptAsync(const ::OpenAPI::OptionalParam<bool> &include_text_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIObject> &file_stream = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  include_text_details bool [optional]
    * @param[in]  file_stream OAIObject [optional]
    */
    virtual void analyzeWithCustomModel(const QString &model_id, const ::OpenAPI::OptionalParam<bool> &include_text_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIObject> &file_stream = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  model_id QString [required]
    */
    virtual void deleteCustomModel(const QString &model_id);

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  result_id QString [required]
    */
    virtual void getAnalyzeFormResult(const QString &model_id, const QString &result_id);

    /**
    * @param[in]  result_id QString [required]
    */
    virtual void getAnalyzeLayoutResult(const QString &result_id);

    /**
    * @param[in]  result_id QString [required]
    */
    virtual void getAnalyzeReceiptResult(const QString &result_id);

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  include_keys bool [optional]
    */
    virtual void getCustomModel(const QString &model_id, const ::OpenAPI::OptionalParam<bool> &include_keys = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  op QString [optional]
    */
    virtual void getCustomModels(const ::OpenAPI::OptionalParam<QString> &op = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  train_request OAITrainRequest [required]
    */
    virtual void trainCustomModelAsync(const OAITrainRequest &train_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyzeLayoutAsyncCallback(OAIHttpRequestWorker *worker);
    void analyzeReceiptAsyncCallback(OAIHttpRequestWorker *worker);
    void analyzeWithCustomModelCallback(OAIHttpRequestWorker *worker);
    void deleteCustomModelCallback(OAIHttpRequestWorker *worker);
    void getAnalyzeFormResultCallback(OAIHttpRequestWorker *worker);
    void getAnalyzeLayoutResultCallback(OAIHttpRequestWorker *worker);
    void getAnalyzeReceiptResultCallback(OAIHttpRequestWorker *worker);
    void getCustomModelCallback(OAIHttpRequestWorker *worker);
    void getCustomModelsCallback(OAIHttpRequestWorker *worker);
    void trainCustomModelAsyncCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyzeLayoutAsyncSignal();
    void analyzeReceiptAsyncSignal();
    void analyzeWithCustomModelSignal();
    void deleteCustomModelSignal();
    void getAnalyzeFormResultSignal(OAIAnalyzeOperationResult summary);
    void getAnalyzeLayoutResultSignal(OAIAnalyzeOperationResult summary);
    void getAnalyzeReceiptResultSignal(OAIAnalyzeOperationResult summary);
    void getCustomModelSignal(OAIModel summary);
    void getCustomModelsSignal(OAIModels summary);
    void trainCustomModelAsyncSignal();


    void analyzeLayoutAsyncSignalFull(OAIHttpRequestWorker *worker);
    void analyzeReceiptAsyncSignalFull(OAIHttpRequestWorker *worker);
    void analyzeWithCustomModelSignalFull(OAIHttpRequestWorker *worker);
    void deleteCustomModelSignalFull(OAIHttpRequestWorker *worker);
    void getAnalyzeFormResultSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeOperationResult summary);
    void getAnalyzeLayoutResultSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeOperationResult summary);
    void getAnalyzeReceiptResultSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeOperationResult summary);
    void getCustomModelSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void getCustomModelsSignalFull(OAIHttpRequestWorker *worker, OAIModels summary);
    void trainCustomModelAsyncSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use analyzeLayoutAsyncSignalError() instead")
    void analyzeLayoutAsyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeLayoutAsyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeReceiptAsyncSignalError() instead")
    void analyzeReceiptAsyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeReceiptAsyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeWithCustomModelSignalError() instead")
    void analyzeWithCustomModelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeWithCustomModelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomModelSignalError() instead")
    void deleteCustomModelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomModelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyzeFormResultSignalError() instead")
    void getAnalyzeFormResultSignalE(OAIAnalyzeOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyzeFormResultSignalError(OAIAnalyzeOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyzeLayoutResultSignalError() instead")
    void getAnalyzeLayoutResultSignalE(OAIAnalyzeOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyzeLayoutResultSignalError(OAIAnalyzeOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyzeReceiptResultSignalError() instead")
    void getAnalyzeReceiptResultSignalE(OAIAnalyzeOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyzeReceiptResultSignalError(OAIAnalyzeOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomModelSignalError() instead")
    void getCustomModelSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomModelSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomModelsSignalError() instead")
    void getCustomModelsSignalE(OAIModels summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomModelsSignalError(OAIModels summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainCustomModelAsyncSignalError() instead")
    void trainCustomModelAsyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void trainCustomModelAsyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyzeLayoutAsyncSignalErrorFull() instead")
    void analyzeLayoutAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeLayoutAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeReceiptAsyncSignalErrorFull() instead")
    void analyzeReceiptAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeReceiptAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeWithCustomModelSignalErrorFull() instead")
    void analyzeWithCustomModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeWithCustomModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomModelSignalErrorFull() instead")
    void deleteCustomModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyzeFormResultSignalErrorFull() instead")
    void getAnalyzeFormResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyzeFormResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyzeLayoutResultSignalErrorFull() instead")
    void getAnalyzeLayoutResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyzeLayoutResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyzeReceiptResultSignalErrorFull() instead")
    void getAnalyzeReceiptResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyzeReceiptResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomModelSignalErrorFull() instead")
    void getCustomModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomModelsSignalErrorFull() instead")
    void getCustomModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainCustomModelAsyncSignalErrorFull() instead")
    void trainCustomModelAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trainCustomModelAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
