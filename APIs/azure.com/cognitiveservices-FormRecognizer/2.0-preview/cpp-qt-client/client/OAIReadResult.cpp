/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadResult::OAIReadResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadResult::OAIReadResult() {
    this->initializeModel();
}

OAIReadResult::~OAIReadResult() {}

void OAIReadResult::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIReadResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadResult::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIReadResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadResult::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

double OAIReadResult::getAngle() const {
    return m_angle;
}
void OAIReadResult::setAngle(const double &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAIReadResult::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAIReadResult::is_angle_Valid() const{
    return m_angle_isValid;
}

double OAIReadResult::getHeight() const {
    return m_height;
}
void OAIReadResult::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIReadResult::is_height_Set() const{
    return m_height_isSet;
}

bool OAIReadResult::is_height_Valid() const{
    return m_height_isValid;
}

OAILanguage OAIReadResult::getLanguage() const {
    return m_language;
}
void OAIReadResult::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIReadResult::is_language_Set() const{
    return m_language_isSet;
}

bool OAIReadResult::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAITextLine> OAIReadResult::getLines() const {
    return m_lines;
}
void OAIReadResult::setLines(const QList<OAITextLine> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIReadResult::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIReadResult::is_lines_Valid() const{
    return m_lines_isValid;
}

qint32 OAIReadResult::getPage() const {
    return m_page;
}
void OAIReadResult::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIReadResult::is_page_Set() const{
    return m_page_isSet;
}

bool OAIReadResult::is_page_Valid() const{
    return m_page_isValid;
}

QString OAIReadResult::getUnit() const {
    return m_unit;
}
void OAIReadResult::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIReadResult::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIReadResult::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAIReadResult::getWidth() const {
    return m_width;
}
void OAIReadResult::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIReadResult::is_width_Set() const{
    return m_width_isSet;
}

bool OAIReadResult::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIReadResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_angle_isValid && m_height_isValid && m_page_isValid && m_unit_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
