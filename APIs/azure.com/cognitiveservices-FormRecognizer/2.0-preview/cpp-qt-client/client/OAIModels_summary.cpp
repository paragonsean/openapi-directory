/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModels_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModels_summary::OAIModels_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModels_summary::OAIModels_summary() {
    this->initializeModel();
}

OAIModels_summary::~OAIModels_summary() {}

void OAIModels_summary::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIModels_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModels_summary::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;
}

QString OAIModels_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModels_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

qint32 OAIModels_summary::getCount() const {
    return m_count;
}
void OAIModels_summary::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIModels_summary::is_count_Set() const{
    return m_count_isSet;
}

bool OAIModels_summary::is_count_Valid() const{
    return m_count_isValid;
}

QDateTime OAIModels_summary::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIModels_summary::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIModels_summary::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIModels_summary::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

qint32 OAIModels_summary::getLimit() const {
    return m_limit;
}
void OAIModels_summary::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIModels_summary::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIModels_summary::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIModels_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModels_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_last_updated_date_time_isValid && m_limit_isValid && true;
}

} // namespace OpenAPI
