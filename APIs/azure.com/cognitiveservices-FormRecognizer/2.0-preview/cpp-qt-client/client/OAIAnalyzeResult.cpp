/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeResult::OAIAnalyzeResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeResult::OAIAnalyzeResult() {
    this->initializeModel();
}

OAIAnalyzeResult::~OAIAnalyzeResult() {}

void OAIAnalyzeResult::initializeModel() {

    m_document_results_isSet = false;
    m_document_results_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_page_results_isSet = false;
    m_page_results_isValid = false;

    m_read_results_isSet = false;
    m_read_results_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAnalyzeResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeResult::fromJsonObject(QJsonObject json) {

    m_document_results_isValid = ::OpenAPI::fromJsonValue(m_document_results, json[QString("documentResults")]);
    m_document_results_isSet = !json[QString("documentResults")].isNull() && m_document_results_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_page_results_isValid = ::OpenAPI::fromJsonValue(m_page_results, json[QString("pageResults")]);
    m_page_results_isSet = !json[QString("pageResults")].isNull() && m_page_results_isValid;

    m_read_results_isValid = ::OpenAPI::fromJsonValue(m_read_results, json[QString("readResults")]);
    m_read_results_isSet = !json[QString("readResults")].isNull() && m_read_results_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAnalyzeResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeResult::asJsonObject() const {
    QJsonObject obj;
    if (m_document_results.size() > 0) {
        obj.insert(QString("documentResults"), ::OpenAPI::toJsonValue(m_document_results));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_page_results.size() > 0) {
        obj.insert(QString("pageResults"), ::OpenAPI::toJsonValue(m_page_results));
    }
    if (m_read_results.size() > 0) {
        obj.insert(QString("readResults"), ::OpenAPI::toJsonValue(m_read_results));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIDocumentResult> OAIAnalyzeResult::getDocumentResults() const {
    return m_document_results;
}
void OAIAnalyzeResult::setDocumentResults(const QList<OAIDocumentResult> &document_results) {
    m_document_results = document_results;
    m_document_results_isSet = true;
}

bool OAIAnalyzeResult::is_document_results_Set() const{
    return m_document_results_isSet;
}

bool OAIAnalyzeResult::is_document_results_Valid() const{
    return m_document_results_isValid;
}

QList<OAIErrorInformation> OAIAnalyzeResult::getErrors() const {
    return m_errors;
}
void OAIAnalyzeResult::setErrors(const QList<OAIErrorInformation> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIAnalyzeResult::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIAnalyzeResult::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIPageResult> OAIAnalyzeResult::getPageResults() const {
    return m_page_results;
}
void OAIAnalyzeResult::setPageResults(const QList<OAIPageResult> &page_results) {
    m_page_results = page_results;
    m_page_results_isSet = true;
}

bool OAIAnalyzeResult::is_page_results_Set() const{
    return m_page_results_isSet;
}

bool OAIAnalyzeResult::is_page_results_Valid() const{
    return m_page_results_isValid;
}

QList<OAIReadResult> OAIAnalyzeResult::getReadResults() const {
    return m_read_results;
}
void OAIAnalyzeResult::setReadResults(const QList<OAIReadResult> &read_results) {
    m_read_results = read_results;
    m_read_results_isSet = true;
}

bool OAIAnalyzeResult::is_read_results_Set() const{
    return m_read_results_isSet;
}

bool OAIAnalyzeResult::is_read_results_Valid() const{
    return m_read_results_isValid;
}

QString OAIAnalyzeResult::getVersion() const {
    return m_version;
}
void OAIAnalyzeResult::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAnalyzeResult::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAnalyzeResult::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAnalyzeResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_read_results_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
