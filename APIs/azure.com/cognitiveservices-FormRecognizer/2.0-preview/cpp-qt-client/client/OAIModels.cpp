/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModels::OAIModels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModels::OAIModels() {
    this->initializeModel();
}

OAIModels::~OAIModels() {}

void OAIModels::initializeModel() {

    m_model_list_isSet = false;
    m_model_list_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIModels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModels::fromJsonObject(QJsonObject json) {

    m_model_list_isValid = ::OpenAPI::fromJsonValue(m_model_list, json[QString("modelList")]);
    m_model_list_isSet = !json[QString("modelList")].isNull() && m_model_list_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIModels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModels::asJsonObject() const {
    QJsonObject obj;
    if (m_model_list.size() > 0) {
        obj.insert(QString("modelList"), ::OpenAPI::toJsonValue(m_model_list));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAIModelInfo> OAIModels::getModelList() const {
    return m_model_list;
}
void OAIModels::setModelList(const QList<OAIModelInfo> &model_list) {
    m_model_list = model_list;
    m_model_list_isSet = true;
}

bool OAIModels::is_model_list_Set() const{
    return m_model_list_isSet;
}

bool OAIModels::is_model_list_Valid() const{
    return m_model_list_isValid;
}

QString OAIModels::getNextLink() const {
    return m_next_link;
}
void OAIModels::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIModels::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIModels::is_next_link_Valid() const{
    return m_next_link_isValid;
}

OAIModels_summary OAIModels::getSummary() const {
    return m_summary;
}
void OAIModels::setSummary(const OAIModels_summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIModels::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIModels::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIModels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
