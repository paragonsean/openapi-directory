/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataTableCell.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataTableCell::OAIDataTableCell(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataTableCell::OAIDataTableCell() {
    this->initializeModel();
}

OAIDataTableCell::~OAIDataTableCell() {}

void OAIDataTableCell::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_column_index_isSet = false;
    m_column_index_isValid = false;

    m_column_span_isSet = false;
    m_column_span_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_is_footer_isSet = false;
    m_is_footer_isValid = false;

    m_is_header_isSet = false;
    m_is_header_isValid = false;

    m_row_index_isSet = false;
    m_row_index_isValid = false;

    m_row_span_isSet = false;
    m_row_span_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIDataTableCell::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataTableCell::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_column_index_isValid = ::OpenAPI::fromJsonValue(m_column_index, json[QString("columnIndex")]);
    m_column_index_isSet = !json[QString("columnIndex")].isNull() && m_column_index_isValid;

    m_column_span_isValid = ::OpenAPI::fromJsonValue(m_column_span, json[QString("columnSpan")]);
    m_column_span_isSet = !json[QString("columnSpan")].isNull() && m_column_span_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_is_footer_isValid = ::OpenAPI::fromJsonValue(m_is_footer, json[QString("isFooter")]);
    m_is_footer_isSet = !json[QString("isFooter")].isNull() && m_is_footer_isValid;

    m_is_header_isValid = ::OpenAPI::fromJsonValue(m_is_header, json[QString("isHeader")]);
    m_is_header_isSet = !json[QString("isHeader")].isNull() && m_is_header_isValid;

    m_row_index_isValid = ::OpenAPI::fromJsonValue(m_row_index, json[QString("rowIndex")]);
    m_row_index_isSet = !json[QString("rowIndex")].isNull() && m_row_index_isValid;

    m_row_span_isValid = ::OpenAPI::fromJsonValue(m_row_span, json[QString("rowSpan")]);
    m_row_span_isSet = !json[QString("rowSpan")].isNull() && m_row_span_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIDataTableCell::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataTableCell::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box.size() > 0) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_column_index_isSet) {
        obj.insert(QString("columnIndex"), ::OpenAPI::toJsonValue(m_column_index));
    }
    if (m_column_span_isSet) {
        obj.insert(QString("columnSpan"), ::OpenAPI::toJsonValue(m_column_span));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_is_footer_isSet) {
        obj.insert(QString("isFooter"), ::OpenAPI::toJsonValue(m_is_footer));
    }
    if (m_is_header_isSet) {
        obj.insert(QString("isHeader"), ::OpenAPI::toJsonValue(m_is_header));
    }
    if (m_row_index_isSet) {
        obj.insert(QString("rowIndex"), ::OpenAPI::toJsonValue(m_row_index));
    }
    if (m_row_span_isSet) {
        obj.insert(QString("rowSpan"), ::OpenAPI::toJsonValue(m_row_span));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList<double> OAIDataTableCell::getBoundingBox() const {
    return m_bounding_box;
}
void OAIDataTableCell::setBoundingBox(const QList<double> &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIDataTableCell::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIDataTableCell::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

qint32 OAIDataTableCell::getColumnIndex() const {
    return m_column_index;
}
void OAIDataTableCell::setColumnIndex(const qint32 &column_index) {
    m_column_index = column_index;
    m_column_index_isSet = true;
}

bool OAIDataTableCell::is_column_index_Set() const{
    return m_column_index_isSet;
}

bool OAIDataTableCell::is_column_index_Valid() const{
    return m_column_index_isValid;
}

qint32 OAIDataTableCell::getColumnSpan() const {
    return m_column_span;
}
void OAIDataTableCell::setColumnSpan(const qint32 &column_span) {
    m_column_span = column_span;
    m_column_span_isSet = true;
}

bool OAIDataTableCell::is_column_span_Set() const{
    return m_column_span_isSet;
}

bool OAIDataTableCell::is_column_span_Valid() const{
    return m_column_span_isValid;
}

double OAIDataTableCell::getConfidence() const {
    return m_confidence;
}
void OAIDataTableCell::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIDataTableCell::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIDataTableCell::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QList<QString> OAIDataTableCell::getElements() const {
    return m_elements;
}
void OAIDataTableCell::setElements(const QList<QString> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIDataTableCell::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIDataTableCell::is_elements_Valid() const{
    return m_elements_isValid;
}

bool OAIDataTableCell::isIsFooter() const {
    return m_is_footer;
}
void OAIDataTableCell::setIsFooter(const bool &is_footer) {
    m_is_footer = is_footer;
    m_is_footer_isSet = true;
}

bool OAIDataTableCell::is_is_footer_Set() const{
    return m_is_footer_isSet;
}

bool OAIDataTableCell::is_is_footer_Valid() const{
    return m_is_footer_isValid;
}

bool OAIDataTableCell::isIsHeader() const {
    return m_is_header;
}
void OAIDataTableCell::setIsHeader(const bool &is_header) {
    m_is_header = is_header;
    m_is_header_isSet = true;
}

bool OAIDataTableCell::is_is_header_Set() const{
    return m_is_header_isSet;
}

bool OAIDataTableCell::is_is_header_Valid() const{
    return m_is_header_isValid;
}

qint32 OAIDataTableCell::getRowIndex() const {
    return m_row_index;
}
void OAIDataTableCell::setRowIndex(const qint32 &row_index) {
    m_row_index = row_index;
    m_row_index_isSet = true;
}

bool OAIDataTableCell::is_row_index_Set() const{
    return m_row_index_isSet;
}

bool OAIDataTableCell::is_row_index_Valid() const{
    return m_row_index_isValid;
}

qint32 OAIDataTableCell::getRowSpan() const {
    return m_row_span;
}
void OAIDataTableCell::setRowSpan(const qint32 &row_span) {
    m_row_span = row_span;
    m_row_span_isSet = true;
}

bool OAIDataTableCell::is_row_span_Set() const{
    return m_row_span_isSet;
}

bool OAIDataTableCell::is_row_span_Valid() const{
    return m_row_span_isValid;
}

QString OAIDataTableCell::getText() const {
    return m_text;
}
void OAIDataTableCell::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDataTableCell::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDataTableCell::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDataTableCell::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataTableCell::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bounding_box_isValid && m_column_index_isValid && m_confidence_isValid && m_row_index_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
