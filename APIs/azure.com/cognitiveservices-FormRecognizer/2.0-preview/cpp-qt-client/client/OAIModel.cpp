/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_model_info_isSet = false;
    m_model_info_isValid = false;

    m_train_result_isSet = false;
    m_train_result_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_model_info_isValid = ::OpenAPI::fromJsonValue(m_model_info, json[QString("modelInfo")]);
    m_model_info_isSet = !json[QString("modelInfo")].isNull() && m_model_info_isValid;

    m_train_result_isValid = ::OpenAPI::fromJsonValue(m_train_result, json[QString("trainResult")]);
    m_train_result_isSet = !json[QString("trainResult")].isNull() && m_train_result_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_keys.isSet()) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_model_info.isSet()) {
        obj.insert(QString("modelInfo"), ::OpenAPI::toJsonValue(m_model_info));
    }
    if (m_train_result.isSet()) {
        obj.insert(QString("trainResult"), ::OpenAPI::toJsonValue(m_train_result));
    }
    return obj;
}

OAIKeysResult OAIModel::getKeys() const {
    return m_keys;
}
void OAIModel::setKeys(const OAIKeysResult &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIModel::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIModel::is_keys_Valid() const{
    return m_keys_isValid;
}

OAIModelInfo OAIModel::getModelInfo() const {
    return m_model_info;
}
void OAIModel::setModelInfo(const OAIModelInfo &model_info) {
    m_model_info = model_info;
    m_model_info_isSet = true;
}

bool OAIModel::is_model_info_Set() const{
    return m_model_info_isSet;
}

bool OAIModel::is_model_info_Valid() const{
    return m_model_info_isValid;
}

OAITrainResult OAIModel::getTrainResult() const {
    return m_train_result;
}
void OAIModel::setTrainResult(const OAITrainResult &train_result) {
    m_train_result = train_result;
    m_train_result_isSet = true;
}

bool OAIModel::is_train_result_Set() const{
    return m_train_result_isSet;
}

bool OAIModel::is_train_result_Valid() const{
    return m_train_result_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_info_isValid && true;
}

} // namespace OpenAPI
