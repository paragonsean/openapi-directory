/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyValuePair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyValuePair::OAIKeyValuePair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyValuePair::OAIKeyValuePair() {
    this->initializeModel();
}

OAIKeyValuePair::~OAIKeyValuePair() {}

void OAIKeyValuePair::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIKeyValuePair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyValuePair::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIKeyValuePair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyValuePair::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_key.isSet()) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIKeyValuePair::getConfidence() const {
    return m_confidence;
}
void OAIKeyValuePair::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIKeyValuePair::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIKeyValuePair::is_confidence_Valid() const{
    return m_confidence_isValid;
}

OAIKeyValueElement OAIKeyValuePair::getKey() const {
    return m_key;
}
void OAIKeyValuePair::setKey(const OAIKeyValueElement &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIKeyValuePair::is_key_Set() const{
    return m_key_isSet;
}

bool OAIKeyValuePair::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIKeyValuePair::getLabel() const {
    return m_label;
}
void OAIKeyValuePair::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIKeyValuePair::is_label_Set() const{
    return m_label_isSet;
}

bool OAIKeyValuePair::is_label_Valid() const{
    return m_label_isValid;
}

OAIKeyValueElement OAIKeyValuePair::getValue() const {
    return m_value;
}
void OAIKeyValuePair::setValue(const OAIKeyValueElement &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIKeyValuePair::is_value_Set() const{
    return m_value_isSet;
}

bool OAIKeyValuePair::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIKeyValuePair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyValuePair::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_isValid && m_key_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
