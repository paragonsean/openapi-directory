/**
 * Form Recognizer Client
 * Extracts information from forms and images into structured data.
 *
 * The version of the OpenAPI document: 2.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldValueType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldValueType::OAIFieldValueType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldValueType::OAIFieldValueType() {
    this->initializeModel();
}

OAIFieldValueType::~OAIFieldValueType() {}

void OAIFieldValueType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFieldValueType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFieldValueType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("string", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFieldValueType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("date", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFieldValueType::DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("time", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFieldValueType::TIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("phoneNumber", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFieldValueType::PHONENUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("number", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFieldValueType::NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("integer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFieldValueType::INTEGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("array", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFieldValueType::ARRAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("object", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFieldValueType::OBJECT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFieldValueType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFieldValueType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFieldValueType::STRING:
            val = "string";
            break;
        case eOAIFieldValueType::DATE:
            val = "date";
            break;
        case eOAIFieldValueType::TIME:
            val = "time";
            break;
        case eOAIFieldValueType::PHONENUMBER:
            val = "phoneNumber";
            break;
        case eOAIFieldValueType::NUMBER:
            val = "number";
            break;
        case eOAIFieldValueType::INTEGER:
            val = "integer";
            break;
        case eOAIFieldValueType::ARRAY:
            val = "array";
            break;
        case eOAIFieldValueType::OBJECT:
            val = "object";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFieldValueType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFieldValueType::eOAIFieldValueType OAIFieldValueType::getValue() const {
    return m_value;
}

void OAIFieldValueType::setValue(const OAIFieldValueType::eOAIFieldValueType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFieldValueType::isSet() const {
    
    return m_value_isSet;
}

bool OAIFieldValueType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
