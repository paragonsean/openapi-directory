/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerKeyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerKeyProperties::OAIServerKeyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerKeyProperties::OAIServerKeyProperties() {
    this->initializeModel();
}

OAIServerKeyProperties::~OAIServerKeyProperties() {}

void OAIServerKeyProperties::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_server_key_type_isSet = false;
    m_server_key_type_isValid = false;

    m_subregion_isSet = false;
    m_subregion_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIServerKeyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerKeyProperties::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_server_key_type_isValid = ::OpenAPI::fromJsonValue(m_server_key_type, json[QString("serverKeyType")]);
    m_server_key_type_isSet = !json[QString("serverKeyType")].isNull() && m_server_key_type_isValid;

    m_subregion_isValid = ::OpenAPI::fromJsonValue(m_subregion, json[QString("subregion")]);
    m_subregion_isSet = !json[QString("subregion")].isNull() && m_subregion_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIServerKeyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerKeyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_server_key_type_isSet) {
        obj.insert(QString("serverKeyType"), ::OpenAPI::toJsonValue(m_server_key_type));
    }
    if (m_subregion_isSet) {
        obj.insert(QString("subregion"), ::OpenAPI::toJsonValue(m_subregion));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QDateTime OAIServerKeyProperties::getCreationDate() const {
    return m_creation_date;
}
void OAIServerKeyProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIServerKeyProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIServerKeyProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIServerKeyProperties::getServerKeyType() const {
    return m_server_key_type;
}
void OAIServerKeyProperties::setServerKeyType(const QString &server_key_type) {
    m_server_key_type = server_key_type;
    m_server_key_type_isSet = true;
}

bool OAIServerKeyProperties::is_server_key_type_Set() const{
    return m_server_key_type_isSet;
}

bool OAIServerKeyProperties::is_server_key_type_Valid() const{
    return m_server_key_type_isValid;
}

QString OAIServerKeyProperties::getSubregion() const {
    return m_subregion;
}
void OAIServerKeyProperties::setSubregion(const QString &subregion) {
    m_subregion = subregion;
    m_subregion_isSet = true;
}

bool OAIServerKeyProperties::is_subregion_Set() const{
    return m_subregion_isSet;
}

bool OAIServerKeyProperties::is_subregion_Valid() const{
    return m_subregion_isValid;
}

QString OAIServerKeyProperties::getThumbprint() const {
    return m_thumbprint;
}
void OAIServerKeyProperties::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAIServerKeyProperties::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAIServerKeyProperties::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QString OAIServerKeyProperties::getUri() const {
    return m_uri;
}
void OAIServerKeyProperties::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIServerKeyProperties::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIServerKeyProperties::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIServerKeyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subregion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerKeyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_key_type_isValid && true;
}

} // namespace OpenAPI
