/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties for a server key execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:47.630847-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerKeyProperties {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  /**
   * The server key type like &#39;ServiceManaged&#39;, &#39;AzureKeyVault&#39;.
   */
  @JsonAdapter(ServerKeyTypeEnum.Adapter.class)
  public enum ServerKeyTypeEnum {
    SERVICE_MANAGED("ServiceManaged"),
    
    AZURE_KEY_VAULT("AzureKeyVault");

    private String value;

    ServerKeyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServerKeyTypeEnum fromValue(String value) {
      for (ServerKeyTypeEnum b : ServerKeyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServerKeyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServerKeyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServerKeyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServerKeyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServerKeyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVER_KEY_TYPE = "serverKeyType";
  @SerializedName(SERIALIZED_NAME_SERVER_KEY_TYPE)
  private ServerKeyTypeEnum serverKeyType;

  public static final String SERIALIZED_NAME_SUBREGION = "subregion";
  @SerializedName(SERIALIZED_NAME_SUBREGION)
  private String subregion;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ServerKeyProperties() {
  }

  public ServerKeyProperties(
     String subregion
  ) {
    this();
    this.subregion = subregion;
  }

  public ServerKeyProperties creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The server key creation date.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ServerKeyProperties serverKeyType(ServerKeyTypeEnum serverKeyType) {
    this.serverKeyType = serverKeyType;
    return this;
  }

  /**
   * The server key type like &#39;ServiceManaged&#39;, &#39;AzureKeyVault&#39;.
   * @return serverKeyType
   */
  @javax.annotation.Nonnull
  public ServerKeyTypeEnum getServerKeyType() {
    return serverKeyType;
  }

  public void setServerKeyType(ServerKeyTypeEnum serverKeyType) {
    this.serverKeyType = serverKeyType;
  }


  /**
   * Subregion of the server key.
   * @return subregion
   */
  @javax.annotation.Nullable
  public String getSubregion() {
    return subregion;
  }



  public ServerKeyProperties thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Thumbprint of the server key.
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public ServerKeyProperties uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the server key.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerKeyProperties serverKeyProperties = (ServerKeyProperties) o;
    return Objects.equals(this.creationDate, serverKeyProperties.creationDate) &&
        Objects.equals(this.serverKeyType, serverKeyProperties.serverKeyType) &&
        Objects.equals(this.subregion, serverKeyProperties.subregion) &&
        Objects.equals(this.thumbprint, serverKeyProperties.thumbprint) &&
        Objects.equals(this.uri, serverKeyProperties.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, serverKeyType, subregion, thumbprint, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerKeyProperties {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    serverKeyType: ").append(toIndentedString(serverKeyType)).append("\n");
    sb.append("    subregion: ").append(toIndentedString(subregion)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("serverKeyType");
    openapiFields.add("subregion");
    openapiFields.add("thumbprint");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("serverKeyType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerKeyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerKeyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerKeyProperties is not found in the empty JSON string", ServerKeyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerKeyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerKeyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServerKeyProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("serverKeyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverKeyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverKeyType").toString()));
      }
      // validate the required field `serverKeyType`
      ServerKeyTypeEnum.validateJsonElement(jsonObj.get("serverKeyType"));
      if ((jsonObj.get("subregion") != null && !jsonObj.get("subregion").isJsonNull()) && !jsonObj.get("subregion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subregion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subregion").toString()));
      }
      if ((jsonObj.get("thumbprint") != null && !jsonObj.get("thumbprint").isJsonNull()) && !jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerKeyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerKeyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerKeyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerKeyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerKeyProperties>() {
           @Override
           public void write(JsonWriter out, ServerKeyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerKeyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerKeyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerKeyProperties
   * @throws IOException if the JSON string is invalid with respect to ServerKeyProperties
   */
  public static ServerKeyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerKeyProperties.class);
  }

  /**
   * Convert an instance of ServerKeyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

