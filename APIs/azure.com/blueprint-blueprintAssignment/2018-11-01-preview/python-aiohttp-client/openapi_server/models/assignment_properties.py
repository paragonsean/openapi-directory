# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment_lock_settings import AssignmentLockSettings
from openapi_server.models.assignment_status import AssignmentStatus
from openapi_server.models.parameter_value import ParameterValue
from openapi_server.models.resource_group_value import ResourceGroupValue
from openapi_server import util


class AssignmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blueprint_id: str=None, locks: AssignmentLockSettings=None, parameters: Dict[str, ParameterValue]=None, provisioning_state: str=None, resource_groups: Dict[str, ResourceGroupValue]=None, status: AssignmentStatus=None, description: str=None, display_name: str=None):
        """AssignmentProperties - a model defined in OpenAPI

        :param blueprint_id: The blueprint_id of this AssignmentProperties.
        :param locks: The locks of this AssignmentProperties.
        :param parameters: The parameters of this AssignmentProperties.
        :param provisioning_state: The provisioning_state of this AssignmentProperties.
        :param resource_groups: The resource_groups of this AssignmentProperties.
        :param status: The status of this AssignmentProperties.
        :param description: The description of this AssignmentProperties.
        :param display_name: The display_name of this AssignmentProperties.
        """
        self.openapi_types = {
            'blueprint_id': str,
            'locks': AssignmentLockSettings,
            'parameters': Dict[str, ParameterValue],
            'provisioning_state': str,
            'resource_groups': Dict[str, ResourceGroupValue],
            'status': AssignmentStatus,
            'description': str,
            'display_name': str
        }

        self.attribute_map = {
            'blueprint_id': 'blueprintId',
            'locks': 'locks',
            'parameters': 'parameters',
            'provisioning_state': 'provisioningState',
            'resource_groups': 'resourceGroups',
            'status': 'status',
            'description': 'description',
            'display_name': 'displayName'
        }

        self._blueprint_id = blueprint_id
        self._locks = locks
        self._parameters = parameters
        self._provisioning_state = provisioning_state
        self._resource_groups = resource_groups
        self._status = status
        self._description = description
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignmentProperties of this AssignmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blueprint_id(self):
        """Gets the blueprint_id of this AssignmentProperties.

        ID of the published version of a blueprint definition.

        :return: The blueprint_id of this AssignmentProperties.
        :rtype: str
        """
        return self._blueprint_id

    @blueprint_id.setter
    def blueprint_id(self, blueprint_id):
        """Sets the blueprint_id of this AssignmentProperties.

        ID of the published version of a blueprint definition.

        :param blueprint_id: The blueprint_id of this AssignmentProperties.
        :type blueprint_id: str
        """

        self._blueprint_id = blueprint_id

    @property
    def locks(self):
        """Gets the locks of this AssignmentProperties.


        :return: The locks of this AssignmentProperties.
        :rtype: AssignmentLockSettings
        """
        return self._locks

    @locks.setter
    def locks(self, locks):
        """Sets the locks of this AssignmentProperties.


        :param locks: The locks of this AssignmentProperties.
        :type locks: AssignmentLockSettings
        """

        self._locks = locks

    @property
    def parameters(self):
        """Gets the parameters of this AssignmentProperties.

        A dictionary for parameters and their corresponding values.

        :return: The parameters of this AssignmentProperties.
        :rtype: Dict[str, ParameterValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AssignmentProperties.

        A dictionary for parameters and their corresponding values.

        :param parameters: The parameters of this AssignmentProperties.
        :type parameters: Dict[str, ParameterValue]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this AssignmentProperties.

        State of the blueprint assignment.

        :return: The provisioning_state of this AssignmentProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this AssignmentProperties.

        State of the blueprint assignment.

        :param provisioning_state: The provisioning_state of this AssignmentProperties.
        :type provisioning_state: str
        """
        allowed_values = ["creating", "validating", "waiting", "deploying", "cancelling", "locking", "succeeded", "failed", "canceled", "deleting"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def resource_groups(self):
        """Gets the resource_groups of this AssignmentProperties.

        A dictionary which maps resource group placeholders to the resource groups which will be created.

        :return: The resource_groups of this AssignmentProperties.
        :rtype: Dict[str, ResourceGroupValue]
        """
        return self._resource_groups

    @resource_groups.setter
    def resource_groups(self, resource_groups):
        """Sets the resource_groups of this AssignmentProperties.

        A dictionary which maps resource group placeholders to the resource groups which will be created.

        :param resource_groups: The resource_groups of this AssignmentProperties.
        :type resource_groups: Dict[str, ResourceGroupValue]
        """
        if resource_groups is None:
            raise ValueError("Invalid value for `resource_groups`, must not be `None`")

        self._resource_groups = resource_groups

    @property
    def status(self):
        """Gets the status of this AssignmentProperties.


        :return: The status of this AssignmentProperties.
        :rtype: AssignmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssignmentProperties.


        :param status: The status of this AssignmentProperties.
        :type status: AssignmentStatus
        """

        self._status = status

    @property
    def description(self):
        """Gets the description of this AssignmentProperties.

        Multi-line explain this resource.

        :return: The description of this AssignmentProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssignmentProperties.

        Multi-line explain this resource.

        :param description: The description of this AssignmentProperties.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this AssignmentProperties.

        One-liner string explain this resource.

        :return: The display_name of this AssignmentProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AssignmentProperties.

        One-liner string explain this resource.

        :param display_name: The display_name of this AssignmentProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 256:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")

        self._display_name = display_name
