/**
 * BlueprintClient
 * Azure Blueprint Client.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignmentLockSettings from './AssignmentLockSettings';
import AssignmentStatus from './AssignmentStatus';
import BlueprintResourcePropertiesBase from './BlueprintResourcePropertiesBase';
import ParameterValueBase from './ParameterValueBase';
import ResourceGroupValue from './ResourceGroupValue';

/**
 * The AssignmentProperties model module.
 * @module model/AssignmentProperties
 * @version 2017-11-11-preview
 */
class AssignmentProperties {
    /**
     * Constructs a new <code>AssignmentProperties</code>.
     * Detailed properties for Assignment.
     * @alias module:model/AssignmentProperties
     * @implements module:model/BlueprintResourcePropertiesBase
     */
    constructor() { 
        BlueprintResourcePropertiesBase.initialize(this);
        AssignmentProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['parameters'] = parameters;
        obj['resourceGroups'] = resourceGroups;
    }

    /**
     * Constructs a <code>AssignmentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssignmentProperties} obj Optional instance to populate.
     * @return {module:model/AssignmentProperties} The populated <code>AssignmentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssignmentProperties();
            BlueprintResourcePropertiesBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('blueprintId')) {
                obj['blueprintId'] = ApiClient.convertToType(data['blueprintId'], 'String');
            }
            if (data.hasOwnProperty('locks')) {
                obj['locks'] = AssignmentLockSettings.constructFromObject(data['locks']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': ParameterValueBase});
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceGroups')) {
                obj['resourceGroups'] = ApiClient.convertToType(data['resourceGroups'], {'String': ResourceGroupValue});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = AssignmentStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssignmentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssignmentProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssignmentProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['blueprintId'] && !(typeof data['blueprintId'] === 'string' || data['blueprintId'] instanceof String)) {
            throw new Error("Expected the field `blueprintId` to be a primitive type in the JSON string but got " + data['blueprintId']);
        }
        // validate the optional field `locks`
        if (data['locks']) { // data not null
          AssignmentLockSettings.validateJSON(data['locks']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          AssignmentStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }

        return true;
    }


}

AssignmentProperties.RequiredProperties = ["parameters", "resourceGroups"];

/**
 * ID of the Blueprint definition resource.
 * @member {String} blueprintId
 */
AssignmentProperties.prototype['blueprintId'] = undefined;

/**
 * @member {module:model/AssignmentLockSettings} locks
 */
AssignmentProperties.prototype['locks'] = undefined;

/**
 * A dictionary for parameters and their corresponding values.
 * @member {Object.<String, module:model/ParameterValueBase>} parameters
 */
AssignmentProperties.prototype['parameters'] = undefined;

/**
 * State of the assignment.
 * @member {module:model/AssignmentProperties.ProvisioningStateEnum} provisioningState
 */
AssignmentProperties.prototype['provisioningState'] = undefined;

/**
 * A dictionary which maps resource group placeholders to the resource groups which will be created.
 * @member {Object.<String, module:model/ResourceGroupValue>} resourceGroups
 */
AssignmentProperties.prototype['resourceGroups'] = undefined;

/**
 * @member {module:model/AssignmentStatus} status
 */
AssignmentProperties.prototype['status'] = undefined;

/**
 * Multi-line explain this resource.
 * @member {String} description
 */
AssignmentProperties.prototype['description'] = undefined;

/**
 * One-liner string explain this resource.
 * @member {String} displayName
 */
AssignmentProperties.prototype['displayName'] = undefined;


// Implement BlueprintResourcePropertiesBase interface:
/**
 * Multi-line explain this resource.
 * @member {String} description
 */
BlueprintResourcePropertiesBase.prototype['description'] = undefined;
/**
 * One-liner string explain this resource.
 * @member {String} displayName
 */
BlueprintResourcePropertiesBase.prototype['displayName'] = undefined;



/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
AssignmentProperties['ProvisioningStateEnum'] = {

    /**
     * value: "creating"
     * @const
     */
    "creating": "creating",

    /**
     * value: "validating"
     * @const
     */
    "validating": "validating",

    /**
     * value: "waiting"
     * @const
     */
    "waiting": "waiting",

    /**
     * value: "deploying"
     * @const
     */
    "deploying": "deploying",

    /**
     * value: "cancelling"
     * @const
     */
    "cancelling": "cancelling",

    /**
     * value: "locking"
     * @const
     */
    "locking": "locking",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled",

    /**
     * value: "deleting"
     * @const
     */
    "deleting": "deleting"
};



export default AssignmentProperties;

