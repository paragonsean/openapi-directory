/*
 * BlueprintClient
 * Azure Blueprint Client.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AssignmentLockSettings;
import org.openapitools.client.model.AssignmentStatus;
import org.openapitools.client.model.ParameterValueBase;
import org.openapitools.client.model.ResourceGroupValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed properties for Assignment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:13.110907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssignmentProperties {
  public static final String SERIALIZED_NAME_BLUEPRINT_ID = "blueprintId";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_ID)
  private String blueprintId;

  public static final String SERIALIZED_NAME_LOCKS = "locks";
  @SerializedName(SERIALIZED_NAME_LOCKS)
  private AssignmentLockSettings locks;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, ParameterValueBase> parameters = new HashMap<>();

  /**
   * State of the assignment.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("creating"),
    
    VALIDATING("validating"),
    
    WAITING("waiting"),
    
    DEPLOYING("deploying"),
    
    CANCELLING("cancelling"),
    
    LOCKING("locking"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed"),
    
    CANCELED("canceled"),
    
    DELETING("deleting");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GROUPS = "resourceGroups";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUPS)
  private Map<String, ResourceGroupValue> resourceGroups = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AssignmentStatus status;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public AssignmentProperties() {
  }

  public AssignmentProperties(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public AssignmentProperties blueprintId(String blueprintId) {
    this.blueprintId = blueprintId;
    return this;
  }

  /**
   * ID of the Blueprint definition resource.
   * @return blueprintId
   */
  @javax.annotation.Nullable
  public String getBlueprintId() {
    return blueprintId;
  }

  public void setBlueprintId(String blueprintId) {
    this.blueprintId = blueprintId;
  }


  public AssignmentProperties locks(AssignmentLockSettings locks) {
    this.locks = locks;
    return this;
  }

  /**
   * Get locks
   * @return locks
   */
  @javax.annotation.Nullable
  public AssignmentLockSettings getLocks() {
    return locks;
  }

  public void setLocks(AssignmentLockSettings locks) {
    this.locks = locks;
  }


  public AssignmentProperties parameters(Map<String, ParameterValueBase> parameters) {
    this.parameters = parameters;
    return this;
  }

  public AssignmentProperties putParametersItem(String key, ParameterValueBase parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * A dictionary for parameters and their corresponding values.
   * @return parameters
   */
  @javax.annotation.Nonnull
  public Map<String, ParameterValueBase> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, ParameterValueBase> parameters) {
    this.parameters = parameters;
  }


  /**
   * State of the assignment.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public AssignmentProperties resourceGroups(Map<String, ResourceGroupValue> resourceGroups) {
    this.resourceGroups = resourceGroups;
    return this;
  }

  public AssignmentProperties putResourceGroupsItem(String key, ResourceGroupValue resourceGroupsItem) {
    if (this.resourceGroups == null) {
      this.resourceGroups = new HashMap<>();
    }
    this.resourceGroups.put(key, resourceGroupsItem);
    return this;
  }

  /**
   * A dictionary which maps resource group placeholders to the resource groups which will be created.
   * @return resourceGroups
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceGroupValue> getResourceGroups() {
    return resourceGroups;
  }

  public void setResourceGroups(Map<String, ResourceGroupValue> resourceGroups) {
    this.resourceGroups = resourceGroups;
  }


  public AssignmentProperties status(AssignmentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AssignmentStatus getStatus() {
    return status;
  }

  public void setStatus(AssignmentStatus status) {
    this.status = status;
  }


  public AssignmentProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Multi-line explain this resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AssignmentProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * One-liner string explain this resource.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentProperties assignmentProperties = (AssignmentProperties) o;
    return Objects.equals(this.blueprintId, assignmentProperties.blueprintId) &&
        Objects.equals(this.locks, assignmentProperties.locks) &&
        Objects.equals(this.parameters, assignmentProperties.parameters) &&
        Objects.equals(this.provisioningState, assignmentProperties.provisioningState) &&
        Objects.equals(this.resourceGroups, assignmentProperties.resourceGroups) &&
        Objects.equals(this.status, assignmentProperties.status) &&
        Objects.equals(this.description, assignmentProperties.description) &&
        Objects.equals(this.displayName, assignmentProperties.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprintId, locks, parameters, provisioningState, resourceGroups, status, description, displayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentProperties {\n");
    sb.append("    blueprintId: ").append(toIndentedString(blueprintId)).append("\n");
    sb.append("    locks: ").append(toIndentedString(locks)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGroups: ").append(toIndentedString(resourceGroups)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("parameters");
    openapiRequiredFields.add("resourceGroups");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssignmentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssignmentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignmentProperties is not found in the empty JSON string", AssignmentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssignmentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignmentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssignmentProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blueprintId") != null && !jsonObj.get("blueprintId").isJsonNull()) && !jsonObj.get("blueprintId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blueprintId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blueprintId").toString()));
      }
      // validate the optional field `locks`
      if (jsonObj.get("locks") != null && !jsonObj.get("locks").isJsonNull()) {
        AssignmentLockSettings.validateJsonElement(jsonObj.get("locks"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        AssignmentStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignmentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignmentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignmentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignmentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignmentProperties>() {
           @Override
           public void write(JsonWriter out, AssignmentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignmentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssignmentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssignmentProperties
   * @throws IOException if the JSON string is invalid with respect to AssignmentProperties
   */
  public static AssignmentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignmentProperties.class);
  }

  /**
   * Convert an instance of AssignmentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

