/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An alert incident indicates the activation status of an alert rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:07.213065-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Incident {
  public static final String SERIALIZED_NAME_ACTIVATED_TIME = "activatedTime";
  @SerializedName(SERIALIZED_NAME_ACTIVATED_TIME)
  private OffsetDateTime activatedTime;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOLVED_TIME = "resolvedTime";
  @SerializedName(SERIALIZED_NAME_RESOLVED_TIME)
  private OffsetDateTime resolvedTime;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public Incident() {
  }

  public Incident(
     OffsetDateTime activatedTime, 
     Boolean isActive, 
     String name, 
     OffsetDateTime resolvedTime, 
     String ruleName
  ) {
    this();
    this.activatedTime = activatedTime;
    this.isActive = isActive;
    this.name = name;
    this.resolvedTime = resolvedTime;
    this.ruleName = ruleName;
  }

  /**
   * The time at which the incident was activated in ISO8601 format.
   * @return activatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActivatedTime() {
    return activatedTime;
  }



  /**
   * A boolean to indicate whether the incident is active or resolved.
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }



  /**
   * Incident name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The time at which the incident was resolved in ISO8601 format. If null, it means the incident is still active.
   * @return resolvedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResolvedTime() {
    return resolvedTime;
  }



  /**
   * Rule name that is associated with the incident.
   * @return ruleName
   */
  @javax.annotation.Nullable
  public String getRuleName() {
    return ruleName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Incident incident = (Incident) o;
    return Objects.equals(this.activatedTime, incident.activatedTime) &&
        Objects.equals(this.isActive, incident.isActive) &&
        Objects.equals(this.name, incident.name) &&
        Objects.equals(this.resolvedTime, incident.resolvedTime) &&
        Objects.equals(this.ruleName, incident.ruleName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activatedTime, isActive, name, resolvedTime, ruleName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Incident {\n");
    sb.append("    activatedTime: ").append(toIndentedString(activatedTime)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resolvedTime: ").append(toIndentedString(resolvedTime)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activatedTime");
    openapiFields.add("isActive");
    openapiFields.add("name");
    openapiFields.add("resolvedTime");
    openapiFields.add("ruleName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Incident
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Incident.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Incident is not found in the empty JSON string", Incident.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Incident.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Incident` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ruleName") != null && !jsonObj.get("ruleName").isJsonNull()) && !jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Incident.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Incident' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Incident> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Incident.class));

       return (TypeAdapter<T>) new TypeAdapter<Incident>() {
           @Override
           public void write(JsonWriter out, Incident value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Incident read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Incident given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Incident
   * @throws IOException if the JSON string is invalid with respect to Incident
   */
  public static Incident fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Incident.class);
  }

  /**
   * Convert an instance of Incident to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

