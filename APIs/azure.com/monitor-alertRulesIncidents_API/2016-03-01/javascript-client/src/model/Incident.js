/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Incident model module.
 * @module model/Incident
 * @version 2016-03-01
 */
class Incident {
    /**
     * Constructs a new <code>Incident</code>.
     * An alert incident indicates the activation status of an alert rule.
     * @alias module:model/Incident
     */
    constructor() { 
        
        Incident.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Incident</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Incident} obj Optional instance to populate.
     * @return {module:model/Incident} The populated <code>Incident</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Incident();

            if (data.hasOwnProperty('activatedTime')) {
                obj['activatedTime'] = ApiClient.convertToType(data['activatedTime'], 'Date');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resolvedTime')) {
                obj['resolvedTime'] = ApiClient.convertToType(data['resolvedTime'], 'Date');
            }
            if (data.hasOwnProperty('ruleName')) {
                obj['ruleName'] = ApiClient.convertToType(data['ruleName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Incident</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Incident</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ruleName'] && !(typeof data['ruleName'] === 'string' || data['ruleName'] instanceof String)) {
            throw new Error("Expected the field `ruleName` to be a primitive type in the JSON string but got " + data['ruleName']);
        }

        return true;
    }


}



/**
 * The time at which the incident was activated in ISO8601 format.
 * @member {Date} activatedTime
 */
Incident.prototype['activatedTime'] = undefined;

/**
 * A boolean to indicate whether the incident is active or resolved.
 * @member {Boolean} isActive
 */
Incident.prototype['isActive'] = undefined;

/**
 * Incident name.
 * @member {String} name
 */
Incident.prototype['name'] = undefined;

/**
 * The time at which the incident was resolved in ISO8601 format. If null, it means the incident is still active.
 * @member {Date} resolvedTime
 */
Incident.prototype['resolvedTime'] = undefined;

/**
 * Rule name that is associated with the incident.
 * @member {String} ruleName
 */
Incident.prototype['ruleName'] = undefined;






export default Incident;

