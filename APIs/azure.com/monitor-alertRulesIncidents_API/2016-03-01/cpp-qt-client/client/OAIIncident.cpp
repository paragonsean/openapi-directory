/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncident.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncident::OAIIncident(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncident::OAIIncident() {
    this->initializeModel();
}

OAIIncident::~OAIIncident() {}

void OAIIncident::initializeModel() {

    m_activated_time_isSet = false;
    m_activated_time_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resolved_time_isSet = false;
    m_resolved_time_isValid = false;

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;
}

void OAIIncident::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncident::fromJsonObject(QJsonObject json) {

    m_activated_time_isValid = ::OpenAPI::fromJsonValue(m_activated_time, json[QString("activatedTime")]);
    m_activated_time_isSet = !json[QString("activatedTime")].isNull() && m_activated_time_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resolved_time_isValid = ::OpenAPI::fromJsonValue(m_resolved_time, json[QString("resolvedTime")]);
    m_resolved_time_isSet = !json[QString("resolvedTime")].isNull() && m_resolved_time_isValid;

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("ruleName")]);
    m_rule_name_isSet = !json[QString("ruleName")].isNull() && m_rule_name_isValid;
}

QString OAIIncident::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncident::asJsonObject() const {
    QJsonObject obj;
    if (m_activated_time_isSet) {
        obj.insert(QString("activatedTime"), ::OpenAPI::toJsonValue(m_activated_time));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resolved_time_isSet) {
        obj.insert(QString("resolvedTime"), ::OpenAPI::toJsonValue(m_resolved_time));
    }
    if (m_rule_name_isSet) {
        obj.insert(QString("ruleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    return obj;
}

QDateTime OAIIncident::getActivatedTime() const {
    return m_activated_time;
}
void OAIIncident::setActivatedTime(const QDateTime &activated_time) {
    m_activated_time = activated_time;
    m_activated_time_isSet = true;
}

bool OAIIncident::is_activated_time_Set() const{
    return m_activated_time_isSet;
}

bool OAIIncident::is_activated_time_Valid() const{
    return m_activated_time_isValid;
}

bool OAIIncident::isIsActive() const {
    return m_is_active;
}
void OAIIncident::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIIncident::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIIncident::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIIncident::getName() const {
    return m_name;
}
void OAIIncident::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIncident::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIncident::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIIncident::getResolvedTime() const {
    return m_resolved_time;
}
void OAIIncident::setResolvedTime(const QDateTime &resolved_time) {
    m_resolved_time = resolved_time;
    m_resolved_time_isSet = true;
}

bool OAIIncident::is_resolved_time_Set() const{
    return m_resolved_time_isSet;
}

bool OAIIncident::is_resolved_time_Valid() const{
    return m_resolved_time_isValid;
}

QString OAIIncident::getRuleName() const {
    return m_rule_name;
}
void OAIIncident::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIIncident::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIIncident::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

bool OAIIncident::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncident::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
