/**
 * ManagedServiceIdentityClient
 * The Managed Service Identity Client.
 *
 * The version of the OpenAPI document: 2018-11-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIIdentity.h"
#include "OAIOperationListResult.h"
#include "OAIUserAssignedIdentitiesListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIIdentity [required]
    */
    virtual void userAssignedIdentitiesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version, const OAIIdentity &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void userAssignedIdentitiesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void userAssignedIdentitiesGet(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void userAssignedIdentitiesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void userAssignedIdentitiesListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIIdentity [required]
    */
    virtual void userAssignedIdentitiesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version, const OAIIdentity &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void operationsListCallback(OAIHttpRequestWorker *worker);
    void userAssignedIdentitiesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void userAssignedIdentitiesDeleteCallback(OAIHttpRequestWorker *worker);
    void userAssignedIdentitiesGetCallback(OAIHttpRequestWorker *worker);
    void userAssignedIdentitiesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void userAssignedIdentitiesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void userAssignedIdentitiesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void operationsListSignal(OAIOperationListResult summary);
    void userAssignedIdentitiesCreateOrUpdateSignal(OAIIdentity summary);
    void userAssignedIdentitiesDeleteSignal();
    void userAssignedIdentitiesGetSignal(OAIIdentity summary);
    void userAssignedIdentitiesListByResourceGroupSignal(OAIUserAssignedIdentitiesListResult summary);
    void userAssignedIdentitiesListBySubscriptionSignal(OAIUserAssignedIdentitiesListResult summary);
    void userAssignedIdentitiesUpdateSignal(OAIIdentity summary);


    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationListResult summary);
    void userAssignedIdentitiesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIdentity summary);
    void userAssignedIdentitiesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void userAssignedIdentitiesGetSignalFull(OAIHttpRequestWorker *worker, OAIIdentity summary);
    void userAssignedIdentitiesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIUserAssignedIdentitiesListResult summary);
    void userAssignedIdentitiesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIUserAssignedIdentitiesListResult summary);
    void userAssignedIdentitiesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIdentity summary);

    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesCreateOrUpdateSignalError() instead")
    void userAssignedIdentitiesCreateOrUpdateSignalE(OAIIdentity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesCreateOrUpdateSignalError(OAIIdentity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesDeleteSignalError() instead")
    void userAssignedIdentitiesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesGetSignalError() instead")
    void userAssignedIdentitiesGetSignalE(OAIIdentity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesGetSignalError(OAIIdentity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesListByResourceGroupSignalError() instead")
    void userAssignedIdentitiesListByResourceGroupSignalE(OAIUserAssignedIdentitiesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesListByResourceGroupSignalError(OAIUserAssignedIdentitiesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesListBySubscriptionSignalError() instead")
    void userAssignedIdentitiesListBySubscriptionSignalE(OAIUserAssignedIdentitiesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesListBySubscriptionSignalError(OAIUserAssignedIdentitiesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesUpdateSignalError() instead")
    void userAssignedIdentitiesUpdateSignalE(OAIIdentity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesUpdateSignalError(OAIIdentity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesCreateOrUpdateSignalErrorFull() instead")
    void userAssignedIdentitiesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesDeleteSignalErrorFull() instead")
    void userAssignedIdentitiesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesGetSignalErrorFull() instead")
    void userAssignedIdentitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesListByResourceGroupSignalErrorFull() instead")
    void userAssignedIdentitiesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesListBySubscriptionSignalErrorFull() instead")
    void userAssignedIdentitiesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userAssignedIdentitiesUpdateSignalErrorFull() instead")
    void userAssignedIdentitiesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userAssignedIdentitiesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
