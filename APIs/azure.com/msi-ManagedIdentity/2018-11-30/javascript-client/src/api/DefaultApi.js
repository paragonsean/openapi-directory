/**
 * ManagedServiceIdentityClient
 * The Managed Service Identity Client.
 *
 * The version of the OpenAPI document: 2018-11-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import Identity from '../model/Identity';
import OperationListResult from '../model/OperationListResult';
import UserAssignedIdentitiesListResult from '../model/UserAssignedIdentitiesListResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-11-30
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/DefaultApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available operations for the Microsoft.ManagedIdentity provider
     * @param {String} apiVersion Version of API to invoke.
     * @param {module:api/DefaultApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationListResult}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.ManagedIdentity/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAssignedIdentitiesCreateOrUpdate operation.
     * @callback module:api/DefaultApi~userAssignedIdentitiesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Identity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an identity in the specified subscription and resource group.
     * @param {String} subscriptionId The Id of the Subscription to which the identity belongs.
     * @param {String} resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param {String} resourceName The name of the identity resource.
     * @param {String} apiVersion Version of API to invoke.
     * @param {module:model/Identity} parameters Parameters to create or update the identity
     * @param {module:api/DefaultApi~userAssignedIdentitiesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Identity}
     */
    userAssignedIdentitiesCreateOrUpdate(subscriptionId, resourceGroupName, resourceName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling userAssignedIdentitiesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling userAssignedIdentitiesCreateOrUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling userAssignedIdentitiesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling userAssignedIdentitiesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling userAssignedIdentitiesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Identity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{resourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAssignedIdentitiesDelete operation.
     * @callback module:api/DefaultApi~userAssignedIdentitiesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the identity.
     * @param {String} subscriptionId The Id of the Subscription to which the identity belongs.
     * @param {String} resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param {String} resourceName The name of the identity resource.
     * @param {String} apiVersion Version of API to invoke.
     * @param {module:api/DefaultApi~userAssignedIdentitiesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userAssignedIdentitiesDelete(subscriptionId, resourceGroupName, resourceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling userAssignedIdentitiesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling userAssignedIdentitiesDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling userAssignedIdentitiesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling userAssignedIdentitiesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{resourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAssignedIdentitiesGet operation.
     * @callback module:api/DefaultApi~userAssignedIdentitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Identity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the identity.
     * @param {String} subscriptionId The Id of the Subscription to which the identity belongs.
     * @param {String} resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param {String} resourceName The name of the identity resource.
     * @param {String} apiVersion Version of API to invoke.
     * @param {module:api/DefaultApi~userAssignedIdentitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Identity}
     */
    userAssignedIdentitiesGet(subscriptionId, resourceGroupName, resourceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling userAssignedIdentitiesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling userAssignedIdentitiesGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling userAssignedIdentitiesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling userAssignedIdentitiesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Identity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{resourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAssignedIdentitiesListByResourceGroup operation.
     * @callback module:api/DefaultApi~userAssignedIdentitiesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAssignedIdentitiesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the userAssignedIdentities available under the specified ResourceGroup.
     * @param {String} subscriptionId The Id of the Subscription to which the identity belongs.
     * @param {String} resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param {String} apiVersion Version of API to invoke.
     * @param {module:api/DefaultApi~userAssignedIdentitiesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAssignedIdentitiesListResult}
     */
    userAssignedIdentitiesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling userAssignedIdentitiesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling userAssignedIdentitiesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling userAssignedIdentitiesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAssignedIdentitiesListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAssignedIdentitiesListBySubscription operation.
     * @callback module:api/DefaultApi~userAssignedIdentitiesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAssignedIdentitiesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the userAssignedIdentities available under the specified subscription.
     * @param {String} subscriptionId The Id of the Subscription to which the identity belongs.
     * @param {String} apiVersion Version of API to invoke.
     * @param {module:api/DefaultApi~userAssignedIdentitiesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAssignedIdentitiesListResult}
     */
    userAssignedIdentitiesListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling userAssignedIdentitiesListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling userAssignedIdentitiesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAssignedIdentitiesListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.ManagedIdentity/userAssignedIdentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userAssignedIdentitiesUpdate operation.
     * @callback module:api/DefaultApi~userAssignedIdentitiesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Identity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an identity in the specified subscription and resource group.
     * @param {String} subscriptionId The Id of the Subscription to which the identity belongs.
     * @param {String} resourceGroupName The name of the Resource Group to which the identity belongs.
     * @param {String} resourceName The name of the identity resource.
     * @param {String} apiVersion Version of API to invoke.
     * @param {module:model/Identity} parameters Parameters to update the identity
     * @param {module:api/DefaultApi~userAssignedIdentitiesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Identity}
     */
    userAssignedIdentitiesUpdate(subscriptionId, resourceGroupName, resourceName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling userAssignedIdentitiesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling userAssignedIdentitiesUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling userAssignedIdentitiesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling userAssignedIdentitiesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling userAssignedIdentitiesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Identity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{resourceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
