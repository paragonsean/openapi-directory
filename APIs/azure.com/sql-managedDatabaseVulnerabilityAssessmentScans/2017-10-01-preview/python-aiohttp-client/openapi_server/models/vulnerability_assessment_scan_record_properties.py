# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vulnerability_assessment_scan_error import VulnerabilityAssessmentScanError
from openapi_server import util


class VulnerabilityAssessmentScanRecordProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, errors: List[VulnerabilityAssessmentScanError]=None, number_of_failed_security_checks: int=None, scan_id: str=None, start_time: datetime=None, state: str=None, storage_container_path: str=None, trigger_type: str=None):
        """VulnerabilityAssessmentScanRecordProperties - a model defined in OpenAPI

        :param end_time: The end_time of this VulnerabilityAssessmentScanRecordProperties.
        :param errors: The errors of this VulnerabilityAssessmentScanRecordProperties.
        :param number_of_failed_security_checks: The number_of_failed_security_checks of this VulnerabilityAssessmentScanRecordProperties.
        :param scan_id: The scan_id of this VulnerabilityAssessmentScanRecordProperties.
        :param start_time: The start_time of this VulnerabilityAssessmentScanRecordProperties.
        :param state: The state of this VulnerabilityAssessmentScanRecordProperties.
        :param storage_container_path: The storage_container_path of this VulnerabilityAssessmentScanRecordProperties.
        :param trigger_type: The trigger_type of this VulnerabilityAssessmentScanRecordProperties.
        """
        self.openapi_types = {
            'end_time': datetime,
            'errors': List[VulnerabilityAssessmentScanError],
            'number_of_failed_security_checks': int,
            'scan_id': str,
            'start_time': datetime,
            'state': str,
            'storage_container_path': str,
            'trigger_type': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'errors': 'errors',
            'number_of_failed_security_checks': 'numberOfFailedSecurityChecks',
            'scan_id': 'scanId',
            'start_time': 'startTime',
            'state': 'state',
            'storage_container_path': 'storageContainerPath',
            'trigger_type': 'triggerType'
        }

        self._end_time = end_time
        self._errors = errors
        self._number_of_failed_security_checks = number_of_failed_security_checks
        self._scan_id = scan_id
        self._start_time = start_time
        self._state = state
        self._storage_container_path = storage_container_path
        self._trigger_type = trigger_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VulnerabilityAssessmentScanRecordProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VulnerabilityAssessmentScanRecordProperties of this VulnerabilityAssessmentScanRecordProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this VulnerabilityAssessmentScanRecordProperties.

        The scan end time (UTC).

        :return: The end_time of this VulnerabilityAssessmentScanRecordProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this VulnerabilityAssessmentScanRecordProperties.

        The scan end time (UTC).

        :param end_time: The end_time of this VulnerabilityAssessmentScanRecordProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def errors(self):
        """Gets the errors of this VulnerabilityAssessmentScanRecordProperties.

        The scan errors.

        :return: The errors of this VulnerabilityAssessmentScanRecordProperties.
        :rtype: List[VulnerabilityAssessmentScanError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this VulnerabilityAssessmentScanRecordProperties.

        The scan errors.

        :param errors: The errors of this VulnerabilityAssessmentScanRecordProperties.
        :type errors: List[VulnerabilityAssessmentScanError]
        """

        self._errors = errors

    @property
    def number_of_failed_security_checks(self):
        """Gets the number_of_failed_security_checks of this VulnerabilityAssessmentScanRecordProperties.

        The number of failed security checks.

        :return: The number_of_failed_security_checks of this VulnerabilityAssessmentScanRecordProperties.
        :rtype: int
        """
        return self._number_of_failed_security_checks

    @number_of_failed_security_checks.setter
    def number_of_failed_security_checks(self, number_of_failed_security_checks):
        """Sets the number_of_failed_security_checks of this VulnerabilityAssessmentScanRecordProperties.

        The number of failed security checks.

        :param number_of_failed_security_checks: The number_of_failed_security_checks of this VulnerabilityAssessmentScanRecordProperties.
        :type number_of_failed_security_checks: int
        """

        self._number_of_failed_security_checks = number_of_failed_security_checks

    @property
    def scan_id(self):
        """Gets the scan_id of this VulnerabilityAssessmentScanRecordProperties.

        The scan ID.

        :return: The scan_id of this VulnerabilityAssessmentScanRecordProperties.
        :rtype: str
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this VulnerabilityAssessmentScanRecordProperties.

        The scan ID.

        :param scan_id: The scan_id of this VulnerabilityAssessmentScanRecordProperties.
        :type scan_id: str
        """

        self._scan_id = scan_id

    @property
    def start_time(self):
        """Gets the start_time of this VulnerabilityAssessmentScanRecordProperties.

        The scan start time (UTC).

        :return: The start_time of this VulnerabilityAssessmentScanRecordProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this VulnerabilityAssessmentScanRecordProperties.

        The scan start time (UTC).

        :param start_time: The start_time of this VulnerabilityAssessmentScanRecordProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this VulnerabilityAssessmentScanRecordProperties.

        The scan status.

        :return: The state of this VulnerabilityAssessmentScanRecordProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VulnerabilityAssessmentScanRecordProperties.

        The scan status.

        :param state: The state of this VulnerabilityAssessmentScanRecordProperties.
        :type state: str
        """
        allowed_values = ["Passed", "Failed", "FailedToRun", "InProgress"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_container_path(self):
        """Gets the storage_container_path of this VulnerabilityAssessmentScanRecordProperties.

        The scan results storage container path.

        :return: The storage_container_path of this VulnerabilityAssessmentScanRecordProperties.
        :rtype: str
        """
        return self._storage_container_path

    @storage_container_path.setter
    def storage_container_path(self, storage_container_path):
        """Sets the storage_container_path of this VulnerabilityAssessmentScanRecordProperties.

        The scan results storage container path.

        :param storage_container_path: The storage_container_path of this VulnerabilityAssessmentScanRecordProperties.
        :type storage_container_path: str
        """

        self._storage_container_path = storage_container_path

    @property
    def trigger_type(self):
        """Gets the trigger_type of this VulnerabilityAssessmentScanRecordProperties.

        The scan trigger type.

        :return: The trigger_type of this VulnerabilityAssessmentScanRecordProperties.
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this VulnerabilityAssessmentScanRecordProperties.

        The scan trigger type.

        :param trigger_type: The trigger_type of this VulnerabilityAssessmentScanRecordProperties.
        :type trigger_type: str
        """
        allowed_values = ["OnDemand", "Recurring"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type
