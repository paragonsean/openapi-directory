/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VulnerabilityAssessmentScanError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a vulnerability assessment scan record.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:35.481064-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VulnerabilityAssessmentScanRecordProperties {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<VulnerabilityAssessmentScanError> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_FAILED_SECURITY_CHECKS = "numberOfFailedSecurityChecks";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_FAILED_SECURITY_CHECKS)
  private Integer numberOfFailedSecurityChecks;

  public static final String SERIALIZED_NAME_SCAN_ID = "scanId";
  @SerializedName(SERIALIZED_NAME_SCAN_ID)
  private String scanId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * The scan status.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PASSED("Passed"),
    
    FAILED("Failed"),
    
    FAILED_TO_RUN("FailedToRun"),
    
    IN_PROGRESS("InProgress");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STORAGE_CONTAINER_PATH = "storageContainerPath";
  @SerializedName(SERIALIZED_NAME_STORAGE_CONTAINER_PATH)
  private String storageContainerPath;

  /**
   * The scan trigger type.
   */
  @JsonAdapter(TriggerTypeEnum.Adapter.class)
  public enum TriggerTypeEnum {
    ON_DEMAND("OnDemand"),
    
    RECURRING("Recurring");

    private String value;

    TriggerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerTypeEnum fromValue(String value) {
      for (TriggerTypeEnum b : TriggerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER_TYPE = "triggerType";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE)
  private TriggerTypeEnum triggerType;

  public VulnerabilityAssessmentScanRecordProperties() {
  }

  public VulnerabilityAssessmentScanRecordProperties(
     OffsetDateTime endTime, 
     List<VulnerabilityAssessmentScanError> errors, 
     Integer numberOfFailedSecurityChecks, 
     String scanId, 
     OffsetDateTime startTime, 
     StateEnum state, 
     String storageContainerPath, 
     TriggerTypeEnum triggerType
  ) {
    this();
    this.endTime = endTime;
    this.errors = errors;
    this.numberOfFailedSecurityChecks = numberOfFailedSecurityChecks;
    this.scanId = scanId;
    this.startTime = startTime;
    this.state = state;
    this.storageContainerPath = storageContainerPath;
    this.triggerType = triggerType;
  }

  /**
   * The scan end time (UTC).
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  /**
   * The scan errors.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<VulnerabilityAssessmentScanError> getErrors() {
    return errors;
  }



  /**
   * The number of failed security checks.
   * @return numberOfFailedSecurityChecks
   */
  @javax.annotation.Nullable
  public Integer getNumberOfFailedSecurityChecks() {
    return numberOfFailedSecurityChecks;
  }



  /**
   * The scan ID.
   * @return scanId
   */
  @javax.annotation.Nullable
  public String getScanId() {
    return scanId;
  }



  /**
   * The scan start time (UTC).
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * The scan status.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * The scan results storage container path.
   * @return storageContainerPath
   */
  @javax.annotation.Nullable
  public String getStorageContainerPath() {
    return storageContainerPath;
  }



  /**
   * The scan trigger type.
   * @return triggerType
   */
  @javax.annotation.Nullable
  public TriggerTypeEnum getTriggerType() {
    return triggerType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityAssessmentScanRecordProperties vulnerabilityAssessmentScanRecordProperties = (VulnerabilityAssessmentScanRecordProperties) o;
    return Objects.equals(this.endTime, vulnerabilityAssessmentScanRecordProperties.endTime) &&
        Objects.equals(this.errors, vulnerabilityAssessmentScanRecordProperties.errors) &&
        Objects.equals(this.numberOfFailedSecurityChecks, vulnerabilityAssessmentScanRecordProperties.numberOfFailedSecurityChecks) &&
        Objects.equals(this.scanId, vulnerabilityAssessmentScanRecordProperties.scanId) &&
        Objects.equals(this.startTime, vulnerabilityAssessmentScanRecordProperties.startTime) &&
        Objects.equals(this.state, vulnerabilityAssessmentScanRecordProperties.state) &&
        Objects.equals(this.storageContainerPath, vulnerabilityAssessmentScanRecordProperties.storageContainerPath) &&
        Objects.equals(this.triggerType, vulnerabilityAssessmentScanRecordProperties.triggerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, errors, numberOfFailedSecurityChecks, scanId, startTime, state, storageContainerPath, triggerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityAssessmentScanRecordProperties {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    numberOfFailedSecurityChecks: ").append(toIndentedString(numberOfFailedSecurityChecks)).append("\n");
    sb.append("    scanId: ").append(toIndentedString(scanId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageContainerPath: ").append(toIndentedString(storageContainerPath)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("errors");
    openapiFields.add("numberOfFailedSecurityChecks");
    openapiFields.add("scanId");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("storageContainerPath");
    openapiFields.add("triggerType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VulnerabilityAssessmentScanRecordProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityAssessmentScanRecordProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityAssessmentScanRecordProperties is not found in the empty JSON string", VulnerabilityAssessmentScanRecordProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityAssessmentScanRecordProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityAssessmentScanRecordProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            VulnerabilityAssessmentScanError.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("scanId") != null && !jsonObj.get("scanId").isJsonNull()) && !jsonObj.get("scanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scanId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("storageContainerPath") != null && !jsonObj.get("storageContainerPath").isJsonNull()) && !jsonObj.get("storageContainerPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageContainerPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageContainerPath").toString()));
      }
      if ((jsonObj.get("triggerType") != null && !jsonObj.get("triggerType").isJsonNull()) && !jsonObj.get("triggerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerType").toString()));
      }
      // validate the optional field `triggerType`
      if (jsonObj.get("triggerType") != null && !jsonObj.get("triggerType").isJsonNull()) {
        TriggerTypeEnum.validateJsonElement(jsonObj.get("triggerType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityAssessmentScanRecordProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityAssessmentScanRecordProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityAssessmentScanRecordProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityAssessmentScanRecordProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityAssessmentScanRecordProperties>() {
           @Override
           public void write(JsonWriter out, VulnerabilityAssessmentScanRecordProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityAssessmentScanRecordProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VulnerabilityAssessmentScanRecordProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VulnerabilityAssessmentScanRecordProperties
   * @throws IOException if the JSON string is invalid with respect to VulnerabilityAssessmentScanRecordProperties
   */
  public static VulnerabilityAssessmentScanRecordProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityAssessmentScanRecordProperties.class);
  }

  /**
   * Convert an instance of VulnerabilityAssessmentScanRecordProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

