/*
 * MediaServicesManagementClient
 * Media Services resource management APIs.
 *
 * The version of the OpenAPI document: 2015-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CheckNameAvailabilityInput;
import org.openapitools.client.model.CheckNameAvailabilityOutput;
import org.openapitools.client.model.MediaService;
import org.openapitools.client.model.MediaServiceCollection;
import org.openapitools.client.model.OperationListResult;
import org.openapitools.client.model.RegenerateKeyInput;
import org.openapitools.client.model.RegenerateKeyOutput;
import org.openapitools.client.model.ServiceKeys;
import org.openapitools.client.model.SyncStorageKeysInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Checks whether the Media Service resource name is available. The name must be globally unique.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceCheckNameAvailabilityTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        CheckNameAvailabilityInput parameters = null;
        CheckNameAvailabilityOutput response = api.mediaServiceCheckNameAvailability(subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates a Media Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceCreateTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String mediaServiceName = null;
        MediaService parameters = null;
        MediaService response = api.mediaServiceCreate(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a Media Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceDeleteTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String mediaServiceName = null;
        api.mediaServiceDelete(subscriptionId, apiVersion, resourceGroupName, mediaServiceName);
        // TODO: test validations
    }

    /**
     * Gets a Media Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceGetTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String mediaServiceName = null;
        MediaService response = api.mediaServiceGet(subscriptionId, apiVersion, resourceGroupName, mediaServiceName);
        // TODO: test validations
    }

    /**
     * Lists all of the Media Services in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        MediaServiceCollection response = api.mediaServiceListByResourceGroup(subscriptionId, apiVersion, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Lists the keys for a Media Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceListKeysTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String mediaServiceName = null;
        ServiceKeys response = api.mediaServiceListKeys(subscriptionId, apiVersion, resourceGroupName, mediaServiceName);
        // TODO: test validations
    }

    /**
     * Regenerates a primary or secondary key for a Media Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceRegenerateKeyTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String mediaServiceName = null;
        RegenerateKeyInput parameters = null;
        RegenerateKeyOutput response = api.mediaServiceRegenerateKey(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters);
        // TODO: test validations
    }

    /**
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceSyncStorageKeysTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String mediaServiceName = null;
        SyncStorageKeysInput parameters = null;
        api.mediaServiceSyncStorageKeys(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters);
        // TODO: test validations
    }

    /**
     * Updates a Media Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mediaServiceUpdateTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String mediaServiceName = null;
        MediaService parameters = null;
        MediaService response = api.mediaServiceUpdate(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters);
        // TODO: test validations
    }

    /**
     * Lists all of the available Media Services REST API operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void operationsListTest() throws ApiException {
        String apiVersion = null;
        OperationListResult response = api.operationsList(apiVersion);
        // TODO: test validations
    }

}
