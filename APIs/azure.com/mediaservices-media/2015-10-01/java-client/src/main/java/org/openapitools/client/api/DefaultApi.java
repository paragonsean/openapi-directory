/*
 * MediaServicesManagementClient
 * Media Services resource management APIs.
 *
 * The version of the OpenAPI document: 2015-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CheckNameAvailabilityInput;
import org.openapitools.client.model.CheckNameAvailabilityOutput;
import org.openapitools.client.model.MediaService;
import org.openapitools.client.model.MediaServiceCollection;
import org.openapitools.client.model.OperationListResult;
import org.openapitools.client.model.RegenerateKeyInput;
import org.openapitools.client.model.RegenerateKeyOutput;
import org.openapitools.client.model.ServiceKeys;
import org.openapitools.client.model.SyncStorageKeysInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mediaServiceCheckNameAvailability
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param parameters Properties needed to check the availability of a name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns details about whether a Media Service resource name is available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CheckNameAvailability of a Media Service failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceCheckNameAvailabilityCall(String subscriptionId, String apiVersion, CheckNameAvailabilityInput parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceCheckNameAvailabilityValidateBeforeCall(String subscriptionId, String apiVersion, CheckNameAvailabilityInput parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceCheckNameAvailability(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling mediaServiceCheckNameAvailability(Async)");
        }

        return mediaServiceCheckNameAvailabilityCall(subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Checks whether the Media Service resource name is available. The name must be globally unique.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param parameters Properties needed to check the availability of a name. (required)
     * @return CheckNameAvailabilityOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns details about whether a Media Service resource name is available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CheckNameAvailability of a Media Service failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public CheckNameAvailabilityOutput mediaServiceCheckNameAvailability(String subscriptionId, String apiVersion, CheckNameAvailabilityInput parameters) throws ApiException {
        ApiResponse<CheckNameAvailabilityOutput> localVarResp = mediaServiceCheckNameAvailabilityWithHttpInfo(subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether the Media Service resource name is available. The name must be globally unique.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param parameters Properties needed to check the availability of a name. (required)
     * @return ApiResponse&lt;CheckNameAvailabilityOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns details about whether a Media Service resource name is available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CheckNameAvailability of a Media Service failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<CheckNameAvailabilityOutput> mediaServiceCheckNameAvailabilityWithHttpInfo(String subscriptionId, String apiVersion, CheckNameAvailabilityInput parameters) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether the Media Service resource name is available. The name must be globally unique.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param parameters Properties needed to check the availability of a name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns details about whether a Media Service resource name is available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> CheckNameAvailability of a Media Service failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceCheckNameAvailabilityAsync(String subscriptionId, String apiVersion, CheckNameAvailabilityInput parameters, final ApiCallback<CheckNameAvailabilityOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaServiceCreate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Media Service properties needed for creation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success. Returns the new Media Services account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Create Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceCreateCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "mediaServiceName" + "}", localVarApiClient.escapeString(mediaServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceCreateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaServiceCreate(Async)");
        }

        // verify the required parameter 'mediaServiceName' is set
        if (mediaServiceName == null) {
            throw new ApiException("Missing the required parameter 'mediaServiceName' when calling mediaServiceCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling mediaServiceCreate(Async)");
        }

        return mediaServiceCreateCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, _callback);

    }

    /**
     * 
     * Creates a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Media Service properties needed for creation. (required)
     * @return MediaService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success. Returns the new Media Services account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Create Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public MediaService mediaServiceCreate(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters) throws ApiException {
        ApiResponse<MediaService> localVarResp = mediaServiceCreateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Media Service properties needed for creation. (required)
     * @return ApiResponse&lt;MediaService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success. Returns the new Media Services account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Create Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<MediaService> mediaServiceCreateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, null);
        Type localVarReturnType = new TypeToken<MediaService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Media Service properties needed for creation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success. Returns the new Media Services account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Create Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceCreateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters, final ApiCallback<MediaService> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceCreateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, _callback);
        Type localVarReturnType = new TypeToken<MediaService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaServiceDelete
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services account was deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The account name does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Delete Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "mediaServiceName" + "}", localVarApiClient.escapeString(mediaServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaServiceDelete(Async)");
        }

        // verify the required parameter 'mediaServiceName' is set
        if (mediaServiceName == null) {
            throw new ApiException("Missing the required parameter 'mediaServiceName' when calling mediaServiceDelete(Async)");
        }

        return mediaServiceDeleteCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, _callback);

    }

    /**
     * 
     * Deletes a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services account was deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The account name does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Delete Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public void mediaServiceDelete(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName) throws ApiException {
        mediaServiceDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, mediaServiceName);
    }

    /**
     * 
     * Deletes a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services account was deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The account name does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Delete Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<Void> mediaServiceDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services account was deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The account name does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Delete Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaServiceGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns the details of the Media Services account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Get Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "mediaServiceName" + "}", localVarApiClient.escapeString(mediaServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaServiceGet(Async)");
        }

        // verify the required parameter 'mediaServiceName' is set
        if (mediaServiceName == null) {
            throw new ApiException("Missing the required parameter 'mediaServiceName' when calling mediaServiceGet(Async)");
        }

        return mediaServiceGetCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, _callback);

    }

    /**
     * 
     * Gets a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @return MediaService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns the details of the Media Services account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Get Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public MediaService mediaServiceGet(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName) throws ApiException {
        ApiResponse<MediaService> localVarResp = mediaServiceGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, mediaServiceName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @return ApiResponse&lt;MediaService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns the details of the Media Services account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Get Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<MediaService> mediaServiceGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, null);
        Type localVarReturnType = new TypeToken<MediaService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns the details of the Media Services account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Get Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback<MediaService> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, _callback);
        Type localVarReturnType = new TypeToken<MediaService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaServiceListByResourceGroup
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns a list of all of the Media Services accounts in a resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceListByResourceGroupCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceListByResourceGroupValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaServiceListByResourceGroup(Async)");
        }

        return mediaServiceListByResourceGroupCall(subscriptionId, apiVersion, resourceGroupName, _callback);

    }

    /**
     * 
     * Lists all of the Media Services in a resource group.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @return MediaServiceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns a list of all of the Media Services accounts in a resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public MediaServiceCollection mediaServiceListByResourceGroup(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        ApiResponse<MediaServiceCollection> localVarResp = mediaServiceListByResourceGroupWithHttpInfo(subscriptionId, apiVersion, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the Media Services in a resource group.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @return ApiResponse&lt;MediaServiceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns a list of all of the Media Services accounts in a resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<MediaServiceCollection> mediaServiceListByResourceGroupWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<MediaServiceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the Media Services in a resource group.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns a list of all of the Media Services accounts in a resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceListByResourceGroupAsync(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback<MediaServiceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<MediaServiceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaServiceListKeys
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The keys for the Media Services account were listed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List Media Service keys failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceListKeysCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "mediaServiceName" + "}", localVarApiClient.escapeString(mediaServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceListKeysValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceListKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaServiceListKeys(Async)");
        }

        // verify the required parameter 'mediaServiceName' is set
        if (mediaServiceName == null) {
            throw new ApiException("Missing the required parameter 'mediaServiceName' when calling mediaServiceListKeys(Async)");
        }

        return mediaServiceListKeysCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, _callback);

    }

    /**
     * 
     * Lists the keys for a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @return ServiceKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The keys for the Media Services account were listed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List Media Service keys failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ServiceKeys mediaServiceListKeys(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName) throws ApiException {
        ApiResponse<ServiceKeys> localVarResp = mediaServiceListKeysWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, mediaServiceName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the keys for a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @return ApiResponse&lt;ServiceKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The keys for the Media Services account were listed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List Media Service keys failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<ServiceKeys> mediaServiceListKeysWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceListKeysValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, null);
        Type localVarReturnType = new TypeToken<ServiceKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the keys for a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The keys for the Media Services account were listed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> List Media Service keys failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceListKeysAsync(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, final ApiCallback<ServiceKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceListKeysValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, _callback);
        Type localVarReturnType = new TypeToken<ServiceKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaServiceRegenerateKey
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Properties needed to regenerate the Media Service key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services key specified in the input was regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Regenerate Media Service key failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceRegenerateKeyCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, RegenerateKeyInput parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "mediaServiceName" + "}", localVarApiClient.escapeString(mediaServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceRegenerateKeyValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, RegenerateKeyInput parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceRegenerateKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceRegenerateKey(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaServiceRegenerateKey(Async)");
        }

        // verify the required parameter 'mediaServiceName' is set
        if (mediaServiceName == null) {
            throw new ApiException("Missing the required parameter 'mediaServiceName' when calling mediaServiceRegenerateKey(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling mediaServiceRegenerateKey(Async)");
        }

        return mediaServiceRegenerateKeyCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, _callback);

    }

    /**
     * 
     * Regenerates a primary or secondary key for a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Properties needed to regenerate the Media Service key. (required)
     * @return RegenerateKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services key specified in the input was regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Regenerate Media Service key failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public RegenerateKeyOutput mediaServiceRegenerateKey(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, RegenerateKeyInput parameters) throws ApiException {
        ApiResponse<RegenerateKeyOutput> localVarResp = mediaServiceRegenerateKeyWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates a primary or secondary key for a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Properties needed to regenerate the Media Service key. (required)
     * @return ApiResponse&lt;RegenerateKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services key specified in the input was regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Regenerate Media Service key failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<RegenerateKeyOutput> mediaServiceRegenerateKeyWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, RegenerateKeyInput parameters) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceRegenerateKeyValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, null);
        Type localVarReturnType = new TypeToken<RegenerateKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates a primary or secondary key for a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Properties needed to regenerate the Media Service key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services key specified in the input was regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Regenerate Media Service key failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceRegenerateKeyAsync(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, RegenerateKeyInput parameters, final ApiCallback<RegenerateKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceRegenerateKeyValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, _callback);
        Type localVarReturnType = new TypeToken<RegenerateKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaServiceSyncStorageKeys
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Properties needed to synchronize the keys for a storage account to the Media Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The keys for the storage account were synchronized. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Synch Media Service storage keys failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceSyncStorageKeysCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, SyncStorageKeysInput parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "mediaServiceName" + "}", localVarApiClient.escapeString(mediaServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceSyncStorageKeysValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, SyncStorageKeysInput parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceSyncStorageKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceSyncStorageKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaServiceSyncStorageKeys(Async)");
        }

        // verify the required parameter 'mediaServiceName' is set
        if (mediaServiceName == null) {
            throw new ApiException("Missing the required parameter 'mediaServiceName' when calling mediaServiceSyncStorageKeys(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling mediaServiceSyncStorageKeys(Async)");
        }

        return mediaServiceSyncStorageKeysCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, _callback);

    }

    /**
     * 
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Properties needed to synchronize the keys for a storage account to the Media Service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The keys for the storage account were synchronized. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Synch Media Service storage keys failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public void mediaServiceSyncStorageKeys(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, SyncStorageKeysInput parameters) throws ApiException {
        mediaServiceSyncStorageKeysWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters);
    }

    /**
     * 
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Properties needed to synchronize the keys for a storage account to the Media Service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The keys for the storage account were synchronized. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Synch Media Service storage keys failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<Void> mediaServiceSyncStorageKeysWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, SyncStorageKeysInput parameters) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceSyncStorageKeysValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Properties needed to synchronize the keys for a storage account to the Media Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The keys for the storage account were synchronized. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Synch Media Service storage keys failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceSyncStorageKeysAsync(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, SyncStorageKeysInput parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceSyncStorageKeysValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaServiceUpdate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Media Service properties needed for update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services account was updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Update Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "mediaServiceName" + "}", localVarApiClient.escapeString(mediaServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaServiceUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaServiceUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaServiceUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaServiceUpdate(Async)");
        }

        // verify the required parameter 'mediaServiceName' is set
        if (mediaServiceName == null) {
            throw new ApiException("Missing the required parameter 'mediaServiceName' when calling mediaServiceUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling mediaServiceUpdate(Async)");
        }

        return mediaServiceUpdateCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, _callback);

    }

    /**
     * 
     * Updates a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Media Service properties needed for update. (required)
     * @return MediaService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services account was updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Update Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public MediaService mediaServiceUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters) throws ApiException {
        ApiResponse<MediaService> localVarResp = mediaServiceUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Media Service properties needed for update. (required)
     * @return ApiResponse&lt;MediaService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services account was updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Update Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<MediaService> mediaServiceUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters) throws ApiException {
        okhttp3.Call localVarCall = mediaServiceUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, null);
        Type localVarReturnType = new TypeToken<MediaService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Media Service.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param mediaServiceName Name of the Media Service. (required)
     * @param parameters Media Service properties needed for update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The Media Services account was updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Update Media Services failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call mediaServiceUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String mediaServiceName, MediaService parameters, final ApiCallback<MediaService> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaServiceUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, mediaServiceName, parameters, _callback);
        Type localVarReturnType = new TypeToken<MediaService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsList
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns a list of operations. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call operationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Media/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the available Media Services REST API operations.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @return OperationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns a list of operations. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public OperationListResult operationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationListResult> localVarResp = operationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the available Media Services REST API operations.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @return ApiResponse&lt;OperationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns a list of operations. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public ApiResponse<OperationListResult> operationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the available Media Services REST API operations.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2015-10-01. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Returns a list of operations. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://aka.ms/media-manage"> Documentation</a>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, final ApiCallback<OperationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
