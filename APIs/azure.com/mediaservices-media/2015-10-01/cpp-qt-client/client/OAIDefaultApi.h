/**
 * MediaServicesManagementClient
 * Media Services resource management APIs.
 *
 * The version of the OpenAPI document: 2015-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAICheckNameAvailabilityInput.h"
#include "OAICheckNameAvailabilityOutput.h"
#include "OAIMediaService.h"
#include "OAIMediaServiceCollection.h"
#include "OAIOperationListResult.h"
#include "OAIRegenerateKeyInput.h"
#include "OAIRegenerateKeyOutput.h"
#include "OAIServiceKeys.h"
#include "OAISyncStorageKeysInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICheckNameAvailabilityInput [required]
    */
    virtual void mediaServiceCheckNameAvailability(const QString &subscription_id, const QString &api_version, const OAICheckNameAvailabilityInput &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  media_service_name QString [required]
    * @param[in]  parameters OAIMediaService [required]
    */
    virtual void mediaServiceCreate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &media_service_name, const OAIMediaService &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  media_service_name QString [required]
    */
    virtual void mediaServiceDelete(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &media_service_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  media_service_name QString [required]
    */
    virtual void mediaServiceGet(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &media_service_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void mediaServiceListByResourceGroup(const QString &subscription_id, const QString &api_version, const QString &resource_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  media_service_name QString [required]
    */
    virtual void mediaServiceListKeys(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &media_service_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  media_service_name QString [required]
    * @param[in]  parameters OAIRegenerateKeyInput [required]
    */
    virtual void mediaServiceRegenerateKey(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &media_service_name, const OAIRegenerateKeyInput &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  media_service_name QString [required]
    * @param[in]  parameters OAISyncStorageKeysInput [required]
    */
    virtual void mediaServiceSyncStorageKeys(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &media_service_name, const OAISyncStorageKeysInput &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  media_service_name QString [required]
    * @param[in]  parameters OAIMediaService [required]
    */
    virtual void mediaServiceUpdate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &media_service_name, const OAIMediaService &parameters);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mediaServiceCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void mediaServiceCreateCallback(OAIHttpRequestWorker *worker);
    void mediaServiceDeleteCallback(OAIHttpRequestWorker *worker);
    void mediaServiceGetCallback(OAIHttpRequestWorker *worker);
    void mediaServiceListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void mediaServiceListKeysCallback(OAIHttpRequestWorker *worker);
    void mediaServiceRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void mediaServiceSyncStorageKeysCallback(OAIHttpRequestWorker *worker);
    void mediaServiceUpdateCallback(OAIHttpRequestWorker *worker);
    void operationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mediaServiceCheckNameAvailabilitySignal(OAICheckNameAvailabilityOutput summary);
    void mediaServiceCreateSignal(OAIMediaService summary);
    void mediaServiceDeleteSignal();
    void mediaServiceGetSignal(OAIMediaService summary);
    void mediaServiceListByResourceGroupSignal(OAIMediaServiceCollection summary);
    void mediaServiceListKeysSignal(OAIServiceKeys summary);
    void mediaServiceRegenerateKeySignal(OAIRegenerateKeyOutput summary);
    void mediaServiceSyncStorageKeysSignal();
    void mediaServiceUpdateSignal(OAIMediaService summary);
    void operationsListSignal(OAIOperationListResult summary);


    void mediaServiceCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameAvailabilityOutput summary);
    void mediaServiceCreateSignalFull(OAIHttpRequestWorker *worker, OAIMediaService summary);
    void mediaServiceDeleteSignalFull(OAIHttpRequestWorker *worker);
    void mediaServiceGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaService summary);
    void mediaServiceListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIMediaServiceCollection summary);
    void mediaServiceListKeysSignalFull(OAIHttpRequestWorker *worker, OAIServiceKeys summary);
    void mediaServiceRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAIRegenerateKeyOutput summary);
    void mediaServiceSyncStorageKeysSignalFull(OAIHttpRequestWorker *worker);
    void mediaServiceUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMediaService summary);
    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationListResult summary);

    Q_DECL_DEPRECATED_X("Use mediaServiceCheckNameAvailabilitySignalError() instead")
    void mediaServiceCheckNameAvailabilitySignalE(OAICheckNameAvailabilityOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceCheckNameAvailabilitySignalError(OAICheckNameAvailabilityOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceCreateSignalError() instead")
    void mediaServiceCreateSignalE(OAIMediaService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceCreateSignalError(OAIMediaService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceDeleteSignalError() instead")
    void mediaServiceDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceGetSignalError() instead")
    void mediaServiceGetSignalE(OAIMediaService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceGetSignalError(OAIMediaService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceListByResourceGroupSignalError() instead")
    void mediaServiceListByResourceGroupSignalE(OAIMediaServiceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceListByResourceGroupSignalError(OAIMediaServiceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceListKeysSignalError() instead")
    void mediaServiceListKeysSignalE(OAIServiceKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceListKeysSignalError(OAIServiceKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceRegenerateKeySignalError() instead")
    void mediaServiceRegenerateKeySignalE(OAIRegenerateKeyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceRegenerateKeySignalError(OAIRegenerateKeyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceSyncStorageKeysSignalError() instead")
    void mediaServiceSyncStorageKeysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceSyncStorageKeysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceUpdateSignalError() instead")
    void mediaServiceUpdateSignalE(OAIMediaService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceUpdateSignalError(OAIMediaService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mediaServiceCheckNameAvailabilitySignalErrorFull() instead")
    void mediaServiceCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceCreateSignalErrorFull() instead")
    void mediaServiceCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceDeleteSignalErrorFull() instead")
    void mediaServiceDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceGetSignalErrorFull() instead")
    void mediaServiceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceListByResourceGroupSignalErrorFull() instead")
    void mediaServiceListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceListKeysSignalErrorFull() instead")
    void mediaServiceListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceRegenerateKeySignalErrorFull() instead")
    void mediaServiceRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceSyncStorageKeysSignalErrorFull() instead")
    void mediaServiceSyncStorageKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceSyncStorageKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaServiceUpdateSignalErrorFull() instead")
    void mediaServiceUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaServiceUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
