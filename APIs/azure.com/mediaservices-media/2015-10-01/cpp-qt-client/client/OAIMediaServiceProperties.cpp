/**
 * MediaServicesManagementClient
 * Media Services resource management APIs.
 *
 * The version of the OpenAPI document: 2015-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaServiceProperties::OAIMediaServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaServiceProperties::OAIMediaServiceProperties() {
    this->initializeModel();
}

OAIMediaServiceProperties::~OAIMediaServiceProperties() {}

void OAIMediaServiceProperties::initializeModel() {

    m_api_endpoints_isSet = false;
    m_api_endpoints_isValid = false;

    m_storage_accounts_isSet = false;
    m_storage_accounts_isValid = false;
}

void OAIMediaServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaServiceProperties::fromJsonObject(QJsonObject json) {

    m_api_endpoints_isValid = ::OpenAPI::fromJsonValue(m_api_endpoints, json[QString("apiEndpoints")]);
    m_api_endpoints_isSet = !json[QString("apiEndpoints")].isNull() && m_api_endpoints_isValid;

    m_storage_accounts_isValid = ::OpenAPI::fromJsonValue(m_storage_accounts, json[QString("storageAccounts")]);
    m_storage_accounts_isSet = !json[QString("storageAccounts")].isNull() && m_storage_accounts_isValid;
}

QString OAIMediaServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_api_endpoints.size() > 0) {
        obj.insert(QString("apiEndpoints"), ::OpenAPI::toJsonValue(m_api_endpoints));
    }
    if (m_storage_accounts.size() > 0) {
        obj.insert(QString("storageAccounts"), ::OpenAPI::toJsonValue(m_storage_accounts));
    }
    return obj;
}

QList<OAIApiEndpoint> OAIMediaServiceProperties::getApiEndpoints() const {
    return m_api_endpoints;
}
void OAIMediaServiceProperties::setApiEndpoints(const QList<OAIApiEndpoint> &api_endpoints) {
    m_api_endpoints = api_endpoints;
    m_api_endpoints_isSet = true;
}

bool OAIMediaServiceProperties::is_api_endpoints_Set() const{
    return m_api_endpoints_isSet;
}

bool OAIMediaServiceProperties::is_api_endpoints_Valid() const{
    return m_api_endpoints_isValid;
}

QList<OAIStorageAccount> OAIMediaServiceProperties::getStorageAccounts() const {
    return m_storage_accounts;
}
void OAIMediaServiceProperties::setStorageAccounts(const QList<OAIStorageAccount> &storage_accounts) {
    m_storage_accounts = storage_accounts;
    m_storage_accounts_isSet = true;
}

bool OAIMediaServiceProperties::is_storage_accounts_Set() const{
    return m_storage_accounts_isSet;
}

bool OAIMediaServiceProperties::is_storage_accounts_Valid() const{
    return m_storage_accounts_isValid;
}

bool OAIMediaServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
