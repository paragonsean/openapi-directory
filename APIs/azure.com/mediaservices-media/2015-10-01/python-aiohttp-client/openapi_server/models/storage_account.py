# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_primary: bool=None):
        """StorageAccount - a model defined in OpenAPI

        :param id: The id of this StorageAccount.
        :param is_primary: The is_primary of this StorageAccount.
        """
        self.openapi_types = {
            'id': str,
            'is_primary': bool
        }

        self.attribute_map = {
            'id': 'id',
            'is_primary': 'isPrimary'
        }

        self._id = id
        self._is_primary = is_primary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccount of this StorageAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StorageAccount.

        The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).

        :return: The id of this StorageAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageAccount.

        The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).

        :param id: The id of this StorageAccount.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_primary(self):
        """Gets the is_primary of this StorageAccount.

        Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.

        :return: The is_primary of this StorageAccount.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this StorageAccount.

        Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.

        :param is_primary: The is_primary of this StorageAccount.
        :type is_primary: bool
        """
        if is_primary is None:
            raise ValueError("Invalid value for `is_primary`, must not be `None`")

        self._is_primary = is_primary
