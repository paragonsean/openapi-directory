# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckNameAvailabilityOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, name_available: bool=None, reason: str=None):
        """CheckNameAvailabilityOutput - a model defined in OpenAPI

        :param message: The message of this CheckNameAvailabilityOutput.
        :param name_available: The name_available of this CheckNameAvailabilityOutput.
        :param reason: The reason of this CheckNameAvailabilityOutput.
        """
        self.openapi_types = {
            'message': str,
            'name_available': bool,
            'reason': str
        }

        self.attribute_map = {
            'message': 'message',
            'name_available': 'nameAvailable',
            'reason': 'reason'
        }

        self._message = message
        self._name_available = name_available
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckNameAvailabilityOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckNameAvailabilityOutput of this CheckNameAvailabilityOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this CheckNameAvailabilityOutput.

        Specifies the detailed reason if the name is not available.

        :return: The message of this CheckNameAvailabilityOutput.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CheckNameAvailabilityOutput.

        Specifies the detailed reason if the name is not available.

        :param message: The message of this CheckNameAvailabilityOutput.
        :type message: str
        """

        self._message = message

    @property
    def name_available(self):
        """Gets the name_available of this CheckNameAvailabilityOutput.

        Specifies if the name is available.

        :return: The name_available of this CheckNameAvailabilityOutput.
        :rtype: bool
        """
        return self._name_available

    @name_available.setter
    def name_available(self, name_available):
        """Sets the name_available of this CheckNameAvailabilityOutput.

        Specifies if the name is available.

        :param name_available: The name_available of this CheckNameAvailabilityOutput.
        :type name_available: bool
        """

        self._name_available = name_available

    @property
    def reason(self):
        """Gets the reason of this CheckNameAvailabilityOutput.

        Specifies the reason if the name is not available.

        :return: The reason of this CheckNameAvailabilityOutput.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CheckNameAvailabilityOutput.

        Specifies the reason if the name is not available.

        :param reason: The reason of this CheckNameAvailabilityOutput.
        :type reason: str
        """
        allowed_values = ["None", "Invalid", "AlreadyExists"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
