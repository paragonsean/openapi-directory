/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2017-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrchestratorProfile model module.
 * @module model/OrchestratorProfile
 * @version 2017-09-30
 */
class OrchestratorProfile {
    /**
     * Constructs a new <code>OrchestratorProfile</code>.
     * Contains information about orchestrator.
     * @alias module:model/OrchestratorProfile
     * @param orchestratorType {String} Orchestrator type.
     * @param orchestratorVersion {String} Orchestrator version (major, minor, patch).
     */
    constructor(orchestratorType, orchestratorVersion) { 
        
        OrchestratorProfile.initialize(this, orchestratorType, orchestratorVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orchestratorType, orchestratorVersion) { 
        obj['orchestratorType'] = orchestratorType;
        obj['orchestratorVersion'] = orchestratorVersion;
    }

    /**
     * Constructs a <code>OrchestratorProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrchestratorProfile} obj Optional instance to populate.
     * @return {module:model/OrchestratorProfile} The populated <code>OrchestratorProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrchestratorProfile();

            if (data.hasOwnProperty('orchestratorType')) {
                obj['orchestratorType'] = ApiClient.convertToType(data['orchestratorType'], 'String');
            }
            if (data.hasOwnProperty('orchestratorVersion')) {
                obj['orchestratorVersion'] = ApiClient.convertToType(data['orchestratorVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrchestratorProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrchestratorProfile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrchestratorProfile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['orchestratorType'] && !(typeof data['orchestratorType'] === 'string' || data['orchestratorType'] instanceof String)) {
            throw new Error("Expected the field `orchestratorType` to be a primitive type in the JSON string but got " + data['orchestratorType']);
        }
        // ensure the json data is a string
        if (data['orchestratorVersion'] && !(typeof data['orchestratorVersion'] === 'string' || data['orchestratorVersion'] instanceof String)) {
            throw new Error("Expected the field `orchestratorVersion` to be a primitive type in the JSON string but got " + data['orchestratorVersion']);
        }

        return true;
    }


}

OrchestratorProfile.RequiredProperties = ["orchestratorType", "orchestratorVersion"];

/**
 * Orchestrator type.
 * @member {String} orchestratorType
 */
OrchestratorProfile.prototype['orchestratorType'] = undefined;

/**
 * Orchestrator version (major, minor, patch).
 * @member {String} orchestratorVersion
 */
OrchestratorProfile.prototype['orchestratorVersion'] = undefined;






export default OrchestratorProfile;

