# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.orchestrator_profile import OrchestratorProfile
from openapi_server import util


class OrchestratorVersionProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: bool=None, orchestrator_type: str=None, orchestrator_version: str=None, upgrades: List[OrchestratorProfile]=None):
        """OrchestratorVersionProfile - a model defined in OpenAPI

        :param default: The default of this OrchestratorVersionProfile.
        :param orchestrator_type: The orchestrator_type of this OrchestratorVersionProfile.
        :param orchestrator_version: The orchestrator_version of this OrchestratorVersionProfile.
        :param upgrades: The upgrades of this OrchestratorVersionProfile.
        """
        self.openapi_types = {
            'default': bool,
            'orchestrator_type': str,
            'orchestrator_version': str,
            'upgrades': List[OrchestratorProfile]
        }

        self.attribute_map = {
            'default': 'default',
            'orchestrator_type': 'orchestratorType',
            'orchestrator_version': 'orchestratorVersion',
            'upgrades': 'upgrades'
        }

        self._default = default
        self._orchestrator_type = orchestrator_type
        self._orchestrator_version = orchestrator_version
        self._upgrades = upgrades

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrchestratorVersionProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrchestratorVersionProfile of this OrchestratorVersionProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this OrchestratorVersionProfile.

        Installed by default if version is not specified.

        :return: The default of this OrchestratorVersionProfile.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this OrchestratorVersionProfile.

        Installed by default if version is not specified.

        :param default: The default of this OrchestratorVersionProfile.
        :type default: bool
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")

        self._default = default

    @property
    def orchestrator_type(self):
        """Gets the orchestrator_type of this OrchestratorVersionProfile.

        Orchestrator type.

        :return: The orchestrator_type of this OrchestratorVersionProfile.
        :rtype: str
        """
        return self._orchestrator_type

    @orchestrator_type.setter
    def orchestrator_type(self, orchestrator_type):
        """Sets the orchestrator_type of this OrchestratorVersionProfile.

        Orchestrator type.

        :param orchestrator_type: The orchestrator_type of this OrchestratorVersionProfile.
        :type orchestrator_type: str
        """
        if orchestrator_type is None:
            raise ValueError("Invalid value for `orchestrator_type`, must not be `None`")

        self._orchestrator_type = orchestrator_type

    @property
    def orchestrator_version(self):
        """Gets the orchestrator_version of this OrchestratorVersionProfile.

        Orchestrator version (major, minor, patch).

        :return: The orchestrator_version of this OrchestratorVersionProfile.
        :rtype: str
        """
        return self._orchestrator_version

    @orchestrator_version.setter
    def orchestrator_version(self, orchestrator_version):
        """Sets the orchestrator_version of this OrchestratorVersionProfile.

        Orchestrator version (major, minor, patch).

        :param orchestrator_version: The orchestrator_version of this OrchestratorVersionProfile.
        :type orchestrator_version: str
        """
        if orchestrator_version is None:
            raise ValueError("Invalid value for `orchestrator_version`, must not be `None`")

        self._orchestrator_version = orchestrator_version

    @property
    def upgrades(self):
        """Gets the upgrades of this OrchestratorVersionProfile.

        The list of available upgrade versions.

        :return: The upgrades of this OrchestratorVersionProfile.
        :rtype: List[OrchestratorProfile]
        """
        return self._upgrades

    @upgrades.setter
    def upgrades(self, upgrades):
        """Sets the upgrades of this OrchestratorVersionProfile.

        The list of available upgrade versions.

        :param upgrades: The upgrades of this OrchestratorVersionProfile.
        :type upgrades: List[OrchestratorProfile]
        """
        if upgrades is None:
            raise ValueError("Invalid value for `upgrades`, must not be `None`")

        self._upgrades = upgrades
