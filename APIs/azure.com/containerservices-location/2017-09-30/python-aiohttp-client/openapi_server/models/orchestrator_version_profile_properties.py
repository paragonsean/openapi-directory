# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.orchestrator_version_profile import OrchestratorVersionProfile
from openapi_server import util


class OrchestratorVersionProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, orchestrators: List[OrchestratorVersionProfile]=None):
        """OrchestratorVersionProfileProperties - a model defined in OpenAPI

        :param orchestrators: The orchestrators of this OrchestratorVersionProfileProperties.
        """
        self.openapi_types = {
            'orchestrators': List[OrchestratorVersionProfile]
        }

        self.attribute_map = {
            'orchestrators': 'orchestrators'
        }

        self._orchestrators = orchestrators

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrchestratorVersionProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrchestratorVersionProfileProperties of this OrchestratorVersionProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orchestrators(self):
        """Gets the orchestrators of this OrchestratorVersionProfileProperties.

        List of orchestrator version profiles.

        :return: The orchestrators of this OrchestratorVersionProfileProperties.
        :rtype: List[OrchestratorVersionProfile]
        """
        return self._orchestrators

    @orchestrators.setter
    def orchestrators(self, orchestrators):
        """Sets the orchestrators of this OrchestratorVersionProfileProperties.

        List of orchestrator version profiles.

        :param orchestrators: The orchestrators of this OrchestratorVersionProfileProperties.
        :type orchestrators: List[OrchestratorVersionProfile]
        """
        if orchestrators is None:
            raise ValueError("Invalid value for `orchestrators`, must not be `None`")

        self._orchestrators = orchestrators
