/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDdosCustomPoliciesApi_H
#define OAI_OAIDdosCustomPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIDdosCustomPolicies_UpdateTags_request.h"
#include "OAIDdosCustomPolicy.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDdosCustomPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIDdosCustomPoliciesApi(const int timeOut = 0);
    ~OAIDdosCustomPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  ddos_custom_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDdosCustomPolicy [required]
    */
    virtual void ddosCustomPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &ddos_custom_policy_name, const QString &api_version, const QString &subscription_id, const OAIDdosCustomPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  ddos_custom_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void ddosCustomPoliciesDelete(const QString &resource_group_name, const QString &ddos_custom_policy_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  ddos_custom_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void ddosCustomPoliciesGet(const QString &resource_group_name, const QString &ddos_custom_policy_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  ddos_custom_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDdosCustomPolicies_UpdateTags_request [required]
    */
    virtual void ddosCustomPoliciesUpdateTags(const QString &resource_group_name, const QString &ddos_custom_policy_name, const QString &api_version, const QString &subscription_id, const OAIDdosCustomPolicies_UpdateTags_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ddosCustomPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void ddosCustomPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void ddosCustomPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void ddosCustomPoliciesUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ddosCustomPoliciesCreateOrUpdateSignal(OAIDdosCustomPolicy summary);
    void ddosCustomPoliciesDeleteSignal();
    void ddosCustomPoliciesGetSignal(OAIDdosCustomPolicy summary);
    void ddosCustomPoliciesUpdateTagsSignal(OAIDdosCustomPolicy summary);


    void ddosCustomPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDdosCustomPolicy summary);
    void ddosCustomPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ddosCustomPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIDdosCustomPolicy summary);
    void ddosCustomPoliciesUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIDdosCustomPolicy summary);

    Q_DECL_DEPRECATED_X("Use ddosCustomPoliciesCreateOrUpdateSignalError() instead")
    void ddosCustomPoliciesCreateOrUpdateSignalE(OAIDdosCustomPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ddosCustomPoliciesCreateOrUpdateSignalError(OAIDdosCustomPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ddosCustomPoliciesDeleteSignalError() instead")
    void ddosCustomPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ddosCustomPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ddosCustomPoliciesGetSignalError() instead")
    void ddosCustomPoliciesGetSignalE(OAIDdosCustomPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ddosCustomPoliciesGetSignalError(OAIDdosCustomPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ddosCustomPoliciesUpdateTagsSignalError() instead")
    void ddosCustomPoliciesUpdateTagsSignalE(OAIDdosCustomPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ddosCustomPoliciesUpdateTagsSignalError(OAIDdosCustomPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ddosCustomPoliciesCreateOrUpdateSignalErrorFull() instead")
    void ddosCustomPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ddosCustomPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ddosCustomPoliciesDeleteSignalErrorFull() instead")
    void ddosCustomPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ddosCustomPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ddosCustomPoliciesGetSignalErrorFull() instead")
    void ddosCustomPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ddosCustomPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ddosCustomPoliciesUpdateTagsSignalErrorFull() instead")
    void ddosCustomPoliciesUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ddosCustomPoliciesUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
