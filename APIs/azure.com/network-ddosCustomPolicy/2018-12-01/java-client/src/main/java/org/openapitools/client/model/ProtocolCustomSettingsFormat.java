/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DDoS custom policy properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:23.889289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtocolCustomSettingsFormat {
  /**
   * The protocol for which the DDoS protection policy is being customized.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("Tcp"),
    
    UDP("Udp"),
    
    SYN("Syn");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_SOURCE_RATE_OVERRIDE = "sourceRateOverride";
  @SerializedName(SERIALIZED_NAME_SOURCE_RATE_OVERRIDE)
  private String sourceRateOverride;

  public static final String SERIALIZED_NAME_TRIGGER_RATE_OVERRIDE = "triggerRateOverride";
  @SerializedName(SERIALIZED_NAME_TRIGGER_RATE_OVERRIDE)
  private String triggerRateOverride;

  /**
   * The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
   */
  @JsonAdapter(TriggerSensitivityOverrideEnum.Adapter.class)
  public enum TriggerSensitivityOverrideEnum {
    RELAXED("Relaxed"),
    
    LOW("Low"),
    
    DEFAULT("Default"),
    
    HIGH("High");

    private String value;

    TriggerSensitivityOverrideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerSensitivityOverrideEnum fromValue(String value) {
      for (TriggerSensitivityOverrideEnum b : TriggerSensitivityOverrideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerSensitivityOverrideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerSensitivityOverrideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerSensitivityOverrideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerSensitivityOverrideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerSensitivityOverrideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER_SENSITIVITY_OVERRIDE = "triggerSensitivityOverride";
  @SerializedName(SERIALIZED_NAME_TRIGGER_SENSITIVITY_OVERRIDE)
  private TriggerSensitivityOverrideEnum triggerSensitivityOverride;

  public ProtocolCustomSettingsFormat() {
  }

  public ProtocolCustomSettingsFormat protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The protocol for which the DDoS protection policy is being customized.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public ProtocolCustomSettingsFormat sourceRateOverride(String sourceRateOverride) {
    this.sourceRateOverride = sourceRateOverride;
    return this;
  }

  /**
   * The customized DDoS protection source rate.
   * @return sourceRateOverride
   */
  @javax.annotation.Nullable
  public String getSourceRateOverride() {
    return sourceRateOverride;
  }

  public void setSourceRateOverride(String sourceRateOverride) {
    this.sourceRateOverride = sourceRateOverride;
  }


  public ProtocolCustomSettingsFormat triggerRateOverride(String triggerRateOverride) {
    this.triggerRateOverride = triggerRateOverride;
    return this;
  }

  /**
   * The customized DDoS protection trigger rate.
   * @return triggerRateOverride
   */
  @javax.annotation.Nullable
  public String getTriggerRateOverride() {
    return triggerRateOverride;
  }

  public void setTriggerRateOverride(String triggerRateOverride) {
    this.triggerRateOverride = triggerRateOverride;
  }


  public ProtocolCustomSettingsFormat triggerSensitivityOverride(TriggerSensitivityOverrideEnum triggerSensitivityOverride) {
    this.triggerSensitivityOverride = triggerSensitivityOverride;
    return this;
  }

  /**
   * The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
   * @return triggerSensitivityOverride
   */
  @javax.annotation.Nullable
  public TriggerSensitivityOverrideEnum getTriggerSensitivityOverride() {
    return triggerSensitivityOverride;
  }

  public void setTriggerSensitivityOverride(TriggerSensitivityOverrideEnum triggerSensitivityOverride) {
    this.triggerSensitivityOverride = triggerSensitivityOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtocolCustomSettingsFormat protocolCustomSettingsFormat = (ProtocolCustomSettingsFormat) o;
    return Objects.equals(this.protocol, protocolCustomSettingsFormat.protocol) &&
        Objects.equals(this.sourceRateOverride, protocolCustomSettingsFormat.sourceRateOverride) &&
        Objects.equals(this.triggerRateOverride, protocolCustomSettingsFormat.triggerRateOverride) &&
        Objects.equals(this.triggerSensitivityOverride, protocolCustomSettingsFormat.triggerSensitivityOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protocol, sourceRateOverride, triggerRateOverride, triggerSensitivityOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtocolCustomSettingsFormat {\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sourceRateOverride: ").append(toIndentedString(sourceRateOverride)).append("\n");
    sb.append("    triggerRateOverride: ").append(toIndentedString(triggerRateOverride)).append("\n");
    sb.append("    triggerSensitivityOverride: ").append(toIndentedString(triggerSensitivityOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("protocol");
    openapiFields.add("sourceRateOverride");
    openapiFields.add("triggerRateOverride");
    openapiFields.add("triggerSensitivityOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtocolCustomSettingsFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtocolCustomSettingsFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtocolCustomSettingsFormat is not found in the empty JSON string", ProtocolCustomSettingsFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtocolCustomSettingsFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtocolCustomSettingsFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("sourceRateOverride") != null && !jsonObj.get("sourceRateOverride").isJsonNull()) && !jsonObj.get("sourceRateOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceRateOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceRateOverride").toString()));
      }
      if ((jsonObj.get("triggerRateOverride") != null && !jsonObj.get("triggerRateOverride").isJsonNull()) && !jsonObj.get("triggerRateOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerRateOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerRateOverride").toString()));
      }
      if ((jsonObj.get("triggerSensitivityOverride") != null && !jsonObj.get("triggerSensitivityOverride").isJsonNull()) && !jsonObj.get("triggerSensitivityOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerSensitivityOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerSensitivityOverride").toString()));
      }
      // validate the optional field `triggerSensitivityOverride`
      if (jsonObj.get("triggerSensitivityOverride") != null && !jsonObj.get("triggerSensitivityOverride").isJsonNull()) {
        TriggerSensitivityOverrideEnum.validateJsonElement(jsonObj.get("triggerSensitivityOverride"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtocolCustomSettingsFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtocolCustomSettingsFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtocolCustomSettingsFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtocolCustomSettingsFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtocolCustomSettingsFormat>() {
           @Override
           public void write(JsonWriter out, ProtocolCustomSettingsFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtocolCustomSettingsFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtocolCustomSettingsFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtocolCustomSettingsFormat
   * @throws IOException if the JSON string is invalid with respect to ProtocolCustomSettingsFormat
   */
  public static ProtocolCustomSettingsFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtocolCustomSettingsFormat.class);
  }

  /**
   * Convert an instance of ProtocolCustomSettingsFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

