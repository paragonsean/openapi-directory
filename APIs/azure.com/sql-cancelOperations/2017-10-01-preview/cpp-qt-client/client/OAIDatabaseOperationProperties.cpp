/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseOperationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseOperationProperties::OAIDatabaseOperationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseOperationProperties::OAIDatabaseOperationProperties() {
    this->initializeModel();
}

OAIDatabaseOperationProperties::~OAIDatabaseOperationProperties() {}

void OAIDatabaseOperationProperties::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_error_severity_isSet = false;
    m_error_severity_isValid = false;

    m_estimated_completion_time_isSet = false;
    m_estimated_completion_time_isValid = false;

    m_is_cancellable_isSet = false;
    m_is_cancellable_isValid = false;

    m_is_user_error_isSet = false;
    m_is_user_error_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_operation_friendly_name_isSet = false;
    m_operation_friendly_name_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDatabaseOperationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseOperationProperties::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("errorDescription")]);
    m_error_description_isSet = !json[QString("errorDescription")].isNull() && m_error_description_isValid;

    m_error_severity_isValid = ::OpenAPI::fromJsonValue(m_error_severity, json[QString("errorSeverity")]);
    m_error_severity_isSet = !json[QString("errorSeverity")].isNull() && m_error_severity_isValid;

    m_estimated_completion_time_isValid = ::OpenAPI::fromJsonValue(m_estimated_completion_time, json[QString("estimatedCompletionTime")]);
    m_estimated_completion_time_isSet = !json[QString("estimatedCompletionTime")].isNull() && m_estimated_completion_time_isValid;

    m_is_cancellable_isValid = ::OpenAPI::fromJsonValue(m_is_cancellable, json[QString("isCancellable")]);
    m_is_cancellable_isSet = !json[QString("isCancellable")].isNull() && m_is_cancellable_isValid;

    m_is_user_error_isValid = ::OpenAPI::fromJsonValue(m_is_user_error, json[QString("isUserError")]);
    m_is_user_error_isSet = !json[QString("isUserError")].isNull() && m_is_user_error_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_operation_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_operation_friendly_name, json[QString("operationFriendlyName")]);
    m_operation_friendly_name_isSet = !json[QString("operationFriendlyName")].isNull() && m_operation_friendly_name_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDatabaseOperationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseOperationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("errorDescription"), ::OpenAPI::toJsonValue(m_error_description));
    }
    if (m_error_severity_isSet) {
        obj.insert(QString("errorSeverity"), ::OpenAPI::toJsonValue(m_error_severity));
    }
    if (m_estimated_completion_time_isSet) {
        obj.insert(QString("estimatedCompletionTime"), ::OpenAPI::toJsonValue(m_estimated_completion_time));
    }
    if (m_is_cancellable_isSet) {
        obj.insert(QString("isCancellable"), ::OpenAPI::toJsonValue(m_is_cancellable));
    }
    if (m_is_user_error_isSet) {
        obj.insert(QString("isUserError"), ::OpenAPI::toJsonValue(m_is_user_error));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_operation_friendly_name_isSet) {
        obj.insert(QString("operationFriendlyName"), ::OpenAPI::toJsonValue(m_operation_friendly_name));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIDatabaseOperationProperties::getDatabaseName() const {
    return m_database_name;
}
void OAIDatabaseOperationProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDatabaseOperationProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDatabaseOperationProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIDatabaseOperationProperties::getDescription() const {
    return m_description;
}
void OAIDatabaseOperationProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDatabaseOperationProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDatabaseOperationProperties::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIDatabaseOperationProperties::getErrorCode() const {
    return m_error_code;
}
void OAIDatabaseOperationProperties::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIDatabaseOperationProperties::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIDatabaseOperationProperties::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIDatabaseOperationProperties::getErrorDescription() const {
    return m_error_description;
}
void OAIDatabaseOperationProperties::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIDatabaseOperationProperties::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIDatabaseOperationProperties::is_error_description_Valid() const{
    return m_error_description_isValid;
}

qint32 OAIDatabaseOperationProperties::getErrorSeverity() const {
    return m_error_severity;
}
void OAIDatabaseOperationProperties::setErrorSeverity(const qint32 &error_severity) {
    m_error_severity = error_severity;
    m_error_severity_isSet = true;
}

bool OAIDatabaseOperationProperties::is_error_severity_Set() const{
    return m_error_severity_isSet;
}

bool OAIDatabaseOperationProperties::is_error_severity_Valid() const{
    return m_error_severity_isValid;
}

QDateTime OAIDatabaseOperationProperties::getEstimatedCompletionTime() const {
    return m_estimated_completion_time;
}
void OAIDatabaseOperationProperties::setEstimatedCompletionTime(const QDateTime &estimated_completion_time) {
    m_estimated_completion_time = estimated_completion_time;
    m_estimated_completion_time_isSet = true;
}

bool OAIDatabaseOperationProperties::is_estimated_completion_time_Set() const{
    return m_estimated_completion_time_isSet;
}

bool OAIDatabaseOperationProperties::is_estimated_completion_time_Valid() const{
    return m_estimated_completion_time_isValid;
}

bool OAIDatabaseOperationProperties::isIsCancellable() const {
    return m_is_cancellable;
}
void OAIDatabaseOperationProperties::setIsCancellable(const bool &is_cancellable) {
    m_is_cancellable = is_cancellable;
    m_is_cancellable_isSet = true;
}

bool OAIDatabaseOperationProperties::is_is_cancellable_Set() const{
    return m_is_cancellable_isSet;
}

bool OAIDatabaseOperationProperties::is_is_cancellable_Valid() const{
    return m_is_cancellable_isValid;
}

bool OAIDatabaseOperationProperties::isIsUserError() const {
    return m_is_user_error;
}
void OAIDatabaseOperationProperties::setIsUserError(const bool &is_user_error) {
    m_is_user_error = is_user_error;
    m_is_user_error_isSet = true;
}

bool OAIDatabaseOperationProperties::is_is_user_error_Set() const{
    return m_is_user_error_isSet;
}

bool OAIDatabaseOperationProperties::is_is_user_error_Valid() const{
    return m_is_user_error_isValid;
}

QString OAIDatabaseOperationProperties::getOperation() const {
    return m_operation;
}
void OAIDatabaseOperationProperties::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIDatabaseOperationProperties::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIDatabaseOperationProperties::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIDatabaseOperationProperties::getOperationFriendlyName() const {
    return m_operation_friendly_name;
}
void OAIDatabaseOperationProperties::setOperationFriendlyName(const QString &operation_friendly_name) {
    m_operation_friendly_name = operation_friendly_name;
    m_operation_friendly_name_isSet = true;
}

bool OAIDatabaseOperationProperties::is_operation_friendly_name_Set() const{
    return m_operation_friendly_name_isSet;
}

bool OAIDatabaseOperationProperties::is_operation_friendly_name_Valid() const{
    return m_operation_friendly_name_isValid;
}

qint32 OAIDatabaseOperationProperties::getPercentComplete() const {
    return m_percent_complete;
}
void OAIDatabaseOperationProperties::setPercentComplete(const qint32 &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAIDatabaseOperationProperties::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAIDatabaseOperationProperties::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

QString OAIDatabaseOperationProperties::getServerName() const {
    return m_server_name;
}
void OAIDatabaseOperationProperties::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIDatabaseOperationProperties::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIDatabaseOperationProperties::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QDateTime OAIDatabaseOperationProperties::getStartTime() const {
    return m_start_time;
}
void OAIDatabaseOperationProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDatabaseOperationProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDatabaseOperationProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIDatabaseOperationProperties::getState() const {
    return m_state;
}
void OAIDatabaseOperationProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDatabaseOperationProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDatabaseOperationProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDatabaseOperationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cancellable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseOperationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
