/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseOperationProperties.h
 *
 * The properties of a database operation.
 */

#ifndef OAIDatabaseOperationProperties_H
#define OAIDatabaseOperationProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDatabaseOperationProperties : public OAIObject {
public:
    OAIDatabaseOperationProperties();
    OAIDatabaseOperationProperties(QString json);
    ~OAIDatabaseOperationProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getErrorCode() const;
    void setErrorCode(const qint32 &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getErrorDescription() const;
    void setErrorDescription(const QString &error_description);
    bool is_error_description_Set() const;
    bool is_error_description_Valid() const;

    qint32 getErrorSeverity() const;
    void setErrorSeverity(const qint32 &error_severity);
    bool is_error_severity_Set() const;
    bool is_error_severity_Valid() const;

    QDateTime getEstimatedCompletionTime() const;
    void setEstimatedCompletionTime(const QDateTime &estimated_completion_time);
    bool is_estimated_completion_time_Set() const;
    bool is_estimated_completion_time_Valid() const;

    bool isIsCancellable() const;
    void setIsCancellable(const bool &is_cancellable);
    bool is_is_cancellable_Set() const;
    bool is_is_cancellable_Valid() const;

    bool isIsUserError() const;
    void setIsUserError(const bool &is_user_error);
    bool is_is_user_error_Set() const;
    bool is_is_user_error_Valid() const;

    QString getOperation() const;
    void setOperation(const QString &operation);
    bool is_operation_Set() const;
    bool is_operation_Valid() const;

    QString getOperationFriendlyName() const;
    void setOperationFriendlyName(const QString &operation_friendly_name);
    bool is_operation_friendly_name_Set() const;
    bool is_operation_friendly_name_Valid() const;

    qint32 getPercentComplete() const;
    void setPercentComplete(const qint32 &percent_complete);
    bool is_percent_complete_Set() const;
    bool is_percent_complete_Valid() const;

    QString getServerName() const;
    void setServerName(const QString &server_name);
    bool is_server_name_Set() const;
    bool is_server_name_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_error_description;
    bool m_error_description_isSet;
    bool m_error_description_isValid;

    qint32 m_error_severity;
    bool m_error_severity_isSet;
    bool m_error_severity_isValid;

    QDateTime m_estimated_completion_time;
    bool m_estimated_completion_time_isSet;
    bool m_estimated_completion_time_isValid;

    bool m_is_cancellable;
    bool m_is_cancellable_isSet;
    bool m_is_cancellable_isValid;

    bool m_is_user_error;
    bool m_is_user_error_isSet;
    bool m_is_user_error_isValid;

    QString m_operation;
    bool m_operation_isSet;
    bool m_operation_isValid;

    QString m_operation_friendly_name;
    bool m_operation_friendly_name_isSet;
    bool m_operation_friendly_name_isValid;

    qint32 m_percent_complete;
    bool m_percent_complete_isSet;
    bool m_percent_complete_isValid;

    QString m_server_name;
    bool m_server_name_isSet;
    bool m_server_name_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseOperationProperties)

#endif // OAIDatabaseOperationProperties_H
