# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecurityAssessmentMetadataProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_type: str=None, category: List[str]=None, description: str=None, display_name: str=None, implementation_effort: str=None, policy_definition_id: str=None, preview: bool=None, remediation_description: str=None, severity: str=None, threats: List[str]=None, user_impact: str=None):
        """SecurityAssessmentMetadataProperties - a model defined in OpenAPI

        :param assessment_type: The assessment_type of this SecurityAssessmentMetadataProperties.
        :param category: The category of this SecurityAssessmentMetadataProperties.
        :param description: The description of this SecurityAssessmentMetadataProperties.
        :param display_name: The display_name of this SecurityAssessmentMetadataProperties.
        :param implementation_effort: The implementation_effort of this SecurityAssessmentMetadataProperties.
        :param policy_definition_id: The policy_definition_id of this SecurityAssessmentMetadataProperties.
        :param preview: The preview of this SecurityAssessmentMetadataProperties.
        :param remediation_description: The remediation_description of this SecurityAssessmentMetadataProperties.
        :param severity: The severity of this SecurityAssessmentMetadataProperties.
        :param threats: The threats of this SecurityAssessmentMetadataProperties.
        :param user_impact: The user_impact of this SecurityAssessmentMetadataProperties.
        """
        self.openapi_types = {
            'assessment_type': str,
            'category': List[str],
            'description': str,
            'display_name': str,
            'implementation_effort': str,
            'policy_definition_id': str,
            'preview': bool,
            'remediation_description': str,
            'severity': str,
            'threats': List[str],
            'user_impact': str
        }

        self.attribute_map = {
            'assessment_type': 'assessmentType',
            'category': 'category',
            'description': 'description',
            'display_name': 'displayName',
            'implementation_effort': 'implementationEffort',
            'policy_definition_id': 'policyDefinitionId',
            'preview': 'preview',
            'remediation_description': 'remediationDescription',
            'severity': 'severity',
            'threats': 'threats',
            'user_impact': 'userImpact'
        }

        self._assessment_type = assessment_type
        self._category = category
        self._description = description
        self._display_name = display_name
        self._implementation_effort = implementation_effort
        self._policy_definition_id = policy_definition_id
        self._preview = preview
        self._remediation_description = remediation_description
        self._severity = severity
        self._threats = threats
        self._user_impact = user_impact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityAssessmentMetadataProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityAssessmentMetadataProperties of this SecurityAssessmentMetadataProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_type(self):
        """Gets the assessment_type of this SecurityAssessmentMetadataProperties.

        BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition

        :return: The assessment_type of this SecurityAssessmentMetadataProperties.
        :rtype: str
        """
        return self._assessment_type

    @assessment_type.setter
    def assessment_type(self, assessment_type):
        """Sets the assessment_type of this SecurityAssessmentMetadataProperties.

        BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition

        :param assessment_type: The assessment_type of this SecurityAssessmentMetadataProperties.
        :type assessment_type: str
        """
        allowed_values = ["BuiltIn", "CustomPolicy", "CustomerManaged"]  # noqa: E501
        if assessment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assessment_type` ({0}), must be one of {1}"
                .format(assessment_type, allowed_values)
            )

        self._assessment_type = assessment_type

    @property
    def category(self):
        """Gets the category of this SecurityAssessmentMetadataProperties.


        :return: The category of this SecurityAssessmentMetadataProperties.
        :rtype: List[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SecurityAssessmentMetadataProperties.


        :param category: The category of this SecurityAssessmentMetadataProperties.
        :type category: List[str]
        """
        allowed_values = ["Compute", "Networking", "Data", "IdentityAndAccess", "IoT"]  # noqa: E501
        if not set(category).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `category` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(category) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._category = category

    @property
    def description(self):
        """Gets the description of this SecurityAssessmentMetadataProperties.

        Human readable description of the assessment

        :return: The description of this SecurityAssessmentMetadataProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SecurityAssessmentMetadataProperties.

        Human readable description of the assessment

        :param description: The description of this SecurityAssessmentMetadataProperties.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this SecurityAssessmentMetadataProperties.

        User friendly display name of the assessment

        :return: The display_name of this SecurityAssessmentMetadataProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SecurityAssessmentMetadataProperties.

        User friendly display name of the assessment

        :param display_name: The display_name of this SecurityAssessmentMetadataProperties.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def implementation_effort(self):
        """Gets the implementation_effort of this SecurityAssessmentMetadataProperties.

        The implementation effort required to remediate this assessment

        :return: The implementation_effort of this SecurityAssessmentMetadataProperties.
        :rtype: str
        """
        return self._implementation_effort

    @implementation_effort.setter
    def implementation_effort(self, implementation_effort):
        """Sets the implementation_effort of this SecurityAssessmentMetadataProperties.

        The implementation effort required to remediate this assessment

        :param implementation_effort: The implementation_effort of this SecurityAssessmentMetadataProperties.
        :type implementation_effort: str
        """
        allowed_values = ["Low", "Moderate", "High"]  # noqa: E501
        if implementation_effort not in allowed_values:
            raise ValueError(
                "Invalid value for `implementation_effort` ({0}), must be one of {1}"
                .format(implementation_effort, allowed_values)
            )

        self._implementation_effort = implementation_effort

    @property
    def policy_definition_id(self):
        """Gets the policy_definition_id of this SecurityAssessmentMetadataProperties.

        Azure resource ID of the policy definition that turns this assessment calculation on

        :return: The policy_definition_id of this SecurityAssessmentMetadataProperties.
        :rtype: str
        """
        return self._policy_definition_id

    @policy_definition_id.setter
    def policy_definition_id(self, policy_definition_id):
        """Sets the policy_definition_id of this SecurityAssessmentMetadataProperties.

        Azure resource ID of the policy definition that turns this assessment calculation on

        :param policy_definition_id: The policy_definition_id of this SecurityAssessmentMetadataProperties.
        :type policy_definition_id: str
        """

        self._policy_definition_id = policy_definition_id

    @property
    def preview(self):
        """Gets the preview of this SecurityAssessmentMetadataProperties.

        True if this assessment is in preview release status

        :return: The preview of this SecurityAssessmentMetadataProperties.
        :rtype: bool
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this SecurityAssessmentMetadataProperties.

        True if this assessment is in preview release status

        :param preview: The preview of this SecurityAssessmentMetadataProperties.
        :type preview: bool
        """

        self._preview = preview

    @property
    def remediation_description(self):
        """Gets the remediation_description of this SecurityAssessmentMetadataProperties.

        Human readable description of what you should do to mitigate this security issue

        :return: The remediation_description of this SecurityAssessmentMetadataProperties.
        :rtype: str
        """
        return self._remediation_description

    @remediation_description.setter
    def remediation_description(self, remediation_description):
        """Sets the remediation_description of this SecurityAssessmentMetadataProperties.

        Human readable description of what you should do to mitigate this security issue

        :param remediation_description: The remediation_description of this SecurityAssessmentMetadataProperties.
        :type remediation_description: str
        """

        self._remediation_description = remediation_description

    @property
    def severity(self):
        """Gets the severity of this SecurityAssessmentMetadataProperties.

        The severity level of the assessment

        :return: The severity of this SecurityAssessmentMetadataProperties.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this SecurityAssessmentMetadataProperties.

        The severity level of the assessment

        :param severity: The severity of this SecurityAssessmentMetadataProperties.
        :type severity: str
        """
        allowed_values = ["Low", "Medium", "High"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def threats(self):
        """Gets the threats of this SecurityAssessmentMetadataProperties.


        :return: The threats of this SecurityAssessmentMetadataProperties.
        :rtype: List[str]
        """
        return self._threats

    @threats.setter
    def threats(self, threats):
        """Sets the threats of this SecurityAssessmentMetadataProperties.


        :param threats: The threats of this SecurityAssessmentMetadataProperties.
        :type threats: List[str]
        """
        allowed_values = ["accountBreach", "dataExfiltration", "dataSpillage", "maliciousInsider", "elevationOfPrivilege", "threatResistance", "missingCoverage", "denialOfService"]  # noqa: E501
        if not set(threats).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `threats` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(threats) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._threats = threats

    @property
    def user_impact(self):
        """Gets the user_impact of this SecurityAssessmentMetadataProperties.

        The user impact of the assessment

        :return: The user_impact of this SecurityAssessmentMetadataProperties.
        :rtype: str
        """
        return self._user_impact

    @user_impact.setter
    def user_impact(self, user_impact):
        """Sets the user_impact of this SecurityAssessmentMetadataProperties.

        The user impact of the assessment

        :param user_impact: The user_impact of this SecurityAssessmentMetadataProperties.
        :type user_impact: str
        """
        allowed_values = ["Low", "Moderate", "High"]  # noqa: E501
        if user_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `user_impact` ({0}), must be one of {1}"
                .format(user_impact, allowed_values)
            )

        self._user_impact = user_impact
