/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssessmentsMetadataListDefaultResponse;
import org.openapitools.client.model.SecurityAssessmentMetadata;
import org.openapitools.client.model.SecurityAssessmentMetadataList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssessmentsMetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssessmentsMetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssessmentsMetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assessmentsMetadataGet
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataGetCall(String apiVersion, String assessmentMetadataName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}"
            .replace("{" + "assessmentMetadataName" + "}", localVarApiClient.escapeString(assessmentMetadataName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsMetadataGetValidateBeforeCall(String apiVersion, String assessmentMetadataName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsMetadataGet(Async)");
        }

        // verify the required parameter 'assessmentMetadataName' is set
        if (assessmentMetadataName == null) {
            throw new ApiException("Missing the required parameter 'assessmentMetadataName' when calling assessmentsMetadataGet(Async)");
        }

        return assessmentsMetadataGetCall(apiVersion, assessmentMetadataName, _callback);

    }

    /**
     * 
     * Get metadata information on an assessment type
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @return SecurityAssessmentMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityAssessmentMetadata assessmentsMetadataGet(String apiVersion, String assessmentMetadataName) throws ApiException {
        ApiResponse<SecurityAssessmentMetadata> localVarResp = assessmentsMetadataGetWithHttpInfo(apiVersion, assessmentMetadataName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata information on an assessment type
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @return ApiResponse&lt;SecurityAssessmentMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityAssessmentMetadata> assessmentsMetadataGetWithHttpInfo(String apiVersion, String assessmentMetadataName) throws ApiException {
        okhttp3.Call localVarCall = assessmentsMetadataGetValidateBeforeCall(apiVersion, assessmentMetadataName, null);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata information on an assessment type
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataGetAsync(String apiVersion, String assessmentMetadataName, final ApiCallback<SecurityAssessmentMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsMetadataGetValidateBeforeCall(apiVersion, assessmentMetadataName, _callback);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsMetadataList
     * @param apiVersion API version for the operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Security/assessmentMetadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsMetadataListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsMetadataList(Async)");
        }

        return assessmentsMetadataListCall(apiVersion, _callback);

    }

    /**
     * 
     * Get metadata information on all assessment types
     * @param apiVersion API version for the operation (required)
     * @return SecurityAssessmentMetadataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityAssessmentMetadataList assessmentsMetadataList(String apiVersion) throws ApiException {
        ApiResponse<SecurityAssessmentMetadataList> localVarResp = assessmentsMetadataListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata information on all assessment types
     * @param apiVersion API version for the operation (required)
     * @return ApiResponse&lt;SecurityAssessmentMetadataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityAssessmentMetadataList> assessmentsMetadataListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = assessmentsMetadataListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata information on all assessment types
     * @param apiVersion API version for the operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataListAsync(String apiVersion, final ApiCallback<SecurityAssessmentMetadataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsMetadataListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsMetadataSubscriptionCreate
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param assessmentMetadata AssessmentMetadata object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataSubscriptionCreateCall(String apiVersion, String assessmentMetadataName, String subscriptionId, SecurityAssessmentMetadata assessmentMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assessmentMetadata;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}"
            .replace("{" + "assessmentMetadataName" + "}", localVarApiClient.escapeString(assessmentMetadataName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsMetadataSubscriptionCreateValidateBeforeCall(String apiVersion, String assessmentMetadataName, String subscriptionId, SecurityAssessmentMetadata assessmentMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsMetadataSubscriptionCreate(Async)");
        }

        // verify the required parameter 'assessmentMetadataName' is set
        if (assessmentMetadataName == null) {
            throw new ApiException("Missing the required parameter 'assessmentMetadataName' when calling assessmentsMetadataSubscriptionCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsMetadataSubscriptionCreate(Async)");
        }

        // verify the required parameter 'assessmentMetadata' is set
        if (assessmentMetadata == null) {
            throw new ApiException("Missing the required parameter 'assessmentMetadata' when calling assessmentsMetadataSubscriptionCreate(Async)");
        }

        return assessmentsMetadataSubscriptionCreateCall(apiVersion, assessmentMetadataName, subscriptionId, assessmentMetadata, _callback);

    }

    /**
     * 
     * Create metadata information on an assessment type in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param assessmentMetadata AssessmentMetadata object (required)
     * @return SecurityAssessmentMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityAssessmentMetadata assessmentsMetadataSubscriptionCreate(String apiVersion, String assessmentMetadataName, String subscriptionId, SecurityAssessmentMetadata assessmentMetadata) throws ApiException {
        ApiResponse<SecurityAssessmentMetadata> localVarResp = assessmentsMetadataSubscriptionCreateWithHttpInfo(apiVersion, assessmentMetadataName, subscriptionId, assessmentMetadata);
        return localVarResp.getData();
    }

    /**
     * 
     * Create metadata information on an assessment type in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param assessmentMetadata AssessmentMetadata object (required)
     * @return ApiResponse&lt;SecurityAssessmentMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityAssessmentMetadata> assessmentsMetadataSubscriptionCreateWithHttpInfo(String apiVersion, String assessmentMetadataName, String subscriptionId, SecurityAssessmentMetadata assessmentMetadata) throws ApiException {
        okhttp3.Call localVarCall = assessmentsMetadataSubscriptionCreateValidateBeforeCall(apiVersion, assessmentMetadataName, subscriptionId, assessmentMetadata, null);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create metadata information on an assessment type in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param assessmentMetadata AssessmentMetadata object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataSubscriptionCreateAsync(String apiVersion, String assessmentMetadataName, String subscriptionId, SecurityAssessmentMetadata assessmentMetadata, final ApiCallback<SecurityAssessmentMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsMetadataSubscriptionCreateValidateBeforeCall(apiVersion, assessmentMetadataName, subscriptionId, assessmentMetadata, _callback);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsMetadataSubscriptionDelete
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataSubscriptionDeleteCall(String apiVersion, String assessmentMetadataName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}"
            .replace("{" + "assessmentMetadataName" + "}", localVarApiClient.escapeString(assessmentMetadataName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsMetadataSubscriptionDeleteValidateBeforeCall(String apiVersion, String assessmentMetadataName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsMetadataSubscriptionDelete(Async)");
        }

        // verify the required parameter 'assessmentMetadataName' is set
        if (assessmentMetadataName == null) {
            throw new ApiException("Missing the required parameter 'assessmentMetadataName' when calling assessmentsMetadataSubscriptionDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsMetadataSubscriptionDelete(Async)");
        }

        return assessmentsMetadataSubscriptionDeleteCall(apiVersion, assessmentMetadataName, subscriptionId, _callback);

    }

    /**
     * 
     * Delete metadata information on an assessment type in a specific subscription, will cause the deletion of all the assessments of that type in that subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void assessmentsMetadataSubscriptionDelete(String apiVersion, String assessmentMetadataName, String subscriptionId) throws ApiException {
        assessmentsMetadataSubscriptionDeleteWithHttpInfo(apiVersion, assessmentMetadataName, subscriptionId);
    }

    /**
     * 
     * Delete metadata information on an assessment type in a specific subscription, will cause the deletion of all the assessments of that type in that subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assessmentsMetadataSubscriptionDeleteWithHttpInfo(String apiVersion, String assessmentMetadataName, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = assessmentsMetadataSubscriptionDeleteValidateBeforeCall(apiVersion, assessmentMetadataName, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete metadata information on an assessment type in a specific subscription, will cause the deletion of all the assessments of that type in that subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataSubscriptionDeleteAsync(String apiVersion, String assessmentMetadataName, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsMetadataSubscriptionDeleteValidateBeforeCall(apiVersion, assessmentMetadataName, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsMetadataSubscriptionGet
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataSubscriptionGetCall(String apiVersion, String assessmentMetadataName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}"
            .replace("{" + "assessmentMetadataName" + "}", localVarApiClient.escapeString(assessmentMetadataName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsMetadataSubscriptionGetValidateBeforeCall(String apiVersion, String assessmentMetadataName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsMetadataSubscriptionGet(Async)");
        }

        // verify the required parameter 'assessmentMetadataName' is set
        if (assessmentMetadataName == null) {
            throw new ApiException("Missing the required parameter 'assessmentMetadataName' when calling assessmentsMetadataSubscriptionGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsMetadataSubscriptionGet(Async)");
        }

        return assessmentsMetadataSubscriptionGetCall(apiVersion, assessmentMetadataName, subscriptionId, _callback);

    }

    /**
     * 
     * Get metadata information on an assessment type in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @return SecurityAssessmentMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityAssessmentMetadata assessmentsMetadataSubscriptionGet(String apiVersion, String assessmentMetadataName, String subscriptionId) throws ApiException {
        ApiResponse<SecurityAssessmentMetadata> localVarResp = assessmentsMetadataSubscriptionGetWithHttpInfo(apiVersion, assessmentMetadataName, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata information on an assessment type in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @return ApiResponse&lt;SecurityAssessmentMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityAssessmentMetadata> assessmentsMetadataSubscriptionGetWithHttpInfo(String apiVersion, String assessmentMetadataName, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = assessmentsMetadataSubscriptionGetValidateBeforeCall(apiVersion, assessmentMetadataName, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata information on an assessment type in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataSubscriptionGetAsync(String apiVersion, String assessmentMetadataName, String subscriptionId, final ApiCallback<SecurityAssessmentMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsMetadataSubscriptionGetValidateBeforeCall(apiVersion, assessmentMetadataName, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsMetadataSubscriptionList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataSubscriptionListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsMetadataSubscriptionListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsMetadataSubscriptionList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsMetadataSubscriptionList(Async)");
        }

        return assessmentsMetadataSubscriptionListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get metadata information on all assessment types in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @return SecurityAssessmentMetadataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityAssessmentMetadataList assessmentsMetadataSubscriptionList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SecurityAssessmentMetadataList> localVarResp = assessmentsMetadataSubscriptionListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata information on all assessment types in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @return ApiResponse&lt;SecurityAssessmentMetadataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityAssessmentMetadataList> assessmentsMetadataSubscriptionListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = assessmentsMetadataSubscriptionListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata information on all assessment types in a specific subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsMetadataSubscriptionListAsync(String apiVersion, String subscriptionId, final ApiCallback<SecurityAssessmentMetadataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsMetadataSubscriptionListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SecurityAssessmentMetadataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
