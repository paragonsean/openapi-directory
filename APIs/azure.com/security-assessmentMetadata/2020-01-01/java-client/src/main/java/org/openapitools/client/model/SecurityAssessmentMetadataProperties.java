/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SecurityAssessmentMetadataPartnerData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes properties of an assessment metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:56.032712-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecurityAssessmentMetadataProperties {
  /**
   * BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
   */
  @JsonAdapter(AssessmentTypeEnum.Adapter.class)
  public enum AssessmentTypeEnum {
    BUILT_IN("BuiltIn"),
    
    CUSTOM_POLICY("CustomPolicy"),
    
    CUSTOMER_MANAGED("CustomerManaged"),
    
    VERIFIED_PARTNER("VerifiedPartner");

    private String value;

    AssessmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssessmentTypeEnum fromValue(String value) {
      for (AssessmentTypeEnum b : AssessmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssessmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssessmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssessmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssessmentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssessmentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSESSMENT_TYPE = "assessmentType";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_TYPE)
  private AssessmentTypeEnum assessmentType;

  /**
   * The category of resource that is at risk when the assessment is unhealthy
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    COMPUTE("Compute"),
    
    NETWORKING("Networking"),
    
    DATA("Data"),
    
    IDENTITY_AND_ACCESS("IdentityAndAccess"),
    
    IO_T("IoT");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<CategoryEnum> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * The implementation effort required to remediate this assessment
   */
  @JsonAdapter(ImplementationEffortEnum.Adapter.class)
  public enum ImplementationEffortEnum {
    LOW("Low"),
    
    MODERATE("Moderate"),
    
    HIGH("High");

    private String value;

    ImplementationEffortEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImplementationEffortEnum fromValue(String value) {
      for (ImplementationEffortEnum b : ImplementationEffortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImplementationEffortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImplementationEffortEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImplementationEffortEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImplementationEffortEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImplementationEffortEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPLEMENTATION_EFFORT = "implementationEffort";
  @SerializedName(SERIALIZED_NAME_IMPLEMENTATION_EFFORT)
  private ImplementationEffortEnum implementationEffort;

  public static final String SERIALIZED_NAME_PARTNER_DATA = "partnerData";
  @SerializedName(SERIALIZED_NAME_PARTNER_DATA)
  private SecurityAssessmentMetadataPartnerData partnerData;

  public static final String SERIALIZED_NAME_POLICY_DEFINITION_ID = "policyDefinitionId";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_ID)
  private String policyDefinitionId;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private Boolean preview;

  public static final String SERIALIZED_NAME_REMEDIATION_DESCRIPTION = "remediationDescription";
  @SerializedName(SERIALIZED_NAME_REMEDIATION_DESCRIPTION)
  private String remediationDescription;

  /**
   * The severity level of the assessment
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    LOW("Low"),
    
    MEDIUM("Medium"),
    
    HIGH("High");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * Threats impact of the assessment
   */
  @JsonAdapter(ThreatsEnum.Adapter.class)
  public enum ThreatsEnum {
    ACCOUNT_BREACH("accountBreach"),
    
    DATA_EXFILTRATION("dataExfiltration"),
    
    DATA_SPILLAGE("dataSpillage"),
    
    MALICIOUS_INSIDER("maliciousInsider"),
    
    ELEVATION_OF_PRIVILEGE("elevationOfPrivilege"),
    
    THREAT_RESISTANCE("threatResistance"),
    
    MISSING_COVERAGE("missingCoverage"),
    
    DENIAL_OF_SERVICE("denialOfService");

    private String value;

    ThreatsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThreatsEnum fromValue(String value) {
      for (ThreatsEnum b : ThreatsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThreatsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThreatsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThreatsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThreatsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThreatsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THREATS = "threats";
  @SerializedName(SERIALIZED_NAME_THREATS)
  private List<ThreatsEnum> threats = new ArrayList<>();

  /**
   * The user impact of the assessment
   */
  @JsonAdapter(UserImpactEnum.Adapter.class)
  public enum UserImpactEnum {
    LOW("Low"),
    
    MODERATE("Moderate"),
    
    HIGH("High");

    private String value;

    UserImpactEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserImpactEnum fromValue(String value) {
      for (UserImpactEnum b : UserImpactEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserImpactEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserImpactEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserImpactEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserImpactEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserImpactEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_IMPACT = "userImpact";
  @SerializedName(SERIALIZED_NAME_USER_IMPACT)
  private UserImpactEnum userImpact;

  public SecurityAssessmentMetadataProperties() {
  }

  public SecurityAssessmentMetadataProperties(
     String policyDefinitionId
  ) {
    this();
    this.policyDefinitionId = policyDefinitionId;
  }

  public SecurityAssessmentMetadataProperties assessmentType(AssessmentTypeEnum assessmentType) {
    this.assessmentType = assessmentType;
    return this;
  }

  /**
   * BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
   * @return assessmentType
   */
  @javax.annotation.Nonnull
  public AssessmentTypeEnum getAssessmentType() {
    return assessmentType;
  }

  public void setAssessmentType(AssessmentTypeEnum assessmentType) {
    this.assessmentType = assessmentType;
  }


  public SecurityAssessmentMetadataProperties category(List<CategoryEnum> category) {
    this.category = category;
    return this;
  }

  public SecurityAssessmentMetadataProperties addCategoryItem(CategoryEnum categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public List<CategoryEnum> getCategory() {
    return category;
  }

  public void setCategory(List<CategoryEnum> category) {
    this.category = category;
  }


  public SecurityAssessmentMetadataProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Human readable description of the assessment
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SecurityAssessmentMetadataProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User friendly display name of the assessment
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SecurityAssessmentMetadataProperties implementationEffort(ImplementationEffortEnum implementationEffort) {
    this.implementationEffort = implementationEffort;
    return this;
  }

  /**
   * The implementation effort required to remediate this assessment
   * @return implementationEffort
   */
  @javax.annotation.Nullable
  public ImplementationEffortEnum getImplementationEffort() {
    return implementationEffort;
  }

  public void setImplementationEffort(ImplementationEffortEnum implementationEffort) {
    this.implementationEffort = implementationEffort;
  }


  public SecurityAssessmentMetadataProperties partnerData(SecurityAssessmentMetadataPartnerData partnerData) {
    this.partnerData = partnerData;
    return this;
  }

  /**
   * Get partnerData
   * @return partnerData
   */
  @javax.annotation.Nullable
  public SecurityAssessmentMetadataPartnerData getPartnerData() {
    return partnerData;
  }

  public void setPartnerData(SecurityAssessmentMetadataPartnerData partnerData) {
    this.partnerData = partnerData;
  }


  /**
   * Azure resource ID of the policy definition that turns this assessment calculation on
   * @return policyDefinitionId
   */
  @javax.annotation.Nullable
  public String getPolicyDefinitionId() {
    return policyDefinitionId;
  }



  public SecurityAssessmentMetadataProperties preview(Boolean preview) {
    this.preview = preview;
    return this;
  }

  /**
   * True if this assessment is in preview release status
   * @return preview
   */
  @javax.annotation.Nullable
  public Boolean getPreview() {
    return preview;
  }

  public void setPreview(Boolean preview) {
    this.preview = preview;
  }


  public SecurityAssessmentMetadataProperties remediationDescription(String remediationDescription) {
    this.remediationDescription = remediationDescription;
    return this;
  }

  /**
   * Human readable description of what you should do to mitigate this security issue
   * @return remediationDescription
   */
  @javax.annotation.Nullable
  public String getRemediationDescription() {
    return remediationDescription;
  }

  public void setRemediationDescription(String remediationDescription) {
    this.remediationDescription = remediationDescription;
  }


  public SecurityAssessmentMetadataProperties severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The severity level of the assessment
   * @return severity
   */
  @javax.annotation.Nonnull
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public SecurityAssessmentMetadataProperties threats(List<ThreatsEnum> threats) {
    this.threats = threats;
    return this;
  }

  public SecurityAssessmentMetadataProperties addThreatsItem(ThreatsEnum threatsItem) {
    if (this.threats == null) {
      this.threats = new ArrayList<>();
    }
    this.threats.add(threatsItem);
    return this;
  }

  /**
   * Get threats
   * @return threats
   */
  @javax.annotation.Nullable
  public List<ThreatsEnum> getThreats() {
    return threats;
  }

  public void setThreats(List<ThreatsEnum> threats) {
    this.threats = threats;
  }


  public SecurityAssessmentMetadataProperties userImpact(UserImpactEnum userImpact) {
    this.userImpact = userImpact;
    return this;
  }

  /**
   * The user impact of the assessment
   * @return userImpact
   */
  @javax.annotation.Nullable
  public UserImpactEnum getUserImpact() {
    return userImpact;
  }

  public void setUserImpact(UserImpactEnum userImpact) {
    this.userImpact = userImpact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityAssessmentMetadataProperties securityAssessmentMetadataProperties = (SecurityAssessmentMetadataProperties) o;
    return Objects.equals(this.assessmentType, securityAssessmentMetadataProperties.assessmentType) &&
        Objects.equals(this.category, securityAssessmentMetadataProperties.category) &&
        Objects.equals(this.description, securityAssessmentMetadataProperties.description) &&
        Objects.equals(this.displayName, securityAssessmentMetadataProperties.displayName) &&
        Objects.equals(this.implementationEffort, securityAssessmentMetadataProperties.implementationEffort) &&
        Objects.equals(this.partnerData, securityAssessmentMetadataProperties.partnerData) &&
        Objects.equals(this.policyDefinitionId, securityAssessmentMetadataProperties.policyDefinitionId) &&
        Objects.equals(this.preview, securityAssessmentMetadataProperties.preview) &&
        Objects.equals(this.remediationDescription, securityAssessmentMetadataProperties.remediationDescription) &&
        Objects.equals(this.severity, securityAssessmentMetadataProperties.severity) &&
        Objects.equals(this.threats, securityAssessmentMetadataProperties.threats) &&
        Objects.equals(this.userImpact, securityAssessmentMetadataProperties.userImpact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentType, category, description, displayName, implementationEffort, partnerData, policyDefinitionId, preview, remediationDescription, severity, threats, userImpact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityAssessmentMetadataProperties {\n");
    sb.append("    assessmentType: ").append(toIndentedString(assessmentType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    implementationEffort: ").append(toIndentedString(implementationEffort)).append("\n");
    sb.append("    partnerData: ").append(toIndentedString(partnerData)).append("\n");
    sb.append("    policyDefinitionId: ").append(toIndentedString(policyDefinitionId)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    remediationDescription: ").append(toIndentedString(remediationDescription)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    threats: ").append(toIndentedString(threats)).append("\n");
    sb.append("    userImpact: ").append(toIndentedString(userImpact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentType");
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("implementationEffort");
    openapiFields.add("partnerData");
    openapiFields.add("policyDefinitionId");
    openapiFields.add("preview");
    openapiFields.add("remediationDescription");
    openapiFields.add("severity");
    openapiFields.add("threats");
    openapiFields.add("userImpact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assessmentType");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("severity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecurityAssessmentMetadataProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityAssessmentMetadataProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityAssessmentMetadataProperties is not found in the empty JSON string", SecurityAssessmentMetadataProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityAssessmentMetadataProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityAssessmentMetadataProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SecurityAssessmentMetadataProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("assessmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentType").toString()));
      }
      // validate the required field `assessmentType`
      AssessmentTypeEnum.validateJsonElement(jsonObj.get("assessmentType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull() && !jsonObj.get("category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("implementationEffort") != null && !jsonObj.get("implementationEffort").isJsonNull()) && !jsonObj.get("implementationEffort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `implementationEffort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("implementationEffort").toString()));
      }
      // validate the optional field `implementationEffort`
      if (jsonObj.get("implementationEffort") != null && !jsonObj.get("implementationEffort").isJsonNull()) {
        ImplementationEffortEnum.validateJsonElement(jsonObj.get("implementationEffort"));
      }
      // validate the optional field `partnerData`
      if (jsonObj.get("partnerData") != null && !jsonObj.get("partnerData").isJsonNull()) {
        SecurityAssessmentMetadataPartnerData.validateJsonElement(jsonObj.get("partnerData"));
      }
      if ((jsonObj.get("policyDefinitionId") != null && !jsonObj.get("policyDefinitionId").isJsonNull()) && !jsonObj.get("policyDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionId").toString()));
      }
      if ((jsonObj.get("remediationDescription") != null && !jsonObj.get("remediationDescription").isJsonNull()) && !jsonObj.get("remediationDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remediationDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remediationDescription").toString()));
      }
      if (!jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the required field `severity`
      SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("threats") != null && !jsonObj.get("threats").isJsonNull() && !jsonObj.get("threats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `threats` to be an array in the JSON string but got `%s`", jsonObj.get("threats").toString()));
      }
      if ((jsonObj.get("userImpact") != null && !jsonObj.get("userImpact").isJsonNull()) && !jsonObj.get("userImpact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userImpact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userImpact").toString()));
      }
      // validate the optional field `userImpact`
      if (jsonObj.get("userImpact") != null && !jsonObj.get("userImpact").isJsonNull()) {
        UserImpactEnum.validateJsonElement(jsonObj.get("userImpact"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityAssessmentMetadataProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityAssessmentMetadataProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityAssessmentMetadataProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityAssessmentMetadataProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityAssessmentMetadataProperties>() {
           @Override
           public void write(JsonWriter out, SecurityAssessmentMetadataProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityAssessmentMetadataProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecurityAssessmentMetadataProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecurityAssessmentMetadataProperties
   * @throws IOException if the JSON string is invalid with respect to SecurityAssessmentMetadataProperties
   */
  public static SecurityAssessmentMetadataProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityAssessmentMetadataProperties.class);
  }

  /**
   * Convert an instance of SecurityAssessmentMetadataProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

