/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssessmentsMetadataApi_H
#define OAI_OAIAssessmentsMetadataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssessmentsMetadata_List_default_response.h"
#include "OAISecurityAssessmentMetadata.h"
#include "OAISecurityAssessmentMetadataList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssessmentsMetadataApi : public QObject {
    Q_OBJECT

public:
    OAIAssessmentsMetadataApi(const int timeOut = 0);
    ~OAIAssessmentsMetadataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  assessment_metadata_name QString [required]
    */
    virtual void assessmentsMetadataGet(const QString &api_version, const QString &assessment_metadata_name);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void assessmentsMetadataList(const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  assessment_metadata_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  assessment_metadata OAISecurityAssessmentMetadata [required]
    */
    virtual void assessmentsMetadataSubscriptionCreate(const QString &api_version, const QString &assessment_metadata_name, const QString &subscription_id, const OAISecurityAssessmentMetadata &assessment_metadata);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  assessment_metadata_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void assessmentsMetadataSubscriptionDelete(const QString &api_version, const QString &assessment_metadata_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  assessment_metadata_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void assessmentsMetadataSubscriptionGet(const QString &api_version, const QString &assessment_metadata_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void assessmentsMetadataSubscriptionList(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assessmentsMetadataGetCallback(OAIHttpRequestWorker *worker);
    void assessmentsMetadataListCallback(OAIHttpRequestWorker *worker);
    void assessmentsMetadataSubscriptionCreateCallback(OAIHttpRequestWorker *worker);
    void assessmentsMetadataSubscriptionDeleteCallback(OAIHttpRequestWorker *worker);
    void assessmentsMetadataSubscriptionGetCallback(OAIHttpRequestWorker *worker);
    void assessmentsMetadataSubscriptionListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assessmentsMetadataGetSignal(OAISecurityAssessmentMetadata summary);
    void assessmentsMetadataListSignal(OAISecurityAssessmentMetadataList summary);
    void assessmentsMetadataSubscriptionCreateSignal(OAISecurityAssessmentMetadata summary);
    void assessmentsMetadataSubscriptionDeleteSignal();
    void assessmentsMetadataSubscriptionGetSignal(OAISecurityAssessmentMetadata summary);
    void assessmentsMetadataSubscriptionListSignal(OAISecurityAssessmentMetadataList summary);


    void assessmentsMetadataGetSignalFull(OAIHttpRequestWorker *worker, OAISecurityAssessmentMetadata summary);
    void assessmentsMetadataListSignalFull(OAIHttpRequestWorker *worker, OAISecurityAssessmentMetadataList summary);
    void assessmentsMetadataSubscriptionCreateSignalFull(OAIHttpRequestWorker *worker, OAISecurityAssessmentMetadata summary);
    void assessmentsMetadataSubscriptionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void assessmentsMetadataSubscriptionGetSignalFull(OAIHttpRequestWorker *worker, OAISecurityAssessmentMetadata summary);
    void assessmentsMetadataSubscriptionListSignalFull(OAIHttpRequestWorker *worker, OAISecurityAssessmentMetadataList summary);

    Q_DECL_DEPRECATED_X("Use assessmentsMetadataGetSignalError() instead")
    void assessmentsMetadataGetSignalE(OAISecurityAssessmentMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataGetSignalError(OAISecurityAssessmentMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataListSignalError() instead")
    void assessmentsMetadataListSignalE(OAISecurityAssessmentMetadataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataListSignalError(OAISecurityAssessmentMetadataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataSubscriptionCreateSignalError() instead")
    void assessmentsMetadataSubscriptionCreateSignalE(OAISecurityAssessmentMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataSubscriptionCreateSignalError(OAISecurityAssessmentMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataSubscriptionDeleteSignalError() instead")
    void assessmentsMetadataSubscriptionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataSubscriptionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataSubscriptionGetSignalError() instead")
    void assessmentsMetadataSubscriptionGetSignalE(OAISecurityAssessmentMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataSubscriptionGetSignalError(OAISecurityAssessmentMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataSubscriptionListSignalError() instead")
    void assessmentsMetadataSubscriptionListSignalE(OAISecurityAssessmentMetadataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataSubscriptionListSignalError(OAISecurityAssessmentMetadataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assessmentsMetadataGetSignalErrorFull() instead")
    void assessmentsMetadataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataListSignalErrorFull() instead")
    void assessmentsMetadataListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataSubscriptionCreateSignalErrorFull() instead")
    void assessmentsMetadataSubscriptionCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataSubscriptionCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataSubscriptionDeleteSignalErrorFull() instead")
    void assessmentsMetadataSubscriptionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataSubscriptionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataSubscriptionGetSignalErrorFull() instead")
    void assessmentsMetadataSubscriptionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataSubscriptionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsMetadataSubscriptionListSignalErrorFull() instead")
    void assessmentsMetadataSubscriptionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsMetadataSubscriptionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
