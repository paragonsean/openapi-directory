# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecurityAssessmentMetadataPartnerData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partner_name: str=None, product_name: str=None, secret: str=None):
        """SecurityAssessmentMetadataPartnerData - a model defined in OpenAPI

        :param partner_name: The partner_name of this SecurityAssessmentMetadataPartnerData.
        :param product_name: The product_name of this SecurityAssessmentMetadataPartnerData.
        :param secret: The secret of this SecurityAssessmentMetadataPartnerData.
        """
        self.openapi_types = {
            'partner_name': str,
            'product_name': str,
            'secret': str
        }

        self.attribute_map = {
            'partner_name': 'partnerName',
            'product_name': 'productName',
            'secret': 'secret'
        }

        self._partner_name = partner_name
        self._product_name = product_name
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityAssessmentMetadataPartnerData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityAssessmentMetadataPartnerData of this SecurityAssessmentMetadataPartnerData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partner_name(self):
        """Gets the partner_name of this SecurityAssessmentMetadataPartnerData.

        Name of the company of the partner

        :return: The partner_name of this SecurityAssessmentMetadataPartnerData.
        :rtype: str
        """
        return self._partner_name

    @partner_name.setter
    def partner_name(self, partner_name):
        """Sets the partner_name of this SecurityAssessmentMetadataPartnerData.

        Name of the company of the partner

        :param partner_name: The partner_name of this SecurityAssessmentMetadataPartnerData.
        :type partner_name: str
        """

        self._partner_name = partner_name

    @property
    def product_name(self):
        """Gets the product_name of this SecurityAssessmentMetadataPartnerData.

        Name of the product of the partner that created the assessment

        :return: The product_name of this SecurityAssessmentMetadataPartnerData.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this SecurityAssessmentMetadataPartnerData.

        Name of the product of the partner that created the assessment

        :param product_name: The product_name of this SecurityAssessmentMetadataPartnerData.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def secret(self):
        """Gets the secret of this SecurityAssessmentMetadataPartnerData.

        Secret to authenticate the partner and verify it created the assessment - write only

        :return: The secret of this SecurityAssessmentMetadataPartnerData.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this SecurityAssessmentMetadataPartnerData.

        Secret to authenticate the partner and verify it created the assessment - write only

        :param secret: The secret of this SecurityAssessmentMetadataPartnerData.
        :type secret: str
        """

        self._secret = secret
