# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_parameter_validation_set import ActivityParameterValidationSet
from openapi_server import util


class ActivityParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, is_dynamic: bool=None, is_mandatory: bool=None, name: str=None, position: int=None, type: str=None, validation_set: List[ActivityParameterValidationSet]=None, value_from_pipeline: bool=None, value_from_pipeline_by_property_name: bool=None, value_from_remaining_arguments: bool=None):
        """ActivityParameter - a model defined in OpenAPI

        :param description: The description of this ActivityParameter.
        :param is_dynamic: The is_dynamic of this ActivityParameter.
        :param is_mandatory: The is_mandatory of this ActivityParameter.
        :param name: The name of this ActivityParameter.
        :param position: The position of this ActivityParameter.
        :param type: The type of this ActivityParameter.
        :param validation_set: The validation_set of this ActivityParameter.
        :param value_from_pipeline: The value_from_pipeline of this ActivityParameter.
        :param value_from_pipeline_by_property_name: The value_from_pipeline_by_property_name of this ActivityParameter.
        :param value_from_remaining_arguments: The value_from_remaining_arguments of this ActivityParameter.
        """
        self.openapi_types = {
            'description': str,
            'is_dynamic': bool,
            'is_mandatory': bool,
            'name': str,
            'position': int,
            'type': str,
            'validation_set': List[ActivityParameterValidationSet],
            'value_from_pipeline': bool,
            'value_from_pipeline_by_property_name': bool,
            'value_from_remaining_arguments': bool
        }

        self.attribute_map = {
            'description': 'description',
            'is_dynamic': 'isDynamic',
            'is_mandatory': 'isMandatory',
            'name': 'name',
            'position': 'position',
            'type': 'type',
            'validation_set': 'validationSet',
            'value_from_pipeline': 'valueFromPipeline',
            'value_from_pipeline_by_property_name': 'valueFromPipelineByPropertyName',
            'value_from_remaining_arguments': 'valueFromRemainingArguments'
        }

        self._description = description
        self._is_dynamic = is_dynamic
        self._is_mandatory = is_mandatory
        self._name = name
        self._position = position
        self._type = type
        self._validation_set = validation_set
        self._value_from_pipeline = value_from_pipeline
        self._value_from_pipeline_by_property_name = value_from_pipeline_by_property_name
        self._value_from_remaining_arguments = value_from_remaining_arguments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityParameter of this ActivityParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ActivityParameter.

        Gets or sets the description of the activity parameter.

        :return: The description of this ActivityParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityParameter.

        Gets or sets the description of the activity parameter.

        :param description: The description of this ActivityParameter.
        :type description: str
        """

        self._description = description

    @property
    def is_dynamic(self):
        """Gets the is_dynamic of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the parameter is dynamic.

        :return: The is_dynamic of this ActivityParameter.
        :rtype: bool
        """
        return self._is_dynamic

    @is_dynamic.setter
    def is_dynamic(self, is_dynamic):
        """Sets the is_dynamic of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the parameter is dynamic.

        :param is_dynamic: The is_dynamic of this ActivityParameter.
        :type is_dynamic: bool
        """

        self._is_dynamic = is_dynamic

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.

        :return: The is_mandatory of this ActivityParameter.
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.

        :param is_mandatory: The is_mandatory of this ActivityParameter.
        :type is_mandatory: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def name(self):
        """Gets the name of this ActivityParameter.

        Gets or sets the name of the activity parameter.

        :return: The name of this ActivityParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityParameter.

        Gets or sets the name of the activity parameter.

        :param name: The name of this ActivityParameter.
        :type name: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this ActivityParameter.

        Gets or sets the position of the activity parameter.

        :return: The position of this ActivityParameter.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ActivityParameter.

        Gets or sets the position of the activity parameter.

        :param position: The position of this ActivityParameter.
        :type position: int
        """

        self._position = position

    @property
    def type(self):
        """Gets the type of this ActivityParameter.

        Gets or sets the type of the activity parameter.

        :return: The type of this ActivityParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityParameter.

        Gets or sets the type of the activity parameter.

        :param type: The type of this ActivityParameter.
        :type type: str
        """

        self._type = type

    @property
    def validation_set(self):
        """Gets the validation_set of this ActivityParameter.

        Gets or sets the validation set of activity parameter.

        :return: The validation_set of this ActivityParameter.
        :rtype: List[ActivityParameterValidationSet]
        """
        return self._validation_set

    @validation_set.setter
    def validation_set(self, validation_set):
        """Sets the validation_set of this ActivityParameter.

        Gets or sets the validation set of activity parameter.

        :param validation_set: The validation_set of this ActivityParameter.
        :type validation_set: List[ActivityParameterValidationSet]
        """

        self._validation_set = validation_set

    @property
    def value_from_pipeline(self):
        """Gets the value_from_pipeline of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.

        :return: The value_from_pipeline of this ActivityParameter.
        :rtype: bool
        """
        return self._value_from_pipeline

    @value_from_pipeline.setter
    def value_from_pipeline(self, value_from_pipeline):
        """Sets the value_from_pipeline of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.

        :param value_from_pipeline: The value_from_pipeline of this ActivityParameter.
        :type value_from_pipeline: bool
        """

        self._value_from_pipeline = value_from_pipeline

    @property
    def value_from_pipeline_by_property_name(self):
        """Gets the value_from_pipeline_by_property_name of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. 

        :return: The value_from_pipeline_by_property_name of this ActivityParameter.
        :rtype: bool
        """
        return self._value_from_pipeline_by_property_name

    @value_from_pipeline_by_property_name.setter
    def value_from_pipeline_by_property_name(self, value_from_pipeline_by_property_name):
        """Sets the value_from_pipeline_by_property_name of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. 

        :param value_from_pipeline_by_property_name: The value_from_pipeline_by_property_name of this ActivityParameter.
        :type value_from_pipeline_by_property_name: bool
        """

        self._value_from_pipeline_by_property_name = value_from_pipeline_by_property_name

    @property
    def value_from_remaining_arguments(self):
        """Gets the value_from_remaining_arguments of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.

        :return: The value_from_remaining_arguments of this ActivityParameter.
        :rtype: bool
        """
        return self._value_from_remaining_arguments

    @value_from_remaining_arguments.setter
    def value_from_remaining_arguments(self, value_from_remaining_arguments):
        """Sets the value_from_remaining_arguments of this ActivityParameter.

        Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.

        :param value_from_remaining_arguments: The value_from_remaining_arguments of this ActivityParameter.
        :type value_from_remaining_arguments: bool
        """

        self._value_from_remaining_arguments = value_from_remaining_arguments
