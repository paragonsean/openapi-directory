/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModuleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModuleProperties::OAIModuleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModuleProperties::OAIModuleProperties() {
    this->initializeModel();
}

OAIModuleProperties::~OAIModuleProperties() {}

void OAIModuleProperties::initializeModel() {

    m_activity_count_isSet = false;
    m_activity_count_isValid = false;

    m_content_link_isSet = false;
    m_content_link_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_is_composite_isSet = false;
    m_is_composite_isValid = false;

    m_is_global_isSet = false;
    m_is_global_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIModuleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModuleProperties::fromJsonObject(QJsonObject json) {

    m_activity_count_isValid = ::OpenAPI::fromJsonValue(m_activity_count, json[QString("activityCount")]);
    m_activity_count_isSet = !json[QString("activityCount")].isNull() && m_activity_count_isValid;

    m_content_link_isValid = ::OpenAPI::fromJsonValue(m_content_link, json[QString("contentLink")]);
    m_content_link_isSet = !json[QString("contentLink")].isNull() && m_content_link_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_is_composite_isValid = ::OpenAPI::fromJsonValue(m_is_composite, json[QString("isComposite")]);
    m_is_composite_isSet = !json[QString("isComposite")].isNull() && m_is_composite_isValid;

    m_is_global_isValid = ::OpenAPI::fromJsonValue(m_is_global, json[QString("isGlobal")]);
    m_is_global_isSet = !json[QString("isGlobal")].isNull() && m_is_global_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIModuleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModuleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_count_isSet) {
        obj.insert(QString("activityCount"), ::OpenAPI::toJsonValue(m_activity_count));
    }
    if (m_content_link.isSet()) {
        obj.insert(QString("contentLink"), ::OpenAPI::toJsonValue(m_content_link));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_is_composite_isSet) {
        obj.insert(QString("isComposite"), ::OpenAPI::toJsonValue(m_is_composite));
    }
    if (m_is_global_isSet) {
        obj.insert(QString("isGlobal"), ::OpenAPI::toJsonValue(m_is_global));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAIModuleProperties::getActivityCount() const {
    return m_activity_count;
}
void OAIModuleProperties::setActivityCount(const qint32 &activity_count) {
    m_activity_count = activity_count;
    m_activity_count_isSet = true;
}

bool OAIModuleProperties::is_activity_count_Set() const{
    return m_activity_count_isSet;
}

bool OAIModuleProperties::is_activity_count_Valid() const{
    return m_activity_count_isValid;
}

OAIContentLink OAIModuleProperties::getContentLink() const {
    return m_content_link;
}
void OAIModuleProperties::setContentLink(const OAIContentLink &content_link) {
    m_content_link = content_link;
    m_content_link_isSet = true;
}

bool OAIModuleProperties::is_content_link_Set() const{
    return m_content_link_isSet;
}

bool OAIModuleProperties::is_content_link_Valid() const{
    return m_content_link_isValid;
}

QDateTime OAIModuleProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIModuleProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIModuleProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIModuleProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIModuleProperties::getDescription() const {
    return m_description;
}
void OAIModuleProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIModuleProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIModuleProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIModuleErrorInfo OAIModuleProperties::getError() const {
    return m_error;
}
void OAIModuleProperties::setError(const OAIModuleErrorInfo &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIModuleProperties::is_error_Set() const{
    return m_error_isSet;
}

bool OAIModuleProperties::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIModuleProperties::isIsComposite() const {
    return m_is_composite;
}
void OAIModuleProperties::setIsComposite(const bool &is_composite) {
    m_is_composite = is_composite;
    m_is_composite_isSet = true;
}

bool OAIModuleProperties::is_is_composite_Set() const{
    return m_is_composite_isSet;
}

bool OAIModuleProperties::is_is_composite_Valid() const{
    return m_is_composite_isValid;
}

bool OAIModuleProperties::isIsGlobal() const {
    return m_is_global;
}
void OAIModuleProperties::setIsGlobal(const bool &is_global) {
    m_is_global = is_global;
    m_is_global_isSet = true;
}

bool OAIModuleProperties::is_is_global_Set() const{
    return m_is_global_isSet;
}

bool OAIModuleProperties::is_is_global_Valid() const{
    return m_is_global_isValid;
}

QDateTime OAIModuleProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIModuleProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIModuleProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIModuleProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIModuleProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIModuleProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIModuleProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIModuleProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint64 OAIModuleProperties::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIModuleProperties::setSizeInBytes(const qint64 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIModuleProperties::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIModuleProperties::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

QString OAIModuleProperties::getVersion() const {
    return m_version;
}
void OAIModuleProperties::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIModuleProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAIModuleProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIModuleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_composite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModuleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
