/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityParameter::OAIActivityParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityParameter::OAIActivityParameter() {
    this->initializeModel();
}

OAIActivityParameter::~OAIActivityParameter() {}

void OAIActivityParameter::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_dynamic_isSet = false;
    m_is_dynamic_isValid = false;

    m_is_mandatory_isSet = false;
    m_is_mandatory_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_validation_set_isSet = false;
    m_validation_set_isValid = false;

    m_value_from_pipeline_isSet = false;
    m_value_from_pipeline_isValid = false;

    m_value_from_pipeline_by_property_name_isSet = false;
    m_value_from_pipeline_by_property_name_isValid = false;

    m_value_from_remaining_arguments_isSet = false;
    m_value_from_remaining_arguments_isValid = false;
}

void OAIActivityParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityParameter::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_dynamic_isValid = ::OpenAPI::fromJsonValue(m_is_dynamic, json[QString("isDynamic")]);
    m_is_dynamic_isSet = !json[QString("isDynamic")].isNull() && m_is_dynamic_isValid;

    m_is_mandatory_isValid = ::OpenAPI::fromJsonValue(m_is_mandatory, json[QString("isMandatory")]);
    m_is_mandatory_isSet = !json[QString("isMandatory")].isNull() && m_is_mandatory_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_validation_set_isValid = ::OpenAPI::fromJsonValue(m_validation_set, json[QString("validationSet")]);
    m_validation_set_isSet = !json[QString("validationSet")].isNull() && m_validation_set_isValid;

    m_value_from_pipeline_isValid = ::OpenAPI::fromJsonValue(m_value_from_pipeline, json[QString("valueFromPipeline")]);
    m_value_from_pipeline_isSet = !json[QString("valueFromPipeline")].isNull() && m_value_from_pipeline_isValid;

    m_value_from_pipeline_by_property_name_isValid = ::OpenAPI::fromJsonValue(m_value_from_pipeline_by_property_name, json[QString("valueFromPipelineByPropertyName")]);
    m_value_from_pipeline_by_property_name_isSet = !json[QString("valueFromPipelineByPropertyName")].isNull() && m_value_from_pipeline_by_property_name_isValid;

    m_value_from_remaining_arguments_isValid = ::OpenAPI::fromJsonValue(m_value_from_remaining_arguments, json[QString("valueFromRemainingArguments")]);
    m_value_from_remaining_arguments_isSet = !json[QString("valueFromRemainingArguments")].isNull() && m_value_from_remaining_arguments_isValid;
}

QString OAIActivityParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_dynamic_isSet) {
        obj.insert(QString("isDynamic"), ::OpenAPI::toJsonValue(m_is_dynamic));
    }
    if (m_is_mandatory_isSet) {
        obj.insert(QString("isMandatory"), ::OpenAPI::toJsonValue(m_is_mandatory));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_validation_set.size() > 0) {
        obj.insert(QString("validationSet"), ::OpenAPI::toJsonValue(m_validation_set));
    }
    if (m_value_from_pipeline_isSet) {
        obj.insert(QString("valueFromPipeline"), ::OpenAPI::toJsonValue(m_value_from_pipeline));
    }
    if (m_value_from_pipeline_by_property_name_isSet) {
        obj.insert(QString("valueFromPipelineByPropertyName"), ::OpenAPI::toJsonValue(m_value_from_pipeline_by_property_name));
    }
    if (m_value_from_remaining_arguments_isSet) {
        obj.insert(QString("valueFromRemainingArguments"), ::OpenAPI::toJsonValue(m_value_from_remaining_arguments));
    }
    return obj;
}

QString OAIActivityParameter::getDescription() const {
    return m_description;
}
void OAIActivityParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActivityParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActivityParameter::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIActivityParameter::isIsDynamic() const {
    return m_is_dynamic;
}
void OAIActivityParameter::setIsDynamic(const bool &is_dynamic) {
    m_is_dynamic = is_dynamic;
    m_is_dynamic_isSet = true;
}

bool OAIActivityParameter::is_is_dynamic_Set() const{
    return m_is_dynamic_isSet;
}

bool OAIActivityParameter::is_is_dynamic_Valid() const{
    return m_is_dynamic_isValid;
}

bool OAIActivityParameter::isIsMandatory() const {
    return m_is_mandatory;
}
void OAIActivityParameter::setIsMandatory(const bool &is_mandatory) {
    m_is_mandatory = is_mandatory;
    m_is_mandatory_isSet = true;
}

bool OAIActivityParameter::is_is_mandatory_Set() const{
    return m_is_mandatory_isSet;
}

bool OAIActivityParameter::is_is_mandatory_Valid() const{
    return m_is_mandatory_isValid;
}

QString OAIActivityParameter::getName() const {
    return m_name;
}
void OAIActivityParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActivityParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActivityParameter::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIActivityParameter::getPosition() const {
    return m_position;
}
void OAIActivityParameter::setPosition(const qint64 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIActivityParameter::is_position_Set() const{
    return m_position_isSet;
}

bool OAIActivityParameter::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIActivityParameter::getType() const {
    return m_type;
}
void OAIActivityParameter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActivityParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActivityParameter::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIActivityParameterValidationSet> OAIActivityParameter::getValidationSet() const {
    return m_validation_set;
}
void OAIActivityParameter::setValidationSet(const QList<OAIActivityParameterValidationSet> &validation_set) {
    m_validation_set = validation_set;
    m_validation_set_isSet = true;
}

bool OAIActivityParameter::is_validation_set_Set() const{
    return m_validation_set_isSet;
}

bool OAIActivityParameter::is_validation_set_Valid() const{
    return m_validation_set_isValid;
}

bool OAIActivityParameter::isValueFromPipeline() const {
    return m_value_from_pipeline;
}
void OAIActivityParameter::setValueFromPipeline(const bool &value_from_pipeline) {
    m_value_from_pipeline = value_from_pipeline;
    m_value_from_pipeline_isSet = true;
}

bool OAIActivityParameter::is_value_from_pipeline_Set() const{
    return m_value_from_pipeline_isSet;
}

bool OAIActivityParameter::is_value_from_pipeline_Valid() const{
    return m_value_from_pipeline_isValid;
}

bool OAIActivityParameter::isValueFromPipelineByPropertyName() const {
    return m_value_from_pipeline_by_property_name;
}
void OAIActivityParameter::setValueFromPipelineByPropertyName(const bool &value_from_pipeline_by_property_name) {
    m_value_from_pipeline_by_property_name = value_from_pipeline_by_property_name;
    m_value_from_pipeline_by_property_name_isSet = true;
}

bool OAIActivityParameter::is_value_from_pipeline_by_property_name_Set() const{
    return m_value_from_pipeline_by_property_name_isSet;
}

bool OAIActivityParameter::is_value_from_pipeline_by_property_name_Valid() const{
    return m_value_from_pipeline_by_property_name_isValid;
}

bool OAIActivityParameter::isValueFromRemainingArguments() const {
    return m_value_from_remaining_arguments;
}
void OAIActivityParameter::setValueFromRemainingArguments(const bool &value_from_remaining_arguments) {
    m_value_from_remaining_arguments = value_from_remaining_arguments;
    m_value_from_remaining_arguments_isSet = true;
}

bool OAIActivityParameter::is_value_from_remaining_arguments_Set() const{
    return m_value_from_remaining_arguments_isSet;
}

bool OAIActivityParameter::is_value_from_remaining_arguments_Valid() const{
    return m_value_from_remaining_arguments_isValid;
}

bool OAIActivityParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dynamic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_from_pipeline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_from_pipeline_by_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_from_remaining_arguments_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
