/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityParameterValidationSet from './ActivityParameterValidationSet';

/**
 * The ActivityParameter model module.
 * @module model/ActivityParameter
 * @version 2015-10-31
 */
class ActivityParameter {
    /**
     * Constructs a new <code>ActivityParameter</code>.
     * Definition of the activity parameter.
     * @alias module:model/ActivityParameter
     */
    constructor() { 
        
        ActivityParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivityParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityParameter} obj Optional instance to populate.
     * @return {module:model/ActivityParameter} The populated <code>ActivityParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityParameter();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isDynamic')) {
                obj['isDynamic'] = ApiClient.convertToType(data['isDynamic'], 'Boolean');
            }
            if (data.hasOwnProperty('isMandatory')) {
                obj['isMandatory'] = ApiClient.convertToType(data['isMandatory'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validationSet')) {
                obj['validationSet'] = ApiClient.convertToType(data['validationSet'], [ActivityParameterValidationSet]);
            }
            if (data.hasOwnProperty('valueFromPipeline')) {
                obj['valueFromPipeline'] = ApiClient.convertToType(data['valueFromPipeline'], 'Boolean');
            }
            if (data.hasOwnProperty('valueFromPipelineByPropertyName')) {
                obj['valueFromPipelineByPropertyName'] = ApiClient.convertToType(data['valueFromPipelineByPropertyName'], 'Boolean');
            }
            if (data.hasOwnProperty('valueFromRemainingArguments')) {
                obj['valueFromRemainingArguments'] = ApiClient.convertToType(data['valueFromRemainingArguments'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['validationSet']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validationSet'])) {
                throw new Error("Expected the field `validationSet` to be an array in the JSON data but got " + data['validationSet']);
            }
            // validate the optional field `validationSet` (array)
            for (const item of data['validationSet']) {
                ActivityParameterValidationSet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Gets or sets the description of the activity parameter.
 * @member {String} description
 */
ActivityParameter.prototype['description'] = undefined;

/**
 * Gets or sets a Boolean value that indicates true if the parameter is dynamic.
 * @member {Boolean} isDynamic
 */
ActivityParameter.prototype['isDynamic'] = undefined;

/**
 * Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.
 * @member {Boolean} isMandatory
 */
ActivityParameter.prototype['isMandatory'] = undefined;

/**
 * Gets or sets the name of the activity parameter.
 * @member {String} name
 */
ActivityParameter.prototype['name'] = undefined;

/**
 * Gets or sets the position of the activity parameter.
 * @member {Number} position
 */
ActivityParameter.prototype['position'] = undefined;

/**
 * Gets or sets the type of the activity parameter.
 * @member {String} type
 */
ActivityParameter.prototype['type'] = undefined;

/**
 * Gets or sets the validation set of activity parameter.
 * @member {Array.<module:model/ActivityParameterValidationSet>} validationSet
 */
ActivityParameter.prototype['validationSet'] = undefined;

/**
 * Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.
 * @member {Boolean} valueFromPipeline
 */
ActivityParameter.prototype['valueFromPipeline'] = undefined;

/**
 * Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. 
 * @member {Boolean} valueFromPipelineByPropertyName
 */
ActivityParameter.prototype['valueFromPipelineByPropertyName'] = undefined;

/**
 * Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.
 * @member {Boolean} valueFromRemainingArguments
 */
ActivityParameter.prototype['valueFromRemainingArguments'] = undefined;






export default ActivityParameter;

