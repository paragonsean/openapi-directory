/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncActivityStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncActivityStatus::OAISyncActivityStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncActivityStatus::OAISyncActivityStatus() {
    this->initializeModel();
}

OAISyncActivityStatus::~OAISyncActivityStatus() {}

void OAISyncActivityStatus::initializeModel() {

    m_applied_bytes_isSet = false;
    m_applied_bytes_isValid = false;

    m_applied_item_count_isSet = false;
    m_applied_item_count_isValid = false;

    m_per_item_error_count_isSet = false;
    m_per_item_error_count_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_bytes_isSet = false;
    m_total_bytes_isValid = false;

    m_total_item_count_isSet = false;
    m_total_item_count_isValid = false;
}

void OAISyncActivityStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncActivityStatus::fromJsonObject(QJsonObject json) {

    m_applied_bytes_isValid = ::OpenAPI::fromJsonValue(m_applied_bytes, json[QString("appliedBytes")]);
    m_applied_bytes_isSet = !json[QString("appliedBytes")].isNull() && m_applied_bytes_isValid;

    m_applied_item_count_isValid = ::OpenAPI::fromJsonValue(m_applied_item_count, json[QString("appliedItemCount")]);
    m_applied_item_count_isSet = !json[QString("appliedItemCount")].isNull() && m_applied_item_count_isValid;

    m_per_item_error_count_isValid = ::OpenAPI::fromJsonValue(m_per_item_error_count, json[QString("perItemErrorCount")]);
    m_per_item_error_count_isSet = !json[QString("perItemErrorCount")].isNull() && m_per_item_error_count_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_bytes, json[QString("totalBytes")]);
    m_total_bytes_isSet = !json[QString("totalBytes")].isNull() && m_total_bytes_isValid;

    m_total_item_count_isValid = ::OpenAPI::fromJsonValue(m_total_item_count, json[QString("totalItemCount")]);
    m_total_item_count_isSet = !json[QString("totalItemCount")].isNull() && m_total_item_count_isValid;
}

QString OAISyncActivityStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncActivityStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_bytes_isSet) {
        obj.insert(QString("appliedBytes"), ::OpenAPI::toJsonValue(m_applied_bytes));
    }
    if (m_applied_item_count_isSet) {
        obj.insert(QString("appliedItemCount"), ::OpenAPI::toJsonValue(m_applied_item_count));
    }
    if (m_per_item_error_count_isSet) {
        obj.insert(QString("perItemErrorCount"), ::OpenAPI::toJsonValue(m_per_item_error_count));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_bytes_isSet) {
        obj.insert(QString("totalBytes"), ::OpenAPI::toJsonValue(m_total_bytes));
    }
    if (m_total_item_count_isSet) {
        obj.insert(QString("totalItemCount"), ::OpenAPI::toJsonValue(m_total_item_count));
    }
    return obj;
}

qint64 OAISyncActivityStatus::getAppliedBytes() const {
    return m_applied_bytes;
}
void OAISyncActivityStatus::setAppliedBytes(const qint64 &applied_bytes) {
    m_applied_bytes = applied_bytes;
    m_applied_bytes_isSet = true;
}

bool OAISyncActivityStatus::is_applied_bytes_Set() const{
    return m_applied_bytes_isSet;
}

bool OAISyncActivityStatus::is_applied_bytes_Valid() const{
    return m_applied_bytes_isValid;
}

qint64 OAISyncActivityStatus::getAppliedItemCount() const {
    return m_applied_item_count;
}
void OAISyncActivityStatus::setAppliedItemCount(const qint64 &applied_item_count) {
    m_applied_item_count = applied_item_count;
    m_applied_item_count_isSet = true;
}

bool OAISyncActivityStatus::is_applied_item_count_Set() const{
    return m_applied_item_count_isSet;
}

bool OAISyncActivityStatus::is_applied_item_count_Valid() const{
    return m_applied_item_count_isValid;
}

qint64 OAISyncActivityStatus::getPerItemErrorCount() const {
    return m_per_item_error_count;
}
void OAISyncActivityStatus::setPerItemErrorCount(const qint64 &per_item_error_count) {
    m_per_item_error_count = per_item_error_count;
    m_per_item_error_count_isSet = true;
}

bool OAISyncActivityStatus::is_per_item_error_count_Set() const{
    return m_per_item_error_count_isSet;
}

bool OAISyncActivityStatus::is_per_item_error_count_Valid() const{
    return m_per_item_error_count_isValid;
}

QDateTime OAISyncActivityStatus::getTimestamp() const {
    return m_timestamp;
}
void OAISyncActivityStatus::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISyncActivityStatus::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISyncActivityStatus::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint64 OAISyncActivityStatus::getTotalBytes() const {
    return m_total_bytes;
}
void OAISyncActivityStatus::setTotalBytes(const qint64 &total_bytes) {
    m_total_bytes = total_bytes;
    m_total_bytes_isSet = true;
}

bool OAISyncActivityStatus::is_total_bytes_Set() const{
    return m_total_bytes_isSet;
}

bool OAISyncActivityStatus::is_total_bytes_Valid() const{
    return m_total_bytes_isValid;
}

qint64 OAISyncActivityStatus::getTotalItemCount() const {
    return m_total_item_count;
}
void OAISyncActivityStatus::setTotalItemCount(const qint64 &total_item_count) {
    m_total_item_count = total_item_count;
    m_total_item_count_isSet = true;
}

bool OAISyncActivityStatus::is_total_item_count_Set() const{
    return m_total_item_count_isSet;
}

bool OAISyncActivityStatus::is_total_item_count_Valid() const{
    return m_total_item_count_isValid;
}

bool OAISyncActivityStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_item_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncActivityStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
