/*
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FilesNotSyncingError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sync Session status object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:13.703960-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SyncSessionStatus {
  public static final String SERIALIZED_NAME_FILES_NOT_SYNCING_ERRORS = "filesNotSyncingErrors";
  @SerializedName(SERIALIZED_NAME_FILES_NOT_SYNCING_ERRORS)
  private List<FilesNotSyncingError> filesNotSyncingErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_SYNC_PER_ITEM_ERROR_COUNT = "lastSyncPerItemErrorCount";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_PER_ITEM_ERROR_COUNT)
  private Long lastSyncPerItemErrorCount;

  public static final String SERIALIZED_NAME_LAST_SYNC_RESULT = "lastSyncResult";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_RESULT)
  private Integer lastSyncResult;

  public static final String SERIALIZED_NAME_LAST_SYNC_SUCCESS_TIMESTAMP = "lastSyncSuccessTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_SUCCESS_TIMESTAMP)
  private OffsetDateTime lastSyncSuccessTimestamp;

  public static final String SERIALIZED_NAME_LAST_SYNC_TIMESTAMP = "lastSyncTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_TIMESTAMP)
  private OffsetDateTime lastSyncTimestamp;

  public static final String SERIALIZED_NAME_PERSISTENT_FILES_NOT_SYNCING_COUNT = "persistentFilesNotSyncingCount";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_FILES_NOT_SYNCING_COUNT)
  private Long persistentFilesNotSyncingCount;

  public static final String SERIALIZED_NAME_TRANSIENT_FILES_NOT_SYNCING_COUNT = "transientFilesNotSyncingCount";
  @SerializedName(SERIALIZED_NAME_TRANSIENT_FILES_NOT_SYNCING_COUNT)
  private Long transientFilesNotSyncingCount;

  public SyncSessionStatus() {
  }

  public SyncSessionStatus(
     List<FilesNotSyncingError> filesNotSyncingErrors, 
     Long lastSyncPerItemErrorCount, 
     Integer lastSyncResult, 
     OffsetDateTime lastSyncSuccessTimestamp, 
     OffsetDateTime lastSyncTimestamp, 
     Long persistentFilesNotSyncingCount, 
     Long transientFilesNotSyncingCount
  ) {
    this();
    this.filesNotSyncingErrors = filesNotSyncingErrors;
    this.lastSyncPerItemErrorCount = lastSyncPerItemErrorCount;
    this.lastSyncResult = lastSyncResult;
    this.lastSyncSuccessTimestamp = lastSyncSuccessTimestamp;
    this.lastSyncTimestamp = lastSyncTimestamp;
    this.persistentFilesNotSyncingCount = persistentFilesNotSyncingCount;
    this.transientFilesNotSyncingCount = transientFilesNotSyncingCount;
  }

  /**
   * Array of per-item errors coming from the last sync session. Reserved for future use.
   * @return filesNotSyncingErrors
   */
  @javax.annotation.Nullable
  public List<FilesNotSyncingError> getFilesNotSyncingErrors() {
    return filesNotSyncingErrors;
  }



  /**
   * Last sync per item error count.
   * @return lastSyncPerItemErrorCount
   */
  @javax.annotation.Nullable
  public Long getLastSyncPerItemErrorCount() {
    return lastSyncPerItemErrorCount;
  }



  /**
   * Last sync result (HResult)
   * @return lastSyncResult
   */
  @javax.annotation.Nullable
  public Integer getLastSyncResult() {
    return lastSyncResult;
  }



  /**
   * Last sync success timestamp
   * @return lastSyncSuccessTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSyncSuccessTimestamp() {
    return lastSyncSuccessTimestamp;
  }



  /**
   * Last sync timestamp
   * @return lastSyncTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSyncTimestamp() {
    return lastSyncTimestamp;
  }



  /**
   * Count of persistent files not syncing. Reserved for future use.
   * @return persistentFilesNotSyncingCount
   */
  @javax.annotation.Nullable
  public Long getPersistentFilesNotSyncingCount() {
    return persistentFilesNotSyncingCount;
  }



  /**
   * Count of transient files not syncing. Reserved for future use.
   * @return transientFilesNotSyncingCount
   */
  @javax.annotation.Nullable
  public Long getTransientFilesNotSyncingCount() {
    return transientFilesNotSyncingCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncSessionStatus syncSessionStatus = (SyncSessionStatus) o;
    return Objects.equals(this.filesNotSyncingErrors, syncSessionStatus.filesNotSyncingErrors) &&
        Objects.equals(this.lastSyncPerItemErrorCount, syncSessionStatus.lastSyncPerItemErrorCount) &&
        Objects.equals(this.lastSyncResult, syncSessionStatus.lastSyncResult) &&
        Objects.equals(this.lastSyncSuccessTimestamp, syncSessionStatus.lastSyncSuccessTimestamp) &&
        Objects.equals(this.lastSyncTimestamp, syncSessionStatus.lastSyncTimestamp) &&
        Objects.equals(this.persistentFilesNotSyncingCount, syncSessionStatus.persistentFilesNotSyncingCount) &&
        Objects.equals(this.transientFilesNotSyncingCount, syncSessionStatus.transientFilesNotSyncingCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filesNotSyncingErrors, lastSyncPerItemErrorCount, lastSyncResult, lastSyncSuccessTimestamp, lastSyncTimestamp, persistentFilesNotSyncingCount, transientFilesNotSyncingCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncSessionStatus {\n");
    sb.append("    filesNotSyncingErrors: ").append(toIndentedString(filesNotSyncingErrors)).append("\n");
    sb.append("    lastSyncPerItemErrorCount: ").append(toIndentedString(lastSyncPerItemErrorCount)).append("\n");
    sb.append("    lastSyncResult: ").append(toIndentedString(lastSyncResult)).append("\n");
    sb.append("    lastSyncSuccessTimestamp: ").append(toIndentedString(lastSyncSuccessTimestamp)).append("\n");
    sb.append("    lastSyncTimestamp: ").append(toIndentedString(lastSyncTimestamp)).append("\n");
    sb.append("    persistentFilesNotSyncingCount: ").append(toIndentedString(persistentFilesNotSyncingCount)).append("\n");
    sb.append("    transientFilesNotSyncingCount: ").append(toIndentedString(transientFilesNotSyncingCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filesNotSyncingErrors");
    openapiFields.add("lastSyncPerItemErrorCount");
    openapiFields.add("lastSyncResult");
    openapiFields.add("lastSyncSuccessTimestamp");
    openapiFields.add("lastSyncTimestamp");
    openapiFields.add("persistentFilesNotSyncingCount");
    openapiFields.add("transientFilesNotSyncingCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SyncSessionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncSessionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncSessionStatus is not found in the empty JSON string", SyncSessionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SyncSessionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncSessionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("filesNotSyncingErrors") != null && !jsonObj.get("filesNotSyncingErrors").isJsonNull()) {
        JsonArray jsonArrayfilesNotSyncingErrors = jsonObj.getAsJsonArray("filesNotSyncingErrors");
        if (jsonArrayfilesNotSyncingErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filesNotSyncingErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filesNotSyncingErrors` to be an array in the JSON string but got `%s`", jsonObj.get("filesNotSyncingErrors").toString()));
          }

          // validate the optional field `filesNotSyncingErrors` (array)
          for (int i = 0; i < jsonArrayfilesNotSyncingErrors.size(); i++) {
            FilesNotSyncingError.validateJsonElement(jsonArrayfilesNotSyncingErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncSessionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncSessionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncSessionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncSessionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncSessionStatus>() {
           @Override
           public void write(JsonWriter out, SyncSessionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncSessionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SyncSessionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SyncSessionStatus
   * @throws IOException if the JSON string is invalid with respect to SyncSessionStatus
   */
  public static SyncSessionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncSessionStatus.class);
  }

  /**
   * Convert an instance of SyncSessionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

