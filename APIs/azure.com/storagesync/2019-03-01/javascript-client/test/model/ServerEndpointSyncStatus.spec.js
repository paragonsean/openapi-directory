/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MicrosoftStorageSync);
  }
}(this, function(expect, MicrosoftStorageSync) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServerEndpointSyncStatus', function() {
    it('should create an instance of ServerEndpointSyncStatus', function() {
      // uncomment below and update the code to test ServerEndpointSyncStatus
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be.a(MicrosoftStorageSync.ServerEndpointSyncStatus);
    });

    it('should have the property combinedHealth (base name: "combinedHealth")', function() {
      // uncomment below and update the code to test the property combinedHealth
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property downloadActivity (base name: "downloadActivity")', function() {
      // uncomment below and update the code to test the property downloadActivity
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property downloadHealth (base name: "downloadHealth")', function() {
      // uncomment below and update the code to test the property downloadHealth
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property downloadStatus (base name: "downloadStatus")', function() {
      // uncomment below and update the code to test the property downloadStatus
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdatedTimestamp (base name: "lastUpdatedTimestamp")', function() {
      // uncomment below and update the code to test the property lastUpdatedTimestamp
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property offlineDataTransferStatus (base name: "offlineDataTransferStatus")', function() {
      // uncomment below and update the code to test the property offlineDataTransferStatus
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property syncActivity (base name: "syncActivity")', function() {
      // uncomment below and update the code to test the property syncActivity
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property totalPersistentFilesNotSyncingCount (base name: "totalPersistentFilesNotSyncingCount")', function() {
      // uncomment below and update the code to test the property totalPersistentFilesNotSyncingCount
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property uploadActivity (base name: "uploadActivity")', function() {
      // uncomment below and update the code to test the property uploadActivity
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property uploadHealth (base name: "uploadHealth")', function() {
      // uncomment below and update the code to test the property uploadHealth
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

    it('should have the property uploadStatus (base name: "uploadStatus")', function() {
      // uncomment below and update the code to test the property uploadStatus
      //var instance = new MicrosoftStorageSync.ServerEndpointSyncStatus();
      //expect(instance).to.be();
    });

  });

}));
