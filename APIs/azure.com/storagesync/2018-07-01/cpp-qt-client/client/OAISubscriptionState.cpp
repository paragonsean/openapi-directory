/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionState::OAISubscriptionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionState::OAISubscriptionState() {
    this->initializeModel();
}

OAISubscriptionState::~OAISubscriptionState() {}

void OAISubscriptionState::initializeModel() {

    m_istransitioning_isSet = false;
    m_istransitioning_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAISubscriptionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionState::fromJsonObject(QJsonObject json) {

    m_istransitioning_isValid = ::OpenAPI::fromJsonValue(m_istransitioning, json[QString("istransitioning")]);
    m_istransitioning_isSet = !json[QString("istransitioning")].isNull() && m_istransitioning_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAISubscriptionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionState::asJsonObject() const {
    QJsonObject obj;
    if (m_istransitioning_isSet) {
        obj.insert(QString("istransitioning"), ::OpenAPI::toJsonValue(m_istransitioning));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

bool OAISubscriptionState::isIstransitioning() const {
    return m_istransitioning;
}
void OAISubscriptionState::setIstransitioning(const bool &istransitioning) {
    m_istransitioning = istransitioning;
    m_istransitioning_isSet = true;
}

bool OAISubscriptionState::is_istransitioning_Set() const{
    return m_istransitioning_isSet;
}

bool OAISubscriptionState::is_istransitioning_Valid() const{
    return m_istransitioning_isValid;
}

OAIObject OAISubscriptionState::getProperties() const {
    return m_properties;
}
void OAISubscriptionState::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISubscriptionState::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISubscriptionState::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAISubscriptionState::getState() const {
    return m_state;
}
void OAISubscriptionState::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubscriptionState::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubscriptionState::is_state_Valid() const{
    return m_state_isValid;
}

bool OAISubscriptionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_istransitioning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
