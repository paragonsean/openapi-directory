# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_direction import OperationDirection
from openapi_server.models.workflow_status import WorkflowStatus
from openapi_server import util


class WorkflowProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_operation_id: str=None, last_step_name: str=None, operation: OperationDirection=None, status: WorkflowStatus=None, steps: str=None):
        """WorkflowProperties - a model defined in OpenAPI

        :param last_operation_id: The last_operation_id of this WorkflowProperties.
        :param last_step_name: The last_step_name of this WorkflowProperties.
        :param operation: The operation of this WorkflowProperties.
        :param status: The status of this WorkflowProperties.
        :param steps: The steps of this WorkflowProperties.
        """
        self.openapi_types = {
            'last_operation_id': str,
            'last_step_name': str,
            'operation': OperationDirection,
            'status': WorkflowStatus,
            'steps': str
        }

        self.attribute_map = {
            'last_operation_id': 'lastOperationId',
            'last_step_name': 'lastStepName',
            'operation': 'operation',
            'status': 'status',
            'steps': 'steps'
        }

        self._last_operation_id = last_operation_id
        self._last_step_name = last_step_name
        self._operation = operation
        self._status = status
        self._steps = steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowProperties of this WorkflowProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_operation_id(self):
        """Gets the last_operation_id of this WorkflowProperties.

        workflow last operation identifier.

        :return: The last_operation_id of this WorkflowProperties.
        :rtype: str
        """
        return self._last_operation_id

    @last_operation_id.setter
    def last_operation_id(self, last_operation_id):
        """Sets the last_operation_id of this WorkflowProperties.

        workflow last operation identifier.

        :param last_operation_id: The last_operation_id of this WorkflowProperties.
        :type last_operation_id: str
        """

        self._last_operation_id = last_operation_id

    @property
    def last_step_name(self):
        """Gets the last_step_name of this WorkflowProperties.

        last step name

        :return: The last_step_name of this WorkflowProperties.
        :rtype: str
        """
        return self._last_step_name

    @last_step_name.setter
    def last_step_name(self, last_step_name):
        """Sets the last_step_name of this WorkflowProperties.

        last step name

        :param last_step_name: The last_step_name of this WorkflowProperties.
        :type last_step_name: str
        """

        self._last_step_name = last_step_name

    @property
    def operation(self):
        """Gets the operation of this WorkflowProperties.


        :return: The operation of this WorkflowProperties.
        :rtype: OperationDirection
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this WorkflowProperties.


        :param operation: The operation of this WorkflowProperties.
        :type operation: OperationDirection
        """

        self._operation = operation

    @property
    def status(self):
        """Gets the status of this WorkflowProperties.


        :return: The status of this WorkflowProperties.
        :rtype: WorkflowStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowProperties.


        :param status: The status of this WorkflowProperties.
        :type status: WorkflowStatus
        """

        self._status = status

    @property
    def steps(self):
        """Gets the steps of this WorkflowProperties.

        workflow steps

        :return: The steps of this WorkflowProperties.
        :rtype: str
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this WorkflowProperties.

        workflow steps

        :param steps: The steps of this WorkflowProperties.
        :type steps: str
        """

        self._steps = steps
