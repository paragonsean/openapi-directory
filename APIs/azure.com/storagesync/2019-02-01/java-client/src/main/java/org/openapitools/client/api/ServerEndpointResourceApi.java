/*
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RecallActionParameters;
import org.openapitools.client.model.ServerEndpoint;
import org.openapitools.client.model.ServerEndpointArray;
import org.openapitools.client.model.ServerEndpointCreateParameters;
import org.openapitools.client.model.ServerEndpointUpdateParameters;
import org.openapitools.client.model.StorageSyncError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServerEndpointResourceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServerEndpointResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServerEndpointResourceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serverEndpointsCreate
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Body of Server Endpoint object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsCreateCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "syncGroupName" + "}", localVarApiClient.escapeString(syncGroupName.toString()))
            .replace("{" + "serverEndpointName" + "}", localVarApiClient.escapeString(serverEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverEndpointsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverEndpointsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverEndpointsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverEndpointsCreate(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsCreate(Async)");
        }

        // verify the required parameter 'syncGroupName' is set
        if (syncGroupName == null) {
            throw new ApiException("Missing the required parameter 'syncGroupName' when calling serverEndpointsCreate(Async)");
        }

        // verify the required parameter 'serverEndpointName' is set
        if (serverEndpointName == null) {
            throw new ApiException("Missing the required parameter 'serverEndpointName' when calling serverEndpointsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling serverEndpointsCreate(Async)");
        }

        return serverEndpointsCreateCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, _callback);

    }

    /**
     * 
     * Create a new ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Body of Server Endpoint object. (required)
     * @return ServerEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServerEndpoint serverEndpointsCreate(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointCreateParameters parameters) throws ApiException {
        ApiResponse<ServerEndpoint> localVarResp = serverEndpointsCreateWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Body of Server Endpoint object. (required)
     * @return ApiResponse&lt;ServerEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerEndpoint> serverEndpointsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = serverEndpointsCreateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, null);
        Type localVarReturnType = new TypeToken<ServerEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Body of Server Endpoint object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsCreateAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointCreateParameters parameters, final ApiCallback<ServerEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverEndpointsCreateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServerEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverEndpointsDelete
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsDeleteCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "syncGroupName" + "}", localVarApiClient.escapeString(syncGroupName.toString()))
            .replace("{" + "serverEndpointName" + "}", localVarApiClient.escapeString(serverEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverEndpointsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverEndpointsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverEndpointsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverEndpointsDelete(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsDelete(Async)");
        }

        // verify the required parameter 'syncGroupName' is set
        if (syncGroupName == null) {
            throw new ApiException("Missing the required parameter 'syncGroupName' when calling serverEndpointsDelete(Async)");
        }

        // verify the required parameter 'serverEndpointName' is set
        if (serverEndpointName == null) {
            throw new ApiException("Missing the required parameter 'serverEndpointName' when calling serverEndpointsDelete(Async)");
        }

        return serverEndpointsDeleteCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, _callback);

    }

    /**
     * 
     * Delete a given ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void serverEndpointsDelete(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName) throws ApiException {
        serverEndpointsDeleteWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName);
    }

    /**
     * 
     * Delete a given ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serverEndpointsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName) throws ApiException {
        okhttp3.Call localVarCall = serverEndpointsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a given ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsDeleteAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverEndpointsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverEndpointsGet
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsGetCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "syncGroupName" + "}", localVarApiClient.escapeString(syncGroupName.toString()))
            .replace("{" + "serverEndpointName" + "}", localVarApiClient.escapeString(serverEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverEndpointsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverEndpointsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverEndpointsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverEndpointsGet(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsGet(Async)");
        }

        // verify the required parameter 'syncGroupName' is set
        if (syncGroupName == null) {
            throw new ApiException("Missing the required parameter 'syncGroupName' when calling serverEndpointsGet(Async)");
        }

        // verify the required parameter 'serverEndpointName' is set
        if (serverEndpointName == null) {
            throw new ApiException("Missing the required parameter 'serverEndpointName' when calling serverEndpointsGet(Async)");
        }

        return serverEndpointsGetCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, _callback);

    }

    /**
     * 
     * Get a ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @return ServerEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServerEndpoint serverEndpointsGet(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName) throws ApiException {
        ApiResponse<ServerEndpoint> localVarResp = serverEndpointsGetWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @return ApiResponse&lt;ServerEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerEndpoint> serverEndpointsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName) throws ApiException {
        okhttp3.Call localVarCall = serverEndpointsGetValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, null);
        Type localVarReturnType = new TypeToken<ServerEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsGetAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, final ApiCallback<ServerEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverEndpointsGetValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, _callback);
        Type localVarReturnType = new TypeToken<ServerEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverEndpointsListBySyncGroup
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Server Endpoint resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsListBySyncGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "syncGroupName" + "}", localVarApiClient.escapeString(syncGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverEndpointsListBySyncGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverEndpointsListBySyncGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverEndpointsListBySyncGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverEndpointsListBySyncGroup(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsListBySyncGroup(Async)");
        }

        // verify the required parameter 'syncGroupName' is set
        if (syncGroupName == null) {
            throw new ApiException("Missing the required parameter 'syncGroupName' when calling serverEndpointsListBySyncGroup(Async)");
        }

        return serverEndpointsListBySyncGroupCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, _callback);

    }

    /**
     * 
     * Get a ServerEndpoint list.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @return ServerEndpointArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Server Endpoint resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServerEndpointArray serverEndpointsListBySyncGroup(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName) throws ApiException {
        ApiResponse<ServerEndpointArray> localVarResp = serverEndpointsListBySyncGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a ServerEndpoint list.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @return ApiResponse&lt;ServerEndpointArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Server Endpoint resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerEndpointArray> serverEndpointsListBySyncGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName) throws ApiException {
        okhttp3.Call localVarCall = serverEndpointsListBySyncGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, null);
        Type localVarReturnType = new TypeToken<ServerEndpointArray>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a ServerEndpoint list.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Server Endpoint resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsListBySyncGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, final ApiCallback<ServerEndpointArray> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverEndpointsListBySyncGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, _callback);
        Type localVarReturnType = new TypeToken<ServerEndpointArray>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverEndpointsRecallAction
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Body of Recall Action object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsRecallActionCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, RecallActionParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}/recallAction"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "syncGroupName" + "}", localVarApiClient.escapeString(syncGroupName.toString()))
            .replace("{" + "serverEndpointName" + "}", localVarApiClient.escapeString(serverEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverEndpointsRecallActionValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, RecallActionParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverEndpointsRecallAction(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverEndpointsRecallAction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverEndpointsRecallAction(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsRecallAction(Async)");
        }

        // verify the required parameter 'syncGroupName' is set
        if (syncGroupName == null) {
            throw new ApiException("Missing the required parameter 'syncGroupName' when calling serverEndpointsRecallAction(Async)");
        }

        // verify the required parameter 'serverEndpointName' is set
        if (serverEndpointName == null) {
            throw new ApiException("Missing the required parameter 'serverEndpointName' when calling serverEndpointsRecallAction(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling serverEndpointsRecallAction(Async)");
        }

        return serverEndpointsRecallActionCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, _callback);

    }

    /**
     * 
     * Recall a server endpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Body of Recall Action object. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void serverEndpointsRecallAction(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, RecallActionParameters parameters) throws ApiException {
        serverEndpointsRecallActionWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters);
    }

    /**
     * 
     * Recall a server endpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Body of Recall Action object. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serverEndpointsRecallActionWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, RecallActionParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = serverEndpointsRecallActionValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Recall a server endpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Body of Recall Action object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsRecallActionAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, RecallActionParameters parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverEndpointsRecallActionValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverEndpointsUpdate
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Any of the properties applicable in PUT request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsUpdateCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "syncGroupName" + "}", localVarApiClient.escapeString(syncGroupName.toString()))
            .replace("{" + "serverEndpointName" + "}", localVarApiClient.escapeString(serverEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverEndpointsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverEndpointsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverEndpointsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverEndpointsUpdate(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsUpdate(Async)");
        }

        // verify the required parameter 'syncGroupName' is set
        if (syncGroupName == null) {
            throw new ApiException("Missing the required parameter 'syncGroupName' when calling serverEndpointsUpdate(Async)");
        }

        // verify the required parameter 'serverEndpointName' is set
        if (serverEndpointName == null) {
            throw new ApiException("Missing the required parameter 'serverEndpointName' when calling serverEndpointsUpdate(Async)");
        }

        return serverEndpointsUpdateCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, _callback);

    }

    /**
     * 
     * Patch a given ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Any of the properties applicable in PUT request. (optional)
     * @return ServerEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServerEndpoint serverEndpointsUpdate(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointUpdateParameters parameters) throws ApiException {
        ApiResponse<ServerEndpoint> localVarResp = serverEndpointsUpdateWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch a given ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Any of the properties applicable in PUT request. (optional)
     * @return ApiResponse&lt;ServerEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerEndpoint> serverEndpointsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = serverEndpointsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, null);
        Type localVarReturnType = new TypeToken<ServerEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch a given ServerEndpoint.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param syncGroupName Name of Sync Group resource. (required)
     * @param serverEndpointName Name of Server Endpoint object. (required)
     * @param parameters Any of the properties applicable in PUT request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server Endpoint object </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverEndpointsUpdateAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String syncGroupName, String serverEndpointName, ServerEndpointUpdateParameters parameters, final ApiCallback<ServerEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverEndpointsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServerEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
