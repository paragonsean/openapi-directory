/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerEndpointResourceApi_H
#define OAI_OAIServerEndpointResourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRecallActionParameters.h"
#include "OAIServerEndpoint.h"
#include "OAIServerEndpointArray.h"
#include "OAIServerEndpointCreateParameters.h"
#include "OAIServerEndpointUpdateParameters.h"
#include "OAIStorageSyncError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerEndpointResourceApi : public QObject {
    Q_OBJECT

public:
    OAIServerEndpointResourceApi(const int timeOut = 0);
    ~OAIServerEndpointResourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  server_endpoint_name QString [required]
    * @param[in]  parameters OAIServerEndpointCreateParameters [required]
    */
    virtual void serverEndpointsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &server_endpoint_name, const OAIServerEndpointCreateParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  server_endpoint_name QString [required]
    */
    virtual void serverEndpointsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &server_endpoint_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  server_endpoint_name QString [required]
    */
    virtual void serverEndpointsGet(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &server_endpoint_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    */
    virtual void serverEndpointsListBySyncGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  server_endpoint_name QString [required]
    * @param[in]  parameters OAIRecallActionParameters [required]
    */
    virtual void serverEndpointsRecallAction(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &server_endpoint_name, const OAIRecallActionParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  server_endpoint_name QString [required]
    * @param[in]  parameters OAIServerEndpointUpdateParameters [optional]
    */
    virtual void serverEndpointsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &server_endpoint_name, const ::OpenAPI::OptionalParam<OAIServerEndpointUpdateParameters> &parameters = ::OpenAPI::OptionalParam<OAIServerEndpointUpdateParameters>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serverEndpointsCreateCallback(OAIHttpRequestWorker *worker);
    void serverEndpointsDeleteCallback(OAIHttpRequestWorker *worker);
    void serverEndpointsGetCallback(OAIHttpRequestWorker *worker);
    void serverEndpointsListBySyncGroupCallback(OAIHttpRequestWorker *worker);
    void serverEndpointsRecallActionCallback(OAIHttpRequestWorker *worker);
    void serverEndpointsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serverEndpointsCreateSignal(OAIServerEndpoint summary);
    void serverEndpointsDeleteSignal();
    void serverEndpointsGetSignal(OAIServerEndpoint summary);
    void serverEndpointsListBySyncGroupSignal(OAIServerEndpointArray summary);
    void serverEndpointsRecallActionSignal();
    void serverEndpointsUpdateSignal(OAIServerEndpoint summary);


    void serverEndpointsCreateSignalFull(OAIHttpRequestWorker *worker, OAIServerEndpoint summary);
    void serverEndpointsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serverEndpointsGetSignalFull(OAIHttpRequestWorker *worker, OAIServerEndpoint summary);
    void serverEndpointsListBySyncGroupSignalFull(OAIHttpRequestWorker *worker, OAIServerEndpointArray summary);
    void serverEndpointsRecallActionSignalFull(OAIHttpRequestWorker *worker);
    void serverEndpointsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerEndpoint summary);

    Q_DECL_DEPRECATED_X("Use serverEndpointsCreateSignalError() instead")
    void serverEndpointsCreateSignalE(OAIServerEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsCreateSignalError(OAIServerEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsDeleteSignalError() instead")
    void serverEndpointsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsGetSignalError() instead")
    void serverEndpointsGetSignalE(OAIServerEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsGetSignalError(OAIServerEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsListBySyncGroupSignalError() instead")
    void serverEndpointsListBySyncGroupSignalE(OAIServerEndpointArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsListBySyncGroupSignalError(OAIServerEndpointArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsRecallActionSignalError() instead")
    void serverEndpointsRecallActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsRecallActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsUpdateSignalError() instead")
    void serverEndpointsUpdateSignalE(OAIServerEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsUpdateSignalError(OAIServerEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serverEndpointsCreateSignalErrorFull() instead")
    void serverEndpointsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsDeleteSignalErrorFull() instead")
    void serverEndpointsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsGetSignalErrorFull() instead")
    void serverEndpointsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsListBySyncGroupSignalErrorFull() instead")
    void serverEndpointsListBySyncGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsListBySyncGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsRecallActionSignalErrorFull() instead")
    void serverEndpointsRecallActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsRecallActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverEndpointsUpdateSignalErrorFull() instead")
    void serverEndpointsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverEndpointsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
