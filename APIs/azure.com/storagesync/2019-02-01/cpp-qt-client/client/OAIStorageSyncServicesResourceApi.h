/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStorageSyncServicesResourceApi_H
#define OAI_OAIStorageSyncServicesResourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIStorageSyncError.h"
#include "OAIStorageSyncService.h"
#include "OAIStorageSyncServiceArray.h"
#include "OAIStorageSyncServiceCreateParameters.h"
#include "OAIStorageSyncServiceUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStorageSyncServicesResourceApi : public QObject {
    Q_OBJECT

public:
    OAIStorageSyncServicesResourceApi(const int timeOut = 0);
    ~OAIStorageSyncServicesResourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  parameters OAIStorageSyncServiceCreateParameters [required]
    */
    virtual void storageSyncServicesCreate(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const OAIStorageSyncServiceCreateParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    */
    virtual void storageSyncServicesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void storageSyncServicesGet(const QString &subscription_id, const QString &resource_group_name, const QString &storage_sync_service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void storageSyncServicesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void storageSyncServicesListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  parameters OAIStorageSyncServiceUpdateParameters [optional]
    */
    virtual void storageSyncServicesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const ::OpenAPI::OptionalParam<OAIStorageSyncServiceUpdateParameters> &parameters = ::OpenAPI::OptionalParam<OAIStorageSyncServiceUpdateParameters>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storageSyncServicesCreateCallback(OAIHttpRequestWorker *worker);
    void storageSyncServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void storageSyncServicesGetCallback(OAIHttpRequestWorker *worker);
    void storageSyncServicesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void storageSyncServicesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void storageSyncServicesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void storageSyncServicesCreateSignal(OAIStorageSyncService summary);
    void storageSyncServicesDeleteSignal();
    void storageSyncServicesGetSignal(OAIStorageSyncService summary);
    void storageSyncServicesListByResourceGroupSignal(OAIStorageSyncServiceArray summary);
    void storageSyncServicesListBySubscriptionSignal(OAIStorageSyncServiceArray summary);
    void storageSyncServicesUpdateSignal(OAIStorageSyncService summary);


    void storageSyncServicesCreateSignalFull(OAIHttpRequestWorker *worker, OAIStorageSyncService summary);
    void storageSyncServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void storageSyncServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIStorageSyncService summary);
    void storageSyncServicesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIStorageSyncServiceArray summary);
    void storageSyncServicesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIStorageSyncServiceArray summary);
    void storageSyncServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIStorageSyncService summary);

    Q_DECL_DEPRECATED_X("Use storageSyncServicesCreateSignalError() instead")
    void storageSyncServicesCreateSignalE(OAIStorageSyncService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesCreateSignalError(OAIStorageSyncService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesDeleteSignalError() instead")
    void storageSyncServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesGetSignalError() instead")
    void storageSyncServicesGetSignalE(OAIStorageSyncService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesGetSignalError(OAIStorageSyncService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesListByResourceGroupSignalError() instead")
    void storageSyncServicesListByResourceGroupSignalE(OAIStorageSyncServiceArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesListByResourceGroupSignalError(OAIStorageSyncServiceArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesListBySubscriptionSignalError() instead")
    void storageSyncServicesListBySubscriptionSignalE(OAIStorageSyncServiceArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesListBySubscriptionSignalError(OAIStorageSyncServiceArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesUpdateSignalError() instead")
    void storageSyncServicesUpdateSignalE(OAIStorageSyncService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesUpdateSignalError(OAIStorageSyncService summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use storageSyncServicesCreateSignalErrorFull() instead")
    void storageSyncServicesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesDeleteSignalErrorFull() instead")
    void storageSyncServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesGetSignalErrorFull() instead")
    void storageSyncServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesListByResourceGroupSignalErrorFull() instead")
    void storageSyncServicesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesListBySubscriptionSignalErrorFull() instead")
    void storageSyncServicesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageSyncServicesUpdateSignalErrorFull() instead")
    void storageSyncServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageSyncServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
