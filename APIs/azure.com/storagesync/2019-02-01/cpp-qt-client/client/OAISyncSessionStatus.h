/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISyncSessionStatus.h
 *
 * Sync Session status object.
 */

#ifndef OAISyncSessionStatus_H
#define OAISyncSessionStatus_H

#include <QJsonObject>

#include "OAIFilesNotSyncingError.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFilesNotSyncingError;

class OAISyncSessionStatus : public OAIObject {
public:
    OAISyncSessionStatus();
    OAISyncSessionStatus(QString json);
    ~OAISyncSessionStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIFilesNotSyncingError> getFilesNotSyncingErrors() const;
    void setFilesNotSyncingErrors(const QList<OAIFilesNotSyncingError> &files_not_syncing_errors);
    bool is_files_not_syncing_errors_Set() const;
    bool is_files_not_syncing_errors_Valid() const;

    qint64 getLastSyncPerItemErrorCount() const;
    void setLastSyncPerItemErrorCount(const qint64 &last_sync_per_item_error_count);
    bool is_last_sync_per_item_error_count_Set() const;
    bool is_last_sync_per_item_error_count_Valid() const;

    qint32 getLastSyncResult() const;
    void setLastSyncResult(const qint32 &last_sync_result);
    bool is_last_sync_result_Set() const;
    bool is_last_sync_result_Valid() const;

    QDateTime getLastSyncSuccessTimestamp() const;
    void setLastSyncSuccessTimestamp(const QDateTime &last_sync_success_timestamp);
    bool is_last_sync_success_timestamp_Set() const;
    bool is_last_sync_success_timestamp_Valid() const;

    QDateTime getLastSyncTimestamp() const;
    void setLastSyncTimestamp(const QDateTime &last_sync_timestamp);
    bool is_last_sync_timestamp_Set() const;
    bool is_last_sync_timestamp_Valid() const;

    qint64 getPersistentFilesNotSyncingCount() const;
    void setPersistentFilesNotSyncingCount(const qint64 &persistent_files_not_syncing_count);
    bool is_persistent_files_not_syncing_count_Set() const;
    bool is_persistent_files_not_syncing_count_Valid() const;

    qint64 getTransientFilesNotSyncingCount() const;
    void setTransientFilesNotSyncingCount(const qint64 &transient_files_not_syncing_count);
    bool is_transient_files_not_syncing_count_Set() const;
    bool is_transient_files_not_syncing_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIFilesNotSyncingError> m_files_not_syncing_errors;
    bool m_files_not_syncing_errors_isSet;
    bool m_files_not_syncing_errors_isValid;

    qint64 m_last_sync_per_item_error_count;
    bool m_last_sync_per_item_error_count_isSet;
    bool m_last_sync_per_item_error_count_isValid;

    qint32 m_last_sync_result;
    bool m_last_sync_result_isSet;
    bool m_last_sync_result_isValid;

    QDateTime m_last_sync_success_timestamp;
    bool m_last_sync_success_timestamp_isSet;
    bool m_last_sync_success_timestamp_isValid;

    QDateTime m_last_sync_timestamp;
    bool m_last_sync_timestamp_isSet;
    bool m_last_sync_timestamp_isValid;

    qint64 m_persistent_files_not_syncing_count;
    bool m_persistent_files_not_syncing_count_isSet;
    bool m_persistent_files_not_syncing_count_isValid;

    qint64 m_transient_files_not_syncing_count;
    bool m_transient_files_not_syncing_count_isSet;
    bool m_transient_files_not_syncing_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISyncSessionStatus)

#endif // OAISyncSessionStatus_H
