/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncSessionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncSessionStatus::OAISyncSessionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncSessionStatus::OAISyncSessionStatus() {
    this->initializeModel();
}

OAISyncSessionStatus::~OAISyncSessionStatus() {}

void OAISyncSessionStatus::initializeModel() {

    m_files_not_syncing_errors_isSet = false;
    m_files_not_syncing_errors_isValid = false;

    m_last_sync_per_item_error_count_isSet = false;
    m_last_sync_per_item_error_count_isValid = false;

    m_last_sync_result_isSet = false;
    m_last_sync_result_isValid = false;

    m_last_sync_success_timestamp_isSet = false;
    m_last_sync_success_timestamp_isValid = false;

    m_last_sync_timestamp_isSet = false;
    m_last_sync_timestamp_isValid = false;

    m_persistent_files_not_syncing_count_isSet = false;
    m_persistent_files_not_syncing_count_isValid = false;

    m_transient_files_not_syncing_count_isSet = false;
    m_transient_files_not_syncing_count_isValid = false;
}

void OAISyncSessionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncSessionStatus::fromJsonObject(QJsonObject json) {

    m_files_not_syncing_errors_isValid = ::OpenAPI::fromJsonValue(m_files_not_syncing_errors, json[QString("filesNotSyncingErrors")]);
    m_files_not_syncing_errors_isSet = !json[QString("filesNotSyncingErrors")].isNull() && m_files_not_syncing_errors_isValid;

    m_last_sync_per_item_error_count_isValid = ::OpenAPI::fromJsonValue(m_last_sync_per_item_error_count, json[QString("lastSyncPerItemErrorCount")]);
    m_last_sync_per_item_error_count_isSet = !json[QString("lastSyncPerItemErrorCount")].isNull() && m_last_sync_per_item_error_count_isValid;

    m_last_sync_result_isValid = ::OpenAPI::fromJsonValue(m_last_sync_result, json[QString("lastSyncResult")]);
    m_last_sync_result_isSet = !json[QString("lastSyncResult")].isNull() && m_last_sync_result_isValid;

    m_last_sync_success_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_sync_success_timestamp, json[QString("lastSyncSuccessTimestamp")]);
    m_last_sync_success_timestamp_isSet = !json[QString("lastSyncSuccessTimestamp")].isNull() && m_last_sync_success_timestamp_isValid;

    m_last_sync_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_sync_timestamp, json[QString("lastSyncTimestamp")]);
    m_last_sync_timestamp_isSet = !json[QString("lastSyncTimestamp")].isNull() && m_last_sync_timestamp_isValid;

    m_persistent_files_not_syncing_count_isValid = ::OpenAPI::fromJsonValue(m_persistent_files_not_syncing_count, json[QString("persistentFilesNotSyncingCount")]);
    m_persistent_files_not_syncing_count_isSet = !json[QString("persistentFilesNotSyncingCount")].isNull() && m_persistent_files_not_syncing_count_isValid;

    m_transient_files_not_syncing_count_isValid = ::OpenAPI::fromJsonValue(m_transient_files_not_syncing_count, json[QString("transientFilesNotSyncingCount")]);
    m_transient_files_not_syncing_count_isSet = !json[QString("transientFilesNotSyncingCount")].isNull() && m_transient_files_not_syncing_count_isValid;
}

QString OAISyncSessionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncSessionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_files_not_syncing_errors.size() > 0) {
        obj.insert(QString("filesNotSyncingErrors"), ::OpenAPI::toJsonValue(m_files_not_syncing_errors));
    }
    if (m_last_sync_per_item_error_count_isSet) {
        obj.insert(QString("lastSyncPerItemErrorCount"), ::OpenAPI::toJsonValue(m_last_sync_per_item_error_count));
    }
    if (m_last_sync_result_isSet) {
        obj.insert(QString("lastSyncResult"), ::OpenAPI::toJsonValue(m_last_sync_result));
    }
    if (m_last_sync_success_timestamp_isSet) {
        obj.insert(QString("lastSyncSuccessTimestamp"), ::OpenAPI::toJsonValue(m_last_sync_success_timestamp));
    }
    if (m_last_sync_timestamp_isSet) {
        obj.insert(QString("lastSyncTimestamp"), ::OpenAPI::toJsonValue(m_last_sync_timestamp));
    }
    if (m_persistent_files_not_syncing_count_isSet) {
        obj.insert(QString("persistentFilesNotSyncingCount"), ::OpenAPI::toJsonValue(m_persistent_files_not_syncing_count));
    }
    if (m_transient_files_not_syncing_count_isSet) {
        obj.insert(QString("transientFilesNotSyncingCount"), ::OpenAPI::toJsonValue(m_transient_files_not_syncing_count));
    }
    return obj;
}

QList<OAIFilesNotSyncingError> OAISyncSessionStatus::getFilesNotSyncingErrors() const {
    return m_files_not_syncing_errors;
}
void OAISyncSessionStatus::setFilesNotSyncingErrors(const QList<OAIFilesNotSyncingError> &files_not_syncing_errors) {
    m_files_not_syncing_errors = files_not_syncing_errors;
    m_files_not_syncing_errors_isSet = true;
}

bool OAISyncSessionStatus::is_files_not_syncing_errors_Set() const{
    return m_files_not_syncing_errors_isSet;
}

bool OAISyncSessionStatus::is_files_not_syncing_errors_Valid() const{
    return m_files_not_syncing_errors_isValid;
}

qint64 OAISyncSessionStatus::getLastSyncPerItemErrorCount() const {
    return m_last_sync_per_item_error_count;
}
void OAISyncSessionStatus::setLastSyncPerItemErrorCount(const qint64 &last_sync_per_item_error_count) {
    m_last_sync_per_item_error_count = last_sync_per_item_error_count;
    m_last_sync_per_item_error_count_isSet = true;
}

bool OAISyncSessionStatus::is_last_sync_per_item_error_count_Set() const{
    return m_last_sync_per_item_error_count_isSet;
}

bool OAISyncSessionStatus::is_last_sync_per_item_error_count_Valid() const{
    return m_last_sync_per_item_error_count_isValid;
}

qint32 OAISyncSessionStatus::getLastSyncResult() const {
    return m_last_sync_result;
}
void OAISyncSessionStatus::setLastSyncResult(const qint32 &last_sync_result) {
    m_last_sync_result = last_sync_result;
    m_last_sync_result_isSet = true;
}

bool OAISyncSessionStatus::is_last_sync_result_Set() const{
    return m_last_sync_result_isSet;
}

bool OAISyncSessionStatus::is_last_sync_result_Valid() const{
    return m_last_sync_result_isValid;
}

QDateTime OAISyncSessionStatus::getLastSyncSuccessTimestamp() const {
    return m_last_sync_success_timestamp;
}
void OAISyncSessionStatus::setLastSyncSuccessTimestamp(const QDateTime &last_sync_success_timestamp) {
    m_last_sync_success_timestamp = last_sync_success_timestamp;
    m_last_sync_success_timestamp_isSet = true;
}

bool OAISyncSessionStatus::is_last_sync_success_timestamp_Set() const{
    return m_last_sync_success_timestamp_isSet;
}

bool OAISyncSessionStatus::is_last_sync_success_timestamp_Valid() const{
    return m_last_sync_success_timestamp_isValid;
}

QDateTime OAISyncSessionStatus::getLastSyncTimestamp() const {
    return m_last_sync_timestamp;
}
void OAISyncSessionStatus::setLastSyncTimestamp(const QDateTime &last_sync_timestamp) {
    m_last_sync_timestamp = last_sync_timestamp;
    m_last_sync_timestamp_isSet = true;
}

bool OAISyncSessionStatus::is_last_sync_timestamp_Set() const{
    return m_last_sync_timestamp_isSet;
}

bool OAISyncSessionStatus::is_last_sync_timestamp_Valid() const{
    return m_last_sync_timestamp_isValid;
}

qint64 OAISyncSessionStatus::getPersistentFilesNotSyncingCount() const {
    return m_persistent_files_not_syncing_count;
}
void OAISyncSessionStatus::setPersistentFilesNotSyncingCount(const qint64 &persistent_files_not_syncing_count) {
    m_persistent_files_not_syncing_count = persistent_files_not_syncing_count;
    m_persistent_files_not_syncing_count_isSet = true;
}

bool OAISyncSessionStatus::is_persistent_files_not_syncing_count_Set() const{
    return m_persistent_files_not_syncing_count_isSet;
}

bool OAISyncSessionStatus::is_persistent_files_not_syncing_count_Valid() const{
    return m_persistent_files_not_syncing_count_isValid;
}

qint64 OAISyncSessionStatus::getTransientFilesNotSyncingCount() const {
    return m_transient_files_not_syncing_count;
}
void OAISyncSessionStatus::setTransientFilesNotSyncingCount(const qint64 &transient_files_not_syncing_count) {
    m_transient_files_not_syncing_count = transient_files_not_syncing_count;
    m_transient_files_not_syncing_count_isSet = true;
}

bool OAISyncSessionStatus::is_transient_files_not_syncing_count_Set() const{
    return m_transient_files_not_syncing_count_isSet;
}

bool OAISyncSessionStatus::is_transient_files_not_syncing_count_Valid() const{
    return m_transient_files_not_syncing_count_isValid;
}

bool OAISyncSessionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files_not_syncing_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_per_item_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_success_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_files_not_syncing_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transient_files_not_syncing_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncSessionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
