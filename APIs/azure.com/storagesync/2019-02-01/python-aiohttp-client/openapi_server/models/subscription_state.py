# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, istransitioning: bool=None, properties: object=None, state: str=None):
        """SubscriptionState - a model defined in OpenAPI

        :param istransitioning: The istransitioning of this SubscriptionState.
        :param properties: The properties of this SubscriptionState.
        :param state: The state of this SubscriptionState.
        """
        self.openapi_types = {
            'istransitioning': bool,
            'properties': object,
            'state': str
        }

        self.attribute_map = {
            'istransitioning': 'istransitioning',
            'properties': 'properties',
            'state': 'state'
        }

        self._istransitioning = istransitioning
        self._properties = properties
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionState of this SubscriptionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def istransitioning(self):
        """Gets the istransitioning of this SubscriptionState.

        Is Transitioning

        :return: The istransitioning of this SubscriptionState.
        :rtype: bool
        """
        return self._istransitioning

    @istransitioning.setter
    def istransitioning(self, istransitioning):
        """Sets the istransitioning of this SubscriptionState.

        Is Transitioning

        :param istransitioning: The istransitioning of this SubscriptionState.
        :type istransitioning: bool
        """

        self._istransitioning = istransitioning

    @property
    def properties(self):
        """Gets the properties of this SubscriptionState.

        Subscription State properties.

        :return: The properties of this SubscriptionState.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SubscriptionState.

        Subscription State properties.

        :param properties: The properties of this SubscriptionState.
        :type properties: object
        """

        self._properties = properties

    @property
    def state(self):
        """Gets the state of this SubscriptionState.

        State of Azure Subscription

        :return: The state of this SubscriptionState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionState.

        State of Azure Subscription

        :param state: The state of this SubscriptionState.
        :type state: str
        """
        allowed_values = ["Registered", "Unregistered", "Warned", "Suspended", "Deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
