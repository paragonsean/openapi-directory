/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2017-06-05-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerEndpointProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerEndpointProperties::OAIServerEndpointProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerEndpointProperties::OAIServerEndpointProperties() {
    this->initializeModel();
}

OAIServerEndpointProperties::~OAIServerEndpointProperties() {}

void OAIServerEndpointProperties::initializeModel() {

    m_byte_progress_isSet = false;
    m_byte_progress_isValid = false;

    m_byte_total_isSet = false;
    m_byte_total_isValid = false;

    m_cloud_tiering_isSet = false;
    m_cloud_tiering_isValid = false;

    m_current_progress_type_isSet = false;
    m_current_progress_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_item_download_error_count_isSet = false;
    m_item_download_error_count_isValid = false;

    m_item_progress_count_isSet = false;
    m_item_progress_count_isValid = false;

    m_item_total_count_isSet = false;
    m_item_total_count_isValid = false;

    m_item_upload_error_count_isSet = false;
    m_item_upload_error_count_isValid = false;

    m_last_sync_success_isSet = false;
    m_last_sync_success_isValid = false;

    m_last_workflow_id_isSet = false;
    m_last_workflow_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_server_local_path_isSet = false;
    m_server_local_path_isValid = false;

    m_server_resource_id_isSet = false;
    m_server_resource_id_isValid = false;

    m_sync_error_context_isSet = false;
    m_sync_error_context_isValid = false;

    m_sync_error_direction_isSet = false;
    m_sync_error_direction_isValid = false;

    m_sync_error_state_isSet = false;
    m_sync_error_state_isValid = false;

    m_sync_error_state_timestamp_isSet = false;
    m_sync_error_state_timestamp_isValid = false;

    m_total_progress_isSet = false;
    m_total_progress_isValid = false;

    m_volume_free_space_percent_isSet = false;
    m_volume_free_space_percent_isValid = false;
}

void OAIServerEndpointProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerEndpointProperties::fromJsonObject(QJsonObject json) {

    m_byte_progress_isValid = ::OpenAPI::fromJsonValue(m_byte_progress, json[QString("byteProgress")]);
    m_byte_progress_isSet = !json[QString("byteProgress")].isNull() && m_byte_progress_isValid;

    m_byte_total_isValid = ::OpenAPI::fromJsonValue(m_byte_total, json[QString("byteTotal")]);
    m_byte_total_isSet = !json[QString("byteTotal")].isNull() && m_byte_total_isValid;

    m_cloud_tiering_isValid = ::OpenAPI::fromJsonValue(m_cloud_tiering, json[QString("cloudTiering")]);
    m_cloud_tiering_isSet = !json[QString("cloudTiering")].isNull() && m_cloud_tiering_isValid;

    m_current_progress_type_isValid = ::OpenAPI::fromJsonValue(m_current_progress_type, json[QString("currentProgressType")]);
    m_current_progress_type_isSet = !json[QString("currentProgressType")].isNull() && m_current_progress_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_item_download_error_count_isValid = ::OpenAPI::fromJsonValue(m_item_download_error_count, json[QString("itemDownloadErrorCount")]);
    m_item_download_error_count_isSet = !json[QString("itemDownloadErrorCount")].isNull() && m_item_download_error_count_isValid;

    m_item_progress_count_isValid = ::OpenAPI::fromJsonValue(m_item_progress_count, json[QString("itemProgressCount")]);
    m_item_progress_count_isSet = !json[QString("itemProgressCount")].isNull() && m_item_progress_count_isValid;

    m_item_total_count_isValid = ::OpenAPI::fromJsonValue(m_item_total_count, json[QString("itemTotalCount")]);
    m_item_total_count_isSet = !json[QString("itemTotalCount")].isNull() && m_item_total_count_isValid;

    m_item_upload_error_count_isValid = ::OpenAPI::fromJsonValue(m_item_upload_error_count, json[QString("itemUploadErrorCount")]);
    m_item_upload_error_count_isSet = !json[QString("itemUploadErrorCount")].isNull() && m_item_upload_error_count_isValid;

    m_last_sync_success_isValid = ::OpenAPI::fromJsonValue(m_last_sync_success, json[QString("lastSyncSuccess")]);
    m_last_sync_success_isSet = !json[QString("lastSyncSuccess")].isNull() && m_last_sync_success_isValid;

    m_last_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_last_workflow_id, json[QString("lastWorkflowId")]);
    m_last_workflow_id_isSet = !json[QString("lastWorkflowId")].isNull() && m_last_workflow_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_server_local_path_isValid = ::OpenAPI::fromJsonValue(m_server_local_path, json[QString("serverLocalPath")]);
    m_server_local_path_isSet = !json[QString("serverLocalPath")].isNull() && m_server_local_path_isValid;

    m_server_resource_id_isValid = ::OpenAPI::fromJsonValue(m_server_resource_id, json[QString("serverResourceId")]);
    m_server_resource_id_isSet = !json[QString("serverResourceId")].isNull() && m_server_resource_id_isValid;

    m_sync_error_context_isValid = ::OpenAPI::fromJsonValue(m_sync_error_context, json[QString("syncErrorContext")]);
    m_sync_error_context_isSet = !json[QString("syncErrorContext")].isNull() && m_sync_error_context_isValid;

    m_sync_error_direction_isValid = ::OpenAPI::fromJsonValue(m_sync_error_direction, json[QString("syncErrorDirection")]);
    m_sync_error_direction_isSet = !json[QString("syncErrorDirection")].isNull() && m_sync_error_direction_isValid;

    m_sync_error_state_isValid = ::OpenAPI::fromJsonValue(m_sync_error_state, json[QString("syncErrorState")]);
    m_sync_error_state_isSet = !json[QString("syncErrorState")].isNull() && m_sync_error_state_isValid;

    m_sync_error_state_timestamp_isValid = ::OpenAPI::fromJsonValue(m_sync_error_state_timestamp, json[QString("syncErrorStateTimestamp")]);
    m_sync_error_state_timestamp_isSet = !json[QString("syncErrorStateTimestamp")].isNull() && m_sync_error_state_timestamp_isValid;

    m_total_progress_isValid = ::OpenAPI::fromJsonValue(m_total_progress, json[QString("totalProgress")]);
    m_total_progress_isSet = !json[QString("totalProgress")].isNull() && m_total_progress_isValid;

    m_volume_free_space_percent_isValid = ::OpenAPI::fromJsonValue(m_volume_free_space_percent, json[QString("volumeFreeSpacePercent")]);
    m_volume_free_space_percent_isSet = !json[QString("volumeFreeSpacePercent")].isNull() && m_volume_free_space_percent_isValid;
}

QString OAIServerEndpointProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerEndpointProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_byte_progress_isSet) {
        obj.insert(QString("byteProgress"), ::OpenAPI::toJsonValue(m_byte_progress));
    }
    if (m_byte_total_isSet) {
        obj.insert(QString("byteTotal"), ::OpenAPI::toJsonValue(m_byte_total));
    }
    if (m_cloud_tiering.isSet()) {
        obj.insert(QString("cloudTiering"), ::OpenAPI::toJsonValue(m_cloud_tiering));
    }
    if (m_current_progress_type.isSet()) {
        obj.insert(QString("currentProgressType"), ::OpenAPI::toJsonValue(m_current_progress_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_item_download_error_count_isSet) {
        obj.insert(QString("itemDownloadErrorCount"), ::OpenAPI::toJsonValue(m_item_download_error_count));
    }
    if (m_item_progress_count_isSet) {
        obj.insert(QString("itemProgressCount"), ::OpenAPI::toJsonValue(m_item_progress_count));
    }
    if (m_item_total_count_isSet) {
        obj.insert(QString("itemTotalCount"), ::OpenAPI::toJsonValue(m_item_total_count));
    }
    if (m_item_upload_error_count_isSet) {
        obj.insert(QString("itemUploadErrorCount"), ::OpenAPI::toJsonValue(m_item_upload_error_count));
    }
    if (m_last_sync_success_isSet) {
        obj.insert(QString("lastSyncSuccess"), ::OpenAPI::toJsonValue(m_last_sync_success));
    }
    if (m_last_workflow_id_isSet) {
        obj.insert(QString("lastWorkflowId"), ::OpenAPI::toJsonValue(m_last_workflow_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_server_local_path_isSet) {
        obj.insert(QString("serverLocalPath"), ::OpenAPI::toJsonValue(m_server_local_path));
    }
    if (m_server_resource_id_isSet) {
        obj.insert(QString("serverResourceId"), ::OpenAPI::toJsonValue(m_server_resource_id));
    }
    if (m_sync_error_context_isSet) {
        obj.insert(QString("syncErrorContext"), ::OpenAPI::toJsonValue(m_sync_error_context));
    }
    if (m_sync_error_direction.isSet()) {
        obj.insert(QString("syncErrorDirection"), ::OpenAPI::toJsonValue(m_sync_error_direction));
    }
    if (m_sync_error_state_isSet) {
        obj.insert(QString("syncErrorState"), ::OpenAPI::toJsonValue(m_sync_error_state));
    }
    if (m_sync_error_state_timestamp_isSet) {
        obj.insert(QString("syncErrorStateTimestamp"), ::OpenAPI::toJsonValue(m_sync_error_state_timestamp));
    }
    if (m_total_progress_isSet) {
        obj.insert(QString("totalProgress"), ::OpenAPI::toJsonValue(m_total_progress));
    }
    if (m_volume_free_space_percent_isSet) {
        obj.insert(QString("volumeFreeSpacePercent"), ::OpenAPI::toJsonValue(m_volume_free_space_percent));
    }
    return obj;
}

qint32 OAIServerEndpointProperties::getByteProgress() const {
    return m_byte_progress;
}
void OAIServerEndpointProperties::setByteProgress(const qint32 &byte_progress) {
    m_byte_progress = byte_progress;
    m_byte_progress_isSet = true;
}

bool OAIServerEndpointProperties::is_byte_progress_Set() const{
    return m_byte_progress_isSet;
}

bool OAIServerEndpointProperties::is_byte_progress_Valid() const{
    return m_byte_progress_isValid;
}

qint32 OAIServerEndpointProperties::getByteTotal() const {
    return m_byte_total;
}
void OAIServerEndpointProperties::setByteTotal(const qint32 &byte_total) {
    m_byte_total = byte_total;
    m_byte_total_isSet = true;
}

bool OAIServerEndpointProperties::is_byte_total_Set() const{
    return m_byte_total_isSet;
}

bool OAIServerEndpointProperties::is_byte_total_Valid() const{
    return m_byte_total_isValid;
}

OAIFeatureStatus OAIServerEndpointProperties::getCloudTiering() const {
    return m_cloud_tiering;
}
void OAIServerEndpointProperties::setCloudTiering(const OAIFeatureStatus &cloud_tiering) {
    m_cloud_tiering = cloud_tiering;
    m_cloud_tiering_isSet = true;
}

bool OAIServerEndpointProperties::is_cloud_tiering_Set() const{
    return m_cloud_tiering_isSet;
}

bool OAIServerEndpointProperties::is_cloud_tiering_Valid() const{
    return m_cloud_tiering_isValid;
}

OAIProgressType OAIServerEndpointProperties::getCurrentProgressType() const {
    return m_current_progress_type;
}
void OAIServerEndpointProperties::setCurrentProgressType(const OAIProgressType &current_progress_type) {
    m_current_progress_type = current_progress_type;
    m_current_progress_type_isSet = true;
}

bool OAIServerEndpointProperties::is_current_progress_type_Set() const{
    return m_current_progress_type_isSet;
}

bool OAIServerEndpointProperties::is_current_progress_type_Valid() const{
    return m_current_progress_type_isValid;
}

QString OAIServerEndpointProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIServerEndpointProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIServerEndpointProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIServerEndpointProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

qint32 OAIServerEndpointProperties::getItemDownloadErrorCount() const {
    return m_item_download_error_count;
}
void OAIServerEndpointProperties::setItemDownloadErrorCount(const qint32 &item_download_error_count) {
    m_item_download_error_count = item_download_error_count;
    m_item_download_error_count_isSet = true;
}

bool OAIServerEndpointProperties::is_item_download_error_count_Set() const{
    return m_item_download_error_count_isSet;
}

bool OAIServerEndpointProperties::is_item_download_error_count_Valid() const{
    return m_item_download_error_count_isValid;
}

qint32 OAIServerEndpointProperties::getItemProgressCount() const {
    return m_item_progress_count;
}
void OAIServerEndpointProperties::setItemProgressCount(const qint32 &item_progress_count) {
    m_item_progress_count = item_progress_count;
    m_item_progress_count_isSet = true;
}

bool OAIServerEndpointProperties::is_item_progress_count_Set() const{
    return m_item_progress_count_isSet;
}

bool OAIServerEndpointProperties::is_item_progress_count_Valid() const{
    return m_item_progress_count_isValid;
}

qint32 OAIServerEndpointProperties::getItemTotalCount() const {
    return m_item_total_count;
}
void OAIServerEndpointProperties::setItemTotalCount(const qint32 &item_total_count) {
    m_item_total_count = item_total_count;
    m_item_total_count_isSet = true;
}

bool OAIServerEndpointProperties::is_item_total_count_Set() const{
    return m_item_total_count_isSet;
}

bool OAIServerEndpointProperties::is_item_total_count_Valid() const{
    return m_item_total_count_isValid;
}

qint32 OAIServerEndpointProperties::getItemUploadErrorCount() const {
    return m_item_upload_error_count;
}
void OAIServerEndpointProperties::setItemUploadErrorCount(const qint32 &item_upload_error_count) {
    m_item_upload_error_count = item_upload_error_count;
    m_item_upload_error_count_isSet = true;
}

bool OAIServerEndpointProperties::is_item_upload_error_count_Set() const{
    return m_item_upload_error_count_isSet;
}

bool OAIServerEndpointProperties::is_item_upload_error_count_Valid() const{
    return m_item_upload_error_count_isValid;
}

QDateTime OAIServerEndpointProperties::getLastSyncSuccess() const {
    return m_last_sync_success;
}
void OAIServerEndpointProperties::setLastSyncSuccess(const QDateTime &last_sync_success) {
    m_last_sync_success = last_sync_success;
    m_last_sync_success_isSet = true;
}

bool OAIServerEndpointProperties::is_last_sync_success_Set() const{
    return m_last_sync_success_isSet;
}

bool OAIServerEndpointProperties::is_last_sync_success_Valid() const{
    return m_last_sync_success_isValid;
}

QString OAIServerEndpointProperties::getLastWorkflowId() const {
    return m_last_workflow_id;
}
void OAIServerEndpointProperties::setLastWorkflowId(const QString &last_workflow_id) {
    m_last_workflow_id = last_workflow_id;
    m_last_workflow_id_isSet = true;
}

bool OAIServerEndpointProperties::is_last_workflow_id_Set() const{
    return m_last_workflow_id_isSet;
}

bool OAIServerEndpointProperties::is_last_workflow_id_Valid() const{
    return m_last_workflow_id_isValid;
}

QString OAIServerEndpointProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIServerEndpointProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIServerEndpointProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIServerEndpointProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIServerEndpointProperties::getServerLocalPath() const {
    return m_server_local_path;
}
void OAIServerEndpointProperties::setServerLocalPath(const QString &server_local_path) {
    m_server_local_path = server_local_path;
    m_server_local_path_isSet = true;
}

bool OAIServerEndpointProperties::is_server_local_path_Set() const{
    return m_server_local_path_isSet;
}

bool OAIServerEndpointProperties::is_server_local_path_Valid() const{
    return m_server_local_path_isValid;
}

QString OAIServerEndpointProperties::getServerResourceId() const {
    return m_server_resource_id;
}
void OAIServerEndpointProperties::setServerResourceId(const QString &server_resource_id) {
    m_server_resource_id = server_resource_id;
    m_server_resource_id_isSet = true;
}

bool OAIServerEndpointProperties::is_server_resource_id_Set() const{
    return m_server_resource_id_isSet;
}

bool OAIServerEndpointProperties::is_server_resource_id_Valid() const{
    return m_server_resource_id_isValid;
}

QString OAIServerEndpointProperties::getSyncErrorContext() const {
    return m_sync_error_context;
}
void OAIServerEndpointProperties::setSyncErrorContext(const QString &sync_error_context) {
    m_sync_error_context = sync_error_context;
    m_sync_error_context_isSet = true;
}

bool OAIServerEndpointProperties::is_sync_error_context_Set() const{
    return m_sync_error_context_isSet;
}

bool OAIServerEndpointProperties::is_sync_error_context_Valid() const{
    return m_sync_error_context_isValid;
}

OAIProgressType OAIServerEndpointProperties::getSyncErrorDirection() const {
    return m_sync_error_direction;
}
void OAIServerEndpointProperties::setSyncErrorDirection(const OAIProgressType &sync_error_direction) {
    m_sync_error_direction = sync_error_direction;
    m_sync_error_direction_isSet = true;
}

bool OAIServerEndpointProperties::is_sync_error_direction_Set() const{
    return m_sync_error_direction_isSet;
}

bool OAIServerEndpointProperties::is_sync_error_direction_Valid() const{
    return m_sync_error_direction_isValid;
}

QString OAIServerEndpointProperties::getSyncErrorState() const {
    return m_sync_error_state;
}
void OAIServerEndpointProperties::setSyncErrorState(const QString &sync_error_state) {
    m_sync_error_state = sync_error_state;
    m_sync_error_state_isSet = true;
}

bool OAIServerEndpointProperties::is_sync_error_state_Set() const{
    return m_sync_error_state_isSet;
}

bool OAIServerEndpointProperties::is_sync_error_state_Valid() const{
    return m_sync_error_state_isValid;
}

QDateTime OAIServerEndpointProperties::getSyncErrorStateTimestamp() const {
    return m_sync_error_state_timestamp;
}
void OAIServerEndpointProperties::setSyncErrorStateTimestamp(const QDateTime &sync_error_state_timestamp) {
    m_sync_error_state_timestamp = sync_error_state_timestamp;
    m_sync_error_state_timestamp_isSet = true;
}

bool OAIServerEndpointProperties::is_sync_error_state_timestamp_Set() const{
    return m_sync_error_state_timestamp_isSet;
}

bool OAIServerEndpointProperties::is_sync_error_state_timestamp_Valid() const{
    return m_sync_error_state_timestamp_isValid;
}

qint32 OAIServerEndpointProperties::getTotalProgress() const {
    return m_total_progress;
}
void OAIServerEndpointProperties::setTotalProgress(const qint32 &total_progress) {
    m_total_progress = total_progress;
    m_total_progress_isSet = true;
}

bool OAIServerEndpointProperties::is_total_progress_Set() const{
    return m_total_progress_isSet;
}

bool OAIServerEndpointProperties::is_total_progress_Valid() const{
    return m_total_progress_isValid;
}

qint32 OAIServerEndpointProperties::getVolumeFreeSpacePercent() const {
    return m_volume_free_space_percent;
}
void OAIServerEndpointProperties::setVolumeFreeSpacePercent(const qint32 &volume_free_space_percent) {
    m_volume_free_space_percent = volume_free_space_percent;
    m_volume_free_space_percent_isSet = true;
}

bool OAIServerEndpointProperties::is_volume_free_space_percent_Set() const{
    return m_volume_free_space_percent_isSet;
}

bool OAIServerEndpointProperties::is_volume_free_space_percent_Valid() const{
    return m_volume_free_space_percent_isValid;
}

bool OAIServerEndpointProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_byte_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_byte_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_tiering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_progress_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_download_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_progress_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_upload_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_error_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_error_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_error_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_error_state_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_free_space_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerEndpointProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
