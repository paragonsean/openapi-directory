/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2017-06-05-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgressType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgressType::OAIProgressType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgressType::OAIProgressType() {
    this->initializeModel();
}

OAIProgressType::~OAIProgressType() {}

void OAIProgressType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProgressType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProgressType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("none", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgressType::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("initialize", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgressType::INITIALIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("download", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgressType::DOWNLOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("upload", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgressType::UPLOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("recall", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgressType::RECALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProgressType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProgressType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProgressType::NONE:
            val = "none";
            break;
        case eOAIProgressType::INITIALIZE:
            val = "initialize";
            break;
        case eOAIProgressType::DOWNLOAD:
            val = "download";
            break;
        case eOAIProgressType::UPLOAD:
            val = "upload";
            break;
        case eOAIProgressType::RECALL:
            val = "recall";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProgressType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProgressType::eOAIProgressType OAIProgressType::getValue() const {
    return m_value;
}

void OAIProgressType::setValue(const OAIProgressType::eOAIProgressType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProgressType::isSet() const {
    
    return m_value_isSet;
}

bool OAIProgressType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
