/*
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2017-06-05-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RegisteredServer;
import org.openapitools.client.model.RegisteredServerArray;
import org.openapitools.client.model.StorageSyncError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegisteredServerResourceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegisteredServerResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegisteredServerResourceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for registeredServersCreate
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @param parameters Body of Registered Server object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registered Server resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredServersCreateCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, RegisteredServer parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "serverId" + "}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registeredServersCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, RegisteredServer parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling registeredServersCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling registeredServersCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registeredServersCreate(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling registeredServersCreate(Async)");
        }

        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling registeredServersCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling registeredServersCreate(Async)");
        }

        return registeredServersCreateCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, parameters, _callback);

    }

    /**
     * 
     * Add a new registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @param parameters Body of Registered Server object. (required)
     * @return RegisteredServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registered Server resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegisteredServer registeredServersCreate(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, RegisteredServer parameters) throws ApiException {
        ApiResponse<RegisteredServer> localVarResp = registeredServersCreateWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a new registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @param parameters Body of Registered Server object. (required)
     * @return ApiResponse&lt;RegisteredServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registered Server resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisteredServer> registeredServersCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, RegisteredServer parameters) throws ApiException {
        okhttp3.Call localVarCall = registeredServersCreateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, parameters, null);
        Type localVarReturnType = new TypeToken<RegisteredServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @param parameters Body of Registered Server object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registered Server resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * Azure-AsyncOperation - Operation Status Location URI <br>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredServersCreateAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, RegisteredServer parameters, final ApiCallback<RegisteredServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = registeredServersCreateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, parameters, _callback);
        Type localVarReturnType = new TypeToken<RegisteredServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registeredServersDelete
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 204 </td><td> Resource doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredServersDeleteCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "serverId" + "}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registeredServersDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling registeredServersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling registeredServersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registeredServersDelete(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling registeredServersDelete(Async)");
        }

        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling registeredServersDelete(Async)");
        }

        return registeredServersDeleteCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, _callback);

    }

    /**
     * 
     * Delete the given registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 204 </td><td> Resource doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void registeredServersDelete(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId) throws ApiException {
        registeredServersDeleteWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId);
    }

    /**
     * 
     * Delete the given registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 204 </td><td> Resource doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registeredServersDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId) throws ApiException {
        okhttp3.Call localVarCall = registeredServersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the given registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 202 </td><td> Asynchronous Operation Status Location </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  * Location - Operation Status Location URI <br>  </td></tr>
        <tr><td> 204 </td><td> Resource doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredServersDeleteAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registeredServersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registeredServersGet
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registered Server resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredServersGetCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()))
            .replace("{" + "serverId" + "}", localVarApiClient.escapeString(serverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registeredServersGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling registeredServersGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling registeredServersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registeredServersGet(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling registeredServersGet(Async)");
        }

        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling registeredServersGet(Async)");
        }

        return registeredServersGetCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, _callback);

    }

    /**
     * 
     * Get a given registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @return RegisteredServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registered Server resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegisteredServer registeredServersGet(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId) throws ApiException {
        ApiResponse<RegisteredServer> localVarResp = registeredServersGetWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a given registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @return ApiResponse&lt;RegisteredServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registered Server resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisteredServer> registeredServersGetWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId) throws ApiException {
        okhttp3.Call localVarCall = registeredServersGetValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, null);
        Type localVarReturnType = new TypeToken<RegisteredServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a given registered server.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param serverId GUID identifying the on-premises server. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registered Server resources in Sync Group </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredServersGetAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, String serverId, final ApiCallback<RegisteredServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = registeredServersGetValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, _callback);
        Type localVarReturnType = new TypeToken<RegisteredServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registeredServersListByStorageSyncService
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Registered Server resources in Storage Sync Service </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredServersListByStorageSyncServiceCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "storageSyncServiceName" + "}", localVarApiClient.escapeString(storageSyncServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registeredServersListByStorageSyncServiceValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling registeredServersListByStorageSyncService(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling registeredServersListByStorageSyncService(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registeredServersListByStorageSyncService(Async)");
        }

        // verify the required parameter 'storageSyncServiceName' is set
        if (storageSyncServiceName == null) {
            throw new ApiException("Missing the required parameter 'storageSyncServiceName' when calling registeredServersListByStorageSyncService(Async)");
        }

        return registeredServersListByStorageSyncServiceCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, _callback);

    }

    /**
     * 
     * Get a given registered server list.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @return RegisteredServerArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Registered Server resources in Storage Sync Service </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegisteredServerArray registeredServersListByStorageSyncService(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName) throws ApiException {
        ApiResponse<RegisteredServerArray> localVarResp = registeredServersListByStorageSyncServiceWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a given registered server list.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @return ApiResponse&lt;RegisteredServerArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Registered Server resources in Storage Sync Service </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisteredServerArray> registeredServersListByStorageSyncServiceWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName) throws ApiException {
        okhttp3.Call localVarCall = registeredServersListByStorageSyncServiceValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, null);
        Type localVarReturnType = new TypeToken<RegisteredServerArray>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a given registered server list.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion Client Api Version. (required)
     * @param storageSyncServiceName Name of Storage Sync Service resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Registered Server resources in Storage Sync Service </td><td>  * x-ms-request-id - request id. <br>  * x-ms-correlation-request-id - correlation request id. <br>  </td></tr>
        <tr><td> 0 </td><td> Error message indicating why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredServersListByStorageSyncServiceAsync(String subscriptionId, String resourceGroupName, String apiVersion, String storageSyncServiceName, final ApiCallback<RegisteredServerArray> _callback) throws ApiException {

        okhttp3.Call localVarCall = registeredServersListByStorageSyncServiceValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, _callback);
        Type localVarReturnType = new TypeToken<RegisteredServerArray>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
