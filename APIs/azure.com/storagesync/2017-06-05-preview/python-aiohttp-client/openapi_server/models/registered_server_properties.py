# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisteredServerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_version: str=None, cluster_id: str=None, cluster_name: str=None, last_heart_beat: str=None, last_workflow_id: str=None, provisioning_state: str=None, server_certificate: str=None, server_id: str=None, server_managementt_error_code: int=None, server_os_version: str=None, server_role: str=None, storage_sync_service_uid: str=None):
        """RegisteredServerProperties - a model defined in OpenAPI

        :param agent_version: The agent_version of this RegisteredServerProperties.
        :param cluster_id: The cluster_id of this RegisteredServerProperties.
        :param cluster_name: The cluster_name of this RegisteredServerProperties.
        :param last_heart_beat: The last_heart_beat of this RegisteredServerProperties.
        :param last_workflow_id: The last_workflow_id of this RegisteredServerProperties.
        :param provisioning_state: The provisioning_state of this RegisteredServerProperties.
        :param server_certificate: The server_certificate of this RegisteredServerProperties.
        :param server_id: The server_id of this RegisteredServerProperties.
        :param server_managementt_error_code: The server_managementt_error_code of this RegisteredServerProperties.
        :param server_os_version: The server_os_version of this RegisteredServerProperties.
        :param server_role: The server_role of this RegisteredServerProperties.
        :param storage_sync_service_uid: The storage_sync_service_uid of this RegisteredServerProperties.
        """
        self.openapi_types = {
            'agent_version': str,
            'cluster_id': str,
            'cluster_name': str,
            'last_heart_beat': str,
            'last_workflow_id': str,
            'provisioning_state': str,
            'server_certificate': str,
            'server_id': str,
            'server_managementt_error_code': int,
            'server_os_version': str,
            'server_role': str,
            'storage_sync_service_uid': str
        }

        self.attribute_map = {
            'agent_version': 'agentVersion',
            'cluster_id': 'clusterId',
            'cluster_name': 'clusterName',
            'last_heart_beat': 'lastHeartBeat',
            'last_workflow_id': 'lastWorkflowId',
            'provisioning_state': 'provisioningState',
            'server_certificate': 'serverCertificate',
            'server_id': 'serverId',
            'server_managementt_error_code': 'serverManagementtErrorCode',
            'server_os_version': 'serverOSVersion',
            'server_role': 'serverRole',
            'storage_sync_service_uid': 'storageSyncServiceUid'
        }

        self._agent_version = agent_version
        self._cluster_id = cluster_id
        self._cluster_name = cluster_name
        self._last_heart_beat = last_heart_beat
        self._last_workflow_id = last_workflow_id
        self._provisioning_state = provisioning_state
        self._server_certificate = server_certificate
        self._server_id = server_id
        self._server_managementt_error_code = server_managementt_error_code
        self._server_os_version = server_os_version
        self._server_role = server_role
        self._storage_sync_service_uid = storage_sync_service_uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisteredServerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisteredServerProperties of this RegisteredServerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_version(self):
        """Gets the agent_version of this RegisteredServerProperties.

        Registered Server Agent Version

        :return: The agent_version of this RegisteredServerProperties.
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this RegisteredServerProperties.

        Registered Server Agent Version

        :param agent_version: The agent_version of this RegisteredServerProperties.
        :type agent_version: str
        """

        self._agent_version = agent_version

    @property
    def cluster_id(self):
        """Gets the cluster_id of this RegisteredServerProperties.

        Registered Server clusterId

        :return: The cluster_id of this RegisteredServerProperties.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this RegisteredServerProperties.

        Registered Server clusterId

        :param cluster_id: The cluster_id of this RegisteredServerProperties.
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this RegisteredServerProperties.

        Registered Server clusterName

        :return: The cluster_name of this RegisteredServerProperties.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this RegisteredServerProperties.

        Registered Server clusterName

        :param cluster_name: The cluster_name of this RegisteredServerProperties.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def last_heart_beat(self):
        """Gets the last_heart_beat of this RegisteredServerProperties.

        Registered Server last heart beat

        :return: The last_heart_beat of this RegisteredServerProperties.
        :rtype: str
        """
        return self._last_heart_beat

    @last_heart_beat.setter
    def last_heart_beat(self, last_heart_beat):
        """Sets the last_heart_beat of this RegisteredServerProperties.

        Registered Server last heart beat

        :param last_heart_beat: The last_heart_beat of this RegisteredServerProperties.
        :type last_heart_beat: str
        """

        self._last_heart_beat = last_heart_beat

    @property
    def last_workflow_id(self):
        """Gets the last_workflow_id of this RegisteredServerProperties.

        Registered Server lastWorkflowId

        :return: The last_workflow_id of this RegisteredServerProperties.
        :rtype: str
        """
        return self._last_workflow_id

    @last_workflow_id.setter
    def last_workflow_id(self, last_workflow_id):
        """Sets the last_workflow_id of this RegisteredServerProperties.

        Registered Server lastWorkflowId

        :param last_workflow_id: The last_workflow_id of this RegisteredServerProperties.
        :type last_workflow_id: str
        """

        self._last_workflow_id = last_workflow_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RegisteredServerProperties.

        Registered Server Provisioning State

        :return: The provisioning_state of this RegisteredServerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RegisteredServerProperties.

        Registered Server Provisioning State

        :param provisioning_state: The provisioning_state of this RegisteredServerProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def server_certificate(self):
        """Gets the server_certificate of this RegisteredServerProperties.

        Registered Server Certificate

        :return: The server_certificate of this RegisteredServerProperties.
        :rtype: str
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this RegisteredServerProperties.

        Registered Server Certificate

        :param server_certificate: The server_certificate of this RegisteredServerProperties.
        :type server_certificate: str
        """

        self._server_certificate = server_certificate

    @property
    def server_id(self):
        """Gets the server_id of this RegisteredServerProperties.

        Registered Server serverId

        :return: The server_id of this RegisteredServerProperties.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this RegisteredServerProperties.

        Registered Server serverId

        :param server_id: The server_id of this RegisteredServerProperties.
        :type server_id: str
        """

        self._server_id = server_id

    @property
    def server_managementt_error_code(self):
        """Gets the server_managementt_error_code of this RegisteredServerProperties.

        Registered Server Management Error Code

        :return: The server_managementt_error_code of this RegisteredServerProperties.
        :rtype: int
        """
        return self._server_managementt_error_code

    @server_managementt_error_code.setter
    def server_managementt_error_code(self, server_managementt_error_code):
        """Sets the server_managementt_error_code of this RegisteredServerProperties.

        Registered Server Management Error Code

        :param server_managementt_error_code: The server_managementt_error_code of this RegisteredServerProperties.
        :type server_managementt_error_code: int
        """

        self._server_managementt_error_code = server_managementt_error_code

    @property
    def server_os_version(self):
        """Gets the server_os_version of this RegisteredServerProperties.

        Registered Server OS Version

        :return: The server_os_version of this RegisteredServerProperties.
        :rtype: str
        """
        return self._server_os_version

    @server_os_version.setter
    def server_os_version(self, server_os_version):
        """Sets the server_os_version of this RegisteredServerProperties.

        Registered Server OS Version

        :param server_os_version: The server_os_version of this RegisteredServerProperties.
        :type server_os_version: str
        """

        self._server_os_version = server_os_version

    @property
    def server_role(self):
        """Gets the server_role of this RegisteredServerProperties.

        Registered Server serverRole

        :return: The server_role of this RegisteredServerProperties.
        :rtype: str
        """
        return self._server_role

    @server_role.setter
    def server_role(self, server_role):
        """Sets the server_role of this RegisteredServerProperties.

        Registered Server serverRole

        :param server_role: The server_role of this RegisteredServerProperties.
        :type server_role: str
        """

        self._server_role = server_role

    @property
    def storage_sync_service_uid(self):
        """Gets the storage_sync_service_uid of this RegisteredServerProperties.

        Registered Server storageSyncServiceUid

        :return: The storage_sync_service_uid of this RegisteredServerProperties.
        :rtype: str
        """
        return self._storage_sync_service_uid

    @storage_sync_service_uid.setter
    def storage_sync_service_uid(self, storage_sync_service_uid):
        """Sets the storage_sync_service_uid of this RegisteredServerProperties.

        Registered Server storageSyncServiceUid

        :param storage_sync_service_uid: The storage_sync_service_uid of this RegisteredServerProperties.
        :type storage_sync_service_uid: str
        """

        self._storage_sync_service_uid = storage_sync_service_uid
