# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_endpoint_recall_error import ServerEndpointRecallError
from openapi_server import util


class ServerEndpointRecallStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_updated_timestamp: datetime=None, recall_errors: List[ServerEndpointRecallError]=None, total_recall_errors_count: int=None):
        """ServerEndpointRecallStatus - a model defined in OpenAPI

        :param last_updated_timestamp: The last_updated_timestamp of this ServerEndpointRecallStatus.
        :param recall_errors: The recall_errors of this ServerEndpointRecallStatus.
        :param total_recall_errors_count: The total_recall_errors_count of this ServerEndpointRecallStatus.
        """
        self.openapi_types = {
            'last_updated_timestamp': datetime,
            'recall_errors': List[ServerEndpointRecallError],
            'total_recall_errors_count': int
        }

        self.attribute_map = {
            'last_updated_timestamp': 'lastUpdatedTimestamp',
            'recall_errors': 'recallErrors',
            'total_recall_errors_count': 'totalRecallErrorsCount'
        }

        self._last_updated_timestamp = last_updated_timestamp
        self._recall_errors = recall_errors
        self._total_recall_errors_count = total_recall_errors_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerEndpointRecallStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerEndpointRecallStatus of this ServerEndpointRecallStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this ServerEndpointRecallStatus.

        Last updated timestamp

        :return: The last_updated_timestamp of this ServerEndpointRecallStatus.
        :rtype: datetime
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this ServerEndpointRecallStatus.

        Last updated timestamp

        :param last_updated_timestamp: The last_updated_timestamp of this ServerEndpointRecallStatus.
        :type last_updated_timestamp: datetime
        """

        self._last_updated_timestamp = last_updated_timestamp

    @property
    def recall_errors(self):
        """Gets the recall_errors of this ServerEndpointRecallStatus.

        Array of recall errors

        :return: The recall_errors of this ServerEndpointRecallStatus.
        :rtype: List[ServerEndpointRecallError]
        """
        return self._recall_errors

    @recall_errors.setter
    def recall_errors(self, recall_errors):
        """Sets the recall_errors of this ServerEndpointRecallStatus.

        Array of recall errors

        :param recall_errors: The recall_errors of this ServerEndpointRecallStatus.
        :type recall_errors: List[ServerEndpointRecallError]
        """

        self._recall_errors = recall_errors

    @property
    def total_recall_errors_count(self):
        """Gets the total_recall_errors_count of this ServerEndpointRecallStatus.

        Total count of recall errors.

        :return: The total_recall_errors_count of this ServerEndpointRecallStatus.
        :rtype: int
        """
        return self._total_recall_errors_count

    @total_recall_errors_count.setter
    def total_recall_errors_count(self, total_recall_errors_count):
        """Sets the total_recall_errors_count of this ServerEndpointRecallStatus.

        Total count of recall errors.

        :param total_recall_errors_count: The total_recall_errors_count of this ServerEndpointRecallStatus.
        :type total_recall_errors_count: int
        """
        if total_recall_errors_count is not None and total_recall_errors_count < 0:
            raise ValueError("Invalid value for `total_recall_errors_count`, must be a value greater than or equal to `0`")

        self._total_recall_errors_count = total_recall_errors_count
