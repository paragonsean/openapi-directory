# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerEndpointFilesNotSyncingError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: int=None, persistent_count: int=None, transient_count: int=None):
        """ServerEndpointFilesNotSyncingError - a model defined in OpenAPI

        :param error_code: The error_code of this ServerEndpointFilesNotSyncingError.
        :param persistent_count: The persistent_count of this ServerEndpointFilesNotSyncingError.
        :param transient_count: The transient_count of this ServerEndpointFilesNotSyncingError.
        """
        self.openapi_types = {
            'error_code': int,
            'persistent_count': int,
            'transient_count': int
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'persistent_count': 'persistentCount',
            'transient_count': 'transientCount'
        }

        self._error_code = error_code
        self._persistent_count = persistent_count
        self._transient_count = transient_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerEndpointFilesNotSyncingError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerEndpointFilesNotSyncingError of this ServerEndpointFilesNotSyncingError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this ServerEndpointFilesNotSyncingError.

        Error code (HResult)

        :return: The error_code of this ServerEndpointFilesNotSyncingError.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ServerEndpointFilesNotSyncingError.

        Error code (HResult)

        :param error_code: The error_code of this ServerEndpointFilesNotSyncingError.
        :type error_code: int
        """

        self._error_code = error_code

    @property
    def persistent_count(self):
        """Gets the persistent_count of this ServerEndpointFilesNotSyncingError.

        Count of persistent files not syncing with the specified error code

        :return: The persistent_count of this ServerEndpointFilesNotSyncingError.
        :rtype: int
        """
        return self._persistent_count

    @persistent_count.setter
    def persistent_count(self, persistent_count):
        """Sets the persistent_count of this ServerEndpointFilesNotSyncingError.

        Count of persistent files not syncing with the specified error code

        :param persistent_count: The persistent_count of this ServerEndpointFilesNotSyncingError.
        :type persistent_count: int
        """
        if persistent_count is not None and persistent_count < 0:
            raise ValueError("Invalid value for `persistent_count`, must be a value greater than or equal to `0`")

        self._persistent_count = persistent_count

    @property
    def transient_count(self):
        """Gets the transient_count of this ServerEndpointFilesNotSyncingError.

        Count of transient files not syncing with the specified error code

        :return: The transient_count of this ServerEndpointFilesNotSyncingError.
        :rtype: int
        """
        return self._transient_count

    @transient_count.setter
    def transient_count(self, transient_count):
        """Sets the transient_count of this ServerEndpointFilesNotSyncingError.

        Count of transient files not syncing with the specified error code

        :param transient_count: The transient_count of this ServerEndpointFilesNotSyncingError.
        :type transient_count: int
        """
        if transient_count is not None and transient_count < 0:
            raise ValueError("Invalid value for `transient_count`, must be a value greater than or equal to `0`")

        self._transient_count = transient_count
