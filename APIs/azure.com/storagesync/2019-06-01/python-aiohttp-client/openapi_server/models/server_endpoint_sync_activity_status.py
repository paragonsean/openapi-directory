# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerEndpointSyncActivityStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_bytes: int=None, applied_item_count: int=None, per_item_error_count: int=None, timestamp: datetime=None, total_bytes: int=None, total_item_count: int=None):
        """ServerEndpointSyncActivityStatus - a model defined in OpenAPI

        :param applied_bytes: The applied_bytes of this ServerEndpointSyncActivityStatus.
        :param applied_item_count: The applied_item_count of this ServerEndpointSyncActivityStatus.
        :param per_item_error_count: The per_item_error_count of this ServerEndpointSyncActivityStatus.
        :param timestamp: The timestamp of this ServerEndpointSyncActivityStatus.
        :param total_bytes: The total_bytes of this ServerEndpointSyncActivityStatus.
        :param total_item_count: The total_item_count of this ServerEndpointSyncActivityStatus.
        """
        self.openapi_types = {
            'applied_bytes': int,
            'applied_item_count': int,
            'per_item_error_count': int,
            'timestamp': datetime,
            'total_bytes': int,
            'total_item_count': int
        }

        self.attribute_map = {
            'applied_bytes': 'appliedBytes',
            'applied_item_count': 'appliedItemCount',
            'per_item_error_count': 'perItemErrorCount',
            'timestamp': 'timestamp',
            'total_bytes': 'totalBytes',
            'total_item_count': 'totalItemCount'
        }

        self._applied_bytes = applied_bytes
        self._applied_item_count = applied_item_count
        self._per_item_error_count = per_item_error_count
        self._timestamp = timestamp
        self._total_bytes = total_bytes
        self._total_item_count = total_item_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerEndpointSyncActivityStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerEndpointSyncActivityStatus of this ServerEndpointSyncActivityStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_bytes(self):
        """Gets the applied_bytes of this ServerEndpointSyncActivityStatus.

        Applied bytes

        :return: The applied_bytes of this ServerEndpointSyncActivityStatus.
        :rtype: int
        """
        return self._applied_bytes

    @applied_bytes.setter
    def applied_bytes(self, applied_bytes):
        """Sets the applied_bytes of this ServerEndpointSyncActivityStatus.

        Applied bytes

        :param applied_bytes: The applied_bytes of this ServerEndpointSyncActivityStatus.
        :type applied_bytes: int
        """
        if applied_bytes is not None and applied_bytes < 0:
            raise ValueError("Invalid value for `applied_bytes`, must be a value greater than or equal to `0`")

        self._applied_bytes = applied_bytes

    @property
    def applied_item_count(self):
        """Gets the applied_item_count of this ServerEndpointSyncActivityStatus.

        Applied item count.

        :return: The applied_item_count of this ServerEndpointSyncActivityStatus.
        :rtype: int
        """
        return self._applied_item_count

    @applied_item_count.setter
    def applied_item_count(self, applied_item_count):
        """Sets the applied_item_count of this ServerEndpointSyncActivityStatus.

        Applied item count.

        :param applied_item_count: The applied_item_count of this ServerEndpointSyncActivityStatus.
        :type applied_item_count: int
        """
        if applied_item_count is not None and applied_item_count < 0:
            raise ValueError("Invalid value for `applied_item_count`, must be a value greater than or equal to `0`")

        self._applied_item_count = applied_item_count

    @property
    def per_item_error_count(self):
        """Gets the per_item_error_count of this ServerEndpointSyncActivityStatus.

        Per item error count

        :return: The per_item_error_count of this ServerEndpointSyncActivityStatus.
        :rtype: int
        """
        return self._per_item_error_count

    @per_item_error_count.setter
    def per_item_error_count(self, per_item_error_count):
        """Sets the per_item_error_count of this ServerEndpointSyncActivityStatus.

        Per item error count

        :param per_item_error_count: The per_item_error_count of this ServerEndpointSyncActivityStatus.
        :type per_item_error_count: int
        """
        if per_item_error_count is not None and per_item_error_count < 0:
            raise ValueError("Invalid value for `per_item_error_count`, must be a value greater than or equal to `0`")

        self._per_item_error_count = per_item_error_count

    @property
    def timestamp(self):
        """Gets the timestamp of this ServerEndpointSyncActivityStatus.

        Timestamp when properties were updated

        :return: The timestamp of this ServerEndpointSyncActivityStatus.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ServerEndpointSyncActivityStatus.

        Timestamp when properties were updated

        :param timestamp: The timestamp of this ServerEndpointSyncActivityStatus.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def total_bytes(self):
        """Gets the total_bytes of this ServerEndpointSyncActivityStatus.

        Total bytes (if available)

        :return: The total_bytes of this ServerEndpointSyncActivityStatus.
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this ServerEndpointSyncActivityStatus.

        Total bytes (if available)

        :param total_bytes: The total_bytes of this ServerEndpointSyncActivityStatus.
        :type total_bytes: int
        """
        if total_bytes is not None and total_bytes < 0:
            raise ValueError("Invalid value for `total_bytes`, must be a value greater than or equal to `0`")

        self._total_bytes = total_bytes

    @property
    def total_item_count(self):
        """Gets the total_item_count of this ServerEndpointSyncActivityStatus.

        Total item count (if available)

        :return: The total_item_count of this ServerEndpointSyncActivityStatus.
        :rtype: int
        """
        return self._total_item_count

    @total_item_count.setter
    def total_item_count(self, total_item_count):
        """Sets the total_item_count of this ServerEndpointSyncActivityStatus.

        Total item count (if available)

        :param total_item_count: The total_item_count of this ServerEndpointSyncActivityStatus.
        :type total_item_count: int
        """
        if total_item_count is not None and total_item_count < 0:
            raise ValueError("Invalid value for `total_item_count`, must be a value greater than or equal to `0`")

        self._total_item_count = total_item_count
