/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncGroupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncGroupProperties::OAISyncGroupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncGroupProperties::OAISyncGroupProperties() {
    this->initializeModel();
}

OAISyncGroupProperties::~OAISyncGroupProperties() {}

void OAISyncGroupProperties::initializeModel() {

    m_sync_group_status_isSet = false;
    m_sync_group_status_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;
}

void OAISyncGroupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncGroupProperties::fromJsonObject(QJsonObject json) {

    m_sync_group_status_isValid = ::OpenAPI::fromJsonValue(m_sync_group_status, json[QString("syncGroupStatus")]);
    m_sync_group_status_isSet = !json[QString("syncGroupStatus")].isNull() && m_sync_group_status_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("uniqueId")]);
    m_unique_id_isSet = !json[QString("uniqueId")].isNull() && m_unique_id_isValid;
}

QString OAISyncGroupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncGroupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_sync_group_status_isSet) {
        obj.insert(QString("syncGroupStatus"), ::OpenAPI::toJsonValue(m_sync_group_status));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("uniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    return obj;
}

QString OAISyncGroupProperties::getSyncGroupStatus() const {
    return m_sync_group_status;
}
void OAISyncGroupProperties::setSyncGroupStatus(const QString &sync_group_status) {
    m_sync_group_status = sync_group_status;
    m_sync_group_status_isSet = true;
}

bool OAISyncGroupProperties::is_sync_group_status_Set() const{
    return m_sync_group_status_isSet;
}

bool OAISyncGroupProperties::is_sync_group_status_Valid() const{
    return m_sync_group_status_isValid;
}

QString OAISyncGroupProperties::getUniqueId() const {
    return m_unique_id;
}
void OAISyncGroupProperties::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAISyncGroupProperties::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAISyncGroupProperties::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

bool OAISyncGroupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sync_group_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncGroupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
