/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreRestoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreRestoreRequest::OAIPreRestoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreRestoreRequest::OAIPreRestoreRequest() {
    this->initializeModel();
}

OAIPreRestoreRequest::~OAIPreRestoreRequest() {}

void OAIPreRestoreRequest::initializeModel() {

    m_azure_file_share_uri_isSet = false;
    m_azure_file_share_uri_isValid = false;

    m_backup_metadata_property_bag_isSet = false;
    m_backup_metadata_property_bag_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_pause_wait_for_sync_drain_time_period_in_seconds_isSet = false;
    m_pause_wait_for_sync_drain_time_period_in_seconds_isValid = false;

    m_replica_group_isSet = false;
    m_replica_group_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_restore_file_spec_isSet = false;
    m_restore_file_spec_isValid = false;

    m_source_azure_file_share_uri_isSet = false;
    m_source_azure_file_share_uri_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPreRestoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreRestoreRequest::fromJsonObject(QJsonObject json) {

    m_azure_file_share_uri_isValid = ::OpenAPI::fromJsonValue(m_azure_file_share_uri, json[QString("azureFileShareUri")]);
    m_azure_file_share_uri_isSet = !json[QString("azureFileShareUri")].isNull() && m_azure_file_share_uri_isValid;

    m_backup_metadata_property_bag_isValid = ::OpenAPI::fromJsonValue(m_backup_metadata_property_bag, json[QString("backupMetadataPropertyBag")]);
    m_backup_metadata_property_bag_isSet = !json[QString("backupMetadataPropertyBag")].isNull() && m_backup_metadata_property_bag_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_pause_wait_for_sync_drain_time_period_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_pause_wait_for_sync_drain_time_period_in_seconds, json[QString("pauseWaitForSyncDrainTimePeriodInSeconds")]);
    m_pause_wait_for_sync_drain_time_period_in_seconds_isSet = !json[QString("pauseWaitForSyncDrainTimePeriodInSeconds")].isNull() && m_pause_wait_for_sync_drain_time_period_in_seconds_isValid;

    m_replica_group_isValid = ::OpenAPI::fromJsonValue(m_replica_group, json[QString("replicaGroup")]);
    m_replica_group_isSet = !json[QString("replicaGroup")].isNull() && m_replica_group_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_restore_file_spec_isValid = ::OpenAPI::fromJsonValue(m_restore_file_spec, json[QString("restoreFileSpec")]);
    m_restore_file_spec_isSet = !json[QString("restoreFileSpec")].isNull() && m_restore_file_spec_isValid;

    m_source_azure_file_share_uri_isValid = ::OpenAPI::fromJsonValue(m_source_azure_file_share_uri, json[QString("sourceAzureFileShareUri")]);
    m_source_azure_file_share_uri_isSet = !json[QString("sourceAzureFileShareUri")].isNull() && m_source_azure_file_share_uri_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPreRestoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreRestoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_file_share_uri_isSet) {
        obj.insert(QString("azureFileShareUri"), ::OpenAPI::toJsonValue(m_azure_file_share_uri));
    }
    if (m_backup_metadata_property_bag_isSet) {
        obj.insert(QString("backupMetadataPropertyBag"), ::OpenAPI::toJsonValue(m_backup_metadata_property_bag));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_pause_wait_for_sync_drain_time_period_in_seconds_isSet) {
        obj.insert(QString("pauseWaitForSyncDrainTimePeriodInSeconds"), ::OpenAPI::toJsonValue(m_pause_wait_for_sync_drain_time_period_in_seconds));
    }
    if (m_replica_group_isSet) {
        obj.insert(QString("replicaGroup"), ::OpenAPI::toJsonValue(m_replica_group));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_restore_file_spec.size() > 0) {
        obj.insert(QString("restoreFileSpec"), ::OpenAPI::toJsonValue(m_restore_file_spec));
    }
    if (m_source_azure_file_share_uri_isSet) {
        obj.insert(QString("sourceAzureFileShareUri"), ::OpenAPI::toJsonValue(m_source_azure_file_share_uri));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPreRestoreRequest::getAzureFileShareUri() const {
    return m_azure_file_share_uri;
}
void OAIPreRestoreRequest::setAzureFileShareUri(const QString &azure_file_share_uri) {
    m_azure_file_share_uri = azure_file_share_uri;
    m_azure_file_share_uri_isSet = true;
}

bool OAIPreRestoreRequest::is_azure_file_share_uri_Set() const{
    return m_azure_file_share_uri_isSet;
}

bool OAIPreRestoreRequest::is_azure_file_share_uri_Valid() const{
    return m_azure_file_share_uri_isValid;
}

QString OAIPreRestoreRequest::getBackupMetadataPropertyBag() const {
    return m_backup_metadata_property_bag;
}
void OAIPreRestoreRequest::setBackupMetadataPropertyBag(const QString &backup_metadata_property_bag) {
    m_backup_metadata_property_bag = backup_metadata_property_bag;
    m_backup_metadata_property_bag_isSet = true;
}

bool OAIPreRestoreRequest::is_backup_metadata_property_bag_Set() const{
    return m_backup_metadata_property_bag_isSet;
}

bool OAIPreRestoreRequest::is_backup_metadata_property_bag_Valid() const{
    return m_backup_metadata_property_bag_isValid;
}

QString OAIPreRestoreRequest::getPartition() const {
    return m_partition;
}
void OAIPreRestoreRequest::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIPreRestoreRequest::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIPreRestoreRequest::is_partition_Valid() const{
    return m_partition_isValid;
}

qint32 OAIPreRestoreRequest::getPauseWaitForSyncDrainTimePeriodInSeconds() const {
    return m_pause_wait_for_sync_drain_time_period_in_seconds;
}
void OAIPreRestoreRequest::setPauseWaitForSyncDrainTimePeriodInSeconds(const qint32 &pause_wait_for_sync_drain_time_period_in_seconds) {
    m_pause_wait_for_sync_drain_time_period_in_seconds = pause_wait_for_sync_drain_time_period_in_seconds;
    m_pause_wait_for_sync_drain_time_period_in_seconds_isSet = true;
}

bool OAIPreRestoreRequest::is_pause_wait_for_sync_drain_time_period_in_seconds_Set() const{
    return m_pause_wait_for_sync_drain_time_period_in_seconds_isSet;
}

bool OAIPreRestoreRequest::is_pause_wait_for_sync_drain_time_period_in_seconds_Valid() const{
    return m_pause_wait_for_sync_drain_time_period_in_seconds_isValid;
}

QString OAIPreRestoreRequest::getReplicaGroup() const {
    return m_replica_group;
}
void OAIPreRestoreRequest::setReplicaGroup(const QString &replica_group) {
    m_replica_group = replica_group;
    m_replica_group_isSet = true;
}

bool OAIPreRestoreRequest::is_replica_group_Set() const{
    return m_replica_group_isSet;
}

bool OAIPreRestoreRequest::is_replica_group_Valid() const{
    return m_replica_group_isValid;
}

QString OAIPreRestoreRequest::getRequestId() const {
    return m_request_id;
}
void OAIPreRestoreRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPreRestoreRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPreRestoreRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QList<OAIRestoreFileSpec> OAIPreRestoreRequest::getRestoreFileSpec() const {
    return m_restore_file_spec;
}
void OAIPreRestoreRequest::setRestoreFileSpec(const QList<OAIRestoreFileSpec> &restore_file_spec) {
    m_restore_file_spec = restore_file_spec;
    m_restore_file_spec_isSet = true;
}

bool OAIPreRestoreRequest::is_restore_file_spec_Set() const{
    return m_restore_file_spec_isSet;
}

bool OAIPreRestoreRequest::is_restore_file_spec_Valid() const{
    return m_restore_file_spec_isValid;
}

QString OAIPreRestoreRequest::getSourceAzureFileShareUri() const {
    return m_source_azure_file_share_uri;
}
void OAIPreRestoreRequest::setSourceAzureFileShareUri(const QString &source_azure_file_share_uri) {
    m_source_azure_file_share_uri = source_azure_file_share_uri;
    m_source_azure_file_share_uri_isSet = true;
}

bool OAIPreRestoreRequest::is_source_azure_file_share_uri_Set() const{
    return m_source_azure_file_share_uri_isSet;
}

bool OAIPreRestoreRequest::is_source_azure_file_share_uri_Valid() const{
    return m_source_azure_file_share_uri_isValid;
}

QString OAIPreRestoreRequest::getStatus() const {
    return m_status;
}
void OAIPreRestoreRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPreRestoreRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPreRestoreRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPreRestoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_file_share_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_metadata_property_bag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_wait_for_sync_drain_time_period_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_file_spec.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_azure_file_share_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreRestoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
