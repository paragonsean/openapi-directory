/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowProperties::OAIWorkflowProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowProperties::OAIWorkflowProperties() {
    this->initializeModel();
}

OAIWorkflowProperties::~OAIWorkflowProperties() {}

void OAIWorkflowProperties::initializeModel() {

    m_last_operation_id_isSet = false;
    m_last_operation_id_isValid = false;

    m_last_step_name_isSet = false;
    m_last_step_name_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAIWorkflowProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowProperties::fromJsonObject(QJsonObject json) {

    m_last_operation_id_isValid = ::OpenAPI::fromJsonValue(m_last_operation_id, json[QString("lastOperationId")]);
    m_last_operation_id_isSet = !json[QString("lastOperationId")].isNull() && m_last_operation_id_isValid;

    m_last_step_name_isValid = ::OpenAPI::fromJsonValue(m_last_step_name, json[QString("lastStepName")]);
    m_last_step_name_isSet = !json[QString("lastStepName")].isNull() && m_last_step_name_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAIWorkflowProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_last_operation_id_isSet) {
        obj.insert(QString("lastOperationId"), ::OpenAPI::toJsonValue(m_last_operation_id));
    }
    if (m_last_step_name_isSet) {
        obj.insert(QString("lastStepName"), ::OpenAPI::toJsonValue(m_last_step_name));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_steps_isSet) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

QString OAIWorkflowProperties::getLastOperationId() const {
    return m_last_operation_id;
}
void OAIWorkflowProperties::setLastOperationId(const QString &last_operation_id) {
    m_last_operation_id = last_operation_id;
    m_last_operation_id_isSet = true;
}

bool OAIWorkflowProperties::is_last_operation_id_Set() const{
    return m_last_operation_id_isSet;
}

bool OAIWorkflowProperties::is_last_operation_id_Valid() const{
    return m_last_operation_id_isValid;
}

QString OAIWorkflowProperties::getLastStepName() const {
    return m_last_step_name;
}
void OAIWorkflowProperties::setLastStepName(const QString &last_step_name) {
    m_last_step_name = last_step_name;
    m_last_step_name_isSet = true;
}

bool OAIWorkflowProperties::is_last_step_name_Set() const{
    return m_last_step_name_isSet;
}

bool OAIWorkflowProperties::is_last_step_name_Valid() const{
    return m_last_step_name_isValid;
}

OAIOperationDirection OAIWorkflowProperties::getOperation() const {
    return m_operation;
}
void OAIWorkflowProperties::setOperation(const OAIOperationDirection &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIWorkflowProperties::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIWorkflowProperties::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIWorkflowStatus OAIWorkflowProperties::getStatus() const {
    return m_status;
}
void OAIWorkflowProperties::setStatus(const OAIWorkflowStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkflowProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkflowProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWorkflowProperties::getSteps() const {
    return m_steps;
}
void OAIWorkflowProperties::setSteps(const QString &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIWorkflowProperties::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIWorkflowProperties::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIWorkflowProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
