/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerEndpointRecallStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerEndpointRecallStatus::OAIServerEndpointRecallStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerEndpointRecallStatus::OAIServerEndpointRecallStatus() {
    this->initializeModel();
}

OAIServerEndpointRecallStatus::~OAIServerEndpointRecallStatus() {}

void OAIServerEndpointRecallStatus::initializeModel() {

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_recall_errors_isSet = false;
    m_recall_errors_isValid = false;

    m_total_recall_errors_count_isSet = false;
    m_total_recall_errors_count_isValid = false;
}

void OAIServerEndpointRecallStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerEndpointRecallStatus::fromJsonObject(QJsonObject json) {

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("lastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("lastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_recall_errors_isValid = ::OpenAPI::fromJsonValue(m_recall_errors, json[QString("recallErrors")]);
    m_recall_errors_isSet = !json[QString("recallErrors")].isNull() && m_recall_errors_isValid;

    m_total_recall_errors_count_isValid = ::OpenAPI::fromJsonValue(m_total_recall_errors_count, json[QString("totalRecallErrorsCount")]);
    m_total_recall_errors_count_isSet = !json[QString("totalRecallErrorsCount")].isNull() && m_total_recall_errors_count_isValid;
}

QString OAIServerEndpointRecallStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerEndpointRecallStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("lastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_recall_errors.size() > 0) {
        obj.insert(QString("recallErrors"), ::OpenAPI::toJsonValue(m_recall_errors));
    }
    if (m_total_recall_errors_count_isSet) {
        obj.insert(QString("totalRecallErrorsCount"), ::OpenAPI::toJsonValue(m_total_recall_errors_count));
    }
    return obj;
}

QDateTime OAIServerEndpointRecallStatus::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIServerEndpointRecallStatus::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIServerEndpointRecallStatus::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIServerEndpointRecallStatus::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

QList<OAIServerEndpointRecallError> OAIServerEndpointRecallStatus::getRecallErrors() const {
    return m_recall_errors;
}
void OAIServerEndpointRecallStatus::setRecallErrors(const QList<OAIServerEndpointRecallError> &recall_errors) {
    m_recall_errors = recall_errors;
    m_recall_errors_isSet = true;
}

bool OAIServerEndpointRecallStatus::is_recall_errors_Set() const{
    return m_recall_errors_isSet;
}

bool OAIServerEndpointRecallStatus::is_recall_errors_Valid() const{
    return m_recall_errors_isValid;
}

qint64 OAIServerEndpointRecallStatus::getTotalRecallErrorsCount() const {
    return m_total_recall_errors_count;
}
void OAIServerEndpointRecallStatus::setTotalRecallErrorsCount(const qint64 &total_recall_errors_count) {
    m_total_recall_errors_count = total_recall_errors_count;
    m_total_recall_errors_count_isSet = true;
}

bool OAIServerEndpointRecallStatus::is_total_recall_errors_count_Set() const{
    return m_total_recall_errors_count_isSet;
}

bool OAIServerEndpointRecallStatus::is_total_recall_errors_count_Valid() const{
    return m_total_recall_errors_count_isValid;
}

bool OAIServerEndpointRecallStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_recall_errors_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerEndpointRecallStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
