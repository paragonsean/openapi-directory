/*
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters used when calling trigger change detection action on cloud endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:19.495115-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TriggerChangeDetectionParameters {
  /**
   * Change Detection Mode. Applies to a directory specified in directoryPath parameter.
   */
  @JsonAdapter(ChangeDetectionModeEnum.Adapter.class)
  public enum ChangeDetectionModeEnum {
    DEFAULT("Default"),
    
    RECURSIVE("Recursive");

    private String value;

    ChangeDetectionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeDetectionModeEnum fromValue(String value) {
      for (ChangeDetectionModeEnum b : ChangeDetectionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChangeDetectionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeDetectionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeDetectionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChangeDetectionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChangeDetectionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANGE_DETECTION_MODE = "changeDetectionMode";
  @SerializedName(SERIALIZED_NAME_CHANGE_DETECTION_MODE)
  private ChangeDetectionModeEnum changeDetectionMode;

  public static final String SERIALIZED_NAME_DIRECTORY_PATH = "directoryPath";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_PATH)
  private String directoryPath;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List<String> paths = new ArrayList<>();

  public TriggerChangeDetectionParameters() {
  }

  public TriggerChangeDetectionParameters changeDetectionMode(ChangeDetectionModeEnum changeDetectionMode) {
    this.changeDetectionMode = changeDetectionMode;
    return this;
  }

  /**
   * Change Detection Mode. Applies to a directory specified in directoryPath parameter.
   * @return changeDetectionMode
   */
  @javax.annotation.Nullable
  public ChangeDetectionModeEnum getChangeDetectionMode() {
    return changeDetectionMode;
  }

  public void setChangeDetectionMode(ChangeDetectionModeEnum changeDetectionMode) {
    this.changeDetectionMode = changeDetectionMode;
  }


  public TriggerChangeDetectionParameters directoryPath(String directoryPath) {
    this.directoryPath = directoryPath;
    return this;
  }

  /**
   * Relative path to a directory Azure File share for which change detection is to be performed.
   * @return directoryPath
   */
  @javax.annotation.Nullable
  public String getDirectoryPath() {
    return directoryPath;
  }

  public void setDirectoryPath(String directoryPath) {
    this.directoryPath = directoryPath;
  }


  public TriggerChangeDetectionParameters paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public TriggerChangeDetectionParameters addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

  /**
   * Array of relative paths on the Azure File share to be included in the change detection. Can be files and directories.
   * @return paths
   */
  @javax.annotation.Nullable
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TriggerChangeDetectionParameters triggerChangeDetectionParameters = (TriggerChangeDetectionParameters) o;
    return Objects.equals(this.changeDetectionMode, triggerChangeDetectionParameters.changeDetectionMode) &&
        Objects.equals(this.directoryPath, triggerChangeDetectionParameters.directoryPath) &&
        Objects.equals(this.paths, triggerChangeDetectionParameters.paths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeDetectionMode, directoryPath, paths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TriggerChangeDetectionParameters {\n");
    sb.append("    changeDetectionMode: ").append(toIndentedString(changeDetectionMode)).append("\n");
    sb.append("    directoryPath: ").append(toIndentedString(directoryPath)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeDetectionMode");
    openapiFields.add("directoryPath");
    openapiFields.add("paths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TriggerChangeDetectionParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TriggerChangeDetectionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TriggerChangeDetectionParameters is not found in the empty JSON string", TriggerChangeDetectionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TriggerChangeDetectionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TriggerChangeDetectionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changeDetectionMode") != null && !jsonObj.get("changeDetectionMode").isJsonNull()) && !jsonObj.get("changeDetectionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeDetectionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeDetectionMode").toString()));
      }
      // validate the optional field `changeDetectionMode`
      if (jsonObj.get("changeDetectionMode") != null && !jsonObj.get("changeDetectionMode").isJsonNull()) {
        ChangeDetectionModeEnum.validateJsonElement(jsonObj.get("changeDetectionMode"));
      }
      if ((jsonObj.get("directoryPath") != null && !jsonObj.get("directoryPath").isJsonNull()) && !jsonObj.get("directoryPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoryPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directoryPath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull() && !jsonObj.get("paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paths` to be an array in the JSON string but got `%s`", jsonObj.get("paths").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TriggerChangeDetectionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TriggerChangeDetectionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TriggerChangeDetectionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TriggerChangeDetectionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<TriggerChangeDetectionParameters>() {
           @Override
           public void write(JsonWriter out, TriggerChangeDetectionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TriggerChangeDetectionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TriggerChangeDetectionParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TriggerChangeDetectionParameters
   * @throws IOException if the JSON string is invalid with respect to TriggerChangeDetectionParameters
   */
  public static TriggerChangeDetectionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TriggerChangeDetectionParameters.class);
  }

  /**
   * Convert an instance of TriggerChangeDetectionParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

