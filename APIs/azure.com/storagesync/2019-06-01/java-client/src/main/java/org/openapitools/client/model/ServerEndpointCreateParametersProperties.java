/*
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FeatureStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServerEndpoint Properties object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:19.495115-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerEndpointCreateParametersProperties {
  public static final String SERIALIZED_NAME_CLOUD_TIERING = "cloudTiering";
  @SerializedName(SERIALIZED_NAME_CLOUD_TIERING)
  private FeatureStatus cloudTiering;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_OFFLINE_DATA_TRANSFER = "offlineDataTransfer";
  @SerializedName(SERIALIZED_NAME_OFFLINE_DATA_TRANSFER)
  private FeatureStatus offlineDataTransfer;

  public static final String SERIALIZED_NAME_OFFLINE_DATA_TRANSFER_SHARE_NAME = "offlineDataTransferShareName";
  @SerializedName(SERIALIZED_NAME_OFFLINE_DATA_TRANSFER_SHARE_NAME)
  private String offlineDataTransferShareName;

  public static final String SERIALIZED_NAME_SERVER_LOCAL_PATH = "serverLocalPath";
  @SerializedName(SERIALIZED_NAME_SERVER_LOCAL_PATH)
  private String serverLocalPath;

  public static final String SERIALIZED_NAME_SERVER_RESOURCE_ID = "serverResourceId";
  @SerializedName(SERIALIZED_NAME_SERVER_RESOURCE_ID)
  private String serverResourceId;

  public static final String SERIALIZED_NAME_TIER_FILES_OLDER_THAN_DAYS = "tierFilesOlderThanDays";
  @SerializedName(SERIALIZED_NAME_TIER_FILES_OLDER_THAN_DAYS)
  private Integer tierFilesOlderThanDays;

  public static final String SERIALIZED_NAME_VOLUME_FREE_SPACE_PERCENT = "volumeFreeSpacePercent";
  @SerializedName(SERIALIZED_NAME_VOLUME_FREE_SPACE_PERCENT)
  private Integer volumeFreeSpacePercent;

  public ServerEndpointCreateParametersProperties() {
  }

  public ServerEndpointCreateParametersProperties cloudTiering(FeatureStatus cloudTiering) {
    this.cloudTiering = cloudTiering;
    return this;
  }

  /**
   * Get cloudTiering
   * @return cloudTiering
   */
  @javax.annotation.Nullable
  public FeatureStatus getCloudTiering() {
    return cloudTiering;
  }

  public void setCloudTiering(FeatureStatus cloudTiering) {
    this.cloudTiering = cloudTiering;
  }


  public ServerEndpointCreateParametersProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Friendly Name
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ServerEndpointCreateParametersProperties offlineDataTransfer(FeatureStatus offlineDataTransfer) {
    this.offlineDataTransfer = offlineDataTransfer;
    return this;
  }

  /**
   * Get offlineDataTransfer
   * @return offlineDataTransfer
   */
  @javax.annotation.Nullable
  public FeatureStatus getOfflineDataTransfer() {
    return offlineDataTransfer;
  }

  public void setOfflineDataTransfer(FeatureStatus offlineDataTransfer) {
    this.offlineDataTransfer = offlineDataTransfer;
  }


  public ServerEndpointCreateParametersProperties offlineDataTransferShareName(String offlineDataTransferShareName) {
    this.offlineDataTransferShareName = offlineDataTransferShareName;
    return this;
  }

  /**
   * Offline data transfer share name
   * @return offlineDataTransferShareName
   */
  @javax.annotation.Nullable
  public String getOfflineDataTransferShareName() {
    return offlineDataTransferShareName;
  }

  public void setOfflineDataTransferShareName(String offlineDataTransferShareName) {
    this.offlineDataTransferShareName = offlineDataTransferShareName;
  }


  public ServerEndpointCreateParametersProperties serverLocalPath(String serverLocalPath) {
    this.serverLocalPath = serverLocalPath;
    return this;
  }

  /**
   * Server folder used for data synchronization
   * @return serverLocalPath
   */
  @javax.annotation.Nullable
  public String getServerLocalPath() {
    return serverLocalPath;
  }

  public void setServerLocalPath(String serverLocalPath) {
    this.serverLocalPath = serverLocalPath;
  }


  public ServerEndpointCreateParametersProperties serverResourceId(String serverResourceId) {
    this.serverResourceId = serverResourceId;
    return this;
  }

  /**
   * Arm resource identifier.
   * @return serverResourceId
   */
  @javax.annotation.Nullable
  public String getServerResourceId() {
    return serverResourceId;
  }

  public void setServerResourceId(String serverResourceId) {
    this.serverResourceId = serverResourceId;
  }


  public ServerEndpointCreateParametersProperties tierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
    this.tierFilesOlderThanDays = tierFilesOlderThanDays;
    return this;
  }

  /**
   * Tier files older than days.
   * minimum: 0
   * maximum: 2147483647
   * @return tierFilesOlderThanDays
   */
  @javax.annotation.Nullable
  public Integer getTierFilesOlderThanDays() {
    return tierFilesOlderThanDays;
  }

  public void setTierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
    this.tierFilesOlderThanDays = tierFilesOlderThanDays;
  }


  public ServerEndpointCreateParametersProperties volumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
    this.volumeFreeSpacePercent = volumeFreeSpacePercent;
    return this;
  }

  /**
   * Level of free space to be maintained by Cloud Tiering if it is enabled.
   * minimum: 0
   * maximum: 100
   * @return volumeFreeSpacePercent
   */
  @javax.annotation.Nullable
  public Integer getVolumeFreeSpacePercent() {
    return volumeFreeSpacePercent;
  }

  public void setVolumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
    this.volumeFreeSpacePercent = volumeFreeSpacePercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerEndpointCreateParametersProperties serverEndpointCreateParametersProperties = (ServerEndpointCreateParametersProperties) o;
    return Objects.equals(this.cloudTiering, serverEndpointCreateParametersProperties.cloudTiering) &&
        Objects.equals(this.friendlyName, serverEndpointCreateParametersProperties.friendlyName) &&
        Objects.equals(this.offlineDataTransfer, serverEndpointCreateParametersProperties.offlineDataTransfer) &&
        Objects.equals(this.offlineDataTransferShareName, serverEndpointCreateParametersProperties.offlineDataTransferShareName) &&
        Objects.equals(this.serverLocalPath, serverEndpointCreateParametersProperties.serverLocalPath) &&
        Objects.equals(this.serverResourceId, serverEndpointCreateParametersProperties.serverResourceId) &&
        Objects.equals(this.tierFilesOlderThanDays, serverEndpointCreateParametersProperties.tierFilesOlderThanDays) &&
        Objects.equals(this.volumeFreeSpacePercent, serverEndpointCreateParametersProperties.volumeFreeSpacePercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudTiering, friendlyName, offlineDataTransfer, offlineDataTransferShareName, serverLocalPath, serverResourceId, tierFilesOlderThanDays, volumeFreeSpacePercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerEndpointCreateParametersProperties {\n");
    sb.append("    cloudTiering: ").append(toIndentedString(cloudTiering)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    offlineDataTransfer: ").append(toIndentedString(offlineDataTransfer)).append("\n");
    sb.append("    offlineDataTransferShareName: ").append(toIndentedString(offlineDataTransferShareName)).append("\n");
    sb.append("    serverLocalPath: ").append(toIndentedString(serverLocalPath)).append("\n");
    sb.append("    serverResourceId: ").append(toIndentedString(serverResourceId)).append("\n");
    sb.append("    tierFilesOlderThanDays: ").append(toIndentedString(tierFilesOlderThanDays)).append("\n");
    sb.append("    volumeFreeSpacePercent: ").append(toIndentedString(volumeFreeSpacePercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudTiering");
    openapiFields.add("friendlyName");
    openapiFields.add("offlineDataTransfer");
    openapiFields.add("offlineDataTransferShareName");
    openapiFields.add("serverLocalPath");
    openapiFields.add("serverResourceId");
    openapiFields.add("tierFilesOlderThanDays");
    openapiFields.add("volumeFreeSpacePercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerEndpointCreateParametersProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerEndpointCreateParametersProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerEndpointCreateParametersProperties is not found in the empty JSON string", ServerEndpointCreateParametersProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerEndpointCreateParametersProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerEndpointCreateParametersProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudTiering`
      if (jsonObj.get("cloudTiering") != null && !jsonObj.get("cloudTiering").isJsonNull()) {
        FeatureStatus.validateJsonElement(jsonObj.get("cloudTiering"));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      // validate the optional field `offlineDataTransfer`
      if (jsonObj.get("offlineDataTransfer") != null && !jsonObj.get("offlineDataTransfer").isJsonNull()) {
        FeatureStatus.validateJsonElement(jsonObj.get("offlineDataTransfer"));
      }
      if ((jsonObj.get("offlineDataTransferShareName") != null && !jsonObj.get("offlineDataTransferShareName").isJsonNull()) && !jsonObj.get("offlineDataTransferShareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offlineDataTransferShareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offlineDataTransferShareName").toString()));
      }
      if ((jsonObj.get("serverLocalPath") != null && !jsonObj.get("serverLocalPath").isJsonNull()) && !jsonObj.get("serverLocalPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverLocalPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverLocalPath").toString()));
      }
      if ((jsonObj.get("serverResourceId") != null && !jsonObj.get("serverResourceId").isJsonNull()) && !jsonObj.get("serverResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerEndpointCreateParametersProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerEndpointCreateParametersProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerEndpointCreateParametersProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerEndpointCreateParametersProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerEndpointCreateParametersProperties>() {
           @Override
           public void write(JsonWriter out, ServerEndpointCreateParametersProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerEndpointCreateParametersProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerEndpointCreateParametersProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerEndpointCreateParametersProperties
   * @throws IOException if the JSON string is invalid with respect to ServerEndpointCreateParametersProperties
   */
  public static ServerEndpointCreateParametersProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerEndpointCreateParametersProperties.class);
  }

  /**
   * Convert an instance of ServerEndpointCreateParametersProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

