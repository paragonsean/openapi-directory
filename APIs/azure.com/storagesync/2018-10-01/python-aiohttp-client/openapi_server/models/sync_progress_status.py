# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.progress_type import ProgressType
from openapi_server import util


class SyncProgressStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_bytes: int=None, applied_item_count: int=None, per_item_error_count: int=None, progress_timestamp: datetime=None, sync_direction: ProgressType=None, total_bytes: int=None, total_item_count: int=None):
        """SyncProgressStatus - a model defined in OpenAPI

        :param applied_bytes: The applied_bytes of this SyncProgressStatus.
        :param applied_item_count: The applied_item_count of this SyncProgressStatus.
        :param per_item_error_count: The per_item_error_count of this SyncProgressStatus.
        :param progress_timestamp: The progress_timestamp of this SyncProgressStatus.
        :param sync_direction: The sync_direction of this SyncProgressStatus.
        :param total_bytes: The total_bytes of this SyncProgressStatus.
        :param total_item_count: The total_item_count of this SyncProgressStatus.
        """
        self.openapi_types = {
            'applied_bytes': int,
            'applied_item_count': int,
            'per_item_error_count': int,
            'progress_timestamp': datetime,
            'sync_direction': ProgressType,
            'total_bytes': int,
            'total_item_count': int
        }

        self.attribute_map = {
            'applied_bytes': 'appliedBytes',
            'applied_item_count': 'appliedItemCount',
            'per_item_error_count': 'perItemErrorCount',
            'progress_timestamp': 'progressTimestamp',
            'sync_direction': 'syncDirection',
            'total_bytes': 'totalBytes',
            'total_item_count': 'totalItemCount'
        }

        self._applied_bytes = applied_bytes
        self._applied_item_count = applied_item_count
        self._per_item_error_count = per_item_error_count
        self._progress_timestamp = progress_timestamp
        self._sync_direction = sync_direction
        self._total_bytes = total_bytes
        self._total_item_count = total_item_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncProgressStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncProgressStatus of this SyncProgressStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_bytes(self):
        """Gets the applied_bytes of this SyncProgressStatus.

        Applied bytes

        :return: The applied_bytes of this SyncProgressStatus.
        :rtype: int
        """
        return self._applied_bytes

    @applied_bytes.setter
    def applied_bytes(self, applied_bytes):
        """Sets the applied_bytes of this SyncProgressStatus.

        Applied bytes

        :param applied_bytes: The applied_bytes of this SyncProgressStatus.
        :type applied_bytes: int
        """
        if applied_bytes is not None and applied_bytes > 2147483647:
            raise ValueError("Invalid value for `applied_bytes`, must be a value less than or equal to `2147483647`")
        if applied_bytes is not None and applied_bytes < 0:
            raise ValueError("Invalid value for `applied_bytes`, must be a value greater than or equal to `0`")

        self._applied_bytes = applied_bytes

    @property
    def applied_item_count(self):
        """Gets the applied_item_count of this SyncProgressStatus.

        Applied item count.

        :return: The applied_item_count of this SyncProgressStatus.
        :rtype: int
        """
        return self._applied_item_count

    @applied_item_count.setter
    def applied_item_count(self, applied_item_count):
        """Sets the applied_item_count of this SyncProgressStatus.

        Applied item count.

        :param applied_item_count: The applied_item_count of this SyncProgressStatus.
        :type applied_item_count: int
        """
        if applied_item_count is not None and applied_item_count > 2147483647:
            raise ValueError("Invalid value for `applied_item_count`, must be a value less than or equal to `2147483647`")
        if applied_item_count is not None and applied_item_count < 0:
            raise ValueError("Invalid value for `applied_item_count`, must be a value greater than or equal to `0`")

        self._applied_item_count = applied_item_count

    @property
    def per_item_error_count(self):
        """Gets the per_item_error_count of this SyncProgressStatus.

        Per item error count

        :return: The per_item_error_count of this SyncProgressStatus.
        :rtype: int
        """
        return self._per_item_error_count

    @per_item_error_count.setter
    def per_item_error_count(self, per_item_error_count):
        """Sets the per_item_error_count of this SyncProgressStatus.

        Per item error count

        :param per_item_error_count: The per_item_error_count of this SyncProgressStatus.
        :type per_item_error_count: int
        """
        if per_item_error_count is not None and per_item_error_count > 2147483647:
            raise ValueError("Invalid value for `per_item_error_count`, must be a value less than or equal to `2147483647`")
        if per_item_error_count is not None and per_item_error_count < 0:
            raise ValueError("Invalid value for `per_item_error_count`, must be a value greater than or equal to `0`")

        self._per_item_error_count = per_item_error_count

    @property
    def progress_timestamp(self):
        """Gets the progress_timestamp of this SyncProgressStatus.

        Progress timestamp

        :return: The progress_timestamp of this SyncProgressStatus.
        :rtype: datetime
        """
        return self._progress_timestamp

    @progress_timestamp.setter
    def progress_timestamp(self, progress_timestamp):
        """Sets the progress_timestamp of this SyncProgressStatus.

        Progress timestamp

        :param progress_timestamp: The progress_timestamp of this SyncProgressStatus.
        :type progress_timestamp: datetime
        """

        self._progress_timestamp = progress_timestamp

    @property
    def sync_direction(self):
        """Gets the sync_direction of this SyncProgressStatus.


        :return: The sync_direction of this SyncProgressStatus.
        :rtype: ProgressType
        """
        return self._sync_direction

    @sync_direction.setter
    def sync_direction(self, sync_direction):
        """Sets the sync_direction of this SyncProgressStatus.


        :param sync_direction: The sync_direction of this SyncProgressStatus.
        :type sync_direction: ProgressType
        """

        self._sync_direction = sync_direction

    @property
    def total_bytes(self):
        """Gets the total_bytes of this SyncProgressStatus.

        Total bytes

        :return: The total_bytes of this SyncProgressStatus.
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this SyncProgressStatus.

        Total bytes

        :param total_bytes: The total_bytes of this SyncProgressStatus.
        :type total_bytes: int
        """
        if total_bytes is not None and total_bytes > 2147483647:
            raise ValueError("Invalid value for `total_bytes`, must be a value less than or equal to `2147483647`")
        if total_bytes is not None and total_bytes < 0:
            raise ValueError("Invalid value for `total_bytes`, must be a value greater than or equal to `0`")

        self._total_bytes = total_bytes

    @property
    def total_item_count(self):
        """Gets the total_item_count of this SyncProgressStatus.

        Total item count

        :return: The total_item_count of this SyncProgressStatus.
        :rtype: int
        """
        return self._total_item_count

    @total_item_count.setter
    def total_item_count(self, total_item_count):
        """Sets the total_item_count of this SyncProgressStatus.

        Total item count

        :param total_item_count: The total_item_count of this SyncProgressStatus.
        :type total_item_count: int
        """
        if total_item_count is not None and total_item_count > 2147483647:
            raise ValueError("Invalid value for `total_item_count`, must be a value less than or equal to `2147483647`")
        if total_item_count is not None and total_item_count < 0:
            raise ValueError("Invalid value for `total_item_count`, must be a value greater than or equal to `0`")

        self._total_item_count = total_item_count
