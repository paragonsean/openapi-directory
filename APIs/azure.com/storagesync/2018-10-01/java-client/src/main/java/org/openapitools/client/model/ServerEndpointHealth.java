/*
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.OfflineDataTransferState;
import org.openapitools.client.model.SyncProgressStatus;
import org.openapitools.client.model.SyncSessionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServerEndpoint Health object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:23.830391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerEndpointHealth {
  public static final String SERIALIZED_NAME_COMBINED_HEALTH = "combinedHealth";
  @SerializedName(SERIALIZED_NAME_COMBINED_HEALTH)
  private HealthState combinedHealth;

  public static final String SERIALIZED_NAME_CURRENT_PROGRESS = "currentProgress";
  @SerializedName(SERIALIZED_NAME_CURRENT_PROGRESS)
  private SyncProgressStatus currentProgress;

  public static final String SERIALIZED_NAME_DOWNLOAD_HEALTH = "downloadHealth";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_HEALTH)
  private HealthState downloadHealth;

  public static final String SERIALIZED_NAME_DOWNLOAD_STATUS = "downloadStatus";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_STATUS)
  private SyncSessionStatus downloadStatus;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "lastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private OffsetDateTime lastUpdatedTimestamp;

  public static final String SERIALIZED_NAME_OFFLINE_DATA_TRANSFER_STATUS = "offlineDataTransferStatus";
  @SerializedName(SERIALIZED_NAME_OFFLINE_DATA_TRANSFER_STATUS)
  private OfflineDataTransferState offlineDataTransferStatus;

  public static final String SERIALIZED_NAME_UPLOAD_HEALTH = "uploadHealth";
  @SerializedName(SERIALIZED_NAME_UPLOAD_HEALTH)
  private HealthState uploadHealth;

  public static final String SERIALIZED_NAME_UPLOAD_STATUS = "uploadStatus";
  @SerializedName(SERIALIZED_NAME_UPLOAD_STATUS)
  private SyncSessionStatus uploadStatus;

  public ServerEndpointHealth() {
  }

  public ServerEndpointHealth combinedHealth(HealthState combinedHealth) {
    this.combinedHealth = combinedHealth;
    return this;
  }

  /**
   * Get combinedHealth
   * @return combinedHealth
   */
  @javax.annotation.Nullable
  public HealthState getCombinedHealth() {
    return combinedHealth;
  }

  public void setCombinedHealth(HealthState combinedHealth) {
    this.combinedHealth = combinedHealth;
  }


  public ServerEndpointHealth currentProgress(SyncProgressStatus currentProgress) {
    this.currentProgress = currentProgress;
    return this;
  }

  /**
   * Get currentProgress
   * @return currentProgress
   */
  @javax.annotation.Nullable
  public SyncProgressStatus getCurrentProgress() {
    return currentProgress;
  }

  public void setCurrentProgress(SyncProgressStatus currentProgress) {
    this.currentProgress = currentProgress;
  }


  public ServerEndpointHealth downloadHealth(HealthState downloadHealth) {
    this.downloadHealth = downloadHealth;
    return this;
  }

  /**
   * Get downloadHealth
   * @return downloadHealth
   */
  @javax.annotation.Nullable
  public HealthState getDownloadHealth() {
    return downloadHealth;
  }

  public void setDownloadHealth(HealthState downloadHealth) {
    this.downloadHealth = downloadHealth;
  }


  public ServerEndpointHealth downloadStatus(SyncSessionStatus downloadStatus) {
    this.downloadStatus = downloadStatus;
    return this;
  }

  /**
   * Get downloadStatus
   * @return downloadStatus
   */
  @javax.annotation.Nullable
  public SyncSessionStatus getDownloadStatus() {
    return downloadStatus;
  }

  public void setDownloadStatus(SyncSessionStatus downloadStatus) {
    this.downloadStatus = downloadStatus;
  }


  public ServerEndpointHealth lastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Last Updated Timestamp
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }


  public ServerEndpointHealth offlineDataTransferStatus(OfflineDataTransferState offlineDataTransferStatus) {
    this.offlineDataTransferStatus = offlineDataTransferStatus;
    return this;
  }

  /**
   * Get offlineDataTransferStatus
   * @return offlineDataTransferStatus
   */
  @javax.annotation.Nullable
  public OfflineDataTransferState getOfflineDataTransferStatus() {
    return offlineDataTransferStatus;
  }

  public void setOfflineDataTransferStatus(OfflineDataTransferState offlineDataTransferStatus) {
    this.offlineDataTransferStatus = offlineDataTransferStatus;
  }


  public ServerEndpointHealth uploadHealth(HealthState uploadHealth) {
    this.uploadHealth = uploadHealth;
    return this;
  }

  /**
   * Get uploadHealth
   * @return uploadHealth
   */
  @javax.annotation.Nullable
  public HealthState getUploadHealth() {
    return uploadHealth;
  }

  public void setUploadHealth(HealthState uploadHealth) {
    this.uploadHealth = uploadHealth;
  }


  public ServerEndpointHealth uploadStatus(SyncSessionStatus uploadStatus) {
    this.uploadStatus = uploadStatus;
    return this;
  }

  /**
   * Get uploadStatus
   * @return uploadStatus
   */
  @javax.annotation.Nullable
  public SyncSessionStatus getUploadStatus() {
    return uploadStatus;
  }

  public void setUploadStatus(SyncSessionStatus uploadStatus) {
    this.uploadStatus = uploadStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerEndpointHealth serverEndpointHealth = (ServerEndpointHealth) o;
    return Objects.equals(this.combinedHealth, serverEndpointHealth.combinedHealth) &&
        Objects.equals(this.currentProgress, serverEndpointHealth.currentProgress) &&
        Objects.equals(this.downloadHealth, serverEndpointHealth.downloadHealth) &&
        Objects.equals(this.downloadStatus, serverEndpointHealth.downloadStatus) &&
        Objects.equals(this.lastUpdatedTimestamp, serverEndpointHealth.lastUpdatedTimestamp) &&
        Objects.equals(this.offlineDataTransferStatus, serverEndpointHealth.offlineDataTransferStatus) &&
        Objects.equals(this.uploadHealth, serverEndpointHealth.uploadHealth) &&
        Objects.equals(this.uploadStatus, serverEndpointHealth.uploadStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(combinedHealth, currentProgress, downloadHealth, downloadStatus, lastUpdatedTimestamp, offlineDataTransferStatus, uploadHealth, uploadStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerEndpointHealth {\n");
    sb.append("    combinedHealth: ").append(toIndentedString(combinedHealth)).append("\n");
    sb.append("    currentProgress: ").append(toIndentedString(currentProgress)).append("\n");
    sb.append("    downloadHealth: ").append(toIndentedString(downloadHealth)).append("\n");
    sb.append("    downloadStatus: ").append(toIndentedString(downloadStatus)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("    offlineDataTransferStatus: ").append(toIndentedString(offlineDataTransferStatus)).append("\n");
    sb.append("    uploadHealth: ").append(toIndentedString(uploadHealth)).append("\n");
    sb.append("    uploadStatus: ").append(toIndentedString(uploadStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("combinedHealth");
    openapiFields.add("currentProgress");
    openapiFields.add("downloadHealth");
    openapiFields.add("downloadStatus");
    openapiFields.add("lastUpdatedTimestamp");
    openapiFields.add("offlineDataTransferStatus");
    openapiFields.add("uploadHealth");
    openapiFields.add("uploadStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerEndpointHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerEndpointHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerEndpointHealth is not found in the empty JSON string", ServerEndpointHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerEndpointHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerEndpointHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `combinedHealth`
      if (jsonObj.get("combinedHealth") != null && !jsonObj.get("combinedHealth").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("combinedHealth"));
      }
      // validate the optional field `currentProgress`
      if (jsonObj.get("currentProgress") != null && !jsonObj.get("currentProgress").isJsonNull()) {
        SyncProgressStatus.validateJsonElement(jsonObj.get("currentProgress"));
      }
      // validate the optional field `downloadHealth`
      if (jsonObj.get("downloadHealth") != null && !jsonObj.get("downloadHealth").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("downloadHealth"));
      }
      // validate the optional field `downloadStatus`
      if (jsonObj.get("downloadStatus") != null && !jsonObj.get("downloadStatus").isJsonNull()) {
        SyncSessionStatus.validateJsonElement(jsonObj.get("downloadStatus"));
      }
      // validate the optional field `offlineDataTransferStatus`
      if (jsonObj.get("offlineDataTransferStatus") != null && !jsonObj.get("offlineDataTransferStatus").isJsonNull()) {
        OfflineDataTransferState.validateJsonElement(jsonObj.get("offlineDataTransferStatus"));
      }
      // validate the optional field `uploadHealth`
      if (jsonObj.get("uploadHealth") != null && !jsonObj.get("uploadHealth").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("uploadHealth"));
      }
      // validate the optional field `uploadStatus`
      if (jsonObj.get("uploadStatus") != null && !jsonObj.get("uploadStatus").isJsonNull()) {
        SyncSessionStatus.validateJsonElement(jsonObj.get("uploadStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerEndpointHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerEndpointHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerEndpointHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerEndpointHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerEndpointHealth>() {
           @Override
           public void write(JsonWriter out, ServerEndpointHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerEndpointHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerEndpointHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerEndpointHealth
   * @throws IOException if the JSON string is invalid with respect to ServerEndpointHealth
   */
  public static ServerEndpointHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerEndpointHealth.class);
  }

  /**
   * Convert an instance of ServerEndpointHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

