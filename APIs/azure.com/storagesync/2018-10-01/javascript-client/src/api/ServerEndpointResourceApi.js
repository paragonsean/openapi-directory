/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RecallActionParameters from '../model/RecallActionParameters';
import ServerEndpoint from '../model/ServerEndpoint';
import ServerEndpointArray from '../model/ServerEndpointArray';
import ServerEndpointCreateParameters from '../model/ServerEndpointCreateParameters';
import ServerEndpointUpdateParameters from '../model/ServerEndpointUpdateParameters';
import StorageSyncError from '../model/StorageSyncError';

/**
* ServerEndpointResource service.
* @module api/ServerEndpointResourceApi
* @version 2018-10-01
*/
export default class ServerEndpointResourceApi {

    /**
    * Constructs a new ServerEndpointResourceApi. 
    * @alias module:api/ServerEndpointResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serverEndpointsCreate operation.
     * @callback module:api/ServerEndpointResourceApi~serverEndpointsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new ServerEndpoint.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} syncGroupName Name of Sync Group resource.
     * @param {String} serverEndpointName Name of Server Endpoint object.
     * @param {module:model/ServerEndpointCreateParameters} parameters Body of Server Endpoint object.
     * @param {module:api/ServerEndpointResourceApi~serverEndpointsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerEndpoint}
     */
    serverEndpointsCreate(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverEndpointsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverEndpointsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverEndpointsCreate");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsCreate");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling serverEndpointsCreate");
      }
      // verify the required parameter 'serverEndpointName' is set
      if (serverEndpointName === undefined || serverEndpointName === null) {
        throw new Error("Missing the required parameter 'serverEndpointName' when calling serverEndpointsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling serverEndpointsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'syncGroupName': syncGroupName,
        'serverEndpointName': serverEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServerEndpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverEndpointsDelete operation.
     * @callback module:api/ServerEndpointResourceApi~serverEndpointsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a given ServerEndpoint.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} syncGroupName Name of Sync Group resource.
     * @param {String} serverEndpointName Name of Server Endpoint object.
     * @param {module:api/ServerEndpointResourceApi~serverEndpointsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serverEndpointsDelete(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverEndpointsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverEndpointsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverEndpointsDelete");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsDelete");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling serverEndpointsDelete");
      }
      // verify the required parameter 'serverEndpointName' is set
      if (serverEndpointName === undefined || serverEndpointName === null) {
        throw new Error("Missing the required parameter 'serverEndpointName' when calling serverEndpointsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'syncGroupName': syncGroupName,
        'serverEndpointName': serverEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverEndpointsGet operation.
     * @callback module:api/ServerEndpointResourceApi~serverEndpointsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a ServerEndpoint.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} syncGroupName Name of Sync Group resource.
     * @param {String} serverEndpointName Name of Server Endpoint object.
     * @param {module:api/ServerEndpointResourceApi~serverEndpointsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerEndpoint}
     */
    serverEndpointsGet(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverEndpointsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverEndpointsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverEndpointsGet");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsGet");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling serverEndpointsGet");
      }
      // verify the required parameter 'serverEndpointName' is set
      if (serverEndpointName === undefined || serverEndpointName === null) {
        throw new Error("Missing the required parameter 'serverEndpointName' when calling serverEndpointsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'syncGroupName': syncGroupName,
        'serverEndpointName': serverEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerEndpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverEndpointsListBySyncGroup operation.
     * @callback module:api/ServerEndpointResourceApi~serverEndpointsListBySyncGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerEndpointArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a ServerEndpoint list.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} syncGroupName Name of Sync Group resource.
     * @param {module:api/ServerEndpointResourceApi~serverEndpointsListBySyncGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerEndpointArray}
     */
    serverEndpointsListBySyncGroup(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverEndpointsListBySyncGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverEndpointsListBySyncGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverEndpointsListBySyncGroup");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsListBySyncGroup");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling serverEndpointsListBySyncGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'syncGroupName': syncGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerEndpointArray;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverEndpointsRecallAction operation.
     * @callback module:api/ServerEndpointResourceApi~serverEndpointsRecallActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recall a server endpoint.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} syncGroupName Name of Sync Group resource.
     * @param {String} serverEndpointName Name of Server Endpoint object.
     * @param {module:model/RecallActionParameters} parameters Body of Recall Action object.
     * @param {module:api/ServerEndpointResourceApi~serverEndpointsRecallActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serverEndpointsRecallAction(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverEndpointsRecallAction");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverEndpointsRecallAction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverEndpointsRecallAction");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsRecallAction");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling serverEndpointsRecallAction");
      }
      // verify the required parameter 'serverEndpointName' is set
      if (serverEndpointName === undefined || serverEndpointName === null) {
        throw new Error("Missing the required parameter 'serverEndpointName' when calling serverEndpointsRecallAction");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling serverEndpointsRecallAction");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'syncGroupName': syncGroupName,
        'serverEndpointName': serverEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}/recallAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverEndpointsUpdate operation.
     * @callback module:api/ServerEndpointResourceApi~serverEndpointsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch a given ServerEndpoint.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} syncGroupName Name of Sync Group resource.
     * @param {String} serverEndpointName Name of Server Endpoint object.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerEndpointUpdateParameters} [parameters] Any of the properties applicable in PUT request.
     * @param {module:api/ServerEndpointResourceApi~serverEndpointsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerEndpoint}
     */
    serverEndpointsUpdate(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, syncGroupName, serverEndpointName, opts, callback) {
      opts = opts || {};
      let postBody = opts['parameters'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverEndpointsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverEndpointsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverEndpointsUpdate");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling serverEndpointsUpdate");
      }
      // verify the required parameter 'syncGroupName' is set
      if (syncGroupName === undefined || syncGroupName === null) {
        throw new Error("Missing the required parameter 'syncGroupName' when calling serverEndpointsUpdate");
      }
      // verify the required parameter 'serverEndpointName' is set
      if (serverEndpointName === undefined || serverEndpointName === null) {
        throw new Error("Missing the required parameter 'serverEndpointName' when calling serverEndpointsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'syncGroupName': syncGroupName,
        'serverEndpointName': serverEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServerEndpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
