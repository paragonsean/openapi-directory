/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerEndpointProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerEndpointProperties::OAIServerEndpointProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerEndpointProperties::OAIServerEndpointProperties() {
    this->initializeModel();
}

OAIServerEndpointProperties::~OAIServerEndpointProperties() {}

void OAIServerEndpointProperties::initializeModel() {

    m_cloud_tiering_isSet = false;
    m_cloud_tiering_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_last_operation_name_isSet = false;
    m_last_operation_name_isValid = false;

    m_last_workflow_id_isSet = false;
    m_last_workflow_id_isValid = false;

    m_offline_data_transfer_isSet = false;
    m_offline_data_transfer_isValid = false;

    m_offline_data_transfer_share_name_isSet = false;
    m_offline_data_transfer_share_name_isValid = false;

    m_offline_data_transfer_storage_account_resource_id_isSet = false;
    m_offline_data_transfer_storage_account_resource_id_isValid = false;

    m_offline_data_transfer_storage_account_tenant_id_isSet = false;
    m_offline_data_transfer_storage_account_tenant_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_server_local_path_isSet = false;
    m_server_local_path_isValid = false;

    m_server_resource_id_isSet = false;
    m_server_resource_id_isValid = false;

    m_sync_status_isSet = false;
    m_sync_status_isValid = false;

    m_tier_files_older_than_days_isSet = false;
    m_tier_files_older_than_days_isValid = false;

    m_volume_free_space_percent_isSet = false;
    m_volume_free_space_percent_isValid = false;
}

void OAIServerEndpointProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerEndpointProperties::fromJsonObject(QJsonObject json) {

    m_cloud_tiering_isValid = ::OpenAPI::fromJsonValue(m_cloud_tiering, json[QString("cloudTiering")]);
    m_cloud_tiering_isSet = !json[QString("cloudTiering")].isNull() && m_cloud_tiering_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_last_operation_name_isValid = ::OpenAPI::fromJsonValue(m_last_operation_name, json[QString("lastOperationName")]);
    m_last_operation_name_isSet = !json[QString("lastOperationName")].isNull() && m_last_operation_name_isValid;

    m_last_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_last_workflow_id, json[QString("lastWorkflowId")]);
    m_last_workflow_id_isSet = !json[QString("lastWorkflowId")].isNull() && m_last_workflow_id_isValid;

    m_offline_data_transfer_isValid = ::OpenAPI::fromJsonValue(m_offline_data_transfer, json[QString("offlineDataTransfer")]);
    m_offline_data_transfer_isSet = !json[QString("offlineDataTransfer")].isNull() && m_offline_data_transfer_isValid;

    m_offline_data_transfer_share_name_isValid = ::OpenAPI::fromJsonValue(m_offline_data_transfer_share_name, json[QString("offlineDataTransferShareName")]);
    m_offline_data_transfer_share_name_isSet = !json[QString("offlineDataTransferShareName")].isNull() && m_offline_data_transfer_share_name_isValid;

    m_offline_data_transfer_storage_account_resource_id_isValid = ::OpenAPI::fromJsonValue(m_offline_data_transfer_storage_account_resource_id, json[QString("offlineDataTransferStorageAccountResourceId")]);
    m_offline_data_transfer_storage_account_resource_id_isSet = !json[QString("offlineDataTransferStorageAccountResourceId")].isNull() && m_offline_data_transfer_storage_account_resource_id_isValid;

    m_offline_data_transfer_storage_account_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_offline_data_transfer_storage_account_tenant_id, json[QString("offlineDataTransferStorageAccountTenantId")]);
    m_offline_data_transfer_storage_account_tenant_id_isSet = !json[QString("offlineDataTransferStorageAccountTenantId")].isNull() && m_offline_data_transfer_storage_account_tenant_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_server_local_path_isValid = ::OpenAPI::fromJsonValue(m_server_local_path, json[QString("serverLocalPath")]);
    m_server_local_path_isSet = !json[QString("serverLocalPath")].isNull() && m_server_local_path_isValid;

    m_server_resource_id_isValid = ::OpenAPI::fromJsonValue(m_server_resource_id, json[QString("serverResourceId")]);
    m_server_resource_id_isSet = !json[QString("serverResourceId")].isNull() && m_server_resource_id_isValid;

    m_sync_status_isValid = ::OpenAPI::fromJsonValue(m_sync_status, json[QString("syncStatus")]);
    m_sync_status_isSet = !json[QString("syncStatus")].isNull() && m_sync_status_isValid;

    m_tier_files_older_than_days_isValid = ::OpenAPI::fromJsonValue(m_tier_files_older_than_days, json[QString("tierFilesOlderThanDays")]);
    m_tier_files_older_than_days_isSet = !json[QString("tierFilesOlderThanDays")].isNull() && m_tier_files_older_than_days_isValid;

    m_volume_free_space_percent_isValid = ::OpenAPI::fromJsonValue(m_volume_free_space_percent, json[QString("volumeFreeSpacePercent")]);
    m_volume_free_space_percent_isSet = !json[QString("volumeFreeSpacePercent")].isNull() && m_volume_free_space_percent_isValid;
}

QString OAIServerEndpointProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerEndpointProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_tiering.isSet()) {
        obj.insert(QString("cloudTiering"), ::OpenAPI::toJsonValue(m_cloud_tiering));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_last_operation_name_isSet) {
        obj.insert(QString("lastOperationName"), ::OpenAPI::toJsonValue(m_last_operation_name));
    }
    if (m_last_workflow_id_isSet) {
        obj.insert(QString("lastWorkflowId"), ::OpenAPI::toJsonValue(m_last_workflow_id));
    }
    if (m_offline_data_transfer.isSet()) {
        obj.insert(QString("offlineDataTransfer"), ::OpenAPI::toJsonValue(m_offline_data_transfer));
    }
    if (m_offline_data_transfer_share_name_isSet) {
        obj.insert(QString("offlineDataTransferShareName"), ::OpenAPI::toJsonValue(m_offline_data_transfer_share_name));
    }
    if (m_offline_data_transfer_storage_account_resource_id_isSet) {
        obj.insert(QString("offlineDataTransferStorageAccountResourceId"), ::OpenAPI::toJsonValue(m_offline_data_transfer_storage_account_resource_id));
    }
    if (m_offline_data_transfer_storage_account_tenant_id_isSet) {
        obj.insert(QString("offlineDataTransferStorageAccountTenantId"), ::OpenAPI::toJsonValue(m_offline_data_transfer_storage_account_tenant_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_server_local_path_isSet) {
        obj.insert(QString("serverLocalPath"), ::OpenAPI::toJsonValue(m_server_local_path));
    }
    if (m_server_resource_id_isSet) {
        obj.insert(QString("serverResourceId"), ::OpenAPI::toJsonValue(m_server_resource_id));
    }
    if (m_sync_status.isSet()) {
        obj.insert(QString("syncStatus"), ::OpenAPI::toJsonValue(m_sync_status));
    }
    if (m_tier_files_older_than_days_isSet) {
        obj.insert(QString("tierFilesOlderThanDays"), ::OpenAPI::toJsonValue(m_tier_files_older_than_days));
    }
    if (m_volume_free_space_percent_isSet) {
        obj.insert(QString("volumeFreeSpacePercent"), ::OpenAPI::toJsonValue(m_volume_free_space_percent));
    }
    return obj;
}

OAIFeatureStatus OAIServerEndpointProperties::getCloudTiering() const {
    return m_cloud_tiering;
}
void OAIServerEndpointProperties::setCloudTiering(const OAIFeatureStatus &cloud_tiering) {
    m_cloud_tiering = cloud_tiering;
    m_cloud_tiering_isSet = true;
}

bool OAIServerEndpointProperties::is_cloud_tiering_Set() const{
    return m_cloud_tiering_isSet;
}

bool OAIServerEndpointProperties::is_cloud_tiering_Valid() const{
    return m_cloud_tiering_isValid;
}

QString OAIServerEndpointProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIServerEndpointProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIServerEndpointProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIServerEndpointProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIServerEndpointProperties::getLastOperationName() const {
    return m_last_operation_name;
}
void OAIServerEndpointProperties::setLastOperationName(const QString &last_operation_name) {
    m_last_operation_name = last_operation_name;
    m_last_operation_name_isSet = true;
}

bool OAIServerEndpointProperties::is_last_operation_name_Set() const{
    return m_last_operation_name_isSet;
}

bool OAIServerEndpointProperties::is_last_operation_name_Valid() const{
    return m_last_operation_name_isValid;
}

QString OAIServerEndpointProperties::getLastWorkflowId() const {
    return m_last_workflow_id;
}
void OAIServerEndpointProperties::setLastWorkflowId(const QString &last_workflow_id) {
    m_last_workflow_id = last_workflow_id;
    m_last_workflow_id_isSet = true;
}

bool OAIServerEndpointProperties::is_last_workflow_id_Set() const{
    return m_last_workflow_id_isSet;
}

bool OAIServerEndpointProperties::is_last_workflow_id_Valid() const{
    return m_last_workflow_id_isValid;
}

OAIFeatureStatus OAIServerEndpointProperties::getOfflineDataTransfer() const {
    return m_offline_data_transfer;
}
void OAIServerEndpointProperties::setOfflineDataTransfer(const OAIFeatureStatus &offline_data_transfer) {
    m_offline_data_transfer = offline_data_transfer;
    m_offline_data_transfer_isSet = true;
}

bool OAIServerEndpointProperties::is_offline_data_transfer_Set() const{
    return m_offline_data_transfer_isSet;
}

bool OAIServerEndpointProperties::is_offline_data_transfer_Valid() const{
    return m_offline_data_transfer_isValid;
}

QString OAIServerEndpointProperties::getOfflineDataTransferShareName() const {
    return m_offline_data_transfer_share_name;
}
void OAIServerEndpointProperties::setOfflineDataTransferShareName(const QString &offline_data_transfer_share_name) {
    m_offline_data_transfer_share_name = offline_data_transfer_share_name;
    m_offline_data_transfer_share_name_isSet = true;
}

bool OAIServerEndpointProperties::is_offline_data_transfer_share_name_Set() const{
    return m_offline_data_transfer_share_name_isSet;
}

bool OAIServerEndpointProperties::is_offline_data_transfer_share_name_Valid() const{
    return m_offline_data_transfer_share_name_isValid;
}

QString OAIServerEndpointProperties::getOfflineDataTransferStorageAccountResourceId() const {
    return m_offline_data_transfer_storage_account_resource_id;
}
void OAIServerEndpointProperties::setOfflineDataTransferStorageAccountResourceId(const QString &offline_data_transfer_storage_account_resource_id) {
    m_offline_data_transfer_storage_account_resource_id = offline_data_transfer_storage_account_resource_id;
    m_offline_data_transfer_storage_account_resource_id_isSet = true;
}

bool OAIServerEndpointProperties::is_offline_data_transfer_storage_account_resource_id_Set() const{
    return m_offline_data_transfer_storage_account_resource_id_isSet;
}

bool OAIServerEndpointProperties::is_offline_data_transfer_storage_account_resource_id_Valid() const{
    return m_offline_data_transfer_storage_account_resource_id_isValid;
}

QString OAIServerEndpointProperties::getOfflineDataTransferStorageAccountTenantId() const {
    return m_offline_data_transfer_storage_account_tenant_id;
}
void OAIServerEndpointProperties::setOfflineDataTransferStorageAccountTenantId(const QString &offline_data_transfer_storage_account_tenant_id) {
    m_offline_data_transfer_storage_account_tenant_id = offline_data_transfer_storage_account_tenant_id;
    m_offline_data_transfer_storage_account_tenant_id_isSet = true;
}

bool OAIServerEndpointProperties::is_offline_data_transfer_storage_account_tenant_id_Set() const{
    return m_offline_data_transfer_storage_account_tenant_id_isSet;
}

bool OAIServerEndpointProperties::is_offline_data_transfer_storage_account_tenant_id_Valid() const{
    return m_offline_data_transfer_storage_account_tenant_id_isValid;
}

QString OAIServerEndpointProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIServerEndpointProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIServerEndpointProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIServerEndpointProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIServerEndpointProperties::getServerLocalPath() const {
    return m_server_local_path;
}
void OAIServerEndpointProperties::setServerLocalPath(const QString &server_local_path) {
    m_server_local_path = server_local_path;
    m_server_local_path_isSet = true;
}

bool OAIServerEndpointProperties::is_server_local_path_Set() const{
    return m_server_local_path_isSet;
}

bool OAIServerEndpointProperties::is_server_local_path_Valid() const{
    return m_server_local_path_isValid;
}

QString OAIServerEndpointProperties::getServerResourceId() const {
    return m_server_resource_id;
}
void OAIServerEndpointProperties::setServerResourceId(const QString &server_resource_id) {
    m_server_resource_id = server_resource_id;
    m_server_resource_id_isSet = true;
}

bool OAIServerEndpointProperties::is_server_resource_id_Set() const{
    return m_server_resource_id_isSet;
}

bool OAIServerEndpointProperties::is_server_resource_id_Valid() const{
    return m_server_resource_id_isValid;
}

OAIServerEndpointHealth OAIServerEndpointProperties::getSyncStatus() const {
    return m_sync_status;
}
void OAIServerEndpointProperties::setSyncStatus(const OAIServerEndpointHealth &sync_status) {
    m_sync_status = sync_status;
    m_sync_status_isSet = true;
}

bool OAIServerEndpointProperties::is_sync_status_Set() const{
    return m_sync_status_isSet;
}

bool OAIServerEndpointProperties::is_sync_status_Valid() const{
    return m_sync_status_isValid;
}

qint32 OAIServerEndpointProperties::getTierFilesOlderThanDays() const {
    return m_tier_files_older_than_days;
}
void OAIServerEndpointProperties::setTierFilesOlderThanDays(const qint32 &tier_files_older_than_days) {
    m_tier_files_older_than_days = tier_files_older_than_days;
    m_tier_files_older_than_days_isSet = true;
}

bool OAIServerEndpointProperties::is_tier_files_older_than_days_Set() const{
    return m_tier_files_older_than_days_isSet;
}

bool OAIServerEndpointProperties::is_tier_files_older_than_days_Valid() const{
    return m_tier_files_older_than_days_isValid;
}

qint32 OAIServerEndpointProperties::getVolumeFreeSpacePercent() const {
    return m_volume_free_space_percent;
}
void OAIServerEndpointProperties::setVolumeFreeSpacePercent(const qint32 &volume_free_space_percent) {
    m_volume_free_space_percent = volume_free_space_percent;
    m_volume_free_space_percent_isSet = true;
}

bool OAIServerEndpointProperties::is_volume_free_space_percent_Set() const{
    return m_volume_free_space_percent_isSet;
}

bool OAIServerEndpointProperties::is_volume_free_space_percent_Valid() const{
    return m_volume_free_space_percent_isValid;
}

bool OAIServerEndpointProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_tiering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_data_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_data_transfer_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_data_transfer_storage_account_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_data_transfer_storage_account_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_files_older_than_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_free_space_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerEndpointProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
