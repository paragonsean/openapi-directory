/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerEndpointHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerEndpointHealth::OAIServerEndpointHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerEndpointHealth::OAIServerEndpointHealth() {
    this->initializeModel();
}

OAIServerEndpointHealth::~OAIServerEndpointHealth() {}

void OAIServerEndpointHealth::initializeModel() {

    m_combined_health_isSet = false;
    m_combined_health_isValid = false;

    m_current_progress_isSet = false;
    m_current_progress_isValid = false;

    m_download_health_isSet = false;
    m_download_health_isValid = false;

    m_download_status_isSet = false;
    m_download_status_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_offline_data_transfer_status_isSet = false;
    m_offline_data_transfer_status_isValid = false;

    m_upload_health_isSet = false;
    m_upload_health_isValid = false;

    m_upload_status_isSet = false;
    m_upload_status_isValid = false;
}

void OAIServerEndpointHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerEndpointHealth::fromJsonObject(QJsonObject json) {

    m_combined_health_isValid = ::OpenAPI::fromJsonValue(m_combined_health, json[QString("combinedHealth")]);
    m_combined_health_isSet = !json[QString("combinedHealth")].isNull() && m_combined_health_isValid;

    m_current_progress_isValid = ::OpenAPI::fromJsonValue(m_current_progress, json[QString("currentProgress")]);
    m_current_progress_isSet = !json[QString("currentProgress")].isNull() && m_current_progress_isValid;

    m_download_health_isValid = ::OpenAPI::fromJsonValue(m_download_health, json[QString("downloadHealth")]);
    m_download_health_isSet = !json[QString("downloadHealth")].isNull() && m_download_health_isValid;

    m_download_status_isValid = ::OpenAPI::fromJsonValue(m_download_status, json[QString("downloadStatus")]);
    m_download_status_isSet = !json[QString("downloadStatus")].isNull() && m_download_status_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("lastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("lastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_offline_data_transfer_status_isValid = ::OpenAPI::fromJsonValue(m_offline_data_transfer_status, json[QString("offlineDataTransferStatus")]);
    m_offline_data_transfer_status_isSet = !json[QString("offlineDataTransferStatus")].isNull() && m_offline_data_transfer_status_isValid;

    m_upload_health_isValid = ::OpenAPI::fromJsonValue(m_upload_health, json[QString("uploadHealth")]);
    m_upload_health_isSet = !json[QString("uploadHealth")].isNull() && m_upload_health_isValid;

    m_upload_status_isValid = ::OpenAPI::fromJsonValue(m_upload_status, json[QString("uploadStatus")]);
    m_upload_status_isSet = !json[QString("uploadStatus")].isNull() && m_upload_status_isValid;
}

QString OAIServerEndpointHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerEndpointHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_combined_health.isSet()) {
        obj.insert(QString("combinedHealth"), ::OpenAPI::toJsonValue(m_combined_health));
    }
    if (m_current_progress.isSet()) {
        obj.insert(QString("currentProgress"), ::OpenAPI::toJsonValue(m_current_progress));
    }
    if (m_download_health.isSet()) {
        obj.insert(QString("downloadHealth"), ::OpenAPI::toJsonValue(m_download_health));
    }
    if (m_download_status.isSet()) {
        obj.insert(QString("downloadStatus"), ::OpenAPI::toJsonValue(m_download_status));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("lastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_offline_data_transfer_status.isSet()) {
        obj.insert(QString("offlineDataTransferStatus"), ::OpenAPI::toJsonValue(m_offline_data_transfer_status));
    }
    if (m_upload_health.isSet()) {
        obj.insert(QString("uploadHealth"), ::OpenAPI::toJsonValue(m_upload_health));
    }
    if (m_upload_status.isSet()) {
        obj.insert(QString("uploadStatus"), ::OpenAPI::toJsonValue(m_upload_status));
    }
    return obj;
}

OAIHealthState OAIServerEndpointHealth::getCombinedHealth() const {
    return m_combined_health;
}
void OAIServerEndpointHealth::setCombinedHealth(const OAIHealthState &combined_health) {
    m_combined_health = combined_health;
    m_combined_health_isSet = true;
}

bool OAIServerEndpointHealth::is_combined_health_Set() const{
    return m_combined_health_isSet;
}

bool OAIServerEndpointHealth::is_combined_health_Valid() const{
    return m_combined_health_isValid;
}

OAISyncProgressStatus OAIServerEndpointHealth::getCurrentProgress() const {
    return m_current_progress;
}
void OAIServerEndpointHealth::setCurrentProgress(const OAISyncProgressStatus &current_progress) {
    m_current_progress = current_progress;
    m_current_progress_isSet = true;
}

bool OAIServerEndpointHealth::is_current_progress_Set() const{
    return m_current_progress_isSet;
}

bool OAIServerEndpointHealth::is_current_progress_Valid() const{
    return m_current_progress_isValid;
}

OAIHealthState OAIServerEndpointHealth::getDownloadHealth() const {
    return m_download_health;
}
void OAIServerEndpointHealth::setDownloadHealth(const OAIHealthState &download_health) {
    m_download_health = download_health;
    m_download_health_isSet = true;
}

bool OAIServerEndpointHealth::is_download_health_Set() const{
    return m_download_health_isSet;
}

bool OAIServerEndpointHealth::is_download_health_Valid() const{
    return m_download_health_isValid;
}

OAISyncSessionStatus OAIServerEndpointHealth::getDownloadStatus() const {
    return m_download_status;
}
void OAIServerEndpointHealth::setDownloadStatus(const OAISyncSessionStatus &download_status) {
    m_download_status = download_status;
    m_download_status_isSet = true;
}

bool OAIServerEndpointHealth::is_download_status_Set() const{
    return m_download_status_isSet;
}

bool OAIServerEndpointHealth::is_download_status_Valid() const{
    return m_download_status_isValid;
}

QDateTime OAIServerEndpointHealth::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIServerEndpointHealth::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIServerEndpointHealth::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIServerEndpointHealth::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

OAIOfflineDataTransferState OAIServerEndpointHealth::getOfflineDataTransferStatus() const {
    return m_offline_data_transfer_status;
}
void OAIServerEndpointHealth::setOfflineDataTransferStatus(const OAIOfflineDataTransferState &offline_data_transfer_status) {
    m_offline_data_transfer_status = offline_data_transfer_status;
    m_offline_data_transfer_status_isSet = true;
}

bool OAIServerEndpointHealth::is_offline_data_transfer_status_Set() const{
    return m_offline_data_transfer_status_isSet;
}

bool OAIServerEndpointHealth::is_offline_data_transfer_status_Valid() const{
    return m_offline_data_transfer_status_isValid;
}

OAIHealthState OAIServerEndpointHealth::getUploadHealth() const {
    return m_upload_health;
}
void OAIServerEndpointHealth::setUploadHealth(const OAIHealthState &upload_health) {
    m_upload_health = upload_health;
    m_upload_health_isSet = true;
}

bool OAIServerEndpointHealth::is_upload_health_Set() const{
    return m_upload_health_isSet;
}

bool OAIServerEndpointHealth::is_upload_health_Valid() const{
    return m_upload_health_isValid;
}

OAISyncSessionStatus OAIServerEndpointHealth::getUploadStatus() const {
    return m_upload_status;
}
void OAIServerEndpointHealth::setUploadStatus(const OAISyncSessionStatus &upload_status) {
    m_upload_status = upload_status;
    m_upload_status_isSet = true;
}

bool OAIServerEndpointHealth::is_upload_status_Set() const{
    return m_upload_status_isSet;
}

bool OAIServerEndpointHealth::is_upload_status_Valid() const{
    return m_upload_status_isValid;
}

bool OAIServerEndpointHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_combined_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_data_transfer_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerEndpointHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
