/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncProgressStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncProgressStatus::OAISyncProgressStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncProgressStatus::OAISyncProgressStatus() {
    this->initializeModel();
}

OAISyncProgressStatus::~OAISyncProgressStatus() {}

void OAISyncProgressStatus::initializeModel() {

    m_applied_bytes_isSet = false;
    m_applied_bytes_isValid = false;

    m_applied_item_count_isSet = false;
    m_applied_item_count_isValid = false;

    m_per_item_error_count_isSet = false;
    m_per_item_error_count_isValid = false;

    m_progress_timestamp_isSet = false;
    m_progress_timestamp_isValid = false;

    m_sync_direction_isSet = false;
    m_sync_direction_isValid = false;

    m_total_bytes_isSet = false;
    m_total_bytes_isValid = false;

    m_total_item_count_isSet = false;
    m_total_item_count_isValid = false;
}

void OAISyncProgressStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncProgressStatus::fromJsonObject(QJsonObject json) {

    m_applied_bytes_isValid = ::OpenAPI::fromJsonValue(m_applied_bytes, json[QString("appliedBytes")]);
    m_applied_bytes_isSet = !json[QString("appliedBytes")].isNull() && m_applied_bytes_isValid;

    m_applied_item_count_isValid = ::OpenAPI::fromJsonValue(m_applied_item_count, json[QString("appliedItemCount")]);
    m_applied_item_count_isSet = !json[QString("appliedItemCount")].isNull() && m_applied_item_count_isValid;

    m_per_item_error_count_isValid = ::OpenAPI::fromJsonValue(m_per_item_error_count, json[QString("perItemErrorCount")]);
    m_per_item_error_count_isSet = !json[QString("perItemErrorCount")].isNull() && m_per_item_error_count_isValid;

    m_progress_timestamp_isValid = ::OpenAPI::fromJsonValue(m_progress_timestamp, json[QString("progressTimestamp")]);
    m_progress_timestamp_isSet = !json[QString("progressTimestamp")].isNull() && m_progress_timestamp_isValid;

    m_sync_direction_isValid = ::OpenAPI::fromJsonValue(m_sync_direction, json[QString("syncDirection")]);
    m_sync_direction_isSet = !json[QString("syncDirection")].isNull() && m_sync_direction_isValid;

    m_total_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_bytes, json[QString("totalBytes")]);
    m_total_bytes_isSet = !json[QString("totalBytes")].isNull() && m_total_bytes_isValid;

    m_total_item_count_isValid = ::OpenAPI::fromJsonValue(m_total_item_count, json[QString("totalItemCount")]);
    m_total_item_count_isSet = !json[QString("totalItemCount")].isNull() && m_total_item_count_isValid;
}

QString OAISyncProgressStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncProgressStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_bytes_isSet) {
        obj.insert(QString("appliedBytes"), ::OpenAPI::toJsonValue(m_applied_bytes));
    }
    if (m_applied_item_count_isSet) {
        obj.insert(QString("appliedItemCount"), ::OpenAPI::toJsonValue(m_applied_item_count));
    }
    if (m_per_item_error_count_isSet) {
        obj.insert(QString("perItemErrorCount"), ::OpenAPI::toJsonValue(m_per_item_error_count));
    }
    if (m_progress_timestamp_isSet) {
        obj.insert(QString("progressTimestamp"), ::OpenAPI::toJsonValue(m_progress_timestamp));
    }
    if (m_sync_direction.isSet()) {
        obj.insert(QString("syncDirection"), ::OpenAPI::toJsonValue(m_sync_direction));
    }
    if (m_total_bytes_isSet) {
        obj.insert(QString("totalBytes"), ::OpenAPI::toJsonValue(m_total_bytes));
    }
    if (m_total_item_count_isSet) {
        obj.insert(QString("totalItemCount"), ::OpenAPI::toJsonValue(m_total_item_count));
    }
    return obj;
}

qint32 OAISyncProgressStatus::getAppliedBytes() const {
    return m_applied_bytes;
}
void OAISyncProgressStatus::setAppliedBytes(const qint32 &applied_bytes) {
    m_applied_bytes = applied_bytes;
    m_applied_bytes_isSet = true;
}

bool OAISyncProgressStatus::is_applied_bytes_Set() const{
    return m_applied_bytes_isSet;
}

bool OAISyncProgressStatus::is_applied_bytes_Valid() const{
    return m_applied_bytes_isValid;
}

qint32 OAISyncProgressStatus::getAppliedItemCount() const {
    return m_applied_item_count;
}
void OAISyncProgressStatus::setAppliedItemCount(const qint32 &applied_item_count) {
    m_applied_item_count = applied_item_count;
    m_applied_item_count_isSet = true;
}

bool OAISyncProgressStatus::is_applied_item_count_Set() const{
    return m_applied_item_count_isSet;
}

bool OAISyncProgressStatus::is_applied_item_count_Valid() const{
    return m_applied_item_count_isValid;
}

qint32 OAISyncProgressStatus::getPerItemErrorCount() const {
    return m_per_item_error_count;
}
void OAISyncProgressStatus::setPerItemErrorCount(const qint32 &per_item_error_count) {
    m_per_item_error_count = per_item_error_count;
    m_per_item_error_count_isSet = true;
}

bool OAISyncProgressStatus::is_per_item_error_count_Set() const{
    return m_per_item_error_count_isSet;
}

bool OAISyncProgressStatus::is_per_item_error_count_Valid() const{
    return m_per_item_error_count_isValid;
}

QDateTime OAISyncProgressStatus::getProgressTimestamp() const {
    return m_progress_timestamp;
}
void OAISyncProgressStatus::setProgressTimestamp(const QDateTime &progress_timestamp) {
    m_progress_timestamp = progress_timestamp;
    m_progress_timestamp_isSet = true;
}

bool OAISyncProgressStatus::is_progress_timestamp_Set() const{
    return m_progress_timestamp_isSet;
}

bool OAISyncProgressStatus::is_progress_timestamp_Valid() const{
    return m_progress_timestamp_isValid;
}

OAIProgressType OAISyncProgressStatus::getSyncDirection() const {
    return m_sync_direction;
}
void OAISyncProgressStatus::setSyncDirection(const OAIProgressType &sync_direction) {
    m_sync_direction = sync_direction;
    m_sync_direction_isSet = true;
}

bool OAISyncProgressStatus::is_sync_direction_Set() const{
    return m_sync_direction_isSet;
}

bool OAISyncProgressStatus::is_sync_direction_Valid() const{
    return m_sync_direction_isValid;
}

qint32 OAISyncProgressStatus::getTotalBytes() const {
    return m_total_bytes;
}
void OAISyncProgressStatus::setTotalBytes(const qint32 &total_bytes) {
    m_total_bytes = total_bytes;
    m_total_bytes_isSet = true;
}

bool OAISyncProgressStatus::is_total_bytes_Set() const{
    return m_total_bytes_isSet;
}

bool OAISyncProgressStatus::is_total_bytes_Valid() const{
    return m_total_bytes_isValid;
}

qint32 OAISyncProgressStatus::getTotalItemCount() const {
    return m_total_item_count;
}
void OAISyncProgressStatus::setTotalItemCount(const qint32 &total_item_count) {
    m_total_item_count = total_item_count;
    m_total_item_count_isSet = true;
}

bool OAISyncProgressStatus::is_total_item_count_Set() const{
    return m_total_item_count_isSet;
}

bool OAISyncProgressStatus::is_total_item_count_Valid() const{
    return m_total_item_count_isValid;
}

bool OAISyncProgressStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_item_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncProgressStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
