/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBackupRestoreApi_H
#define OAI_OAIBackupRestoreApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupRequest.h"
#include "OAIPostBackupResponse.h"
#include "OAIPostRestoreRequest.h"
#include "OAIPreRestoreRequest.h"
#include "OAIStorageSyncError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBackupRestoreApi : public QObject {
    Q_OBJECT

public:
    OAIBackupRestoreApi(const int timeOut = 0);
    ~OAIBackupRestoreApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  cloud_endpoint_name QString [required]
    * @param[in]  parameters OAIBackupRequest [required]
    */
    virtual void cloudEndpointsPostBackup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &cloud_endpoint_name, const OAIBackupRequest &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  cloud_endpoint_name QString [required]
    * @param[in]  parameters OAIPostRestoreRequest [required]
    */
    virtual void cloudEndpointsPostRestore(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &cloud_endpoint_name, const OAIPostRestoreRequest &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  cloud_endpoint_name QString [required]
    * @param[in]  parameters OAIBackupRequest [required]
    */
    virtual void cloudEndpointsPreBackup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &cloud_endpoint_name, const OAIBackupRequest &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  cloud_endpoint_name QString [required]
    * @param[in]  parameters OAIPreRestoreRequest [required]
    */
    virtual void cloudEndpointsPreRestore(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &cloud_endpoint_name, const OAIPreRestoreRequest &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  sync_group_name QString [required]
    * @param[in]  cloud_endpoint_name QString [required]
    */
    virtual void cloudEndpointsRestoreheartbeat(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &sync_group_name, const QString &cloud_endpoint_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cloudEndpointsPostBackupCallback(OAIHttpRequestWorker *worker);
    void cloudEndpointsPostRestoreCallback(OAIHttpRequestWorker *worker);
    void cloudEndpointsPreBackupCallback(OAIHttpRequestWorker *worker);
    void cloudEndpointsPreRestoreCallback(OAIHttpRequestWorker *worker);
    void cloudEndpointsRestoreheartbeatCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cloudEndpointsPostBackupSignal(OAIPostBackupResponse summary);
    void cloudEndpointsPostRestoreSignal();
    void cloudEndpointsPreBackupSignal();
    void cloudEndpointsPreRestoreSignal();
    void cloudEndpointsRestoreheartbeatSignal();


    void cloudEndpointsPostBackupSignalFull(OAIHttpRequestWorker *worker, OAIPostBackupResponse summary);
    void cloudEndpointsPostRestoreSignalFull(OAIHttpRequestWorker *worker);
    void cloudEndpointsPreBackupSignalFull(OAIHttpRequestWorker *worker);
    void cloudEndpointsPreRestoreSignalFull(OAIHttpRequestWorker *worker);
    void cloudEndpointsRestoreheartbeatSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cloudEndpointsPostBackupSignalError() instead")
    void cloudEndpointsPostBackupSignalE(OAIPostBackupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsPostBackupSignalError(OAIPostBackupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudEndpointsPostRestoreSignalError() instead")
    void cloudEndpointsPostRestoreSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsPostRestoreSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudEndpointsPreBackupSignalError() instead")
    void cloudEndpointsPreBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsPreBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudEndpointsPreRestoreSignalError() instead")
    void cloudEndpointsPreRestoreSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsPreRestoreSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudEndpointsRestoreheartbeatSignalError() instead")
    void cloudEndpointsRestoreheartbeatSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsRestoreheartbeatSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cloudEndpointsPostBackupSignalErrorFull() instead")
    void cloudEndpointsPostBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsPostBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudEndpointsPostRestoreSignalErrorFull() instead")
    void cloudEndpointsPostRestoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsPostRestoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudEndpointsPreBackupSignalErrorFull() instead")
    void cloudEndpointsPreBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsPreBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudEndpointsPreRestoreSignalErrorFull() instead")
    void cloudEndpointsPreRestoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsPreRestoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudEndpointsRestoreheartbeatSignalErrorFull() instead")
    void cloudEndpointsRestoreheartbeatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudEndpointsRestoreheartbeatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
