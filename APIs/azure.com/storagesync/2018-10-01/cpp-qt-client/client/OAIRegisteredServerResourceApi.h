/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegisteredServerResourceApi_H
#define OAI_OAIRegisteredServerResourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRegisteredServer.h"
#include "OAIRegisteredServerArray.h"
#include "OAIRegisteredServerCreateParameters.h"
#include "OAIStorageSyncError.h"
#include "OAITriggerRolloverRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegisteredServerResourceApi : public QObject {
    Q_OBJECT

public:
    OAIRegisteredServerResourceApi(const int timeOut = 0);
    ~OAIRegisteredServerResourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  server_id QString [required]
    * @param[in]  parameters OAIRegisteredServerCreateParameters [required]
    */
    virtual void registeredServersCreate(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &server_id, const OAIRegisteredServerCreateParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  server_id QString [required]
    */
    virtual void registeredServersDelete(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &server_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  server_id QString [required]
    */
    virtual void registeredServersGet(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &server_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    */
    virtual void registeredServersListByStorageSyncService(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  storage_sync_service_name QString [required]
    * @param[in]  server_id QString [required]
    * @param[in]  parameters OAITriggerRolloverRequest [required]
    */
    virtual void registeredServersTriggerRollover(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &storage_sync_service_name, const QString &server_id, const OAITriggerRolloverRequest &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void registeredServersCreateCallback(OAIHttpRequestWorker *worker);
    void registeredServersDeleteCallback(OAIHttpRequestWorker *worker);
    void registeredServersGetCallback(OAIHttpRequestWorker *worker);
    void registeredServersListByStorageSyncServiceCallback(OAIHttpRequestWorker *worker);
    void registeredServersTriggerRolloverCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void registeredServersCreateSignal(OAIRegisteredServer summary);
    void registeredServersDeleteSignal();
    void registeredServersGetSignal(OAIRegisteredServer summary);
    void registeredServersListByStorageSyncServiceSignal(OAIRegisteredServerArray summary);
    void registeredServersTriggerRolloverSignal();


    void registeredServersCreateSignalFull(OAIHttpRequestWorker *worker, OAIRegisteredServer summary);
    void registeredServersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void registeredServersGetSignalFull(OAIHttpRequestWorker *worker, OAIRegisteredServer summary);
    void registeredServersListByStorageSyncServiceSignalFull(OAIHttpRequestWorker *worker, OAIRegisteredServerArray summary);
    void registeredServersTriggerRolloverSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use registeredServersCreateSignalError() instead")
    void registeredServersCreateSignalE(OAIRegisteredServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersCreateSignalError(OAIRegisteredServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredServersDeleteSignalError() instead")
    void registeredServersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredServersGetSignalError() instead")
    void registeredServersGetSignalE(OAIRegisteredServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersGetSignalError(OAIRegisteredServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredServersListByStorageSyncServiceSignalError() instead")
    void registeredServersListByStorageSyncServiceSignalE(OAIRegisteredServerArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersListByStorageSyncServiceSignalError(OAIRegisteredServerArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredServersTriggerRolloverSignalError() instead")
    void registeredServersTriggerRolloverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersTriggerRolloverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use registeredServersCreateSignalErrorFull() instead")
    void registeredServersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredServersDeleteSignalErrorFull() instead")
    void registeredServersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredServersGetSignalErrorFull() instead")
    void registeredServersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredServersListByStorageSyncServiceSignalErrorFull() instead")
    void registeredServersListByStorageSyncServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersListByStorageSyncServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredServersTriggerRolloverSignalErrorFull() instead")
    void registeredServersTriggerRolloverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredServersTriggerRolloverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
