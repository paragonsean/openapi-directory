/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-04-02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RegisteredServer from '../model/RegisteredServer';
import RegisteredServerArray from '../model/RegisteredServerArray';
import RegisteredServerCreateParameters from '../model/RegisteredServerCreateParameters';
import StorageSyncError from '../model/StorageSyncError';

/**
* RegisteredServerResource service.
* @module api/RegisteredServerResourceApi
* @version 2018-04-02
*/
export default class RegisteredServerResourceApi {

    /**
    * Constructs a new RegisteredServerResourceApi. 
    * @alias module:api/RegisteredServerResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the registeredServersCreate operation.
     * @callback module:api/RegisteredServerResourceApi~registeredServersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisteredServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new registered server.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} serverId GUID identifying the on-premises server.
     * @param {module:model/RegisteredServerCreateParameters} parameters Body of Registered Server object.
     * @param {module:api/RegisteredServerResourceApi~registeredServersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisteredServer}
     */
    registeredServersCreate(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling registeredServersCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling registeredServersCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registeredServersCreate");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling registeredServersCreate");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling registeredServersCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling registeredServersCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'serverId': serverId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisteredServer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registeredServersDelete operation.
     * @callback module:api/RegisteredServerResourceApi~registeredServersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the given registered server.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} serverId GUID identifying the on-premises server.
     * @param {module:api/RegisteredServerResourceApi~registeredServersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registeredServersDelete(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling registeredServersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling registeredServersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registeredServersDelete");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling registeredServersDelete");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling registeredServersDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'serverId': serverId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registeredServersGet operation.
     * @callback module:api/RegisteredServerResourceApi~registeredServersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisteredServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a given registered server.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {String} serverId GUID identifying the on-premises server.
     * @param {module:api/RegisteredServerResourceApi~registeredServersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisteredServer}
     */
    registeredServersGet(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, serverId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling registeredServersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling registeredServersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registeredServersGet");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling registeredServersGet");
      }
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling registeredServersGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName,
        'serverId': serverId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegisteredServer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registeredServersListByStorageSyncService operation.
     * @callback module:api/RegisteredServerResourceApi~registeredServersListByStorageSyncServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisteredServerArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a given registered server list.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} storageSyncServiceName Name of Storage Sync Service resource.
     * @param {module:api/RegisteredServerResourceApi~registeredServersListByStorageSyncServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisteredServerArray}
     */
    registeredServersListByStorageSyncService(subscriptionId, resourceGroupName, apiVersion, storageSyncServiceName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling registeredServersListByStorageSyncService");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling registeredServersListByStorageSyncService");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registeredServersListByStorageSyncService");
      }
      // verify the required parameter 'storageSyncServiceName' is set
      if (storageSyncServiceName === undefined || storageSyncServiceName === null) {
        throw new Error("Missing the required parameter 'storageSyncServiceName' when calling registeredServersListByStorageSyncService");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'storageSyncServiceName': storageSyncServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegisteredServerArray;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
