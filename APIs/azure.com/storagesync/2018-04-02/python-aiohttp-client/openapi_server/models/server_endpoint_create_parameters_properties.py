# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_status import FeatureStatus
from openapi_server import util


class ServerEndpointCreateParametersProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_tiering: FeatureStatus=None, friendly_name: str=None, server_local_path: str=None, server_resource_id: str=None, volume_free_space_percent: int=None):
        """ServerEndpointCreateParametersProperties - a model defined in OpenAPI

        :param cloud_tiering: The cloud_tiering of this ServerEndpointCreateParametersProperties.
        :param friendly_name: The friendly_name of this ServerEndpointCreateParametersProperties.
        :param server_local_path: The server_local_path of this ServerEndpointCreateParametersProperties.
        :param server_resource_id: The server_resource_id of this ServerEndpointCreateParametersProperties.
        :param volume_free_space_percent: The volume_free_space_percent of this ServerEndpointCreateParametersProperties.
        """
        self.openapi_types = {
            'cloud_tiering': FeatureStatus,
            'friendly_name': str,
            'server_local_path': str,
            'server_resource_id': str,
            'volume_free_space_percent': int
        }

        self.attribute_map = {
            'cloud_tiering': 'cloudTiering',
            'friendly_name': 'friendlyName',
            'server_local_path': 'serverLocalPath',
            'server_resource_id': 'serverResourceId',
            'volume_free_space_percent': 'volumeFreeSpacePercent'
        }

        self._cloud_tiering = cloud_tiering
        self._friendly_name = friendly_name
        self._server_local_path = server_local_path
        self._server_resource_id = server_resource_id
        self._volume_free_space_percent = volume_free_space_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerEndpointCreateParametersProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerEndpointCreateParametersProperties of this ServerEndpointCreateParametersProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_tiering(self):
        """Gets the cloud_tiering of this ServerEndpointCreateParametersProperties.


        :return: The cloud_tiering of this ServerEndpointCreateParametersProperties.
        :rtype: FeatureStatus
        """
        return self._cloud_tiering

    @cloud_tiering.setter
    def cloud_tiering(self, cloud_tiering):
        """Sets the cloud_tiering of this ServerEndpointCreateParametersProperties.


        :param cloud_tiering: The cloud_tiering of this ServerEndpointCreateParametersProperties.
        :type cloud_tiering: FeatureStatus
        """

        self._cloud_tiering = cloud_tiering

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ServerEndpointCreateParametersProperties.

        Friendly Name

        :return: The friendly_name of this ServerEndpointCreateParametersProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ServerEndpointCreateParametersProperties.

        Friendly Name

        :param friendly_name: The friendly_name of this ServerEndpointCreateParametersProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def server_local_path(self):
        """Gets the server_local_path of this ServerEndpointCreateParametersProperties.

        Server folder used for data synchronization

        :return: The server_local_path of this ServerEndpointCreateParametersProperties.
        :rtype: str
        """
        return self._server_local_path

    @server_local_path.setter
    def server_local_path(self, server_local_path):
        """Sets the server_local_path of this ServerEndpointCreateParametersProperties.

        Server folder used for data synchronization

        :param server_local_path: The server_local_path of this ServerEndpointCreateParametersProperties.
        :type server_local_path: str
        """

        self._server_local_path = server_local_path

    @property
    def server_resource_id(self):
        """Gets the server_resource_id of this ServerEndpointCreateParametersProperties.

        Arm resource identifier.

        :return: The server_resource_id of this ServerEndpointCreateParametersProperties.
        :rtype: str
        """
        return self._server_resource_id

    @server_resource_id.setter
    def server_resource_id(self, server_resource_id):
        """Sets the server_resource_id of this ServerEndpointCreateParametersProperties.

        Arm resource identifier.

        :param server_resource_id: The server_resource_id of this ServerEndpointCreateParametersProperties.
        :type server_resource_id: str
        """

        self._server_resource_id = server_resource_id

    @property
    def volume_free_space_percent(self):
        """Gets the volume_free_space_percent of this ServerEndpointCreateParametersProperties.

        Level of free space to be maintained by Cloud Tiering if it is enabled.

        :return: The volume_free_space_percent of this ServerEndpointCreateParametersProperties.
        :rtype: int
        """
        return self._volume_free_space_percent

    @volume_free_space_percent.setter
    def volume_free_space_percent(self, volume_free_space_percent):
        """Sets the volume_free_space_percent of this ServerEndpointCreateParametersProperties.

        Level of free space to be maintained by Cloud Tiering if it is enabled.

        :param volume_free_space_percent: The volume_free_space_percent of this ServerEndpointCreateParametersProperties.
        :type volume_free_space_percent: int
        """
        if volume_free_space_percent is not None and volume_free_space_percent > 100:
            raise ValueError("Invalid value for `volume_free_space_percent`, must be a value less than or equal to `100`")
        if volume_free_space_percent is not None and volume_free_space_percent < 0:
            raise ValueError("Invalid value for `volume_free_space_percent`, must be a value greater than or equal to `0`")

        self._volume_free_space_percent = volume_free_space_percent
