/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-04-02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredServerCreateParametersProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredServerCreateParametersProperties::OAIRegisteredServerCreateParametersProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredServerCreateParametersProperties::OAIRegisteredServerCreateParametersProperties() {
    this->initializeModel();
}

OAIRegisteredServerCreateParametersProperties::~OAIRegisteredServerCreateParametersProperties() {}

void OAIRegisteredServerCreateParametersProperties::initializeModel() {

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_last_heart_beat_isSet = false;
    m_last_heart_beat_isValid = false;

    m_server_certificate_isSet = false;
    m_server_certificate_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_server_os_version_isSet = false;
    m_server_os_version_isValid = false;

    m_server_role_isSet = false;
    m_server_role_isValid = false;
}

void OAIRegisteredServerCreateParametersProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredServerCreateParametersProperties::fromJsonObject(QJsonObject json) {

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_last_heart_beat_isValid = ::OpenAPI::fromJsonValue(m_last_heart_beat, json[QString("lastHeartBeat")]);
    m_last_heart_beat_isSet = !json[QString("lastHeartBeat")].isNull() && m_last_heart_beat_isValid;

    m_server_certificate_isValid = ::OpenAPI::fromJsonValue(m_server_certificate, json[QString("serverCertificate")]);
    m_server_certificate_isSet = !json[QString("serverCertificate")].isNull() && m_server_certificate_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("serverId")]);
    m_server_id_isSet = !json[QString("serverId")].isNull() && m_server_id_isValid;

    m_server_os_version_isValid = ::OpenAPI::fromJsonValue(m_server_os_version, json[QString("serverOSVersion")]);
    m_server_os_version_isSet = !json[QString("serverOSVersion")].isNull() && m_server_os_version_isValid;

    m_server_role_isValid = ::OpenAPI::fromJsonValue(m_server_role, json[QString("serverRole")]);
    m_server_role_isSet = !json[QString("serverRole")].isNull() && m_server_role_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredServerCreateParametersProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_last_heart_beat_isSet) {
        obj.insert(QString("lastHeartBeat"), ::OpenAPI::toJsonValue(m_last_heart_beat));
    }
    if (m_server_certificate_isSet) {
        obj.insert(QString("serverCertificate"), ::OpenAPI::toJsonValue(m_server_certificate));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("serverId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_server_os_version_isSet) {
        obj.insert(QString("serverOSVersion"), ::OpenAPI::toJsonValue(m_server_os_version));
    }
    if (m_server_role_isSet) {
        obj.insert(QString("serverRole"), ::OpenAPI::toJsonValue(m_server_role));
    }
    return obj;
}

QString OAIRegisteredServerCreateParametersProperties::getAgentVersion() const {
    return m_agent_version;
}
void OAIRegisteredServerCreateParametersProperties::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::getClusterId() const {
    return m_cluster_id;
}
void OAIRegisteredServerCreateParametersProperties::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::getClusterName() const {
    return m_cluster_name;
}
void OAIRegisteredServerCreateParametersProperties::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIRegisteredServerCreateParametersProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::getLastHeartBeat() const {
    return m_last_heart_beat;
}
void OAIRegisteredServerCreateParametersProperties::setLastHeartBeat(const QString &last_heart_beat) {
    m_last_heart_beat = last_heart_beat;
    m_last_heart_beat_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_last_heart_beat_Set() const{
    return m_last_heart_beat_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_last_heart_beat_Valid() const{
    return m_last_heart_beat_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::getServerCertificate() const {
    return m_server_certificate;
}
void OAIRegisteredServerCreateParametersProperties::setServerCertificate(const QString &server_certificate) {
    m_server_certificate = server_certificate;
    m_server_certificate_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_server_certificate_Set() const{
    return m_server_certificate_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_server_certificate_Valid() const{
    return m_server_certificate_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::getServerId() const {
    return m_server_id;
}
void OAIRegisteredServerCreateParametersProperties::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_server_id_Valid() const{
    return m_server_id_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::getServerOsVersion() const {
    return m_server_os_version;
}
void OAIRegisteredServerCreateParametersProperties::setServerOsVersion(const QString &server_os_version) {
    m_server_os_version = server_os_version;
    m_server_os_version_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_server_os_version_Set() const{
    return m_server_os_version_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_server_os_version_Valid() const{
    return m_server_os_version_isValid;
}

QString OAIRegisteredServerCreateParametersProperties::getServerRole() const {
    return m_server_role;
}
void OAIRegisteredServerCreateParametersProperties::setServerRole(const QString &server_role) {
    m_server_role = server_role;
    m_server_role_isSet = true;
}

bool OAIRegisteredServerCreateParametersProperties::is_server_role_Set() const{
    return m_server_role_isSet;
}

bool OAIRegisteredServerCreateParametersProperties::is_server_role_Valid() const{
    return m_server_role_isValid;
}

bool OAIRegisteredServerCreateParametersProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heart_beat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredServerCreateParametersProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
