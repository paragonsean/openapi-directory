/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-04-02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisteredServerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisteredServerProperties::OAIRegisteredServerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisteredServerProperties::OAIRegisteredServerProperties() {
    this->initializeModel();
}

OAIRegisteredServerProperties::~OAIRegisteredServerProperties() {}

void OAIRegisteredServerProperties::initializeModel() {

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_discovery_endpoint_uri_isSet = false;
    m_discovery_endpoint_uri_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_last_heart_beat_isSet = false;
    m_last_heart_beat_isValid = false;

    m_last_operation_name_isSet = false;
    m_last_operation_name_isValid = false;

    m_last_workflow_id_isSet = false;
    m_last_workflow_id_isValid = false;

    m_management_endpoint_uri_isSet = false;
    m_management_endpoint_uri_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_server_certificate_isSet = false;
    m_server_certificate_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_server_managementt_error_code_isSet = false;
    m_server_managementt_error_code_isValid = false;

    m_server_os_version_isSet = false;
    m_server_os_version_isValid = false;

    m_server_role_isSet = false;
    m_server_role_isValid = false;

    m_service_location_isSet = false;
    m_service_location_isValid = false;

    m_storage_sync_service_uid_isSet = false;
    m_storage_sync_service_uid_isValid = false;
}

void OAIRegisteredServerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisteredServerProperties::fromJsonObject(QJsonObject json) {

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_discovery_endpoint_uri_isValid = ::OpenAPI::fromJsonValue(m_discovery_endpoint_uri, json[QString("discoveryEndpointUri")]);
    m_discovery_endpoint_uri_isSet = !json[QString("discoveryEndpointUri")].isNull() && m_discovery_endpoint_uri_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_last_heart_beat_isValid = ::OpenAPI::fromJsonValue(m_last_heart_beat, json[QString("lastHeartBeat")]);
    m_last_heart_beat_isSet = !json[QString("lastHeartBeat")].isNull() && m_last_heart_beat_isValid;

    m_last_operation_name_isValid = ::OpenAPI::fromJsonValue(m_last_operation_name, json[QString("lastOperationName")]);
    m_last_operation_name_isSet = !json[QString("lastOperationName")].isNull() && m_last_operation_name_isValid;

    m_last_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_last_workflow_id, json[QString("lastWorkflowId")]);
    m_last_workflow_id_isSet = !json[QString("lastWorkflowId")].isNull() && m_last_workflow_id_isValid;

    m_management_endpoint_uri_isValid = ::OpenAPI::fromJsonValue(m_management_endpoint_uri, json[QString("managementEndpointUri")]);
    m_management_endpoint_uri_isSet = !json[QString("managementEndpointUri")].isNull() && m_management_endpoint_uri_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_server_certificate_isValid = ::OpenAPI::fromJsonValue(m_server_certificate, json[QString("serverCertificate")]);
    m_server_certificate_isSet = !json[QString("serverCertificate")].isNull() && m_server_certificate_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("serverId")]);
    m_server_id_isSet = !json[QString("serverId")].isNull() && m_server_id_isValid;

    m_server_managementt_error_code_isValid = ::OpenAPI::fromJsonValue(m_server_managementt_error_code, json[QString("serverManagementtErrorCode")]);
    m_server_managementt_error_code_isSet = !json[QString("serverManagementtErrorCode")].isNull() && m_server_managementt_error_code_isValid;

    m_server_os_version_isValid = ::OpenAPI::fromJsonValue(m_server_os_version, json[QString("serverOSVersion")]);
    m_server_os_version_isSet = !json[QString("serverOSVersion")].isNull() && m_server_os_version_isValid;

    m_server_role_isValid = ::OpenAPI::fromJsonValue(m_server_role, json[QString("serverRole")]);
    m_server_role_isSet = !json[QString("serverRole")].isNull() && m_server_role_isValid;

    m_service_location_isValid = ::OpenAPI::fromJsonValue(m_service_location, json[QString("serviceLocation")]);
    m_service_location_isSet = !json[QString("serviceLocation")].isNull() && m_service_location_isValid;

    m_storage_sync_service_uid_isValid = ::OpenAPI::fromJsonValue(m_storage_sync_service_uid, json[QString("storageSyncServiceUid")]);
    m_storage_sync_service_uid_isSet = !json[QString("storageSyncServiceUid")].isNull() && m_storage_sync_service_uid_isValid;
}

QString OAIRegisteredServerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisteredServerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_discovery_endpoint_uri_isSet) {
        obj.insert(QString("discoveryEndpointUri"), ::OpenAPI::toJsonValue(m_discovery_endpoint_uri));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_last_heart_beat_isSet) {
        obj.insert(QString("lastHeartBeat"), ::OpenAPI::toJsonValue(m_last_heart_beat));
    }
    if (m_last_operation_name_isSet) {
        obj.insert(QString("lastOperationName"), ::OpenAPI::toJsonValue(m_last_operation_name));
    }
    if (m_last_workflow_id_isSet) {
        obj.insert(QString("lastWorkflowId"), ::OpenAPI::toJsonValue(m_last_workflow_id));
    }
    if (m_management_endpoint_uri_isSet) {
        obj.insert(QString("managementEndpointUri"), ::OpenAPI::toJsonValue(m_management_endpoint_uri));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_location_isSet) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_server_certificate_isSet) {
        obj.insert(QString("serverCertificate"), ::OpenAPI::toJsonValue(m_server_certificate));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("serverId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_server_managementt_error_code_isSet) {
        obj.insert(QString("serverManagementtErrorCode"), ::OpenAPI::toJsonValue(m_server_managementt_error_code));
    }
    if (m_server_os_version_isSet) {
        obj.insert(QString("serverOSVersion"), ::OpenAPI::toJsonValue(m_server_os_version));
    }
    if (m_server_role_isSet) {
        obj.insert(QString("serverRole"), ::OpenAPI::toJsonValue(m_server_role));
    }
    if (m_service_location_isSet) {
        obj.insert(QString("serviceLocation"), ::OpenAPI::toJsonValue(m_service_location));
    }
    if (m_storage_sync_service_uid_isSet) {
        obj.insert(QString("storageSyncServiceUid"), ::OpenAPI::toJsonValue(m_storage_sync_service_uid));
    }
    return obj;
}

QString OAIRegisteredServerProperties::getAgentVersion() const {
    return m_agent_version;
}
void OAIRegisteredServerProperties::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIRegisteredServerProperties::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIRegisteredServerProperties::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIRegisteredServerProperties::getClusterId() const {
    return m_cluster_id;
}
void OAIRegisteredServerProperties::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIRegisteredServerProperties::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIRegisteredServerProperties::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAIRegisteredServerProperties::getClusterName() const {
    return m_cluster_name;
}
void OAIRegisteredServerProperties::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIRegisteredServerProperties::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIRegisteredServerProperties::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIRegisteredServerProperties::getDiscoveryEndpointUri() const {
    return m_discovery_endpoint_uri;
}
void OAIRegisteredServerProperties::setDiscoveryEndpointUri(const QString &discovery_endpoint_uri) {
    m_discovery_endpoint_uri = discovery_endpoint_uri;
    m_discovery_endpoint_uri_isSet = true;
}

bool OAIRegisteredServerProperties::is_discovery_endpoint_uri_Set() const{
    return m_discovery_endpoint_uri_isSet;
}

bool OAIRegisteredServerProperties::is_discovery_endpoint_uri_Valid() const{
    return m_discovery_endpoint_uri_isValid;
}

QString OAIRegisteredServerProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIRegisteredServerProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIRegisteredServerProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIRegisteredServerProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIRegisteredServerProperties::getLastHeartBeat() const {
    return m_last_heart_beat;
}
void OAIRegisteredServerProperties::setLastHeartBeat(const QString &last_heart_beat) {
    m_last_heart_beat = last_heart_beat;
    m_last_heart_beat_isSet = true;
}

bool OAIRegisteredServerProperties::is_last_heart_beat_Set() const{
    return m_last_heart_beat_isSet;
}

bool OAIRegisteredServerProperties::is_last_heart_beat_Valid() const{
    return m_last_heart_beat_isValid;
}

QString OAIRegisteredServerProperties::getLastOperationName() const {
    return m_last_operation_name;
}
void OAIRegisteredServerProperties::setLastOperationName(const QString &last_operation_name) {
    m_last_operation_name = last_operation_name;
    m_last_operation_name_isSet = true;
}

bool OAIRegisteredServerProperties::is_last_operation_name_Set() const{
    return m_last_operation_name_isSet;
}

bool OAIRegisteredServerProperties::is_last_operation_name_Valid() const{
    return m_last_operation_name_isValid;
}

QString OAIRegisteredServerProperties::getLastWorkflowId() const {
    return m_last_workflow_id;
}
void OAIRegisteredServerProperties::setLastWorkflowId(const QString &last_workflow_id) {
    m_last_workflow_id = last_workflow_id;
    m_last_workflow_id_isSet = true;
}

bool OAIRegisteredServerProperties::is_last_workflow_id_Set() const{
    return m_last_workflow_id_isSet;
}

bool OAIRegisteredServerProperties::is_last_workflow_id_Valid() const{
    return m_last_workflow_id_isValid;
}

QString OAIRegisteredServerProperties::getManagementEndpointUri() const {
    return m_management_endpoint_uri;
}
void OAIRegisteredServerProperties::setManagementEndpointUri(const QString &management_endpoint_uri) {
    m_management_endpoint_uri = management_endpoint_uri;
    m_management_endpoint_uri_isSet = true;
}

bool OAIRegisteredServerProperties::is_management_endpoint_uri_Set() const{
    return m_management_endpoint_uri_isSet;
}

bool OAIRegisteredServerProperties::is_management_endpoint_uri_Valid() const{
    return m_management_endpoint_uri_isValid;
}

QString OAIRegisteredServerProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRegisteredServerProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRegisteredServerProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRegisteredServerProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIRegisteredServerProperties::getResourceLocation() const {
    return m_resource_location;
}
void OAIRegisteredServerProperties::setResourceLocation(const QString &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIRegisteredServerProperties::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIRegisteredServerProperties::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIRegisteredServerProperties::getServerCertificate() const {
    return m_server_certificate;
}
void OAIRegisteredServerProperties::setServerCertificate(const QString &server_certificate) {
    m_server_certificate = server_certificate;
    m_server_certificate_isSet = true;
}

bool OAIRegisteredServerProperties::is_server_certificate_Set() const{
    return m_server_certificate_isSet;
}

bool OAIRegisteredServerProperties::is_server_certificate_Valid() const{
    return m_server_certificate_isValid;
}

QString OAIRegisteredServerProperties::getServerId() const {
    return m_server_id;
}
void OAIRegisteredServerProperties::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIRegisteredServerProperties::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIRegisteredServerProperties::is_server_id_Valid() const{
    return m_server_id_isValid;
}

qint32 OAIRegisteredServerProperties::getServerManagementtErrorCode() const {
    return m_server_managementt_error_code;
}
void OAIRegisteredServerProperties::setServerManagementtErrorCode(const qint32 &server_managementt_error_code) {
    m_server_managementt_error_code = server_managementt_error_code;
    m_server_managementt_error_code_isSet = true;
}

bool OAIRegisteredServerProperties::is_server_managementt_error_code_Set() const{
    return m_server_managementt_error_code_isSet;
}

bool OAIRegisteredServerProperties::is_server_managementt_error_code_Valid() const{
    return m_server_managementt_error_code_isValid;
}

QString OAIRegisteredServerProperties::getServerOsVersion() const {
    return m_server_os_version;
}
void OAIRegisteredServerProperties::setServerOsVersion(const QString &server_os_version) {
    m_server_os_version = server_os_version;
    m_server_os_version_isSet = true;
}

bool OAIRegisteredServerProperties::is_server_os_version_Set() const{
    return m_server_os_version_isSet;
}

bool OAIRegisteredServerProperties::is_server_os_version_Valid() const{
    return m_server_os_version_isValid;
}

QString OAIRegisteredServerProperties::getServerRole() const {
    return m_server_role;
}
void OAIRegisteredServerProperties::setServerRole(const QString &server_role) {
    m_server_role = server_role;
    m_server_role_isSet = true;
}

bool OAIRegisteredServerProperties::is_server_role_Set() const{
    return m_server_role_isSet;
}

bool OAIRegisteredServerProperties::is_server_role_Valid() const{
    return m_server_role_isValid;
}

QString OAIRegisteredServerProperties::getServiceLocation() const {
    return m_service_location;
}
void OAIRegisteredServerProperties::setServiceLocation(const QString &service_location) {
    m_service_location = service_location;
    m_service_location_isSet = true;
}

bool OAIRegisteredServerProperties::is_service_location_Set() const{
    return m_service_location_isSet;
}

bool OAIRegisteredServerProperties::is_service_location_Valid() const{
    return m_service_location_isValid;
}

QString OAIRegisteredServerProperties::getStorageSyncServiceUid() const {
    return m_storage_sync_service_uid;
}
void OAIRegisteredServerProperties::setStorageSyncServiceUid(const QString &storage_sync_service_uid) {
    m_storage_sync_service_uid = storage_sync_service_uid;
    m_storage_sync_service_uid_isSet = true;
}

bool OAIRegisteredServerProperties::is_storage_sync_service_uid_Set() const{
    return m_storage_sync_service_uid_isSet;
}

bool OAIRegisteredServerProperties::is_storage_sync_service_uid_Valid() const{
    return m_storage_sync_service_uid_isValid;
}

bool OAIRegisteredServerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_endpoint_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heart_beat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_endpoint_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_managementt_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_sync_service_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisteredServerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
