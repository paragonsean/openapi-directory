/**
 * Microsoft Storage Sync
 * Microsoft Storage Sync Service API
 *
 * The version of the OpenAPI document: 2018-04-02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostRestoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostRestoreRequest::OAIPostRestoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostRestoreRequest::OAIPostRestoreRequest() {
    this->initializeModel();
}

OAIPostRestoreRequest::~OAIPostRestoreRequest() {}

void OAIPostRestoreRequest::initializeModel() {

    m_azure_file_share_uri_isSet = false;
    m_azure_file_share_uri_isValid = false;

    m_failed_file_list_isSet = false;
    m_failed_file_list_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_replica_group_isSet = false;
    m_replica_group_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_restore_file_spec_isSet = false;
    m_restore_file_spec_isValid = false;

    m_source_azure_file_share_uri_isSet = false;
    m_source_azure_file_share_uri_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPostRestoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostRestoreRequest::fromJsonObject(QJsonObject json) {

    m_azure_file_share_uri_isValid = ::OpenAPI::fromJsonValue(m_azure_file_share_uri, json[QString("azureFileShareUri")]);
    m_azure_file_share_uri_isSet = !json[QString("azureFileShareUri")].isNull() && m_azure_file_share_uri_isValid;

    m_failed_file_list_isValid = ::OpenAPI::fromJsonValue(m_failed_file_list, json[QString("failedFileList")]);
    m_failed_file_list_isSet = !json[QString("failedFileList")].isNull() && m_failed_file_list_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_replica_group_isValid = ::OpenAPI::fromJsonValue(m_replica_group, json[QString("replicaGroup")]);
    m_replica_group_isSet = !json[QString("replicaGroup")].isNull() && m_replica_group_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_restore_file_spec_isValid = ::OpenAPI::fromJsonValue(m_restore_file_spec, json[QString("restoreFileSpec")]);
    m_restore_file_spec_isSet = !json[QString("restoreFileSpec")].isNull() && m_restore_file_spec_isValid;

    m_source_azure_file_share_uri_isValid = ::OpenAPI::fromJsonValue(m_source_azure_file_share_uri, json[QString("sourceAzureFileShareUri")]);
    m_source_azure_file_share_uri_isSet = !json[QString("sourceAzureFileShareUri")].isNull() && m_source_azure_file_share_uri_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPostRestoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostRestoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_file_share_uri_isSet) {
        obj.insert(QString("azureFileShareUri"), ::OpenAPI::toJsonValue(m_azure_file_share_uri));
    }
    if (m_failed_file_list_isSet) {
        obj.insert(QString("failedFileList"), ::OpenAPI::toJsonValue(m_failed_file_list));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_replica_group_isSet) {
        obj.insert(QString("replicaGroup"), ::OpenAPI::toJsonValue(m_replica_group));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_restore_file_spec.size() > 0) {
        obj.insert(QString("restoreFileSpec"), ::OpenAPI::toJsonValue(m_restore_file_spec));
    }
    if (m_source_azure_file_share_uri_isSet) {
        obj.insert(QString("sourceAzureFileShareUri"), ::OpenAPI::toJsonValue(m_source_azure_file_share_uri));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPostRestoreRequest::getAzureFileShareUri() const {
    return m_azure_file_share_uri;
}
void OAIPostRestoreRequest::setAzureFileShareUri(const QString &azure_file_share_uri) {
    m_azure_file_share_uri = azure_file_share_uri;
    m_azure_file_share_uri_isSet = true;
}

bool OAIPostRestoreRequest::is_azure_file_share_uri_Set() const{
    return m_azure_file_share_uri_isSet;
}

bool OAIPostRestoreRequest::is_azure_file_share_uri_Valid() const{
    return m_azure_file_share_uri_isValid;
}

QString OAIPostRestoreRequest::getFailedFileList() const {
    return m_failed_file_list;
}
void OAIPostRestoreRequest::setFailedFileList(const QString &failed_file_list) {
    m_failed_file_list = failed_file_list;
    m_failed_file_list_isSet = true;
}

bool OAIPostRestoreRequest::is_failed_file_list_Set() const{
    return m_failed_file_list_isSet;
}

bool OAIPostRestoreRequest::is_failed_file_list_Valid() const{
    return m_failed_file_list_isValid;
}

QString OAIPostRestoreRequest::getPartition() const {
    return m_partition;
}
void OAIPostRestoreRequest::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIPostRestoreRequest::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIPostRestoreRequest::is_partition_Valid() const{
    return m_partition_isValid;
}

QString OAIPostRestoreRequest::getReplicaGroup() const {
    return m_replica_group;
}
void OAIPostRestoreRequest::setReplicaGroup(const QString &replica_group) {
    m_replica_group = replica_group;
    m_replica_group_isSet = true;
}

bool OAIPostRestoreRequest::is_replica_group_Set() const{
    return m_replica_group_isSet;
}

bool OAIPostRestoreRequest::is_replica_group_Valid() const{
    return m_replica_group_isValid;
}

QString OAIPostRestoreRequest::getRequestId() const {
    return m_request_id;
}
void OAIPostRestoreRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPostRestoreRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPostRestoreRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QList<OAIRestoreFileSpec> OAIPostRestoreRequest::getRestoreFileSpec() const {
    return m_restore_file_spec;
}
void OAIPostRestoreRequest::setRestoreFileSpec(const QList<OAIRestoreFileSpec> &restore_file_spec) {
    m_restore_file_spec = restore_file_spec;
    m_restore_file_spec_isSet = true;
}

bool OAIPostRestoreRequest::is_restore_file_spec_Set() const{
    return m_restore_file_spec_isSet;
}

bool OAIPostRestoreRequest::is_restore_file_spec_Valid() const{
    return m_restore_file_spec_isValid;
}

QString OAIPostRestoreRequest::getSourceAzureFileShareUri() const {
    return m_source_azure_file_share_uri;
}
void OAIPostRestoreRequest::setSourceAzureFileShareUri(const QString &source_azure_file_share_uri) {
    m_source_azure_file_share_uri = source_azure_file_share_uri;
    m_source_azure_file_share_uri_isSet = true;
}

bool OAIPostRestoreRequest::is_source_azure_file_share_uri_Set() const{
    return m_source_azure_file_share_uri_isSet;
}

bool OAIPostRestoreRequest::is_source_azure_file_share_uri_Valid() const{
    return m_source_azure_file_share_uri_isValid;
}

QString OAIPostRestoreRequest::getStatus() const {
    return m_status;
}
void OAIPostRestoreRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPostRestoreRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPostRestoreRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPostRestoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_file_share_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_file_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_file_spec.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_azure_file_share_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostRestoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
