/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataWarehouseUserActivitiesProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataWarehouseUserActivitiesProperties::OAIDataWarehouseUserActivitiesProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataWarehouseUserActivitiesProperties::OAIDataWarehouseUserActivitiesProperties() {
    this->initializeModel();
}

OAIDataWarehouseUserActivitiesProperties::~OAIDataWarehouseUserActivitiesProperties() {}

void OAIDataWarehouseUserActivitiesProperties::initializeModel() {

    m_active_queries_count_isSet = false;
    m_active_queries_count_isValid = false;
}

void OAIDataWarehouseUserActivitiesProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataWarehouseUserActivitiesProperties::fromJsonObject(QJsonObject json) {

    m_active_queries_count_isValid = ::OpenAPI::fromJsonValue(m_active_queries_count, json[QString("activeQueriesCount")]);
    m_active_queries_count_isSet = !json[QString("activeQueriesCount")].isNull() && m_active_queries_count_isValid;
}

QString OAIDataWarehouseUserActivitiesProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataWarehouseUserActivitiesProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_active_queries_count_isSet) {
        obj.insert(QString("activeQueriesCount"), ::OpenAPI::toJsonValue(m_active_queries_count));
    }
    return obj;
}

qint32 OAIDataWarehouseUserActivitiesProperties::getActiveQueriesCount() const {
    return m_active_queries_count;
}
void OAIDataWarehouseUserActivitiesProperties::setActiveQueriesCount(const qint32 &active_queries_count) {
    m_active_queries_count = active_queries_count;
    m_active_queries_count_isSet = true;
}

bool OAIDataWarehouseUserActivitiesProperties::is_active_queries_count_Set() const{
    return m_active_queries_count_isSet;
}

bool OAIDataWarehouseUserActivitiesProperties::is_active_queries_count_Valid() const{
    return m_active_queries_count_isValid;
}

bool OAIDataWarehouseUserActivitiesProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_queries_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataWarehouseUserActivitiesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
