/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User activities of a data warehouse. This currently includes the count of running or suspended queries. For more information, please view the sys.dm_pdw_exec_requests dynamic management view (DMV).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:42.194939-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataWarehouseUserActivitiesProperties {
  public static final String SERIALIZED_NAME_ACTIVE_QUERIES_COUNT = "activeQueriesCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_QUERIES_COUNT)
  private Integer activeQueriesCount;

  public DataWarehouseUserActivitiesProperties() {
  }

  public DataWarehouseUserActivitiesProperties(
     Integer activeQueriesCount
  ) {
    this();
    this.activeQueriesCount = activeQueriesCount;
  }

  /**
   * Count of running and suspended queries.
   * @return activeQueriesCount
   */
  @javax.annotation.Nullable
  public Integer getActiveQueriesCount() {
    return activeQueriesCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataWarehouseUserActivitiesProperties dataWarehouseUserActivitiesProperties = (DataWarehouseUserActivitiesProperties) o;
    return Objects.equals(this.activeQueriesCount, dataWarehouseUserActivitiesProperties.activeQueriesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeQueriesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataWarehouseUserActivitiesProperties {\n");
    sb.append("    activeQueriesCount: ").append(toIndentedString(activeQueriesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeQueriesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataWarehouseUserActivitiesProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataWarehouseUserActivitiesProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataWarehouseUserActivitiesProperties is not found in the empty JSON string", DataWarehouseUserActivitiesProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataWarehouseUserActivitiesProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataWarehouseUserActivitiesProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataWarehouseUserActivitiesProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataWarehouseUserActivitiesProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataWarehouseUserActivitiesProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataWarehouseUserActivitiesProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataWarehouseUserActivitiesProperties>() {
           @Override
           public void write(JsonWriter out, DataWarehouseUserActivitiesProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataWarehouseUserActivitiesProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataWarehouseUserActivitiesProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataWarehouseUserActivitiesProperties
   * @throws IOException if the JSON string is invalid with respect to DataWarehouseUserActivitiesProperties
   */
  public static DataWarehouseUserActivitiesProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataWarehouseUserActivitiesProperties.class);
  }

  /**
   * Convert an instance of DataWarehouseUserActivitiesProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

