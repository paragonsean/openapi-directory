/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class to specify which protocols are enabled
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:59.042062-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnabledProtocols {
  public static final String SERIALIZED_NAME_DASH = "dash";
  @SerializedName(SERIALIZED_NAME_DASH)
  private Boolean dash;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Boolean download;

  public static final String SERIALIZED_NAME_HLS = "hls";
  @SerializedName(SERIALIZED_NAME_HLS)
  private Boolean hls;

  public static final String SERIALIZED_NAME_SMOOTH_STREAMING = "smoothStreaming";
  @SerializedName(SERIALIZED_NAME_SMOOTH_STREAMING)
  private Boolean smoothStreaming;

  public EnabledProtocols() {
  }

  public EnabledProtocols dash(Boolean dash) {
    this.dash = dash;
    return this;
  }

  /**
   * Enable Dash protocol or not
   * @return dash
   */
  @javax.annotation.Nonnull
  public Boolean getDash() {
    return dash;
  }

  public void setDash(Boolean dash) {
    this.dash = dash;
  }


  public EnabledProtocols download(Boolean download) {
    this.download = download;
    return this;
  }

  /**
   * Enable Download protocol or not
   * @return download
   */
  @javax.annotation.Nonnull
  public Boolean getDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }


  public EnabledProtocols hls(Boolean hls) {
    this.hls = hls;
    return this;
  }

  /**
   * Enable Hls protocol or not
   * @return hls
   */
  @javax.annotation.Nonnull
  public Boolean getHls() {
    return hls;
  }

  public void setHls(Boolean hls) {
    this.hls = hls;
  }


  public EnabledProtocols smoothStreaming(Boolean smoothStreaming) {
    this.smoothStreaming = smoothStreaming;
    return this;
  }

  /**
   * Enable SmoothStreaming protocol or not
   * @return smoothStreaming
   */
  @javax.annotation.Nonnull
  public Boolean getSmoothStreaming() {
    return smoothStreaming;
  }

  public void setSmoothStreaming(Boolean smoothStreaming) {
    this.smoothStreaming = smoothStreaming;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnabledProtocols enabledProtocols = (EnabledProtocols) o;
    return Objects.equals(this.dash, enabledProtocols.dash) &&
        Objects.equals(this.download, enabledProtocols.download) &&
        Objects.equals(this.hls, enabledProtocols.hls) &&
        Objects.equals(this.smoothStreaming, enabledProtocols.smoothStreaming);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dash, download, hls, smoothStreaming);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnabledProtocols {\n");
    sb.append("    dash: ").append(toIndentedString(dash)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    hls: ").append(toIndentedString(hls)).append("\n");
    sb.append("    smoothStreaming: ").append(toIndentedString(smoothStreaming)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dash");
    openapiFields.add("download");
    openapiFields.add("hls");
    openapiFields.add("smoothStreaming");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dash");
    openapiRequiredFields.add("download");
    openapiRequiredFields.add("hls");
    openapiRequiredFields.add("smoothStreaming");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnabledProtocols
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnabledProtocols.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnabledProtocols is not found in the empty JSON string", EnabledProtocols.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnabledProtocols.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnabledProtocols` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnabledProtocols.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnabledProtocols.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnabledProtocols' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnabledProtocols> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnabledProtocols.class));

       return (TypeAdapter<T>) new TypeAdapter<EnabledProtocols>() {
           @Override
           public void write(JsonWriter out, EnabledProtocols value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnabledProtocols read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnabledProtocols given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnabledProtocols
   * @throws IOException if the JSON string is invalid with respect to EnabledProtocols
   */
  public static EnabledProtocols fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnabledProtocols.class);
  }

  /**
   * Convert an instance of EnabledProtocols to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

