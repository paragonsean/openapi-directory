/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class of paths for streaming
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:59.042062-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingPath {
  /**
   * Encryption scheme
   */
  @JsonAdapter(EncryptionSchemeEnum.Adapter.class)
  public enum EncryptionSchemeEnum {
    NO_ENCRYPTION("NoEncryption"),
    
    ENVELOPE_ENCRYPTION("EnvelopeEncryption"),
    
    COMMON_ENCRYPTION_CENC("CommonEncryptionCenc"),
    
    COMMON_ENCRYPTION_CBCS("CommonEncryptionCbcs");

    private String value;

    EncryptionSchemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionSchemeEnum fromValue(String value) {
      for (EncryptionSchemeEnum b : EncryptionSchemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionSchemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionSchemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionSchemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionSchemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionSchemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_SCHEME = "encryptionScheme";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SCHEME)
  private EncryptionSchemeEnum encryptionScheme;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List<String> paths = new ArrayList<>();

  /**
   * Streaming protocol
   */
  @JsonAdapter(StreamingProtocolEnum.Adapter.class)
  public enum StreamingProtocolEnum {
    HLS("Hls"),
    
    DASH("Dash"),
    
    SMOOTH_STREAMING("SmoothStreaming"),
    
    DOWNLOAD("Download");

    private String value;

    StreamingProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamingProtocolEnum fromValue(String value) {
      for (StreamingProtocolEnum b : StreamingProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamingProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamingProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamingProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamingProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamingProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAMING_PROTOCOL = "streamingProtocol";
  @SerializedName(SERIALIZED_NAME_STREAMING_PROTOCOL)
  private StreamingProtocolEnum streamingProtocol;

  public StreamingPath() {
  }

  public StreamingPath encryptionScheme(EncryptionSchemeEnum encryptionScheme) {
    this.encryptionScheme = encryptionScheme;
    return this;
  }

  /**
   * Encryption scheme
   * @return encryptionScheme
   */
  @javax.annotation.Nonnull
  public EncryptionSchemeEnum getEncryptionScheme() {
    return encryptionScheme;
  }

  public void setEncryptionScheme(EncryptionSchemeEnum encryptionScheme) {
    this.encryptionScheme = encryptionScheme;
  }


  public StreamingPath paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public StreamingPath addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

  /**
   * Streaming paths for each protocol and encryptionScheme pair
   * @return paths
   */
  @javax.annotation.Nullable
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }


  public StreamingPath streamingProtocol(StreamingProtocolEnum streamingProtocol) {
    this.streamingProtocol = streamingProtocol;
    return this;
  }

  /**
   * Streaming protocol
   * @return streamingProtocol
   */
  @javax.annotation.Nonnull
  public StreamingProtocolEnum getStreamingProtocol() {
    return streamingProtocol;
  }

  public void setStreamingProtocol(StreamingProtocolEnum streamingProtocol) {
    this.streamingProtocol = streamingProtocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingPath streamingPath = (StreamingPath) o;
    return Objects.equals(this.encryptionScheme, streamingPath.encryptionScheme) &&
        Objects.equals(this.paths, streamingPath.paths) &&
        Objects.equals(this.streamingProtocol, streamingPath.streamingProtocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionScheme, paths, streamingProtocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingPath {\n");
    sb.append("    encryptionScheme: ").append(toIndentedString(encryptionScheme)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    streamingProtocol: ").append(toIndentedString(streamingProtocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionScheme");
    openapiFields.add("paths");
    openapiFields.add("streamingProtocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("encryptionScheme");
    openapiRequiredFields.add("streamingProtocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingPath
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingPath.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingPath is not found in the empty JSON string", StreamingPath.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingPath.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingPath` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamingPath.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("encryptionScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionScheme").toString()));
      }
      // validate the required field `encryptionScheme`
      EncryptionSchemeEnum.validateJsonElement(jsonObj.get("encryptionScheme"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull() && !jsonObj.get("paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paths` to be an array in the JSON string but got `%s`", jsonObj.get("paths").toString()));
      }
      if (!jsonObj.get("streamingProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamingProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamingProtocol").toString()));
      }
      // validate the required field `streamingProtocol`
      StreamingProtocolEnum.validateJsonElement(jsonObj.get("streamingProtocol"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingPath.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingPath' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingPath> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingPath.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingPath>() {
           @Override
           public void write(JsonWriter out, StreamingPath value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingPath read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingPath given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingPath
   * @throws IOException if the JSON string is invalid with respect to StreamingPath
   */
  public static StreamingPath fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingPath.class);
  }

  /**
   * Convert an instance of StreamingPath to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

