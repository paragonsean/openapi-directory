/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StreamingPath;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class of response for listPaths action
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:59.042062-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPathsResponse {
  public static final String SERIALIZED_NAME_DOWNLOAD_PATHS = "downloadPaths";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_PATHS)
  private List<String> downloadPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_STREAMING_PATHS = "streamingPaths";
  @SerializedName(SERIALIZED_NAME_STREAMING_PATHS)
  private List<StreamingPath> streamingPaths = new ArrayList<>();

  public ListPathsResponse() {
  }

  public ListPathsResponse downloadPaths(List<String> downloadPaths) {
    this.downloadPaths = downloadPaths;
    return this;
  }

  public ListPathsResponse addDownloadPathsItem(String downloadPathsItem) {
    if (this.downloadPaths == null) {
      this.downloadPaths = new ArrayList<>();
    }
    this.downloadPaths.add(downloadPathsItem);
    return this;
  }

  /**
   * Download Paths supported by current Streaming Locator
   * @return downloadPaths
   */
  @javax.annotation.Nullable
  public List<String> getDownloadPaths() {
    return downloadPaths;
  }

  public void setDownloadPaths(List<String> downloadPaths) {
    this.downloadPaths = downloadPaths;
  }


  public ListPathsResponse streamingPaths(List<StreamingPath> streamingPaths) {
    this.streamingPaths = streamingPaths;
    return this;
  }

  public ListPathsResponse addStreamingPathsItem(StreamingPath streamingPathsItem) {
    if (this.streamingPaths == null) {
      this.streamingPaths = new ArrayList<>();
    }
    this.streamingPaths.add(streamingPathsItem);
    return this;
  }

  /**
   * Streaming Paths supported by current Streaming Locator
   * @return streamingPaths
   */
  @javax.annotation.Nullable
  public List<StreamingPath> getStreamingPaths() {
    return streamingPaths;
  }

  public void setStreamingPaths(List<StreamingPath> streamingPaths) {
    this.streamingPaths = streamingPaths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPathsResponse listPathsResponse = (ListPathsResponse) o;
    return Objects.equals(this.downloadPaths, listPathsResponse.downloadPaths) &&
        Objects.equals(this.streamingPaths, listPathsResponse.streamingPaths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadPaths, streamingPaths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPathsResponse {\n");
    sb.append("    downloadPaths: ").append(toIndentedString(downloadPaths)).append("\n");
    sb.append("    streamingPaths: ").append(toIndentedString(streamingPaths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("downloadPaths");
    openapiFields.add("streamingPaths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPathsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPathsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPathsResponse is not found in the empty JSON string", ListPathsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPathsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPathsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("downloadPaths") != null && !jsonObj.get("downloadPaths").isJsonNull() && !jsonObj.get("downloadPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadPaths` to be an array in the JSON string but got `%s`", jsonObj.get("downloadPaths").toString()));
      }
      if (jsonObj.get("streamingPaths") != null && !jsonObj.get("streamingPaths").isJsonNull()) {
        JsonArray jsonArraystreamingPaths = jsonObj.getAsJsonArray("streamingPaths");
        if (jsonArraystreamingPaths != null) {
          // ensure the json data is an array
          if (!jsonObj.get("streamingPaths").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `streamingPaths` to be an array in the JSON string but got `%s`", jsonObj.get("streamingPaths").toString()));
          }

          // validate the optional field `streamingPaths` (array)
          for (int i = 0; i < jsonArraystreamingPaths.size(); i++) {
            StreamingPath.validateJsonElement(jsonArraystreamingPaths.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPathsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPathsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPathsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPathsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPathsResponse>() {
           @Override
           public void write(JsonWriter out, ListPathsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPathsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPathsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPathsResponse
   * @throws IOException if the JSON string is invalid with respect to ListPathsResponse
   */
  public static ListPathsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPathsResponse.class);
  }

  /**
   * Convert an instance of ListPathsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

