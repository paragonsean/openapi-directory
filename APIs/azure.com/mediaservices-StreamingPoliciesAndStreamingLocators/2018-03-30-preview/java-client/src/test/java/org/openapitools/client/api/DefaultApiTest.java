/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListContentKeysResponse;
import org.openapitools.client.model.ListPathsResponse;
import org.openapitools.client.model.StreamingLocator;
import org.openapitools.client.model.StreamingLocatorCollection;
import org.openapitools.client.model.StreamingLocatorsListDefaultResponse;
import org.openapitools.client.model.StreamingPolicy;
import org.openapitools.client.model.StreamingPolicyCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create a Streaming Locator
     *
     * Create a Streaming Locator in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingLocatorsCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String streamingLocatorName = null;
        String apiVersion = null;
        StreamingLocator parameters = null;
        StreamingLocator response = api.streamingLocatorsCreate(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete a Streaming Locator
     *
     * Deletes a Streaming Locator in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingLocatorsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String streamingLocatorName = null;
        String apiVersion = null;
        api.streamingLocatorsDelete(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Streaming Locator
     *
     * Get the details of a Streaming Locator in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingLocatorsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String streamingLocatorName = null;
        String apiVersion = null;
        StreamingLocator response = api.streamingLocatorsGet(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion);
        // TODO: test validations
    }

    /**
     * List Streaming Locators
     *
     * Lists the Streaming Locators in the account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingLocatorsListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $orderby = null;
        StreamingLocatorCollection response = api.streamingLocatorsList(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $orderby);
        // TODO: test validations
    }

    /**
     * List Content Keys
     *
     * List Content Keys used by this Streaming Locator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingLocatorsListContentKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String streamingLocatorName = null;
        String apiVersion = null;
        ListContentKeysResponse response = api.streamingLocatorsListContentKeys(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion);
        // TODO: test validations
    }

    /**
     * List Paths
     *
     * List Paths supported by this Streaming Locator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingLocatorsListPathsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String streamingLocatorName = null;
        String apiVersion = null;
        ListPathsResponse response = api.streamingLocatorsListPaths(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion);
        // TODO: test validations
    }

    /**
     * Create a Streaming Policy
     *
     * Create a Streaming Policy in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingPoliciesCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String streamingPolicyName = null;
        String apiVersion = null;
        StreamingPolicy parameters = null;
        StreamingPolicy response = api.streamingPoliciesCreate(subscriptionId, resourceGroupName, accountName, streamingPolicyName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete a Streaming Policy
     *
     * Deletes a Streaming Policy in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingPoliciesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String streamingPolicyName = null;
        String apiVersion = null;
        api.streamingPoliciesDelete(subscriptionId, resourceGroupName, accountName, streamingPolicyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Streaming Policy
     *
     * Get the details of a Streaming Policy in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingPoliciesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String streamingPolicyName = null;
        String apiVersion = null;
        StreamingPolicy response = api.streamingPoliciesGet(subscriptionId, resourceGroupName, accountName, streamingPolicyName, apiVersion);
        // TODO: test validations
    }

    /**
     * List Streaming Policies
     *
     * Lists the Streaming Policies in the account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamingPoliciesListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $orderby = null;
        StreamingPolicyCollection response = api.streamingPoliciesList(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $orderby);
        // TODO: test validations
    }

}
