/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvelopeEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvelopeEncryption::OAIEnvelopeEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvelopeEncryption::OAIEnvelopeEncryption() {
    this->initializeModel();
}

OAIEnvelopeEncryption::~OAIEnvelopeEncryption() {}

void OAIEnvelopeEncryption::initializeModel() {

    m_clear_tracks_isSet = false;
    m_clear_tracks_isValid = false;

    m_content_keys_isSet = false;
    m_content_keys_isValid = false;

    m_custom_license_acquisition_url_template_isSet = false;
    m_custom_license_acquisition_url_template_isValid = false;

    m_enabled_protocols_isSet = false;
    m_enabled_protocols_isValid = false;
}

void OAIEnvelopeEncryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvelopeEncryption::fromJsonObject(QJsonObject json) {

    m_clear_tracks_isValid = ::OpenAPI::fromJsonValue(m_clear_tracks, json[QString("clearTracks")]);
    m_clear_tracks_isSet = !json[QString("clearTracks")].isNull() && m_clear_tracks_isValid;

    m_content_keys_isValid = ::OpenAPI::fromJsonValue(m_content_keys, json[QString("contentKeys")]);
    m_content_keys_isSet = !json[QString("contentKeys")].isNull() && m_content_keys_isValid;

    m_custom_license_acquisition_url_template_isValid = ::OpenAPI::fromJsonValue(m_custom_license_acquisition_url_template, json[QString("customLicenseAcquisitionUrlTemplate")]);
    m_custom_license_acquisition_url_template_isSet = !json[QString("customLicenseAcquisitionUrlTemplate")].isNull() && m_custom_license_acquisition_url_template_isValid;

    m_enabled_protocols_isValid = ::OpenAPI::fromJsonValue(m_enabled_protocols, json[QString("enabledProtocols")]);
    m_enabled_protocols_isSet = !json[QString("enabledProtocols")].isNull() && m_enabled_protocols_isValid;
}

QString OAIEnvelopeEncryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvelopeEncryption::asJsonObject() const {
    QJsonObject obj;
    if (m_clear_tracks.size() > 0) {
        obj.insert(QString("clearTracks"), ::OpenAPI::toJsonValue(m_clear_tracks));
    }
    if (m_content_keys.isSet()) {
        obj.insert(QString("contentKeys"), ::OpenAPI::toJsonValue(m_content_keys));
    }
    if (m_custom_license_acquisition_url_template_isSet) {
        obj.insert(QString("customLicenseAcquisitionUrlTemplate"), ::OpenAPI::toJsonValue(m_custom_license_acquisition_url_template));
    }
    if (m_enabled_protocols.isSet()) {
        obj.insert(QString("enabledProtocols"), ::OpenAPI::toJsonValue(m_enabled_protocols));
    }
    return obj;
}

QList<OAITrackSelection> OAIEnvelopeEncryption::getClearTracks() const {
    return m_clear_tracks;
}
void OAIEnvelopeEncryption::setClearTracks(const QList<OAITrackSelection> &clear_tracks) {
    m_clear_tracks = clear_tracks;
    m_clear_tracks_isSet = true;
}

bool OAIEnvelopeEncryption::is_clear_tracks_Set() const{
    return m_clear_tracks_isSet;
}

bool OAIEnvelopeEncryption::is_clear_tracks_Valid() const{
    return m_clear_tracks_isValid;
}

OAIStreamingPolicyContentKeys OAIEnvelopeEncryption::getContentKeys() const {
    return m_content_keys;
}
void OAIEnvelopeEncryption::setContentKeys(const OAIStreamingPolicyContentKeys &content_keys) {
    m_content_keys = content_keys;
    m_content_keys_isSet = true;
}

bool OAIEnvelopeEncryption::is_content_keys_Set() const{
    return m_content_keys_isSet;
}

bool OAIEnvelopeEncryption::is_content_keys_Valid() const{
    return m_content_keys_isValid;
}

QString OAIEnvelopeEncryption::getCustomLicenseAcquisitionUrlTemplate() const {
    return m_custom_license_acquisition_url_template;
}
void OAIEnvelopeEncryption::setCustomLicenseAcquisitionUrlTemplate(const QString &custom_license_acquisition_url_template) {
    m_custom_license_acquisition_url_template = custom_license_acquisition_url_template;
    m_custom_license_acquisition_url_template_isSet = true;
}

bool OAIEnvelopeEncryption::is_custom_license_acquisition_url_template_Set() const{
    return m_custom_license_acquisition_url_template_isSet;
}

bool OAIEnvelopeEncryption::is_custom_license_acquisition_url_template_Valid() const{
    return m_custom_license_acquisition_url_template_isValid;
}

OAIEnabledProtocols OAIEnvelopeEncryption::getEnabledProtocols() const {
    return m_enabled_protocols;
}
void OAIEnvelopeEncryption::setEnabledProtocols(const OAIEnabledProtocols &enabled_protocols) {
    m_enabled_protocols = enabled_protocols;
    m_enabled_protocols_isSet = true;
}

bool OAIEnvelopeEncryption::is_enabled_protocols_Set() const{
    return m_enabled_protocols_isSet;
}

bool OAIEnvelopeEncryption::is_enabled_protocols_Valid() const{
    return m_enabled_protocols_isValid;
}

bool OAIEnvelopeEncryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clear_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_license_acquisition_url_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_protocols.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvelopeEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
