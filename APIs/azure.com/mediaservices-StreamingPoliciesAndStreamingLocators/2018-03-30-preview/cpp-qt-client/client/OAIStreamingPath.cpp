/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingPath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingPath::OAIStreamingPath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingPath::OAIStreamingPath() {
    this->initializeModel();
}

OAIStreamingPath::~OAIStreamingPath() {}

void OAIStreamingPath::initializeModel() {

    m_encryption_scheme_isSet = false;
    m_encryption_scheme_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_streaming_protocol_isSet = false;
    m_streaming_protocol_isValid = false;
}

void OAIStreamingPath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingPath::fromJsonObject(QJsonObject json) {

    m_encryption_scheme_isValid = ::OpenAPI::fromJsonValue(m_encryption_scheme, json[QString("encryptionScheme")]);
    m_encryption_scheme_isSet = !json[QString("encryptionScheme")].isNull() && m_encryption_scheme_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("paths")]);
    m_paths_isSet = !json[QString("paths")].isNull() && m_paths_isValid;

    m_streaming_protocol_isValid = ::OpenAPI::fromJsonValue(m_streaming_protocol, json[QString("streamingProtocol")]);
    m_streaming_protocol_isSet = !json[QString("streamingProtocol")].isNull() && m_streaming_protocol_isValid;
}

QString OAIStreamingPath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingPath::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_scheme_isSet) {
        obj.insert(QString("encryptionScheme"), ::OpenAPI::toJsonValue(m_encryption_scheme));
    }
    if (m_paths.size() > 0) {
        obj.insert(QString("paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_streaming_protocol_isSet) {
        obj.insert(QString("streamingProtocol"), ::OpenAPI::toJsonValue(m_streaming_protocol));
    }
    return obj;
}

QString OAIStreamingPath::getEncryptionScheme() const {
    return m_encryption_scheme;
}
void OAIStreamingPath::setEncryptionScheme(const QString &encryption_scheme) {
    m_encryption_scheme = encryption_scheme;
    m_encryption_scheme_isSet = true;
}

bool OAIStreamingPath::is_encryption_scheme_Set() const{
    return m_encryption_scheme_isSet;
}

bool OAIStreamingPath::is_encryption_scheme_Valid() const{
    return m_encryption_scheme_isValid;
}

QList<QString> OAIStreamingPath::getPaths() const {
    return m_paths;
}
void OAIStreamingPath::setPaths(const QList<QString> &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAIStreamingPath::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAIStreamingPath::is_paths_Valid() const{
    return m_paths_isValid;
}

QString OAIStreamingPath::getStreamingProtocol() const {
    return m_streaming_protocol;
}
void OAIStreamingPath::setStreamingProtocol(const QString &streaming_protocol) {
    m_streaming_protocol = streaming_protocol;
    m_streaming_protocol_isSet = true;
}

bool OAIStreamingPath::is_streaming_protocol_Set() const{
    return m_streaming_protocol_isSet;
}

bool OAIStreamingPath::is_streaming_protocol_Valid() const{
    return m_streaming_protocol_isValid;
}

bool OAIStreamingPath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingPath::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encryption_scheme_isValid && m_streaming_protocol_isValid && true;
}

} // namespace OpenAPI
