/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingLocatorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingLocatorProperties::OAIStreamingLocatorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingLocatorProperties::OAIStreamingLocatorProperties() {
    this->initializeModel();
}

OAIStreamingLocatorProperties::~OAIStreamingLocatorProperties() {}

void OAIStreamingLocatorProperties::initializeModel() {

    m_asset_name_isSet = false;
    m_asset_name_isValid = false;

    m_content_keys_isSet = false;
    m_content_keys_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_default_content_key_policy_name_isSet = false;
    m_default_content_key_policy_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_streaming_locator_id_isSet = false;
    m_streaming_locator_id_isValid = false;

    m_streaming_policy_name_isSet = false;
    m_streaming_policy_name_isValid = false;
}

void OAIStreamingLocatorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingLocatorProperties::fromJsonObject(QJsonObject json) {

    m_asset_name_isValid = ::OpenAPI::fromJsonValue(m_asset_name, json[QString("assetName")]);
    m_asset_name_isSet = !json[QString("assetName")].isNull() && m_asset_name_isValid;

    m_content_keys_isValid = ::OpenAPI::fromJsonValue(m_content_keys, json[QString("contentKeys")]);
    m_content_keys_isSet = !json[QString("contentKeys")].isNull() && m_content_keys_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_default_content_key_policy_name_isValid = ::OpenAPI::fromJsonValue(m_default_content_key_policy_name, json[QString("defaultContentKeyPolicyName")]);
    m_default_content_key_policy_name_isSet = !json[QString("defaultContentKeyPolicyName")].isNull() && m_default_content_key_policy_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_streaming_locator_id_isValid = ::OpenAPI::fromJsonValue(m_streaming_locator_id, json[QString("streamingLocatorId")]);
    m_streaming_locator_id_isSet = !json[QString("streamingLocatorId")].isNull() && m_streaming_locator_id_isValid;

    m_streaming_policy_name_isValid = ::OpenAPI::fromJsonValue(m_streaming_policy_name, json[QString("streamingPolicyName")]);
    m_streaming_policy_name_isSet = !json[QString("streamingPolicyName")].isNull() && m_streaming_policy_name_isValid;
}

QString OAIStreamingLocatorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingLocatorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_name_isSet) {
        obj.insert(QString("assetName"), ::OpenAPI::toJsonValue(m_asset_name));
    }
    if (m_content_keys.size() > 0) {
        obj.insert(QString("contentKeys"), ::OpenAPI::toJsonValue(m_content_keys));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_default_content_key_policy_name_isSet) {
        obj.insert(QString("defaultContentKeyPolicyName"), ::OpenAPI::toJsonValue(m_default_content_key_policy_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_streaming_locator_id_isSet) {
        obj.insert(QString("streamingLocatorId"), ::OpenAPI::toJsonValue(m_streaming_locator_id));
    }
    if (m_streaming_policy_name_isSet) {
        obj.insert(QString("streamingPolicyName"), ::OpenAPI::toJsonValue(m_streaming_policy_name));
    }
    return obj;
}

QString OAIStreamingLocatorProperties::getAssetName() const {
    return m_asset_name;
}
void OAIStreamingLocatorProperties::setAssetName(const QString &asset_name) {
    m_asset_name = asset_name;
    m_asset_name_isSet = true;
}

bool OAIStreamingLocatorProperties::is_asset_name_Set() const{
    return m_asset_name_isSet;
}

bool OAIStreamingLocatorProperties::is_asset_name_Valid() const{
    return m_asset_name_isValid;
}

QList<OAIStreamingLocatorUserDefinedContentKey> OAIStreamingLocatorProperties::getContentKeys() const {
    return m_content_keys;
}
void OAIStreamingLocatorProperties::setContentKeys(const QList<OAIStreamingLocatorUserDefinedContentKey> &content_keys) {
    m_content_keys = content_keys;
    m_content_keys_isSet = true;
}

bool OAIStreamingLocatorProperties::is_content_keys_Set() const{
    return m_content_keys_isSet;
}

bool OAIStreamingLocatorProperties::is_content_keys_Valid() const{
    return m_content_keys_isValid;
}

QDateTime OAIStreamingLocatorProperties::getCreated() const {
    return m_created;
}
void OAIStreamingLocatorProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIStreamingLocatorProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIStreamingLocatorProperties::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIStreamingLocatorProperties::getDefaultContentKeyPolicyName() const {
    return m_default_content_key_policy_name;
}
void OAIStreamingLocatorProperties::setDefaultContentKeyPolicyName(const QString &default_content_key_policy_name) {
    m_default_content_key_policy_name = default_content_key_policy_name;
    m_default_content_key_policy_name_isSet = true;
}

bool OAIStreamingLocatorProperties::is_default_content_key_policy_name_Set() const{
    return m_default_content_key_policy_name_isSet;
}

bool OAIStreamingLocatorProperties::is_default_content_key_policy_name_Valid() const{
    return m_default_content_key_policy_name_isValid;
}

QDateTime OAIStreamingLocatorProperties::getEndTime() const {
    return m_end_time;
}
void OAIStreamingLocatorProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStreamingLocatorProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStreamingLocatorProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIStreamingLocatorProperties::getStartTime() const {
    return m_start_time;
}
void OAIStreamingLocatorProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStreamingLocatorProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStreamingLocatorProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIStreamingLocatorProperties::getStreamingLocatorId() const {
    return m_streaming_locator_id;
}
void OAIStreamingLocatorProperties::setStreamingLocatorId(const QString &streaming_locator_id) {
    m_streaming_locator_id = streaming_locator_id;
    m_streaming_locator_id_isSet = true;
}

bool OAIStreamingLocatorProperties::is_streaming_locator_id_Set() const{
    return m_streaming_locator_id_isSet;
}

bool OAIStreamingLocatorProperties::is_streaming_locator_id_Valid() const{
    return m_streaming_locator_id_isValid;
}

QString OAIStreamingLocatorProperties::getStreamingPolicyName() const {
    return m_streaming_policy_name;
}
void OAIStreamingLocatorProperties::setStreamingPolicyName(const QString &streaming_policy_name) {
    m_streaming_policy_name = streaming_policy_name;
    m_streaming_policy_name_isSet = true;
}

bool OAIStreamingLocatorProperties::is_streaming_policy_name_Set() const{
    return m_streaming_policy_name_isSet;
}

bool OAIStreamingLocatorProperties::is_streaming_policy_name_Valid() const{
    return m_streaming_policy_name_isValid;
}

bool OAIStreamingLocatorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_content_key_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_locator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingLocatorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_name_isValid && m_streaming_policy_name_isValid && true;
}

} // namespace OpenAPI
