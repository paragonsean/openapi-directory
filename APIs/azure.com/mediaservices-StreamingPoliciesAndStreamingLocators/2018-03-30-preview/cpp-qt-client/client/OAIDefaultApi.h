/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListContentKeysResponse.h"
#include "OAIListPathsResponse.h"
#include "OAIStreamingLocator.h"
#include "OAIStreamingLocatorCollection.h"
#include "OAIStreamingLocators_List_default_response.h"
#include "OAIStreamingPolicy.h"
#include "OAIStreamingPolicyCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  streaming_locator_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIStreamingLocator [required]
    */
    virtual void streamingLocatorsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &streaming_locator_name, const QString &api_version, const OAIStreamingLocator &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  streaming_locator_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void streamingLocatorsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &streaming_locator_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  streaming_locator_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void streamingLocatorsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &streaming_locator_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void streamingLocatorsList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  streaming_locator_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void streamingLocatorsListContentKeys(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &streaming_locator_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  streaming_locator_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void streamingLocatorsListPaths(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &streaming_locator_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  streaming_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIStreamingPolicy [required]
    */
    virtual void streamingPoliciesCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &streaming_policy_name, const QString &api_version, const OAIStreamingPolicy &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  streaming_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void streamingPoliciesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &streaming_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  streaming_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void streamingPoliciesGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &streaming_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void streamingPoliciesList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void streamingLocatorsCreateCallback(OAIHttpRequestWorker *worker);
    void streamingLocatorsDeleteCallback(OAIHttpRequestWorker *worker);
    void streamingLocatorsGetCallback(OAIHttpRequestWorker *worker);
    void streamingLocatorsListCallback(OAIHttpRequestWorker *worker);
    void streamingLocatorsListContentKeysCallback(OAIHttpRequestWorker *worker);
    void streamingLocatorsListPathsCallback(OAIHttpRequestWorker *worker);
    void streamingPoliciesCreateCallback(OAIHttpRequestWorker *worker);
    void streamingPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void streamingPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void streamingPoliciesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void streamingLocatorsCreateSignal(OAIStreamingLocator summary);
    void streamingLocatorsDeleteSignal();
    void streamingLocatorsGetSignal(OAIStreamingLocator summary);
    void streamingLocatorsListSignal(OAIStreamingLocatorCollection summary);
    void streamingLocatorsListContentKeysSignal(OAIListContentKeysResponse summary);
    void streamingLocatorsListPathsSignal(OAIListPathsResponse summary);
    void streamingPoliciesCreateSignal(OAIStreamingPolicy summary);
    void streamingPoliciesDeleteSignal();
    void streamingPoliciesGetSignal(OAIStreamingPolicy summary);
    void streamingPoliciesListSignal(OAIStreamingPolicyCollection summary);


    void streamingLocatorsCreateSignalFull(OAIHttpRequestWorker *worker, OAIStreamingLocator summary);
    void streamingLocatorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void streamingLocatorsGetSignalFull(OAIHttpRequestWorker *worker, OAIStreamingLocator summary);
    void streamingLocatorsListSignalFull(OAIHttpRequestWorker *worker, OAIStreamingLocatorCollection summary);
    void streamingLocatorsListContentKeysSignalFull(OAIHttpRequestWorker *worker, OAIListContentKeysResponse summary);
    void streamingLocatorsListPathsSignalFull(OAIHttpRequestWorker *worker, OAIListPathsResponse summary);
    void streamingPoliciesCreateSignalFull(OAIHttpRequestWorker *worker, OAIStreamingPolicy summary);
    void streamingPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void streamingPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIStreamingPolicy summary);
    void streamingPoliciesListSignalFull(OAIHttpRequestWorker *worker, OAIStreamingPolicyCollection summary);

    Q_DECL_DEPRECATED_X("Use streamingLocatorsCreateSignalError() instead")
    void streamingLocatorsCreateSignalE(OAIStreamingLocator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsCreateSignalError(OAIStreamingLocator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsDeleteSignalError() instead")
    void streamingLocatorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsGetSignalError() instead")
    void streamingLocatorsGetSignalE(OAIStreamingLocator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsGetSignalError(OAIStreamingLocator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsListSignalError() instead")
    void streamingLocatorsListSignalE(OAIStreamingLocatorCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsListSignalError(OAIStreamingLocatorCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsListContentKeysSignalError() instead")
    void streamingLocatorsListContentKeysSignalE(OAIListContentKeysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsListContentKeysSignalError(OAIListContentKeysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsListPathsSignalError() instead")
    void streamingLocatorsListPathsSignalE(OAIListPathsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsListPathsSignalError(OAIListPathsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingPoliciesCreateSignalError() instead")
    void streamingPoliciesCreateSignalE(OAIStreamingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingPoliciesCreateSignalError(OAIStreamingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingPoliciesDeleteSignalError() instead")
    void streamingPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void streamingPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingPoliciesGetSignalError() instead")
    void streamingPoliciesGetSignalE(OAIStreamingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingPoliciesGetSignalError(OAIStreamingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingPoliciesListSignalError() instead")
    void streamingPoliciesListSignalE(OAIStreamingPolicyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingPoliciesListSignalError(OAIStreamingPolicyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use streamingLocatorsCreateSignalErrorFull() instead")
    void streamingLocatorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsDeleteSignalErrorFull() instead")
    void streamingLocatorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsGetSignalErrorFull() instead")
    void streamingLocatorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsListSignalErrorFull() instead")
    void streamingLocatorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsListContentKeysSignalErrorFull() instead")
    void streamingLocatorsListContentKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsListContentKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingLocatorsListPathsSignalErrorFull() instead")
    void streamingLocatorsListPathsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingLocatorsListPathsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingPoliciesCreateSignalErrorFull() instead")
    void streamingPoliciesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingPoliciesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingPoliciesDeleteSignalErrorFull() instead")
    void streamingPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingPoliciesGetSignalErrorFull() instead")
    void streamingPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamingPoliciesListSignalErrorFull() instead")
    void streamingPoliciesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamingPoliciesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
