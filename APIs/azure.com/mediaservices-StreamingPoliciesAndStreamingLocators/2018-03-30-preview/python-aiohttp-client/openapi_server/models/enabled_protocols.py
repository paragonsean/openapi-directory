# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnabledProtocols(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dash: bool=None, download: bool=None, hls: bool=None, smooth_streaming: bool=None):
        """EnabledProtocols - a model defined in OpenAPI

        :param dash: The dash of this EnabledProtocols.
        :param download: The download of this EnabledProtocols.
        :param hls: The hls of this EnabledProtocols.
        :param smooth_streaming: The smooth_streaming of this EnabledProtocols.
        """
        self.openapi_types = {
            'dash': bool,
            'download': bool,
            'hls': bool,
            'smooth_streaming': bool
        }

        self.attribute_map = {
            'dash': 'dash',
            'download': 'download',
            'hls': 'hls',
            'smooth_streaming': 'smoothStreaming'
        }

        self._dash = dash
        self._download = download
        self._hls = hls
        self._smooth_streaming = smooth_streaming

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnabledProtocols':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnabledProtocols of this EnabledProtocols.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dash(self):
        """Gets the dash of this EnabledProtocols.

        Enable Dash protocol or not

        :return: The dash of this EnabledProtocols.
        :rtype: bool
        """
        return self._dash

    @dash.setter
    def dash(self, dash):
        """Sets the dash of this EnabledProtocols.

        Enable Dash protocol or not

        :param dash: The dash of this EnabledProtocols.
        :type dash: bool
        """
        if dash is None:
            raise ValueError("Invalid value for `dash`, must not be `None`")

        self._dash = dash

    @property
    def download(self):
        """Gets the download of this EnabledProtocols.

        Enable Download protocol or not

        :return: The download of this EnabledProtocols.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this EnabledProtocols.

        Enable Download protocol or not

        :param download: The download of this EnabledProtocols.
        :type download: bool
        """
        if download is None:
            raise ValueError("Invalid value for `download`, must not be `None`")

        self._download = download

    @property
    def hls(self):
        """Gets the hls of this EnabledProtocols.

        Enable Hls protocol or not

        :return: The hls of this EnabledProtocols.
        :rtype: bool
        """
        return self._hls

    @hls.setter
    def hls(self, hls):
        """Sets the hls of this EnabledProtocols.

        Enable Hls protocol or not

        :param hls: The hls of this EnabledProtocols.
        :type hls: bool
        """
        if hls is None:
            raise ValueError("Invalid value for `hls`, must not be `None`")

        self._hls = hls

    @property
    def smooth_streaming(self):
        """Gets the smooth_streaming of this EnabledProtocols.

        Enable SmoothStreaming protocol or not

        :return: The smooth_streaming of this EnabledProtocols.
        :rtype: bool
        """
        return self._smooth_streaming

    @smooth_streaming.setter
    def smooth_streaming(self, smooth_streaming):
        """Sets the smooth_streaming of this EnabledProtocols.

        Enable SmoothStreaming protocol or not

        :param smooth_streaming: The smooth_streaming of this EnabledProtocols.
        :type smooth_streaming: bool
        """
        if smooth_streaming is None:
            raise ValueError("Invalid value for `smooth_streaming`, must not be `None`")

        self._smooth_streaming = smooth_streaming
