# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cenc_drm_configuration import CencDrmConfiguration
from openapi_server.models.enabled_protocols import EnabledProtocols
from openapi_server.models.streaming_policy_content_keys import StreamingPolicyContentKeys
from openapi_server.models.track_selection import TrackSelection
from openapi_server import util


class CommonEncryptionCenc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clear_tracks: List[TrackSelection]=None, content_keys: StreamingPolicyContentKeys=None, drm: CencDrmConfiguration=None, enabled_protocols: EnabledProtocols=None):
        """CommonEncryptionCenc - a model defined in OpenAPI

        :param clear_tracks: The clear_tracks of this CommonEncryptionCenc.
        :param content_keys: The content_keys of this CommonEncryptionCenc.
        :param drm: The drm of this CommonEncryptionCenc.
        :param enabled_protocols: The enabled_protocols of this CommonEncryptionCenc.
        """
        self.openapi_types = {
            'clear_tracks': List[TrackSelection],
            'content_keys': StreamingPolicyContentKeys,
            'drm': CencDrmConfiguration,
            'enabled_protocols': EnabledProtocols
        }

        self.attribute_map = {
            'clear_tracks': 'clearTracks',
            'content_keys': 'contentKeys',
            'drm': 'drm',
            'enabled_protocols': 'enabledProtocols'
        }

        self._clear_tracks = clear_tracks
        self._content_keys = content_keys
        self._drm = drm
        self._enabled_protocols = enabled_protocols

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonEncryptionCenc':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonEncryptionCenc of this CommonEncryptionCenc.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clear_tracks(self):
        """Gets the clear_tracks of this CommonEncryptionCenc.

        Representing which tracks should not be encrypted

        :return: The clear_tracks of this CommonEncryptionCenc.
        :rtype: List[TrackSelection]
        """
        return self._clear_tracks

    @clear_tracks.setter
    def clear_tracks(self, clear_tracks):
        """Sets the clear_tracks of this CommonEncryptionCenc.

        Representing which tracks should not be encrypted

        :param clear_tracks: The clear_tracks of this CommonEncryptionCenc.
        :type clear_tracks: List[TrackSelection]
        """

        self._clear_tracks = clear_tracks

    @property
    def content_keys(self):
        """Gets the content_keys of this CommonEncryptionCenc.


        :return: The content_keys of this CommonEncryptionCenc.
        :rtype: StreamingPolicyContentKeys
        """
        return self._content_keys

    @content_keys.setter
    def content_keys(self, content_keys):
        """Sets the content_keys of this CommonEncryptionCenc.


        :param content_keys: The content_keys of this CommonEncryptionCenc.
        :type content_keys: StreamingPolicyContentKeys
        """

        self._content_keys = content_keys

    @property
    def drm(self):
        """Gets the drm of this CommonEncryptionCenc.


        :return: The drm of this CommonEncryptionCenc.
        :rtype: CencDrmConfiguration
        """
        return self._drm

    @drm.setter
    def drm(self, drm):
        """Sets the drm of this CommonEncryptionCenc.


        :param drm: The drm of this CommonEncryptionCenc.
        :type drm: CencDrmConfiguration
        """

        self._drm = drm

    @property
    def enabled_protocols(self):
        """Gets the enabled_protocols of this CommonEncryptionCenc.


        :return: The enabled_protocols of this CommonEncryptionCenc.
        :rtype: EnabledProtocols
        """
        return self._enabled_protocols

    @enabled_protocols.setter
    def enabled_protocols(self, enabled_protocols):
        """Sets the enabled_protocols of this CommonEncryptionCenc.


        :param enabled_protocols: The enabled_protocols of this CommonEncryptionCenc.
        :type enabled_protocols: EnabledProtocols
        """

        self._enabled_protocols = enabled_protocols
