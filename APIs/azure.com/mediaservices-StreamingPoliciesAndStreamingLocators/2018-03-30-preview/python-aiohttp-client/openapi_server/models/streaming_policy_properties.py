# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_encryption_cbcs import CommonEncryptionCbcs
from openapi_server.models.common_encryption_cenc import CommonEncryptionCenc
from openapi_server.models.envelope_encryption import EnvelopeEncryption
from openapi_server.models.no_encryption import NoEncryption
from openapi_server import util


class StreamingPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_encryption_cbcs: CommonEncryptionCbcs=None, common_encryption_cenc: CommonEncryptionCenc=None, created: datetime=None, default_content_key_policy_name: str=None, envelope_encryption: EnvelopeEncryption=None, no_encryption: NoEncryption=None):
        """StreamingPolicyProperties - a model defined in OpenAPI

        :param common_encryption_cbcs: The common_encryption_cbcs of this StreamingPolicyProperties.
        :param common_encryption_cenc: The common_encryption_cenc of this StreamingPolicyProperties.
        :param created: The created of this StreamingPolicyProperties.
        :param default_content_key_policy_name: The default_content_key_policy_name of this StreamingPolicyProperties.
        :param envelope_encryption: The envelope_encryption of this StreamingPolicyProperties.
        :param no_encryption: The no_encryption of this StreamingPolicyProperties.
        """
        self.openapi_types = {
            'common_encryption_cbcs': CommonEncryptionCbcs,
            'common_encryption_cenc': CommonEncryptionCenc,
            'created': datetime,
            'default_content_key_policy_name': str,
            'envelope_encryption': EnvelopeEncryption,
            'no_encryption': NoEncryption
        }

        self.attribute_map = {
            'common_encryption_cbcs': 'commonEncryptionCbcs',
            'common_encryption_cenc': 'commonEncryptionCenc',
            'created': 'created',
            'default_content_key_policy_name': 'defaultContentKeyPolicyName',
            'envelope_encryption': 'envelopeEncryption',
            'no_encryption': 'noEncryption'
        }

        self._common_encryption_cbcs = common_encryption_cbcs
        self._common_encryption_cenc = common_encryption_cenc
        self._created = created
        self._default_content_key_policy_name = default_content_key_policy_name
        self._envelope_encryption = envelope_encryption
        self._no_encryption = no_encryption

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingPolicyProperties of this StreamingPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_encryption_cbcs(self):
        """Gets the common_encryption_cbcs of this StreamingPolicyProperties.


        :return: The common_encryption_cbcs of this StreamingPolicyProperties.
        :rtype: CommonEncryptionCbcs
        """
        return self._common_encryption_cbcs

    @common_encryption_cbcs.setter
    def common_encryption_cbcs(self, common_encryption_cbcs):
        """Sets the common_encryption_cbcs of this StreamingPolicyProperties.


        :param common_encryption_cbcs: The common_encryption_cbcs of this StreamingPolicyProperties.
        :type common_encryption_cbcs: CommonEncryptionCbcs
        """

        self._common_encryption_cbcs = common_encryption_cbcs

    @property
    def common_encryption_cenc(self):
        """Gets the common_encryption_cenc of this StreamingPolicyProperties.


        :return: The common_encryption_cenc of this StreamingPolicyProperties.
        :rtype: CommonEncryptionCenc
        """
        return self._common_encryption_cenc

    @common_encryption_cenc.setter
    def common_encryption_cenc(self, common_encryption_cenc):
        """Sets the common_encryption_cenc of this StreamingPolicyProperties.


        :param common_encryption_cenc: The common_encryption_cenc of this StreamingPolicyProperties.
        :type common_encryption_cenc: CommonEncryptionCenc
        """

        self._common_encryption_cenc = common_encryption_cenc

    @property
    def created(self):
        """Gets the created of this StreamingPolicyProperties.

        Creation time of Streaming Policy

        :return: The created of this StreamingPolicyProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this StreamingPolicyProperties.

        Creation time of Streaming Policy

        :param created: The created of this StreamingPolicyProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def default_content_key_policy_name(self):
        """Gets the default_content_key_policy_name of this StreamingPolicyProperties.

        Default ContentKey used by current Streaming Policy

        :return: The default_content_key_policy_name of this StreamingPolicyProperties.
        :rtype: str
        """
        return self._default_content_key_policy_name

    @default_content_key_policy_name.setter
    def default_content_key_policy_name(self, default_content_key_policy_name):
        """Sets the default_content_key_policy_name of this StreamingPolicyProperties.

        Default ContentKey used by current Streaming Policy

        :param default_content_key_policy_name: The default_content_key_policy_name of this StreamingPolicyProperties.
        :type default_content_key_policy_name: str
        """

        self._default_content_key_policy_name = default_content_key_policy_name

    @property
    def envelope_encryption(self):
        """Gets the envelope_encryption of this StreamingPolicyProperties.


        :return: The envelope_encryption of this StreamingPolicyProperties.
        :rtype: EnvelopeEncryption
        """
        return self._envelope_encryption

    @envelope_encryption.setter
    def envelope_encryption(self, envelope_encryption):
        """Sets the envelope_encryption of this StreamingPolicyProperties.


        :param envelope_encryption: The envelope_encryption of this StreamingPolicyProperties.
        :type envelope_encryption: EnvelopeEncryption
        """

        self._envelope_encryption = envelope_encryption

    @property
    def no_encryption(self):
        """Gets the no_encryption of this StreamingPolicyProperties.


        :return: The no_encryption of this StreamingPolicyProperties.
        :rtype: NoEncryption
        """
        return self._no_encryption

    @no_encryption.setter
    def no_encryption(self, no_encryption):
        """Sets the no_encryption of this StreamingPolicyProperties.


        :param no_encryption: The no_encryption of this StreamingPolicyProperties.
        :type no_encryption: NoEncryption
        """

        self._no_encryption = no_encryption
