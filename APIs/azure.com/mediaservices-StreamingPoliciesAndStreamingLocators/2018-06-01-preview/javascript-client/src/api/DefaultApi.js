/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import ListContentKeysResponse from '../model/ListContentKeysResponse';
import ListPathsResponse from '../model/ListPathsResponse';
import StreamingLocator from '../model/StreamingLocator';
import StreamingLocatorCollection from '../model/StreamingLocatorCollection';
import StreamingPolicy from '../model/StreamingPolicy';
import StreamingPolicyCollection from '../model/StreamingPolicyCollection';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-06-01-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the streamingLocatorsCreate operation.
     * @callback module:api/DefaultApi~streamingLocatorsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingLocator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Streaming Locator
     * Create a Streaming Locator in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingLocatorName The Streaming Locator name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/StreamingLocator} parameters The request parameters
     * @param {module:api/DefaultApi~streamingLocatorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingLocator}
     */
    streamingLocatorsCreate(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingLocatorsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingLocatorsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingLocatorsCreate");
      }
      // verify the required parameter 'streamingLocatorName' is set
      if (streamingLocatorName === undefined || streamingLocatorName === null) {
        throw new Error("Missing the required parameter 'streamingLocatorName' when calling streamingLocatorsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingLocatorsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling streamingLocatorsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingLocatorName': streamingLocatorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StreamingLocator;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingLocatorsDelete operation.
     * @callback module:api/DefaultApi~streamingLocatorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Streaming Locator
     * Deletes a Streaming Locator in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingLocatorName The Streaming Locator name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~streamingLocatorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamingLocatorsDelete(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingLocatorsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingLocatorsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingLocatorsDelete");
      }
      // verify the required parameter 'streamingLocatorName' is set
      if (streamingLocatorName === undefined || streamingLocatorName === null) {
        throw new Error("Missing the required parameter 'streamingLocatorName' when calling streamingLocatorsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingLocatorsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingLocatorName': streamingLocatorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingLocatorsGet operation.
     * @callback module:api/DefaultApi~streamingLocatorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingLocator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Streaming Locator
     * Get the details of a Streaming Locator in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingLocatorName The Streaming Locator name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~streamingLocatorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingLocator}
     */
    streamingLocatorsGet(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingLocatorsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingLocatorsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingLocatorsGet");
      }
      // verify the required parameter 'streamingLocatorName' is set
      if (streamingLocatorName === undefined || streamingLocatorName === null) {
        throw new Error("Missing the required parameter 'streamingLocatorName' when calling streamingLocatorsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingLocatorsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingLocatorName': streamingLocatorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamingLocator;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingLocatorsList operation.
     * @callback module:api/DefaultApi~streamingLocatorsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingLocatorCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Streaming Locators
     * Lists the Streaming Locators in the account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Restricts the set of items returned.
     * @param {Number} [top] Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
     * @param {String} [orderby] Specifies the key by which the result collection should be ordered.
     * @param {module:api/DefaultApi~streamingLocatorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingLocatorCollection}
     */
    streamingLocatorsList(subscriptionId, resourceGroupName, accountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingLocatorsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingLocatorsList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingLocatorsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingLocatorsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamingLocatorCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingLocatorsListContentKeys operation.
     * @callback module:api/DefaultApi~streamingLocatorsListContentKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContentKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Content Keys
     * List Content Keys used by this Streaming Locator
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingLocatorName The Streaming Locator name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~streamingLocatorsListContentKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContentKeysResponse}
     */
    streamingLocatorsListContentKeys(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingLocatorsListContentKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingLocatorsListContentKeys");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingLocatorsListContentKeys");
      }
      // verify the required parameter 'streamingLocatorName' is set
      if (streamingLocatorName === undefined || streamingLocatorName === null) {
        throw new Error("Missing the required parameter 'streamingLocatorName' when calling streamingLocatorsListContentKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingLocatorsListContentKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingLocatorName': streamingLocatorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContentKeysResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listContentKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingLocatorsListPaths operation.
     * @callback module:api/DefaultApi~streamingLocatorsListPathsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPathsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Paths
     * List Paths supported by this Streaming Locator
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingLocatorName The Streaming Locator name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~streamingLocatorsListPathsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPathsResponse}
     */
    streamingLocatorsListPaths(subscriptionId, resourceGroupName, accountName, streamingLocatorName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingLocatorsListPaths");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingLocatorsListPaths");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingLocatorsListPaths");
      }
      // verify the required parameter 'streamingLocatorName' is set
      if (streamingLocatorName === undefined || streamingLocatorName === null) {
        throw new Error("Missing the required parameter 'streamingLocatorName' when calling streamingLocatorsListPaths");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingLocatorsListPaths");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingLocatorName': streamingLocatorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPathsResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listPaths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingPoliciesCreate operation.
     * @callback module:api/DefaultApi~streamingPoliciesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Streaming Policy
     * Create a Streaming Policy in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingPolicyName The Streaming Policy name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/StreamingPolicy} parameters The request parameters
     * @param {module:api/DefaultApi~streamingPoliciesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingPolicy}
     */
    streamingPoliciesCreate(subscriptionId, resourceGroupName, accountName, streamingPolicyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingPoliciesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingPoliciesCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingPoliciesCreate");
      }
      // verify the required parameter 'streamingPolicyName' is set
      if (streamingPolicyName === undefined || streamingPolicyName === null) {
        throw new Error("Missing the required parameter 'streamingPolicyName' when calling streamingPoliciesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingPoliciesCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling streamingPoliciesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingPolicyName': streamingPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StreamingPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingPoliciesDelete operation.
     * @callback module:api/DefaultApi~streamingPoliciesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Streaming Policy
     * Deletes a Streaming Policy in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingPolicyName The Streaming Policy name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~streamingPoliciesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamingPoliciesDelete(subscriptionId, resourceGroupName, accountName, streamingPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingPoliciesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingPoliciesDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingPoliciesDelete");
      }
      // verify the required parameter 'streamingPolicyName' is set
      if (streamingPolicyName === undefined || streamingPolicyName === null) {
        throw new Error("Missing the required parameter 'streamingPolicyName' when calling streamingPoliciesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingPoliciesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingPolicyName': streamingPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingPoliciesGet operation.
     * @callback module:api/DefaultApi~streamingPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Streaming Policy
     * Get the details of a Streaming Policy in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingPolicyName The Streaming Policy name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~streamingPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingPolicy}
     */
    streamingPoliciesGet(subscriptionId, resourceGroupName, accountName, streamingPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingPoliciesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingPoliciesGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingPoliciesGet");
      }
      // verify the required parameter 'streamingPolicyName' is set
      if (streamingPolicyName === undefined || streamingPolicyName === null) {
        throw new Error("Missing the required parameter 'streamingPolicyName' when calling streamingPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingPoliciesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingPolicyName': streamingPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamingPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingPoliciesList operation.
     * @callback module:api/DefaultApi~streamingPoliciesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingPolicyCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Streaming Policies
     * Lists the Streaming Policies in the account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Restricts the set of items returned.
     * @param {Number} [top] Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
     * @param {String} [orderby] Specifies the key by which the result collection should be ordered.
     * @param {module:api/DefaultApi~streamingPoliciesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingPolicyCollection}
     */
    streamingPoliciesList(subscriptionId, resourceGroupName, accountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingPoliciesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingPoliciesList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingPoliciesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingPoliciesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamingPolicyCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
