/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrackPropertyCondition model module.
 * @module model/TrackPropertyCondition
 * @version 2018-06-01-preview
 */
class TrackPropertyCondition {
    /**
     * Constructs a new <code>TrackPropertyCondition</code>.
     * Class to specify one track property condition
     * @alias module:model/TrackPropertyCondition
     * @param operation {module:model/TrackPropertyCondition.OperationEnum} Track property condition operation
     * @param property {module:model/TrackPropertyCondition.PropertyEnum} Track property type
     */
    constructor(operation, property) { 
        
        TrackPropertyCondition.initialize(this, operation, property);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operation, property) { 
        obj['operation'] = operation;
        obj['property'] = property;
    }

    /**
     * Constructs a <code>TrackPropertyCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackPropertyCondition} obj Optional instance to populate.
     * @return {module:model/TrackPropertyCondition} The populated <code>TrackPropertyCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackPropertyCondition();

            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = ApiClient.convertToType(data['property'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrackPropertyCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrackPropertyCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrackPropertyCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['property'] && !(typeof data['property'] === 'string' || data['property'] instanceof String)) {
            throw new Error("Expected the field `property` to be a primitive type in the JSON string but got " + data['property']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

TrackPropertyCondition.RequiredProperties = ["operation", "property"];

/**
 * Track property condition operation
 * @member {module:model/TrackPropertyCondition.OperationEnum} operation
 */
TrackPropertyCondition.prototype['operation'] = undefined;

/**
 * Track property type
 * @member {module:model/TrackPropertyCondition.PropertyEnum} property
 */
TrackPropertyCondition.prototype['property'] = undefined;

/**
 * Track property value
 * @member {String} value
 */
TrackPropertyCondition.prototype['value'] = undefined;





/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
TrackPropertyCondition['OperationEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Equal"
     * @const
     */
    "Equal": "Equal"
};


/**
 * Allowed values for the <code>property</code> property.
 * @enum {String}
 * @readonly
 */
TrackPropertyCondition['PropertyEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "FourCC"
     * @const
     */
    "FourCC": "FourCC"
};



export default TrackPropertyCondition;

