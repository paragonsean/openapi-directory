/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StreamingPath model module.
 * @module model/StreamingPath
 * @version 2018-06-01-preview
 */
class StreamingPath {
    /**
     * Constructs a new <code>StreamingPath</code>.
     * Class of paths for streaming
     * @alias module:model/StreamingPath
     * @param encryptionScheme {module:model/StreamingPath.EncryptionSchemeEnum} Encryption scheme
     * @param streamingProtocol {module:model/StreamingPath.StreamingProtocolEnum} Streaming protocol
     */
    constructor(encryptionScheme, streamingProtocol) { 
        
        StreamingPath.initialize(this, encryptionScheme, streamingProtocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, encryptionScheme, streamingProtocol) { 
        obj['encryptionScheme'] = encryptionScheme;
        obj['streamingProtocol'] = streamingProtocol;
    }

    /**
     * Constructs a <code>StreamingPath</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamingPath} obj Optional instance to populate.
     * @return {module:model/StreamingPath} The populated <code>StreamingPath</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamingPath();

            if (data.hasOwnProperty('encryptionScheme')) {
                obj['encryptionScheme'] = ApiClient.convertToType(data['encryptionScheme'], 'String');
            }
            if (data.hasOwnProperty('paths')) {
                obj['paths'] = ApiClient.convertToType(data['paths'], ['String']);
            }
            if (data.hasOwnProperty('streamingProtocol')) {
                obj['streamingProtocol'] = ApiClient.convertToType(data['streamingProtocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamingPath</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamingPath</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StreamingPath.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['encryptionScheme'] && !(typeof data['encryptionScheme'] === 'string' || data['encryptionScheme'] instanceof String)) {
            throw new Error("Expected the field `encryptionScheme` to be a primitive type in the JSON string but got " + data['encryptionScheme']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paths'])) {
            throw new Error("Expected the field `paths` to be an array in the JSON data but got " + data['paths']);
        }
        // ensure the json data is a string
        if (data['streamingProtocol'] && !(typeof data['streamingProtocol'] === 'string' || data['streamingProtocol'] instanceof String)) {
            throw new Error("Expected the field `streamingProtocol` to be a primitive type in the JSON string but got " + data['streamingProtocol']);
        }

        return true;
    }


}

StreamingPath.RequiredProperties = ["encryptionScheme", "streamingProtocol"];

/**
 * Encryption scheme
 * @member {module:model/StreamingPath.EncryptionSchemeEnum} encryptionScheme
 */
StreamingPath.prototype['encryptionScheme'] = undefined;

/**
 * Streaming paths for each protocol and encryptionScheme pair
 * @member {Array.<String>} paths
 */
StreamingPath.prototype['paths'] = undefined;

/**
 * Streaming protocol
 * @member {module:model/StreamingPath.StreamingProtocolEnum} streamingProtocol
 */
StreamingPath.prototype['streamingProtocol'] = undefined;





/**
 * Allowed values for the <code>encryptionScheme</code> property.
 * @enum {String}
 * @readonly
 */
StreamingPath['EncryptionSchemeEnum'] = {

    /**
     * value: "NoEncryption"
     * @const
     */
    "NoEncryption": "NoEncryption",

    /**
     * value: "EnvelopeEncryption"
     * @const
     */
    "EnvelopeEncryption": "EnvelopeEncryption",

    /**
     * value: "CommonEncryptionCenc"
     * @const
     */
    "CommonEncryptionCenc": "CommonEncryptionCenc",

    /**
     * value: "CommonEncryptionCbcs"
     * @const
     */
    "CommonEncryptionCbcs": "CommonEncryptionCbcs"
};


/**
 * Allowed values for the <code>streamingProtocol</code> property.
 * @enum {String}
 * @readonly
 */
StreamingPath['StreamingProtocolEnum'] = {

    /**
     * value: "Hls"
     * @const
     */
    "Hls": "Hls",

    /**
     * value: "Dash"
     * @const
     */
    "Dash": "Dash",

    /**
     * value: "SmoothStreaming"
     * @const
     */
    "SmoothStreaming": "SmoothStreaming",

    /**
     * value: "Download"
     * @const
     */
    "Download": "Download"
};



export default StreamingPath;

