# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.track_selection import TrackSelection
from openapi_server import util


class StreamingPolicyContentKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, policy_name: str=None, tracks: List[TrackSelection]=None):
        """StreamingPolicyContentKey - a model defined in OpenAPI

        :param label: The label of this StreamingPolicyContentKey.
        :param policy_name: The policy_name of this StreamingPolicyContentKey.
        :param tracks: The tracks of this StreamingPolicyContentKey.
        """
        self.openapi_types = {
            'label': str,
            'policy_name': str,
            'tracks': List[TrackSelection]
        }

        self.attribute_map = {
            'label': 'label',
            'policy_name': 'policyName',
            'tracks': 'tracks'
        }

        self._label = label
        self._policy_name = policy_name
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingPolicyContentKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingPolicyContentKey of this StreamingPolicyContentKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this StreamingPolicyContentKey.

        Label can be used to specify Content Key when creating a Streaming Locator

        :return: The label of this StreamingPolicyContentKey.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this StreamingPolicyContentKey.

        Label can be used to specify Content Key when creating a Streaming Locator

        :param label: The label of this StreamingPolicyContentKey.
        :type label: str
        """

        self._label = label

    @property
    def policy_name(self):
        """Gets the policy_name of this StreamingPolicyContentKey.

        Policy used by Content Key

        :return: The policy_name of this StreamingPolicyContentKey.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this StreamingPolicyContentKey.

        Policy used by Content Key

        :param policy_name: The policy_name of this StreamingPolicyContentKey.
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def tracks(self):
        """Gets the tracks of this StreamingPolicyContentKey.

        Tracks which use this content key

        :return: The tracks of this StreamingPolicyContentKey.
        :rtype: List[TrackSelection]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this StreamingPolicyContentKey.

        Tracks which use this content key

        :param tracks: The tracks of this StreamingPolicyContentKey.
        :type tracks: List[TrackSelection]
        """

        self._tracks = tracks
