/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CbcsDrmConfiguration;
import org.openapitools.client.model.EnabledProtocols;
import org.openapitools.client.model.StreamingPolicyContentKeys;
import org.openapitools.client.model.TrackSelection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class for CommonEncryptionCbcs encryption scheme
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:59.446924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommonEncryptionCbcs {
  public static final String SERIALIZED_NAME_CLEAR_TRACKS = "clearTracks";
  @SerializedName(SERIALIZED_NAME_CLEAR_TRACKS)
  private List<TrackSelection> clearTracks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_KEYS = "contentKeys";
  @SerializedName(SERIALIZED_NAME_CONTENT_KEYS)
  private StreamingPolicyContentKeys contentKeys;

  public static final String SERIALIZED_NAME_DRM = "drm";
  @SerializedName(SERIALIZED_NAME_DRM)
  private CbcsDrmConfiguration drm;

  public static final String SERIALIZED_NAME_ENABLED_PROTOCOLS = "enabledProtocols";
  @SerializedName(SERIALIZED_NAME_ENABLED_PROTOCOLS)
  private EnabledProtocols enabledProtocols;

  public CommonEncryptionCbcs() {
  }

  public CommonEncryptionCbcs clearTracks(List<TrackSelection> clearTracks) {
    this.clearTracks = clearTracks;
    return this;
  }

  public CommonEncryptionCbcs addClearTracksItem(TrackSelection clearTracksItem) {
    if (this.clearTracks == null) {
      this.clearTracks = new ArrayList<>();
    }
    this.clearTracks.add(clearTracksItem);
    return this;
  }

  /**
   * Representing which tracks should not be encrypted
   * @return clearTracks
   */
  @javax.annotation.Nullable
  public List<TrackSelection> getClearTracks() {
    return clearTracks;
  }

  public void setClearTracks(List<TrackSelection> clearTracks) {
    this.clearTracks = clearTracks;
  }


  public CommonEncryptionCbcs contentKeys(StreamingPolicyContentKeys contentKeys) {
    this.contentKeys = contentKeys;
    return this;
  }

  /**
   * Get contentKeys
   * @return contentKeys
   */
  @javax.annotation.Nullable
  public StreamingPolicyContentKeys getContentKeys() {
    return contentKeys;
  }

  public void setContentKeys(StreamingPolicyContentKeys contentKeys) {
    this.contentKeys = contentKeys;
  }


  public CommonEncryptionCbcs drm(CbcsDrmConfiguration drm) {
    this.drm = drm;
    return this;
  }

  /**
   * Get drm
   * @return drm
   */
  @javax.annotation.Nullable
  public CbcsDrmConfiguration getDrm() {
    return drm;
  }

  public void setDrm(CbcsDrmConfiguration drm) {
    this.drm = drm;
  }


  public CommonEncryptionCbcs enabledProtocols(EnabledProtocols enabledProtocols) {
    this.enabledProtocols = enabledProtocols;
    return this;
  }

  /**
   * Get enabledProtocols
   * @return enabledProtocols
   */
  @javax.annotation.Nullable
  public EnabledProtocols getEnabledProtocols() {
    return enabledProtocols;
  }

  public void setEnabledProtocols(EnabledProtocols enabledProtocols) {
    this.enabledProtocols = enabledProtocols;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonEncryptionCbcs commonEncryptionCbcs = (CommonEncryptionCbcs) o;
    return Objects.equals(this.clearTracks, commonEncryptionCbcs.clearTracks) &&
        Objects.equals(this.contentKeys, commonEncryptionCbcs.contentKeys) &&
        Objects.equals(this.drm, commonEncryptionCbcs.drm) &&
        Objects.equals(this.enabledProtocols, commonEncryptionCbcs.enabledProtocols);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clearTracks, contentKeys, drm, enabledProtocols);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonEncryptionCbcs {\n");
    sb.append("    clearTracks: ").append(toIndentedString(clearTracks)).append("\n");
    sb.append("    contentKeys: ").append(toIndentedString(contentKeys)).append("\n");
    sb.append("    drm: ").append(toIndentedString(drm)).append("\n");
    sb.append("    enabledProtocols: ").append(toIndentedString(enabledProtocols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clearTracks");
    openapiFields.add("contentKeys");
    openapiFields.add("drm");
    openapiFields.add("enabledProtocols");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommonEncryptionCbcs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonEncryptionCbcs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonEncryptionCbcs is not found in the empty JSON string", CommonEncryptionCbcs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonEncryptionCbcs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonEncryptionCbcs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clearTracks") != null && !jsonObj.get("clearTracks").isJsonNull()) {
        JsonArray jsonArrayclearTracks = jsonObj.getAsJsonArray("clearTracks");
        if (jsonArrayclearTracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clearTracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clearTracks` to be an array in the JSON string but got `%s`", jsonObj.get("clearTracks").toString()));
          }

          // validate the optional field `clearTracks` (array)
          for (int i = 0; i < jsonArrayclearTracks.size(); i++) {
            TrackSelection.validateJsonElement(jsonArrayclearTracks.get(i));
          };
        }
      }
      // validate the optional field `contentKeys`
      if (jsonObj.get("contentKeys") != null && !jsonObj.get("contentKeys").isJsonNull()) {
        StreamingPolicyContentKeys.validateJsonElement(jsonObj.get("contentKeys"));
      }
      // validate the optional field `drm`
      if (jsonObj.get("drm") != null && !jsonObj.get("drm").isJsonNull()) {
        CbcsDrmConfiguration.validateJsonElement(jsonObj.get("drm"));
      }
      // validate the optional field `enabledProtocols`
      if (jsonObj.get("enabledProtocols") != null && !jsonObj.get("enabledProtocols").isJsonNull()) {
        EnabledProtocols.validateJsonElement(jsonObj.get("enabledProtocols"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonEncryptionCbcs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonEncryptionCbcs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonEncryptionCbcs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonEncryptionCbcs.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonEncryptionCbcs>() {
           @Override
           public void write(JsonWriter out, CommonEncryptionCbcs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonEncryptionCbcs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommonEncryptionCbcs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommonEncryptionCbcs
   * @throws IOException if the JSON string is invalid with respect to CommonEncryptionCbcs
   */
  public static CommonEncryptionCbcs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonEncryptionCbcs.class);
  }

  /**
   * Convert an instance of CommonEncryptionCbcs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

