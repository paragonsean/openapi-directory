/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CommonEncryptionCbcs;
import org.openapitools.client.model.CommonEncryptionCenc;
import org.openapitools.client.model.EnvelopeEncryption;
import org.openapitools.client.model.NoEncryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class to specify properties of Streaming Policy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:59.446924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingPolicyProperties {
  public static final String SERIALIZED_NAME_COMMON_ENCRYPTION_CBCS = "commonEncryptionCbcs";
  @SerializedName(SERIALIZED_NAME_COMMON_ENCRYPTION_CBCS)
  private CommonEncryptionCbcs commonEncryptionCbcs;

  public static final String SERIALIZED_NAME_COMMON_ENCRYPTION_CENC = "commonEncryptionCenc";
  @SerializedName(SERIALIZED_NAME_COMMON_ENCRYPTION_CENC)
  private CommonEncryptionCenc commonEncryptionCenc;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DEFAULT_CONTENT_KEY_POLICY_NAME = "defaultContentKeyPolicyName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CONTENT_KEY_POLICY_NAME)
  private String defaultContentKeyPolicyName;

  public static final String SERIALIZED_NAME_ENVELOPE_ENCRYPTION = "envelopeEncryption";
  @SerializedName(SERIALIZED_NAME_ENVELOPE_ENCRYPTION)
  private EnvelopeEncryption envelopeEncryption;

  public static final String SERIALIZED_NAME_NO_ENCRYPTION = "noEncryption";
  @SerializedName(SERIALIZED_NAME_NO_ENCRYPTION)
  private NoEncryption noEncryption;

  public StreamingPolicyProperties() {
  }

  public StreamingPolicyProperties(
     OffsetDateTime created
  ) {
    this();
    this.created = created;
  }

  public StreamingPolicyProperties commonEncryptionCbcs(CommonEncryptionCbcs commonEncryptionCbcs) {
    this.commonEncryptionCbcs = commonEncryptionCbcs;
    return this;
  }

  /**
   * Get commonEncryptionCbcs
   * @return commonEncryptionCbcs
   */
  @javax.annotation.Nullable
  public CommonEncryptionCbcs getCommonEncryptionCbcs() {
    return commonEncryptionCbcs;
  }

  public void setCommonEncryptionCbcs(CommonEncryptionCbcs commonEncryptionCbcs) {
    this.commonEncryptionCbcs = commonEncryptionCbcs;
  }


  public StreamingPolicyProperties commonEncryptionCenc(CommonEncryptionCenc commonEncryptionCenc) {
    this.commonEncryptionCenc = commonEncryptionCenc;
    return this;
  }

  /**
   * Get commonEncryptionCenc
   * @return commonEncryptionCenc
   */
  @javax.annotation.Nullable
  public CommonEncryptionCenc getCommonEncryptionCenc() {
    return commonEncryptionCenc;
  }

  public void setCommonEncryptionCenc(CommonEncryptionCenc commonEncryptionCenc) {
    this.commonEncryptionCenc = commonEncryptionCenc;
  }


  /**
   * Creation time of Streaming Policy
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public StreamingPolicyProperties defaultContentKeyPolicyName(String defaultContentKeyPolicyName) {
    this.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
    return this;
  }

  /**
   * Default ContentKey used by current Streaming Policy
   * @return defaultContentKeyPolicyName
   */
  @javax.annotation.Nullable
  public String getDefaultContentKeyPolicyName() {
    return defaultContentKeyPolicyName;
  }

  public void setDefaultContentKeyPolicyName(String defaultContentKeyPolicyName) {
    this.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
  }


  public StreamingPolicyProperties envelopeEncryption(EnvelopeEncryption envelopeEncryption) {
    this.envelopeEncryption = envelopeEncryption;
    return this;
  }

  /**
   * Get envelopeEncryption
   * @return envelopeEncryption
   */
  @javax.annotation.Nullable
  public EnvelopeEncryption getEnvelopeEncryption() {
    return envelopeEncryption;
  }

  public void setEnvelopeEncryption(EnvelopeEncryption envelopeEncryption) {
    this.envelopeEncryption = envelopeEncryption;
  }


  public StreamingPolicyProperties noEncryption(NoEncryption noEncryption) {
    this.noEncryption = noEncryption;
    return this;
  }

  /**
   * Get noEncryption
   * @return noEncryption
   */
  @javax.annotation.Nullable
  public NoEncryption getNoEncryption() {
    return noEncryption;
  }

  public void setNoEncryption(NoEncryption noEncryption) {
    this.noEncryption = noEncryption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingPolicyProperties streamingPolicyProperties = (StreamingPolicyProperties) o;
    return Objects.equals(this.commonEncryptionCbcs, streamingPolicyProperties.commonEncryptionCbcs) &&
        Objects.equals(this.commonEncryptionCenc, streamingPolicyProperties.commonEncryptionCenc) &&
        Objects.equals(this.created, streamingPolicyProperties.created) &&
        Objects.equals(this.defaultContentKeyPolicyName, streamingPolicyProperties.defaultContentKeyPolicyName) &&
        Objects.equals(this.envelopeEncryption, streamingPolicyProperties.envelopeEncryption) &&
        Objects.equals(this.noEncryption, streamingPolicyProperties.noEncryption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonEncryptionCbcs, commonEncryptionCenc, created, defaultContentKeyPolicyName, envelopeEncryption, noEncryption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingPolicyProperties {\n");
    sb.append("    commonEncryptionCbcs: ").append(toIndentedString(commonEncryptionCbcs)).append("\n");
    sb.append("    commonEncryptionCenc: ").append(toIndentedString(commonEncryptionCenc)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    defaultContentKeyPolicyName: ").append(toIndentedString(defaultContentKeyPolicyName)).append("\n");
    sb.append("    envelopeEncryption: ").append(toIndentedString(envelopeEncryption)).append("\n");
    sb.append("    noEncryption: ").append(toIndentedString(noEncryption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonEncryptionCbcs");
    openapiFields.add("commonEncryptionCenc");
    openapiFields.add("created");
    openapiFields.add("defaultContentKeyPolicyName");
    openapiFields.add("envelopeEncryption");
    openapiFields.add("noEncryption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingPolicyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingPolicyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingPolicyProperties is not found in the empty JSON string", StreamingPolicyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingPolicyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingPolicyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `commonEncryptionCbcs`
      if (jsonObj.get("commonEncryptionCbcs") != null && !jsonObj.get("commonEncryptionCbcs").isJsonNull()) {
        CommonEncryptionCbcs.validateJsonElement(jsonObj.get("commonEncryptionCbcs"));
      }
      // validate the optional field `commonEncryptionCenc`
      if (jsonObj.get("commonEncryptionCenc") != null && !jsonObj.get("commonEncryptionCenc").isJsonNull()) {
        CommonEncryptionCenc.validateJsonElement(jsonObj.get("commonEncryptionCenc"));
      }
      if ((jsonObj.get("defaultContentKeyPolicyName") != null && !jsonObj.get("defaultContentKeyPolicyName").isJsonNull()) && !jsonObj.get("defaultContentKeyPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultContentKeyPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultContentKeyPolicyName").toString()));
      }
      // validate the optional field `envelopeEncryption`
      if (jsonObj.get("envelopeEncryption") != null && !jsonObj.get("envelopeEncryption").isJsonNull()) {
        EnvelopeEncryption.validateJsonElement(jsonObj.get("envelopeEncryption"));
      }
      // validate the optional field `noEncryption`
      if (jsonObj.get("noEncryption") != null && !jsonObj.get("noEncryption").isJsonNull()) {
        NoEncryption.validateJsonElement(jsonObj.get("noEncryption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingPolicyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingPolicyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingPolicyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingPolicyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingPolicyProperties>() {
           @Override
           public void write(JsonWriter out, StreamingPolicyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingPolicyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingPolicyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingPolicyProperties
   * @throws IOException if the JSON string is invalid with respect to StreamingPolicyProperties
   */
  public static StreamingPolicyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingPolicyProperties.class);
  }

  /**
   * Convert an instance of StreamingPolicyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

