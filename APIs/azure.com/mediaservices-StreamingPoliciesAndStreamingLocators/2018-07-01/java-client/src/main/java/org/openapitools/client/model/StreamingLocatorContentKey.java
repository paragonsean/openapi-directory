/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.TrackSelection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class for content key in Streaming Locator
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:59.446924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingLocatorContentKey {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LABEL_REFERENCE_IN_STREAMING_POLICY = "labelReferenceInStreamingPolicy";
  @SerializedName(SERIALIZED_NAME_LABEL_REFERENCE_IN_STREAMING_POLICY)
  private String labelReferenceInStreamingPolicy;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<TrackSelection> tracks = new ArrayList<>();

  /**
   * Encryption type of Content Key
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COMMON_ENCRYPTION_CENC("CommonEncryptionCenc"),
    
    COMMON_ENCRYPTION_CBCS("CommonEncryptionCbcs"),
    
    ENVELOPE_ENCRYPTION("EnvelopeEncryption");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public StreamingLocatorContentKey() {
  }

  public StreamingLocatorContentKey(
     String policyName, 
     List<TrackSelection> tracks, 
     TypeEnum type
  ) {
    this();
    this.policyName = policyName;
    this.tracks = tracks;
    this.type = type;
  }

  public StreamingLocatorContentKey id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of Content Key
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public StreamingLocatorContentKey labelReferenceInStreamingPolicy(String labelReferenceInStreamingPolicy) {
    this.labelReferenceInStreamingPolicy = labelReferenceInStreamingPolicy;
    return this;
  }

  /**
   * Label of Content Key as specified in the Streaming Policy
   * @return labelReferenceInStreamingPolicy
   */
  @javax.annotation.Nullable
  public String getLabelReferenceInStreamingPolicy() {
    return labelReferenceInStreamingPolicy;
  }

  public void setLabelReferenceInStreamingPolicy(String labelReferenceInStreamingPolicy) {
    this.labelReferenceInStreamingPolicy = labelReferenceInStreamingPolicy;
  }


  /**
   * ContentKeyPolicy used by Content Key
   * @return policyName
   */
  @javax.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }



  /**
   * Tracks which use this Content Key
   * @return tracks
   */
  @javax.annotation.Nullable
  public List<TrackSelection> getTracks() {
    return tracks;
  }



  /**
   * Encryption type of Content Key
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }



  public StreamingLocatorContentKey value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Value of Content Key
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingLocatorContentKey streamingLocatorContentKey = (StreamingLocatorContentKey) o;
    return Objects.equals(this.id, streamingLocatorContentKey.id) &&
        Objects.equals(this.labelReferenceInStreamingPolicy, streamingLocatorContentKey.labelReferenceInStreamingPolicy) &&
        Objects.equals(this.policyName, streamingLocatorContentKey.policyName) &&
        Objects.equals(this.tracks, streamingLocatorContentKey.tracks) &&
        Objects.equals(this.type, streamingLocatorContentKey.type) &&
        Objects.equals(this.value, streamingLocatorContentKey.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, labelReferenceInStreamingPolicy, policyName, tracks, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingLocatorContentKey {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labelReferenceInStreamingPolicy: ").append(toIndentedString(labelReferenceInStreamingPolicy)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("labelReferenceInStreamingPolicy");
    openapiFields.add("policyName");
    openapiFields.add("tracks");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingLocatorContentKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingLocatorContentKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingLocatorContentKey is not found in the empty JSON string", StreamingLocatorContentKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingLocatorContentKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingLocatorContentKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamingLocatorContentKey.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("labelReferenceInStreamingPolicy") != null && !jsonObj.get("labelReferenceInStreamingPolicy").isJsonNull()) && !jsonObj.get("labelReferenceInStreamingPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelReferenceInStreamingPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelReferenceInStreamingPolicy").toString()));
      }
      if ((jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) && !jsonObj.get("policyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyName").toString()));
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            TrackSelection.validateJsonElement(jsonArraytracks.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingLocatorContentKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingLocatorContentKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingLocatorContentKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingLocatorContentKey.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingLocatorContentKey>() {
           @Override
           public void write(JsonWriter out, StreamingLocatorContentKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingLocatorContentKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingLocatorContentKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingLocatorContentKey
   * @throws IOException if the JSON string is invalid with respect to StreamingLocatorContentKey
   */
  public static StreamingLocatorContentKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingLocatorContentKey.class);
  }

  /**
   * Convert an instance of StreamingLocatorContentKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

