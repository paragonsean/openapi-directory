/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.StreamingLocatorContentKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the Streaming Locator.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:59.446924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingLocatorProperties {
  public static final String SERIALIZED_NAME_ALTERNATIVE_MEDIA_ID = "alternativeMediaId";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_MEDIA_ID)
  private String alternativeMediaId;

  public static final String SERIALIZED_NAME_ASSET_NAME = "assetName";
  @SerializedName(SERIALIZED_NAME_ASSET_NAME)
  private String assetName;

  public static final String SERIALIZED_NAME_CONTENT_KEYS = "contentKeys";
  @SerializedName(SERIALIZED_NAME_CONTENT_KEYS)
  private List<StreamingLocatorContentKey> contentKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DEFAULT_CONTENT_KEY_POLICY_NAME = "defaultContentKeyPolicyName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CONTENT_KEY_POLICY_NAME)
  private String defaultContentKeyPolicyName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<String> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STREAMING_LOCATOR_ID = "streamingLocatorId";
  @SerializedName(SERIALIZED_NAME_STREAMING_LOCATOR_ID)
  private UUID streamingLocatorId;

  public static final String SERIALIZED_NAME_STREAMING_POLICY_NAME = "streamingPolicyName";
  @SerializedName(SERIALIZED_NAME_STREAMING_POLICY_NAME)
  private String streamingPolicyName;

  public StreamingLocatorProperties() {
  }

  public StreamingLocatorProperties(
     OffsetDateTime created
  ) {
    this();
    this.created = created;
  }

  public StreamingLocatorProperties alternativeMediaId(String alternativeMediaId) {
    this.alternativeMediaId = alternativeMediaId;
    return this;
  }

  /**
   * Alternative Media ID of this Streaming Locator
   * @return alternativeMediaId
   */
  @javax.annotation.Nullable
  public String getAlternativeMediaId() {
    return alternativeMediaId;
  }

  public void setAlternativeMediaId(String alternativeMediaId) {
    this.alternativeMediaId = alternativeMediaId;
  }


  public StreamingLocatorProperties assetName(String assetName) {
    this.assetName = assetName;
    return this;
  }

  /**
   * Asset Name
   * @return assetName
   */
  @javax.annotation.Nonnull
  public String getAssetName() {
    return assetName;
  }

  public void setAssetName(String assetName) {
    this.assetName = assetName;
  }


  public StreamingLocatorProperties contentKeys(List<StreamingLocatorContentKey> contentKeys) {
    this.contentKeys = contentKeys;
    return this;
  }

  public StreamingLocatorProperties addContentKeysItem(StreamingLocatorContentKey contentKeysItem) {
    if (this.contentKeys == null) {
      this.contentKeys = new ArrayList<>();
    }
    this.contentKeys.add(contentKeysItem);
    return this;
  }

  /**
   * The ContentKeys used by this Streaming Locator.
   * @return contentKeys
   */
  @javax.annotation.Nullable
  public List<StreamingLocatorContentKey> getContentKeys() {
    return contentKeys;
  }

  public void setContentKeys(List<StreamingLocatorContentKey> contentKeys) {
    this.contentKeys = contentKeys;
  }


  /**
   * The creation time of the Streaming Locator.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public StreamingLocatorProperties defaultContentKeyPolicyName(String defaultContentKeyPolicyName) {
    this.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
    return this;
  }

  /**
   * Name of the default ContentKeyPolicy used by this Streaming Locator.
   * @return defaultContentKeyPolicyName
   */
  @javax.annotation.Nullable
  public String getDefaultContentKeyPolicyName() {
    return defaultContentKeyPolicyName;
  }

  public void setDefaultContentKeyPolicyName(String defaultContentKeyPolicyName) {
    this.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
  }


  public StreamingLocatorProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of the Streaming Locator.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public StreamingLocatorProperties filters(List<String> filters) {
    this.filters = filters;
    return this;
  }

  public StreamingLocatorProperties addFiltersItem(String filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * A list of asset or account filters which apply to this streaming locator
   * @return filters
   */
  @javax.annotation.Nullable
  public List<String> getFilters() {
    return filters;
  }

  public void setFilters(List<String> filters) {
    this.filters = filters;
  }


  public StreamingLocatorProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the Streaming Locator.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public StreamingLocatorProperties streamingLocatorId(UUID streamingLocatorId) {
    this.streamingLocatorId = streamingLocatorId;
    return this;
  }

  /**
   * The StreamingLocatorId of the Streaming Locator.
   * @return streamingLocatorId
   */
  @javax.annotation.Nullable
  public UUID getStreamingLocatorId() {
    return streamingLocatorId;
  }

  public void setStreamingLocatorId(UUID streamingLocatorId) {
    this.streamingLocatorId = streamingLocatorId;
  }


  public StreamingLocatorProperties streamingPolicyName(String streamingPolicyName) {
    this.streamingPolicyName = streamingPolicyName;
    return this;
  }

  /**
   * Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: &#39;Predefined_DownloadOnly&#39;, &#39;Predefined_ClearStreamingOnly&#39;, &#39;Predefined_DownloadAndClearStreaming&#39;, &#39;Predefined_ClearKey&#39;, &#39;Predefined_MultiDrmCencStreaming&#39; and &#39;Predefined_MultiDrmStreaming&#39;
   * @return streamingPolicyName
   */
  @javax.annotation.Nonnull
  public String getStreamingPolicyName() {
    return streamingPolicyName;
  }

  public void setStreamingPolicyName(String streamingPolicyName) {
    this.streamingPolicyName = streamingPolicyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingLocatorProperties streamingLocatorProperties = (StreamingLocatorProperties) o;
    return Objects.equals(this.alternativeMediaId, streamingLocatorProperties.alternativeMediaId) &&
        Objects.equals(this.assetName, streamingLocatorProperties.assetName) &&
        Objects.equals(this.contentKeys, streamingLocatorProperties.contentKeys) &&
        Objects.equals(this.created, streamingLocatorProperties.created) &&
        Objects.equals(this.defaultContentKeyPolicyName, streamingLocatorProperties.defaultContentKeyPolicyName) &&
        Objects.equals(this.endTime, streamingLocatorProperties.endTime) &&
        Objects.equals(this.filters, streamingLocatorProperties.filters) &&
        Objects.equals(this.startTime, streamingLocatorProperties.startTime) &&
        Objects.equals(this.streamingLocatorId, streamingLocatorProperties.streamingLocatorId) &&
        Objects.equals(this.streamingPolicyName, streamingLocatorProperties.streamingPolicyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternativeMediaId, assetName, contentKeys, created, defaultContentKeyPolicyName, endTime, filters, startTime, streamingLocatorId, streamingPolicyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingLocatorProperties {\n");
    sb.append("    alternativeMediaId: ").append(toIndentedString(alternativeMediaId)).append("\n");
    sb.append("    assetName: ").append(toIndentedString(assetName)).append("\n");
    sb.append("    contentKeys: ").append(toIndentedString(contentKeys)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    defaultContentKeyPolicyName: ").append(toIndentedString(defaultContentKeyPolicyName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    streamingLocatorId: ").append(toIndentedString(streamingLocatorId)).append("\n");
    sb.append("    streamingPolicyName: ").append(toIndentedString(streamingPolicyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternativeMediaId");
    openapiFields.add("assetName");
    openapiFields.add("contentKeys");
    openapiFields.add("created");
    openapiFields.add("defaultContentKeyPolicyName");
    openapiFields.add("endTime");
    openapiFields.add("filters");
    openapiFields.add("startTime");
    openapiFields.add("streamingLocatorId");
    openapiFields.add("streamingPolicyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assetName");
    openapiRequiredFields.add("streamingPolicyName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingLocatorProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingLocatorProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingLocatorProperties is not found in the empty JSON string", StreamingLocatorProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingLocatorProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingLocatorProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamingLocatorProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternativeMediaId") != null && !jsonObj.get("alternativeMediaId").isJsonNull()) && !jsonObj.get("alternativeMediaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeMediaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternativeMediaId").toString()));
      }
      if (!jsonObj.get("assetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetName").toString()));
      }
      if (jsonObj.get("contentKeys") != null && !jsonObj.get("contentKeys").isJsonNull()) {
        JsonArray jsonArraycontentKeys = jsonObj.getAsJsonArray("contentKeys");
        if (jsonArraycontentKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contentKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contentKeys` to be an array in the JSON string but got `%s`", jsonObj.get("contentKeys").toString()));
          }

          // validate the optional field `contentKeys` (array)
          for (int i = 0; i < jsonArraycontentKeys.size(); i++) {
            StreamingLocatorContentKey.validateJsonElement(jsonArraycontentKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("defaultContentKeyPolicyName") != null && !jsonObj.get("defaultContentKeyPolicyName").isJsonNull()) && !jsonObj.get("defaultContentKeyPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultContentKeyPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultContentKeyPolicyName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull() && !jsonObj.get("filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }
      if ((jsonObj.get("streamingLocatorId") != null && !jsonObj.get("streamingLocatorId").isJsonNull()) && !jsonObj.get("streamingLocatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamingLocatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamingLocatorId").toString()));
      }
      if (!jsonObj.get("streamingPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamingPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamingPolicyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingLocatorProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingLocatorProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingLocatorProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingLocatorProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingLocatorProperties>() {
           @Override
           public void write(JsonWriter out, StreamingLocatorProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingLocatorProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingLocatorProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingLocatorProperties
   * @throws IOException if the JSON string is invalid with respect to StreamingLocatorProperties
   */
  public static StreamingLocatorProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingLocatorProperties.class);
  }

  /**
   * Convert an instance of StreamingLocatorProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

