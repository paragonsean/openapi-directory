/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingPolicyContentKeys.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingPolicyContentKeys::OAIStreamingPolicyContentKeys(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingPolicyContentKeys::OAIStreamingPolicyContentKeys() {
    this->initializeModel();
}

OAIStreamingPolicyContentKeys::~OAIStreamingPolicyContentKeys() {}

void OAIStreamingPolicyContentKeys::initializeModel() {

    m_default_key_isSet = false;
    m_default_key_isValid = false;

    m_key_to_track_mappings_isSet = false;
    m_key_to_track_mappings_isValid = false;
}

void OAIStreamingPolicyContentKeys::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingPolicyContentKeys::fromJsonObject(QJsonObject json) {

    m_default_key_isValid = ::OpenAPI::fromJsonValue(m_default_key, json[QString("defaultKey")]);
    m_default_key_isSet = !json[QString("defaultKey")].isNull() && m_default_key_isValid;

    m_key_to_track_mappings_isValid = ::OpenAPI::fromJsonValue(m_key_to_track_mappings, json[QString("keyToTrackMappings")]);
    m_key_to_track_mappings_isSet = !json[QString("keyToTrackMappings")].isNull() && m_key_to_track_mappings_isValid;
}

QString OAIStreamingPolicyContentKeys::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingPolicyContentKeys::asJsonObject() const {
    QJsonObject obj;
    if (m_default_key.isSet()) {
        obj.insert(QString("defaultKey"), ::OpenAPI::toJsonValue(m_default_key));
    }
    if (m_key_to_track_mappings.size() > 0) {
        obj.insert(QString("keyToTrackMappings"), ::OpenAPI::toJsonValue(m_key_to_track_mappings));
    }
    return obj;
}

OAIDefaultKey OAIStreamingPolicyContentKeys::getDefaultKey() const {
    return m_default_key;
}
void OAIStreamingPolicyContentKeys::setDefaultKey(const OAIDefaultKey &default_key) {
    m_default_key = default_key;
    m_default_key_isSet = true;
}

bool OAIStreamingPolicyContentKeys::is_default_key_Set() const{
    return m_default_key_isSet;
}

bool OAIStreamingPolicyContentKeys::is_default_key_Valid() const{
    return m_default_key_isValid;
}

QList<OAIStreamingPolicyContentKey> OAIStreamingPolicyContentKeys::getKeyToTrackMappings() const {
    return m_key_to_track_mappings;
}
void OAIStreamingPolicyContentKeys::setKeyToTrackMappings(const QList<OAIStreamingPolicyContentKey> &key_to_track_mappings) {
    m_key_to_track_mappings = key_to_track_mappings;
    m_key_to_track_mappings_isSet = true;
}

bool OAIStreamingPolicyContentKeys::is_key_to_track_mappings_Set() const{
    return m_key_to_track_mappings_isSet;
}

bool OAIStreamingPolicyContentKeys::is_key_to_track_mappings_Valid() const{
    return m_key_to_track_mappings_isValid;
}

bool OAIStreamingPolicyContentKeys::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_to_track_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingPolicyContentKeys::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
