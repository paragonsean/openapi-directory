/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingPolicyProperties::OAIStreamingPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingPolicyProperties::OAIStreamingPolicyProperties() {
    this->initializeModel();
}

OAIStreamingPolicyProperties::~OAIStreamingPolicyProperties() {}

void OAIStreamingPolicyProperties::initializeModel() {

    m_common_encryption_cbcs_isSet = false;
    m_common_encryption_cbcs_isValid = false;

    m_common_encryption_cenc_isSet = false;
    m_common_encryption_cenc_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_default_content_key_policy_name_isSet = false;
    m_default_content_key_policy_name_isValid = false;

    m_envelope_encryption_isSet = false;
    m_envelope_encryption_isValid = false;

    m_no_encryption_isSet = false;
    m_no_encryption_isValid = false;
}

void OAIStreamingPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingPolicyProperties::fromJsonObject(QJsonObject json) {

    m_common_encryption_cbcs_isValid = ::OpenAPI::fromJsonValue(m_common_encryption_cbcs, json[QString("commonEncryptionCbcs")]);
    m_common_encryption_cbcs_isSet = !json[QString("commonEncryptionCbcs")].isNull() && m_common_encryption_cbcs_isValid;

    m_common_encryption_cenc_isValid = ::OpenAPI::fromJsonValue(m_common_encryption_cenc, json[QString("commonEncryptionCenc")]);
    m_common_encryption_cenc_isSet = !json[QString("commonEncryptionCenc")].isNull() && m_common_encryption_cenc_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_default_content_key_policy_name_isValid = ::OpenAPI::fromJsonValue(m_default_content_key_policy_name, json[QString("defaultContentKeyPolicyName")]);
    m_default_content_key_policy_name_isSet = !json[QString("defaultContentKeyPolicyName")].isNull() && m_default_content_key_policy_name_isValid;

    m_envelope_encryption_isValid = ::OpenAPI::fromJsonValue(m_envelope_encryption, json[QString("envelopeEncryption")]);
    m_envelope_encryption_isSet = !json[QString("envelopeEncryption")].isNull() && m_envelope_encryption_isValid;

    m_no_encryption_isValid = ::OpenAPI::fromJsonValue(m_no_encryption, json[QString("noEncryption")]);
    m_no_encryption_isSet = !json[QString("noEncryption")].isNull() && m_no_encryption_isValid;
}

QString OAIStreamingPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_common_encryption_cbcs.isSet()) {
        obj.insert(QString("commonEncryptionCbcs"), ::OpenAPI::toJsonValue(m_common_encryption_cbcs));
    }
    if (m_common_encryption_cenc.isSet()) {
        obj.insert(QString("commonEncryptionCenc"), ::OpenAPI::toJsonValue(m_common_encryption_cenc));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_default_content_key_policy_name_isSet) {
        obj.insert(QString("defaultContentKeyPolicyName"), ::OpenAPI::toJsonValue(m_default_content_key_policy_name));
    }
    if (m_envelope_encryption.isSet()) {
        obj.insert(QString("envelopeEncryption"), ::OpenAPI::toJsonValue(m_envelope_encryption));
    }
    if (m_no_encryption.isSet()) {
        obj.insert(QString("noEncryption"), ::OpenAPI::toJsonValue(m_no_encryption));
    }
    return obj;
}

OAICommonEncryptionCbcs OAIStreamingPolicyProperties::getCommonEncryptionCbcs() const {
    return m_common_encryption_cbcs;
}
void OAIStreamingPolicyProperties::setCommonEncryptionCbcs(const OAICommonEncryptionCbcs &common_encryption_cbcs) {
    m_common_encryption_cbcs = common_encryption_cbcs;
    m_common_encryption_cbcs_isSet = true;
}

bool OAIStreamingPolicyProperties::is_common_encryption_cbcs_Set() const{
    return m_common_encryption_cbcs_isSet;
}

bool OAIStreamingPolicyProperties::is_common_encryption_cbcs_Valid() const{
    return m_common_encryption_cbcs_isValid;
}

OAICommonEncryptionCenc OAIStreamingPolicyProperties::getCommonEncryptionCenc() const {
    return m_common_encryption_cenc;
}
void OAIStreamingPolicyProperties::setCommonEncryptionCenc(const OAICommonEncryptionCenc &common_encryption_cenc) {
    m_common_encryption_cenc = common_encryption_cenc;
    m_common_encryption_cenc_isSet = true;
}

bool OAIStreamingPolicyProperties::is_common_encryption_cenc_Set() const{
    return m_common_encryption_cenc_isSet;
}

bool OAIStreamingPolicyProperties::is_common_encryption_cenc_Valid() const{
    return m_common_encryption_cenc_isValid;
}

QDateTime OAIStreamingPolicyProperties::getCreated() const {
    return m_created;
}
void OAIStreamingPolicyProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIStreamingPolicyProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIStreamingPolicyProperties::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIStreamingPolicyProperties::getDefaultContentKeyPolicyName() const {
    return m_default_content_key_policy_name;
}
void OAIStreamingPolicyProperties::setDefaultContentKeyPolicyName(const QString &default_content_key_policy_name) {
    m_default_content_key_policy_name = default_content_key_policy_name;
    m_default_content_key_policy_name_isSet = true;
}

bool OAIStreamingPolicyProperties::is_default_content_key_policy_name_Set() const{
    return m_default_content_key_policy_name_isSet;
}

bool OAIStreamingPolicyProperties::is_default_content_key_policy_name_Valid() const{
    return m_default_content_key_policy_name_isValid;
}

OAIEnvelopeEncryption OAIStreamingPolicyProperties::getEnvelopeEncryption() const {
    return m_envelope_encryption;
}
void OAIStreamingPolicyProperties::setEnvelopeEncryption(const OAIEnvelopeEncryption &envelope_encryption) {
    m_envelope_encryption = envelope_encryption;
    m_envelope_encryption_isSet = true;
}

bool OAIStreamingPolicyProperties::is_envelope_encryption_Set() const{
    return m_envelope_encryption_isSet;
}

bool OAIStreamingPolicyProperties::is_envelope_encryption_Valid() const{
    return m_envelope_encryption_isValid;
}

OAINoEncryption OAIStreamingPolicyProperties::getNoEncryption() const {
    return m_no_encryption;
}
void OAIStreamingPolicyProperties::setNoEncryption(const OAINoEncryption &no_encryption) {
    m_no_encryption = no_encryption;
    m_no_encryption_isSet = true;
}

bool OAIStreamingPolicyProperties::is_no_encryption_Set() const{
    return m_no_encryption_isSet;
}

bool OAIStreamingPolicyProperties::is_no_encryption_Valid() const{
    return m_no_encryption_isValid;
}

bool OAIStreamingPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_encryption_cbcs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_encryption_cenc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_content_key_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_envelope_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
