/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackSelection from './TrackSelection';

/**
 * The StreamingLocatorContentKey model module.
 * @module model/StreamingLocatorContentKey
 * @version 2018-07-01
 */
class StreamingLocatorContentKey {
    /**
     * Constructs a new <code>StreamingLocatorContentKey</code>.
     * Class for content key in Streaming Locator
     * @alias module:model/StreamingLocatorContentKey
     * @param id {String} ID of Content Key
     */
    constructor(id) { 
        
        StreamingLocatorContentKey.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>StreamingLocatorContentKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamingLocatorContentKey} obj Optional instance to populate.
     * @return {module:model/StreamingLocatorContentKey} The populated <code>StreamingLocatorContentKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamingLocatorContentKey();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labelReferenceInStreamingPolicy')) {
                obj['labelReferenceInStreamingPolicy'] = ApiClient.convertToType(data['labelReferenceInStreamingPolicy'], 'String');
            }
            if (data.hasOwnProperty('policyName')) {
                obj['policyName'] = ApiClient.convertToType(data['policyName'], 'String');
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [TrackSelection]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamingLocatorContentKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamingLocatorContentKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StreamingLocatorContentKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['labelReferenceInStreamingPolicy'] && !(typeof data['labelReferenceInStreamingPolicy'] === 'string' || data['labelReferenceInStreamingPolicy'] instanceof String)) {
            throw new Error("Expected the field `labelReferenceInStreamingPolicy` to be a primitive type in the JSON string but got " + data['labelReferenceInStreamingPolicy']);
        }
        // ensure the json data is a string
        if (data['policyName'] && !(typeof data['policyName'] === 'string' || data['policyName'] instanceof String)) {
            throw new Error("Expected the field `policyName` to be a primitive type in the JSON string but got " + data['policyName']);
        }
        if (data['tracks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracks'])) {
                throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
            }
            // validate the optional field `tracks` (array)
            for (const item of data['tracks']) {
                TrackSelection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

StreamingLocatorContentKey.RequiredProperties = ["id"];

/**
 * ID of Content Key
 * @member {String} id
 */
StreamingLocatorContentKey.prototype['id'] = undefined;

/**
 * Label of Content Key as specified in the Streaming Policy
 * @member {String} labelReferenceInStreamingPolicy
 */
StreamingLocatorContentKey.prototype['labelReferenceInStreamingPolicy'] = undefined;

/**
 * ContentKeyPolicy used by Content Key
 * @member {String} policyName
 */
StreamingLocatorContentKey.prototype['policyName'] = undefined;

/**
 * Tracks which use this Content Key
 * @member {Array.<module:model/TrackSelection>} tracks
 */
StreamingLocatorContentKey.prototype['tracks'] = undefined;

/**
 * Encryption type of Content Key
 * @member {module:model/StreamingLocatorContentKey.TypeEnum} type
 */
StreamingLocatorContentKey.prototype['type'] = undefined;

/**
 * Value of Content Key
 * @member {String} value
 */
StreamingLocatorContentKey.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
StreamingLocatorContentKey['TypeEnum'] = {

    /**
     * value: "CommonEncryptionCenc"
     * @const
     */
    "CommonEncryptionCenc": "CommonEncryptionCenc",

    /**
     * value: "CommonEncryptionCbcs"
     * @const
     */
    "CommonEncryptionCbcs": "CommonEncryptionCbcs",

    /**
     * value: "EnvelopeEncryption"
     * @const
     */
    "EnvelopeEncryption": "EnvelopeEncryption"
};



export default StreamingLocatorContentKey;

