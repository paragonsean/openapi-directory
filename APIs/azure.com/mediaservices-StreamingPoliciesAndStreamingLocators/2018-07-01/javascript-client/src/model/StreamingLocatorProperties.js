/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StreamingLocatorContentKey from './StreamingLocatorContentKey';

/**
 * The StreamingLocatorProperties model module.
 * @module model/StreamingLocatorProperties
 * @version 2018-07-01
 */
class StreamingLocatorProperties {
    /**
     * Constructs a new <code>StreamingLocatorProperties</code>.
     * Properties of the Streaming Locator.
     * @alias module:model/StreamingLocatorProperties
     * @param assetName {String} Asset Name
     * @param streamingPolicyName {String} Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'
     */
    constructor(assetName, streamingPolicyName) { 
        
        StreamingLocatorProperties.initialize(this, assetName, streamingPolicyName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assetName, streamingPolicyName) { 
        obj['assetName'] = assetName;
        obj['streamingPolicyName'] = streamingPolicyName;
    }

    /**
     * Constructs a <code>StreamingLocatorProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamingLocatorProperties} obj Optional instance to populate.
     * @return {module:model/StreamingLocatorProperties} The populated <code>StreamingLocatorProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamingLocatorProperties();

            if (data.hasOwnProperty('alternativeMediaId')) {
                obj['alternativeMediaId'] = ApiClient.convertToType(data['alternativeMediaId'], 'String');
            }
            if (data.hasOwnProperty('assetName')) {
                obj['assetName'] = ApiClient.convertToType(data['assetName'], 'String');
            }
            if (data.hasOwnProperty('contentKeys')) {
                obj['contentKeys'] = ApiClient.convertToType(data['contentKeys'], [StreamingLocatorContentKey]);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('defaultContentKeyPolicyName')) {
                obj['defaultContentKeyPolicyName'] = ApiClient.convertToType(data['defaultContentKeyPolicyName'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], ['String']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('streamingLocatorId')) {
                obj['streamingLocatorId'] = ApiClient.convertToType(data['streamingLocatorId'], 'String');
            }
            if (data.hasOwnProperty('streamingPolicyName')) {
                obj['streamingPolicyName'] = ApiClient.convertToType(data['streamingPolicyName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamingLocatorProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamingLocatorProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StreamingLocatorProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alternativeMediaId'] && !(typeof data['alternativeMediaId'] === 'string' || data['alternativeMediaId'] instanceof String)) {
            throw new Error("Expected the field `alternativeMediaId` to be a primitive type in the JSON string but got " + data['alternativeMediaId']);
        }
        // ensure the json data is a string
        if (data['assetName'] && !(typeof data['assetName'] === 'string' || data['assetName'] instanceof String)) {
            throw new Error("Expected the field `assetName` to be a primitive type in the JSON string but got " + data['assetName']);
        }
        if (data['contentKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contentKeys'])) {
                throw new Error("Expected the field `contentKeys` to be an array in the JSON data but got " + data['contentKeys']);
            }
            // validate the optional field `contentKeys` (array)
            for (const item of data['contentKeys']) {
                StreamingLocatorContentKey.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['defaultContentKeyPolicyName'] && !(typeof data['defaultContentKeyPolicyName'] === 'string' || data['defaultContentKeyPolicyName'] instanceof String)) {
            throw new Error("Expected the field `defaultContentKeyPolicyName` to be a primitive type in the JSON string but got " + data['defaultContentKeyPolicyName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filters'])) {
            throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
        }
        // ensure the json data is a string
        if (data['streamingLocatorId'] && !(typeof data['streamingLocatorId'] === 'string' || data['streamingLocatorId'] instanceof String)) {
            throw new Error("Expected the field `streamingLocatorId` to be a primitive type in the JSON string but got " + data['streamingLocatorId']);
        }
        // ensure the json data is a string
        if (data['streamingPolicyName'] && !(typeof data['streamingPolicyName'] === 'string' || data['streamingPolicyName'] instanceof String)) {
            throw new Error("Expected the field `streamingPolicyName` to be a primitive type in the JSON string but got " + data['streamingPolicyName']);
        }

        return true;
    }


}

StreamingLocatorProperties.RequiredProperties = ["assetName", "streamingPolicyName"];

/**
 * Alternative Media ID of this Streaming Locator
 * @member {String} alternativeMediaId
 */
StreamingLocatorProperties.prototype['alternativeMediaId'] = undefined;

/**
 * Asset Name
 * @member {String} assetName
 */
StreamingLocatorProperties.prototype['assetName'] = undefined;

/**
 * The ContentKeys used by this Streaming Locator.
 * @member {Array.<module:model/StreamingLocatorContentKey>} contentKeys
 */
StreamingLocatorProperties.prototype['contentKeys'] = undefined;

/**
 * The creation time of the Streaming Locator.
 * @member {Date} created
 */
StreamingLocatorProperties.prototype['created'] = undefined;

/**
 * Name of the default ContentKeyPolicy used by this Streaming Locator.
 * @member {String} defaultContentKeyPolicyName
 */
StreamingLocatorProperties.prototype['defaultContentKeyPolicyName'] = undefined;

/**
 * The end time of the Streaming Locator.
 * @member {Date} endTime
 */
StreamingLocatorProperties.prototype['endTime'] = undefined;

/**
 * A list of asset or account filters which apply to this streaming locator
 * @member {Array.<String>} filters
 */
StreamingLocatorProperties.prototype['filters'] = undefined;

/**
 * The start time of the Streaming Locator.
 * @member {Date} startTime
 */
StreamingLocatorProperties.prototype['startTime'] = undefined;

/**
 * The StreamingLocatorId of the Streaming Locator.
 * @member {String} streamingLocatorId
 */
StreamingLocatorProperties.prototype['streamingLocatorId'] = undefined;

/**
 * Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'
 * @member {String} streamingPolicyName
 */
StreamingLocatorProperties.prototype['streamingPolicyName'] = undefined;






export default StreamingLocatorProperties;

