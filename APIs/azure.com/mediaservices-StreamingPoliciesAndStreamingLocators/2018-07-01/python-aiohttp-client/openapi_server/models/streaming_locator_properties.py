# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.streaming_locator_content_key import StreamingLocatorContentKey
from openapi_server import util


class StreamingLocatorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternative_media_id: str=None, asset_name: str=None, content_keys: List[StreamingLocatorContentKey]=None, created: datetime=None, default_content_key_policy_name: str=None, end_time: datetime=None, filters: List[str]=None, start_time: datetime=None, streaming_locator_id: str=None, streaming_policy_name: str=None):
        """StreamingLocatorProperties - a model defined in OpenAPI

        :param alternative_media_id: The alternative_media_id of this StreamingLocatorProperties.
        :param asset_name: The asset_name of this StreamingLocatorProperties.
        :param content_keys: The content_keys of this StreamingLocatorProperties.
        :param created: The created of this StreamingLocatorProperties.
        :param default_content_key_policy_name: The default_content_key_policy_name of this StreamingLocatorProperties.
        :param end_time: The end_time of this StreamingLocatorProperties.
        :param filters: The filters of this StreamingLocatorProperties.
        :param start_time: The start_time of this StreamingLocatorProperties.
        :param streaming_locator_id: The streaming_locator_id of this StreamingLocatorProperties.
        :param streaming_policy_name: The streaming_policy_name of this StreamingLocatorProperties.
        """
        self.openapi_types = {
            'alternative_media_id': str,
            'asset_name': str,
            'content_keys': List[StreamingLocatorContentKey],
            'created': datetime,
            'default_content_key_policy_name': str,
            'end_time': datetime,
            'filters': List[str],
            'start_time': datetime,
            'streaming_locator_id': str,
            'streaming_policy_name': str
        }

        self.attribute_map = {
            'alternative_media_id': 'alternativeMediaId',
            'asset_name': 'assetName',
            'content_keys': 'contentKeys',
            'created': 'created',
            'default_content_key_policy_name': 'defaultContentKeyPolicyName',
            'end_time': 'endTime',
            'filters': 'filters',
            'start_time': 'startTime',
            'streaming_locator_id': 'streamingLocatorId',
            'streaming_policy_name': 'streamingPolicyName'
        }

        self._alternative_media_id = alternative_media_id
        self._asset_name = asset_name
        self._content_keys = content_keys
        self._created = created
        self._default_content_key_policy_name = default_content_key_policy_name
        self._end_time = end_time
        self._filters = filters
        self._start_time = start_time
        self._streaming_locator_id = streaming_locator_id
        self._streaming_policy_name = streaming_policy_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingLocatorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingLocatorProperties of this StreamingLocatorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternative_media_id(self):
        """Gets the alternative_media_id of this StreamingLocatorProperties.

        Alternative Media ID of this Streaming Locator

        :return: The alternative_media_id of this StreamingLocatorProperties.
        :rtype: str
        """
        return self._alternative_media_id

    @alternative_media_id.setter
    def alternative_media_id(self, alternative_media_id):
        """Sets the alternative_media_id of this StreamingLocatorProperties.

        Alternative Media ID of this Streaming Locator

        :param alternative_media_id: The alternative_media_id of this StreamingLocatorProperties.
        :type alternative_media_id: str
        """

        self._alternative_media_id = alternative_media_id

    @property
    def asset_name(self):
        """Gets the asset_name of this StreamingLocatorProperties.

        Asset Name

        :return: The asset_name of this StreamingLocatorProperties.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this StreamingLocatorProperties.

        Asset Name

        :param asset_name: The asset_name of this StreamingLocatorProperties.
        :type asset_name: str
        """
        if asset_name is None:
            raise ValueError("Invalid value for `asset_name`, must not be `None`")

        self._asset_name = asset_name

    @property
    def content_keys(self):
        """Gets the content_keys of this StreamingLocatorProperties.

        The ContentKeys used by this Streaming Locator.

        :return: The content_keys of this StreamingLocatorProperties.
        :rtype: List[StreamingLocatorContentKey]
        """
        return self._content_keys

    @content_keys.setter
    def content_keys(self, content_keys):
        """Sets the content_keys of this StreamingLocatorProperties.

        The ContentKeys used by this Streaming Locator.

        :param content_keys: The content_keys of this StreamingLocatorProperties.
        :type content_keys: List[StreamingLocatorContentKey]
        """

        self._content_keys = content_keys

    @property
    def created(self):
        """Gets the created of this StreamingLocatorProperties.

        The creation time of the Streaming Locator.

        :return: The created of this StreamingLocatorProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this StreamingLocatorProperties.

        The creation time of the Streaming Locator.

        :param created: The created of this StreamingLocatorProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def default_content_key_policy_name(self):
        """Gets the default_content_key_policy_name of this StreamingLocatorProperties.

        Name of the default ContentKeyPolicy used by this Streaming Locator.

        :return: The default_content_key_policy_name of this StreamingLocatorProperties.
        :rtype: str
        """
        return self._default_content_key_policy_name

    @default_content_key_policy_name.setter
    def default_content_key_policy_name(self, default_content_key_policy_name):
        """Sets the default_content_key_policy_name of this StreamingLocatorProperties.

        Name of the default ContentKeyPolicy used by this Streaming Locator.

        :param default_content_key_policy_name: The default_content_key_policy_name of this StreamingLocatorProperties.
        :type default_content_key_policy_name: str
        """

        self._default_content_key_policy_name = default_content_key_policy_name

    @property
    def end_time(self):
        """Gets the end_time of this StreamingLocatorProperties.

        The end time of the Streaming Locator.

        :return: The end_time of this StreamingLocatorProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this StreamingLocatorProperties.

        The end time of the Streaming Locator.

        :param end_time: The end_time of this StreamingLocatorProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def filters(self):
        """Gets the filters of this StreamingLocatorProperties.

        A list of asset or account filters which apply to this streaming locator

        :return: The filters of this StreamingLocatorProperties.
        :rtype: List[str]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this StreamingLocatorProperties.

        A list of asset or account filters which apply to this streaming locator

        :param filters: The filters of this StreamingLocatorProperties.
        :type filters: List[str]
        """

        self._filters = filters

    @property
    def start_time(self):
        """Gets the start_time of this StreamingLocatorProperties.

        The start time of the Streaming Locator.

        :return: The start_time of this StreamingLocatorProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StreamingLocatorProperties.

        The start time of the Streaming Locator.

        :param start_time: The start_time of this StreamingLocatorProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def streaming_locator_id(self):
        """Gets the streaming_locator_id of this StreamingLocatorProperties.

        The StreamingLocatorId of the Streaming Locator.

        :return: The streaming_locator_id of this StreamingLocatorProperties.
        :rtype: str
        """
        return self._streaming_locator_id

    @streaming_locator_id.setter
    def streaming_locator_id(self, streaming_locator_id):
        """Sets the streaming_locator_id of this StreamingLocatorProperties.

        The StreamingLocatorId of the Streaming Locator.

        :param streaming_locator_id: The streaming_locator_id of this StreamingLocatorProperties.
        :type streaming_locator_id: str
        """

        self._streaming_locator_id = streaming_locator_id

    @property
    def streaming_policy_name(self):
        """Gets the streaming_policy_name of this StreamingLocatorProperties.

        Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'

        :return: The streaming_policy_name of this StreamingLocatorProperties.
        :rtype: str
        """
        return self._streaming_policy_name

    @streaming_policy_name.setter
    def streaming_policy_name(self, streaming_policy_name):
        """Sets the streaming_policy_name of this StreamingLocatorProperties.

        Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'

        :param streaming_policy_name: The streaming_policy_name of this StreamingLocatorProperties.
        :type streaming_policy_name: str
        """
        if streaming_policy_name is None:
            raise ValueError("Invalid value for `streaming_policy_name`, must not be `None`")

        self._streaming_policy_name = streaming_policy_name
