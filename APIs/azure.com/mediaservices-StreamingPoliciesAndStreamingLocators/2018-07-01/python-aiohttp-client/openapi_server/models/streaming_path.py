# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreamingPath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_scheme: str=None, paths: List[str]=None, streaming_protocol: str=None):
        """StreamingPath - a model defined in OpenAPI

        :param encryption_scheme: The encryption_scheme of this StreamingPath.
        :param paths: The paths of this StreamingPath.
        :param streaming_protocol: The streaming_protocol of this StreamingPath.
        """
        self.openapi_types = {
            'encryption_scheme': str,
            'paths': List[str],
            'streaming_protocol': str
        }

        self.attribute_map = {
            'encryption_scheme': 'encryptionScheme',
            'paths': 'paths',
            'streaming_protocol': 'streamingProtocol'
        }

        self._encryption_scheme = encryption_scheme
        self._paths = paths
        self._streaming_protocol = streaming_protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingPath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingPath of this StreamingPath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_scheme(self):
        """Gets the encryption_scheme of this StreamingPath.

        Encryption scheme

        :return: The encryption_scheme of this StreamingPath.
        :rtype: str
        """
        return self._encryption_scheme

    @encryption_scheme.setter
    def encryption_scheme(self, encryption_scheme):
        """Sets the encryption_scheme of this StreamingPath.

        Encryption scheme

        :param encryption_scheme: The encryption_scheme of this StreamingPath.
        :type encryption_scheme: str
        """
        allowed_values = ["NoEncryption", "EnvelopeEncryption", "CommonEncryptionCenc", "CommonEncryptionCbcs"]  # noqa: E501
        if encryption_scheme not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_scheme` ({0}), must be one of {1}"
                .format(encryption_scheme, allowed_values)
            )

        self._encryption_scheme = encryption_scheme

    @property
    def paths(self):
        """Gets the paths of this StreamingPath.

        Streaming paths for each protocol and encryptionScheme pair

        :return: The paths of this StreamingPath.
        :rtype: List[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this StreamingPath.

        Streaming paths for each protocol and encryptionScheme pair

        :param paths: The paths of this StreamingPath.
        :type paths: List[str]
        """

        self._paths = paths

    @property
    def streaming_protocol(self):
        """Gets the streaming_protocol of this StreamingPath.

        Streaming protocol

        :return: The streaming_protocol of this StreamingPath.
        :rtype: str
        """
        return self._streaming_protocol

    @streaming_protocol.setter
    def streaming_protocol(self, streaming_protocol):
        """Sets the streaming_protocol of this StreamingPath.

        Streaming protocol

        :param streaming_protocol: The streaming_protocol of this StreamingPath.
        :type streaming_protocol: str
        """
        allowed_values = ["Hls", "Dash", "SmoothStreaming", "Download"]  # noqa: E501
        if streaming_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `streaming_protocol` ({0}), must be one of {1}"
                .format(streaming_protocol, allowed_values)
            )

        self._streaming_protocol = streaming_protocol
