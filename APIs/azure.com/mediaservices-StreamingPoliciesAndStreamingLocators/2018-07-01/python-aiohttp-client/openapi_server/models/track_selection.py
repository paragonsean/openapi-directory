# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.track_property_condition import TrackPropertyCondition
from openapi_server import util


class TrackSelection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, track_selections: List[TrackPropertyCondition]=None):
        """TrackSelection - a model defined in OpenAPI

        :param track_selections: The track_selections of this TrackSelection.
        """
        self.openapi_types = {
            'track_selections': List[TrackPropertyCondition]
        }

        self.attribute_map = {
            'track_selections': 'trackSelections'
        }

        self._track_selections = track_selections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackSelection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrackSelection of this TrackSelection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def track_selections(self):
        """Gets the track_selections of this TrackSelection.

        TrackSelections is a track property condition list which can specify track(s)

        :return: The track_selections of this TrackSelection.
        :rtype: List[TrackPropertyCondition]
        """
        return self._track_selections

    @track_selections.setter
    def track_selections(self, track_selections):
        """Sets the track_selections of this TrackSelection.

        TrackSelections is a track property condition list which can specify track(s)

        :param track_selections: The track_selections of this TrackSelection.
        :type track_selections: List[TrackPropertyCondition]
        """

        self._track_selections = track_selections
