# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreamingPolicyFairPlayConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_persistent_license: bool=None, custom_license_acquisition_url_template: str=None):
        """StreamingPolicyFairPlayConfiguration - a model defined in OpenAPI

        :param allow_persistent_license: The allow_persistent_license of this StreamingPolicyFairPlayConfiguration.
        :param custom_license_acquisition_url_template: The custom_license_acquisition_url_template of this StreamingPolicyFairPlayConfiguration.
        """
        self.openapi_types = {
            'allow_persistent_license': bool,
            'custom_license_acquisition_url_template': str
        }

        self.attribute_map = {
            'allow_persistent_license': 'allowPersistentLicense',
            'custom_license_acquisition_url_template': 'customLicenseAcquisitionUrlTemplate'
        }

        self._allow_persistent_license = allow_persistent_license
        self._custom_license_acquisition_url_template = custom_license_acquisition_url_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingPolicyFairPlayConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingPolicyFairPlayConfiguration of this StreamingPolicyFairPlayConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_persistent_license(self):
        """Gets the allow_persistent_license of this StreamingPolicyFairPlayConfiguration.

        All license to be persistent or not

        :return: The allow_persistent_license of this StreamingPolicyFairPlayConfiguration.
        :rtype: bool
        """
        return self._allow_persistent_license

    @allow_persistent_license.setter
    def allow_persistent_license(self, allow_persistent_license):
        """Sets the allow_persistent_license of this StreamingPolicyFairPlayConfiguration.

        All license to be persistent or not

        :param allow_persistent_license: The allow_persistent_license of this StreamingPolicyFairPlayConfiguration.
        :type allow_persistent_license: bool
        """
        if allow_persistent_license is None:
            raise ValueError("Invalid value for `allow_persistent_license`, must not be `None`")

        self._allow_persistent_license = allow_persistent_license

    @property
    def custom_license_acquisition_url_template(self):
        """Gets the custom_license_acquisition_url_template of this StreamingPolicyFairPlayConfiguration.

        Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.

        :return: The custom_license_acquisition_url_template of this StreamingPolicyFairPlayConfiguration.
        :rtype: str
        """
        return self._custom_license_acquisition_url_template

    @custom_license_acquisition_url_template.setter
    def custom_license_acquisition_url_template(self, custom_license_acquisition_url_template):
        """Sets the custom_license_acquisition_url_template of this StreamingPolicyFairPlayConfiguration.

        Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.

        :param custom_license_acquisition_url_template: The custom_license_acquisition_url_template of this StreamingPolicyFairPlayConfiguration.
        :type custom_license_acquisition_url_template: str
        """

        self._custom_license_acquisition_url_template = custom_license_acquisition_url_template
