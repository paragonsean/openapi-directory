# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.track_selection import TrackSelection
from openapi_server import util


class StreamingLocatorContentKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, label_reference_in_streaming_policy: str=None, policy_name: str=None, tracks: List[TrackSelection]=None, type: str=None, value: str=None):
        """StreamingLocatorContentKey - a model defined in OpenAPI

        :param id: The id of this StreamingLocatorContentKey.
        :param label_reference_in_streaming_policy: The label_reference_in_streaming_policy of this StreamingLocatorContentKey.
        :param policy_name: The policy_name of this StreamingLocatorContentKey.
        :param tracks: The tracks of this StreamingLocatorContentKey.
        :param type: The type of this StreamingLocatorContentKey.
        :param value: The value of this StreamingLocatorContentKey.
        """
        self.openapi_types = {
            'id': str,
            'label_reference_in_streaming_policy': str,
            'policy_name': str,
            'tracks': List[TrackSelection],
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'id': 'id',
            'label_reference_in_streaming_policy': 'labelReferenceInStreamingPolicy',
            'policy_name': 'policyName',
            'tracks': 'tracks',
            'type': 'type',
            'value': 'value'
        }

        self._id = id
        self._label_reference_in_streaming_policy = label_reference_in_streaming_policy
        self._policy_name = policy_name
        self._tracks = tracks
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingLocatorContentKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingLocatorContentKey of this StreamingLocatorContentKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StreamingLocatorContentKey.

        ID of Content Key

        :return: The id of this StreamingLocatorContentKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StreamingLocatorContentKey.

        ID of Content Key

        :param id: The id of this StreamingLocatorContentKey.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label_reference_in_streaming_policy(self):
        """Gets the label_reference_in_streaming_policy of this StreamingLocatorContentKey.

        Label of Content Key as specified in the Streaming Policy

        :return: The label_reference_in_streaming_policy of this StreamingLocatorContentKey.
        :rtype: str
        """
        return self._label_reference_in_streaming_policy

    @label_reference_in_streaming_policy.setter
    def label_reference_in_streaming_policy(self, label_reference_in_streaming_policy):
        """Sets the label_reference_in_streaming_policy of this StreamingLocatorContentKey.

        Label of Content Key as specified in the Streaming Policy

        :param label_reference_in_streaming_policy: The label_reference_in_streaming_policy of this StreamingLocatorContentKey.
        :type label_reference_in_streaming_policy: str
        """

        self._label_reference_in_streaming_policy = label_reference_in_streaming_policy

    @property
    def policy_name(self):
        """Gets the policy_name of this StreamingLocatorContentKey.

        ContentKeyPolicy used by Content Key

        :return: The policy_name of this StreamingLocatorContentKey.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this StreamingLocatorContentKey.

        ContentKeyPolicy used by Content Key

        :param policy_name: The policy_name of this StreamingLocatorContentKey.
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def tracks(self):
        """Gets the tracks of this StreamingLocatorContentKey.

        Tracks which use this Content Key

        :return: The tracks of this StreamingLocatorContentKey.
        :rtype: List[TrackSelection]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this StreamingLocatorContentKey.

        Tracks which use this Content Key

        :param tracks: The tracks of this StreamingLocatorContentKey.
        :type tracks: List[TrackSelection]
        """

        self._tracks = tracks

    @property
    def type(self):
        """Gets the type of this StreamingLocatorContentKey.

        Encryption type of Content Key

        :return: The type of this StreamingLocatorContentKey.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StreamingLocatorContentKey.

        Encryption type of Content Key

        :param type: The type of this StreamingLocatorContentKey.
        :type type: str
        """
        allowed_values = ["CommonEncryptionCenc", "CommonEncryptionCbcs", "EnvelopeEncryption"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this StreamingLocatorContentKey.

        Value of Content Key

        :return: The value of this StreamingLocatorContentKey.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this StreamingLocatorContentKey.

        Value of Content Key

        :param value: The value of this StreamingLocatorContentKey.
        :type value: str
        """

        self._value = value
