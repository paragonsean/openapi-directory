# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dedicated_capacity_administrators import DedicatedCapacityAdministrators
from openapi_server import util


class DedicatedCapacityProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, state: str=None, administration: DedicatedCapacityAdministrators=None):
        """DedicatedCapacityProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this DedicatedCapacityProperties.
        :param state: The state of this DedicatedCapacityProperties.
        :param administration: The administration of this DedicatedCapacityProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'state': str,
            'administration': DedicatedCapacityAdministrators
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'state': 'state',
            'administration': 'administration'
        }

        self._provisioning_state = provisioning_state
        self._state = state
        self._administration = administration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DedicatedCapacityProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DedicatedCapacityProperties of this DedicatedCapacityProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DedicatedCapacityProperties.

        The current deployment state of PowerBI Dedicated resource. The provisioningState is to indicate states for resource provisioning.

        :return: The provisioning_state of this DedicatedCapacityProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DedicatedCapacityProperties.

        The current deployment state of PowerBI Dedicated resource. The provisioningState is to indicate states for resource provisioning.

        :param provisioning_state: The provisioning_state of this DedicatedCapacityProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Deleting", "Succeeded", "Failed", "Paused", "Suspended", "Provisioning", "Updating", "Suspending", "Pausing", "Resuming", "Preparing", "Scaling"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def state(self):
        """Gets the state of this DedicatedCapacityProperties.

        The current state of PowerBI Dedicated resource. The state is to indicate more states outside of resource provisioning.

        :return: The state of this DedicatedCapacityProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DedicatedCapacityProperties.

        The current state of PowerBI Dedicated resource. The state is to indicate more states outside of resource provisioning.

        :param state: The state of this DedicatedCapacityProperties.
        :type state: str
        """
        allowed_values = ["Deleting", "Succeeded", "Failed", "Paused", "Suspended", "Provisioning", "Updating", "Suspending", "Pausing", "Resuming", "Preparing", "Scaling"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def administration(self):
        """Gets the administration of this DedicatedCapacityProperties.


        :return: The administration of this DedicatedCapacityProperties.
        :rtype: DedicatedCapacityAdministrators
        """
        return self._administration

    @administration.setter
    def administration(self, administration):
        """Sets the administration of this DedicatedCapacityProperties.


        :param administration: The administration of this DedicatedCapacityProperties.
        :type administration: DedicatedCapacityAdministrators
        """

        self._administration = administration
