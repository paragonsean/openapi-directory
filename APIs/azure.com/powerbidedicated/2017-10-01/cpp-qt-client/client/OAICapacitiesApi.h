/**
 * PowerBIDedicated
 * PowerBI Dedicated Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Power BI dedicated capacities
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICapacitiesApi_H
#define OAI_OAICapacitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckCapacityNameAvailabilityParameters.h"
#include "OAICheckCapacityNameAvailabilityResult.h"
#include "OAIDedicatedCapacities.h"
#include "OAIDedicatedCapacity.h"
#include "OAIDedicatedCapacityUpdateParameters.h"
#include "OAISkuEnumerationForExistingResourceResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICapacitiesApi : public QObject {
    Q_OBJECT

public:
    OAICapacitiesApi(const int timeOut = 0);
    ~OAICapacitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  capacity_parameters OAICheckCapacityNameAvailabilityParameters [required]
    */
    virtual void capacitiesCheckNameAvailability(const QString &location, const QString &api_version, const QString &subscription_id, const OAICheckCapacityNameAvailabilityParameters &capacity_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_capacity_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  capacity_parameters OAIDedicatedCapacity [required]
    */
    virtual void capacitiesCreate(const QString &resource_group_name, const QString &dedicated_capacity_name, const QString &api_version, const QString &subscription_id, const OAIDedicatedCapacity &capacity_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_capacity_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void capacitiesDelete(const QString &resource_group_name, const QString &dedicated_capacity_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_capacity_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void capacitiesGetDetails(const QString &resource_group_name, const QString &dedicated_capacity_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void capacitiesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void capacitiesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_capacity_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void capacitiesListSkusForCapacity(const QString &resource_group_name, const QString &dedicated_capacity_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_capacity_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void capacitiesResume(const QString &resource_group_name, const QString &dedicated_capacity_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_capacity_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void capacitiesSuspend(const QString &resource_group_name, const QString &dedicated_capacity_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_capacity_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  capacity_update_parameters OAIDedicatedCapacityUpdateParameters [required]
    */
    virtual void capacitiesUpdate(const QString &resource_group_name, const QString &dedicated_capacity_name, const QString &api_version, const QString &subscription_id, const OAIDedicatedCapacityUpdateParameters &capacity_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void capacitiesCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void capacitiesCreateCallback(OAIHttpRequestWorker *worker);
    void capacitiesDeleteCallback(OAIHttpRequestWorker *worker);
    void capacitiesGetDetailsCallback(OAIHttpRequestWorker *worker);
    void capacitiesListCallback(OAIHttpRequestWorker *worker);
    void capacitiesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void capacitiesListSkusForCapacityCallback(OAIHttpRequestWorker *worker);
    void capacitiesResumeCallback(OAIHttpRequestWorker *worker);
    void capacitiesSuspendCallback(OAIHttpRequestWorker *worker);
    void capacitiesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void capacitiesCheckNameAvailabilitySignal(OAICheckCapacityNameAvailabilityResult summary);
    void capacitiesCreateSignal(OAIDedicatedCapacity summary);
    void capacitiesDeleteSignal();
    void capacitiesGetDetailsSignal(OAIDedicatedCapacity summary);
    void capacitiesListSignal(OAIDedicatedCapacities summary);
    void capacitiesListByResourceGroupSignal(OAIDedicatedCapacities summary);
    void capacitiesListSkusForCapacitySignal(OAISkuEnumerationForExistingResourceResult summary);
    void capacitiesResumeSignal();
    void capacitiesSuspendSignal();
    void capacitiesUpdateSignal(OAIDedicatedCapacity summary);


    void capacitiesCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckCapacityNameAvailabilityResult summary);
    void capacitiesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCapacity summary);
    void capacitiesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void capacitiesGetDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCapacity summary);
    void capacitiesListSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCapacities summary);
    void capacitiesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCapacities summary);
    void capacitiesListSkusForCapacitySignalFull(OAIHttpRequestWorker *worker, OAISkuEnumerationForExistingResourceResult summary);
    void capacitiesResumeSignalFull(OAIHttpRequestWorker *worker);
    void capacitiesSuspendSignalFull(OAIHttpRequestWorker *worker);
    void capacitiesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCapacity summary);

    Q_DECL_DEPRECATED_X("Use capacitiesCheckNameAvailabilitySignalError() instead")
    void capacitiesCheckNameAvailabilitySignalE(OAICheckCapacityNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesCheckNameAvailabilitySignalError(OAICheckCapacityNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesCreateSignalError() instead")
    void capacitiesCreateSignalE(OAIDedicatedCapacity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesCreateSignalError(OAIDedicatedCapacity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesDeleteSignalError() instead")
    void capacitiesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesGetDetailsSignalError() instead")
    void capacitiesGetDetailsSignalE(OAIDedicatedCapacity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesGetDetailsSignalError(OAIDedicatedCapacity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesListSignalError() instead")
    void capacitiesListSignalE(OAIDedicatedCapacities summary, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesListSignalError(OAIDedicatedCapacities summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesListByResourceGroupSignalError() instead")
    void capacitiesListByResourceGroupSignalE(OAIDedicatedCapacities summary, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesListByResourceGroupSignalError(OAIDedicatedCapacities summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesListSkusForCapacitySignalError() instead")
    void capacitiesListSkusForCapacitySignalE(OAISkuEnumerationForExistingResourceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesListSkusForCapacitySignalError(OAISkuEnumerationForExistingResourceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesResumeSignalError() instead")
    void capacitiesResumeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesResumeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesSuspendSignalError() instead")
    void capacitiesSuspendSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesSuspendSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesUpdateSignalError() instead")
    void capacitiesUpdateSignalE(OAIDedicatedCapacity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesUpdateSignalError(OAIDedicatedCapacity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use capacitiesCheckNameAvailabilitySignalErrorFull() instead")
    void capacitiesCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesCreateSignalErrorFull() instead")
    void capacitiesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesDeleteSignalErrorFull() instead")
    void capacitiesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesGetDetailsSignalErrorFull() instead")
    void capacitiesGetDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesGetDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesListSignalErrorFull() instead")
    void capacitiesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesListByResourceGroupSignalErrorFull() instead")
    void capacitiesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesListSkusForCapacitySignalErrorFull() instead")
    void capacitiesListSkusForCapacitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesListSkusForCapacitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesResumeSignalErrorFull() instead")
    void capacitiesResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesSuspendSignalErrorFull() instead")
    void capacitiesSuspendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesSuspendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use capacitiesUpdateSignalErrorFull() instead")
    void capacitiesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void capacitiesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
