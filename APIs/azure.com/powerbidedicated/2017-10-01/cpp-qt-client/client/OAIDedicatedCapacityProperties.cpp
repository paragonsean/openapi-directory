/**
 * PowerBIDedicated
 * PowerBI Dedicated Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Power BI dedicated capacities
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDedicatedCapacityProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDedicatedCapacityProperties::OAIDedicatedCapacityProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDedicatedCapacityProperties::OAIDedicatedCapacityProperties() {
    this->initializeModel();
}

OAIDedicatedCapacityProperties::~OAIDedicatedCapacityProperties() {}

void OAIDedicatedCapacityProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_administration_isSet = false;
    m_administration_isValid = false;
}

void OAIDedicatedCapacityProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDedicatedCapacityProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_administration_isValid = ::OpenAPI::fromJsonValue(m_administration, json[QString("administration")]);
    m_administration_isSet = !json[QString("administration")].isNull() && m_administration_isValid;
}

QString OAIDedicatedCapacityProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDedicatedCapacityProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_administration.isSet()) {
        obj.insert(QString("administration"), ::OpenAPI::toJsonValue(m_administration));
    }
    return obj;
}

QString OAIDedicatedCapacityProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDedicatedCapacityProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDedicatedCapacityProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDedicatedCapacityProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDedicatedCapacityProperties::getState() const {
    return m_state;
}
void OAIDedicatedCapacityProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDedicatedCapacityProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDedicatedCapacityProperties::is_state_Valid() const{
    return m_state_isValid;
}

OAIDedicatedCapacityAdministrators OAIDedicatedCapacityProperties::getAdministration() const {
    return m_administration;
}
void OAIDedicatedCapacityProperties::setAdministration(const OAIDedicatedCapacityAdministrators &administration) {
    m_administration = administration;
    m_administration_isSet = true;
}

bool OAIDedicatedCapacityProperties::is_administration_Set() const{
    return m_administration_isSet;
}

bool OAIDedicatedCapacityProperties::is_administration_Valid() const{
    return m_administration_isValid;
}

bool OAIDedicatedCapacityProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDedicatedCapacityProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
