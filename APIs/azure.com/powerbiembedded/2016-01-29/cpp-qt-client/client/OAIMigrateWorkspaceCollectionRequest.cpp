/**
 * Power BI Embedded Management Client
 * Client to manage your Power BI Embedded workspace collections and retrieve workspaces.
 *
 * The version of the OpenAPI document: 2016-01-29
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrateWorkspaceCollectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrateWorkspaceCollectionRequest::OAIMigrateWorkspaceCollectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrateWorkspaceCollectionRequest::OAIMigrateWorkspaceCollectionRequest() {
    this->initializeModel();
}

OAIMigrateWorkspaceCollectionRequest::~OAIMigrateWorkspaceCollectionRequest() {}

void OAIMigrateWorkspaceCollectionRequest::initializeModel() {

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_target_resource_group_isSet = false;
    m_target_resource_group_isValid = false;
}

void OAIMigrateWorkspaceCollectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrateWorkspaceCollectionRequest::fromJsonObject(QJsonObject json) {

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_target_resource_group_isValid = ::OpenAPI::fromJsonValue(m_target_resource_group, json[QString("targetResourceGroup")]);
    m_target_resource_group_isSet = !json[QString("targetResourceGroup")].isNull() && m_target_resource_group_isValid;
}

QString OAIMigrateWorkspaceCollectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrateWorkspaceCollectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_target_resource_group_isSet) {
        obj.insert(QString("targetResourceGroup"), ::OpenAPI::toJsonValue(m_target_resource_group));
    }
    return obj;
}

QList<QString> OAIMigrateWorkspaceCollectionRequest::getResources() const {
    return m_resources;
}
void OAIMigrateWorkspaceCollectionRequest::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIMigrateWorkspaceCollectionRequest::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIMigrateWorkspaceCollectionRequest::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIMigrateWorkspaceCollectionRequest::getTargetResourceGroup() const {
    return m_target_resource_group;
}
void OAIMigrateWorkspaceCollectionRequest::setTargetResourceGroup(const QString &target_resource_group) {
    m_target_resource_group = target_resource_group;
    m_target_resource_group_isSet = true;
}

bool OAIMigrateWorkspaceCollectionRequest::is_target_resource_group_Set() const{
    return m_target_resource_group_isSet;
}

bool OAIMigrateWorkspaceCollectionRequest::is_target_resource_group_Valid() const{
    return m_target_resource_group_isValid;
}

bool OAIMigrateWorkspaceCollectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrateWorkspaceCollectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
