/**
 * Power BI Embedded Management Client
 * Client to manage your Power BI Embedded workspace collections and retrieve workspaces.
 *
 * The version of the OpenAPI document: 2016-01-29
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkspaceCollectionsApi_H
#define OAI_OAIWorkspaceCollectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckNameRequest.h"
#include "OAICheckNameResponse.h"
#include "OAICreateWorkspaceCollectionRequest.h"
#include "OAIError.h"
#include "OAIMigrateWorkspaceCollectionRequest.h"
#include "OAIUpdateWorkspaceCollectionRequest.h"
#include "OAIWorkspaceCollection.h"
#include "OAIWorkspaceCollectionAccessKey.h"
#include "OAIWorkspaceCollectionAccessKeys.h"
#include "OAIWorkspaceCollectionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkspaceCollectionsApi : public QObject {
    Q_OBJECT

public:
    OAIWorkspaceCollectionsApi(const int timeOut = 0);
    ~OAIWorkspaceCollectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAICheckNameRequest [required]
    */
    virtual void workspaceCollectionsCheckNameAvailability(const QString &subscription_id, const QString &location, const QString &api_version, const OAICheckNameRequest &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAICreateWorkspaceCollectionRequest [required]
    */
    virtual void workspaceCollectionsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_collection_name, const QString &api_version, const OAICreateWorkspaceCollectionRequest &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workspaceCollectionsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workspaceCollectionsGetAccessKeys(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workspaceCollectionsGetByName(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workspaceCollectionsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workspaceCollectionsListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIMigrateWorkspaceCollectionRequest [required]
    */
    virtual void workspaceCollectionsMigrate(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const OAIMigrateWorkspaceCollectionRequest &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIWorkspaceCollectionAccessKey [required]
    */
    virtual void workspaceCollectionsRegenerateKey(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_collection_name, const QString &api_version, const OAIWorkspaceCollectionAccessKey &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIUpdateWorkspaceCollectionRequest [required]
    */
    virtual void workspaceCollectionsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_collection_name, const QString &api_version, const OAIUpdateWorkspaceCollectionRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workspaceCollectionsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsCreateCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsGetAccessKeysCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsGetByNameCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsMigrateCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void workspaceCollectionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workspaceCollectionsCheckNameAvailabilitySignal(OAICheckNameResponse summary);
    void workspaceCollectionsCreateSignal(OAIWorkspaceCollection summary);
    void workspaceCollectionsDeleteSignal();
    void workspaceCollectionsGetAccessKeysSignal(OAIWorkspaceCollectionAccessKeys summary);
    void workspaceCollectionsGetByNameSignal(OAIWorkspaceCollection summary);
    void workspaceCollectionsListByResourceGroupSignal(OAIWorkspaceCollectionList summary);
    void workspaceCollectionsListBySubscriptionSignal(OAIWorkspaceCollectionList summary);
    void workspaceCollectionsMigrateSignal();
    void workspaceCollectionsRegenerateKeySignal(OAIWorkspaceCollectionAccessKeys summary);
    void workspaceCollectionsUpdateSignal(OAIWorkspaceCollection summary);


    void workspaceCollectionsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameResponse summary);
    void workspaceCollectionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceCollection summary);
    void workspaceCollectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspaceCollectionsGetAccessKeysSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceCollectionAccessKeys summary);
    void workspaceCollectionsGetByNameSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceCollection summary);
    void workspaceCollectionsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceCollectionList summary);
    void workspaceCollectionsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceCollectionList summary);
    void workspaceCollectionsMigrateSignalFull(OAIHttpRequestWorker *worker);
    void workspaceCollectionsRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceCollectionAccessKeys summary);
    void workspaceCollectionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceCollection summary);

    Q_DECL_DEPRECATED_X("Use workspaceCollectionsCheckNameAvailabilitySignalError() instead")
    void workspaceCollectionsCheckNameAvailabilitySignalE(OAICheckNameResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsCheckNameAvailabilitySignalError(OAICheckNameResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsCreateSignalError() instead")
    void workspaceCollectionsCreateSignalE(OAIWorkspaceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsCreateSignalError(OAIWorkspaceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsDeleteSignalError() instead")
    void workspaceCollectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsGetAccessKeysSignalError() instead")
    void workspaceCollectionsGetAccessKeysSignalE(OAIWorkspaceCollectionAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsGetAccessKeysSignalError(OAIWorkspaceCollectionAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsGetByNameSignalError() instead")
    void workspaceCollectionsGetByNameSignalE(OAIWorkspaceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsGetByNameSignalError(OAIWorkspaceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsListByResourceGroupSignalError() instead")
    void workspaceCollectionsListByResourceGroupSignalE(OAIWorkspaceCollectionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsListByResourceGroupSignalError(OAIWorkspaceCollectionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsListBySubscriptionSignalError() instead")
    void workspaceCollectionsListBySubscriptionSignalE(OAIWorkspaceCollectionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsListBySubscriptionSignalError(OAIWorkspaceCollectionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsMigrateSignalError() instead")
    void workspaceCollectionsMigrateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsMigrateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsRegenerateKeySignalError() instead")
    void workspaceCollectionsRegenerateKeySignalE(OAIWorkspaceCollectionAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsRegenerateKeySignalError(OAIWorkspaceCollectionAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsUpdateSignalError() instead")
    void workspaceCollectionsUpdateSignalE(OAIWorkspaceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsUpdateSignalError(OAIWorkspaceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workspaceCollectionsCheckNameAvailabilitySignalErrorFull() instead")
    void workspaceCollectionsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsCreateSignalErrorFull() instead")
    void workspaceCollectionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsDeleteSignalErrorFull() instead")
    void workspaceCollectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsGetAccessKeysSignalErrorFull() instead")
    void workspaceCollectionsGetAccessKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsGetAccessKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsGetByNameSignalErrorFull() instead")
    void workspaceCollectionsGetByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsGetByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsListByResourceGroupSignalErrorFull() instead")
    void workspaceCollectionsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsListBySubscriptionSignalErrorFull() instead")
    void workspaceCollectionsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsMigrateSignalErrorFull() instead")
    void workspaceCollectionsMigrateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsMigrateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsRegenerateKeySignalErrorFull() instead")
    void workspaceCollectionsRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceCollectionsUpdateSignalErrorFull() instead")
    void workspaceCollectionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceCollectionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
