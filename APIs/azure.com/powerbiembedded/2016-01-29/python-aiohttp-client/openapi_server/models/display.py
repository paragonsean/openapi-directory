# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Display(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, operation: str=None, origin: str=None, provider: str=None, resource: str=None):
        """Display - a model defined in OpenAPI

        :param description: The description of this Display.
        :param operation: The operation of this Display.
        :param origin: The origin of this Display.
        :param provider: The provider of this Display.
        :param resource: The resource of this Display.
        """
        self.openapi_types = {
            'description': str,
            'operation': str,
            'origin': str,
            'provider': str,
            'resource': str
        }

        self.attribute_map = {
            'description': 'description',
            'operation': 'operation',
            'origin': 'origin',
            'provider': 'provider',
            'resource': 'resource'
        }

        self._description = description
        self._operation = operation
        self._origin = origin
        self._provider = provider
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Display':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Display of this Display.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Display.

        The localized friendly description for the operation as shown to the user. This description should be thorough, yet concise. It will be used in tool-tips and detailed views.

        :return: The description of this Display.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Display.

        The localized friendly description for the operation as shown to the user. This description should be thorough, yet concise. It will be used in tool-tips and detailed views.

        :param description: The description of this Display.
        :type description: str
        """

        self._description = description

    @property
    def operation(self):
        """Gets the operation of this Display.

        The localized friendly name for the operation as shown to the user. This name should be concise (to fit in drop downs), but clear (self-documenting). Use Title Casing and include the entity/resource to which it applies.

        :return: The operation of this Display.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Display.

        The localized friendly name for the operation as shown to the user. This name should be concise (to fit in drop downs), but clear (self-documenting). Use Title Casing and include the entity/resource to which it applies.

        :param operation: The operation of this Display.
        :type operation: str
        """

        self._operation = operation

    @property
    def origin(self):
        """Gets the origin of this Display.

        The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. Default value is 'user,system'

        :return: The origin of this Display.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Display.

        The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. Default value is 'user,system'

        :param origin: The origin of this Display.
        :type origin: str
        """

        self._origin = origin

    @property
    def provider(self):
        """Gets the provider of this Display.

        The localized friendly form of the resource provider name. This form is also expected to include the publisher/company responsible. Use Title Casing. Begin with \"Microsoft\" for 1st party services.

        :return: The provider of this Display.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Display.

        The localized friendly form of the resource provider name. This form is also expected to include the publisher/company responsible. Use Title Casing. Begin with \"Microsoft\" for 1st party services.

        :param provider: The provider of this Display.
        :type provider: str
        """

        self._provider = provider

    @property
    def resource(self):
        """Gets the resource of this Display.

        The localized friendly form of the resource type related to this action/operation. This form should match the public documentation for the resource provider. Use Title Casing. For examples, refer to the \"name\" section.

        :return: The resource of this Display.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Display.

        The localized friendly form of the resource type related to this action/operation. This form should match the public documentation for the resource provider. Use Title Casing. For examples, refer to the \"name\" section.

        :param resource: The resource of this Display.
        :type resource: str
        """

        self._resource = resource
