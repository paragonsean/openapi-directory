# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkspaceCollectionAccessKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_name: str=None):
        """WorkspaceCollectionAccessKey - a model defined in OpenAPI

        :param key_name: The key_name of this WorkspaceCollectionAccessKey.
        """
        self.openapi_types = {
            'key_name': str
        }

        self.attribute_map = {
            'key_name': 'keyName'
        }

        self._key_name = key_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceCollectionAccessKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceCollectionAccessKey of this WorkspaceCollectionAccessKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_name(self):
        """Gets the key_name of this WorkspaceCollectionAccessKey.

        Key name

        :return: The key_name of this WorkspaceCollectionAccessKey.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this WorkspaceCollectionAccessKey.

        Key name

        :param key_name: The key_name of this WorkspaceCollectionAccessKey.
        :type key_name: str
        """
        allowed_values = ["key1", "key2"]  # noqa: E501
        if key_name not in allowed_values:
            raise ValueError(
                "Invalid value for `key_name` ({0}), must be one of {1}"
                .format(key_name, allowed_values)
            )

        self._key_name = key_name
