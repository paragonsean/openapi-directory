/**
 * Azure Alerts Management Service Resource Provider
 * APIs for Azure Smart Detector Alert Rules CRUD operations.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetector::OAIDetector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetector::OAIDetector() {
    this->initializeModel();
}

OAIDetector::~OAIDetector() {}

void OAIDetector::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_paths_isSet = false;
    m_image_paths_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_supported_resource_types_isSet = false;
    m_supported_resource_types_isValid = false;
}

void OAIDetector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetector::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_paths_isValid = ::OpenAPI::fromJsonValue(m_image_paths, json[QString("imagePaths")]);
    m_image_paths_isSet = !json[QString("imagePaths")].isNull() && m_image_paths_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_supported_resource_types_isValid = ::OpenAPI::fromJsonValue(m_supported_resource_types, json[QString("supportedResourceTypes")]);
    m_supported_resource_types_isSet = !json[QString("supportedResourceTypes")].isNull() && m_supported_resource_types_isValid;
}

QString OAIDetector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetector::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_paths.size() > 0) {
        obj.insert(QString("imagePaths"), ::OpenAPI::toJsonValue(m_image_paths));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_supported_resource_types.size() > 0) {
        obj.insert(QString("supportedResourceTypes"), ::OpenAPI::toJsonValue(m_supported_resource_types));
    }
    return obj;
}

QString OAIDetector::getDescription() const {
    return m_description;
}
void OAIDetector::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDetector::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDetector::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDetector::getId() const {
    return m_id;
}
void OAIDetector::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDetector::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDetector::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIDetector::getImagePaths() const {
    return m_image_paths;
}
void OAIDetector::setImagePaths(const QList<QString> &image_paths) {
    m_image_paths = image_paths;
    m_image_paths_isSet = true;
}

bool OAIDetector::is_image_paths_Set() const{
    return m_image_paths_isSet;
}

bool OAIDetector::is_image_paths_Valid() const{
    return m_image_paths_isValid;
}

QString OAIDetector::getName() const {
    return m_name;
}
void OAIDetector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDetector::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDetector::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, OAIObject> OAIDetector::getParameters() const {
    return m_parameters;
}
void OAIDetector::setParameters(const QMap<QString, OAIObject> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDetector::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDetector::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<QString> OAIDetector::getSupportedResourceTypes() const {
    return m_supported_resource_types;
}
void OAIDetector::setSupportedResourceTypes(const QList<QString> &supported_resource_types) {
    m_supported_resource_types = supported_resource_types;
    m_supported_resource_types_isSet = true;
}

bool OAIDetector::is_supported_resource_types_Set() const{
    return m_supported_resource_types_isSet;
}

bool OAIDetector::is_supported_resource_types_Valid() const{
    return m_supported_resource_types_isValid;
}

bool OAIDetector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_resource_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
