/**
 * Azure Alerts Management Service Resource Provider
 * APIs for Azure Smart Detector Alert Rules CRUD operations.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISmartDetectorAlertRulesApi_H
#define OAI_OAISmartDetectorAlertRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlertRule.h"
#include "OAIAlertRulesList.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISmartDetectorAlertRulesApi : public QObject {
    Q_OBJECT

public:
    OAISmartDetectorAlertRulesApi(const int timeOut = 0);
    ~OAISmartDetectorAlertRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  alert_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAlertRule [required]
    */
    virtual void smartDetectorAlertRulesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &alert_rule_name, const QString &api_version, const OAIAlertRule &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  alert_rule_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void smartDetectorAlertRulesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &alert_rule_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  alert_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand_detector bool [optional]
    */
    virtual void smartDetectorAlertRulesGet(const QString &subscription_id, const QString &resource_group_name, const QString &alert_rule_name, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &expand_detector = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void smartDetectorAlertRulesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void smartDetectorAlertRulesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void smartDetectorAlertRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void smartDetectorAlertRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void smartDetectorAlertRulesGetCallback(OAIHttpRequestWorker *worker);
    void smartDetectorAlertRulesListCallback(OAIHttpRequestWorker *worker);
    void smartDetectorAlertRulesListByResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void smartDetectorAlertRulesCreateOrUpdateSignal(OAIAlertRule summary);
    void smartDetectorAlertRulesDeleteSignal();
    void smartDetectorAlertRulesGetSignal(OAIAlertRule summary);
    void smartDetectorAlertRulesListSignal(OAIAlertRulesList summary);
    void smartDetectorAlertRulesListByResourceGroupSignal(OAIAlertRulesList summary);


    void smartDetectorAlertRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAlertRule summary);
    void smartDetectorAlertRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void smartDetectorAlertRulesGetSignalFull(OAIHttpRequestWorker *worker, OAIAlertRule summary);
    void smartDetectorAlertRulesListSignalFull(OAIHttpRequestWorker *worker, OAIAlertRulesList summary);
    void smartDetectorAlertRulesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAlertRulesList summary);

    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesCreateOrUpdateSignalError() instead")
    void smartDetectorAlertRulesCreateOrUpdateSignalE(OAIAlertRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesCreateOrUpdateSignalError(OAIAlertRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesDeleteSignalError() instead")
    void smartDetectorAlertRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesGetSignalError() instead")
    void smartDetectorAlertRulesGetSignalE(OAIAlertRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesGetSignalError(OAIAlertRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesListSignalError() instead")
    void smartDetectorAlertRulesListSignalE(OAIAlertRulesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesListSignalError(OAIAlertRulesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesListByResourceGroupSignalError() instead")
    void smartDetectorAlertRulesListByResourceGroupSignalE(OAIAlertRulesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesListByResourceGroupSignalError(OAIAlertRulesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesCreateOrUpdateSignalErrorFull() instead")
    void smartDetectorAlertRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesDeleteSignalErrorFull() instead")
    void smartDetectorAlertRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesGetSignalErrorFull() instead")
    void smartDetectorAlertRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesListSignalErrorFull() instead")
    void smartDetectorAlertRulesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartDetectorAlertRulesListByResourceGroupSignalErrorFull() instead")
    void smartDetectorAlertRulesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartDetectorAlertRulesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
