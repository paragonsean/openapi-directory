/*
 * Azure Alerts Management Service Resource Provider
 * APIs for Azure Smart Detector Alert Rules CRUD operations.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlertRule;
import org.openapitools.client.model.AlertRulesList;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmartDetectorAlertRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmartDetectorAlertRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmartDetectorAlertRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for smartDetectorAlertRulesCreateOrUpdate
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful request to create a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, AlertRule parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "alertRuleName" + "}", localVarApiClient.escapeString(alertRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartDetectorAlertRulesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, AlertRule parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'alertRuleName' is set
        if (alertRuleName == null) {
            throw new ApiException("Missing the required parameter 'alertRuleName' when calling smartDetectorAlertRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling smartDetectorAlertRulesCreateOrUpdate(Async)");
        }

        return smartDetectorAlertRulesCreateOrUpdateCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Create or update a Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to the operation. (required)
     * @return AlertRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful request to create a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertRule smartDetectorAlertRulesCreateOrUpdate(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, AlertRule parameters) throws ApiException {
        ApiResponse<AlertRule> localVarResp = smartDetectorAlertRulesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, alertRuleName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to the operation. (required)
     * @return ApiResponse&lt;AlertRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful request to create a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertRule> smartDetectorAlertRulesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, AlertRule parameters) throws ApiException {
        okhttp3.Call localVarCall = smartDetectorAlertRulesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<AlertRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters Parameters supplied to the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful request to create a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, AlertRule parameters, final ApiCallback<AlertRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartDetectorAlertRulesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<AlertRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartDetectorAlertRulesDelete
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Smart Detector alert rule does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesDeleteCall(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "alertRuleName" + "}", localVarApiClient.escapeString(alertRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartDetectorAlertRulesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesDelete(Async)");
        }

        // verify the required parameter 'alertRuleName' is set
        if (alertRuleName == null) {
            throw new ApiException("Missing the required parameter 'alertRuleName' when calling smartDetectorAlertRulesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesDelete(Async)");
        }

        return smartDetectorAlertRulesDeleteCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, _callback);

    }

    /**
     * 
     * Delete an existing Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Smart Detector alert rule does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void smartDetectorAlertRulesDelete(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion) throws ApiException {
        smartDetectorAlertRulesDeleteWithHttpInfo(subscriptionId, resourceGroupName, alertRuleName, apiVersion);
    }

    /**
     * 
     * Delete an existing Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Smart Detector alert rule does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> smartDetectorAlertRulesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartDetectorAlertRulesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an existing Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete a Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Smart Detector alert rule does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesDeleteAsync(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartDetectorAlertRulesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartDetectorAlertRulesGet
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param expandDetector Indicates if Smart Detector should be expanded. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesGetCall(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, Boolean expandDetector, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "alertRuleName" + "}", localVarApiClient.escapeString(alertRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (expandDetector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandDetector", expandDetector));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartDetectorAlertRulesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, Boolean expandDetector, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesGet(Async)");
        }

        // verify the required parameter 'alertRuleName' is set
        if (alertRuleName == null) {
            throw new ApiException("Missing the required parameter 'alertRuleName' when calling smartDetectorAlertRulesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesGet(Async)");
        }

        return smartDetectorAlertRulesGetCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, expandDetector, _callback);

    }

    /**
     * 
     * Get a specific Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param expandDetector Indicates if Smart Detector should be expanded. (optional)
     * @return AlertRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertRule smartDetectorAlertRulesGet(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, Boolean expandDetector) throws ApiException {
        ApiResponse<AlertRule> localVarResp = smartDetectorAlertRulesGetWithHttpInfo(subscriptionId, resourceGroupName, alertRuleName, apiVersion, expandDetector);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a specific Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param expandDetector Indicates if Smart Detector should be expanded. (optional)
     * @return ApiResponse&lt;AlertRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertRule> smartDetectorAlertRulesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, Boolean expandDetector) throws ApiException {
        okhttp3.Call localVarCall = smartDetectorAlertRulesGetValidateBeforeCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, expandDetector, null);
        Type localVarReturnType = new TypeToken<AlertRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a specific Smart Detector alert rule.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param alertRuleName The name of the alert rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param expandDetector Indicates if Smart Detector should be expanded. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get Smart Detector alert rule. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesGetAsync(String subscriptionId, String resourceGroupName, String alertRuleName, String apiVersion, Boolean expandDetector, final ApiCallback<AlertRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartDetectorAlertRulesGetValidateBeforeCall(subscriptionId, resourceGroupName, alertRuleName, apiVersion, expandDetector, _callback);
        Type localVarReturnType = new TypeToken<AlertRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartDetectorAlertRulesList
     * @param subscriptionId The Azure subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to list Smart Detector alert rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartDetectorAlertRulesListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesList(Async)");
        }

        return smartDetectorAlertRulesListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * List all the existing Smart Detector alert rules within the subscription.
     * @param subscriptionId The Azure subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return AlertRulesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to list Smart Detector alert rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertRulesList smartDetectorAlertRulesList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AlertRulesList> localVarResp = smartDetectorAlertRulesListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the existing Smart Detector alert rules within the subscription.
     * @param subscriptionId The Azure subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;AlertRulesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to list Smart Detector alert rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertRulesList> smartDetectorAlertRulesListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartDetectorAlertRulesListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AlertRulesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the existing Smart Detector alert rules within the subscription.
     * @param subscriptionId The Azure subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to list Smart Detector alert rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesListAsync(String subscriptionId, String apiVersion, final ApiCallback<AlertRulesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartDetectorAlertRulesListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AlertRulesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartDetectorAlertRulesListByResourceGroup
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to list Smart Detector alert rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartDetectorAlertRulesListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesListByResourceGroup(Async)");
        }

        return smartDetectorAlertRulesListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * List all the existing Smart Detector alert rules within the subscription and resource group.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @return AlertRulesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to list Smart Detector alert rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertRulesList smartDetectorAlertRulesListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<AlertRulesList> localVarResp = smartDetectorAlertRulesListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the existing Smart Detector alert rules within the subscription and resource group.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;AlertRulesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to list Smart Detector alert rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertRulesList> smartDetectorAlertRulesListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartDetectorAlertRulesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<AlertRulesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the existing Smart Detector alert rules within the subscription and resource group.
     * @param subscriptionId The Azure subscription id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to list Smart Detector alert rules. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartDetectorAlertRulesListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<AlertRulesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartDetectorAlertRulesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AlertRulesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
