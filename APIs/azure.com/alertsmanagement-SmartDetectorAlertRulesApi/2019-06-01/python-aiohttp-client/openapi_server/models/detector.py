# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Detector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, image_paths: List[str]=None, name: str=None, parameters: Dict[str, object]=None, supported_resource_types: List[str]=None):
        """Detector - a model defined in OpenAPI

        :param description: The description of this Detector.
        :param id: The id of this Detector.
        :param image_paths: The image_paths of this Detector.
        :param name: The name of this Detector.
        :param parameters: The parameters of this Detector.
        :param supported_resource_types: The supported_resource_types of this Detector.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'image_paths': List[str],
            'name': str,
            'parameters': Dict[str, object],
            'supported_resource_types': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'image_paths': 'imagePaths',
            'name': 'name',
            'parameters': 'parameters',
            'supported_resource_types': 'supportedResourceTypes'
        }

        self._description = description
        self._id = id
        self._image_paths = image_paths
        self._name = name
        self._parameters = parameters
        self._supported_resource_types = supported_resource_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Detector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Detector of this Detector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Detector.

        The Smart Detector description. By default this is not populated, unless it's specified in expandDetector

        :return: The description of this Detector.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Detector.

        The Smart Detector description. By default this is not populated, unless it's specified in expandDetector

        :param description: The description of this Detector.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Detector.

        The detector id.

        :return: The id of this Detector.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Detector.

        The detector id.

        :param id: The id of this Detector.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_paths(self):
        """Gets the image_paths of this Detector.

        The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector

        :return: The image_paths of this Detector.
        :rtype: List[str]
        """
        return self._image_paths

    @image_paths.setter
    def image_paths(self, image_paths):
        """Sets the image_paths of this Detector.

        The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector

        :param image_paths: The image_paths of this Detector.
        :type image_paths: List[str]
        """

        self._image_paths = image_paths

    @property
    def name(self):
        """Gets the name of this Detector.

        The Smart Detector name. By default this is not populated, unless it's specified in expandDetector

        :return: The name of this Detector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Detector.

        The Smart Detector name. By default this is not populated, unless it's specified in expandDetector

        :param name: The name of this Detector.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this Detector.

        The detector's parameters.'

        :return: The parameters of this Detector.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Detector.

        The detector's parameters.'

        :param parameters: The parameters of this Detector.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters

    @property
    def supported_resource_types(self):
        """Gets the supported_resource_types of this Detector.

        The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector

        :return: The supported_resource_types of this Detector.
        :rtype: List[str]
        """
        return self._supported_resource_types

    @supported_resource_types.setter
    def supported_resource_types(self, supported_resource_types):
        """Sets the supported_resource_types of this Detector.

        The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector

        :param supported_resource_types: The supported_resource_types of this Detector.
        :type supported_resource_types: List[str]
        """

        self._supported_resource_types = supported_resource_types
