/*
 * Azure Alerts Management Service Resource Provider
 * APIs for Azure Smart Detector Alert Rules CRUD operations.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActionGroupsInformation;
import org.openapitools.client.model.Detector;
import org.openapitools.client.model.ThrottlingInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The alert rule properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:41.110592-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertRuleProperties {
  public static final String SERIALIZED_NAME_ACTION_GROUPS = "actionGroups";
  @SerializedName(SERIALIZED_NAME_ACTION_GROUPS)
  private ActionGroupsInformation actionGroups;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETECTOR = "detector";
  @SerializedName(SERIALIZED_NAME_DETECTOR)
  private Detector detector;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private List<String> scope = new ArrayList<>();

  /**
   * The alert rule severity.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEV0("Sev0"),
    
    SEV1("Sev1"),
    
    SEV2("Sev2"),
    
    SEV3("Sev3"),
    
    SEV4("Sev4");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * The alert rule state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_THROTTLING = "throttling";
  @SerializedName(SERIALIZED_NAME_THROTTLING)
  private ThrottlingInformation throttling;

  public AlertRuleProperties() {
  }

  public AlertRuleProperties actionGroups(ActionGroupsInformation actionGroups) {
    this.actionGroups = actionGroups;
    return this;
  }

  /**
   * Get actionGroups
   * @return actionGroups
   */
  @javax.annotation.Nonnull
  public ActionGroupsInformation getActionGroups() {
    return actionGroups;
  }

  public void setActionGroups(ActionGroupsInformation actionGroups) {
    this.actionGroups = actionGroups;
  }


  public AlertRuleProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The alert rule description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AlertRuleProperties detector(Detector detector) {
    this.detector = detector;
    return this;
  }

  /**
   * Get detector
   * @return detector
   */
  @javax.annotation.Nonnull
  public Detector getDetector() {
    return detector;
  }

  public void setDetector(Detector detector) {
    this.detector = detector;
  }


  public AlertRuleProperties frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
   * @return frequency
   */
  @javax.annotation.Nonnull
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }


  public AlertRuleProperties scope(List<String> scope) {
    this.scope = scope;
    return this;
  }

  public AlertRuleProperties addScopeItem(String scopeItem) {
    if (this.scope == null) {
      this.scope = new ArrayList<>();
    }
    this.scope.add(scopeItem);
    return this;
  }

  /**
   * The alert rule resources scope.
   * @return scope
   */
  @javax.annotation.Nonnull
  public List<String> getScope() {
    return scope;
  }

  public void setScope(List<String> scope) {
    this.scope = scope;
  }


  public AlertRuleProperties severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The alert rule severity.
   * @return severity
   */
  @javax.annotation.Nonnull
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public AlertRuleProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The alert rule state.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public AlertRuleProperties throttling(ThrottlingInformation throttling) {
    this.throttling = throttling;
    return this;
  }

  /**
   * Get throttling
   * @return throttling
   */
  @javax.annotation.Nullable
  public ThrottlingInformation getThrottling() {
    return throttling;
  }

  public void setThrottling(ThrottlingInformation throttling) {
    this.throttling = throttling;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertRuleProperties alertRuleProperties = (AlertRuleProperties) o;
    return Objects.equals(this.actionGroups, alertRuleProperties.actionGroups) &&
        Objects.equals(this.description, alertRuleProperties.description) &&
        Objects.equals(this.detector, alertRuleProperties.detector) &&
        Objects.equals(this.frequency, alertRuleProperties.frequency) &&
        Objects.equals(this.scope, alertRuleProperties.scope) &&
        Objects.equals(this.severity, alertRuleProperties.severity) &&
        Objects.equals(this.state, alertRuleProperties.state) &&
        Objects.equals(this.throttling, alertRuleProperties.throttling);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionGroups, description, detector, frequency, scope, severity, state, throttling);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertRuleProperties {\n");
    sb.append("    actionGroups: ").append(toIndentedString(actionGroups)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detector: ").append(toIndentedString(detector)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    throttling: ").append(toIndentedString(throttling)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionGroups");
    openapiFields.add("description");
    openapiFields.add("detector");
    openapiFields.add("frequency");
    openapiFields.add("scope");
    openapiFields.add("severity");
    openapiFields.add("state");
    openapiFields.add("throttling");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionGroups");
    openapiRequiredFields.add("detector");
    openapiRequiredFields.add("frequency");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertRuleProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertRuleProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertRuleProperties is not found in the empty JSON string", AlertRuleProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertRuleProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertRuleProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlertRuleProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `actionGroups`
      ActionGroupsInformation.validateJsonElement(jsonObj.get("actionGroups"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `detector`
      Detector.validateJsonElement(jsonObj.get("detector"));
      if (!jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("scope") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be an array in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the required field `severity`
      SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      // validate the optional field `throttling`
      if (jsonObj.get("throttling") != null && !jsonObj.get("throttling").isJsonNull()) {
        ThrottlingInformation.validateJsonElement(jsonObj.get("throttling"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertRuleProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertRuleProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertRuleProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertRuleProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertRuleProperties>() {
           @Override
           public void write(JsonWriter out, AlertRuleProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertRuleProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertRuleProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertRuleProperties
   * @throws IOException if the JSON string is invalid with respect to AlertRuleProperties
   */
  public static AlertRuleProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertRuleProperties.class);
  }

  /**
   * Convert an instance of AlertRuleProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

