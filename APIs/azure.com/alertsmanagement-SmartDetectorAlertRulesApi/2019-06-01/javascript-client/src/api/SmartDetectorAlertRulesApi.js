/**
 * Azure Alerts Management Service Resource Provider
 * APIs for Azure Smart Detector Alert Rules CRUD operations.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlertRule from '../model/AlertRule';
import AlertRulePatchObject from '../model/AlertRulePatchObject';
import AlertRulesList from '../model/AlertRulesList';
import ErrorResponse from '../model/ErrorResponse';

/**
* SmartDetectorAlertRules service.
* @module api/SmartDetectorAlertRulesApi
* @version 2019-06-01
*/
export default class SmartDetectorAlertRulesApi {

    /**
    * Constructs a new SmartDetectorAlertRulesApi. 
    * @alias module:api/SmartDetectorAlertRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the smartDetectorAlertRulesCreateOrUpdate operation.
     * @callback module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Smart Detector alert rule.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} alertRuleName The name of the alert rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/AlertRule} parameters Parameters supplied to the operation.
     * @param {module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertRule}
     */
    smartDetectorAlertRulesCreateOrUpdate(subscriptionId, resourceGroupName, alertRuleName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesCreateOrUpdate");
      }
      // verify the required parameter 'alertRuleName' is set
      if (alertRuleName === undefined || alertRuleName === null) {
        throw new Error("Missing the required parameter 'alertRuleName' when calling smartDetectorAlertRulesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling smartDetectorAlertRulesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'alertRuleName': alertRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AlertRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartDetectorAlertRulesDelete operation.
     * @callback module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing Smart Detector alert rule.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} alertRuleName The name of the alert rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    smartDetectorAlertRulesDelete(subscriptionId, resourceGroupName, alertRuleName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesDelete");
      }
      // verify the required parameter 'alertRuleName' is set
      if (alertRuleName === undefined || alertRuleName === null) {
        throw new Error("Missing the required parameter 'alertRuleName' when calling smartDetectorAlertRulesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'alertRuleName': alertRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartDetectorAlertRulesGet operation.
     * @callback module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific Smart Detector alert rule.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} alertRuleName The name of the alert rule.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expandDetector] Indicates if Smart Detector should be expanded.
     * @param {module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertRule}
     */
    smartDetectorAlertRulesGet(subscriptionId, resourceGroupName, alertRuleName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesGet");
      }
      // verify the required parameter 'alertRuleName' is set
      if (alertRuleName === undefined || alertRuleName === null) {
        throw new Error("Missing the required parameter 'alertRuleName' when calling smartDetectorAlertRulesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'alertRuleName': alertRuleName
      };
      let queryParams = {
        'api-version': apiVersion,
        'expandDetector': opts['expandDetector']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartDetectorAlertRulesList operation.
     * @callback module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertRulesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the existing Smart Detector alert rules within the subscription.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expandDetector] Indicates if Smart Detector should be expanded.
     * @param {module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertRulesList}
     */
    smartDetectorAlertRulesList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'expandDetector': opts['expandDetector']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertRulesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartDetectorAlertRulesListByResourceGroup operation.
     * @callback module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertRulesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the existing Smart Detector alert rules within the subscription and resource group.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expandDetector] Indicates if Smart Detector should be expanded.
     * @param {module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertRulesList}
     */
    smartDetectorAlertRulesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        'expandDetector': opts['expandDetector']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertRulesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartDetectorAlertRulesPatch operation.
     * @callback module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch a specific Smart Detector alert rule.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} alertRuleName The name of the alert rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/AlertRulePatchObject} parameters Parameters supplied to the operation.
     * @param {module:api/SmartDetectorAlertRulesApi~smartDetectorAlertRulesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertRule}
     */
    smartDetectorAlertRulesPatch(subscriptionId, resourceGroupName, alertRuleName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartDetectorAlertRulesPatch");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling smartDetectorAlertRulesPatch");
      }
      // verify the required parameter 'alertRuleName' is set
      if (alertRuleName === undefined || alertRuleName === null) {
        throw new Error("Missing the required parameter 'alertRuleName' when calling smartDetectorAlertRulesPatch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartDetectorAlertRulesPatch");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling smartDetectorAlertRulesPatch");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'alertRuleName': alertRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AlertRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
