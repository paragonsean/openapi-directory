/**
 * Azure Alerts Management Service Resource Provider
 * APIs for Azure Smart Detector Alert Rules CRUD operations.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionGroupsInformation from './ActionGroupsInformation';
import Detector from './Detector';
import ThrottlingInformation from './ThrottlingInformation';

/**
 * The AlertRuleProperties model module.
 * @module model/AlertRuleProperties
 * @version 2019-06-01
 */
class AlertRuleProperties {
    /**
     * Constructs a new <code>AlertRuleProperties</code>.
     * The alert rule properties.
     * @alias module:model/AlertRuleProperties
     * @param actionGroups {module:model/ActionGroupsInformation} 
     * @param detector {module:model/Detector} 
     * @param frequency {String} The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
     * @param scope {Array.<String>} The alert rule resources scope.
     * @param severity {module:model/AlertRuleProperties.SeverityEnum} The alert rule severity.
     * @param state {module:model/AlertRuleProperties.StateEnum} The alert rule state.
     */
    constructor(actionGroups, detector, frequency, scope, severity, state) { 
        
        AlertRuleProperties.initialize(this, actionGroups, detector, frequency, scope, severity, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionGroups, detector, frequency, scope, severity, state) { 
        obj['actionGroups'] = actionGroups;
        obj['detector'] = detector;
        obj['frequency'] = frequency;
        obj['scope'] = scope;
        obj['severity'] = severity;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>AlertRuleProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertRuleProperties} obj Optional instance to populate.
     * @return {module:model/AlertRuleProperties} The populated <code>AlertRuleProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertRuleProperties();

            if (data.hasOwnProperty('actionGroups')) {
                obj['actionGroups'] = ActionGroupsInformation.constructFromObject(data['actionGroups']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('detector')) {
                obj['detector'] = Detector.constructFromObject(data['detector']);
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], ['String']);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('throttling')) {
                obj['throttling'] = ThrottlingInformation.constructFromObject(data['throttling']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertRuleProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertRuleProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlertRuleProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `actionGroups`
        if (data['actionGroups']) { // data not null
          ActionGroupsInformation.validateJSON(data['actionGroups']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `detector`
        if (data['detector']) { // data not null
          Detector.validateJSON(data['detector']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scope'])) {
            throw new Error("Expected the field `scope` to be an array in the JSON data but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `throttling`
        if (data['throttling']) { // data not null
          ThrottlingInformation.validateJSON(data['throttling']);
        }

        return true;
    }


}

AlertRuleProperties.RequiredProperties = ["actionGroups", "detector", "frequency", "scope", "severity", "state"];

/**
 * @member {module:model/ActionGroupsInformation} actionGroups
 */
AlertRuleProperties.prototype['actionGroups'] = undefined;

/**
 * The alert rule description.
 * @member {String} description
 */
AlertRuleProperties.prototype['description'] = undefined;

/**
 * @member {module:model/Detector} detector
 */
AlertRuleProperties.prototype['detector'] = undefined;

/**
 * The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
 * @member {String} frequency
 */
AlertRuleProperties.prototype['frequency'] = undefined;

/**
 * The alert rule resources scope.
 * @member {Array.<String>} scope
 */
AlertRuleProperties.prototype['scope'] = undefined;

/**
 * The alert rule severity.
 * @member {module:model/AlertRuleProperties.SeverityEnum} severity
 */
AlertRuleProperties.prototype['severity'] = undefined;

/**
 * The alert rule state.
 * @member {module:model/AlertRuleProperties.StateEnum} state
 */
AlertRuleProperties.prototype['state'] = undefined;

/**
 * @member {module:model/ThrottlingInformation} throttling
 */
AlertRuleProperties.prototype['throttling'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
AlertRuleProperties['SeverityEnum'] = {

    /**
     * value: "Sev0"
     * @const
     */
    "Sev0": "Sev0",

    /**
     * value: "Sev1"
     * @const
     */
    "Sev1": "Sev1",

    /**
     * value: "Sev2"
     * @const
     */
    "Sev2": "Sev2",

    /**
     * value: "Sev3"
     * @const
     */
    "Sev3": "Sev3",

    /**
     * value: "Sev4"
     * @const
     */
    "Sev4": "Sev4"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AlertRuleProperties['StateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default AlertRuleProperties;

