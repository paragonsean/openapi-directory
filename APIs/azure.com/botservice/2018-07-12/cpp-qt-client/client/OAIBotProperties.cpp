/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBotProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBotProperties::OAIBotProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBotProperties::OAIBotProperties() {
    this->initializeModel();
}

OAIBotProperties::~OAIBotProperties() {}

void OAIBotProperties::initializeModel() {

    m_configured_channels_isSet = false;
    m_configured_channels_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_developer_app_insight_key_isSet = false;
    m_developer_app_insight_key_isValid = false;

    m_developer_app_insights_api_key_isSet = false;
    m_developer_app_insights_api_key_isValid = false;

    m_developer_app_insights_application_id_isSet = false;
    m_developer_app_insights_application_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enabled_channels_isSet = false;
    m_enabled_channels_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_endpoint_version_isSet = false;
    m_endpoint_version_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_luis_app_ids_isSet = false;
    m_luis_app_ids_isValid = false;

    m_luis_key_isSet = false;
    m_luis_key_isValid = false;

    m_msa_app_id_isSet = false;
    m_msa_app_id_isValid = false;
}

void OAIBotProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBotProperties::fromJsonObject(QJsonObject json) {

    m_configured_channels_isValid = ::OpenAPI::fromJsonValue(m_configured_channels, json[QString("configuredChannels")]);
    m_configured_channels_isSet = !json[QString("configuredChannels")].isNull() && m_configured_channels_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_developer_app_insight_key_isValid = ::OpenAPI::fromJsonValue(m_developer_app_insight_key, json[QString("developerAppInsightKey")]);
    m_developer_app_insight_key_isSet = !json[QString("developerAppInsightKey")].isNull() && m_developer_app_insight_key_isValid;

    m_developer_app_insights_api_key_isValid = ::OpenAPI::fromJsonValue(m_developer_app_insights_api_key, json[QString("developerAppInsightsApiKey")]);
    m_developer_app_insights_api_key_isSet = !json[QString("developerAppInsightsApiKey")].isNull() && m_developer_app_insights_api_key_isValid;

    m_developer_app_insights_application_id_isValid = ::OpenAPI::fromJsonValue(m_developer_app_insights_application_id, json[QString("developerAppInsightsApplicationId")]);
    m_developer_app_insights_application_id_isSet = !json[QString("developerAppInsightsApplicationId")].isNull() && m_developer_app_insights_application_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enabled_channels_isValid = ::OpenAPI::fromJsonValue(m_enabled_channels, json[QString("enabledChannels")]);
    m_enabled_channels_isSet = !json[QString("enabledChannels")].isNull() && m_enabled_channels_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_endpoint_version_isValid = ::OpenAPI::fromJsonValue(m_endpoint_version, json[QString("endpointVersion")]);
    m_endpoint_version_isSet = !json[QString("endpointVersion")].isNull() && m_endpoint_version_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_luis_app_ids_isValid = ::OpenAPI::fromJsonValue(m_luis_app_ids, json[QString("luisAppIds")]);
    m_luis_app_ids_isSet = !json[QString("luisAppIds")].isNull() && m_luis_app_ids_isValid;

    m_luis_key_isValid = ::OpenAPI::fromJsonValue(m_luis_key, json[QString("luisKey")]);
    m_luis_key_isSet = !json[QString("luisKey")].isNull() && m_luis_key_isValid;

    m_msa_app_id_isValid = ::OpenAPI::fromJsonValue(m_msa_app_id, json[QString("msaAppId")]);
    m_msa_app_id_isSet = !json[QString("msaAppId")].isNull() && m_msa_app_id_isValid;
}

QString OAIBotProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBotProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_configured_channels.size() > 0) {
        obj.insert(QString("configuredChannels"), ::OpenAPI::toJsonValue(m_configured_channels));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_developer_app_insight_key_isSet) {
        obj.insert(QString("developerAppInsightKey"), ::OpenAPI::toJsonValue(m_developer_app_insight_key));
    }
    if (m_developer_app_insights_api_key_isSet) {
        obj.insert(QString("developerAppInsightsApiKey"), ::OpenAPI::toJsonValue(m_developer_app_insights_api_key));
    }
    if (m_developer_app_insights_application_id_isSet) {
        obj.insert(QString("developerAppInsightsApplicationId"), ::OpenAPI::toJsonValue(m_developer_app_insights_application_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enabled_channels.size() > 0) {
        obj.insert(QString("enabledChannels"), ::OpenAPI::toJsonValue(m_enabled_channels));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_endpoint_version_isSet) {
        obj.insert(QString("endpointVersion"), ::OpenAPI::toJsonValue(m_endpoint_version));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_luis_app_ids.size() > 0) {
        obj.insert(QString("luisAppIds"), ::OpenAPI::toJsonValue(m_luis_app_ids));
    }
    if (m_luis_key_isSet) {
        obj.insert(QString("luisKey"), ::OpenAPI::toJsonValue(m_luis_key));
    }
    if (m_msa_app_id_isSet) {
        obj.insert(QString("msaAppId"), ::OpenAPI::toJsonValue(m_msa_app_id));
    }
    return obj;
}

QList<QString> OAIBotProperties::getConfiguredChannels() const {
    return m_configured_channels;
}
void OAIBotProperties::setConfiguredChannels(const QList<QString> &configured_channels) {
    m_configured_channels = configured_channels;
    m_configured_channels_isSet = true;
}

bool OAIBotProperties::is_configured_channels_Set() const{
    return m_configured_channels_isSet;
}

bool OAIBotProperties::is_configured_channels_Valid() const{
    return m_configured_channels_isValid;
}

QString OAIBotProperties::getDescription() const {
    return m_description;
}
void OAIBotProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBotProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBotProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBotProperties::getDeveloperAppInsightKey() const {
    return m_developer_app_insight_key;
}
void OAIBotProperties::setDeveloperAppInsightKey(const QString &developer_app_insight_key) {
    m_developer_app_insight_key = developer_app_insight_key;
    m_developer_app_insight_key_isSet = true;
}

bool OAIBotProperties::is_developer_app_insight_key_Set() const{
    return m_developer_app_insight_key_isSet;
}

bool OAIBotProperties::is_developer_app_insight_key_Valid() const{
    return m_developer_app_insight_key_isValid;
}

QString OAIBotProperties::getDeveloperAppInsightsApiKey() const {
    return m_developer_app_insights_api_key;
}
void OAIBotProperties::setDeveloperAppInsightsApiKey(const QString &developer_app_insights_api_key) {
    m_developer_app_insights_api_key = developer_app_insights_api_key;
    m_developer_app_insights_api_key_isSet = true;
}

bool OAIBotProperties::is_developer_app_insights_api_key_Set() const{
    return m_developer_app_insights_api_key_isSet;
}

bool OAIBotProperties::is_developer_app_insights_api_key_Valid() const{
    return m_developer_app_insights_api_key_isValid;
}

QString OAIBotProperties::getDeveloperAppInsightsApplicationId() const {
    return m_developer_app_insights_application_id;
}
void OAIBotProperties::setDeveloperAppInsightsApplicationId(const QString &developer_app_insights_application_id) {
    m_developer_app_insights_application_id = developer_app_insights_application_id;
    m_developer_app_insights_application_id_isSet = true;
}

bool OAIBotProperties::is_developer_app_insights_application_id_Set() const{
    return m_developer_app_insights_application_id_isSet;
}

bool OAIBotProperties::is_developer_app_insights_application_id_Valid() const{
    return m_developer_app_insights_application_id_isValid;
}

QString OAIBotProperties::getDisplayName() const {
    return m_display_name;
}
void OAIBotProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIBotProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIBotProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIBotProperties::getEnabledChannels() const {
    return m_enabled_channels;
}
void OAIBotProperties::setEnabledChannels(const QList<QString> &enabled_channels) {
    m_enabled_channels = enabled_channels;
    m_enabled_channels_isSet = true;
}

bool OAIBotProperties::is_enabled_channels_Set() const{
    return m_enabled_channels_isSet;
}

bool OAIBotProperties::is_enabled_channels_Valid() const{
    return m_enabled_channels_isValid;
}

QString OAIBotProperties::getEndpoint() const {
    return m_endpoint;
}
void OAIBotProperties::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIBotProperties::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIBotProperties::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIBotProperties::getEndpointVersion() const {
    return m_endpoint_version;
}
void OAIBotProperties::setEndpointVersion(const QString &endpoint_version) {
    m_endpoint_version = endpoint_version;
    m_endpoint_version_isSet = true;
}

bool OAIBotProperties::is_endpoint_version_Set() const{
    return m_endpoint_version_isSet;
}

bool OAIBotProperties::is_endpoint_version_Valid() const{
    return m_endpoint_version_isValid;
}

QString OAIBotProperties::getIconUrl() const {
    return m_icon_url;
}
void OAIBotProperties::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIBotProperties::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIBotProperties::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QList<QString> OAIBotProperties::getLuisAppIds() const {
    return m_luis_app_ids;
}
void OAIBotProperties::setLuisAppIds(const QList<QString> &luis_app_ids) {
    m_luis_app_ids = luis_app_ids;
    m_luis_app_ids_isSet = true;
}

bool OAIBotProperties::is_luis_app_ids_Set() const{
    return m_luis_app_ids_isSet;
}

bool OAIBotProperties::is_luis_app_ids_Valid() const{
    return m_luis_app_ids_isValid;
}

QString OAIBotProperties::getLuisKey() const {
    return m_luis_key;
}
void OAIBotProperties::setLuisKey(const QString &luis_key) {
    m_luis_key = luis_key;
    m_luis_key_isSet = true;
}

bool OAIBotProperties::is_luis_key_Set() const{
    return m_luis_key_isSet;
}

bool OAIBotProperties::is_luis_key_Valid() const{
    return m_luis_key_isValid;
}

QString OAIBotProperties::getMsaAppId() const {
    return m_msa_app_id;
}
void OAIBotProperties::setMsaAppId(const QString &msa_app_id) {
    m_msa_app_id = msa_app_id;
    m_msa_app_id_isSet = true;
}

bool OAIBotProperties::is_msa_app_id_Set() const{
    return m_msa_app_id_isSet;
}

bool OAIBotProperties::is_msa_app_id_Valid() const{
    return m_msa_app_id_isValid;
}

bool OAIBotProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configured_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_app_insight_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_app_insights_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_app_insights_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_luis_app_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_luis_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msa_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBotProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_endpoint_isValid && m_msa_app_id_isValid && true;
}

} // namespace OpenAPI
