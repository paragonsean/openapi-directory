/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceProviderProperties.h
 *
 * The Object used to describe a Service Provider supported by Bot Service
 */

#ifndef OAIServiceProviderProperties_H
#define OAIServiceProviderProperties_H

#include <QJsonObject>

#include "OAIServiceProviderParameter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIServiceProviderParameter;

class OAIServiceProviderProperties : public OAIObject {
public:
    OAIServiceProviderProperties();
    OAIServiceProviderProperties(QString json);
    ~OAIServiceProviderProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDevPortalUrl() const;
    void setDevPortalUrl(const QString &dev_portal_url);
    bool is_dev_portal_url_Set() const;
    bool is_dev_portal_url_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getIconUrl() const;
    void setIconUrl(const QString &icon_url);
    bool is_icon_url_Set() const;
    bool is_icon_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIServiceProviderParameter> getParameters() const;
    void setParameters(const QList<OAIServiceProviderParameter> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getServiceProviderName() const;
    void setServiceProviderName(const QString &service_provider_name);
    bool is_service_provider_name_Set() const;
    bool is_service_provider_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dev_portal_url;
    bool m_dev_portal_url_isSet;
    bool m_dev_portal_url_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_icon_url;
    bool m_icon_url_isSet;
    bool m_icon_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIServiceProviderParameter> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_service_provider_name;
    bool m_service_provider_name_isSet;
    bool m_service_provider_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceProviderProperties)

#endif // OAIServiceProviderProperties_H
