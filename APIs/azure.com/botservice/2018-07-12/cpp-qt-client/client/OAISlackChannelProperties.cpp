/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlackChannelProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlackChannelProperties::OAISlackChannelProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlackChannelProperties::OAISlackChannelProperties() {
    this->initializeModel();
}

OAISlackChannelProperties::~OAISlackChannelProperties() {}

void OAISlackChannelProperties::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_is_validated_isSet = false;
    m_is_validated_isValid = false;

    m_landing_page_url_isSet = false;
    m_landing_page_url_isValid = false;

    m_last_submission_id_isSet = false;
    m_last_submission_id_isValid = false;

    m_redirect_action_isSet = false;
    m_redirect_action_isValid = false;

    m_register_before_o_auth_flow_isSet = false;
    m_register_before_o_auth_flow_isValid = false;

    m_verification_token_isSet = false;
    m_verification_token_isValid = false;
}

void OAISlackChannelProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlackChannelProperties::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_is_validated_isValid = ::OpenAPI::fromJsonValue(m_is_validated, json[QString("isValidated")]);
    m_is_validated_isSet = !json[QString("isValidated")].isNull() && m_is_validated_isValid;

    m_landing_page_url_isValid = ::OpenAPI::fromJsonValue(m_landing_page_url, json[QString("landingPageUrl")]);
    m_landing_page_url_isSet = !json[QString("landingPageUrl")].isNull() && m_landing_page_url_isValid;

    m_last_submission_id_isValid = ::OpenAPI::fromJsonValue(m_last_submission_id, json[QString("lastSubmissionId")]);
    m_last_submission_id_isSet = !json[QString("lastSubmissionId")].isNull() && m_last_submission_id_isValid;

    m_redirect_action_isValid = ::OpenAPI::fromJsonValue(m_redirect_action, json[QString("redirectAction")]);
    m_redirect_action_isSet = !json[QString("redirectAction")].isNull() && m_redirect_action_isValid;

    m_register_before_o_auth_flow_isValid = ::OpenAPI::fromJsonValue(m_register_before_o_auth_flow, json[QString("registerBeforeOAuthFlow")]);
    m_register_before_o_auth_flow_isSet = !json[QString("registerBeforeOAuthFlow")].isNull() && m_register_before_o_auth_flow_isValid;

    m_verification_token_isValid = ::OpenAPI::fromJsonValue(m_verification_token, json[QString("verificationToken")]);
    m_verification_token_isSet = !json[QString("verificationToken")].isNull() && m_verification_token_isValid;
}

QString OAISlackChannelProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlackChannelProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_is_validated_isSet) {
        obj.insert(QString("isValidated"), ::OpenAPI::toJsonValue(m_is_validated));
    }
    if (m_landing_page_url_isSet) {
        obj.insert(QString("landingPageUrl"), ::OpenAPI::toJsonValue(m_landing_page_url));
    }
    if (m_last_submission_id_isSet) {
        obj.insert(QString("lastSubmissionId"), ::OpenAPI::toJsonValue(m_last_submission_id));
    }
    if (m_redirect_action_isSet) {
        obj.insert(QString("redirectAction"), ::OpenAPI::toJsonValue(m_redirect_action));
    }
    if (m_register_before_o_auth_flow_isSet) {
        obj.insert(QString("registerBeforeOAuthFlow"), ::OpenAPI::toJsonValue(m_register_before_o_auth_flow));
    }
    if (m_verification_token_isSet) {
        obj.insert(QString("verificationToken"), ::OpenAPI::toJsonValue(m_verification_token));
    }
    return obj;
}

QString OAISlackChannelProperties::getClientId() const {
    return m_client_id;
}
void OAISlackChannelProperties::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAISlackChannelProperties::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAISlackChannelProperties::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAISlackChannelProperties::getClientSecret() const {
    return m_client_secret;
}
void OAISlackChannelProperties::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAISlackChannelProperties::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAISlackChannelProperties::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

bool OAISlackChannelProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAISlackChannelProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAISlackChannelProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAISlackChannelProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

bool OAISlackChannelProperties::isIsValidated() const {
    return m_is_validated;
}
void OAISlackChannelProperties::setIsValidated(const bool &is_validated) {
    m_is_validated = is_validated;
    m_is_validated_isSet = true;
}

bool OAISlackChannelProperties::is_is_validated_Set() const{
    return m_is_validated_isSet;
}

bool OAISlackChannelProperties::is_is_validated_Valid() const{
    return m_is_validated_isValid;
}

QString OAISlackChannelProperties::getLandingPageUrl() const {
    return m_landing_page_url;
}
void OAISlackChannelProperties::setLandingPageUrl(const QString &landing_page_url) {
    m_landing_page_url = landing_page_url;
    m_landing_page_url_isSet = true;
}

bool OAISlackChannelProperties::is_landing_page_url_Set() const{
    return m_landing_page_url_isSet;
}

bool OAISlackChannelProperties::is_landing_page_url_Valid() const{
    return m_landing_page_url_isValid;
}

QString OAISlackChannelProperties::getLastSubmissionId() const {
    return m_last_submission_id;
}
void OAISlackChannelProperties::setLastSubmissionId(const QString &last_submission_id) {
    m_last_submission_id = last_submission_id;
    m_last_submission_id_isSet = true;
}

bool OAISlackChannelProperties::is_last_submission_id_Set() const{
    return m_last_submission_id_isSet;
}

bool OAISlackChannelProperties::is_last_submission_id_Valid() const{
    return m_last_submission_id_isValid;
}

QString OAISlackChannelProperties::getRedirectAction() const {
    return m_redirect_action;
}
void OAISlackChannelProperties::setRedirectAction(const QString &redirect_action) {
    m_redirect_action = redirect_action;
    m_redirect_action_isSet = true;
}

bool OAISlackChannelProperties::is_redirect_action_Set() const{
    return m_redirect_action_isSet;
}

bool OAISlackChannelProperties::is_redirect_action_Valid() const{
    return m_redirect_action_isValid;
}

bool OAISlackChannelProperties::isRegisterBeforeOAuthFlow() const {
    return m_register_before_o_auth_flow;
}
void OAISlackChannelProperties::setRegisterBeforeOAuthFlow(const bool &register_before_o_auth_flow) {
    m_register_before_o_auth_flow = register_before_o_auth_flow;
    m_register_before_o_auth_flow_isSet = true;
}

bool OAISlackChannelProperties::is_register_before_o_auth_flow_Set() const{
    return m_register_before_o_auth_flow_isSet;
}

bool OAISlackChannelProperties::is_register_before_o_auth_flow_Valid() const{
    return m_register_before_o_auth_flow_isValid;
}

QString OAISlackChannelProperties::getVerificationToken() const {
    return m_verification_token;
}
void OAISlackChannelProperties::setVerificationToken(const QString &verification_token) {
    m_verification_token = verification_token;
    m_verification_token_isSet = true;
}

bool OAISlackChannelProperties::is_verification_token_Set() const{
    return m_verification_token_isSet;
}

bool OAISlackChannelProperties::is_verification_token_Valid() const{
    return m_verification_token_isValid;
}

bool OAISlackChannelProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_validated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landing_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_submission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_register_before_o_auth_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlackChannelProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_secret_isValid && m_is_enabled_isValid && m_verification_token_isValid && true;
}

} // namespace OpenAPI
