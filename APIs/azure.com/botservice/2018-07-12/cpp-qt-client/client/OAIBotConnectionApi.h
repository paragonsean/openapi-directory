/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBotConnectionApi_H
#define OAI_OAIBotConnectionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionSetting.h"
#include "OAIConnectionSettingResponseList.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBotConnectionApi : public QObject {
    Q_OBJECT

public:
    OAIBotConnectionApi(const int timeOut = 0);
    ~OAIBotConnectionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConnectionSetting [required]
    */
    virtual void botConnectionCreate(const QString &resource_group_name, const QString &resource_name, const QString &connection_name, const QString &api_version, const QString &subscription_id, const OAIConnectionSetting &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void botConnectionDelete(const QString &resource_group_name, const QString &resource_name, const QString &connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void botConnectionGet(const QString &resource_group_name, const QString &resource_name, const QString &connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void botConnectionListByBotService(const QString &resource_group_name, const QString &resource_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void botConnectionListWithSecrets(const QString &resource_group_name, const QString &resource_name, const QString &connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConnectionSetting [required]
    */
    virtual void botConnectionUpdate(const QString &resource_group_name, const QString &resource_name, const QString &connection_name, const QString &api_version, const QString &subscription_id, const OAIConnectionSetting &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void botConnectionCreateCallback(OAIHttpRequestWorker *worker);
    void botConnectionDeleteCallback(OAIHttpRequestWorker *worker);
    void botConnectionGetCallback(OAIHttpRequestWorker *worker);
    void botConnectionListByBotServiceCallback(OAIHttpRequestWorker *worker);
    void botConnectionListWithSecretsCallback(OAIHttpRequestWorker *worker);
    void botConnectionUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void botConnectionCreateSignal(OAIConnectionSetting summary);
    void botConnectionDeleteSignal();
    void botConnectionGetSignal(OAIConnectionSetting summary);
    void botConnectionListByBotServiceSignal(OAIConnectionSettingResponseList summary);
    void botConnectionListWithSecretsSignal(OAIConnectionSetting summary);
    void botConnectionUpdateSignal(OAIConnectionSetting summary);


    void botConnectionCreateSignalFull(OAIHttpRequestWorker *worker, OAIConnectionSetting summary);
    void botConnectionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void botConnectionGetSignalFull(OAIHttpRequestWorker *worker, OAIConnectionSetting summary);
    void botConnectionListByBotServiceSignalFull(OAIHttpRequestWorker *worker, OAIConnectionSettingResponseList summary);
    void botConnectionListWithSecretsSignalFull(OAIHttpRequestWorker *worker, OAIConnectionSetting summary);
    void botConnectionUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConnectionSetting summary);

    Q_DECL_DEPRECATED_X("Use botConnectionCreateSignalError() instead")
    void botConnectionCreateSignalE(OAIConnectionSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionCreateSignalError(OAIConnectionSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionDeleteSignalError() instead")
    void botConnectionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionGetSignalError() instead")
    void botConnectionGetSignalE(OAIConnectionSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionGetSignalError(OAIConnectionSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionListByBotServiceSignalError() instead")
    void botConnectionListByBotServiceSignalE(OAIConnectionSettingResponseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionListByBotServiceSignalError(OAIConnectionSettingResponseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionListWithSecretsSignalError() instead")
    void botConnectionListWithSecretsSignalE(OAIConnectionSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionListWithSecretsSignalError(OAIConnectionSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionUpdateSignalError() instead")
    void botConnectionUpdateSignalE(OAIConnectionSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionUpdateSignalError(OAIConnectionSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use botConnectionCreateSignalErrorFull() instead")
    void botConnectionCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionDeleteSignalErrorFull() instead")
    void botConnectionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionGetSignalErrorFull() instead")
    void botConnectionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionListByBotServiceSignalErrorFull() instead")
    void botConnectionListByBotServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionListByBotServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionListWithSecretsSignalErrorFull() instead")
    void botConnectionListWithSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionListWithSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botConnectionUpdateSignalErrorFull() instead")
    void botConnectionUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botConnectionUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
