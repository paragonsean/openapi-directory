/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnterpriseChannelApi_H
#define OAI_OAIEnterpriseChannelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEnterpriseChannel.h"
#include "OAIEnterpriseChannelCheckNameAvailabilityRequest.h"
#include "OAIEnterpriseChannelCheckNameAvailabilityResponse.h"
#include "OAIEnterpriseChannelResponseList.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnterpriseChannelApi : public QObject {
    Q_OBJECT

public:
    OAIEnterpriseChannelApi(const int timeOut = 0);
    ~OAIEnterpriseChannelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIEnterpriseChannelCheckNameAvailabilityRequest [required]
    */
    virtual void enterpriseChannelsCheckNameAvailability(const QString &api_version, const OAIEnterpriseChannelCheckNameAvailabilityRequest &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIEnterpriseChannel [required]
    */
    virtual void enterpriseChannelsCreate(const QString &resource_group_name, const QString &resource_name, const QString &api_version, const QString &subscription_id, const OAIEnterpriseChannel &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void enterpriseChannelsDelete(const QString &resource_group_name, const QString &resource_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void enterpriseChannelsGet(const QString &resource_group_name, const QString &resource_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void enterpriseChannelsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIEnterpriseChannel [required]
    */
    virtual void enterpriseChannelsUpdate(const QString &resource_group_name, const QString &resource_name, const QString &api_version, const QString &subscription_id, const OAIEnterpriseChannel &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void enterpriseChannelsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void enterpriseChannelsCreateCallback(OAIHttpRequestWorker *worker);
    void enterpriseChannelsDeleteCallback(OAIHttpRequestWorker *worker);
    void enterpriseChannelsGetCallback(OAIHttpRequestWorker *worker);
    void enterpriseChannelsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void enterpriseChannelsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void enterpriseChannelsCheckNameAvailabilitySignal(OAIEnterpriseChannelCheckNameAvailabilityResponse summary);
    void enterpriseChannelsCreateSignal(OAIEnterpriseChannel summary);
    void enterpriseChannelsDeleteSignal();
    void enterpriseChannelsGetSignal(OAIEnterpriseChannel summary);
    void enterpriseChannelsListByResourceGroupSignal(OAIEnterpriseChannelResponseList summary);
    void enterpriseChannelsUpdateSignal(OAIEnterpriseChannel summary);


    void enterpriseChannelsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIEnterpriseChannelCheckNameAvailabilityResponse summary);
    void enterpriseChannelsCreateSignalFull(OAIHttpRequestWorker *worker, OAIEnterpriseChannel summary);
    void enterpriseChannelsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseChannelsGetSignalFull(OAIHttpRequestWorker *worker, OAIEnterpriseChannel summary);
    void enterpriseChannelsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIEnterpriseChannelResponseList summary);
    void enterpriseChannelsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEnterpriseChannel summary);

    Q_DECL_DEPRECATED_X("Use enterpriseChannelsCheckNameAvailabilitySignalError() instead")
    void enterpriseChannelsCheckNameAvailabilitySignalE(OAIEnterpriseChannelCheckNameAvailabilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsCheckNameAvailabilitySignalError(OAIEnterpriseChannelCheckNameAvailabilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsCreateSignalError() instead")
    void enterpriseChannelsCreateSignalE(OAIEnterpriseChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsCreateSignalError(OAIEnterpriseChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsDeleteSignalError() instead")
    void enterpriseChannelsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsGetSignalError() instead")
    void enterpriseChannelsGetSignalE(OAIEnterpriseChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsGetSignalError(OAIEnterpriseChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsListByResourceGroupSignalError() instead")
    void enterpriseChannelsListByResourceGroupSignalE(OAIEnterpriseChannelResponseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsListByResourceGroupSignalError(OAIEnterpriseChannelResponseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsUpdateSignalError() instead")
    void enterpriseChannelsUpdateSignalE(OAIEnterpriseChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsUpdateSignalError(OAIEnterpriseChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use enterpriseChannelsCheckNameAvailabilitySignalErrorFull() instead")
    void enterpriseChannelsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsCreateSignalErrorFull() instead")
    void enterpriseChannelsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsDeleteSignalErrorFull() instead")
    void enterpriseChannelsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsGetSignalErrorFull() instead")
    void enterpriseChannelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsListByResourceGroupSignalErrorFull() instead")
    void enterpriseChannelsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseChannelsUpdateSignalErrorFull() instead")
    void enterpriseChannelsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseChannelsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
