/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKikChannelProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKikChannelProperties::OAIKikChannelProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKikChannelProperties::OAIKikChannelProperties() {
    this->initializeModel();
}

OAIKikChannelProperties::~OAIKikChannelProperties() {}

void OAIKikChannelProperties::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_is_validated_isSet = false;
    m_is_validated_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIKikChannelProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKikChannelProperties::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_is_validated_isValid = ::OpenAPI::fromJsonValue(m_is_validated, json[QString("isValidated")]);
    m_is_validated_isSet = !json[QString("isValidated")].isNull() && m_is_validated_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIKikChannelProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKikChannelProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_is_validated_isSet) {
        obj.insert(QString("isValidated"), ::OpenAPI::toJsonValue(m_is_validated));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIKikChannelProperties::getApiKey() const {
    return m_api_key;
}
void OAIKikChannelProperties::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIKikChannelProperties::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIKikChannelProperties::is_api_key_Valid() const{
    return m_api_key_isValid;
}

bool OAIKikChannelProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAIKikChannelProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIKikChannelProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIKikChannelProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

bool OAIKikChannelProperties::isIsValidated() const {
    return m_is_validated;
}
void OAIKikChannelProperties::setIsValidated(const bool &is_validated) {
    m_is_validated = is_validated;
    m_is_validated_isSet = true;
}

bool OAIKikChannelProperties::is_is_validated_Set() const{
    return m_is_validated_isSet;
}

bool OAIKikChannelProperties::is_is_validated_Valid() const{
    return m_is_validated_isValid;
}

QString OAIKikChannelProperties::getUserName() const {
    return m_user_name;
}
void OAIKikChannelProperties::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIKikChannelProperties::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIKikChannelProperties::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIKikChannelProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_validated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKikChannelProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_key_isValid && m_is_enabled_isValid && m_user_name_isValid && true;
}

} // namespace OpenAPI
