/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceProviderProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceProviderProperties::OAIServiceProviderProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceProviderProperties::OAIServiceProviderProperties() {
    this->initializeModel();
}

OAIServiceProviderProperties::~OAIServiceProviderProperties() {}

void OAIServiceProviderProperties::initializeModel() {

    m_dev_portal_url_isSet = false;
    m_dev_portal_url_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_service_provider_name_isSet = false;
    m_service_provider_name_isValid = false;
}

void OAIServiceProviderProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceProviderProperties::fromJsonObject(QJsonObject json) {

    m_dev_portal_url_isValid = ::OpenAPI::fromJsonValue(m_dev_portal_url, json[QString("devPortalUrl")]);
    m_dev_portal_url_isSet = !json[QString("devPortalUrl")].isNull() && m_dev_portal_url_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_service_provider_name_isValid = ::OpenAPI::fromJsonValue(m_service_provider_name, json[QString("serviceProviderName")]);
    m_service_provider_name_isSet = !json[QString("serviceProviderName")].isNull() && m_service_provider_name_isValid;
}

QString OAIServiceProviderProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceProviderProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_dev_portal_url_isSet) {
        obj.insert(QString("devPortalUrl"), ::OpenAPI::toJsonValue(m_dev_portal_url));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_service_provider_name_isSet) {
        obj.insert(QString("serviceProviderName"), ::OpenAPI::toJsonValue(m_service_provider_name));
    }
    return obj;
}

QString OAIServiceProviderProperties::getDevPortalUrl() const {
    return m_dev_portal_url;
}
void OAIServiceProviderProperties::setDevPortalUrl(const QString &dev_portal_url) {
    m_dev_portal_url = dev_portal_url;
    m_dev_portal_url_isSet = true;
}

bool OAIServiceProviderProperties::is_dev_portal_url_Set() const{
    return m_dev_portal_url_isSet;
}

bool OAIServiceProviderProperties::is_dev_portal_url_Valid() const{
    return m_dev_portal_url_isValid;
}

QString OAIServiceProviderProperties::getDisplayName() const {
    return m_display_name;
}
void OAIServiceProviderProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIServiceProviderProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIServiceProviderProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIServiceProviderProperties::getIconUrl() const {
    return m_icon_url;
}
void OAIServiceProviderProperties::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIServiceProviderProperties::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIServiceProviderProperties::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIServiceProviderProperties::getId() const {
    return m_id;
}
void OAIServiceProviderProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceProviderProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceProviderProperties::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIServiceProviderParameter> OAIServiceProviderProperties::getParameters() const {
    return m_parameters;
}
void OAIServiceProviderProperties::setParameters(const QList<OAIServiceProviderParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIServiceProviderProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIServiceProviderProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIServiceProviderProperties::getServiceProviderName() const {
    return m_service_provider_name;
}
void OAIServiceProviderProperties::setServiceProviderName(const QString &service_provider_name) {
    m_service_provider_name = service_provider_name;
    m_service_provider_name_isSet = true;
}

bool OAIServiceProviderProperties::is_service_provider_name_Set() const{
    return m_service_provider_name_isSet;
}

bool OAIServiceProviderProperties::is_service_provider_name_Valid() const{
    return m_service_provider_name_isValid;
}

bool OAIServiceProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dev_portal_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceProviderProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
