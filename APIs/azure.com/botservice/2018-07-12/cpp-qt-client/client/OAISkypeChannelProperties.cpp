/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkypeChannelProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkypeChannelProperties::OAISkypeChannelProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkypeChannelProperties::OAISkypeChannelProperties() {
    this->initializeModel();
}

OAISkypeChannelProperties::~OAISkypeChannelProperties() {}

void OAISkypeChannelProperties::initializeModel() {

    m_calling_web_hook_isSet = false;
    m_calling_web_hook_isValid = false;

    m_enable_calling_isSet = false;
    m_enable_calling_isValid = false;

    m_enable_groups_isSet = false;
    m_enable_groups_isValid = false;

    m_enable_media_cards_isSet = false;
    m_enable_media_cards_isValid = false;

    m_enable_messaging_isSet = false;
    m_enable_messaging_isValid = false;

    m_enable_screen_sharing_isSet = false;
    m_enable_screen_sharing_isValid = false;

    m_enable_video_isSet = false;
    m_enable_video_isValid = false;

    m_groups_mode_isSet = false;
    m_groups_mode_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;
}

void OAISkypeChannelProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkypeChannelProperties::fromJsonObject(QJsonObject json) {

    m_calling_web_hook_isValid = ::OpenAPI::fromJsonValue(m_calling_web_hook, json[QString("callingWebHook")]);
    m_calling_web_hook_isSet = !json[QString("callingWebHook")].isNull() && m_calling_web_hook_isValid;

    m_enable_calling_isValid = ::OpenAPI::fromJsonValue(m_enable_calling, json[QString("enableCalling")]);
    m_enable_calling_isSet = !json[QString("enableCalling")].isNull() && m_enable_calling_isValid;

    m_enable_groups_isValid = ::OpenAPI::fromJsonValue(m_enable_groups, json[QString("enableGroups")]);
    m_enable_groups_isSet = !json[QString("enableGroups")].isNull() && m_enable_groups_isValid;

    m_enable_media_cards_isValid = ::OpenAPI::fromJsonValue(m_enable_media_cards, json[QString("enableMediaCards")]);
    m_enable_media_cards_isSet = !json[QString("enableMediaCards")].isNull() && m_enable_media_cards_isValid;

    m_enable_messaging_isValid = ::OpenAPI::fromJsonValue(m_enable_messaging, json[QString("enableMessaging")]);
    m_enable_messaging_isSet = !json[QString("enableMessaging")].isNull() && m_enable_messaging_isValid;

    m_enable_screen_sharing_isValid = ::OpenAPI::fromJsonValue(m_enable_screen_sharing, json[QString("enableScreenSharing")]);
    m_enable_screen_sharing_isSet = !json[QString("enableScreenSharing")].isNull() && m_enable_screen_sharing_isValid;

    m_enable_video_isValid = ::OpenAPI::fromJsonValue(m_enable_video, json[QString("enableVideo")]);
    m_enable_video_isSet = !json[QString("enableVideo")].isNull() && m_enable_video_isValid;

    m_groups_mode_isValid = ::OpenAPI::fromJsonValue(m_groups_mode, json[QString("groupsMode")]);
    m_groups_mode_isSet = !json[QString("groupsMode")].isNull() && m_groups_mode_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;
}

QString OAISkypeChannelProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkypeChannelProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_calling_web_hook_isSet) {
        obj.insert(QString("callingWebHook"), ::OpenAPI::toJsonValue(m_calling_web_hook));
    }
    if (m_enable_calling_isSet) {
        obj.insert(QString("enableCalling"), ::OpenAPI::toJsonValue(m_enable_calling));
    }
    if (m_enable_groups_isSet) {
        obj.insert(QString("enableGroups"), ::OpenAPI::toJsonValue(m_enable_groups));
    }
    if (m_enable_media_cards_isSet) {
        obj.insert(QString("enableMediaCards"), ::OpenAPI::toJsonValue(m_enable_media_cards));
    }
    if (m_enable_messaging_isSet) {
        obj.insert(QString("enableMessaging"), ::OpenAPI::toJsonValue(m_enable_messaging));
    }
    if (m_enable_screen_sharing_isSet) {
        obj.insert(QString("enableScreenSharing"), ::OpenAPI::toJsonValue(m_enable_screen_sharing));
    }
    if (m_enable_video_isSet) {
        obj.insert(QString("enableVideo"), ::OpenAPI::toJsonValue(m_enable_video));
    }
    if (m_groups_mode_isSet) {
        obj.insert(QString("groupsMode"), ::OpenAPI::toJsonValue(m_groups_mode));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    return obj;
}

QString OAISkypeChannelProperties::getCallingWebHook() const {
    return m_calling_web_hook;
}
void OAISkypeChannelProperties::setCallingWebHook(const QString &calling_web_hook) {
    m_calling_web_hook = calling_web_hook;
    m_calling_web_hook_isSet = true;
}

bool OAISkypeChannelProperties::is_calling_web_hook_Set() const{
    return m_calling_web_hook_isSet;
}

bool OAISkypeChannelProperties::is_calling_web_hook_Valid() const{
    return m_calling_web_hook_isValid;
}

bool OAISkypeChannelProperties::isEnableCalling() const {
    return m_enable_calling;
}
void OAISkypeChannelProperties::setEnableCalling(const bool &enable_calling) {
    m_enable_calling = enable_calling;
    m_enable_calling_isSet = true;
}

bool OAISkypeChannelProperties::is_enable_calling_Set() const{
    return m_enable_calling_isSet;
}

bool OAISkypeChannelProperties::is_enable_calling_Valid() const{
    return m_enable_calling_isValid;
}

bool OAISkypeChannelProperties::isEnableGroups() const {
    return m_enable_groups;
}
void OAISkypeChannelProperties::setEnableGroups(const bool &enable_groups) {
    m_enable_groups = enable_groups;
    m_enable_groups_isSet = true;
}

bool OAISkypeChannelProperties::is_enable_groups_Set() const{
    return m_enable_groups_isSet;
}

bool OAISkypeChannelProperties::is_enable_groups_Valid() const{
    return m_enable_groups_isValid;
}

bool OAISkypeChannelProperties::isEnableMediaCards() const {
    return m_enable_media_cards;
}
void OAISkypeChannelProperties::setEnableMediaCards(const bool &enable_media_cards) {
    m_enable_media_cards = enable_media_cards;
    m_enable_media_cards_isSet = true;
}

bool OAISkypeChannelProperties::is_enable_media_cards_Set() const{
    return m_enable_media_cards_isSet;
}

bool OAISkypeChannelProperties::is_enable_media_cards_Valid() const{
    return m_enable_media_cards_isValid;
}

bool OAISkypeChannelProperties::isEnableMessaging() const {
    return m_enable_messaging;
}
void OAISkypeChannelProperties::setEnableMessaging(const bool &enable_messaging) {
    m_enable_messaging = enable_messaging;
    m_enable_messaging_isSet = true;
}

bool OAISkypeChannelProperties::is_enable_messaging_Set() const{
    return m_enable_messaging_isSet;
}

bool OAISkypeChannelProperties::is_enable_messaging_Valid() const{
    return m_enable_messaging_isValid;
}

bool OAISkypeChannelProperties::isEnableScreenSharing() const {
    return m_enable_screen_sharing;
}
void OAISkypeChannelProperties::setEnableScreenSharing(const bool &enable_screen_sharing) {
    m_enable_screen_sharing = enable_screen_sharing;
    m_enable_screen_sharing_isSet = true;
}

bool OAISkypeChannelProperties::is_enable_screen_sharing_Set() const{
    return m_enable_screen_sharing_isSet;
}

bool OAISkypeChannelProperties::is_enable_screen_sharing_Valid() const{
    return m_enable_screen_sharing_isValid;
}

bool OAISkypeChannelProperties::isEnableVideo() const {
    return m_enable_video;
}
void OAISkypeChannelProperties::setEnableVideo(const bool &enable_video) {
    m_enable_video = enable_video;
    m_enable_video_isSet = true;
}

bool OAISkypeChannelProperties::is_enable_video_Set() const{
    return m_enable_video_isSet;
}

bool OAISkypeChannelProperties::is_enable_video_Valid() const{
    return m_enable_video_isValid;
}

QString OAISkypeChannelProperties::getGroupsMode() const {
    return m_groups_mode;
}
void OAISkypeChannelProperties::setGroupsMode(const QString &groups_mode) {
    m_groups_mode = groups_mode;
    m_groups_mode_isSet = true;
}

bool OAISkypeChannelProperties::is_groups_mode_Set() const{
    return m_groups_mode_isSet;
}

bool OAISkypeChannelProperties::is_groups_mode_Valid() const{
    return m_groups_mode_isValid;
}

bool OAISkypeChannelProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAISkypeChannelProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAISkypeChannelProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAISkypeChannelProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

bool OAISkypeChannelProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calling_web_hook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_calling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_media_cards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_messaging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_screen_sharing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_video_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkypeChannelProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_enabled_isValid && true;
}

} // namespace OpenAPI
