/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseChannelNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseChannelNode::OAIEnterpriseChannelNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseChannelNode::OAIEnterpriseChannelNode() {
    this->initializeModel();
}

OAIEnterpriseChannelNode::~OAIEnterpriseChannelNode() {}

void OAIEnterpriseChannelNode::initializeModel() {

    m_azure_location_isSet = false;
    m_azure_location_isValid = false;

    m_azure_sku_isSet = false;
    m_azure_sku_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIEnterpriseChannelNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseChannelNode::fromJsonObject(QJsonObject json) {

    m_azure_location_isValid = ::OpenAPI::fromJsonValue(m_azure_location, json[QString("azureLocation")]);
    m_azure_location_isSet = !json[QString("azureLocation")].isNull() && m_azure_location_isValid;

    m_azure_sku_isValid = ::OpenAPI::fromJsonValue(m_azure_sku, json[QString("azureSku")]);
    m_azure_sku_isSet = !json[QString("azureSku")].isNull() && m_azure_sku_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIEnterpriseChannelNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseChannelNode::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_location_isSet) {
        obj.insert(QString("azureLocation"), ::OpenAPI::toJsonValue(m_azure_location));
    }
    if (m_azure_sku_isSet) {
        obj.insert(QString("azureSku"), ::OpenAPI::toJsonValue(m_azure_sku));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIEnterpriseChannelNode::getAzureLocation() const {
    return m_azure_location;
}
void OAIEnterpriseChannelNode::setAzureLocation(const QString &azure_location) {
    m_azure_location = azure_location;
    m_azure_location_isSet = true;
}

bool OAIEnterpriseChannelNode::is_azure_location_Set() const{
    return m_azure_location_isSet;
}

bool OAIEnterpriseChannelNode::is_azure_location_Valid() const{
    return m_azure_location_isValid;
}

QString OAIEnterpriseChannelNode::getAzureSku() const {
    return m_azure_sku;
}
void OAIEnterpriseChannelNode::setAzureSku(const QString &azure_sku) {
    m_azure_sku = azure_sku;
    m_azure_sku_isSet = true;
}

bool OAIEnterpriseChannelNode::is_azure_sku_Set() const{
    return m_azure_sku_isSet;
}

bool OAIEnterpriseChannelNode::is_azure_sku_Valid() const{
    return m_azure_sku_isValid;
}

QString OAIEnterpriseChannelNode::getId() const {
    return m_id;
}
void OAIEnterpriseChannelNode::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnterpriseChannelNode::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnterpriseChannelNode::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEnterpriseChannelNode::getName() const {
    return m_name;
}
void OAIEnterpriseChannelNode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnterpriseChannelNode::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnterpriseChannelNode::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnterpriseChannelNode::getState() const {
    return m_state;
}
void OAIEnterpriseChannelNode::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEnterpriseChannelNode::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEnterpriseChannelNode::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIEnterpriseChannelNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseChannelNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_azure_location_isValid && m_azure_sku_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
