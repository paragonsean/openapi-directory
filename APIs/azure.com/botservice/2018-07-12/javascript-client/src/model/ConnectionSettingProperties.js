/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionSettingParameter from './ConnectionSettingParameter';

/**
 * The ConnectionSettingProperties model module.
 * @module model/ConnectionSettingProperties
 * @version 2018-07-12
 */
class ConnectionSettingProperties {
    /**
     * Constructs a new <code>ConnectionSettingProperties</code>.
     * Properties for a Connection Setting Item
     * @alias module:model/ConnectionSettingProperties
     */
    constructor() { 
        
        ConnectionSettingProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionSettingProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionSettingProperties} obj Optional instance to populate.
     * @return {module:model/ConnectionSettingProperties} The populated <code>ConnectionSettingProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionSettingProperties();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ConnectionSettingParameter]);
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], 'String');
            }
            if (data.hasOwnProperty('serviceProviderDisplayName')) {
                obj['serviceProviderDisplayName'] = ApiClient.convertToType(data['serviceProviderDisplayName'], 'String');
            }
            if (data.hasOwnProperty('serviceProviderId')) {
                obj['serviceProviderId'] = ApiClient.convertToType(data['serviceProviderId'], 'String');
            }
            if (data.hasOwnProperty('settingId')) {
                obj['settingId'] = ApiClient.convertToType(data['settingId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionSettingProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionSettingProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ConnectionSettingParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['scopes'] && !(typeof data['scopes'] === 'string' || data['scopes'] instanceof String)) {
            throw new Error("Expected the field `scopes` to be a primitive type in the JSON string but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['serviceProviderDisplayName'] && !(typeof data['serviceProviderDisplayName'] === 'string' || data['serviceProviderDisplayName'] instanceof String)) {
            throw new Error("Expected the field `serviceProviderDisplayName` to be a primitive type in the JSON string but got " + data['serviceProviderDisplayName']);
        }
        // ensure the json data is a string
        if (data['serviceProviderId'] && !(typeof data['serviceProviderId'] === 'string' || data['serviceProviderId'] instanceof String)) {
            throw new Error("Expected the field `serviceProviderId` to be a primitive type in the JSON string but got " + data['serviceProviderId']);
        }
        // ensure the json data is a string
        if (data['settingId'] && !(typeof data['settingId'] === 'string' || data['settingId'] instanceof String)) {
            throw new Error("Expected the field `settingId` to be a primitive type in the JSON string but got " + data['settingId']);
        }

        return true;
    }


}



/**
 * Client Id associated with the Connection Setting.
 * @member {String} clientId
 */
ConnectionSettingProperties.prototype['clientId'] = undefined;

/**
 * Client Secret associated with the Connection Setting
 * @member {String} clientSecret
 */
ConnectionSettingProperties.prototype['clientSecret'] = undefined;

/**
 * Service Provider Parameters associated with the Connection Setting
 * @member {Array.<module:model/ConnectionSettingParameter>} parameters
 */
ConnectionSettingProperties.prototype['parameters'] = undefined;

/**
 * Scopes associated with the Connection Setting
 * @member {String} scopes
 */
ConnectionSettingProperties.prototype['scopes'] = undefined;

/**
 * Service Provider Display Name associated with the Connection Setting
 * @member {String} serviceProviderDisplayName
 */
ConnectionSettingProperties.prototype['serviceProviderDisplayName'] = undefined;

/**
 * Service Provider Id associated with the Connection Setting
 * @member {String} serviceProviderId
 */
ConnectionSettingProperties.prototype['serviceProviderId'] = undefined;

/**
 * Setting Id set by the service for the Connection Setting.
 * @member {String} settingId
 */
ConnectionSettingProperties.prototype['settingId'] = undefined;






export default ConnectionSettingProperties;

