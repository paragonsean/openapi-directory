/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FacebookPage from './FacebookPage';

/**
 * The FacebookChannelProperties model module.
 * @module model/FacebookChannelProperties
 * @version 2018-07-12
 */
class FacebookChannelProperties {
    /**
     * Constructs a new <code>FacebookChannelProperties</code>.
     * The parameters to provide for the Facebook channel.
     * @alias module:model/FacebookChannelProperties
     * @param appId {String} Facebook application id
     * @param appSecret {String} Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
     * @param isEnabled {Boolean} Whether this channel is enabled for the bot
     */
    constructor(appId, appSecret, isEnabled) { 
        
        FacebookChannelProperties.initialize(this, appId, appSecret, isEnabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, appSecret, isEnabled) { 
        obj['appId'] = appId;
        obj['appSecret'] = appSecret;
        obj['isEnabled'] = isEnabled;
    }

    /**
     * Constructs a <code>FacebookChannelProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FacebookChannelProperties} obj Optional instance to populate.
     * @return {module:model/FacebookChannelProperties} The populated <code>FacebookChannelProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FacebookChannelProperties();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('appSecret')) {
                obj['appSecret'] = ApiClient.convertToType(data['appSecret'], 'String');
            }
            if (data.hasOwnProperty('callbackUrl')) {
                obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], [FacebookPage]);
            }
            if (data.hasOwnProperty('verifyToken')) {
                obj['verifyToken'] = ApiClient.convertToType(data['verifyToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FacebookChannelProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FacebookChannelProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FacebookChannelProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['appSecret'] && !(typeof data['appSecret'] === 'string' || data['appSecret'] instanceof String)) {
            throw new Error("Expected the field `appSecret` to be a primitive type in the JSON string but got " + data['appSecret']);
        }
        // ensure the json data is a string
        if (data['callbackUrl'] && !(typeof data['callbackUrl'] === 'string' || data['callbackUrl'] instanceof String)) {
            throw new Error("Expected the field `callbackUrl` to be a primitive type in the JSON string but got " + data['callbackUrl']);
        }
        if (data['pages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pages'])) {
                throw new Error("Expected the field `pages` to be an array in the JSON data but got " + data['pages']);
            }
            // validate the optional field `pages` (array)
            for (const item of data['pages']) {
                FacebookPage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['verifyToken'] && !(typeof data['verifyToken'] === 'string' || data['verifyToken'] instanceof String)) {
            throw new Error("Expected the field `verifyToken` to be a primitive type in the JSON string but got " + data['verifyToken']);
        }

        return true;
    }


}

FacebookChannelProperties.RequiredProperties = ["appId", "appSecret", "isEnabled"];

/**
 * Facebook application id
 * @member {String} appId
 */
FacebookChannelProperties.prototype['appId'] = undefined;

/**
 * Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} appSecret
 */
FacebookChannelProperties.prototype['appSecret'] = undefined;

/**
 * Callback Url
 * @member {String} callbackUrl
 */
FacebookChannelProperties.prototype['callbackUrl'] = undefined;

/**
 * Whether this channel is enabled for the bot
 * @member {Boolean} isEnabled
 */
FacebookChannelProperties.prototype['isEnabled'] = undefined;

/**
 * The list of Facebook pages
 * @member {Array.<module:model/FacebookPage>} pages
 */
FacebookChannelProperties.prototype['pages'] = undefined;

/**
 * Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} verifyToken
 */
FacebookChannelProperties.prototype['verifyToken'] = undefined;






export default FacebookChannelProperties;

