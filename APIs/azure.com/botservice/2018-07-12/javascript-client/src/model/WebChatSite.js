/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebChatSite model module.
 * @module model/WebChatSite
 * @version 2018-07-12
 */
class WebChatSite {
    /**
     * Constructs a new <code>WebChatSite</code>.
     * A site for the Webchat channel
     * @alias module:model/WebChatSite
     * @param enablePreview {Boolean} Whether this site is enabled for preview versions of Webchat
     * @param isEnabled {Boolean} Whether this site is enabled for DirectLine channel
     * @param siteName {String} Site name
     */
    constructor(enablePreview, isEnabled, siteName) { 
        
        WebChatSite.initialize(this, enablePreview, isEnabled, siteName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enablePreview, isEnabled, siteName) { 
        obj['enablePreview'] = enablePreview;
        obj['isEnabled'] = isEnabled;
        obj['siteName'] = siteName;
    }

    /**
     * Constructs a <code>WebChatSite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebChatSite} obj Optional instance to populate.
     * @return {module:model/WebChatSite} The populated <code>WebChatSite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebChatSite();

            if (data.hasOwnProperty('enablePreview')) {
                obj['enablePreview'] = ApiClient.convertToType(data['enablePreview'], 'Boolean');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('key2')) {
                obj['key2'] = ApiClient.convertToType(data['key2'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'String');
            }
            if (data.hasOwnProperty('siteName')) {
                obj['siteName'] = ApiClient.convertToType(data['siteName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebChatSite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebChatSite</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebChatSite.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['key2'] && !(typeof data['key2'] === 'string' || data['key2'] instanceof String)) {
            throw new Error("Expected the field `key2` to be a primitive type in the JSON string but got " + data['key2']);
        }
        // ensure the json data is a string
        if (data['siteId'] && !(typeof data['siteId'] === 'string' || data['siteId'] instanceof String)) {
            throw new Error("Expected the field `siteId` to be a primitive type in the JSON string but got " + data['siteId']);
        }
        // ensure the json data is a string
        if (data['siteName'] && !(typeof data['siteName'] === 'string' || data['siteName'] instanceof String)) {
            throw new Error("Expected the field `siteName` to be a primitive type in the JSON string but got " + data['siteName']);
        }

        return true;
    }


}

WebChatSite.RequiredProperties = ["enablePreview", "isEnabled", "siteName"];

/**
 * Whether this site is enabled for preview versions of Webchat
 * @member {Boolean} enablePreview
 */
WebChatSite.prototype['enablePreview'] = undefined;

/**
 * Whether this site is enabled for DirectLine channel
 * @member {Boolean} isEnabled
 */
WebChatSite.prototype['isEnabled'] = undefined;

/**
 * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} key
 */
WebChatSite.prototype['key'] = undefined;

/**
 * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} key2
 */
WebChatSite.prototype['key2'] = undefined;

/**
 * Site Id
 * @member {String} siteId
 */
WebChatSite.prototype['siteId'] = undefined;

/**
 * Site name
 * @member {String} siteName
 */
WebChatSite.prototype['siteName'] = undefined;






export default WebChatSite;

