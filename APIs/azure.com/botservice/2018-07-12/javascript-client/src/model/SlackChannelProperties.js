/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SlackChannelProperties model module.
 * @module model/SlackChannelProperties
 * @version 2018-07-12
 */
class SlackChannelProperties {
    /**
     * Constructs a new <code>SlackChannelProperties</code>.
     * The parameters to provide for the Slack channel.
     * @alias module:model/SlackChannelProperties
     * @param clientId {String} The Slack client id
     * @param clientSecret {String} The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
     * @param isEnabled {Boolean} Whether this channel is enabled for the bot
     * @param verificationToken {String} The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
     */
    constructor(clientId, clientSecret, isEnabled, verificationToken) { 
        
        SlackChannelProperties.initialize(this, clientId, clientSecret, isEnabled, verificationToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientId, clientSecret, isEnabled, verificationToken) { 
        obj['clientId'] = clientId;
        obj['clientSecret'] = clientSecret;
        obj['isEnabled'] = isEnabled;
        obj['verificationToken'] = verificationToken;
    }

    /**
     * Constructs a <code>SlackChannelProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlackChannelProperties} obj Optional instance to populate.
     * @return {module:model/SlackChannelProperties} The populated <code>SlackChannelProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlackChannelProperties();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isValidated')) {
                obj['isValidated'] = ApiClient.convertToType(data['isValidated'], 'Boolean');
            }
            if (data.hasOwnProperty('landingPageUrl')) {
                obj['landingPageUrl'] = ApiClient.convertToType(data['landingPageUrl'], 'String');
            }
            if (data.hasOwnProperty('lastSubmissionId')) {
                obj['lastSubmissionId'] = ApiClient.convertToType(data['lastSubmissionId'], 'String');
            }
            if (data.hasOwnProperty('redirectAction')) {
                obj['redirectAction'] = ApiClient.convertToType(data['redirectAction'], 'String');
            }
            if (data.hasOwnProperty('registerBeforeOAuthFlow')) {
                obj['registerBeforeOAuthFlow'] = ApiClient.convertToType(data['registerBeforeOAuthFlow'], 'Boolean');
            }
            if (data.hasOwnProperty('verificationToken')) {
                obj['verificationToken'] = ApiClient.convertToType(data['verificationToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlackChannelProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlackChannelProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SlackChannelProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['landingPageUrl'] && !(typeof data['landingPageUrl'] === 'string' || data['landingPageUrl'] instanceof String)) {
            throw new Error("Expected the field `landingPageUrl` to be a primitive type in the JSON string but got " + data['landingPageUrl']);
        }
        // ensure the json data is a string
        if (data['lastSubmissionId'] && !(typeof data['lastSubmissionId'] === 'string' || data['lastSubmissionId'] instanceof String)) {
            throw new Error("Expected the field `lastSubmissionId` to be a primitive type in the JSON string but got " + data['lastSubmissionId']);
        }
        // ensure the json data is a string
        if (data['redirectAction'] && !(typeof data['redirectAction'] === 'string' || data['redirectAction'] instanceof String)) {
            throw new Error("Expected the field `redirectAction` to be a primitive type in the JSON string but got " + data['redirectAction']);
        }
        // ensure the json data is a string
        if (data['verificationToken'] && !(typeof data['verificationToken'] === 'string' || data['verificationToken'] instanceof String)) {
            throw new Error("Expected the field `verificationToken` to be a primitive type in the JSON string but got " + data['verificationToken']);
        }

        return true;
    }


}

SlackChannelProperties.RequiredProperties = ["clientId", "clientSecret", "isEnabled", "verificationToken"];

/**
 * The Slack client id
 * @member {String} clientId
 */
SlackChannelProperties.prototype['clientId'] = undefined;

/**
 * The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} clientSecret
 */
SlackChannelProperties.prototype['clientSecret'] = undefined;

/**
 * Whether this channel is enabled for the bot
 * @member {Boolean} isEnabled
 */
SlackChannelProperties.prototype['isEnabled'] = undefined;

/**
 * Whether this channel is validated for the bot
 * @member {Boolean} isValidated
 */
SlackChannelProperties.prototype['isValidated'] = undefined;

/**
 * The Slack landing page Url
 * @member {String} landingPageUrl
 */
SlackChannelProperties.prototype['landingPageUrl'] = undefined;

/**
 * The Sms auth token
 * @member {String} lastSubmissionId
 */
SlackChannelProperties.prototype['lastSubmissionId'] = undefined;

/**
 * The Slack redirect action
 * @member {String} redirectAction
 */
SlackChannelProperties.prototype['redirectAction'] = undefined;

/**
 * Whether to register the settings before OAuth validation is performed. Recommended to True.
 * @member {Boolean} registerBeforeOAuthFlow
 */
SlackChannelProperties.prototype['registerBeforeOAuthFlow'] = undefined;

/**
 * The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} verificationToken
 */
SlackChannelProperties.prototype['verificationToken'] = undefined;






export default SlackChannelProperties;

