/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SmsChannelProperties model module.
 * @module model/SmsChannelProperties
 * @version 2018-07-12
 */
class SmsChannelProperties {
    /**
     * Constructs a new <code>SmsChannelProperties</code>.
     * The parameters to provide for the Sms channel.
     * @alias module:model/SmsChannelProperties
     * @param accountSID {String} The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
     * @param authToken {String} The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
     * @param isEnabled {Boolean} Whether this channel is enabled for the bot
     * @param phone {String} The Sms phone
     */
    constructor(accountSID, authToken, isEnabled, phone) { 
        
        SmsChannelProperties.initialize(this, accountSID, authToken, isEnabled, phone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountSID, authToken, isEnabled, phone) { 
        obj['accountSID'] = accountSID;
        obj['authToken'] = authToken;
        obj['isEnabled'] = isEnabled;
        obj['phone'] = phone;
    }

    /**
     * Constructs a <code>SmsChannelProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SmsChannelProperties} obj Optional instance to populate.
     * @return {module:model/SmsChannelProperties} The populated <code>SmsChannelProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SmsChannelProperties();

            if (data.hasOwnProperty('accountSID')) {
                obj['accountSID'] = ApiClient.convertToType(data['accountSID'], 'String');
            }
            if (data.hasOwnProperty('authToken')) {
                obj['authToken'] = ApiClient.convertToType(data['authToken'], 'String');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isValidated')) {
                obj['isValidated'] = ApiClient.convertToType(data['isValidated'], 'Boolean');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SmsChannelProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SmsChannelProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SmsChannelProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountSID'] && !(typeof data['accountSID'] === 'string' || data['accountSID'] instanceof String)) {
            throw new Error("Expected the field `accountSID` to be a primitive type in the JSON string but got " + data['accountSID']);
        }
        // ensure the json data is a string
        if (data['authToken'] && !(typeof data['authToken'] === 'string' || data['authToken'] instanceof String)) {
            throw new Error("Expected the field `authToken` to be a primitive type in the JSON string but got " + data['authToken']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }

        return true;
    }


}

SmsChannelProperties.RequiredProperties = ["accountSID", "authToken", "isEnabled", "phone"];

/**
 * The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} accountSID
 */
SmsChannelProperties.prototype['accountSID'] = undefined;

/**
 * The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} authToken
 */
SmsChannelProperties.prototype['authToken'] = undefined;

/**
 * Whether this channel is enabled for the bot
 * @member {Boolean} isEnabled
 */
SmsChannelProperties.prototype['isEnabled'] = undefined;

/**
 * Whether this channel is validated for the bot
 * @member {Boolean} isValidated
 */
SmsChannelProperties.prototype['isValidated'] = undefined;

/**
 * The Sms phone
 * @member {String} phone
 */
SmsChannelProperties.prototype['phone'] = undefined;






export default SmsChannelProperties;

