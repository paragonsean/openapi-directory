/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EnterpriseChannel from '../model/EnterpriseChannel';
import EnterpriseChannelCheckNameAvailabilityRequest from '../model/EnterpriseChannelCheckNameAvailabilityRequest';
import EnterpriseChannelCheckNameAvailabilityResponse from '../model/EnterpriseChannelCheckNameAvailabilityResponse';
import EnterpriseChannelResponseList from '../model/EnterpriseChannelResponseList';
import Error from '../model/Error';

/**
* EnterpriseChannel service.
* @module api/EnterpriseChannelApi
* @version 2018-07-12
*/
export default class EnterpriseChannelApi {

    /**
    * Constructs a new EnterpriseChannelApi. 
    * @alias module:api/EnterpriseChannelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the enterpriseChannelsCheckNameAvailability operation.
     * @callback module:api/EnterpriseChannelApi~enterpriseChannelsCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseChannelCheckNameAvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether an Enterprise Channel name is available.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/EnterpriseChannelCheckNameAvailabilityRequest} parameters The parameters to provide for the Enterprise Channel check name availability request.
     * @param {module:api/EnterpriseChannelApi~enterpriseChannelsCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseChannelCheckNameAvailabilityResponse}
     */
    enterpriseChannelsCheckNameAvailability(apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling enterpriseChannelsCheckNameAvailability");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling enterpriseChannelsCheckNameAvailability");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnterpriseChannelCheckNameAvailabilityResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.BotService/checkEnterpriseChannelNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseChannelsCreate operation.
     * @callback module:api/EnterpriseChannelApi~enterpriseChannelsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Enterprise Channel.
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:model/EnterpriseChannel} parameters The parameters to provide for the new Enterprise Channel.
     * @param {module:api/EnterpriseChannelApi~enterpriseChannelsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseChannel}
     */
    enterpriseChannelsCreate(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling enterpriseChannelsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling enterpriseChannelsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling enterpriseChannelsCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnterpriseChannel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseChannelsDelete operation.
     * @callback module:api/EnterpriseChannelApi~enterpriseChannelsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Enterprise Channel from the resource group
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/EnterpriseChannelApi~enterpriseChannelsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseChannelsDelete(resourceGroupName, resourceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling enterpriseChannelsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling enterpriseChannelsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseChannelsGet operation.
     * @callback module:api/EnterpriseChannelApi~enterpriseChannelsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an Enterprise Channel specified by the parameters.
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/EnterpriseChannelApi~enterpriseChannelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseChannel}
     */
    enterpriseChannelsGet(resourceGroupName, resourceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling enterpriseChannelsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling enterpriseChannelsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseChannel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseChannelsListByResourceGroup operation.
     * @callback module:api/EnterpriseChannelApi~enterpriseChannelsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseChannelResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the resources of a particular type belonging to a resource group.
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EnterpriseChannelApi~enterpriseChannelsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseChannelResponseList}
     */
    enterpriseChannelsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling enterpriseChannelsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseChannelResponseList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseChannelsUpdate operation.
     * @callback module:api/EnterpriseChannelApi~enterpriseChannelsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Enterprise Channel.
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:model/EnterpriseChannel} parameters The parameters to provide to update the Enterprise Channel.
     * @param {module:api/EnterpriseChannelApi~enterpriseChannelsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseChannel}
     */
    enterpriseChannelsUpdate(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling enterpriseChannelsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling enterpriseChannelsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling enterpriseChannelsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnterpriseChannel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
