/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BotChannel from '../model/BotChannel';
import ChannelResponseList from '../model/ChannelResponseList';
import Error from '../model/Error';

/**
* Channel service.
* @module api/ChannelApi
* @version 2018-07-12
*/
export default class ChannelApi {

    /**
    * Constructs a new ChannelApi. 
    * @alias module:api/ChannelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the channelsCreate operation.
     * @callback module:api/ChannelApi~channelsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BotChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Channel registration for a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {module:model/String} channelName The name of the Channel resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:model/BotChannel} parameters The parameters to provide for the created bot.
     * @param {module:api/ChannelApi~channelsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BotChannel}
     */
    channelsCreate(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling channelsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling channelsCreate");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling channelsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling channelsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling channelsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling channelsCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'channelName': channelName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BotChannel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the channelsDelete operation.
     * @callback module:api/ChannelApi~channelsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Channel registration from a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} channelName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/ChannelApi~channelsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    channelsDelete(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling channelsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling channelsDelete");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling channelsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling channelsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling channelsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'channelName': channelName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the channelsGet operation.
     * @callback module:api/ChannelApi~channelsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BotChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a BotService Channel registration specified by the parameters.
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} channelName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/ChannelApi~channelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BotChannel}
     */
    channelsGet(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling channelsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling channelsGet");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling channelsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling channelsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling channelsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'channelName': channelName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BotChannel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the channelsListByResourceGroup operation.
     * @callback module:api/ChannelApi~channelsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the Channel registrations of a particular BotService resource
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/ChannelApi~channelsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelResponseList}
     */
    channelsListByResourceGroup(resourceGroupName, resourceName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling channelsListByResourceGroup");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling channelsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling channelsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling channelsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChannelResponseList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the channelsListWithKeys operation.
     * @callback module:api/ChannelApi~channelsListWithKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BotChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists a Channel registration for a Bot Service including secrets
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {module:model/String} channelName The name of the Channel resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/ChannelApi~channelsListWithKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BotChannel}
     */
    channelsListWithKeys(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling channelsListWithKeys");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling channelsListWithKeys");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling channelsListWithKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling channelsListWithKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling channelsListWithKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'channelName': channelName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BotChannel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the channelsUpdate operation.
     * @callback module:api/ChannelApi~channelsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BotChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Channel registration for a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {module:model/String} channelName The name of the Channel resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:model/BotChannel} parameters The parameters to provide for the created bot.
     * @param {module:api/ChannelApi~channelsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BotChannel}
     */
    channelsUpdate(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling channelsUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling channelsUpdate");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling channelsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling channelsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling channelsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling channelsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'channelName': channelName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BotChannel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
