/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionSetting from '../model/ConnectionSetting';
import ConnectionSettingResponseList from '../model/ConnectionSettingResponseList';
import Error from '../model/Error';

/**
* BotConnection service.
* @module api/BotConnectionApi
* @version 2018-07-12
*/
export default class BotConnectionApi {

    /**
    * Constructs a new BotConnectionApi. 
    * @alias module:api/BotConnectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the botConnectionCreate operation.
     * @callback module:api/BotConnectionApi~botConnectionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new Auth Connection for a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} connectionName The name of the Bot Service Connection Setting resource
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:model/ConnectionSetting} parameters The parameters to provide for creating the Connection Setting.
     * @param {module:api/BotConnectionApi~botConnectionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionSetting}
     */
    botConnectionCreate(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botConnectionCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botConnectionCreate");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling botConnectionCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botConnectionCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botConnectionCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling botConnectionCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botConnectionDelete operation.
     * @callback module:api/BotConnectionApi~botConnectionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Connection Setting registration for a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} connectionName The name of the Bot Service Connection Setting resource
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/BotConnectionApi~botConnectionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    botConnectionDelete(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botConnectionDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botConnectionDelete");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling botConnectionDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botConnectionDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botConnectionDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botConnectionGet operation.
     * @callback module:api/BotConnectionApi~botConnectionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Connection Setting registration for a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} connectionName The name of the Bot Service Connection Setting resource
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/BotConnectionApi~botConnectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionSetting}
     */
    botConnectionGet(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botConnectionGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botConnectionGet");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling botConnectionGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botConnectionGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botConnectionGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botConnectionListByBotService operation.
     * @callback module:api/BotConnectionApi~botConnectionListByBotServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionSettingResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/BotConnectionApi~botConnectionListByBotServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionSettingResponseList}
     */
    botConnectionListByBotService(resourceGroupName, resourceName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botConnectionListByBotService");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botConnectionListByBotService");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botConnectionListByBotService");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botConnectionListByBotService");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionSettingResponseList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botConnectionListWithSecrets operation.
     * @callback module:api/BotConnectionApi~botConnectionListWithSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Connection Setting registration for a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} connectionName The name of the Bot Service Connection Setting resource
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/BotConnectionApi~botConnectionListWithSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionSetting}
     */
    botConnectionListWithSecrets(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botConnectionListWithSecrets");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botConnectionListWithSecrets");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling botConnectionListWithSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botConnectionListWithSecrets");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botConnectionListWithSecrets");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}/listWithSecrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botConnectionUpdate operation.
     * @callback module:api/BotConnectionApi~botConnectionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Connection Setting registration for a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} connectionName The name of the Bot Service Connection Setting resource
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:model/ConnectionSetting} parameters The parameters to provide for updating the Connection Setting.
     * @param {module:api/BotConnectionApi~botConnectionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionSetting}
     */
    botConnectionUpdate(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botConnectionUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botConnectionUpdate");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling botConnectionUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botConnectionUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botConnectionUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling botConnectionUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'connectionName': connectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
