/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Bot from '../model/Bot';
import BotResponseList from '../model/BotResponseList';
import CheckNameAvailabilityRequestBody from '../model/CheckNameAvailabilityRequestBody';
import CheckNameAvailabilityResponseBody from '../model/CheckNameAvailabilityResponseBody';
import Error from '../model/Error';

/**
* Bot service.
* @module api/BotApi
* @version 2018-07-12
*/
export default class BotApi {

    /**
    * Constructs a new BotApi. 
    * @alias module:api/BotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the botsCreate operation.
     * @callback module:api/BotApi~botsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Bot Service. Bot Service is a resource group wide resource type.
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:model/Bot} parameters The parameters to provide for the created bot.
     * @param {module:api/BotApi~botsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bot}
     */
    botsCreate(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling botsCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bot;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botsDelete operation.
     * @callback module:api/BotApi~botsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Bot Service from the resource group. 
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/BotApi~botsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    botsDelete(resourceGroupName, resourceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botsGet operation.
     * @callback module:api/BotApi~botsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a BotService specified by the parameters.
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/BotApi~botsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bot}
     */
    botsGet(resourceGroupName, resourceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bot;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botsGetCheckNameAvailability operation.
     * @callback module:api/BotApi~botsGetCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckNameAvailabilityResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a bot name is available.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/CheckNameAvailabilityRequestBody} parameters The request body parameters to provide for the check name availability request
     * @param {module:api/BotApi~botsGetCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckNameAvailabilityResponseBody}
     */
    botsGetCheckNameAvailability(apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botsGetCheckNameAvailability");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling botsGetCheckNameAvailability");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckNameAvailabilityResponseBody;
      return this.apiClient.callApi(
        '/providers/Microsoft.BotService/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botsList operation.
     * @callback module:api/BotApi~botsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BotResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:api/BotApi~botsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BotResponseList}
     */
    botsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BotResponseList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.BotService/botServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botsListByResourceGroup operation.
     * @callback module:api/BotApi~botsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BotResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/BotApi~botsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BotResponseList}
     */
    botsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BotResponseList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the botsUpdate operation.
     * @callback module:api/BotApi~botsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Bot Service
     * @param {String} resourceGroupName The name of the Bot resource group in the user subscription.
     * @param {String} resourceName The name of the Bot resource.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {module:model/Bot} parameters The parameters to provide for the created bot.
     * @param {module:api/BotApi~botsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bot}
     */
    botsUpdate(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling botsUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling botsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling botsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling botsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling botsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bot;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
