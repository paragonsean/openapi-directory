/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Bot;
import org.openapitools.client.model.BotResponseList;
import org.openapitools.client.model.CheckNameAvailabilityRequestBody;
import org.openapitools.client.model.CheckNameAvailabilityResponseBody;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BotApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BotApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for botsCreate
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsCreateCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botsCreateValidateBeforeCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botsCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling botsCreate(Async)");
        }

        return botsCreateCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a Bot Service. Bot Service is a resource group wide resource type.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @return Bot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public Bot botsCreate(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters) throws ApiException {
        ApiResponse<Bot> localVarResp = botsCreateWithHttpInfo(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a Bot Service. Bot Service is a resource group wide resource type.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @return ApiResponse&lt;Bot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Bot> botsCreateWithHttpInfo(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters) throws ApiException {
        okhttp3.Call localVarCall = botsCreateValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<Bot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a Bot Service. Bot Service is a resource group wide resource type.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsCreateAsync(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters, final ApiCallback<Bot> _callback) throws ApiException {

        okhttp3.Call localVarCall = botsCreateValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Bot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botsDelete
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsDeleteCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botsDeleteValidateBeforeCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botsDelete(Async)");
        }

        return botsDeleteCall(resourceGroupName, resourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a Bot Service from the resource group. 
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void botsDelete(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        botsDeleteWithHttpInfo(resourceGroupName, resourceName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a Bot Service from the resource group. 
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> botsDeleteWithHttpInfo(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = botsDeleteValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a Bot Service from the resource group. 
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsDeleteAsync(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = botsDeleteValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for botsGet
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsGetCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botsGetValidateBeforeCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botsGet(Async)");
        }

        return botsGetCall(resourceGroupName, resourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns a BotService specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return Bot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public Bot botsGet(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<Bot> localVarResp = botsGetWithHttpInfo(resourceGroupName, resourceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a BotService specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;Bot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Bot> botsGetWithHttpInfo(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = botsGetValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<Bot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a BotService specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsGetAsync(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback<Bot> _callback) throws ApiException {

        okhttp3.Call localVarCall = botsGetValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Bot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botsGetCheckNameAvailability
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The request body parameters to provide for the check name availability request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsGetCheckNameAvailabilityCall(String apiVersion, CheckNameAvailabilityRequestBody parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.BotService/checkNameAvailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botsGetCheckNameAvailabilityValidateBeforeCall(String apiVersion, CheckNameAvailabilityRequestBody parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botsGetCheckNameAvailability(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling botsGetCheckNameAvailability(Async)");
        }

        return botsGetCheckNameAvailabilityCall(apiVersion, parameters, _callback);

    }

    /**
     * 
     * Check whether a bot name is available.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The request body parameters to provide for the check name availability request (required)
     * @return CheckNameAvailabilityResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameAvailabilityResponseBody botsGetCheckNameAvailability(String apiVersion, CheckNameAvailabilityRequestBody parameters) throws ApiException {
        ApiResponse<CheckNameAvailabilityResponseBody> localVarResp = botsGetCheckNameAvailabilityWithHttpInfo(apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Check whether a bot name is available.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The request body parameters to provide for the check name availability request (required)
     * @return ApiResponse&lt;CheckNameAvailabilityResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameAvailabilityResponseBody> botsGetCheckNameAvailabilityWithHttpInfo(String apiVersion, CheckNameAvailabilityRequestBody parameters) throws ApiException {
        okhttp3.Call localVarCall = botsGetCheckNameAvailabilityValidateBeforeCall(apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check whether a bot name is available.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The request body parameters to provide for the check name availability request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsGetCheckNameAvailabilityAsync(String apiVersion, CheckNameAvailabilityRequestBody parameters, final ApiCallback<CheckNameAvailabilityResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = botsGetCheckNameAvailabilityValidateBeforeCall(apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botsList
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/botServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botsListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botsList(Async)");
        }

        return botsListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns all the resources of a particular type belonging to a subscription.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return BotResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public BotResponseList botsList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<BotResponseList> localVarResp = botsListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all the resources of a particular type belonging to a subscription.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;BotResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BotResponseList> botsListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = botsListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<BotResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all the resources of a particular type belonging to a subscription.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsListAsync(String apiVersion, String subscriptionId, final ApiCallback<BotResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = botsListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<BotResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botsListByResourceGroup
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botsListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botsListByResourceGroup(Async)");
        }

        return botsListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return BotResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public BotResponseList botsListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BotResponseList> localVarResp = botsListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;BotResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BotResponseList> botsListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = botsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BotResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<BotResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = botsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BotResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botsUpdate
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsUpdateCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botsUpdateValidateBeforeCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botsUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling botsUpdate(Async)");
        }

        return botsUpdateCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @return Bot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public Bot botsUpdate(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters) throws ApiException {
        ApiResponse<Bot> localVarResp = botsUpdateWithHttpInfo(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @return ApiResponse&lt;Bot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Bot> botsUpdateWithHttpInfo(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters) throws ApiException {
        okhttp3.Call localVarCall = botsUpdateValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<Bot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botsUpdateAsync(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, Bot parameters, final ApiCallback<Bot> _callback) throws ApiException {

        okhttp3.Call localVarCall = botsUpdateValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Bot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
