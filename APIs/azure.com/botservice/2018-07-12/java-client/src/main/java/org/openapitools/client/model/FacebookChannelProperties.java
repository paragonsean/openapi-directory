/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FacebookPage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters to provide for the Facebook channel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:04.517418-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FacebookChannelProperties {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_SECRET = "appSecret";
  @SerializedName(SERIALIZED_NAME_APP_SECRET)
  private String appSecret;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callbackUrl";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private List<FacebookPage> pages = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFY_TOKEN = "verifyToken";
  @SerializedName(SERIALIZED_NAME_VERIFY_TOKEN)
  private String verifyToken;

  public FacebookChannelProperties() {
  }

  public FacebookChannelProperties(
     String callbackUrl, 
     String verifyToken
  ) {
    this();
    this.callbackUrl = callbackUrl;
    this.verifyToken = verifyToken;
  }

  public FacebookChannelProperties appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Facebook application id
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public FacebookChannelProperties appSecret(String appSecret) {
    this.appSecret = appSecret;
    return this;
  }

  /**
   * Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
   * @return appSecret
   */
  @javax.annotation.Nonnull
  public String getAppSecret() {
    return appSecret;
  }

  public void setAppSecret(String appSecret) {
    this.appSecret = appSecret;
  }


  /**
   * Callback Url
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }



  public FacebookChannelProperties isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Whether this channel is enabled for the bot
   * @return isEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public FacebookChannelProperties pages(List<FacebookPage> pages) {
    this.pages = pages;
    return this;
  }

  public FacebookChannelProperties addPagesItem(FacebookPage pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<>();
    }
    this.pages.add(pagesItem);
    return this;
  }

  /**
   * The list of Facebook pages
   * @return pages
   */
  @javax.annotation.Nullable
  public List<FacebookPage> getPages() {
    return pages;
  }

  public void setPages(List<FacebookPage> pages) {
    this.pages = pages;
  }


  /**
   * Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
   * @return verifyToken
   */
  @javax.annotation.Nullable
  public String getVerifyToken() {
    return verifyToken;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacebookChannelProperties facebookChannelProperties = (FacebookChannelProperties) o;
    return Objects.equals(this.appId, facebookChannelProperties.appId) &&
        Objects.equals(this.appSecret, facebookChannelProperties.appSecret) &&
        Objects.equals(this.callbackUrl, facebookChannelProperties.callbackUrl) &&
        Objects.equals(this.isEnabled, facebookChannelProperties.isEnabled) &&
        Objects.equals(this.pages, facebookChannelProperties.pages) &&
        Objects.equals(this.verifyToken, facebookChannelProperties.verifyToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, appSecret, callbackUrl, isEnabled, pages, verifyToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacebookChannelProperties {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appSecret: ").append(toIndentedString(appSecret)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    verifyToken: ").append(toIndentedString(verifyToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("appSecret");
    openapiFields.add("callbackUrl");
    openapiFields.add("isEnabled");
    openapiFields.add("pages");
    openapiFields.add("verifyToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appId");
    openapiRequiredFields.add("appSecret");
    openapiRequiredFields.add("isEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacebookChannelProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacebookChannelProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacebookChannelProperties is not found in the empty JSON string", FacebookChannelProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacebookChannelProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacebookChannelProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FacebookChannelProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if (!jsonObj.get("appSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appSecret").toString()));
      }
      if ((jsonObj.get("callbackUrl") != null && !jsonObj.get("callbackUrl").isJsonNull()) && !jsonObj.get("callbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUrl").toString()));
      }
      if (jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) {
        JsonArray jsonArraypages = jsonObj.getAsJsonArray("pages");
        if (jsonArraypages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pages` to be an array in the JSON string but got `%s`", jsonObj.get("pages").toString()));
          }

          // validate the optional field `pages` (array)
          for (int i = 0; i < jsonArraypages.size(); i++) {
            FacebookPage.validateJsonElement(jsonArraypages.get(i));
          };
        }
      }
      if ((jsonObj.get("verifyToken") != null && !jsonObj.get("verifyToken").isJsonNull()) && !jsonObj.get("verifyToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifyToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifyToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacebookChannelProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacebookChannelProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacebookChannelProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacebookChannelProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FacebookChannelProperties>() {
           @Override
           public void write(JsonWriter out, FacebookChannelProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacebookChannelProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacebookChannelProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacebookChannelProperties
   * @throws IOException if the JSON string is invalid with respect to FacebookChannelProperties
   */
  public static FacebookChannelProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacebookChannelProperties.class);
  }

  /**
   * Convert an instance of FacebookChannelProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

