/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EnterpriseChannel;
import org.openapitools.client.model.EnterpriseChannelCheckNameAvailabilityRequest;
import org.openapitools.client.model.EnterpriseChannelCheckNameAvailabilityResponse;
import org.openapitools.client.model.EnterpriseChannelResponseList;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnterpriseChannelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnterpriseChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnterpriseChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for enterpriseChannelsCheckNameAvailability
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The parameters to provide for the Enterprise Channel check name availability request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsCheckNameAvailabilityCall(String apiVersion, EnterpriseChannelCheckNameAvailabilityRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.BotService/checkEnterpriseChannelNameAvailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseChannelsCheckNameAvailabilityValidateBeforeCall(String apiVersion, EnterpriseChannelCheckNameAvailabilityRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enterpriseChannelsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling enterpriseChannelsCheckNameAvailability(Async)");
        }

        return enterpriseChannelsCheckNameAvailabilityCall(apiVersion, parameters, _callback);

    }

    /**
     * 
     * Check whether an Enterprise Channel name is available.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The parameters to provide for the Enterprise Channel check name availability request. (required)
     * @return EnterpriseChannelCheckNameAvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public EnterpriseChannelCheckNameAvailabilityResponse enterpriseChannelsCheckNameAvailability(String apiVersion, EnterpriseChannelCheckNameAvailabilityRequest parameters) throws ApiException {
        ApiResponse<EnterpriseChannelCheckNameAvailabilityResponse> localVarResp = enterpriseChannelsCheckNameAvailabilityWithHttpInfo(apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Check whether an Enterprise Channel name is available.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The parameters to provide for the Enterprise Channel check name availability request. (required)
     * @return ApiResponse&lt;EnterpriseChannelCheckNameAvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnterpriseChannelCheckNameAvailabilityResponse> enterpriseChannelsCheckNameAvailabilityWithHttpInfo(String apiVersion, EnterpriseChannelCheckNameAvailabilityRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = enterpriseChannelsCheckNameAvailabilityValidateBeforeCall(apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<EnterpriseChannelCheckNameAvailabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check whether an Enterprise Channel name is available.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The parameters to provide for the Enterprise Channel check name availability request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility. For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsCheckNameAvailabilityAsync(String apiVersion, EnterpriseChannelCheckNameAvailabilityRequest parameters, final ApiCallback<EnterpriseChannelCheckNameAvailabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseChannelsCheckNameAvailabilityValidateBeforeCall(apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseChannelCheckNameAvailabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseChannelsCreate
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the new Enterprise Channel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsCreateCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseChannelsCreateValidateBeforeCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling enterpriseChannelsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enterpriseChannelsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling enterpriseChannelsCreate(Async)");
        }

        return enterpriseChannelsCreateCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates an Enterprise Channel.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the new Enterprise Channel. (required)
     * @return EnterpriseChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public EnterpriseChannel enterpriseChannelsCreate(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters) throws ApiException {
        ApiResponse<EnterpriseChannel> localVarResp = enterpriseChannelsCreateWithHttpInfo(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an Enterprise Channel.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the new Enterprise Channel. (required)
     * @return ApiResponse&lt;EnterpriseChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnterpriseChannel> enterpriseChannelsCreateWithHttpInfo(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters) throws ApiException {
        okhttp3.Call localVarCall = enterpriseChannelsCreateValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<EnterpriseChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an Enterprise Channel.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the new Enterprise Channel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsCreateAsync(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters, final ApiCallback<EnterpriseChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseChannelsCreateValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseChannelsDelete
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsDeleteCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseChannelsDeleteValidateBeforeCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling enterpriseChannelsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enterpriseChannelsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsDelete(Async)");
        }

        return enterpriseChannelsDeleteCall(resourceGroupName, resourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes an Enterprise Channel from the resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void enterpriseChannelsDelete(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        enterpriseChannelsDeleteWithHttpInfo(resourceGroupName, resourceName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes an Enterprise Channel from the resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enterpriseChannelsDeleteWithHttpInfo(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseChannelsDeleteValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an Enterprise Channel from the resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsDeleteAsync(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseChannelsDeleteValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseChannelsGet
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsGetCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseChannelsGetValidateBeforeCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling enterpriseChannelsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enterpriseChannelsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsGet(Async)");
        }

        return enterpriseChannelsGetCall(resourceGroupName, resourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns an Enterprise Channel specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return EnterpriseChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public EnterpriseChannel enterpriseChannelsGet(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<EnterpriseChannel> localVarResp = enterpriseChannelsGetWithHttpInfo(resourceGroupName, resourceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an Enterprise Channel specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;EnterpriseChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnterpriseChannel> enterpriseChannelsGetWithHttpInfo(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseChannelsGetValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<EnterpriseChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an Enterprise Channel specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsGetAsync(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, final ApiCallback<EnterpriseChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseChannelsGetValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseChannelsListByResourceGroup
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseChannelsListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enterpriseChannelsListByResourceGroup(Async)");
        }

        return enterpriseChannelsListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns all the resources of a particular type belonging to a resource group.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EnterpriseChannelResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public EnterpriseChannelResponseList enterpriseChannelsListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<EnterpriseChannelResponseList> localVarResp = enterpriseChannelsListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all the resources of a particular type belonging to a resource group.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EnterpriseChannelResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnterpriseChannelResponseList> enterpriseChannelsListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = enterpriseChannelsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<EnterpriseChannelResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all the resources of a particular type belonging to a resource group.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<EnterpriseChannelResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseChannelsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseChannelResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseChannelsUpdate
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide to update the Enterprise Channel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsUpdateCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseChannelsUpdateValidateBeforeCall(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling enterpriseChannelsUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling enterpriseChannelsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enterpriseChannelsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling enterpriseChannelsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling enterpriseChannelsUpdate(Async)");
        }

        return enterpriseChannelsUpdateCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates an Enterprise Channel.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide to update the Enterprise Channel. (required)
     * @return EnterpriseChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public EnterpriseChannel enterpriseChannelsUpdate(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters) throws ApiException {
        ApiResponse<EnterpriseChannel> localVarResp = enterpriseChannelsUpdateWithHttpInfo(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an Enterprise Channel.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide to update the Enterprise Channel. (required)
     * @return ApiResponse&lt;EnterpriseChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnterpriseChannel> enterpriseChannelsUpdateWithHttpInfo(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters) throws ApiException {
        okhttp3.Call localVarCall = enterpriseChannelsUpdateValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<EnterpriseChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an Enterprise Channel.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide to update the Enterprise Channel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterpriseChannelsUpdateAsync(String resourceGroupName, String resourceName, String apiVersion, String subscriptionId, EnterpriseChannel parameters, final ApiCallback<EnterpriseChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseChannelsUpdateValidateBeforeCall(resourceGroupName, resourceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
