/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2018-07-12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters to provide for the Slack channel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:04.517418-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlackChannelProperties {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_IS_VALIDATED = "isValidated";
  @SerializedName(SERIALIZED_NAME_IS_VALIDATED)
  private Boolean isValidated;

  public static final String SERIALIZED_NAME_LANDING_PAGE_URL = "landingPageUrl";
  @SerializedName(SERIALIZED_NAME_LANDING_PAGE_URL)
  private String landingPageUrl;

  public static final String SERIALIZED_NAME_LAST_SUBMISSION_ID = "lastSubmissionId";
  @SerializedName(SERIALIZED_NAME_LAST_SUBMISSION_ID)
  private String lastSubmissionId;

  public static final String SERIALIZED_NAME_REDIRECT_ACTION = "redirectAction";
  @SerializedName(SERIALIZED_NAME_REDIRECT_ACTION)
  private String redirectAction;

  public static final String SERIALIZED_NAME_REGISTER_BEFORE_O_AUTH_FLOW = "registerBeforeOAuthFlow";
  @SerializedName(SERIALIZED_NAME_REGISTER_BEFORE_O_AUTH_FLOW)
  private Boolean registerBeforeOAuthFlow;

  public static final String SERIALIZED_NAME_VERIFICATION_TOKEN = "verificationToken";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TOKEN)
  private String verificationToken;

  public SlackChannelProperties() {
  }

  public SlackChannelProperties(
     Boolean isValidated, 
     String lastSubmissionId, 
     String redirectAction, 
     Boolean registerBeforeOAuthFlow
  ) {
    this();
    this.isValidated = isValidated;
    this.lastSubmissionId = lastSubmissionId;
    this.redirectAction = redirectAction;
    this.registerBeforeOAuthFlow = registerBeforeOAuthFlow;
  }

  public SlackChannelProperties clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * The Slack client id
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public SlackChannelProperties clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
   * @return clientSecret
   */
  @javax.annotation.Nonnull
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public SlackChannelProperties isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Whether this channel is enabled for the bot
   * @return isEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  /**
   * Whether this channel is validated for the bot
   * @return isValidated
   */
  @javax.annotation.Nullable
  public Boolean getIsValidated() {
    return isValidated;
  }



  public SlackChannelProperties landingPageUrl(String landingPageUrl) {
    this.landingPageUrl = landingPageUrl;
    return this;
  }

  /**
   * The Slack landing page Url
   * @return landingPageUrl
   */
  @javax.annotation.Nullable
  public String getLandingPageUrl() {
    return landingPageUrl;
  }

  public void setLandingPageUrl(String landingPageUrl) {
    this.landingPageUrl = landingPageUrl;
  }


  /**
   * The Sms auth token
   * @return lastSubmissionId
   */
  @javax.annotation.Nullable
  public String getLastSubmissionId() {
    return lastSubmissionId;
  }



  /**
   * The Slack redirect action
   * @return redirectAction
   */
  @javax.annotation.Nullable
  public String getRedirectAction() {
    return redirectAction;
  }



  /**
   * Whether to register the settings before OAuth validation is performed. Recommended to True.
   * @return registerBeforeOAuthFlow
   */
  @javax.annotation.Nullable
  public Boolean getRegisterBeforeOAuthFlow() {
    return registerBeforeOAuthFlow;
  }



  public SlackChannelProperties verificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
    return this;
  }

  /**
   * The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
   * @return verificationToken
   */
  @javax.annotation.Nonnull
  public String getVerificationToken() {
    return verificationToken;
  }

  public void setVerificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlackChannelProperties slackChannelProperties = (SlackChannelProperties) o;
    return Objects.equals(this.clientId, slackChannelProperties.clientId) &&
        Objects.equals(this.clientSecret, slackChannelProperties.clientSecret) &&
        Objects.equals(this.isEnabled, slackChannelProperties.isEnabled) &&
        Objects.equals(this.isValidated, slackChannelProperties.isValidated) &&
        Objects.equals(this.landingPageUrl, slackChannelProperties.landingPageUrl) &&
        Objects.equals(this.lastSubmissionId, slackChannelProperties.lastSubmissionId) &&
        Objects.equals(this.redirectAction, slackChannelProperties.redirectAction) &&
        Objects.equals(this.registerBeforeOAuthFlow, slackChannelProperties.registerBeforeOAuthFlow) &&
        Objects.equals(this.verificationToken, slackChannelProperties.verificationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, isEnabled, isValidated, landingPageUrl, lastSubmissionId, redirectAction, registerBeforeOAuthFlow, verificationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlackChannelProperties {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    isValidated: ").append(toIndentedString(isValidated)).append("\n");
    sb.append("    landingPageUrl: ").append(toIndentedString(landingPageUrl)).append("\n");
    sb.append("    lastSubmissionId: ").append(toIndentedString(lastSubmissionId)).append("\n");
    sb.append("    redirectAction: ").append(toIndentedString(redirectAction)).append("\n");
    sb.append("    registerBeforeOAuthFlow: ").append(toIndentedString(registerBeforeOAuthFlow)).append("\n");
    sb.append("    verificationToken: ").append(toIndentedString(verificationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("isEnabled");
    openapiFields.add("isValidated");
    openapiFields.add("landingPageUrl");
    openapiFields.add("lastSubmissionId");
    openapiFields.add("redirectAction");
    openapiFields.add("registerBeforeOAuthFlow");
    openapiFields.add("verificationToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("clientSecret");
    openapiRequiredFields.add("isEnabled");
    openapiRequiredFields.add("verificationToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlackChannelProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlackChannelProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlackChannelProperties is not found in the empty JSON string", SlackChannelProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlackChannelProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlackChannelProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SlackChannelProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if (!jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("landingPageUrl") != null && !jsonObj.get("landingPageUrl").isJsonNull()) && !jsonObj.get("landingPageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `landingPageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("landingPageUrl").toString()));
      }
      if ((jsonObj.get("lastSubmissionId") != null && !jsonObj.get("lastSubmissionId").isJsonNull()) && !jsonObj.get("lastSubmissionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSubmissionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSubmissionId").toString()));
      }
      if ((jsonObj.get("redirectAction") != null && !jsonObj.get("redirectAction").isJsonNull()) && !jsonObj.get("redirectAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectAction").toString()));
      }
      if (!jsonObj.get("verificationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlackChannelProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlackChannelProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlackChannelProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlackChannelProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SlackChannelProperties>() {
           @Override
           public void write(JsonWriter out, SlackChannelProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlackChannelProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlackChannelProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlackChannelProperties
   * @throws IOException if the JSON string is invalid with respect to SlackChannelProperties
   */
  public static SlackChannelProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlackChannelProperties.class);
  }

  /**
   * Convert an instance of SlackChannelProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

