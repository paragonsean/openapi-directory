# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SlackChannelProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, is_enabled: bool=None, is_validated: bool=None, landing_page_url: str=None, last_submission_id: str=None, redirect_action: str=None, register_before_o_auth_flow: bool=None, verification_token: str=None):
        """SlackChannelProperties - a model defined in OpenAPI

        :param client_id: The client_id of this SlackChannelProperties.
        :param client_secret: The client_secret of this SlackChannelProperties.
        :param is_enabled: The is_enabled of this SlackChannelProperties.
        :param is_validated: The is_validated of this SlackChannelProperties.
        :param landing_page_url: The landing_page_url of this SlackChannelProperties.
        :param last_submission_id: The last_submission_id of this SlackChannelProperties.
        :param redirect_action: The redirect_action of this SlackChannelProperties.
        :param register_before_o_auth_flow: The register_before_o_auth_flow of this SlackChannelProperties.
        :param verification_token: The verification_token of this SlackChannelProperties.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'is_enabled': bool,
            'is_validated': bool,
            'landing_page_url': str,
            'last_submission_id': str,
            'redirect_action': str,
            'register_before_o_auth_flow': bool,
            'verification_token': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'is_enabled': 'isEnabled',
            'is_validated': 'isValidated',
            'landing_page_url': 'landingPageUrl',
            'last_submission_id': 'lastSubmissionId',
            'redirect_action': 'redirectAction',
            'register_before_o_auth_flow': 'registerBeforeOAuthFlow',
            'verification_token': 'verificationToken'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._is_enabled = is_enabled
        self._is_validated = is_validated
        self._landing_page_url = landing_page_url
        self._last_submission_id = last_submission_id
        self._redirect_action = redirect_action
        self._register_before_o_auth_flow = register_before_o_auth_flow
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlackChannelProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlackChannelProperties of this SlackChannelProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this SlackChannelProperties.

        The Slack client id

        :return: The client_id of this SlackChannelProperties.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SlackChannelProperties.

        The Slack client id

        :param client_id: The client_id of this SlackChannelProperties.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this SlackChannelProperties.

        The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The client_secret of this SlackChannelProperties.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this SlackChannelProperties.

        The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.

        :param client_secret: The client_secret of this SlackChannelProperties.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")

        self._client_secret = client_secret

    @property
    def is_enabled(self):
        """Gets the is_enabled of this SlackChannelProperties.

        Whether this channel is enabled for the bot

        :return: The is_enabled of this SlackChannelProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this SlackChannelProperties.

        Whether this channel is enabled for the bot

        :param is_enabled: The is_enabled of this SlackChannelProperties.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def is_validated(self):
        """Gets the is_validated of this SlackChannelProperties.

        Whether this channel is validated for the bot

        :return: The is_validated of this SlackChannelProperties.
        :rtype: bool
        """
        return self._is_validated

    @is_validated.setter
    def is_validated(self, is_validated):
        """Sets the is_validated of this SlackChannelProperties.

        Whether this channel is validated for the bot

        :param is_validated: The is_validated of this SlackChannelProperties.
        :type is_validated: bool
        """

        self._is_validated = is_validated

    @property
    def landing_page_url(self):
        """Gets the landing_page_url of this SlackChannelProperties.

        The Slack landing page Url

        :return: The landing_page_url of this SlackChannelProperties.
        :rtype: str
        """
        return self._landing_page_url

    @landing_page_url.setter
    def landing_page_url(self, landing_page_url):
        """Sets the landing_page_url of this SlackChannelProperties.

        The Slack landing page Url

        :param landing_page_url: The landing_page_url of this SlackChannelProperties.
        :type landing_page_url: str
        """

        self._landing_page_url = landing_page_url

    @property
    def last_submission_id(self):
        """Gets the last_submission_id of this SlackChannelProperties.

        The Sms auth token

        :return: The last_submission_id of this SlackChannelProperties.
        :rtype: str
        """
        return self._last_submission_id

    @last_submission_id.setter
    def last_submission_id(self, last_submission_id):
        """Sets the last_submission_id of this SlackChannelProperties.

        The Sms auth token

        :param last_submission_id: The last_submission_id of this SlackChannelProperties.
        :type last_submission_id: str
        """

        self._last_submission_id = last_submission_id

    @property
    def redirect_action(self):
        """Gets the redirect_action of this SlackChannelProperties.

        The Slack redirect action

        :return: The redirect_action of this SlackChannelProperties.
        :rtype: str
        """
        return self._redirect_action

    @redirect_action.setter
    def redirect_action(self, redirect_action):
        """Sets the redirect_action of this SlackChannelProperties.

        The Slack redirect action

        :param redirect_action: The redirect_action of this SlackChannelProperties.
        :type redirect_action: str
        """

        self._redirect_action = redirect_action

    @property
    def register_before_o_auth_flow(self):
        """Gets the register_before_o_auth_flow of this SlackChannelProperties.

        Whether to register the settings before OAuth validation is performed. Recommended to True.

        :return: The register_before_o_auth_flow of this SlackChannelProperties.
        :rtype: bool
        """
        return self._register_before_o_auth_flow

    @register_before_o_auth_flow.setter
    def register_before_o_auth_flow(self, register_before_o_auth_flow):
        """Sets the register_before_o_auth_flow of this SlackChannelProperties.

        Whether to register the settings before OAuth validation is performed. Recommended to True.

        :param register_before_o_auth_flow: The register_before_o_auth_flow of this SlackChannelProperties.
        :type register_before_o_auth_flow: bool
        """

        self._register_before_o_auth_flow = register_before_o_auth_flow

    @property
    def verification_token(self):
        """Gets the verification_token of this SlackChannelProperties.

        The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The verification_token of this SlackChannelProperties.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this SlackChannelProperties.

        The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.

        :param verification_token: The verification_token of this SlackChannelProperties.
        :type verification_token: str
        """
        if verification_token is None:
            raise ValueError("Invalid value for `verification_token`, must not be `None`")

        self._verification_token = verification_token
