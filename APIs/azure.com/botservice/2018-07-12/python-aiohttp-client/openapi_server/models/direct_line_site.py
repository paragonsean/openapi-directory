# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DirectLineSite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_enabled: bool=None, is_secure_site_enabled: bool=None, is_v1_enabled: bool=None, is_v3_enabled: bool=None, key: str=None, key2: str=None, site_id: str=None, site_name: str=None, trusted_origins: List[str]=None):
        """DirectLineSite - a model defined in OpenAPI

        :param is_enabled: The is_enabled of this DirectLineSite.
        :param is_secure_site_enabled: The is_secure_site_enabled of this DirectLineSite.
        :param is_v1_enabled: The is_v1_enabled of this DirectLineSite.
        :param is_v3_enabled: The is_v3_enabled of this DirectLineSite.
        :param key: The key of this DirectLineSite.
        :param key2: The key2 of this DirectLineSite.
        :param site_id: The site_id of this DirectLineSite.
        :param site_name: The site_name of this DirectLineSite.
        :param trusted_origins: The trusted_origins of this DirectLineSite.
        """
        self.openapi_types = {
            'is_enabled': bool,
            'is_secure_site_enabled': bool,
            'is_v1_enabled': bool,
            'is_v3_enabled': bool,
            'key': str,
            'key2': str,
            'site_id': str,
            'site_name': str,
            'trusted_origins': List[str]
        }

        self.attribute_map = {
            'is_enabled': 'isEnabled',
            'is_secure_site_enabled': 'isSecureSiteEnabled',
            'is_v1_enabled': 'isV1Enabled',
            'is_v3_enabled': 'isV3Enabled',
            'key': 'key',
            'key2': 'key2',
            'site_id': 'siteId',
            'site_name': 'siteName',
            'trusted_origins': 'trustedOrigins'
        }

        self._is_enabled = is_enabled
        self._is_secure_site_enabled = is_secure_site_enabled
        self._is_v1_enabled = is_v1_enabled
        self._is_v3_enabled = is_v3_enabled
        self._key = key
        self._key2 = key2
        self._site_id = site_id
        self._site_name = site_name
        self._trusted_origins = trusted_origins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectLineSite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DirectLineSite of this DirectLineSite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DirectLineSite.

        Whether this site is enabled for DirectLine channel.

        :return: The is_enabled of this DirectLineSite.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DirectLineSite.

        Whether this site is enabled for DirectLine channel.

        :param is_enabled: The is_enabled of this DirectLineSite.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def is_secure_site_enabled(self):
        """Gets the is_secure_site_enabled of this DirectLineSite.

        Whether this site is enabled for authentication with Bot Framework.

        :return: The is_secure_site_enabled of this DirectLineSite.
        :rtype: bool
        """
        return self._is_secure_site_enabled

    @is_secure_site_enabled.setter
    def is_secure_site_enabled(self, is_secure_site_enabled):
        """Sets the is_secure_site_enabled of this DirectLineSite.

        Whether this site is enabled for authentication with Bot Framework.

        :param is_secure_site_enabled: The is_secure_site_enabled of this DirectLineSite.
        :type is_secure_site_enabled: bool
        """

        self._is_secure_site_enabled = is_secure_site_enabled

    @property
    def is_v1_enabled(self):
        """Gets the is_v1_enabled of this DirectLineSite.

        Whether this site is enabled for Bot Framework V1 protocol.

        :return: The is_v1_enabled of this DirectLineSite.
        :rtype: bool
        """
        return self._is_v1_enabled

    @is_v1_enabled.setter
    def is_v1_enabled(self, is_v1_enabled):
        """Sets the is_v1_enabled of this DirectLineSite.

        Whether this site is enabled for Bot Framework V1 protocol.

        :param is_v1_enabled: The is_v1_enabled of this DirectLineSite.
        :type is_v1_enabled: bool
        """
        if is_v1_enabled is None:
            raise ValueError("Invalid value for `is_v1_enabled`, must not be `None`")

        self._is_v1_enabled = is_v1_enabled

    @property
    def is_v3_enabled(self):
        """Gets the is_v3_enabled of this DirectLineSite.

        Whether this site is enabled for Bot Framework V1 protocol.

        :return: The is_v3_enabled of this DirectLineSite.
        :rtype: bool
        """
        return self._is_v3_enabled

    @is_v3_enabled.setter
    def is_v3_enabled(self, is_v3_enabled):
        """Sets the is_v3_enabled of this DirectLineSite.

        Whether this site is enabled for Bot Framework V1 protocol.

        :param is_v3_enabled: The is_v3_enabled of this DirectLineSite.
        :type is_v3_enabled: bool
        """
        if is_v3_enabled is None:
            raise ValueError("Invalid value for `is_v3_enabled`, must not be `None`")

        self._is_v3_enabled = is_v3_enabled

    @property
    def key(self):
        """Gets the key of this DirectLineSite.

        Primary key. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The key of this DirectLineSite.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DirectLineSite.

        Primary key. Value only returned through POST to the action Channel List API, otherwise empty.

        :param key: The key of this DirectLineSite.
        :type key: str
        """

        self._key = key

    @property
    def key2(self):
        """Gets the key2 of this DirectLineSite.

        Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The key2 of this DirectLineSite.
        :rtype: str
        """
        return self._key2

    @key2.setter
    def key2(self, key2):
        """Sets the key2 of this DirectLineSite.

        Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.

        :param key2: The key2 of this DirectLineSite.
        :type key2: str
        """

        self._key2 = key2

    @property
    def site_id(self):
        """Gets the site_id of this DirectLineSite.

        Site Id

        :return: The site_id of this DirectLineSite.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this DirectLineSite.

        Site Id

        :param site_id: The site_id of this DirectLineSite.
        :type site_id: str
        """

        self._site_id = site_id

    @property
    def site_name(self):
        """Gets the site_name of this DirectLineSite.

        Site name

        :return: The site_name of this DirectLineSite.
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this DirectLineSite.

        Site name

        :param site_name: The site_name of this DirectLineSite.
        :type site_name: str
        """
        if site_name is None:
            raise ValueError("Invalid value for `site_name`, must not be `None`")

        self._site_name = site_name

    @property
    def trusted_origins(self):
        """Gets the trusted_origins of this DirectLineSite.

        List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.

        :return: The trusted_origins of this DirectLineSite.
        :rtype: List[str]
        """
        return self._trusted_origins

    @trusted_origins.setter
    def trusted_origins(self, trusted_origins):
        """Sets the trusted_origins of this DirectLineSite.

        List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.

        :param trusted_origins: The trusted_origins of this DirectLineSite.
        :type trusted_origins: List[str]
        """

        self._trusted_origins = trusted_origins
