# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseChannelNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_location: str=None, azure_sku: str=None, id: str=None, name: str=None, state: str=None):
        """EnterpriseChannelNode - a model defined in OpenAPI

        :param azure_location: The azure_location of this EnterpriseChannelNode.
        :param azure_sku: The azure_sku of this EnterpriseChannelNode.
        :param id: The id of this EnterpriseChannelNode.
        :param name: The name of this EnterpriseChannelNode.
        :param state: The state of this EnterpriseChannelNode.
        """
        self.openapi_types = {
            'azure_location': str,
            'azure_sku': str,
            'id': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'azure_location': 'azureLocation',
            'azure_sku': 'azureSku',
            'id': 'id',
            'name': 'name',
            'state': 'state'
        }

        self._azure_location = azure_location
        self._azure_sku = azure_sku
        self._id = id
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseChannelNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseChannelNode of this EnterpriseChannelNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_location(self):
        """Gets the azure_location of this EnterpriseChannelNode.

        The location of the Enterprise Channel Node.

        :return: The azure_location of this EnterpriseChannelNode.
        :rtype: str
        """
        return self._azure_location

    @azure_location.setter
    def azure_location(self, azure_location):
        """Sets the azure_location of this EnterpriseChannelNode.

        The location of the Enterprise Channel Node.

        :param azure_location: The azure_location of this EnterpriseChannelNode.
        :type azure_location: str
        """
        if azure_location is None:
            raise ValueError("Invalid value for `azure_location`, must not be `None`")

        self._azure_location = azure_location

    @property
    def azure_sku(self):
        """Gets the azure_sku of this EnterpriseChannelNode.

        The sku of the Enterprise Channel Node.

        :return: The azure_sku of this EnterpriseChannelNode.
        :rtype: str
        """
        return self._azure_sku

    @azure_sku.setter
    def azure_sku(self, azure_sku):
        """Sets the azure_sku of this EnterpriseChannelNode.

        The sku of the Enterprise Channel Node.

        :param azure_sku: The azure_sku of this EnterpriseChannelNode.
        :type azure_sku: str
        """
        if azure_sku is None:
            raise ValueError("Invalid value for `azure_sku`, must not be `None`")

        self._azure_sku = azure_sku

    @property
    def id(self):
        """Gets the id of this EnterpriseChannelNode.

        Id of Enterprise Channel Node. This is generated by the Bot Framework.

        :return: The id of this EnterpriseChannelNode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnterpriseChannelNode.

        Id of Enterprise Channel Node. This is generated by the Bot Framework.

        :param id: The id of this EnterpriseChannelNode.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EnterpriseChannelNode.

        The name of the Enterprise Channel Node.

        :return: The name of this EnterpriseChannelNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnterpriseChannelNode.

        The name of the Enterprise Channel Node.

        :param name: The name of this EnterpriseChannelNode.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state(self):
        """Gets the state of this EnterpriseChannelNode.

        The current state of the Enterprise Channel Node.

        :return: The state of this EnterpriseChannelNode.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EnterpriseChannelNode.

        The current state of the Enterprise Channel Node.

        :param state: The state of this EnterpriseChannelNode.
        :type state: str
        """
        allowed_values = ["Creating", "CreateFailed", "Started", "Starting", "StartFailed", "Stopped", "Stopping", "StopFailed", "Deleting", "DeleteFailed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
