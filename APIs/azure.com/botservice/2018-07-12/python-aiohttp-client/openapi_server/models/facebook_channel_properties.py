# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facebook_page import FacebookPage
from openapi_server import util


class FacebookChannelProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_secret: str=None, callback_url: str=None, is_enabled: bool=None, pages: List[FacebookPage]=None, verify_token: str=None):
        """FacebookChannelProperties - a model defined in OpenAPI

        :param app_id: The app_id of this FacebookChannelProperties.
        :param app_secret: The app_secret of this FacebookChannelProperties.
        :param callback_url: The callback_url of this FacebookChannelProperties.
        :param is_enabled: The is_enabled of this FacebookChannelProperties.
        :param pages: The pages of this FacebookChannelProperties.
        :param verify_token: The verify_token of this FacebookChannelProperties.
        """
        self.openapi_types = {
            'app_id': str,
            'app_secret': str,
            'callback_url': str,
            'is_enabled': bool,
            'pages': List[FacebookPage],
            'verify_token': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'app_secret': 'appSecret',
            'callback_url': 'callbackUrl',
            'is_enabled': 'isEnabled',
            'pages': 'pages',
            'verify_token': 'verifyToken'
        }

        self._app_id = app_id
        self._app_secret = app_secret
        self._callback_url = callback_url
        self._is_enabled = is_enabled
        self._pages = pages
        self._verify_token = verify_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacebookChannelProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacebookChannelProperties of this FacebookChannelProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this FacebookChannelProperties.

        Facebook application id

        :return: The app_id of this FacebookChannelProperties.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this FacebookChannelProperties.

        Facebook application id

        :param app_id: The app_id of this FacebookChannelProperties.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_secret(self):
        """Gets the app_secret of this FacebookChannelProperties.

        Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The app_secret of this FacebookChannelProperties.
        :rtype: str
        """
        return self._app_secret

    @app_secret.setter
    def app_secret(self, app_secret):
        """Sets the app_secret of this FacebookChannelProperties.

        Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.

        :param app_secret: The app_secret of this FacebookChannelProperties.
        :type app_secret: str
        """
        if app_secret is None:
            raise ValueError("Invalid value for `app_secret`, must not be `None`")

        self._app_secret = app_secret

    @property
    def callback_url(self):
        """Gets the callback_url of this FacebookChannelProperties.

        Callback Url

        :return: The callback_url of this FacebookChannelProperties.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this FacebookChannelProperties.

        Callback Url

        :param callback_url: The callback_url of this FacebookChannelProperties.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def is_enabled(self):
        """Gets the is_enabled of this FacebookChannelProperties.

        Whether this channel is enabled for the bot

        :return: The is_enabled of this FacebookChannelProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this FacebookChannelProperties.

        Whether this channel is enabled for the bot

        :param is_enabled: The is_enabled of this FacebookChannelProperties.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def pages(self):
        """Gets the pages of this FacebookChannelProperties.

        The list of Facebook pages

        :return: The pages of this FacebookChannelProperties.
        :rtype: List[FacebookPage]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this FacebookChannelProperties.

        The list of Facebook pages

        :param pages: The pages of this FacebookChannelProperties.
        :type pages: List[FacebookPage]
        """

        self._pages = pages

    @property
    def verify_token(self):
        """Gets the verify_token of this FacebookChannelProperties.

        Verify token. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The verify_token of this FacebookChannelProperties.
        :rtype: str
        """
        return self._verify_token

    @verify_token.setter
    def verify_token(self, verify_token):
        """Sets the verify_token of this FacebookChannelProperties.

        Verify token. Value only returned through POST to the action Channel List API, otherwise empty.

        :param verify_token: The verify_token of this FacebookChannelProperties.
        :type verify_token: str
        """

        self._verify_token = verify_token
