# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BotProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_channels: List[str]=None, description: str=None, developer_app_insight_key: str=None, developer_app_insights_api_key: str=None, developer_app_insights_application_id: str=None, display_name: str=None, enabled_channels: List[str]=None, endpoint: str=None, endpoint_version: str=None, icon_url: str=None, luis_app_ids: List[str]=None, luis_key: str=None, msa_app_id: str=None):
        """BotProperties - a model defined in OpenAPI

        :param configured_channels: The configured_channels of this BotProperties.
        :param description: The description of this BotProperties.
        :param developer_app_insight_key: The developer_app_insight_key of this BotProperties.
        :param developer_app_insights_api_key: The developer_app_insights_api_key of this BotProperties.
        :param developer_app_insights_application_id: The developer_app_insights_application_id of this BotProperties.
        :param display_name: The display_name of this BotProperties.
        :param enabled_channels: The enabled_channels of this BotProperties.
        :param endpoint: The endpoint of this BotProperties.
        :param endpoint_version: The endpoint_version of this BotProperties.
        :param icon_url: The icon_url of this BotProperties.
        :param luis_app_ids: The luis_app_ids of this BotProperties.
        :param luis_key: The luis_key of this BotProperties.
        :param msa_app_id: The msa_app_id of this BotProperties.
        """
        self.openapi_types = {
            'configured_channels': List[str],
            'description': str,
            'developer_app_insight_key': str,
            'developer_app_insights_api_key': str,
            'developer_app_insights_application_id': str,
            'display_name': str,
            'enabled_channels': List[str],
            'endpoint': str,
            'endpoint_version': str,
            'icon_url': str,
            'luis_app_ids': List[str],
            'luis_key': str,
            'msa_app_id': str
        }

        self.attribute_map = {
            'configured_channels': 'configuredChannels',
            'description': 'description',
            'developer_app_insight_key': 'developerAppInsightKey',
            'developer_app_insights_api_key': 'developerAppInsightsApiKey',
            'developer_app_insights_application_id': 'developerAppInsightsApplicationId',
            'display_name': 'displayName',
            'enabled_channels': 'enabledChannels',
            'endpoint': 'endpoint',
            'endpoint_version': 'endpointVersion',
            'icon_url': 'iconUrl',
            'luis_app_ids': 'luisAppIds',
            'luis_key': 'luisKey',
            'msa_app_id': 'msaAppId'
        }

        self._configured_channels = configured_channels
        self._description = description
        self._developer_app_insight_key = developer_app_insight_key
        self._developer_app_insights_api_key = developer_app_insights_api_key
        self._developer_app_insights_application_id = developer_app_insights_application_id
        self._display_name = display_name
        self._enabled_channels = enabled_channels
        self._endpoint = endpoint
        self._endpoint_version = endpoint_version
        self._icon_url = icon_url
        self._luis_app_ids = luis_app_ids
        self._luis_key = luis_key
        self._msa_app_id = msa_app_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BotProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BotProperties of this BotProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_channels(self):
        """Gets the configured_channels of this BotProperties.

        Collection of channels for which the bot is configured

        :return: The configured_channels of this BotProperties.
        :rtype: List[str]
        """
        return self._configured_channels

    @configured_channels.setter
    def configured_channels(self, configured_channels):
        """Sets the configured_channels of this BotProperties.

        Collection of channels for which the bot is configured

        :param configured_channels: The configured_channels of this BotProperties.
        :type configured_channels: List[str]
        """

        self._configured_channels = configured_channels

    @property
    def description(self):
        """Gets the description of this BotProperties.

        The description of the bot

        :return: The description of this BotProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BotProperties.

        The description of the bot

        :param description: The description of this BotProperties.
        :type description: str
        """

        self._description = description

    @property
    def developer_app_insight_key(self):
        """Gets the developer_app_insight_key of this BotProperties.

        The Application Insights key

        :return: The developer_app_insight_key of this BotProperties.
        :rtype: str
        """
        return self._developer_app_insight_key

    @developer_app_insight_key.setter
    def developer_app_insight_key(self, developer_app_insight_key):
        """Sets the developer_app_insight_key of this BotProperties.

        The Application Insights key

        :param developer_app_insight_key: The developer_app_insight_key of this BotProperties.
        :type developer_app_insight_key: str
        """

        self._developer_app_insight_key = developer_app_insight_key

    @property
    def developer_app_insights_api_key(self):
        """Gets the developer_app_insights_api_key of this BotProperties.

        The Application Insights Api Key

        :return: The developer_app_insights_api_key of this BotProperties.
        :rtype: str
        """
        return self._developer_app_insights_api_key

    @developer_app_insights_api_key.setter
    def developer_app_insights_api_key(self, developer_app_insights_api_key):
        """Sets the developer_app_insights_api_key of this BotProperties.

        The Application Insights Api Key

        :param developer_app_insights_api_key: The developer_app_insights_api_key of this BotProperties.
        :type developer_app_insights_api_key: str
        """

        self._developer_app_insights_api_key = developer_app_insights_api_key

    @property
    def developer_app_insights_application_id(self):
        """Gets the developer_app_insights_application_id of this BotProperties.

        The Application Insights App Id

        :return: The developer_app_insights_application_id of this BotProperties.
        :rtype: str
        """
        return self._developer_app_insights_application_id

    @developer_app_insights_application_id.setter
    def developer_app_insights_application_id(self, developer_app_insights_application_id):
        """Sets the developer_app_insights_application_id of this BotProperties.

        The Application Insights App Id

        :param developer_app_insights_application_id: The developer_app_insights_application_id of this BotProperties.
        :type developer_app_insights_application_id: str
        """

        self._developer_app_insights_application_id = developer_app_insights_application_id

    @property
    def display_name(self):
        """Gets the display_name of this BotProperties.

        The Name of the bot

        :return: The display_name of this BotProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BotProperties.

        The Name of the bot

        :param display_name: The display_name of this BotProperties.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def enabled_channels(self):
        """Gets the enabled_channels of this BotProperties.

        Collection of channels for which the bot is enabled

        :return: The enabled_channels of this BotProperties.
        :rtype: List[str]
        """
        return self._enabled_channels

    @enabled_channels.setter
    def enabled_channels(self, enabled_channels):
        """Sets the enabled_channels of this BotProperties.

        Collection of channels for which the bot is enabled

        :param enabled_channels: The enabled_channels of this BotProperties.
        :type enabled_channels: List[str]
        """

        self._enabled_channels = enabled_channels

    @property
    def endpoint(self):
        """Gets the endpoint of this BotProperties.

        The bot's endpoint

        :return: The endpoint of this BotProperties.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this BotProperties.

        The bot's endpoint

        :param endpoint: The endpoint of this BotProperties.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def endpoint_version(self):
        """Gets the endpoint_version of this BotProperties.

        The bot's endpoint version

        :return: The endpoint_version of this BotProperties.
        :rtype: str
        """
        return self._endpoint_version

    @endpoint_version.setter
    def endpoint_version(self, endpoint_version):
        """Sets the endpoint_version of this BotProperties.

        The bot's endpoint version

        :param endpoint_version: The endpoint_version of this BotProperties.
        :type endpoint_version: str
        """

        self._endpoint_version = endpoint_version

    @property
    def icon_url(self):
        """Gets the icon_url of this BotProperties.

        The Icon Url of the bot

        :return: The icon_url of this BotProperties.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this BotProperties.

        The Icon Url of the bot

        :param icon_url: The icon_url of this BotProperties.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def luis_app_ids(self):
        """Gets the luis_app_ids of this BotProperties.

        Collection of LUIS App Ids

        :return: The luis_app_ids of this BotProperties.
        :rtype: List[str]
        """
        return self._luis_app_ids

    @luis_app_ids.setter
    def luis_app_ids(self, luis_app_ids):
        """Sets the luis_app_ids of this BotProperties.

        Collection of LUIS App Ids

        :param luis_app_ids: The luis_app_ids of this BotProperties.
        :type luis_app_ids: List[str]
        """

        self._luis_app_ids = luis_app_ids

    @property
    def luis_key(self):
        """Gets the luis_key of this BotProperties.

        The LUIS Key

        :return: The luis_key of this BotProperties.
        :rtype: str
        """
        return self._luis_key

    @luis_key.setter
    def luis_key(self, luis_key):
        """Sets the luis_key of this BotProperties.

        The LUIS Key

        :param luis_key: The luis_key of this BotProperties.
        :type luis_key: str
        """

        self._luis_key = luis_key

    @property
    def msa_app_id(self):
        """Gets the msa_app_id of this BotProperties.

        Microsoft App Id for the bot

        :return: The msa_app_id of this BotProperties.
        :rtype: str
        """
        return self._msa_app_id

    @msa_app_id.setter
    def msa_app_id(self, msa_app_id):
        """Sets the msa_app_id of this BotProperties.

        Microsoft App Id for the bot

        :param msa_app_id: The msa_app_id of this BotProperties.
        :type msa_app_id: str
        """
        if msa_app_id is None:
            raise ValueError("Invalid value for `msa_app_id`, must not be `None`")

        self._msa_app_id = msa_app_id
