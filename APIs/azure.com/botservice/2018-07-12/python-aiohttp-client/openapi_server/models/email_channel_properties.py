# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailChannelProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, is_enabled: bool=None, password: str=None):
        """EmailChannelProperties - a model defined in OpenAPI

        :param email_address: The email_address of this EmailChannelProperties.
        :param is_enabled: The is_enabled of this EmailChannelProperties.
        :param password: The password of this EmailChannelProperties.
        """
        self.openapi_types = {
            'email_address': str,
            'is_enabled': bool,
            'password': str
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'is_enabled': 'isEnabled',
            'password': 'password'
        }

        self._email_address = email_address
        self._is_enabled = is_enabled
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailChannelProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailChannelProperties of this EmailChannelProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this EmailChannelProperties.

        The email address

        :return: The email_address of this EmailChannelProperties.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this EmailChannelProperties.

        The email address

        :param email_address: The email_address of this EmailChannelProperties.
        :type email_address: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")

        self._email_address = email_address

    @property
    def is_enabled(self):
        """Gets the is_enabled of this EmailChannelProperties.

        Whether this channel is enabled for the bot

        :return: The is_enabled of this EmailChannelProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this EmailChannelProperties.

        Whether this channel is enabled for the bot

        :param is_enabled: The is_enabled of this EmailChannelProperties.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def password(self):
        """Gets the password of this EmailChannelProperties.

        The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The password of this EmailChannelProperties.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EmailChannelProperties.

        The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.

        :param password: The password of this EmailChannelProperties.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
