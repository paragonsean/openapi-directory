/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacebookChannelProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacebookChannelProperties::OAIFacebookChannelProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacebookChannelProperties::OAIFacebookChannelProperties() {
    this->initializeModel();
}

OAIFacebookChannelProperties::~OAIFacebookChannelProperties() {}

void OAIFacebookChannelProperties::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_secret_isSet = false;
    m_app_secret_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_verify_token_isSet = false;
    m_verify_token_isValid = false;
}

void OAIFacebookChannelProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacebookChannelProperties::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_secret_isValid = ::OpenAPI::fromJsonValue(m_app_secret, json[QString("appSecret")]);
    m_app_secret_isSet = !json[QString("appSecret")].isNull() && m_app_secret_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callbackUrl")]);
    m_callback_url_isSet = !json[QString("callbackUrl")].isNull() && m_callback_url_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_verify_token_isValid = ::OpenAPI::fromJsonValue(m_verify_token, json[QString("verifyToken")]);
    m_verify_token_isSet = !json[QString("verifyToken")].isNull() && m_verify_token_isValid;
}

QString OAIFacebookChannelProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacebookChannelProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_secret_isSet) {
        obj.insert(QString("appSecret"), ::OpenAPI::toJsonValue(m_app_secret));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callbackUrl"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_pages.size() > 0) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_verify_token_isSet) {
        obj.insert(QString("verifyToken"), ::OpenAPI::toJsonValue(m_verify_token));
    }
    return obj;
}

QString OAIFacebookChannelProperties::getAppId() const {
    return m_app_id;
}
void OAIFacebookChannelProperties::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIFacebookChannelProperties::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIFacebookChannelProperties::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIFacebookChannelProperties::getAppSecret() const {
    return m_app_secret;
}
void OAIFacebookChannelProperties::setAppSecret(const QString &app_secret) {
    m_app_secret = app_secret;
    m_app_secret_isSet = true;
}

bool OAIFacebookChannelProperties::is_app_secret_Set() const{
    return m_app_secret_isSet;
}

bool OAIFacebookChannelProperties::is_app_secret_Valid() const{
    return m_app_secret_isValid;
}

QString OAIFacebookChannelProperties::getCallbackUrl() const {
    return m_callback_url;
}
void OAIFacebookChannelProperties::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIFacebookChannelProperties::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIFacebookChannelProperties::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

bool OAIFacebookChannelProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAIFacebookChannelProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIFacebookChannelProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIFacebookChannelProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QList<OAIFacebookPage> OAIFacebookChannelProperties::getPages() const {
    return m_pages;
}
void OAIFacebookChannelProperties::setPages(const QList<OAIFacebookPage> &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIFacebookChannelProperties::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIFacebookChannelProperties::is_pages_Valid() const{
    return m_pages_isValid;
}

QString OAIFacebookChannelProperties::getVerifyToken() const {
    return m_verify_token;
}
void OAIFacebookChannelProperties::setVerifyToken(const QString &verify_token) {
    m_verify_token = verify_token;
    m_verify_token_isSet = true;
}

bool OAIFacebookChannelProperties::is_verify_token_Set() const{
    return m_verify_token_isSet;
}

bool OAIFacebookChannelProperties::is_verify_token_Valid() const{
    return m_verify_token_isValid;
}

bool OAIFacebookChannelProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacebookChannelProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_app_secret_isValid && m_is_enabled_isValid && true;
}

} // namespace OpenAPI
