/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceProviderParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceProviderParameter::OAIServiceProviderParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceProviderParameter::OAIServiceProviderParameter() {
    this->initializeModel();
}

OAIServiceProviderParameter::~OAIServiceProviderParameter() {}

void OAIServiceProviderParameter::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_help_url_isSet = false;
    m_help_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIServiceProviderParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceProviderParameter::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_help_url_isValid = ::OpenAPI::fromJsonValue(m_help_url, json[QString("helpUrl")]);
    m_help_url_isSet = !json[QString("helpUrl")].isNull() && m_help_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIServiceProviderParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceProviderParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_help_url_isSet) {
        obj.insert(QString("helpUrl"), ::OpenAPI::toJsonValue(m_help_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIServiceProviderParameter::getRDefault() const {
    return m_r_default;
}
void OAIServiceProviderParameter::setRDefault(const QString &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIServiceProviderParameter::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIServiceProviderParameter::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIServiceProviderParameter::getDescription() const {
    return m_description;
}
void OAIServiceProviderParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceProviderParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceProviderParameter::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIServiceProviderParameter::getDisplayName() const {
    return m_display_name;
}
void OAIServiceProviderParameter::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIServiceProviderParameter::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIServiceProviderParameter::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIServiceProviderParameter::getHelpUrl() const {
    return m_help_url;
}
void OAIServiceProviderParameter::setHelpUrl(const QString &help_url) {
    m_help_url = help_url;
    m_help_url_isSet = true;
}

bool OAIServiceProviderParameter::is_help_url_Set() const{
    return m_help_url_isSet;
}

bool OAIServiceProviderParameter::is_help_url_Valid() const{
    return m_help_url_isValid;
}

QString OAIServiceProviderParameter::getName() const {
    return m_name;
}
void OAIServiceProviderParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceProviderParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceProviderParameter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIServiceProviderParameter::getType() const {
    return m_type;
}
void OAIServiceProviderParameter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceProviderParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceProviderParameter::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIServiceProviderParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceProviderParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
