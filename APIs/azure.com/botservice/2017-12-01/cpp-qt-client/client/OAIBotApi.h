/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBotApi_H
#define OAI_OAIBotApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBot.h"
#include "OAIBotResponseList.h"
#include "OAICheckNameAvailabilityRequestBody.h"
#include "OAICheckNameAvailabilityResponseBody.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBotApi : public QObject {
    Q_OBJECT

public:
    OAIBotApi(const int timeOut = 0);
    ~OAIBotApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIBot [required]
    */
    virtual void botsCreate(const QString &resource_group_name, const QString &resource_name, const QString &api_version, const QString &subscription_id, const OAIBot &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void botsDelete(const QString &resource_group_name, const QString &resource_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void botsGet(const QString &resource_group_name, const QString &resource_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICheckNameAvailabilityRequestBody [required]
    */
    virtual void botsGetCheckNameAvailability(const QString &api_version, const OAICheckNameAvailabilityRequestBody &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void botsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void botsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIBot [required]
    */
    virtual void botsUpdate(const QString &resource_group_name, const QString &resource_name, const QString &api_version, const QString &subscription_id, const OAIBot &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void botsCreateCallback(OAIHttpRequestWorker *worker);
    void botsDeleteCallback(OAIHttpRequestWorker *worker);
    void botsGetCallback(OAIHttpRequestWorker *worker);
    void botsGetCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void botsListCallback(OAIHttpRequestWorker *worker);
    void botsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void botsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void botsCreateSignal(OAIBot summary);
    void botsDeleteSignal();
    void botsGetSignal(OAIBot summary);
    void botsGetCheckNameAvailabilitySignal(OAICheckNameAvailabilityResponseBody summary);
    void botsListSignal(OAIBotResponseList summary);
    void botsListByResourceGroupSignal(OAIBotResponseList summary);
    void botsUpdateSignal(OAIBot summary);


    void botsCreateSignalFull(OAIHttpRequestWorker *worker, OAIBot summary);
    void botsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void botsGetSignalFull(OAIHttpRequestWorker *worker, OAIBot summary);
    void botsGetCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameAvailabilityResponseBody summary);
    void botsListSignalFull(OAIHttpRequestWorker *worker, OAIBotResponseList summary);
    void botsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIBotResponseList summary);
    void botsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBot summary);

    Q_DECL_DEPRECATED_X("Use botsCreateSignalError() instead")
    void botsCreateSignalE(OAIBot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botsCreateSignalError(OAIBot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsDeleteSignalError() instead")
    void botsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void botsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsGetSignalError() instead")
    void botsGetSignalE(OAIBot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botsGetSignalError(OAIBot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsGetCheckNameAvailabilitySignalError() instead")
    void botsGetCheckNameAvailabilitySignalE(OAICheckNameAvailabilityResponseBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botsGetCheckNameAvailabilitySignalError(OAICheckNameAvailabilityResponseBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsListSignalError() instead")
    void botsListSignalE(OAIBotResponseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botsListSignalError(OAIBotResponseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsListByResourceGroupSignalError() instead")
    void botsListByResourceGroupSignalE(OAIBotResponseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botsListByResourceGroupSignalError(OAIBotResponseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsUpdateSignalError() instead")
    void botsUpdateSignalE(OAIBot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void botsUpdateSignalError(OAIBot summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use botsCreateSignalErrorFull() instead")
    void botsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsDeleteSignalErrorFull() instead")
    void botsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsGetSignalErrorFull() instead")
    void botsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsGetCheckNameAvailabilitySignalErrorFull() instead")
    void botsGetCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botsGetCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsListSignalErrorFull() instead")
    void botsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsListByResourceGroupSignalErrorFull() instead")
    void botsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use botsUpdateSignalErrorFull() instead")
    void botsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void botsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
