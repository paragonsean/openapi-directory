/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelegramChannelProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITelegramChannelProperties::OAITelegramChannelProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITelegramChannelProperties::OAITelegramChannelProperties() {
    this->initializeModel();
}

OAITelegramChannelProperties::~OAITelegramChannelProperties() {}

void OAITelegramChannelProperties::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_is_validated_isSet = false;
    m_is_validated_isValid = false;
}

void OAITelegramChannelProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITelegramChannelProperties::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_is_validated_isValid = ::OpenAPI::fromJsonValue(m_is_validated, json[QString("isValidated")]);
    m_is_validated_isSet = !json[QString("isValidated")].isNull() && m_is_validated_isValid;
}

QString OAITelegramChannelProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITelegramChannelProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_is_validated_isSet) {
        obj.insert(QString("isValidated"), ::OpenAPI::toJsonValue(m_is_validated));
    }
    return obj;
}

QString OAITelegramChannelProperties::getAccessToken() const {
    return m_access_token;
}
void OAITelegramChannelProperties::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAITelegramChannelProperties::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAITelegramChannelProperties::is_access_token_Valid() const{
    return m_access_token_isValid;
}

bool OAITelegramChannelProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAITelegramChannelProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAITelegramChannelProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAITelegramChannelProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

bool OAITelegramChannelProperties::isIsValidated() const {
    return m_is_validated;
}
void OAITelegramChannelProperties::setIsValidated(const bool &is_validated) {
    m_is_validated = is_validated;
    m_is_validated_isSet = true;
}

bool OAITelegramChannelProperties::is_is_validated_Set() const{
    return m_is_validated_isSet;
}

bool OAITelegramChannelProperties::is_is_validated_Valid() const{
    return m_is_validated_isValid;
}

bool OAITelegramChannelProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_validated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITelegramChannelProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_is_enabled_isValid && true;
}

} // namespace OpenAPI
