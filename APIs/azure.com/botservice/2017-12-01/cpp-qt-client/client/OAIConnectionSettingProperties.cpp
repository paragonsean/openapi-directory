/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionSettingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionSettingProperties::OAIConnectionSettingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionSettingProperties::OAIConnectionSettingProperties() {
    this->initializeModel();
}

OAIConnectionSettingProperties::~OAIConnectionSettingProperties() {}

void OAIConnectionSettingProperties::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_service_provider_display_name_isSet = false;
    m_service_provider_display_name_isValid = false;

    m_service_provider_id_isSet = false;
    m_service_provider_id_isValid = false;

    m_setting_id_isSet = false;
    m_setting_id_isValid = false;
}

void OAIConnectionSettingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionSettingProperties::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_service_provider_display_name_isValid = ::OpenAPI::fromJsonValue(m_service_provider_display_name, json[QString("serviceProviderDisplayName")]);
    m_service_provider_display_name_isSet = !json[QString("serviceProviderDisplayName")].isNull() && m_service_provider_display_name_isValid;

    m_service_provider_id_isValid = ::OpenAPI::fromJsonValue(m_service_provider_id, json[QString("serviceProviderId")]);
    m_service_provider_id_isSet = !json[QString("serviceProviderId")].isNull() && m_service_provider_id_isValid;

    m_setting_id_isValid = ::OpenAPI::fromJsonValue(m_setting_id, json[QString("settingId")]);
    m_setting_id_isSet = !json[QString("settingId")].isNull() && m_setting_id_isValid;
}

QString OAIConnectionSettingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionSettingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_scopes_isSet) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_service_provider_display_name_isSet) {
        obj.insert(QString("serviceProviderDisplayName"), ::OpenAPI::toJsonValue(m_service_provider_display_name));
    }
    if (m_service_provider_id_isSet) {
        obj.insert(QString("serviceProviderId"), ::OpenAPI::toJsonValue(m_service_provider_id));
    }
    if (m_setting_id_isSet) {
        obj.insert(QString("settingId"), ::OpenAPI::toJsonValue(m_setting_id));
    }
    return obj;
}

QString OAIConnectionSettingProperties::getClientId() const {
    return m_client_id;
}
void OAIConnectionSettingProperties::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIConnectionSettingProperties::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIConnectionSettingProperties::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIConnectionSettingProperties::getClientSecret() const {
    return m_client_secret;
}
void OAIConnectionSettingProperties::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIConnectionSettingProperties::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIConnectionSettingProperties::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QList<OAIConnectionSettingParameter> OAIConnectionSettingProperties::getParameters() const {
    return m_parameters;
}
void OAIConnectionSettingProperties::setParameters(const QList<OAIConnectionSettingParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIConnectionSettingProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIConnectionSettingProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIConnectionSettingProperties::getScopes() const {
    return m_scopes;
}
void OAIConnectionSettingProperties::setScopes(const QString &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIConnectionSettingProperties::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIConnectionSettingProperties::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIConnectionSettingProperties::getServiceProviderDisplayName() const {
    return m_service_provider_display_name;
}
void OAIConnectionSettingProperties::setServiceProviderDisplayName(const QString &service_provider_display_name) {
    m_service_provider_display_name = service_provider_display_name;
    m_service_provider_display_name_isSet = true;
}

bool OAIConnectionSettingProperties::is_service_provider_display_name_Set() const{
    return m_service_provider_display_name_isSet;
}

bool OAIConnectionSettingProperties::is_service_provider_display_name_Valid() const{
    return m_service_provider_display_name_isValid;
}

QString OAIConnectionSettingProperties::getServiceProviderId() const {
    return m_service_provider_id;
}
void OAIConnectionSettingProperties::setServiceProviderId(const QString &service_provider_id) {
    m_service_provider_id = service_provider_id;
    m_service_provider_id_isSet = true;
}

bool OAIConnectionSettingProperties::is_service_provider_id_Set() const{
    return m_service_provider_id_isSet;
}

bool OAIConnectionSettingProperties::is_service_provider_id_Valid() const{
    return m_service_provider_id_isValid;
}

QString OAIConnectionSettingProperties::getSettingId() const {
    return m_setting_id;
}
void OAIConnectionSettingProperties::setSettingId(const QString &setting_id) {
    m_setting_id = setting_id;
    m_setting_id_isSet = true;
}

bool OAIConnectionSettingProperties::is_setting_id_Set() const{
    return m_setting_id_isSet;
}

bool OAIConnectionSettingProperties::is_setting_id_Valid() const{
    return m_setting_id_isValid;
}

bool OAIConnectionSettingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setting_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionSettingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
