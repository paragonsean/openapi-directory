/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectLineSite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectLineSite::OAIDirectLineSite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectLineSite::OAIDirectLineSite() {
    this->initializeModel();
}

OAIDirectLineSite::~OAIDirectLineSite() {}

void OAIDirectLineSite::initializeModel() {

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_is_v1_enabled_isSet = false;
    m_is_v1_enabled_isValid = false;

    m_is_v3_enabled_isSet = false;
    m_is_v3_enabled_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_key2_isSet = false;
    m_key2_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;
}

void OAIDirectLineSite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectLineSite::fromJsonObject(QJsonObject json) {

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_is_v1_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_v1_enabled, json[QString("isV1Enabled")]);
    m_is_v1_enabled_isSet = !json[QString("isV1Enabled")].isNull() && m_is_v1_enabled_isValid;

    m_is_v3_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_v3_enabled, json[QString("isV3Enabled")]);
    m_is_v3_enabled_isSet = !json[QString("isV3Enabled")].isNull() && m_is_v3_enabled_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_key2_isValid = ::OpenAPI::fromJsonValue(m_key2, json[QString("key2")]);
    m_key2_isSet = !json[QString("key2")].isNull() && m_key2_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("siteName")]);
    m_site_name_isSet = !json[QString("siteName")].isNull() && m_site_name_isValid;
}

QString OAIDirectLineSite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectLineSite::asJsonObject() const {
    QJsonObject obj;
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_is_v1_enabled_isSet) {
        obj.insert(QString("isV1Enabled"), ::OpenAPI::toJsonValue(m_is_v1_enabled));
    }
    if (m_is_v3_enabled_isSet) {
        obj.insert(QString("isV3Enabled"), ::OpenAPI::toJsonValue(m_is_v3_enabled));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_key2_isSet) {
        obj.insert(QString("key2"), ::OpenAPI::toJsonValue(m_key2));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("siteName"), ::OpenAPI::toJsonValue(m_site_name));
    }
    return obj;
}

bool OAIDirectLineSite::isIsEnabled() const {
    return m_is_enabled;
}
void OAIDirectLineSite::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIDirectLineSite::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIDirectLineSite::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

bool OAIDirectLineSite::isIsV1Enabled() const {
    return m_is_v1_enabled;
}
void OAIDirectLineSite::setIsV1Enabled(const bool &is_v1_enabled) {
    m_is_v1_enabled = is_v1_enabled;
    m_is_v1_enabled_isSet = true;
}

bool OAIDirectLineSite::is_is_v1_enabled_Set() const{
    return m_is_v1_enabled_isSet;
}

bool OAIDirectLineSite::is_is_v1_enabled_Valid() const{
    return m_is_v1_enabled_isValid;
}

bool OAIDirectLineSite::isIsV3Enabled() const {
    return m_is_v3_enabled;
}
void OAIDirectLineSite::setIsV3Enabled(const bool &is_v3_enabled) {
    m_is_v3_enabled = is_v3_enabled;
    m_is_v3_enabled_isSet = true;
}

bool OAIDirectLineSite::is_is_v3_enabled_Set() const{
    return m_is_v3_enabled_isSet;
}

bool OAIDirectLineSite::is_is_v3_enabled_Valid() const{
    return m_is_v3_enabled_isValid;
}

QString OAIDirectLineSite::getKey() const {
    return m_key;
}
void OAIDirectLineSite::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDirectLineSite::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDirectLineSite::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIDirectLineSite::getKey2() const {
    return m_key2;
}
void OAIDirectLineSite::setKey2(const QString &key2) {
    m_key2 = key2;
    m_key2_isSet = true;
}

bool OAIDirectLineSite::is_key2_Set() const{
    return m_key2_isSet;
}

bool OAIDirectLineSite::is_key2_Valid() const{
    return m_key2_isValid;
}

QString OAIDirectLineSite::getSiteId() const {
    return m_site_id;
}
void OAIDirectLineSite::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIDirectLineSite::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIDirectLineSite::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAIDirectLineSite::getSiteName() const {
    return m_site_name;
}
void OAIDirectLineSite::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAIDirectLineSite::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAIDirectLineSite::is_site_name_Valid() const{
    return m_site_name_isValid;
}

bool OAIDirectLineSite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_v1_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_v3_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectLineSite::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_enabled_isValid && m_is_v1_enabled_isValid && m_is_v3_enabled_isValid && m_site_name_isValid && true;
}

} // namespace OpenAPI
