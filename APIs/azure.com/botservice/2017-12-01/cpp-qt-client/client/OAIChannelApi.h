/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelApi_H
#define OAI_OAIChannelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBotChannel.h"
#include "OAIChannelResponseList.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelApi : public QObject {
    Q_OBJECT

public:
    OAIChannelApi(const int timeOut = 0);
    ~OAIChannelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  channel_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIBotChannel [required]
    */
    virtual void channelsCreate(const QString &resource_group_name, const QString &resource_name, const QString &channel_name, const QString &api_version, const QString &subscription_id, const OAIBotChannel &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  channel_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void channelsDelete(const QString &resource_group_name, const QString &resource_name, const QString &channel_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  channel_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void channelsGet(const QString &resource_group_name, const QString &resource_name, const QString &channel_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void channelsListByResourceGroup(const QString &resource_group_name, const QString &resource_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  channel_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void channelsListWithKeys(const QString &resource_group_name, const QString &resource_name, const QString &channel_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  channel_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIBotChannel [required]
    */
    virtual void channelsUpdate(const QString &resource_group_name, const QString &resource_name, const QString &channel_name, const QString &api_version, const QString &subscription_id, const OAIBotChannel &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void channelsCreateCallback(OAIHttpRequestWorker *worker);
    void channelsDeleteCallback(OAIHttpRequestWorker *worker);
    void channelsGetCallback(OAIHttpRequestWorker *worker);
    void channelsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void channelsListWithKeysCallback(OAIHttpRequestWorker *worker);
    void channelsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void channelsCreateSignal(OAIBotChannel summary);
    void channelsDeleteSignal();
    void channelsGetSignal(OAIBotChannel summary);
    void channelsListByResourceGroupSignal(OAIChannelResponseList summary);
    void channelsListWithKeysSignal(OAIBotChannel summary);
    void channelsUpdateSignal(OAIBotChannel summary);


    void channelsCreateSignalFull(OAIHttpRequestWorker *worker, OAIBotChannel summary);
    void channelsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void channelsGetSignalFull(OAIHttpRequestWorker *worker, OAIBotChannel summary);
    void channelsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIChannelResponseList summary);
    void channelsListWithKeysSignalFull(OAIHttpRequestWorker *worker, OAIBotChannel summary);
    void channelsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBotChannel summary);

    Q_DECL_DEPRECATED_X("Use channelsCreateSignalError() instead")
    void channelsCreateSignalE(OAIBotChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsCreateSignalError(OAIBotChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsDeleteSignalError() instead")
    void channelsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void channelsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsGetSignalError() instead")
    void channelsGetSignalE(OAIBotChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsGetSignalError(OAIBotChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsListByResourceGroupSignalError() instead")
    void channelsListByResourceGroupSignalE(OAIChannelResponseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsListByResourceGroupSignalError(OAIChannelResponseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsListWithKeysSignalError() instead")
    void channelsListWithKeysSignalE(OAIBotChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsListWithKeysSignalError(OAIBotChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsUpdateSignalError() instead")
    void channelsUpdateSignalE(OAIBotChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsUpdateSignalError(OAIBotChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use channelsCreateSignalErrorFull() instead")
    void channelsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsDeleteSignalErrorFull() instead")
    void channelsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsGetSignalErrorFull() instead")
    void channelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsListByResourceGroupSignalErrorFull() instead")
    void channelsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsListWithKeysSignalErrorFull() instead")
    void channelsListWithKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsListWithKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use channelsUpdateSignalErrorFull() instead")
    void channelsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void channelsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
