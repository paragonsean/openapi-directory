/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TelegramChannelProperties model module.
 * @module model/TelegramChannelProperties
 * @version 2017-12-01
 */
class TelegramChannelProperties {
    /**
     * Constructs a new <code>TelegramChannelProperties</code>.
     * The parameters to provide for the Telegram channel.
     * @alias module:model/TelegramChannelProperties
     * @param accessToken {String} The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
     * @param isEnabled {Boolean} Whether this channel is enabled for the bot
     */
    constructor(accessToken, isEnabled) { 
        
        TelegramChannelProperties.initialize(this, accessToken, isEnabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessToken, isEnabled) { 
        obj['accessToken'] = accessToken;
        obj['isEnabled'] = isEnabled;
    }

    /**
     * Constructs a <code>TelegramChannelProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TelegramChannelProperties} obj Optional instance to populate.
     * @return {module:model/TelegramChannelProperties} The populated <code>TelegramChannelProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TelegramChannelProperties();

            if (data.hasOwnProperty('accessToken')) {
                obj['accessToken'] = ApiClient.convertToType(data['accessToken'], 'String');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isValidated')) {
                obj['isValidated'] = ApiClient.convertToType(data['isValidated'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TelegramChannelProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TelegramChannelProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TelegramChannelProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accessToken'] && !(typeof data['accessToken'] === 'string' || data['accessToken'] instanceof String)) {
            throw new Error("Expected the field `accessToken` to be a primitive type in the JSON string but got " + data['accessToken']);
        }

        return true;
    }


}

TelegramChannelProperties.RequiredProperties = ["accessToken", "isEnabled"];

/**
 * The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
 * @member {String} accessToken
 */
TelegramChannelProperties.prototype['accessToken'] = undefined;

/**
 * Whether this channel is enabled for the bot
 * @member {Boolean} isEnabled
 */
TelegramChannelProperties.prototype['isEnabled'] = undefined;

/**
 * Whether this channel is validated for the bot
 * @member {Boolean} isValidated
 */
TelegramChannelProperties.prototype['isValidated'] = undefined;






export default TelegramChannelProperties;

