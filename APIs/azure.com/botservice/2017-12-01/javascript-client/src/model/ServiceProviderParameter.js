/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceProviderParameter model module.
 * @module model/ServiceProviderParameter
 * @version 2017-12-01
 */
class ServiceProviderParameter {
    /**
     * Constructs a new <code>ServiceProviderParameter</code>.
     * Extra Parameters specific to each Service Provider
     * @alias module:model/ServiceProviderParameter
     */
    constructor() { 
        
        ServiceProviderParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceProviderParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceProviderParameter} obj Optional instance to populate.
     * @return {module:model/ServiceProviderParameter} The populated <code>ServiceProviderParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceProviderParameter();

            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('helpUrl')) {
                obj['helpUrl'] = ApiClient.convertToType(data['helpUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceProviderParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceProviderParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['default'] && !(typeof data['default'] === 'string' || data['default'] instanceof String)) {
            throw new Error("Expected the field `default` to be a primitive type in the JSON string but got " + data['default']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['helpUrl'] && !(typeof data['helpUrl'] === 'string' || data['helpUrl'] instanceof String)) {
            throw new Error("Expected the field `helpUrl` to be a primitive type in the JSON string but got " + data['helpUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Default Name for the Service Provider
 * @member {String} default
 */
ServiceProviderParameter.prototype['default'] = undefined;

/**
 * Description of the Service Provider
 * @member {String} description
 */
ServiceProviderParameter.prototype['description'] = undefined;

/**
 * Display Name of the Service Provider
 * @member {String} displayName
 */
ServiceProviderParameter.prototype['displayName'] = undefined;

/**
 * Help Url for the  Service Provider
 * @member {String} helpUrl
 */
ServiceProviderParameter.prototype['helpUrl'] = undefined;

/**
 * Name of the Service Provider
 * @member {String} name
 */
ServiceProviderParameter.prototype['name'] = undefined;

/**
 * Type of the Service Provider
 * @member {String} type
 */
ServiceProviderParameter.prototype['type'] = undefined;






export default ServiceProviderParameter;

