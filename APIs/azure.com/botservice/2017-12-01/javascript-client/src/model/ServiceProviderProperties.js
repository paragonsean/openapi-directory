/**
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceProviderParameter from './ServiceProviderParameter';

/**
 * The ServiceProviderProperties model module.
 * @module model/ServiceProviderProperties
 * @version 2017-12-01
 */
class ServiceProviderProperties {
    /**
     * Constructs a new <code>ServiceProviderProperties</code>.
     * The Object used to describe a Service Provider supported by Bot Service
     * @alias module:model/ServiceProviderProperties
     */
    constructor() { 
        
        ServiceProviderProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceProviderProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceProviderProperties} obj Optional instance to populate.
     * @return {module:model/ServiceProviderProperties} The populated <code>ServiceProviderProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceProviderProperties();

            if (data.hasOwnProperty('devPortalUrl')) {
                obj['devPortalUrl'] = ApiClient.convertToType(data['devPortalUrl'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ServiceProviderParameter]);
            }
            if (data.hasOwnProperty('serviceProviderName')) {
                obj['serviceProviderName'] = ApiClient.convertToType(data['serviceProviderName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceProviderProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceProviderProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['devPortalUrl'] && !(typeof data['devPortalUrl'] === 'string' || data['devPortalUrl'] instanceof String)) {
            throw new Error("Expected the field `devPortalUrl` to be a primitive type in the JSON string but got " + data['devPortalUrl']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['iconUrl'] && !(typeof data['iconUrl'] === 'string' || data['iconUrl'] instanceof String)) {
            throw new Error("Expected the field `iconUrl` to be a primitive type in the JSON string but got " + data['iconUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ServiceProviderParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceProviderName'] && !(typeof data['serviceProviderName'] === 'string' || data['serviceProviderName'] instanceof String)) {
            throw new Error("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got " + data['serviceProviderName']);
        }

        return true;
    }


}



/**
 * Display Name of the Service Provider
 * @member {String} devPortalUrl
 */
ServiceProviderProperties.prototype['devPortalUrl'] = undefined;

/**
 * Display Name of the Service Provider
 * @member {String} displayName
 */
ServiceProviderProperties.prototype['displayName'] = undefined;

/**
 * Display Name of the Service Provider
 * @member {String} iconUrl
 */
ServiceProviderProperties.prototype['iconUrl'] = undefined;

/**
 * Id for Service Provider
 * @member {String} id
 */
ServiceProviderProperties.prototype['id'] = undefined;

/**
 * The list of parameters for the Service Provider
 * @member {Array.<module:model/ServiceProviderParameter>} parameters
 */
ServiceProviderProperties.prototype['parameters'] = undefined;

/**
 * Display Name of the Service Provider
 * @member {String} serviceProviderName
 */
ServiceProviderProperties.prototype['serviceProviderName'] = undefined;






export default ServiceProviderProperties;

