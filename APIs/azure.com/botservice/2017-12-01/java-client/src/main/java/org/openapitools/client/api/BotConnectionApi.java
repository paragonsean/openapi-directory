/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectionSetting;
import org.openapitools.client.model.ConnectionSettingResponseList;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BotConnectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BotConnectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BotConnectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for botConnectionCreate
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for creating the Connection Setting. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionCreateCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botConnectionCreateValidateBeforeCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botConnectionCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botConnectionCreate(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling botConnectionCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botConnectionCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botConnectionCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling botConnectionCreate(Async)");
        }

        return botConnectionCreateCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Register a new Auth Connection for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for creating the Connection Setting. (required)
     * @return ConnectionSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionSetting botConnectionCreate(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters) throws ApiException {
        ApiResponse<ConnectionSetting> localVarResp = botConnectionCreateWithHttpInfo(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Register a new Auth Connection for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for creating the Connection Setting. (required)
     * @return ApiResponse&lt;ConnectionSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionSetting> botConnectionCreateWithHttpInfo(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters) throws ApiException {
        okhttp3.Call localVarCall = botConnectionCreateValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ConnectionSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register a new Auth Connection for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for creating the Connection Setting. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionCreateAsync(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters, final ApiCallback<ConnectionSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = botConnectionCreateValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectionSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botConnectionDelete
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionDeleteCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botConnectionDeleteValidateBeforeCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botConnectionDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botConnectionDelete(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling botConnectionDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botConnectionDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botConnectionDelete(Async)");
        }

        return botConnectionDeleteCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void botConnectionDelete(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        botConnectionDeleteWithHttpInfo(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> botConnectionDeleteWithHttpInfo(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = botConnectionDeleteValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionDeleteAsync(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = botConnectionDeleteValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for botConnectionGet
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionGetCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botConnectionGetValidateBeforeCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botConnectionGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botConnectionGet(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling botConnectionGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botConnectionGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botConnectionGet(Async)");
        }

        return botConnectionGetCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ConnectionSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionSetting botConnectionGet(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConnectionSetting> localVarResp = botConnectionGetWithHttpInfo(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;ConnectionSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionSetting> botConnectionGetWithHttpInfo(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = botConnectionGetValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConnectionSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionGetAsync(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback<ConnectionSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = botConnectionGetValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectionSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botConnectionListByBotService
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with \&quot;value\&quot; property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionListByBotServiceCall(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botConnectionListByBotServiceValidateBeforeCall(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botConnectionListByBotService(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botConnectionListByBotService(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botConnectionListByBotService(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botConnectionListByBotService(Async)");
        }

        return botConnectionListByBotServiceCall(resourceGroupName, resourceName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @return ConnectionSettingResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with \&quot;value\&quot; property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionSettingResponseList botConnectionListByBotService(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ConnectionSettingResponseList> localVarResp = botConnectionListByBotServiceWithHttpInfo(resourceGroupName, resourceName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @return ApiResponse&lt;ConnectionSettingResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with \&quot;value\&quot; property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionSettingResponseList> botConnectionListByBotServiceWithHttpInfo(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = botConnectionListByBotServiceValidateBeforeCall(resourceGroupName, resourceName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionSettingResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with \&quot;value\&quot; property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionListByBotServiceAsync(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion, final ApiCallback<ConnectionSettingResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = botConnectionListByBotServiceValidateBeforeCall(resourceGroupName, resourceName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionSettingResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botConnectionListWithSecrets
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionListWithSecretsCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}/listWithSecrets"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botConnectionListWithSecretsValidateBeforeCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botConnectionListWithSecrets(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botConnectionListWithSecrets(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling botConnectionListWithSecrets(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botConnectionListWithSecrets(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botConnectionListWithSecrets(Async)");
        }

        return botConnectionListWithSecretsCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ConnectionSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionSetting botConnectionListWithSecrets(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConnectionSetting> localVarResp = botConnectionListWithSecretsWithHttpInfo(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;ConnectionSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionSetting> botConnectionListWithSecretsWithHttpInfo(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = botConnectionListWithSecretsValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConnectionSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionListWithSecretsAsync(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback<ConnectionSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = botConnectionListWithSecretsValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectionSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for botConnectionUpdate
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for updating the Connection Setting. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionUpdateCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call botConnectionUpdateValidateBeforeCall(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling botConnectionUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling botConnectionUpdate(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling botConnectionUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling botConnectionUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling botConnectionUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling botConnectionUpdate(Async)");
        }

        return botConnectionUpdateCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for updating the Connection Setting. (required)
     * @return ConnectionSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionSetting botConnectionUpdate(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters) throws ApiException {
        ApiResponse<ConnectionSetting> localVarResp = botConnectionUpdateWithHttpInfo(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for updating the Connection Setting. (required)
     * @return ApiResponse&lt;ConnectionSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionSetting> botConnectionUpdateWithHttpInfo(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters) throws ApiException {
        okhttp3.Call localVarCall = botConnectionUpdateValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ConnectionSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param connectionName The name of the Bot Service Connection Setting resource (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for updating the Connection Setting. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call botConnectionUpdateAsync(String resourceGroupName, String resourceName, String connectionName, String apiVersion, String subscriptionId, ConnectionSetting parameters, final ApiCallback<ConnectionSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = botConnectionUpdateValidateBeforeCall(resourceGroupName, resourceName, connectionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectionSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
