/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BotChannel;
import org.openapitools.client.model.ChannelResponseList;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for channelsCreate
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsCreateCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "channelName" + "}", localVarApiClient.escapeString(channelName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelsCreateValidateBeforeCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling channelsCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling channelsCreate(Async)");
        }

        // verify the required parameter 'channelName' is set
        if (channelName == null) {
            throw new ApiException("Missing the required parameter 'channelName' when calling channelsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling channelsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling channelsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling channelsCreate(Async)");
        }

        return channelsCreateCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @return BotChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public BotChannel channelsCreate(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters) throws ApiException {
        ApiResponse<BotChannel> localVarResp = channelsCreateWithHttpInfo(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @return ApiResponse&lt;BotChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BotChannel> channelsCreateWithHttpInfo(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters) throws ApiException {
        okhttp3.Call localVarCall = channelsCreateValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<BotChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created successfully or already existed, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsCreateAsync(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters, final ApiCallback<BotChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelsCreateValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<BotChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for channelsDelete
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsDeleteCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "channelName" + "}", localVarApiClient.escapeString(channelName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelsDeleteValidateBeforeCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling channelsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling channelsDelete(Async)");
        }

        // verify the required parameter 'channelName' is set
        if (channelName == null) {
            throw new ApiException("Missing the required parameter 'channelName' when calling channelsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling channelsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling channelsDelete(Async)");
        }

        return channelsDeleteCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a Channel registration from a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void channelsDelete(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId) throws ApiException {
        channelsDeleteWithHttpInfo(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a Channel registration from a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> channelsDeleteWithHttpInfo(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = channelsDeleteValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a Channel registration from a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A 200 (OK) should be returned if the object exists and was deleted successfully; </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> a 204 (NoContent) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsDeleteAsync(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelsDeleteValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for channelsGet
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsGetCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "channelName" + "}", localVarApiClient.escapeString(channelName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelsGetValidateBeforeCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling channelsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling channelsGet(Async)");
        }

        // verify the required parameter 'channelName' is set
        if (channelName == null) {
            throw new ApiException("Missing the required parameter 'channelName' when calling channelsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling channelsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling channelsGet(Async)");
        }

        return channelsGetCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns a BotService Channel registration specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return BotChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public BotChannel channelsGet(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<BotChannel> localVarResp = channelsGetWithHttpInfo(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a BotService Channel registration specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;BotChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BotChannel> channelsGetWithHttpInfo(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = channelsGetValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<BotChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a BotService Channel registration specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Bot resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsGetAsync(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback<BotChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelsGetValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<BotChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for channelsListByResourceGroup
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with \&quot;value\&quot; property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsListByResourceGroupCall(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelsListByResourceGroupValidateBeforeCall(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling channelsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling channelsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling channelsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling channelsListByResourceGroup(Async)");
        }

        return channelsListByResourceGroupCall(resourceGroupName, resourceName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns all the Channel registrations of a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @return ChannelResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with \&quot;value\&quot; property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ChannelResponseList channelsListByResourceGroup(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ChannelResponseList> localVarResp = channelsListByResourceGroupWithHttpInfo(resourceGroupName, resourceName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all the Channel registrations of a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @return ApiResponse&lt;ChannelResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with \&quot;value\&quot; property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelResponseList> channelsListByResourceGroupWithHttpInfo(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = channelsListByResourceGroupValidateBeforeCall(resourceGroupName, resourceName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ChannelResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all the Channel registrations of a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code. The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with \&quot;value\&quot; property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility. The nextLink should be implemented using following query parameters: · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink. · top: the optional client query parameter which defines the maximum number of records to be returned by the server. Implementation details: · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query.  · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response.  Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsListByResourceGroupAsync(String resourceGroupName, String resourceName, String subscriptionId, String apiVersion, final ApiCallback<ChannelResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelsListByResourceGroupValidateBeforeCall(resourceGroupName, resourceName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ChannelResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for channelsListWithKeys
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is retrieved successfully, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsListWithKeysCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "channelName" + "}", localVarApiClient.escapeString(channelName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelsListWithKeysValidateBeforeCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling channelsListWithKeys(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling channelsListWithKeys(Async)");
        }

        // verify the required parameter 'channelName' is set
        if (channelName == null) {
            throw new ApiException("Missing the required parameter 'channelName' when calling channelsListWithKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling channelsListWithKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling channelsListWithKeys(Async)");
        }

        return channelsListWithKeysCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists a Channel registration for a Bot Service including secrets
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return BotChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is retrieved successfully, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public BotChannel channelsListWithKeys(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<BotChannel> localVarResp = channelsListWithKeysWithHttpInfo(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists a Channel registration for a Bot Service including secrets
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @return ApiResponse&lt;BotChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is retrieved successfully, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BotChannel> channelsListWithKeysWithHttpInfo(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = channelsListWithKeysValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<BotChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists a Channel registration for a Bot Service including secrets
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is retrieved successfully, the service should return 200 (OK). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsListWithKeysAsync(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, final ApiCallback<BotChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelsListWithKeysValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<BotChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for channelsUpdate
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsUpdateCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "channelName" + "}", localVarApiClient.escapeString(channelName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelsUpdateValidateBeforeCall(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling channelsUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling channelsUpdate(Async)");
        }

        // verify the required parameter 'channelName' is set
        if (channelName == null) {
            throw new ApiException("Missing the required parameter 'channelName' when calling channelsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling channelsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling channelsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling channelsUpdate(Async)");
        }

        return channelsUpdateCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @return BotChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public BotChannel channelsUpdate(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters) throws ApiException {
        ApiResponse<BotChannel> localVarResp = channelsUpdateWithHttpInfo(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @return ApiResponse&lt;BotChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BotChannel> channelsUpdateWithHttpInfo(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters) throws ApiException {
        okhttp3.Call localVarCall = channelsUpdateValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<BotChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription. (required)
     * @param resourceName The name of the Bot resource. (required)
     * @param channelName The name of the Channel resource. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2017-12-01 (required)
     * @param subscriptionId Azure Subscription ID. (required)
     * @param parameters The parameters to provide for the created bot. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource provider should return 200 (OK) to indicate that the operation completed successfully.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call channelsUpdateAsync(String resourceGroupName, String resourceName, String channelName, String apiVersion, String subscriptionId, BotChannel parameters, final ApiCallback<BotChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelsUpdateValidateBeforeCall(resourceGroupName, resourceName, channelName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<BotChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
