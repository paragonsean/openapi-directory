/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters to provide for the Bot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:02.319136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BotProperties {
  public static final String SERIALIZED_NAME_CONFIGURED_CHANNELS = "configuredChannels";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_CHANNELS)
  private List<String> configuredChannels = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVELOPER_APP_INSIGHT_KEY = "developerAppInsightKey";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_APP_INSIGHT_KEY)
  private String developerAppInsightKey;

  public static final String SERIALIZED_NAME_DEVELOPER_APP_INSIGHTS_API_KEY = "developerAppInsightsApiKey";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_APP_INSIGHTS_API_KEY)
  private String developerAppInsightsApiKey;

  public static final String SERIALIZED_NAME_DEVELOPER_APP_INSIGHTS_APPLICATION_ID = "developerAppInsightsApplicationId";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_APP_INSIGHTS_APPLICATION_ID)
  private String developerAppInsightsApplicationId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLED_CHANNELS = "enabledChannels";
  @SerializedName(SERIALIZED_NAME_ENABLED_CHANNELS)
  private List<String> enabledChannels = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_ENDPOINT_VERSION = "endpointVersion";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_VERSION)
  private String endpointVersion;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_LUIS_APP_IDS = "luisAppIds";
  @SerializedName(SERIALIZED_NAME_LUIS_APP_IDS)
  private List<String> luisAppIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LUIS_KEY = "luisKey";
  @SerializedName(SERIALIZED_NAME_LUIS_KEY)
  private String luisKey;

  public static final String SERIALIZED_NAME_MSA_APP_ID = "msaAppId";
  @SerializedName(SERIALIZED_NAME_MSA_APP_ID)
  private String msaAppId;

  public BotProperties() {
  }

  public BotProperties(
     List<String> configuredChannels, 
     List<String> enabledChannels, 
     String endpointVersion
  ) {
    this();
    this.configuredChannels = configuredChannels;
    this.enabledChannels = enabledChannels;
    this.endpointVersion = endpointVersion;
  }

  /**
   * Collection of channels for which the bot is configured
   * @return configuredChannels
   */
  @javax.annotation.Nullable
  public List<String> getConfiguredChannels() {
    return configuredChannels;
  }



  public BotProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the bot
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BotProperties developerAppInsightKey(String developerAppInsightKey) {
    this.developerAppInsightKey = developerAppInsightKey;
    return this;
  }

  /**
   * The Application Insights key
   * @return developerAppInsightKey
   */
  @javax.annotation.Nullable
  public String getDeveloperAppInsightKey() {
    return developerAppInsightKey;
  }

  public void setDeveloperAppInsightKey(String developerAppInsightKey) {
    this.developerAppInsightKey = developerAppInsightKey;
  }


  public BotProperties developerAppInsightsApiKey(String developerAppInsightsApiKey) {
    this.developerAppInsightsApiKey = developerAppInsightsApiKey;
    return this;
  }

  /**
   * The Application Insights Api Key
   * @return developerAppInsightsApiKey
   */
  @javax.annotation.Nullable
  public String getDeveloperAppInsightsApiKey() {
    return developerAppInsightsApiKey;
  }

  public void setDeveloperAppInsightsApiKey(String developerAppInsightsApiKey) {
    this.developerAppInsightsApiKey = developerAppInsightsApiKey;
  }


  public BotProperties developerAppInsightsApplicationId(String developerAppInsightsApplicationId) {
    this.developerAppInsightsApplicationId = developerAppInsightsApplicationId;
    return this;
  }

  /**
   * The Application Insights App Id
   * @return developerAppInsightsApplicationId
   */
  @javax.annotation.Nullable
  public String getDeveloperAppInsightsApplicationId() {
    return developerAppInsightsApplicationId;
  }

  public void setDeveloperAppInsightsApplicationId(String developerAppInsightsApplicationId) {
    this.developerAppInsightsApplicationId = developerAppInsightsApplicationId;
  }


  public BotProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The Name of the bot
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Collection of channels for which the bot is enabled
   * @return enabledChannels
   */
  @javax.annotation.Nullable
  public List<String> getEnabledChannels() {
    return enabledChannels;
  }



  public BotProperties endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * The bot&#39;s endpoint
   * @return endpoint
   */
  @javax.annotation.Nonnull
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  /**
   * The bot&#39;s endpoint version
   * @return endpointVersion
   */
  @javax.annotation.Nullable
  public String getEndpointVersion() {
    return endpointVersion;
  }



  public BotProperties iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * The Icon Url of the bot
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public BotProperties luisAppIds(List<String> luisAppIds) {
    this.luisAppIds = luisAppIds;
    return this;
  }

  public BotProperties addLuisAppIdsItem(String luisAppIdsItem) {
    if (this.luisAppIds == null) {
      this.luisAppIds = new ArrayList<>();
    }
    this.luisAppIds.add(luisAppIdsItem);
    return this;
  }

  /**
   * Collection of LUIS App Ids
   * @return luisAppIds
   */
  @javax.annotation.Nullable
  public List<String> getLuisAppIds() {
    return luisAppIds;
  }

  public void setLuisAppIds(List<String> luisAppIds) {
    this.luisAppIds = luisAppIds;
  }


  public BotProperties luisKey(String luisKey) {
    this.luisKey = luisKey;
    return this;
  }

  /**
   * The LUIS Key
   * @return luisKey
   */
  @javax.annotation.Nullable
  public String getLuisKey() {
    return luisKey;
  }

  public void setLuisKey(String luisKey) {
    this.luisKey = luisKey;
  }


  public BotProperties msaAppId(String msaAppId) {
    this.msaAppId = msaAppId;
    return this;
  }

  /**
   * Microsoft App Id for the bot
   * @return msaAppId
   */
  @javax.annotation.Nonnull
  public String getMsaAppId() {
    return msaAppId;
  }

  public void setMsaAppId(String msaAppId) {
    this.msaAppId = msaAppId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BotProperties botProperties = (BotProperties) o;
    return Objects.equals(this.configuredChannels, botProperties.configuredChannels) &&
        Objects.equals(this.description, botProperties.description) &&
        Objects.equals(this.developerAppInsightKey, botProperties.developerAppInsightKey) &&
        Objects.equals(this.developerAppInsightsApiKey, botProperties.developerAppInsightsApiKey) &&
        Objects.equals(this.developerAppInsightsApplicationId, botProperties.developerAppInsightsApplicationId) &&
        Objects.equals(this.displayName, botProperties.displayName) &&
        Objects.equals(this.enabledChannels, botProperties.enabledChannels) &&
        Objects.equals(this.endpoint, botProperties.endpoint) &&
        Objects.equals(this.endpointVersion, botProperties.endpointVersion) &&
        Objects.equals(this.iconUrl, botProperties.iconUrl) &&
        Objects.equals(this.luisAppIds, botProperties.luisAppIds) &&
        Objects.equals(this.luisKey, botProperties.luisKey) &&
        Objects.equals(this.msaAppId, botProperties.msaAppId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configuredChannels, description, developerAppInsightKey, developerAppInsightsApiKey, developerAppInsightsApplicationId, displayName, enabledChannels, endpoint, endpointVersion, iconUrl, luisAppIds, luisKey, msaAppId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BotProperties {\n");
    sb.append("    configuredChannels: ").append(toIndentedString(configuredChannels)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    developerAppInsightKey: ").append(toIndentedString(developerAppInsightKey)).append("\n");
    sb.append("    developerAppInsightsApiKey: ").append(toIndentedString(developerAppInsightsApiKey)).append("\n");
    sb.append("    developerAppInsightsApplicationId: ").append(toIndentedString(developerAppInsightsApplicationId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enabledChannels: ").append(toIndentedString(enabledChannels)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    endpointVersion: ").append(toIndentedString(endpointVersion)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    luisAppIds: ").append(toIndentedString(luisAppIds)).append("\n");
    sb.append("    luisKey: ").append(toIndentedString(luisKey)).append("\n");
    sb.append("    msaAppId: ").append(toIndentedString(msaAppId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuredChannels");
    openapiFields.add("description");
    openapiFields.add("developerAppInsightKey");
    openapiFields.add("developerAppInsightsApiKey");
    openapiFields.add("developerAppInsightsApplicationId");
    openapiFields.add("displayName");
    openapiFields.add("enabledChannels");
    openapiFields.add("endpoint");
    openapiFields.add("endpointVersion");
    openapiFields.add("iconUrl");
    openapiFields.add("luisAppIds");
    openapiFields.add("luisKey");
    openapiFields.add("msaAppId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("msaAppId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BotProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BotProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BotProperties is not found in the empty JSON string", BotProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BotProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BotProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BotProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("configuredChannels") != null && !jsonObj.get("configuredChannels").isJsonNull() && !jsonObj.get("configuredChannels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuredChannels` to be an array in the JSON string but got `%s`", jsonObj.get("configuredChannels").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("developerAppInsightKey") != null && !jsonObj.get("developerAppInsightKey").isJsonNull()) && !jsonObj.get("developerAppInsightKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerAppInsightKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerAppInsightKey").toString()));
      }
      if ((jsonObj.get("developerAppInsightsApiKey") != null && !jsonObj.get("developerAppInsightsApiKey").isJsonNull()) && !jsonObj.get("developerAppInsightsApiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerAppInsightsApiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerAppInsightsApiKey").toString()));
      }
      if ((jsonObj.get("developerAppInsightsApplicationId") != null && !jsonObj.get("developerAppInsightsApplicationId").isJsonNull()) && !jsonObj.get("developerAppInsightsApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerAppInsightsApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerAppInsightsApplicationId").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabledChannels") != null && !jsonObj.get("enabledChannels").isJsonNull() && !jsonObj.get("enabledChannels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledChannels` to be an array in the JSON string but got `%s`", jsonObj.get("enabledChannels").toString()));
      }
      if (!jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("endpointVersion") != null && !jsonObj.get("endpointVersion").isJsonNull()) && !jsonObj.get("endpointVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointVersion").toString()));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("luisAppIds") != null && !jsonObj.get("luisAppIds").isJsonNull() && !jsonObj.get("luisAppIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `luisAppIds` to be an array in the JSON string but got `%s`", jsonObj.get("luisAppIds").toString()));
      }
      if ((jsonObj.get("luisKey") != null && !jsonObj.get("luisKey").isJsonNull()) && !jsonObj.get("luisKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `luisKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("luisKey").toString()));
      }
      if (!jsonObj.get("msaAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msaAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msaAppId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BotProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BotProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BotProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BotProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BotProperties>() {
           @Override
           public void write(JsonWriter out, BotProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BotProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BotProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BotProperties
   * @throws IOException if the JSON string is invalid with respect to BotProperties
   */
  public static BotProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BotProperties.class);
  }

  /**
   * Convert an instance of BotProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

