/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters to provide for the Microsoft Teams channel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:02.319136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SkypeChannelProperties {
  public static final String SERIALIZED_NAME_CALLING_WEB_HOOK = "callingWebHook";
  @SerializedName(SERIALIZED_NAME_CALLING_WEB_HOOK)
  private String callingWebHook;

  public static final String SERIALIZED_NAME_ENABLE_CALLING = "enableCalling";
  @SerializedName(SERIALIZED_NAME_ENABLE_CALLING)
  private Boolean enableCalling;

  public static final String SERIALIZED_NAME_ENABLE_GROUPS = "enableGroups";
  @SerializedName(SERIALIZED_NAME_ENABLE_GROUPS)
  private Boolean enableGroups;

  public static final String SERIALIZED_NAME_ENABLE_MEDIA_CARDS = "enableMediaCards";
  @SerializedName(SERIALIZED_NAME_ENABLE_MEDIA_CARDS)
  private Boolean enableMediaCards;

  public static final String SERIALIZED_NAME_ENABLE_MESSAGING = "enableMessaging";
  @SerializedName(SERIALIZED_NAME_ENABLE_MESSAGING)
  private Boolean enableMessaging;

  public static final String SERIALIZED_NAME_ENABLE_SCREEN_SHARING = "enableScreenSharing";
  @SerializedName(SERIALIZED_NAME_ENABLE_SCREEN_SHARING)
  private Boolean enableScreenSharing;

  public static final String SERIALIZED_NAME_ENABLE_VIDEO = "enableVideo";
  @SerializedName(SERIALIZED_NAME_ENABLE_VIDEO)
  private Boolean enableVideo;

  public static final String SERIALIZED_NAME_GROUPS_MODE = "groupsMode";
  @SerializedName(SERIALIZED_NAME_GROUPS_MODE)
  private String groupsMode;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public SkypeChannelProperties() {
  }

  public SkypeChannelProperties callingWebHook(String callingWebHook) {
    this.callingWebHook = callingWebHook;
    return this;
  }

  /**
   * Calling web hook for Skype channel
   * @return callingWebHook
   */
  @javax.annotation.Nullable
  public String getCallingWebHook() {
    return callingWebHook;
  }

  public void setCallingWebHook(String callingWebHook) {
    this.callingWebHook = callingWebHook;
  }


  public SkypeChannelProperties enableCalling(Boolean enableCalling) {
    this.enableCalling = enableCalling;
    return this;
  }

  /**
   * Enable calling for Skype channel
   * @return enableCalling
   */
  @javax.annotation.Nullable
  public Boolean getEnableCalling() {
    return enableCalling;
  }

  public void setEnableCalling(Boolean enableCalling) {
    this.enableCalling = enableCalling;
  }


  public SkypeChannelProperties enableGroups(Boolean enableGroups) {
    this.enableGroups = enableGroups;
    return this;
  }

  /**
   * Enable groups for Skype channel
   * @return enableGroups
   */
  @javax.annotation.Nullable
  public Boolean getEnableGroups() {
    return enableGroups;
  }

  public void setEnableGroups(Boolean enableGroups) {
    this.enableGroups = enableGroups;
  }


  public SkypeChannelProperties enableMediaCards(Boolean enableMediaCards) {
    this.enableMediaCards = enableMediaCards;
    return this;
  }

  /**
   * Enable media cards for Skype channel
   * @return enableMediaCards
   */
  @javax.annotation.Nullable
  public Boolean getEnableMediaCards() {
    return enableMediaCards;
  }

  public void setEnableMediaCards(Boolean enableMediaCards) {
    this.enableMediaCards = enableMediaCards;
  }


  public SkypeChannelProperties enableMessaging(Boolean enableMessaging) {
    this.enableMessaging = enableMessaging;
    return this;
  }

  /**
   * Enable messaging for Skype channel
   * @return enableMessaging
   */
  @javax.annotation.Nullable
  public Boolean getEnableMessaging() {
    return enableMessaging;
  }

  public void setEnableMessaging(Boolean enableMessaging) {
    this.enableMessaging = enableMessaging;
  }


  public SkypeChannelProperties enableScreenSharing(Boolean enableScreenSharing) {
    this.enableScreenSharing = enableScreenSharing;
    return this;
  }

  /**
   * Enable screen sharing for Skype channel
   * @return enableScreenSharing
   */
  @javax.annotation.Nullable
  public Boolean getEnableScreenSharing() {
    return enableScreenSharing;
  }

  public void setEnableScreenSharing(Boolean enableScreenSharing) {
    this.enableScreenSharing = enableScreenSharing;
  }


  public SkypeChannelProperties enableVideo(Boolean enableVideo) {
    this.enableVideo = enableVideo;
    return this;
  }

  /**
   * Enable video for Skype channel
   * @return enableVideo
   */
  @javax.annotation.Nullable
  public Boolean getEnableVideo() {
    return enableVideo;
  }

  public void setEnableVideo(Boolean enableVideo) {
    this.enableVideo = enableVideo;
  }


  public SkypeChannelProperties groupsMode(String groupsMode) {
    this.groupsMode = groupsMode;
    return this;
  }

  /**
   * Group mode for Skype channel
   * @return groupsMode
   */
  @javax.annotation.Nullable
  public String getGroupsMode() {
    return groupsMode;
  }

  public void setGroupsMode(String groupsMode) {
    this.groupsMode = groupsMode;
  }


  public SkypeChannelProperties isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Whether this channel is enabled for the bot
   * @return isEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkypeChannelProperties skypeChannelProperties = (SkypeChannelProperties) o;
    return Objects.equals(this.callingWebHook, skypeChannelProperties.callingWebHook) &&
        Objects.equals(this.enableCalling, skypeChannelProperties.enableCalling) &&
        Objects.equals(this.enableGroups, skypeChannelProperties.enableGroups) &&
        Objects.equals(this.enableMediaCards, skypeChannelProperties.enableMediaCards) &&
        Objects.equals(this.enableMessaging, skypeChannelProperties.enableMessaging) &&
        Objects.equals(this.enableScreenSharing, skypeChannelProperties.enableScreenSharing) &&
        Objects.equals(this.enableVideo, skypeChannelProperties.enableVideo) &&
        Objects.equals(this.groupsMode, skypeChannelProperties.groupsMode) &&
        Objects.equals(this.isEnabled, skypeChannelProperties.isEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callingWebHook, enableCalling, enableGroups, enableMediaCards, enableMessaging, enableScreenSharing, enableVideo, groupsMode, isEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkypeChannelProperties {\n");
    sb.append("    callingWebHook: ").append(toIndentedString(callingWebHook)).append("\n");
    sb.append("    enableCalling: ").append(toIndentedString(enableCalling)).append("\n");
    sb.append("    enableGroups: ").append(toIndentedString(enableGroups)).append("\n");
    sb.append("    enableMediaCards: ").append(toIndentedString(enableMediaCards)).append("\n");
    sb.append("    enableMessaging: ").append(toIndentedString(enableMessaging)).append("\n");
    sb.append("    enableScreenSharing: ").append(toIndentedString(enableScreenSharing)).append("\n");
    sb.append("    enableVideo: ").append(toIndentedString(enableVideo)).append("\n");
    sb.append("    groupsMode: ").append(toIndentedString(groupsMode)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callingWebHook");
    openapiFields.add("enableCalling");
    openapiFields.add("enableGroups");
    openapiFields.add("enableMediaCards");
    openapiFields.add("enableMessaging");
    openapiFields.add("enableScreenSharing");
    openapiFields.add("enableVideo");
    openapiFields.add("groupsMode");
    openapiFields.add("isEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkypeChannelProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkypeChannelProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkypeChannelProperties is not found in the empty JSON string", SkypeChannelProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkypeChannelProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkypeChannelProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SkypeChannelProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callingWebHook") != null && !jsonObj.get("callingWebHook").isJsonNull()) && !jsonObj.get("callingWebHook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callingWebHook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callingWebHook").toString()));
      }
      if ((jsonObj.get("groupsMode") != null && !jsonObj.get("groupsMode").isJsonNull()) && !jsonObj.get("groupsMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupsMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupsMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkypeChannelProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkypeChannelProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkypeChannelProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkypeChannelProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SkypeChannelProperties>() {
           @Override
           public void write(JsonWriter out, SkypeChannelProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkypeChannelProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkypeChannelProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkypeChannelProperties
   * @throws IOException if the JSON string is invalid with respect to SkypeChannelProperties
   */
  public static SkypeChannelProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkypeChannelProperties.class);
  }

  /**
   * Convert an instance of SkypeChannelProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

