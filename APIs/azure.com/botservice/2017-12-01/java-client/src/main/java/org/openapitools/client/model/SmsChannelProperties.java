/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters to provide for the Sms channel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:02.319136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SmsChannelProperties {
  public static final String SERIALIZED_NAME_ACCOUNT_S_I_D = "accountSID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_S_I_D)
  private String accountSID;

  public static final String SERIALIZED_NAME_AUTH_TOKEN = "authToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_IS_VALIDATED = "isValidated";
  @SerializedName(SERIALIZED_NAME_IS_VALIDATED)
  private Boolean isValidated;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public SmsChannelProperties() {
  }

  public SmsChannelProperties accountSID(String accountSID) {
    this.accountSID = accountSID;
    return this;
  }

  /**
   * The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
   * @return accountSID
   */
  @javax.annotation.Nonnull
  public String getAccountSID() {
    return accountSID;
  }

  public void setAccountSID(String accountSID) {
    this.accountSID = accountSID;
  }


  public SmsChannelProperties authToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  /**
   * The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
   * @return authToken
   */
  @javax.annotation.Nonnull
  public String getAuthToken() {
    return authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }


  public SmsChannelProperties isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Whether this channel is enabled for the bot
   * @return isEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public SmsChannelProperties isValidated(Boolean isValidated) {
    this.isValidated = isValidated;
    return this;
  }

  /**
   * Whether this channel is validated for the bot
   * @return isValidated
   */
  @javax.annotation.Nullable
  public Boolean getIsValidated() {
    return isValidated;
  }

  public void setIsValidated(Boolean isValidated) {
    this.isValidated = isValidated;
  }


  public SmsChannelProperties phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The Sms phone
   * @return phone
   */
  @javax.annotation.Nonnull
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmsChannelProperties smsChannelProperties = (SmsChannelProperties) o;
    return Objects.equals(this.accountSID, smsChannelProperties.accountSID) &&
        Objects.equals(this.authToken, smsChannelProperties.authToken) &&
        Objects.equals(this.isEnabled, smsChannelProperties.isEnabled) &&
        Objects.equals(this.isValidated, smsChannelProperties.isValidated) &&
        Objects.equals(this.phone, smsChannelProperties.phone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSID, authToken, isEnabled, isValidated, phone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmsChannelProperties {\n");
    sb.append("    accountSID: ").append(toIndentedString(accountSID)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    isValidated: ").append(toIndentedString(isValidated)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountSID");
    openapiFields.add("authToken");
    openapiFields.add("isEnabled");
    openapiFields.add("isValidated");
    openapiFields.add("phone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountSID");
    openapiRequiredFields.add("authToken");
    openapiRequiredFields.add("isEnabled");
    openapiRequiredFields.add("phone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmsChannelProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmsChannelProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmsChannelProperties is not found in the empty JSON string", SmsChannelProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmsChannelProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmsChannelProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SmsChannelProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountSID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountSID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountSID").toString()));
      }
      if (!jsonObj.get("authToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authToken").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmsChannelProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmsChannelProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmsChannelProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmsChannelProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SmsChannelProperties>() {
           @Override
           public void write(JsonWriter out, SmsChannelProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmsChannelProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmsChannelProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmsChannelProperties
   * @throws IOException if the JSON string is invalid with respect to SmsChannelProperties
   */
  public static SmsChannelProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmsChannelProperties.class);
  }

  /**
   * Convert an instance of SmsChannelProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

