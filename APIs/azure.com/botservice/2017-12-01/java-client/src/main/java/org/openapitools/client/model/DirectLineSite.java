/*
 * Azure Bot Service
 * Azure Bot Service is a platform for creating smart conversational agents.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A site for the Direct Line channel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:02.319136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectLineSite {
  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_IS_V1_ENABLED = "isV1Enabled";
  @SerializedName(SERIALIZED_NAME_IS_V1_ENABLED)
  private Boolean isV1Enabled;

  public static final String SERIALIZED_NAME_IS_V3_ENABLED = "isV3Enabled";
  @SerializedName(SERIALIZED_NAME_IS_V3_ENABLED)
  private Boolean isV3Enabled;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_KEY2 = "key2";
  @SerializedName(SERIALIZED_NAME_KEY2)
  private String key2;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  public static final String SERIALIZED_NAME_SITE_NAME = "siteName";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  private String siteName;

  public DirectLineSite() {
  }

  public DirectLineSite(
     String key, 
     String key2, 
     String siteId
  ) {
    this();
    this.key = key;
    this.key2 = key2;
    this.siteId = siteId;
  }

  public DirectLineSite isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Whether this site is enabled for DirectLine channel
   * @return isEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public DirectLineSite isV1Enabled(Boolean isV1Enabled) {
    this.isV1Enabled = isV1Enabled;
    return this;
  }

  /**
   * Whether this site is enabled for Bot Framework V1 protocol
   * @return isV1Enabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsV1Enabled() {
    return isV1Enabled;
  }

  public void setIsV1Enabled(Boolean isV1Enabled) {
    this.isV1Enabled = isV1Enabled;
  }


  public DirectLineSite isV3Enabled(Boolean isV3Enabled) {
    this.isV3Enabled = isV3Enabled;
    return this;
  }

  /**
   * Whether this site is enabled for Bot Framework V1 protocol
   * @return isV3Enabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsV3Enabled() {
    return isV3Enabled;
  }

  public void setIsV3Enabled(Boolean isV3Enabled) {
    this.isV3Enabled = isV3Enabled;
  }


  /**
   * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }



  /**
   * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
   * @return key2
   */
  @javax.annotation.Nullable
  public String getKey2() {
    return key2;
  }



  /**
   * Site Id
   * @return siteId
   */
  @javax.annotation.Nullable
  public String getSiteId() {
    return siteId;
  }



  public DirectLineSite siteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

  /**
   * Site name
   * @return siteName
   */
  @javax.annotation.Nonnull
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectLineSite directLineSite = (DirectLineSite) o;
    return Objects.equals(this.isEnabled, directLineSite.isEnabled) &&
        Objects.equals(this.isV1Enabled, directLineSite.isV1Enabled) &&
        Objects.equals(this.isV3Enabled, directLineSite.isV3Enabled) &&
        Objects.equals(this.key, directLineSite.key) &&
        Objects.equals(this.key2, directLineSite.key2) &&
        Objects.equals(this.siteId, directLineSite.siteId) &&
        Objects.equals(this.siteName, directLineSite.siteName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isEnabled, isV1Enabled, isV3Enabled, key, key2, siteId, siteName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectLineSite {\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    isV1Enabled: ").append(toIndentedString(isV1Enabled)).append("\n");
    sb.append("    isV3Enabled: ").append(toIndentedString(isV3Enabled)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    key2: ").append(toIndentedString(key2)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isEnabled");
    openapiFields.add("isV1Enabled");
    openapiFields.add("isV3Enabled");
    openapiFields.add("key");
    openapiFields.add("key2");
    openapiFields.add("siteId");
    openapiFields.add("siteName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isEnabled");
    openapiRequiredFields.add("isV1Enabled");
    openapiRequiredFields.add("isV3Enabled");
    openapiRequiredFields.add("siteName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectLineSite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectLineSite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectLineSite is not found in the empty JSON string", DirectLineSite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectLineSite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectLineSite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DirectLineSite.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("key2") != null && !jsonObj.get("key2").isJsonNull()) && !jsonObj.get("key2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key2").toString()));
      }
      if ((jsonObj.get("siteId") != null && !jsonObj.get("siteId").isJsonNull()) && !jsonObj.get("siteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteId").toString()));
      }
      if (!jsonObj.get("siteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectLineSite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectLineSite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectLineSite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectLineSite.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectLineSite>() {
           @Override
           public void write(JsonWriter out, DirectLineSite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectLineSite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectLineSite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectLineSite
   * @throws IOException if the JSON string is invalid with respect to DirectLineSite
   */
  public static DirectLineSite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectLineSite.class);
  }

  /**
   * Convert an instance of DirectLineSite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

