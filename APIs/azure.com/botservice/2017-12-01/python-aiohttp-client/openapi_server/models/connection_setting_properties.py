# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_setting_parameter import ConnectionSettingParameter
from openapi_server import util


class ConnectionSettingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, parameters: List[ConnectionSettingParameter]=None, scopes: str=None, service_provider_display_name: str=None, service_provider_id: str=None, setting_id: str=None):
        """ConnectionSettingProperties - a model defined in OpenAPI

        :param client_id: The client_id of this ConnectionSettingProperties.
        :param client_secret: The client_secret of this ConnectionSettingProperties.
        :param parameters: The parameters of this ConnectionSettingProperties.
        :param scopes: The scopes of this ConnectionSettingProperties.
        :param service_provider_display_name: The service_provider_display_name of this ConnectionSettingProperties.
        :param service_provider_id: The service_provider_id of this ConnectionSettingProperties.
        :param setting_id: The setting_id of this ConnectionSettingProperties.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'parameters': List[ConnectionSettingParameter],
            'scopes': str,
            'service_provider_display_name': str,
            'service_provider_id': str,
            'setting_id': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'parameters': 'parameters',
            'scopes': 'scopes',
            'service_provider_display_name': 'serviceProviderDisplayName',
            'service_provider_id': 'serviceProviderId',
            'setting_id': 'settingId'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._parameters = parameters
        self._scopes = scopes
        self._service_provider_display_name = service_provider_display_name
        self._service_provider_id = service_provider_id
        self._setting_id = setting_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionSettingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionSettingProperties of this ConnectionSettingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this ConnectionSettingProperties.

        Client Id associated with the Connection Setting.

        :return: The client_id of this ConnectionSettingProperties.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ConnectionSettingProperties.

        Client Id associated with the Connection Setting.

        :param client_id: The client_id of this ConnectionSettingProperties.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ConnectionSettingProperties.

        Client Secret associated with the Connection Setting

        :return: The client_secret of this ConnectionSettingProperties.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ConnectionSettingProperties.

        Client Secret associated with the Connection Setting

        :param client_secret: The client_secret of this ConnectionSettingProperties.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def parameters(self):
        """Gets the parameters of this ConnectionSettingProperties.

        Service Provider Parameters associated with the Connection Setting

        :return: The parameters of this ConnectionSettingProperties.
        :rtype: List[ConnectionSettingParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ConnectionSettingProperties.

        Service Provider Parameters associated with the Connection Setting

        :param parameters: The parameters of this ConnectionSettingProperties.
        :type parameters: List[ConnectionSettingParameter]
        """

        self._parameters = parameters

    @property
    def scopes(self):
        """Gets the scopes of this ConnectionSettingProperties.

        Scopes associated with the Connection Setting

        :return: The scopes of this ConnectionSettingProperties.
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ConnectionSettingProperties.

        Scopes associated with the Connection Setting

        :param scopes: The scopes of this ConnectionSettingProperties.
        :type scopes: str
        """

        self._scopes = scopes

    @property
    def service_provider_display_name(self):
        """Gets the service_provider_display_name of this ConnectionSettingProperties.

        Service Provider Display Name associated with the Connection Setting

        :return: The service_provider_display_name of this ConnectionSettingProperties.
        :rtype: str
        """
        return self._service_provider_display_name

    @service_provider_display_name.setter
    def service_provider_display_name(self, service_provider_display_name):
        """Sets the service_provider_display_name of this ConnectionSettingProperties.

        Service Provider Display Name associated with the Connection Setting

        :param service_provider_display_name: The service_provider_display_name of this ConnectionSettingProperties.
        :type service_provider_display_name: str
        """

        self._service_provider_display_name = service_provider_display_name

    @property
    def service_provider_id(self):
        """Gets the service_provider_id of this ConnectionSettingProperties.

        Service Provider Id associated with the Connection Setting

        :return: The service_provider_id of this ConnectionSettingProperties.
        :rtype: str
        """
        return self._service_provider_id

    @service_provider_id.setter
    def service_provider_id(self, service_provider_id):
        """Sets the service_provider_id of this ConnectionSettingProperties.

        Service Provider Id associated with the Connection Setting

        :param service_provider_id: The service_provider_id of this ConnectionSettingProperties.
        :type service_provider_id: str
        """

        self._service_provider_id = service_provider_id

    @property
    def setting_id(self):
        """Gets the setting_id of this ConnectionSettingProperties.

        Setting Id set by the service for the Connection Setting.

        :return: The setting_id of this ConnectionSettingProperties.
        :rtype: str
        """
        return self._setting_id

    @setting_id.setter
    def setting_id(self, setting_id):
        """Sets the setting_id of this ConnectionSettingProperties.

        Setting Id set by the service for the Connection Setting.

        :param setting_id: The setting_id of this ConnectionSettingProperties.
        :type setting_id: str
        """

        self._setting_id = setting_id
