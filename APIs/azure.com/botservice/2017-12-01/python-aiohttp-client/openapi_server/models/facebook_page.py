# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FacebookPage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, id: str=None):
        """FacebookPage - a model defined in OpenAPI

        :param access_token: The access_token of this FacebookPage.
        :param id: The id of this FacebookPage.
        """
        self.openapi_types = {
            'access_token': str,
            'id': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'id': 'id'
        }

        self._access_token = access_token
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacebookPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacebookPage of this FacebookPage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this FacebookPage.

        Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The access_token of this FacebookPage.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this FacebookPage.

        Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.

        :param access_token: The access_token of this FacebookPage.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def id(self):
        """Gets the id of this FacebookPage.

        Page id

        :return: The id of this FacebookPage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FacebookPage.

        Page id

        :param id: The id of this FacebookPage.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
