# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TelegramChannelProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, is_enabled: bool=None, is_validated: bool=None):
        """TelegramChannelProperties - a model defined in OpenAPI

        :param access_token: The access_token of this TelegramChannelProperties.
        :param is_enabled: The is_enabled of this TelegramChannelProperties.
        :param is_validated: The is_validated of this TelegramChannelProperties.
        """
        self.openapi_types = {
            'access_token': str,
            'is_enabled': bool,
            'is_validated': bool
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'is_enabled': 'isEnabled',
            'is_validated': 'isValidated'
        }

        self._access_token = access_token
        self._is_enabled = is_enabled
        self._is_validated = is_validated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TelegramChannelProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TelegramChannelProperties of this TelegramChannelProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this TelegramChannelProperties.

        The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The access_token of this TelegramChannelProperties.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this TelegramChannelProperties.

        The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.

        :param access_token: The access_token of this TelegramChannelProperties.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def is_enabled(self):
        """Gets the is_enabled of this TelegramChannelProperties.

        Whether this channel is enabled for the bot

        :return: The is_enabled of this TelegramChannelProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this TelegramChannelProperties.

        Whether this channel is enabled for the bot

        :param is_enabled: The is_enabled of this TelegramChannelProperties.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def is_validated(self):
        """Gets the is_validated of this TelegramChannelProperties.

        Whether this channel is validated for the bot

        :return: The is_validated of this TelegramChannelProperties.
        :rtype: bool
        """
        return self._is_validated

    @is_validated.setter
    def is_validated(self, is_validated):
        """Sets the is_validated of this TelegramChannelProperties.

        Whether this channel is validated for the bot

        :param is_validated: The is_validated of this TelegramChannelProperties.
        :type is_validated: bool
        """

        self._is_validated = is_validated
