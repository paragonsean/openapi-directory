# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MsTeamsChannelProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call_mode: str=None, enable_calling: bool=None, enable_media_cards: bool=None, enable_messaging: bool=None, enable_video: bool=None, is_enabled: bool=None):
        """MsTeamsChannelProperties - a model defined in OpenAPI

        :param call_mode: The call_mode of this MsTeamsChannelProperties.
        :param enable_calling: The enable_calling of this MsTeamsChannelProperties.
        :param enable_media_cards: The enable_media_cards of this MsTeamsChannelProperties.
        :param enable_messaging: The enable_messaging of this MsTeamsChannelProperties.
        :param enable_video: The enable_video of this MsTeamsChannelProperties.
        :param is_enabled: The is_enabled of this MsTeamsChannelProperties.
        """
        self.openapi_types = {
            'call_mode': str,
            'enable_calling': bool,
            'enable_media_cards': bool,
            'enable_messaging': bool,
            'enable_video': bool,
            'is_enabled': bool
        }

        self.attribute_map = {
            'call_mode': 'callMode',
            'enable_calling': 'enableCalling',
            'enable_media_cards': 'enableMediaCards',
            'enable_messaging': 'enableMessaging',
            'enable_video': 'enableVideo',
            'is_enabled': 'isEnabled'
        }

        self._call_mode = call_mode
        self._enable_calling = enable_calling
        self._enable_media_cards = enable_media_cards
        self._enable_messaging = enable_messaging
        self._enable_video = enable_video
        self._is_enabled = is_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MsTeamsChannelProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MsTeamsChannelProperties of this MsTeamsChannelProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call_mode(self):
        """Gets the call_mode of this MsTeamsChannelProperties.

        Enable messaging for Microsoft Teams channel

        :return: The call_mode of this MsTeamsChannelProperties.
        :rtype: str
        """
        return self._call_mode

    @call_mode.setter
    def call_mode(self, call_mode):
        """Sets the call_mode of this MsTeamsChannelProperties.

        Enable messaging for Microsoft Teams channel

        :param call_mode: The call_mode of this MsTeamsChannelProperties.
        :type call_mode: str
        """

        self._call_mode = call_mode

    @property
    def enable_calling(self):
        """Gets the enable_calling of this MsTeamsChannelProperties.

        Enable calling for Microsoft Teams channel

        :return: The enable_calling of this MsTeamsChannelProperties.
        :rtype: bool
        """
        return self._enable_calling

    @enable_calling.setter
    def enable_calling(self, enable_calling):
        """Sets the enable_calling of this MsTeamsChannelProperties.

        Enable calling for Microsoft Teams channel

        :param enable_calling: The enable_calling of this MsTeamsChannelProperties.
        :type enable_calling: bool
        """

        self._enable_calling = enable_calling

    @property
    def enable_media_cards(self):
        """Gets the enable_media_cards of this MsTeamsChannelProperties.

        Enable media cards for Microsoft Teams channel

        :return: The enable_media_cards of this MsTeamsChannelProperties.
        :rtype: bool
        """
        return self._enable_media_cards

    @enable_media_cards.setter
    def enable_media_cards(self, enable_media_cards):
        """Sets the enable_media_cards of this MsTeamsChannelProperties.

        Enable media cards for Microsoft Teams channel

        :param enable_media_cards: The enable_media_cards of this MsTeamsChannelProperties.
        :type enable_media_cards: bool
        """

        self._enable_media_cards = enable_media_cards

    @property
    def enable_messaging(self):
        """Gets the enable_messaging of this MsTeamsChannelProperties.

        Enable messaging for Microsoft Teams channel

        :return: The enable_messaging of this MsTeamsChannelProperties.
        :rtype: bool
        """
        return self._enable_messaging

    @enable_messaging.setter
    def enable_messaging(self, enable_messaging):
        """Sets the enable_messaging of this MsTeamsChannelProperties.

        Enable messaging for Microsoft Teams channel

        :param enable_messaging: The enable_messaging of this MsTeamsChannelProperties.
        :type enable_messaging: bool
        """

        self._enable_messaging = enable_messaging

    @property
    def enable_video(self):
        """Gets the enable_video of this MsTeamsChannelProperties.

        Enable video for Microsoft Teams channel

        :return: The enable_video of this MsTeamsChannelProperties.
        :rtype: bool
        """
        return self._enable_video

    @enable_video.setter
    def enable_video(self, enable_video):
        """Sets the enable_video of this MsTeamsChannelProperties.

        Enable video for Microsoft Teams channel

        :param enable_video: The enable_video of this MsTeamsChannelProperties.
        :type enable_video: bool
        """

        self._enable_video = enable_video

    @property
    def is_enabled(self):
        """Gets the is_enabled of this MsTeamsChannelProperties.

        Whether this channel is enabled for the bot

        :return: The is_enabled of this MsTeamsChannelProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this MsTeamsChannelProperties.

        Whether this channel is enabled for the bot

        :param is_enabled: The is_enabled of this MsTeamsChannelProperties.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled
