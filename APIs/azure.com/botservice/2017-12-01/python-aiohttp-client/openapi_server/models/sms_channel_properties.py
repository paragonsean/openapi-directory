# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SmsChannelProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, auth_token: str=None, is_enabled: bool=None, is_validated: bool=None, phone: str=None):
        """SmsChannelProperties - a model defined in OpenAPI

        :param account_sid: The account_sid of this SmsChannelProperties.
        :param auth_token: The auth_token of this SmsChannelProperties.
        :param is_enabled: The is_enabled of this SmsChannelProperties.
        :param is_validated: The is_validated of this SmsChannelProperties.
        :param phone: The phone of this SmsChannelProperties.
        """
        self.openapi_types = {
            'account_sid': str,
            'auth_token': str,
            'is_enabled': bool,
            'is_validated': bool,
            'phone': str
        }

        self.attribute_map = {
            'account_sid': 'accountSID',
            'auth_token': 'authToken',
            'is_enabled': 'isEnabled',
            'is_validated': 'isValidated',
            'phone': 'phone'
        }

        self._account_sid = account_sid
        self._auth_token = auth_token
        self._is_enabled = is_enabled
        self._is_validated = is_validated
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SmsChannelProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SmsChannelProperties of this SmsChannelProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this SmsChannelProperties.

        The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The account_sid of this SmsChannelProperties.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this SmsChannelProperties.

        The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.

        :param account_sid: The account_sid of this SmsChannelProperties.
        :type account_sid: str
        """
        if account_sid is None:
            raise ValueError("Invalid value for `account_sid`, must not be `None`")

        self._account_sid = account_sid

    @property
    def auth_token(self):
        """Gets the auth_token of this SmsChannelProperties.

        The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.

        :return: The auth_token of this SmsChannelProperties.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this SmsChannelProperties.

        The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.

        :param auth_token: The auth_token of this SmsChannelProperties.
        :type auth_token: str
        """
        if auth_token is None:
            raise ValueError("Invalid value for `auth_token`, must not be `None`")

        self._auth_token = auth_token

    @property
    def is_enabled(self):
        """Gets the is_enabled of this SmsChannelProperties.

        Whether this channel is enabled for the bot

        :return: The is_enabled of this SmsChannelProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this SmsChannelProperties.

        Whether this channel is enabled for the bot

        :param is_enabled: The is_enabled of this SmsChannelProperties.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def is_validated(self):
        """Gets the is_validated of this SmsChannelProperties.

        Whether this channel is validated for the bot

        :return: The is_validated of this SmsChannelProperties.
        :rtype: bool
        """
        return self._is_validated

    @is_validated.setter
    def is_validated(self, is_validated):
        """Sets the is_validated of this SmsChannelProperties.

        Whether this channel is validated for the bot

        :param is_validated: The is_validated of this SmsChannelProperties.
        :type is_validated: bool
        """

        self._is_validated = is_validated

    @property
    def phone(self):
        """Gets the phone of this SmsChannelProperties.

        The Sms phone

        :return: The phone of this SmsChannelProperties.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SmsChannelProperties.

        The Sms phone

        :param phone: The phone of this SmsChannelProperties.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone
