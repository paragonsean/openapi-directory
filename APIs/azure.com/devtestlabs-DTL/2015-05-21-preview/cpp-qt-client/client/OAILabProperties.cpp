/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabProperties::OAILabProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabProperties::OAILabProperties() {
    this->initializeModel();
}

OAILabProperties::~OAILabProperties() {}

void OAILabProperties::initializeModel() {

    m_artifacts_storage_account_isSet = false;
    m_artifacts_storage_account_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_default_storage_account_isSet = false;
    m_default_storage_account_isValid = false;

    m_default_virtual_network_id_isSet = false;
    m_default_virtual_network_id_isValid = false;

    m_lab_storage_type_isSet = false;
    m_lab_storage_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_storage_accounts_isSet = false;
    m_storage_accounts_isValid = false;

    m_vault_name_isSet = false;
    m_vault_name_isValid = false;
}

void OAILabProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabProperties::fromJsonObject(QJsonObject json) {

    m_artifacts_storage_account_isValid = ::OpenAPI::fromJsonValue(m_artifacts_storage_account, json[QString("artifactsStorageAccount")]);
    m_artifacts_storage_account_isSet = !json[QString("artifactsStorageAccount")].isNull() && m_artifacts_storage_account_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_default_storage_account_isValid = ::OpenAPI::fromJsonValue(m_default_storage_account, json[QString("defaultStorageAccount")]);
    m_default_storage_account_isSet = !json[QString("defaultStorageAccount")].isNull() && m_default_storage_account_isValid;

    m_default_virtual_network_id_isValid = ::OpenAPI::fromJsonValue(m_default_virtual_network_id, json[QString("defaultVirtualNetworkId")]);
    m_default_virtual_network_id_isSet = !json[QString("defaultVirtualNetworkId")].isNull() && m_default_virtual_network_id_isValid;

    m_lab_storage_type_isValid = ::OpenAPI::fromJsonValue(m_lab_storage_type, json[QString("labStorageType")]);
    m_lab_storage_type_isSet = !json[QString("labStorageType")].isNull() && m_lab_storage_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_storage_accounts_isValid = ::OpenAPI::fromJsonValue(m_storage_accounts, json[QString("storageAccounts")]);
    m_storage_accounts_isSet = !json[QString("storageAccounts")].isNull() && m_storage_accounts_isValid;

    m_vault_name_isValid = ::OpenAPI::fromJsonValue(m_vault_name, json[QString("vaultName")]);
    m_vault_name_isSet = !json[QString("vaultName")].isNull() && m_vault_name_isValid;
}

QString OAILabProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_artifacts_storage_account_isSet) {
        obj.insert(QString("artifactsStorageAccount"), ::OpenAPI::toJsonValue(m_artifacts_storage_account));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_default_storage_account_isSet) {
        obj.insert(QString("defaultStorageAccount"), ::OpenAPI::toJsonValue(m_default_storage_account));
    }
    if (m_default_virtual_network_id_isSet) {
        obj.insert(QString("defaultVirtualNetworkId"), ::OpenAPI::toJsonValue(m_default_virtual_network_id));
    }
    if (m_lab_storage_type_isSet) {
        obj.insert(QString("labStorageType"), ::OpenAPI::toJsonValue(m_lab_storage_type));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_storage_accounts.size() > 0) {
        obj.insert(QString("storageAccounts"), ::OpenAPI::toJsonValue(m_storage_accounts));
    }
    if (m_vault_name_isSet) {
        obj.insert(QString("vaultName"), ::OpenAPI::toJsonValue(m_vault_name));
    }
    return obj;
}

QString OAILabProperties::getArtifactsStorageAccount() const {
    return m_artifacts_storage_account;
}
void OAILabProperties::setArtifactsStorageAccount(const QString &artifacts_storage_account) {
    m_artifacts_storage_account = artifacts_storage_account;
    m_artifacts_storage_account_isSet = true;
}

bool OAILabProperties::is_artifacts_storage_account_Set() const{
    return m_artifacts_storage_account_isSet;
}

bool OAILabProperties::is_artifacts_storage_account_Valid() const{
    return m_artifacts_storage_account_isValid;
}

QDateTime OAILabProperties::getCreatedDate() const {
    return m_created_date;
}
void OAILabProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAILabProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAILabProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAILabProperties::getDefaultStorageAccount() const {
    return m_default_storage_account;
}
void OAILabProperties::setDefaultStorageAccount(const QString &default_storage_account) {
    m_default_storage_account = default_storage_account;
    m_default_storage_account_isSet = true;
}

bool OAILabProperties::is_default_storage_account_Set() const{
    return m_default_storage_account_isSet;
}

bool OAILabProperties::is_default_storage_account_Valid() const{
    return m_default_storage_account_isValid;
}

QString OAILabProperties::getDefaultVirtualNetworkId() const {
    return m_default_virtual_network_id;
}
void OAILabProperties::setDefaultVirtualNetworkId(const QString &default_virtual_network_id) {
    m_default_virtual_network_id = default_virtual_network_id;
    m_default_virtual_network_id_isSet = true;
}

bool OAILabProperties::is_default_virtual_network_id_Set() const{
    return m_default_virtual_network_id_isSet;
}

bool OAILabProperties::is_default_virtual_network_id_Valid() const{
    return m_default_virtual_network_id_isValid;
}

QString OAILabProperties::getLabStorageType() const {
    return m_lab_storage_type;
}
void OAILabProperties::setLabStorageType(const QString &lab_storage_type) {
    m_lab_storage_type = lab_storage_type;
    m_lab_storage_type_isSet = true;
}

bool OAILabProperties::is_lab_storage_type_Set() const{
    return m_lab_storage_type_isSet;
}

bool OAILabProperties::is_lab_storage_type_Valid() const{
    return m_lab_storage_type_isValid;
}

QString OAILabProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILabProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILabProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILabProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<QString> OAILabProperties::getStorageAccounts() const {
    return m_storage_accounts;
}
void OAILabProperties::setStorageAccounts(const QList<QString> &storage_accounts) {
    m_storage_accounts = storage_accounts;
    m_storage_accounts_isSet = true;
}

bool OAILabProperties::is_storage_accounts_Set() const{
    return m_storage_accounts_isSet;
}

bool OAILabProperties::is_storage_accounts_Valid() const{
    return m_storage_accounts_isValid;
}

QString OAILabProperties::getVaultName() const {
    return m_vault_name;
}
void OAILabProperties::setVaultName(const QString &vault_name) {
    m_vault_name = vault_name;
    m_vault_name_isSet = true;
}

bool OAILabProperties::is_vault_name_Set() const{
    return m_vault_name_isSet;
}

bool OAILabProperties::is_vault_name_Valid() const{
    return m_vault_name_isValid;
}

bool OAILabProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifacts_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_virtual_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
