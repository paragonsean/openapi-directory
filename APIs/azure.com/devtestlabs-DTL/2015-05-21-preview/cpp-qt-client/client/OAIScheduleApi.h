/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScheduleApi_H
#define OAI_OAIScheduleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIResponseWithContinuation_Schedule.h"
#include "OAISchedule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScheduleApi : public QObject {
    Q_OBJECT

public:
    OAIScheduleApi(const int timeOut = 0);
    ~OAIScheduleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule OAISchedule [required]
    */
    virtual void scheduleCreateOrUpdateResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAISchedule &schedule);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void scheduleDeleteResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void scheduleExecute(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void scheduleGetResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void scheduleList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule OAISchedule [required]
    */
    virtual void schedulePatchResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAISchedule &schedule);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void scheduleCreateOrUpdateResourceCallback(OAIHttpRequestWorker *worker);
    void scheduleDeleteResourceCallback(OAIHttpRequestWorker *worker);
    void scheduleExecuteCallback(OAIHttpRequestWorker *worker);
    void scheduleGetResourceCallback(OAIHttpRequestWorker *worker);
    void scheduleListCallback(OAIHttpRequestWorker *worker);
    void schedulePatchResourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void scheduleCreateOrUpdateResourceSignal(OAISchedule summary);
    void scheduleDeleteResourceSignal();
    void scheduleExecuteSignal();
    void scheduleGetResourceSignal(OAISchedule summary);
    void scheduleListSignal(OAIResponseWithContinuation_Schedule summary);
    void schedulePatchResourceSignal(OAISchedule summary);


    void scheduleCreateOrUpdateResourceSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void scheduleDeleteResourceSignalFull(OAIHttpRequestWorker *worker);
    void scheduleExecuteSignalFull(OAIHttpRequestWorker *worker);
    void scheduleGetResourceSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void scheduleListSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_Schedule summary);
    void schedulePatchResourceSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);

    Q_DECL_DEPRECATED_X("Use scheduleCreateOrUpdateResourceSignalError() instead")
    void scheduleCreateOrUpdateResourceSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleCreateOrUpdateResourceSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleDeleteResourceSignalError() instead")
    void scheduleDeleteResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleDeleteResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleExecuteSignalError() instead")
    void scheduleExecuteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleExecuteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleGetResourceSignalError() instead")
    void scheduleGetResourceSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleGetResourceSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleListSignalError() instead")
    void scheduleListSignalE(OAIResponseWithContinuation_Schedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleListSignalError(OAIResponseWithContinuation_Schedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulePatchResourceSignalError() instead")
    void schedulePatchResourceSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulePatchResourceSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use scheduleCreateOrUpdateResourceSignalErrorFull() instead")
    void scheduleCreateOrUpdateResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleCreateOrUpdateResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleDeleteResourceSignalErrorFull() instead")
    void scheduleDeleteResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleDeleteResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleExecuteSignalErrorFull() instead")
    void scheduleExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleGetResourceSignalErrorFull() instead")
    void scheduleGetResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleGetResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleListSignalErrorFull() instead")
    void scheduleListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulePatchResourceSignalErrorFull() instead")
    void schedulePatchResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulePatchResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
