/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILabApi_H
#define OAI_OAILabApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIGenerateUploadUriParameter.h"
#include "OAIGenerateUploadUriResponse.h"
#include "OAILab.h"
#include "OAILabVirtualMachine.h"
#include "OAIResponseWithContinuation_Lab.h"
#include "OAIResponseWithContinuation_LabVhd.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILabApi : public QObject {
    Q_OBJECT

public:
    OAILabApi(const int timeOut = 0);
    ~OAILabApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab_virtual_machine OAILabVirtualMachine [required]
    */
    virtual void labCreateEnvironment(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAILabVirtualMachine &lab_virtual_machine);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab OAILab [required]
    */
    virtual void labCreateOrUpdateResource(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAILab &lab);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labDeleteResource(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  generate_upload_uri_parameter OAIGenerateUploadUriParameter [required]
    */
    virtual void labGenerateUploadUri(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAIGenerateUploadUriParameter &generate_upload_uri_parameter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labGetResource(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void labListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void labListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labListVhds(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab OAILab [required]
    */
    virtual void labPatchResource(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAILab &lab);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void labCreateEnvironmentCallback(OAIHttpRequestWorker *worker);
    void labCreateOrUpdateResourceCallback(OAIHttpRequestWorker *worker);
    void labDeleteResourceCallback(OAIHttpRequestWorker *worker);
    void labGenerateUploadUriCallback(OAIHttpRequestWorker *worker);
    void labGetResourceCallback(OAIHttpRequestWorker *worker);
    void labListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void labListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void labListVhdsCallback(OAIHttpRequestWorker *worker);
    void labPatchResourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void labCreateEnvironmentSignal();
    void labCreateOrUpdateResourceSignal(OAILab summary);
    void labDeleteResourceSignal();
    void labGenerateUploadUriSignal(OAIGenerateUploadUriResponse summary);
    void labGetResourceSignal(OAILab summary);
    void labListByResourceGroupSignal(OAIResponseWithContinuation_Lab summary);
    void labListBySubscriptionSignal(OAIResponseWithContinuation_Lab summary);
    void labListVhdsSignal(OAIResponseWithContinuation_LabVhd summary);
    void labPatchResourceSignal(OAILab summary);


    void labCreateEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void labCreateOrUpdateResourceSignalFull(OAIHttpRequestWorker *worker, OAILab summary);
    void labDeleteResourceSignalFull(OAIHttpRequestWorker *worker);
    void labGenerateUploadUriSignalFull(OAIHttpRequestWorker *worker, OAIGenerateUploadUriResponse summary);
    void labGetResourceSignalFull(OAIHttpRequestWorker *worker, OAILab summary);
    void labListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_Lab summary);
    void labListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_Lab summary);
    void labListVhdsSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_LabVhd summary);
    void labPatchResourceSignalFull(OAIHttpRequestWorker *worker, OAILab summary);

    Q_DECL_DEPRECATED_X("Use labCreateEnvironmentSignalError() instead")
    void labCreateEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labCreateEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labCreateOrUpdateResourceSignalError() instead")
    void labCreateOrUpdateResourceSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labCreateOrUpdateResourceSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labDeleteResourceSignalError() instead")
    void labDeleteResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labDeleteResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labGenerateUploadUriSignalError() instead")
    void labGenerateUploadUriSignalE(OAIGenerateUploadUriResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labGenerateUploadUriSignalError(OAIGenerateUploadUriResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labGetResourceSignalError() instead")
    void labGetResourceSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labGetResourceSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labListByResourceGroupSignalError() instead")
    void labListByResourceGroupSignalE(OAIResponseWithContinuation_Lab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labListByResourceGroupSignalError(OAIResponseWithContinuation_Lab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labListBySubscriptionSignalError() instead")
    void labListBySubscriptionSignalE(OAIResponseWithContinuation_Lab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labListBySubscriptionSignalError(OAIResponseWithContinuation_Lab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labListVhdsSignalError() instead")
    void labListVhdsSignalE(OAIResponseWithContinuation_LabVhd summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labListVhdsSignalError(OAIResponseWithContinuation_LabVhd summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labPatchResourceSignalError() instead")
    void labPatchResourceSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labPatchResourceSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use labCreateEnvironmentSignalErrorFull() instead")
    void labCreateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labCreateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labCreateOrUpdateResourceSignalErrorFull() instead")
    void labCreateOrUpdateResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labCreateOrUpdateResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labDeleteResourceSignalErrorFull() instead")
    void labDeleteResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labDeleteResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labGenerateUploadUriSignalErrorFull() instead")
    void labGenerateUploadUriSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labGenerateUploadUriSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labGetResourceSignalErrorFull() instead")
    void labGetResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labGetResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labListByResourceGroupSignalErrorFull() instead")
    void labListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labListBySubscriptionSignalErrorFull() instead")
    void labListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labListVhdsSignalErrorFull() instead")
    void labListVhdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labListVhdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labPatchResourceSignalErrorFull() instead")
    void labPatchResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labPatchResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
