/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNetworkApi_H
#define OAI_OAIVirtualNetworkApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIResponseWithContinuation_VirtualNetwork.h"
#include "OAIVirtualNetwork.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNetworkApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNetworkApi(const int timeOut = 0);
    ~OAIVirtualNetworkApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  virtual_network OAIVirtualNetwork [required]
    */
    virtual void virtualNetworkCreateOrUpdateResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIVirtualNetwork &virtual_network);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualNetworkDeleteResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualNetworkGetResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void virtualNetworkList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  virtual_network OAIVirtualNetwork [required]
    */
    virtual void virtualNetworkPatchResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIVirtualNetwork &virtual_network);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualNetworkCreateOrUpdateResourceCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkDeleteResourceCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGetResourceCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkListCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkPatchResourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualNetworkCreateOrUpdateResourceSignal(OAIVirtualNetwork summary);
    void virtualNetworkDeleteResourceSignal();
    void virtualNetworkGetResourceSignal(OAIVirtualNetwork summary);
    void virtualNetworkListSignal(OAIResponseWithContinuation_VirtualNetwork summary);
    void virtualNetworkPatchResourceSignal(OAIVirtualNetwork summary);


    void virtualNetworkCreateOrUpdateResourceSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetwork summary);
    void virtualNetworkDeleteResourceSignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworkGetResourceSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetwork summary);
    void virtualNetworkListSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_VirtualNetwork summary);
    void virtualNetworkPatchResourceSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetwork summary);

    Q_DECL_DEPRECATED_X("Use virtualNetworkCreateOrUpdateResourceSignalError() instead")
    void virtualNetworkCreateOrUpdateResourceSignalE(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkCreateOrUpdateResourceSignalError(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkDeleteResourceSignalError() instead")
    void virtualNetworkDeleteResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkDeleteResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGetResourceSignalError() instead")
    void virtualNetworkGetResourceSignalE(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGetResourceSignalError(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkListSignalError() instead")
    void virtualNetworkListSignalE(OAIResponseWithContinuation_VirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkListSignalError(OAIResponseWithContinuation_VirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkPatchResourceSignalError() instead")
    void virtualNetworkPatchResourceSignalE(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPatchResourceSignalError(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualNetworkCreateOrUpdateResourceSignalErrorFull() instead")
    void virtualNetworkCreateOrUpdateResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkCreateOrUpdateResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkDeleteResourceSignalErrorFull() instead")
    void virtualNetworkDeleteResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkDeleteResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGetResourceSignalErrorFull() instead")
    void virtualNetworkGetResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGetResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkListSignalErrorFull() instead")
    void virtualNetworkListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkPatchResourceSignalErrorFull() instead")
    void virtualNetworkPatchResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPatchResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
