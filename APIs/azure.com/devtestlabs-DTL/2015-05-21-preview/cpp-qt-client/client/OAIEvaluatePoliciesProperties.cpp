/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluatePoliciesProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluatePoliciesProperties::OAIEvaluatePoliciesProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluatePoliciesProperties::OAIEvaluatePoliciesProperties() {
    this->initializeModel();
}

OAIEvaluatePoliciesProperties::~OAIEvaluatePoliciesProperties() {}

void OAIEvaluatePoliciesProperties::initializeModel() {

    m_fact_data_isSet = false;
    m_fact_data_isValid = false;

    m_fact_name_isSet = false;
    m_fact_name_isValid = false;

    m_value_offset_isSet = false;
    m_value_offset_isValid = false;
}

void OAIEvaluatePoliciesProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluatePoliciesProperties::fromJsonObject(QJsonObject json) {

    m_fact_data_isValid = ::OpenAPI::fromJsonValue(m_fact_data, json[QString("factData")]);
    m_fact_data_isSet = !json[QString("factData")].isNull() && m_fact_data_isValid;

    m_fact_name_isValid = ::OpenAPI::fromJsonValue(m_fact_name, json[QString("factName")]);
    m_fact_name_isSet = !json[QString("factName")].isNull() && m_fact_name_isValid;

    m_value_offset_isValid = ::OpenAPI::fromJsonValue(m_value_offset, json[QString("valueOffset")]);
    m_value_offset_isSet = !json[QString("valueOffset")].isNull() && m_value_offset_isValid;
}

QString OAIEvaluatePoliciesProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluatePoliciesProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_fact_data_isSet) {
        obj.insert(QString("factData"), ::OpenAPI::toJsonValue(m_fact_data));
    }
    if (m_fact_name_isSet) {
        obj.insert(QString("factName"), ::OpenAPI::toJsonValue(m_fact_name));
    }
    if (m_value_offset_isSet) {
        obj.insert(QString("valueOffset"), ::OpenAPI::toJsonValue(m_value_offset));
    }
    return obj;
}

QString OAIEvaluatePoliciesProperties::getFactData() const {
    return m_fact_data;
}
void OAIEvaluatePoliciesProperties::setFactData(const QString &fact_data) {
    m_fact_data = fact_data;
    m_fact_data_isSet = true;
}

bool OAIEvaluatePoliciesProperties::is_fact_data_Set() const{
    return m_fact_data_isSet;
}

bool OAIEvaluatePoliciesProperties::is_fact_data_Valid() const{
    return m_fact_data_isValid;
}

QString OAIEvaluatePoliciesProperties::getFactName() const {
    return m_fact_name;
}
void OAIEvaluatePoliciesProperties::setFactName(const QString &fact_name) {
    m_fact_name = fact_name;
    m_fact_name_isSet = true;
}

bool OAIEvaluatePoliciesProperties::is_fact_name_Set() const{
    return m_fact_name_isSet;
}

bool OAIEvaluatePoliciesProperties::is_fact_name_Valid() const{
    return m_fact_name_isValid;
}

QString OAIEvaluatePoliciesProperties::getValueOffset() const {
    return m_value_offset;
}
void OAIEvaluatePoliciesProperties::setValueOffset(const QString &value_offset) {
    m_value_offset = value_offset;
    m_value_offset_isSet = true;
}

bool OAIEvaluatePoliciesProperties::is_value_offset_Set() const{
    return m_value_offset_isSet;
}

bool OAIEvaluatePoliciesProperties::is_value_offset_Valid() const{
    return m_value_offset_isValid;
}

bool OAIEvaluatePoliciesProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fact_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluatePoliciesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
