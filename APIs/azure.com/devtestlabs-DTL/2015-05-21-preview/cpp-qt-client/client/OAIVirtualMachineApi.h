/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachineApi_H
#define OAI_OAIVirtualMachineApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplyArtifactsRequest.h"
#include "OAICloudError.h"
#include "OAILabVirtualMachine.h"
#include "OAIResponseWithContinuation_LabVirtualMachine.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachineApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachineApi(const int timeOut = 0);
    ~OAIVirtualMachineApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  apply_artifacts_request OAIApplyArtifactsRequest [required]
    */
    virtual void virtualMachineApplyArtifacts(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIApplyArtifactsRequest &apply_artifacts_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab_virtual_machine OAILabVirtualMachine [required]
    */
    virtual void virtualMachineCreateOrUpdateResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAILabVirtualMachine &lab_virtual_machine);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachineDeleteResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachineGetResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void virtualMachineList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab_virtual_machine OAILabVirtualMachine [required]
    */
    virtual void virtualMachinePatchResource(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAILabVirtualMachine &lab_virtual_machine);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachineStart(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachineStop(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachineApplyArtifactsCallback(OAIHttpRequestWorker *worker);
    void virtualMachineCreateOrUpdateResourceCallback(OAIHttpRequestWorker *worker);
    void virtualMachineDeleteResourceCallback(OAIHttpRequestWorker *worker);
    void virtualMachineGetResourceCallback(OAIHttpRequestWorker *worker);
    void virtualMachineListCallback(OAIHttpRequestWorker *worker);
    void virtualMachinePatchResourceCallback(OAIHttpRequestWorker *worker);
    void virtualMachineStartCallback(OAIHttpRequestWorker *worker);
    void virtualMachineStopCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachineApplyArtifactsSignal();
    void virtualMachineCreateOrUpdateResourceSignal(OAILabVirtualMachine summary);
    void virtualMachineDeleteResourceSignal();
    void virtualMachineGetResourceSignal(OAILabVirtualMachine summary);
    void virtualMachineListSignal(OAIResponseWithContinuation_LabVirtualMachine summary);
    void virtualMachinePatchResourceSignal(OAILabVirtualMachine summary);
    void virtualMachineStartSignal();
    void virtualMachineStopSignal();


    void virtualMachineApplyArtifactsSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineCreateOrUpdateResourceSignalFull(OAIHttpRequestWorker *worker, OAILabVirtualMachine summary);
    void virtualMachineDeleteResourceSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineGetResourceSignalFull(OAIHttpRequestWorker *worker, OAILabVirtualMachine summary);
    void virtualMachineListSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_LabVirtualMachine summary);
    void virtualMachinePatchResourceSignalFull(OAIHttpRequestWorker *worker, OAILabVirtualMachine summary);
    void virtualMachineStartSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineStopSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use virtualMachineApplyArtifactsSignalError() instead")
    void virtualMachineApplyArtifactsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineApplyArtifactsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineCreateOrUpdateResourceSignalError() instead")
    void virtualMachineCreateOrUpdateResourceSignalE(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineCreateOrUpdateResourceSignalError(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineDeleteResourceSignalError() instead")
    void virtualMachineDeleteResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineDeleteResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineGetResourceSignalError() instead")
    void virtualMachineGetResourceSignalE(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineGetResourceSignalError(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineListSignalError() instead")
    void virtualMachineListSignalE(OAIResponseWithContinuation_LabVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineListSignalError(OAIResponseWithContinuation_LabVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinePatchResourceSignalError() instead")
    void virtualMachinePatchResourceSignalE(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinePatchResourceSignalError(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineStartSignalError() instead")
    void virtualMachineStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineStopSignalError() instead")
    void virtualMachineStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachineApplyArtifactsSignalErrorFull() instead")
    void virtualMachineApplyArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineApplyArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineCreateOrUpdateResourceSignalErrorFull() instead")
    void virtualMachineCreateOrUpdateResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineCreateOrUpdateResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineDeleteResourceSignalErrorFull() instead")
    void virtualMachineDeleteResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineDeleteResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineGetResourceSignalErrorFull() instead")
    void virtualMachineGetResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineGetResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineListSignalErrorFull() instead")
    void virtualMachineListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinePatchResourceSignalErrorFull() instead")
    void virtualMachinePatchResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinePatchResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineStartSignalErrorFull() instead")
    void virtualMachineStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineStopSignalErrorFull() instead")
    void virtualMachineStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
