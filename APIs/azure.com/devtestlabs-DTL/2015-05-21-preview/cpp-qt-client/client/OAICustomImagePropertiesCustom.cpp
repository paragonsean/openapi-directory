/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomImagePropertiesCustom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomImagePropertiesCustom::OAICustomImagePropertiesCustom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomImagePropertiesCustom::OAICustomImagePropertiesCustom() {
    this->initializeModel();
}

OAICustomImagePropertiesCustom::~OAICustomImagePropertiesCustom() {}

void OAICustomImagePropertiesCustom::initializeModel() {

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_sys_prep_isSet = false;
    m_sys_prep_isValid = false;
}

void OAICustomImagePropertiesCustom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomImagePropertiesCustom::fromJsonObject(QJsonObject json) {

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("imageName")]);
    m_image_name_isSet = !json[QString("imageName")].isNull() && m_image_name_isValid;

    m_sys_prep_isValid = ::OpenAPI::fromJsonValue(m_sys_prep, json[QString("sysPrep")]);
    m_sys_prep_isSet = !json[QString("sysPrep")].isNull() && m_sys_prep_isValid;
}

QString OAICustomImagePropertiesCustom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomImagePropertiesCustom::asJsonObject() const {
    QJsonObject obj;
    if (m_image_name_isSet) {
        obj.insert(QString("imageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_sys_prep_isSet) {
        obj.insert(QString("sysPrep"), ::OpenAPI::toJsonValue(m_sys_prep));
    }
    return obj;
}

QString OAICustomImagePropertiesCustom::getImageName() const {
    return m_image_name;
}
void OAICustomImagePropertiesCustom::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAICustomImagePropertiesCustom::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAICustomImagePropertiesCustom::is_image_name_Valid() const{
    return m_image_name_isValid;
}

bool OAICustomImagePropertiesCustom::isSysPrep() const {
    return m_sys_prep;
}
void OAICustomImagePropertiesCustom::setSysPrep(const bool &sys_prep) {
    m_sys_prep = sys_prep;
    m_sys_prep_isSet = true;
}

bool OAICustomImagePropertiesCustom::is_sys_prep_Set() const{
    return m_sys_prep_isSet;
}

bool OAICustomImagePropertiesCustom::is_sys_prep_Valid() const{
    return m_sys_prep_isValid;
}

bool OAICustomImagePropertiesCustom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sys_prep_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomImagePropertiesCustom::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
