/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostInsightProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostInsightProperties::OAICostInsightProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostInsightProperties::OAICostInsightProperties() {
    this->initializeModel();
}

OAICostInsightProperties::~OAICostInsightProperties() {}

void OAICostInsightProperties::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_vm_costs_isSet = false;
    m_vm_costs_isValid = false;
}

void OAICostInsightProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostInsightProperties::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_vm_costs_isValid = ::OpenAPI::fromJsonValue(m_vm_costs, json[QString("vmCosts")]);
    m_vm_costs_isSet = !json[QString("vmCosts")].isNull() && m_vm_costs_isValid;
}

QString OAICostInsightProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostInsightProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_vm_costs.size() > 0) {
        obj.insert(QString("vmCosts"), ::OpenAPI::toJsonValue(m_vm_costs));
    }
    return obj;
}

QString OAICostInsightProperties::getCurrencyCode() const {
    return m_currency_code;
}
void OAICostInsightProperties::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICostInsightProperties::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICostInsightProperties::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAICostInsightProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAICostInsightProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAICostInsightProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAICostInsightProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIVMCostProperties> OAICostInsightProperties::getVmCosts() const {
    return m_vm_costs;
}
void OAICostInsightProperties::setVmCosts(const QList<OAIVMCostProperties> &vm_costs) {
    m_vm_costs = vm_costs;
    m_vm_costs_isSet = true;
}

bool OAICostInsightProperties::is_vm_costs_Set() const{
    return m_vm_costs_isSet;
}

bool OAICostInsightProperties::is_vm_costs_Valid() const{
    return m_vm_costs_isValid;
}

bool OAICostInsightProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_costs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostInsightProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
