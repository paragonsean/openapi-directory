# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CostPerDayProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, cost_type: str=None, _date: datetime=None):
        """CostPerDayProperties - a model defined in OpenAPI

        :param cost: The cost of this CostPerDayProperties.
        :param cost_type: The cost_type of this CostPerDayProperties.
        :param _date: The _date of this CostPerDayProperties.
        """
        self.openapi_types = {
            'cost': float,
            'cost_type': str,
            '_date': datetime
        }

        self.attribute_map = {
            'cost': 'cost',
            'cost_type': 'costType',
            '_date': 'date'
        }

        self._cost = cost
        self._cost_type = cost_type
        self.__date = _date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostPerDayProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostPerDayProperties of this CostPerDayProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this CostPerDayProperties.

        The cost of the cost item.

        :return: The cost of this CostPerDayProperties.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this CostPerDayProperties.

        The cost of the cost item.

        :param cost: The cost of this CostPerDayProperties.
        :type cost: float
        """

        self._cost = cost

    @property
    def cost_type(self):
        """Gets the cost_type of this CostPerDayProperties.

        The type of the cost.

        :return: The cost_type of this CostPerDayProperties.
        :rtype: str
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this CostPerDayProperties.

        The type of the cost.

        :param cost_type: The cost_type of this CostPerDayProperties.
        :type cost_type: str
        """
        allowed_values = ["Unavailable", "Reported", "Projected"]  # noqa: E501
        if cost_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cost_type` ({0}), must be one of {1}"
                .format(cost_type, allowed_values)
            )

        self._cost_type = cost_type

    @property
    def _date(self):
        """Gets the _date of this CostPerDayProperties.

        The date of the cost item.

        :return: The _date of this CostPerDayProperties.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CostPerDayProperties.

        The date of the cost item.

        :param _date: The _date of this CostPerDayProperties.
        :type _date: datetime
        """

        self.__date = _date
