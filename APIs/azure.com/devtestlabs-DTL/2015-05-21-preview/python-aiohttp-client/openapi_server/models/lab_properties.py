# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts_storage_account: str=None, created_date: datetime=None, default_storage_account: str=None, default_virtual_network_id: str=None, lab_storage_type: str=None, provisioning_state: str=None, storage_accounts: List[str]=None, vault_name: str=None):
        """LabProperties - a model defined in OpenAPI

        :param artifacts_storage_account: The artifacts_storage_account of this LabProperties.
        :param created_date: The created_date of this LabProperties.
        :param default_storage_account: The default_storage_account of this LabProperties.
        :param default_virtual_network_id: The default_virtual_network_id of this LabProperties.
        :param lab_storage_type: The lab_storage_type of this LabProperties.
        :param provisioning_state: The provisioning_state of this LabProperties.
        :param storage_accounts: The storage_accounts of this LabProperties.
        :param vault_name: The vault_name of this LabProperties.
        """
        self.openapi_types = {
            'artifacts_storage_account': str,
            'created_date': datetime,
            'default_storage_account': str,
            'default_virtual_network_id': str,
            'lab_storage_type': str,
            'provisioning_state': str,
            'storage_accounts': List[str],
            'vault_name': str
        }

        self.attribute_map = {
            'artifacts_storage_account': 'artifactsStorageAccount',
            'created_date': 'createdDate',
            'default_storage_account': 'defaultStorageAccount',
            'default_virtual_network_id': 'defaultVirtualNetworkId',
            'lab_storage_type': 'labStorageType',
            'provisioning_state': 'provisioningState',
            'storage_accounts': 'storageAccounts',
            'vault_name': 'vaultName'
        }

        self._artifacts_storage_account = artifacts_storage_account
        self._created_date = created_date
        self._default_storage_account = default_storage_account
        self._default_virtual_network_id = default_virtual_network_id
        self._lab_storage_type = lab_storage_type
        self._provisioning_state = provisioning_state
        self._storage_accounts = storage_accounts
        self._vault_name = vault_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabProperties of this LabProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts_storage_account(self):
        """Gets the artifacts_storage_account of this LabProperties.

        The artifact storage account of the lab.

        :return: The artifacts_storage_account of this LabProperties.
        :rtype: str
        """
        return self._artifacts_storage_account

    @artifacts_storage_account.setter
    def artifacts_storage_account(self, artifacts_storage_account):
        """Sets the artifacts_storage_account of this LabProperties.

        The artifact storage account of the lab.

        :param artifacts_storage_account: The artifacts_storage_account of this LabProperties.
        :type artifacts_storage_account: str
        """

        self._artifacts_storage_account = artifacts_storage_account

    @property
    def created_date(self):
        """Gets the created_date of this LabProperties.

        The creation date of the lab.

        :return: The created_date of this LabProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this LabProperties.

        The creation date of the lab.

        :param created_date: The created_date of this LabProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def default_storage_account(self):
        """Gets the default_storage_account of this LabProperties.

        The lab's default storage account.

        :return: The default_storage_account of this LabProperties.
        :rtype: str
        """
        return self._default_storage_account

    @default_storage_account.setter
    def default_storage_account(self, default_storage_account):
        """Sets the default_storage_account of this LabProperties.

        The lab's default storage account.

        :param default_storage_account: The default_storage_account of this LabProperties.
        :type default_storage_account: str
        """

        self._default_storage_account = default_storage_account

    @property
    def default_virtual_network_id(self):
        """Gets the default_virtual_network_id of this LabProperties.

        The default virtual network identifier of the lab.

        :return: The default_virtual_network_id of this LabProperties.
        :rtype: str
        """
        return self._default_virtual_network_id

    @default_virtual_network_id.setter
    def default_virtual_network_id(self, default_virtual_network_id):
        """Sets the default_virtual_network_id of this LabProperties.

        The default virtual network identifier of the lab.

        :param default_virtual_network_id: The default_virtual_network_id of this LabProperties.
        :type default_virtual_network_id: str
        """

        self._default_virtual_network_id = default_virtual_network_id

    @property
    def lab_storage_type(self):
        """Gets the lab_storage_type of this LabProperties.

        The type of the lab storage.

        :return: The lab_storage_type of this LabProperties.
        :rtype: str
        """
        return self._lab_storage_type

    @lab_storage_type.setter
    def lab_storage_type(self, lab_storage_type):
        """Sets the lab_storage_type of this LabProperties.

        The type of the lab storage.

        :param lab_storage_type: The lab_storage_type of this LabProperties.
        :type lab_storage_type: str
        """
        allowed_values = ["Standard", "Premium"]  # noqa: E501
        if lab_storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lab_storage_type` ({0}), must be one of {1}"
                .format(lab_storage_type, allowed_values)
            )

        self._lab_storage_type = lab_storage_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LabProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this LabProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LabProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this LabProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def storage_accounts(self):
        """Gets the storage_accounts of this LabProperties.

        The storage accounts of the lab.

        :return: The storage_accounts of this LabProperties.
        :rtype: List[str]
        """
        return self._storage_accounts

    @storage_accounts.setter
    def storage_accounts(self, storage_accounts):
        """Sets the storage_accounts of this LabProperties.

        The storage accounts of the lab.

        :param storage_accounts: The storage_accounts of this LabProperties.
        :type storage_accounts: List[str]
        """

        self._storage_accounts = storage_accounts

    @property
    def vault_name(self):
        """Gets the vault_name of this LabProperties.

        The name of the key vault of the lab.

        :return: The vault_name of this LabProperties.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this LabProperties.

        The name of the key vault of the lab.

        :param vault_name: The vault_name of this LabProperties.
        :type vault_name: str
        """

        self._vault_name = vault_name
