# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArmTemplateInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: object=None, template: object=None):
        """ArmTemplateInfo - a model defined in OpenAPI

        :param parameters: The parameters of this ArmTemplateInfo.
        :param template: The template of this ArmTemplateInfo.
        """
        self.openapi_types = {
            'parameters': object,
            'template': object
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'template': 'template'
        }

        self._parameters = parameters
        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArmTemplateInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArmTemplateInfo of this ArmTemplateInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this ArmTemplateInfo.


        :return: The parameters of this ArmTemplateInfo.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ArmTemplateInfo.


        :param parameters: The parameters of this ArmTemplateInfo.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def template(self):
        """Gets the template of this ArmTemplateInfo.


        :return: The template of this ArmTemplateInfo.
        :rtype: object
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ArmTemplateInfo.


        :param template: The template of this ArmTemplateInfo.
        :type template: object
        """

        self._template = template
