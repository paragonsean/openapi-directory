/*
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.ResponseWithContinuationSchedule;
import org.openapitools.client.model.Schedule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scheduleCreateOrUpdateResource
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param schedule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleCreateOrUpdateResourceCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleCreateOrUpdateResourceValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduleCreateOrUpdateResource(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduleCreateOrUpdateResource(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling scheduleCreateOrUpdateResource(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling scheduleCreateOrUpdateResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduleCreateOrUpdateResource(Async)");
        }

        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling scheduleCreateOrUpdateResource(Async)");
        }

        return scheduleCreateOrUpdateResourceCall(subscriptionId, resourceGroupName, labName, name, apiVersion, schedule, _callback);

    }

    /**
     * 
     * Create or replace an existing schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param schedule  (required)
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Schedule scheduleCreateOrUpdateResource(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule) throws ApiException {
        ApiResponse<Schedule> localVarResp = scheduleCreateOrUpdateResourceWithHttpInfo(subscriptionId, resourceGroupName, labName, name, apiVersion, schedule);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or replace an existing schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param schedule  (required)
     * @return ApiResponse&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedule> scheduleCreateOrUpdateResourceWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule) throws ApiException {
        okhttp3.Call localVarCall = scheduleCreateOrUpdateResourceValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, schedule, null);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or replace an existing schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param schedule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleCreateOrUpdateResourceAsync(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule, final ApiCallback<Schedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleCreateOrUpdateResourceValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, schedule, _callback);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleDeleteResource
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleDeleteResourceCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleDeleteResourceValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduleDeleteResource(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduleDeleteResource(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling scheduleDeleteResource(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling scheduleDeleteResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduleDeleteResource(Async)");
        }

        return scheduleDeleteResourceCall(subscriptionId, resourceGroupName, labName, name, apiVersion, _callback);

    }

    /**
     * 
     * Delete schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleDeleteResource(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion) throws ApiException {
        scheduleDeleteResourceWithHttpInfo(subscriptionId, resourceGroupName, labName, name, apiVersion);
    }

    /**
     * 
     * Delete schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleDeleteResourceWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = scheduleDeleteResourceValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleDeleteResourceAsync(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleDeleteResourceValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleExecute
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleExecuteCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}/execute"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleExecuteValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduleExecute(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduleExecute(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling scheduleExecute(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling scheduleExecute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduleExecute(Async)");
        }

        return scheduleExecuteCall(subscriptionId, resourceGroupName, labName, name, apiVersion, _callback);

    }

    /**
     * 
     * Execute a schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleExecute(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion) throws ApiException {
        scheduleExecuteWithHttpInfo(subscriptionId, resourceGroupName, labName, name, apiVersion);
    }

    /**
     * 
     * Execute a schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleExecuteWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = scheduleExecuteValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Execute a schedule. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleExecuteAsync(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleExecuteValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleGetResource
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetResourceCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleGetResourceValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduleGetResource(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduleGetResource(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling scheduleGetResource(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling scheduleGetResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduleGetResource(Async)");
        }

        return scheduleGetResourceCall(subscriptionId, resourceGroupName, labName, name, apiVersion, _callback);

    }

    /**
     * 
     * Get schedule.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Schedule scheduleGetResource(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion) throws ApiException {
        ApiResponse<Schedule> localVarResp = scheduleGetResourceWithHttpInfo(subscriptionId, resourceGroupName, labName, name, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get schedule.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedule> scheduleGetResourceWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = scheduleGetResourceValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, null);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get schedule.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleGetResourceAsync(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, final ApiCallback<Schedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleGetResourceValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleList
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $orderBy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleListCall(String subscriptionId, String resourceGroupName, String labName, String apiVersion, String $filter, Integer $top, String $orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderBy", $orderBy));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleListValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String apiVersion, String $filter, Integer $top, String $orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduleList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduleList(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling scheduleList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduleList(Async)");
        }

        return scheduleListCall(subscriptionId, resourceGroupName, labName, apiVersion, $filter, $top, $orderBy, _callback);

    }

    /**
     * 
     * List schedules.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $orderBy  (optional)
     * @return ResponseWithContinuationSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ResponseWithContinuationSchedule scheduleList(String subscriptionId, String resourceGroupName, String labName, String apiVersion, String $filter, Integer $top, String $orderBy) throws ApiException {
        ApiResponse<ResponseWithContinuationSchedule> localVarResp = scheduleListWithHttpInfo(subscriptionId, resourceGroupName, labName, apiVersion, $filter, $top, $orderBy);
        return localVarResp.getData();
    }

    /**
     * 
     * List schedules.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $orderBy  (optional)
     * @return ApiResponse&lt;ResponseWithContinuationSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseWithContinuationSchedule> scheduleListWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String apiVersion, String $filter, Integer $top, String $orderBy) throws ApiException {
        okhttp3.Call localVarCall = scheduleListValidateBeforeCall(subscriptionId, resourceGroupName, labName, apiVersion, $filter, $top, $orderBy, null);
        Type localVarReturnType = new TypeToken<ResponseWithContinuationSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List schedules.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param $top  (optional)
     * @param $orderBy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleListAsync(String subscriptionId, String resourceGroupName, String labName, String apiVersion, String $filter, Integer $top, String $orderBy, final ApiCallback<ResponseWithContinuationSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleListValidateBeforeCall(subscriptionId, resourceGroupName, labName, apiVersion, $filter, $top, $orderBy, _callback);
        Type localVarReturnType = new TypeToken<ResponseWithContinuationSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulePatchResource
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param schedule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulePatchResourceCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulePatchResourceValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling schedulePatchResource(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling schedulePatchResource(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling schedulePatchResource(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling schedulePatchResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling schedulePatchResource(Async)");
        }

        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling schedulePatchResource(Async)");
        }

        return schedulePatchResourceCall(subscriptionId, resourceGroupName, labName, name, apiVersion, schedule, _callback);

    }

    /**
     * 
     * Modify properties of schedules.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param schedule  (required)
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Schedule schedulePatchResource(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule) throws ApiException {
        ApiResponse<Schedule> localVarResp = schedulePatchResourceWithHttpInfo(subscriptionId, resourceGroupName, labName, name, apiVersion, schedule);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify properties of schedules.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param schedule  (required)
     * @return ApiResponse&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedule> schedulePatchResourceWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule) throws ApiException {
        okhttp3.Call localVarCall = schedulePatchResourceValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, schedule, null);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify properties of schedules.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param name The name of the schedule. (required)
     * @param apiVersion Client API version. (required)
     * @param schedule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulePatchResourceAsync(String subscriptionId, String resourceGroupName, String labName, String name, String apiVersion, Schedule schedule, final ApiCallback<Schedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulePatchResourceValidateBeforeCall(subscriptionId, resourceGroupName, labName, name, apiVersion, schedule, _callback);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
