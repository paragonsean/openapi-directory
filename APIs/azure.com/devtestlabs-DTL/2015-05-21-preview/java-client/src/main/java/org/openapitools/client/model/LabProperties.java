/*
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a lab.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:39.382245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabProperties {
  public static final String SERIALIZED_NAME_ARTIFACTS_STORAGE_ACCOUNT = "artifactsStorageAccount";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS_STORAGE_ACCOUNT)
  private String artifactsStorageAccount;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DEFAULT_STORAGE_ACCOUNT = "defaultStorageAccount";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STORAGE_ACCOUNT)
  private String defaultStorageAccount;

  public static final String SERIALIZED_NAME_DEFAULT_VIRTUAL_NETWORK_ID = "defaultVirtualNetworkId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VIRTUAL_NETWORK_ID)
  private String defaultVirtualNetworkId;

  /**
   * The type of the lab storage.
   */
  @JsonAdapter(LabStorageTypeEnum.Adapter.class)
  public enum LabStorageTypeEnum {
    STANDARD("Standard"),
    
    PREMIUM("Premium");

    private String value;

    LabStorageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabStorageTypeEnum fromValue(String value) {
      for (LabStorageTypeEnum b : LabStorageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabStorageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabStorageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabStorageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabStorageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabStorageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAB_STORAGE_TYPE = "labStorageType";
  @SerializedName(SERIALIZED_NAME_LAB_STORAGE_TYPE)
  private LabStorageTypeEnum labStorageType;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNTS = "storageAccounts";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNTS)
  private List<String> storageAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_VAULT_NAME = "vaultName";
  @SerializedName(SERIALIZED_NAME_VAULT_NAME)
  private String vaultName;

  public LabProperties() {
  }

  public LabProperties artifactsStorageAccount(String artifactsStorageAccount) {
    this.artifactsStorageAccount = artifactsStorageAccount;
    return this;
  }

  /**
   * The artifact storage account of the lab.
   * @return artifactsStorageAccount
   */
  @javax.annotation.Nullable
  public String getArtifactsStorageAccount() {
    return artifactsStorageAccount;
  }

  public void setArtifactsStorageAccount(String artifactsStorageAccount) {
    this.artifactsStorageAccount = artifactsStorageAccount;
  }


  public LabProperties createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The creation date of the lab.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public LabProperties defaultStorageAccount(String defaultStorageAccount) {
    this.defaultStorageAccount = defaultStorageAccount;
    return this;
  }

  /**
   * The lab&#39;s default storage account.
   * @return defaultStorageAccount
   */
  @javax.annotation.Nullable
  public String getDefaultStorageAccount() {
    return defaultStorageAccount;
  }

  public void setDefaultStorageAccount(String defaultStorageAccount) {
    this.defaultStorageAccount = defaultStorageAccount;
  }


  public LabProperties defaultVirtualNetworkId(String defaultVirtualNetworkId) {
    this.defaultVirtualNetworkId = defaultVirtualNetworkId;
    return this;
  }

  /**
   * The default virtual network identifier of the lab.
   * @return defaultVirtualNetworkId
   */
  @javax.annotation.Nullable
  public String getDefaultVirtualNetworkId() {
    return defaultVirtualNetworkId;
  }

  public void setDefaultVirtualNetworkId(String defaultVirtualNetworkId) {
    this.defaultVirtualNetworkId = defaultVirtualNetworkId;
  }


  public LabProperties labStorageType(LabStorageTypeEnum labStorageType) {
    this.labStorageType = labStorageType;
    return this;
  }

  /**
   * The type of the lab storage.
   * @return labStorageType
   */
  @javax.annotation.Nullable
  public LabStorageTypeEnum getLabStorageType() {
    return labStorageType;
  }

  public void setLabStorageType(LabStorageTypeEnum labStorageType) {
    this.labStorageType = labStorageType;
  }


  public LabProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public LabProperties storageAccounts(List<String> storageAccounts) {
    this.storageAccounts = storageAccounts;
    return this;
  }

  public LabProperties addStorageAccountsItem(String storageAccountsItem) {
    if (this.storageAccounts == null) {
      this.storageAccounts = new ArrayList<>();
    }
    this.storageAccounts.add(storageAccountsItem);
    return this;
  }

  /**
   * The storage accounts of the lab.
   * @return storageAccounts
   */
  @javax.annotation.Nullable
  public List<String> getStorageAccounts() {
    return storageAccounts;
  }

  public void setStorageAccounts(List<String> storageAccounts) {
    this.storageAccounts = storageAccounts;
  }


  public LabProperties vaultName(String vaultName) {
    this.vaultName = vaultName;
    return this;
  }

  /**
   * The name of the key vault of the lab.
   * @return vaultName
   */
  @javax.annotation.Nullable
  public String getVaultName() {
    return vaultName;
  }

  public void setVaultName(String vaultName) {
    this.vaultName = vaultName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabProperties labProperties = (LabProperties) o;
    return Objects.equals(this.artifactsStorageAccount, labProperties.artifactsStorageAccount) &&
        Objects.equals(this.createdDate, labProperties.createdDate) &&
        Objects.equals(this.defaultStorageAccount, labProperties.defaultStorageAccount) &&
        Objects.equals(this.defaultVirtualNetworkId, labProperties.defaultVirtualNetworkId) &&
        Objects.equals(this.labStorageType, labProperties.labStorageType) &&
        Objects.equals(this.provisioningState, labProperties.provisioningState) &&
        Objects.equals(this.storageAccounts, labProperties.storageAccounts) &&
        Objects.equals(this.vaultName, labProperties.vaultName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactsStorageAccount, createdDate, defaultStorageAccount, defaultVirtualNetworkId, labStorageType, provisioningState, storageAccounts, vaultName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabProperties {\n");
    sb.append("    artifactsStorageAccount: ").append(toIndentedString(artifactsStorageAccount)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    defaultStorageAccount: ").append(toIndentedString(defaultStorageAccount)).append("\n");
    sb.append("    defaultVirtualNetworkId: ").append(toIndentedString(defaultVirtualNetworkId)).append("\n");
    sb.append("    labStorageType: ").append(toIndentedString(labStorageType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    storageAccounts: ").append(toIndentedString(storageAccounts)).append("\n");
    sb.append("    vaultName: ").append(toIndentedString(vaultName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactsStorageAccount");
    openapiFields.add("createdDate");
    openapiFields.add("defaultStorageAccount");
    openapiFields.add("defaultVirtualNetworkId");
    openapiFields.add("labStorageType");
    openapiFields.add("provisioningState");
    openapiFields.add("storageAccounts");
    openapiFields.add("vaultName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabProperties is not found in the empty JSON string", LabProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("artifactsStorageAccount") != null && !jsonObj.get("artifactsStorageAccount").isJsonNull()) && !jsonObj.get("artifactsStorageAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactsStorageAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactsStorageAccount").toString()));
      }
      if ((jsonObj.get("defaultStorageAccount") != null && !jsonObj.get("defaultStorageAccount").isJsonNull()) && !jsonObj.get("defaultStorageAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultStorageAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultStorageAccount").toString()));
      }
      if ((jsonObj.get("defaultVirtualNetworkId") != null && !jsonObj.get("defaultVirtualNetworkId").isJsonNull()) && !jsonObj.get("defaultVirtualNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultVirtualNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultVirtualNetworkId").toString()));
      }
      if ((jsonObj.get("labStorageType") != null && !jsonObj.get("labStorageType").isJsonNull()) && !jsonObj.get("labStorageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labStorageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labStorageType").toString()));
      }
      // validate the optional field `labStorageType`
      if (jsonObj.get("labStorageType") != null && !jsonObj.get("labStorageType").isJsonNull()) {
        LabStorageTypeEnum.validateJsonElement(jsonObj.get("labStorageType"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storageAccounts") != null && !jsonObj.get("storageAccounts").isJsonNull() && !jsonObj.get("storageAccounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("storageAccounts").toString()));
      }
      if ((jsonObj.get("vaultName") != null && !jsonObj.get("vaultName").isJsonNull()) && !jsonObj.get("vaultName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LabProperties>() {
           @Override
           public void write(JsonWriter out, LabProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabProperties
   * @throws IOException if the JSON string is invalid with respect to LabProperties
   */
  public static LabProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabProperties.class);
  }

  /**
   * Convert an instance of LabProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

