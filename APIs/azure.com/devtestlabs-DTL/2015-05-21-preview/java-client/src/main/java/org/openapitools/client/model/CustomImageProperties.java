/*
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CustomImagePropertiesCustom;
import org.openapitools.client.model.CustomImagePropertiesFromVm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a custom image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:39.382245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomImageProperties {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The OS type of the custom image.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux"),
    
    NONE("None");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_VHD = "vhd";
  @SerializedName(SERIALIZED_NAME_VHD)
  private CustomImagePropertiesCustom vhd;

  public static final String SERIALIZED_NAME_VM = "vm";
  @SerializedName(SERIALIZED_NAME_VM)
  private CustomImagePropertiesFromVm vm;

  public CustomImageProperties() {
  }

  public CustomImageProperties author(String author) {
    this.author = author;
    return this;
  }

  /**
   * The author of the custom image.
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public CustomImageProperties creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The creation date of the custom image.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public CustomImageProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the custom image.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CustomImageProperties osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The OS type of the custom image.
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public CustomImageProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public CustomImageProperties vhd(CustomImagePropertiesCustom vhd) {
    this.vhd = vhd;
    return this;
  }

  /**
   * Get vhd
   * @return vhd
   */
  @javax.annotation.Nullable
  public CustomImagePropertiesCustom getVhd() {
    return vhd;
  }

  public void setVhd(CustomImagePropertiesCustom vhd) {
    this.vhd = vhd;
  }


  public CustomImageProperties vm(CustomImagePropertiesFromVm vm) {
    this.vm = vm;
    return this;
  }

  /**
   * Get vm
   * @return vm
   */
  @javax.annotation.Nullable
  public CustomImagePropertiesFromVm getVm() {
    return vm;
  }

  public void setVm(CustomImagePropertiesFromVm vm) {
    this.vm = vm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomImageProperties customImageProperties = (CustomImageProperties) o;
    return Objects.equals(this.author, customImageProperties.author) &&
        Objects.equals(this.creationDate, customImageProperties.creationDate) &&
        Objects.equals(this.description, customImageProperties.description) &&
        Objects.equals(this.osType, customImageProperties.osType) &&
        Objects.equals(this.provisioningState, customImageProperties.provisioningState) &&
        Objects.equals(this.vhd, customImageProperties.vhd) &&
        Objects.equals(this.vm, customImageProperties.vm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, creationDate, description, osType, provisioningState, vhd, vm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomImageProperties {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    vhd: ").append(toIndentedString(vhd)).append("\n");
    sb.append("    vm: ").append(toIndentedString(vm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("creationDate");
    openapiFields.add("description");
    openapiFields.add("osType");
    openapiFields.add("provisioningState");
    openapiFields.add("vhd");
    openapiFields.add("vm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomImageProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomImageProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomImageProperties is not found in the empty JSON string", CustomImageProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomImageProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomImageProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `vhd`
      if (jsonObj.get("vhd") != null && !jsonObj.get("vhd").isJsonNull()) {
        CustomImagePropertiesCustom.validateJsonElement(jsonObj.get("vhd"));
      }
      // validate the optional field `vm`
      if (jsonObj.get("vm") != null && !jsonObj.get("vm").isJsonNull()) {
        CustomImagePropertiesFromVm.validateJsonElement(jsonObj.get("vm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomImageProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomImageProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomImageProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomImageProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomImageProperties>() {
           @Override
           public void write(JsonWriter out, CustomImageProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomImageProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomImageProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomImageProperties
   * @throws IOException if the JSON string is invalid with respect to CustomImageProperties
   */
  public static CustomImageProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomImageProperties.class);
  }

  /**
   * Convert an instance of CustomImageProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

