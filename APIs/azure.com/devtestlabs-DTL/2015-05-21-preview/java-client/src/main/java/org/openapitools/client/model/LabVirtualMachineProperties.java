/*
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArtifactDeploymentStatusProperties;
import org.openapitools.client.model.ArtifactInstallProperties;
import org.openapitools.client.model.GalleryImageReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a virtual machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:39.382245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabVirtualMachineProperties {
  public static final String SERIALIZED_NAME_ARTIFACT_DEPLOYMENT_STATUS = "artifactDeploymentStatus";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_DEPLOYMENT_STATUS)
  private ArtifactDeploymentStatusProperties artifactDeploymentStatus;

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private List<ArtifactInstallProperties> artifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPUTE_ID = "computeId";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ID)
  private String computeId;

  public static final String SERIALIZED_NAME_CREATED_BY_USER = "createdByUser";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER)
  private String createdByUser;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_ID = "createdByUserId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_ID)
  private String createdByUserId;

  public static final String SERIALIZED_NAME_CUSTOM_IMAGE_ID = "customImageId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_IMAGE_ID)
  private String customImageId;

  public static final String SERIALIZED_NAME_DISALLOW_PUBLIC_IP_ADDRESS = "disallowPublicIpAddress";
  @SerializedName(SERIALIZED_NAME_DISALLOW_PUBLIC_IP_ADDRESS)
  private Boolean disallowPublicIpAddress;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_GALLERY_IMAGE_REFERENCE = "galleryImageReference";
  @SerializedName(SERIALIZED_NAME_GALLERY_IMAGE_REFERENCE)
  private GalleryImageReference galleryImageReference;

  public static final String SERIALIZED_NAME_IS_AUTHENTICATION_WITH_SSH_KEY = "isAuthenticationWithSshKey";
  @SerializedName(SERIALIZED_NAME_IS_AUTHENTICATION_WITH_SSH_KEY)
  private Boolean isAuthenticationWithSshKey;

  public static final String SERIALIZED_NAME_LAB_SUBNET_NAME = "labSubnetName";
  @SerializedName(SERIALIZED_NAME_LAB_SUBNET_NAME)
  private String labSubnetName;

  public static final String SERIALIZED_NAME_LAB_VIRTUAL_NETWORK_ID = "labVirtualNetworkId";
  @SerializedName(SERIALIZED_NAME_LAB_VIRTUAL_NETWORK_ID)
  private String labVirtualNetworkId;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_OWNER_OBJECT_ID = "ownerObjectId";
  @SerializedName(SERIALIZED_NAME_OWNER_OBJECT_ID)
  private String ownerObjectId;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_SSH_KEY = "sshKey";
  @SerializedName(SERIALIZED_NAME_SSH_KEY)
  private String sshKey;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public LabVirtualMachineProperties() {
  }

  public LabVirtualMachineProperties artifactDeploymentStatus(ArtifactDeploymentStatusProperties artifactDeploymentStatus) {
    this.artifactDeploymentStatus = artifactDeploymentStatus;
    return this;
  }

  /**
   * Get artifactDeploymentStatus
   * @return artifactDeploymentStatus
   */
  @javax.annotation.Nullable
  public ArtifactDeploymentStatusProperties getArtifactDeploymentStatus() {
    return artifactDeploymentStatus;
  }

  public void setArtifactDeploymentStatus(ArtifactDeploymentStatusProperties artifactDeploymentStatus) {
    this.artifactDeploymentStatus = artifactDeploymentStatus;
  }


  public LabVirtualMachineProperties artifacts(List<ArtifactInstallProperties> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public LabVirtualMachineProperties addArtifactsItem(ArtifactInstallProperties artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new ArrayList<>();
    }
    this.artifacts.add(artifactsItem);
    return this;
  }

  /**
   * The artifacts to be installed on the virtual machine.
   * @return artifacts
   */
  @javax.annotation.Nullable
  public List<ArtifactInstallProperties> getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(List<ArtifactInstallProperties> artifacts) {
    this.artifacts = artifacts;
  }


  public LabVirtualMachineProperties computeId(String computeId) {
    this.computeId = computeId;
    return this;
  }

  /**
   * The resource identifier (Microsoft.Compute) of the virtual machine.
   * @return computeId
   */
  @javax.annotation.Nullable
  public String getComputeId() {
    return computeId;
  }

  public void setComputeId(String computeId) {
    this.computeId = computeId;
  }


  public LabVirtualMachineProperties createdByUser(String createdByUser) {
    this.createdByUser = createdByUser;
    return this;
  }

  /**
   * The email address of creator of the virtual machine.
   * @return createdByUser
   */
  @javax.annotation.Nullable
  public String getCreatedByUser() {
    return createdByUser;
  }

  public void setCreatedByUser(String createdByUser) {
    this.createdByUser = createdByUser;
  }


  public LabVirtualMachineProperties createdByUserId(String createdByUserId) {
    this.createdByUserId = createdByUserId;
    return this;
  }

  /**
   * The object identifier of the creator of the virtual machine.
   * @return createdByUserId
   */
  @javax.annotation.Nullable
  public String getCreatedByUserId() {
    return createdByUserId;
  }

  public void setCreatedByUserId(String createdByUserId) {
    this.createdByUserId = createdByUserId;
  }


  public LabVirtualMachineProperties customImageId(String customImageId) {
    this.customImageId = customImageId;
    return this;
  }

  /**
   * The custom image identifier of the virtual machine.
   * @return customImageId
   */
  @javax.annotation.Nullable
  public String getCustomImageId() {
    return customImageId;
  }

  public void setCustomImageId(String customImageId) {
    this.customImageId = customImageId;
  }


  public LabVirtualMachineProperties disallowPublicIpAddress(Boolean disallowPublicIpAddress) {
    this.disallowPublicIpAddress = disallowPublicIpAddress;
    return this;
  }

  /**
   * Indicates whether the virtual machine is to be created without a public IP address.
   * @return disallowPublicIpAddress
   */
  @javax.annotation.Nullable
  public Boolean getDisallowPublicIpAddress() {
    return disallowPublicIpAddress;
  }

  public void setDisallowPublicIpAddress(Boolean disallowPublicIpAddress) {
    this.disallowPublicIpAddress = disallowPublicIpAddress;
  }


  public LabVirtualMachineProperties fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * The fully-qualified domain name of the virtual machine.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public LabVirtualMachineProperties galleryImageReference(GalleryImageReference galleryImageReference) {
    this.galleryImageReference = galleryImageReference;
    return this;
  }

  /**
   * Get galleryImageReference
   * @return galleryImageReference
   */
  @javax.annotation.Nullable
  public GalleryImageReference getGalleryImageReference() {
    return galleryImageReference;
  }

  public void setGalleryImageReference(GalleryImageReference galleryImageReference) {
    this.galleryImageReference = galleryImageReference;
  }


  public LabVirtualMachineProperties isAuthenticationWithSshKey(Boolean isAuthenticationWithSshKey) {
    this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
    return this;
  }

  /**
   * A value indicating whether this virtual machine uses an SSH key for authentication.
   * @return isAuthenticationWithSshKey
   */
  @javax.annotation.Nullable
  public Boolean getIsAuthenticationWithSshKey() {
    return isAuthenticationWithSshKey;
  }

  public void setIsAuthenticationWithSshKey(Boolean isAuthenticationWithSshKey) {
    this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
  }


  public LabVirtualMachineProperties labSubnetName(String labSubnetName) {
    this.labSubnetName = labSubnetName;
    return this;
  }

  /**
   * The lab subnet name of the virtual machine.
   * @return labSubnetName
   */
  @javax.annotation.Nullable
  public String getLabSubnetName() {
    return labSubnetName;
  }

  public void setLabSubnetName(String labSubnetName) {
    this.labSubnetName = labSubnetName;
  }


  public LabVirtualMachineProperties labVirtualNetworkId(String labVirtualNetworkId) {
    this.labVirtualNetworkId = labVirtualNetworkId;
    return this;
  }

  /**
   * The lab virtual network identifier of the virtual machine.
   * @return labVirtualNetworkId
   */
  @javax.annotation.Nullable
  public String getLabVirtualNetworkId() {
    return labVirtualNetworkId;
  }

  public void setLabVirtualNetworkId(String labVirtualNetworkId) {
    this.labVirtualNetworkId = labVirtualNetworkId;
  }


  public LabVirtualMachineProperties notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * The notes of the virtual machine.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public LabVirtualMachineProperties osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The OS type of the virtual machine.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public LabVirtualMachineProperties ownerObjectId(String ownerObjectId) {
    this.ownerObjectId = ownerObjectId;
    return this;
  }

  /**
   * The object identifier of the owner of the virtual machine.
   * @return ownerObjectId
   */
  @javax.annotation.Nullable
  public String getOwnerObjectId() {
    return ownerObjectId;
  }

  public void setOwnerObjectId(String ownerObjectId) {
    this.ownerObjectId = ownerObjectId;
  }


  public LabVirtualMachineProperties password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password of the virtual machine administrator.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public LabVirtualMachineProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public LabVirtualMachineProperties size(String size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the virtual machine.
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public LabVirtualMachineProperties sshKey(String sshKey) {
    this.sshKey = sshKey;
    return this;
  }

  /**
   * The SSH key of the virtual machine administrator.
   * @return sshKey
   */
  @javax.annotation.Nullable
  public String getSshKey() {
    return sshKey;
  }

  public void setSshKey(String sshKey) {
    this.sshKey = sshKey;
  }


  public LabVirtualMachineProperties userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * The user name of the virtual machine.
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabVirtualMachineProperties labVirtualMachineProperties = (LabVirtualMachineProperties) o;
    return Objects.equals(this.artifactDeploymentStatus, labVirtualMachineProperties.artifactDeploymentStatus) &&
        Objects.equals(this.artifacts, labVirtualMachineProperties.artifacts) &&
        Objects.equals(this.computeId, labVirtualMachineProperties.computeId) &&
        Objects.equals(this.createdByUser, labVirtualMachineProperties.createdByUser) &&
        Objects.equals(this.createdByUserId, labVirtualMachineProperties.createdByUserId) &&
        Objects.equals(this.customImageId, labVirtualMachineProperties.customImageId) &&
        Objects.equals(this.disallowPublicIpAddress, labVirtualMachineProperties.disallowPublicIpAddress) &&
        Objects.equals(this.fqdn, labVirtualMachineProperties.fqdn) &&
        Objects.equals(this.galleryImageReference, labVirtualMachineProperties.galleryImageReference) &&
        Objects.equals(this.isAuthenticationWithSshKey, labVirtualMachineProperties.isAuthenticationWithSshKey) &&
        Objects.equals(this.labSubnetName, labVirtualMachineProperties.labSubnetName) &&
        Objects.equals(this.labVirtualNetworkId, labVirtualMachineProperties.labVirtualNetworkId) &&
        Objects.equals(this.notes, labVirtualMachineProperties.notes) &&
        Objects.equals(this.osType, labVirtualMachineProperties.osType) &&
        Objects.equals(this.ownerObjectId, labVirtualMachineProperties.ownerObjectId) &&
        Objects.equals(this.password, labVirtualMachineProperties.password) &&
        Objects.equals(this.provisioningState, labVirtualMachineProperties.provisioningState) &&
        Objects.equals(this.size, labVirtualMachineProperties.size) &&
        Objects.equals(this.sshKey, labVirtualMachineProperties.sshKey) &&
        Objects.equals(this.userName, labVirtualMachineProperties.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactDeploymentStatus, artifacts, computeId, createdByUser, createdByUserId, customImageId, disallowPublicIpAddress, fqdn, galleryImageReference, isAuthenticationWithSshKey, labSubnetName, labVirtualNetworkId, notes, osType, ownerObjectId, password, provisioningState, size, sshKey, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabVirtualMachineProperties {\n");
    sb.append("    artifactDeploymentStatus: ").append(toIndentedString(artifactDeploymentStatus)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    computeId: ").append(toIndentedString(computeId)).append("\n");
    sb.append("    createdByUser: ").append(toIndentedString(createdByUser)).append("\n");
    sb.append("    createdByUserId: ").append(toIndentedString(createdByUserId)).append("\n");
    sb.append("    customImageId: ").append(toIndentedString(customImageId)).append("\n");
    sb.append("    disallowPublicIpAddress: ").append(toIndentedString(disallowPublicIpAddress)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    galleryImageReference: ").append(toIndentedString(galleryImageReference)).append("\n");
    sb.append("    isAuthenticationWithSshKey: ").append(toIndentedString(isAuthenticationWithSshKey)).append("\n");
    sb.append("    labSubnetName: ").append(toIndentedString(labSubnetName)).append("\n");
    sb.append("    labVirtualNetworkId: ").append(toIndentedString(labVirtualNetworkId)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    ownerObjectId: ").append(toIndentedString(ownerObjectId)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sshKey: ").append(toIndentedString(sshKey)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactDeploymentStatus");
    openapiFields.add("artifacts");
    openapiFields.add("computeId");
    openapiFields.add("createdByUser");
    openapiFields.add("createdByUserId");
    openapiFields.add("customImageId");
    openapiFields.add("disallowPublicIpAddress");
    openapiFields.add("fqdn");
    openapiFields.add("galleryImageReference");
    openapiFields.add("isAuthenticationWithSshKey");
    openapiFields.add("labSubnetName");
    openapiFields.add("labVirtualNetworkId");
    openapiFields.add("notes");
    openapiFields.add("osType");
    openapiFields.add("ownerObjectId");
    openapiFields.add("password");
    openapiFields.add("provisioningState");
    openapiFields.add("size");
    openapiFields.add("sshKey");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabVirtualMachineProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabVirtualMachineProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabVirtualMachineProperties is not found in the empty JSON string", LabVirtualMachineProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabVirtualMachineProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabVirtualMachineProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `artifactDeploymentStatus`
      if (jsonObj.get("artifactDeploymentStatus") != null && !jsonObj.get("artifactDeploymentStatus").isJsonNull()) {
        ArtifactDeploymentStatusProperties.validateJsonElement(jsonObj.get("artifactDeploymentStatus"));
      }
      if (jsonObj.get("artifacts") != null && !jsonObj.get("artifacts").isJsonNull()) {
        JsonArray jsonArrayartifacts = jsonObj.getAsJsonArray("artifacts");
        if (jsonArrayartifacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artifacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artifacts` to be an array in the JSON string but got `%s`", jsonObj.get("artifacts").toString()));
          }

          // validate the optional field `artifacts` (array)
          for (int i = 0; i < jsonArrayartifacts.size(); i++) {
            ArtifactInstallProperties.validateJsonElement(jsonArrayartifacts.get(i));
          };
        }
      }
      if ((jsonObj.get("computeId") != null && !jsonObj.get("computeId").isJsonNull()) && !jsonObj.get("computeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeId").toString()));
      }
      if ((jsonObj.get("createdByUser") != null && !jsonObj.get("createdByUser").isJsonNull()) && !jsonObj.get("createdByUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUser").toString()));
      }
      if ((jsonObj.get("createdByUserId") != null && !jsonObj.get("createdByUserId").isJsonNull()) && !jsonObj.get("createdByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUserId").toString()));
      }
      if ((jsonObj.get("customImageId") != null && !jsonObj.get("customImageId").isJsonNull()) && !jsonObj.get("customImageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customImageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customImageId").toString()));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      // validate the optional field `galleryImageReference`
      if (jsonObj.get("galleryImageReference") != null && !jsonObj.get("galleryImageReference").isJsonNull()) {
        GalleryImageReference.validateJsonElement(jsonObj.get("galleryImageReference"));
      }
      if ((jsonObj.get("labSubnetName") != null && !jsonObj.get("labSubnetName").isJsonNull()) && !jsonObj.get("labSubnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labSubnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labSubnetName").toString()));
      }
      if ((jsonObj.get("labVirtualNetworkId") != null && !jsonObj.get("labVirtualNetworkId").isJsonNull()) && !jsonObj.get("labVirtualNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labVirtualNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labVirtualNetworkId").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if ((jsonObj.get("ownerObjectId") != null && !jsonObj.get("ownerObjectId").isJsonNull()) && !jsonObj.get("ownerObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerObjectId").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("sshKey") != null && !jsonObj.get("sshKey").isJsonNull()) && !jsonObj.get("sshKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sshKey").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabVirtualMachineProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabVirtualMachineProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabVirtualMachineProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabVirtualMachineProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LabVirtualMachineProperties>() {
           @Override
           public void write(JsonWriter out, LabVirtualMachineProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabVirtualMachineProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabVirtualMachineProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabVirtualMachineProperties
   * @throws IOException if the JSON string is invalid with respect to LabVirtualMachineProperties
   */
  public static LabVirtualMachineProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabVirtualMachineProperties.class);
  }

  /**
   * Convert an instance of LabVirtualMachineProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

