/*
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PolicyViolation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result of a policy set evaluation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:39.382245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicySetResult {
  public static final String SERIALIZED_NAME_HAS_ERROR = "hasError";
  @SerializedName(SERIALIZED_NAME_HAS_ERROR)
  private Boolean hasError;

  public static final String SERIALIZED_NAME_POLICY_VIOLATIONS = "policyViolations";
  @SerializedName(SERIALIZED_NAME_POLICY_VIOLATIONS)
  private List<PolicyViolation> policyViolations = new ArrayList<>();

  public PolicySetResult() {
  }

  public PolicySetResult hasError(Boolean hasError) {
    this.hasError = hasError;
    return this;
  }

  /**
   * A value indicating whether this policy set evaluation has discovered violations.
   * @return hasError
   */
  @javax.annotation.Nullable
  public Boolean getHasError() {
    return hasError;
  }

  public void setHasError(Boolean hasError) {
    this.hasError = hasError;
  }


  public PolicySetResult policyViolations(List<PolicyViolation> policyViolations) {
    this.policyViolations = policyViolations;
    return this;
  }

  public PolicySetResult addPolicyViolationsItem(PolicyViolation policyViolationsItem) {
    if (this.policyViolations == null) {
      this.policyViolations = new ArrayList<>();
    }
    this.policyViolations.add(policyViolationsItem);
    return this;
  }

  /**
   * The list of policy violations.
   * @return policyViolations
   */
  @javax.annotation.Nullable
  public List<PolicyViolation> getPolicyViolations() {
    return policyViolations;
  }

  public void setPolicyViolations(List<PolicyViolation> policyViolations) {
    this.policyViolations = policyViolations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicySetResult policySetResult = (PolicySetResult) o;
    return Objects.equals(this.hasError, policySetResult.hasError) &&
        Objects.equals(this.policyViolations, policySetResult.policyViolations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasError, policyViolations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicySetResult {\n");
    sb.append("    hasError: ").append(toIndentedString(hasError)).append("\n");
    sb.append("    policyViolations: ").append(toIndentedString(policyViolations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasError");
    openapiFields.add("policyViolations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicySetResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicySetResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicySetResult is not found in the empty JSON string", PolicySetResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicySetResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicySetResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("policyViolations") != null && !jsonObj.get("policyViolations").isJsonNull()) {
        JsonArray jsonArraypolicyViolations = jsonObj.getAsJsonArray("policyViolations");
        if (jsonArraypolicyViolations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyViolations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyViolations` to be an array in the JSON string but got `%s`", jsonObj.get("policyViolations").toString()));
          }

          // validate the optional field `policyViolations` (array)
          for (int i = 0; i < jsonArraypolicyViolations.size(); i++) {
            PolicyViolation.validateJsonElement(jsonArraypolicyViolations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicySetResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicySetResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicySetResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicySetResult.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicySetResult>() {
           @Override
           public void write(JsonWriter out, PolicySetResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicySetResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicySetResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicySetResult
   * @throws IOException if the JSON string is invalid with respect to PolicySetResult
   */
  public static PolicySetResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicySetResult.class);
  }

  /**
   * Convert an instance of PolicySetResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

