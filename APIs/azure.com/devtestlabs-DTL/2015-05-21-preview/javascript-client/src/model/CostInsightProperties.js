/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VMCostProperties from './VMCostProperties';

/**
 * The CostInsightProperties model module.
 * @module model/CostInsightProperties
 * @version 2015-05-21-preview
 */
class CostInsightProperties {
    /**
     * Constructs a new <code>CostInsightProperties</code>.
     * @alias module:model/CostInsightProperties
     */
    constructor() { 
        
        CostInsightProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CostInsightProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CostInsightProperties} obj Optional instance to populate.
     * @return {module:model/CostInsightProperties} The populated <code>CostInsightProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CostInsightProperties();

            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('vmCosts')) {
                obj['vmCosts'] = ApiClient.convertToType(data['vmCosts'], [VMCostProperties]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CostInsightProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CostInsightProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['vmCosts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vmCosts'])) {
                throw new Error("Expected the field `vmCosts` to be an array in the JSON data but got " + data['vmCosts']);
            }
            // validate the optional field `vmCosts` (array)
            for (const item of data['vmCosts']) {
                VMCostProperties.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} currencyCode
 */
CostInsightProperties.prototype['currencyCode'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
CostInsightProperties.prototype['provisioningState'] = undefined;

/**
 * @member {Array.<module:model/VMCostProperties>} vmCosts
 */
CostInsightProperties.prototype['vmCosts'] = undefined;






export default CostInsightProperties;

