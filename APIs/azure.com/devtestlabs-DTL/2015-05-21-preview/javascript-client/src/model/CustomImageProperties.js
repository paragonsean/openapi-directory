/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomImagePropertiesCustom from './CustomImagePropertiesCustom';
import CustomImagePropertiesFromVm from './CustomImagePropertiesFromVm';

/**
 * The CustomImageProperties model module.
 * @module model/CustomImageProperties
 * @version 2015-05-21-preview
 */
class CustomImageProperties {
    /**
     * Constructs a new <code>CustomImageProperties</code>.
     * Properties of a custom image.
     * @alias module:model/CustomImageProperties
     */
    constructor() { 
        
        CustomImageProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomImageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomImageProperties} obj Optional instance to populate.
     * @return {module:model/CustomImageProperties} The populated <code>CustomImageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomImageProperties();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('vhd')) {
                obj['vhd'] = CustomImagePropertiesCustom.constructFromObject(data['vhd']);
            }
            if (data.hasOwnProperty('vm')) {
                obj['vm'] = CustomImagePropertiesFromVm.constructFromObject(data['vm']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomImageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomImageProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `vhd`
        if (data['vhd']) { // data not null
          CustomImagePropertiesCustom.validateJSON(data['vhd']);
        }
        // validate the optional field `vm`
        if (data['vm']) { // data not null
          CustomImagePropertiesFromVm.validateJSON(data['vm']);
        }

        return true;
    }


}



/**
 * The author of the custom image.
 * @member {String} author
 */
CustomImageProperties.prototype['author'] = undefined;

/**
 * The creation date of the custom image.
 * @member {Date} creationDate
 */
CustomImageProperties.prototype['creationDate'] = undefined;

/**
 * The description of the custom image.
 * @member {String} description
 */
CustomImageProperties.prototype['description'] = undefined;

/**
 * The OS type of the custom image.
 * @member {module:model/CustomImageProperties.OsTypeEnum} osType
 */
CustomImageProperties.prototype['osType'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
CustomImageProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/CustomImagePropertiesCustom} vhd
 */
CustomImageProperties.prototype['vhd'] = undefined;

/**
 * @member {module:model/CustomImagePropertiesFromVm} vm
 */
CustomImageProperties.prototype['vm'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
CustomImageProperties['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};



export default CustomImageProperties;

