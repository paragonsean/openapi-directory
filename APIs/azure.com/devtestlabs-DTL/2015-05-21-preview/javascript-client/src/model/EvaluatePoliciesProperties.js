/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EvaluatePoliciesProperties model module.
 * @module model/EvaluatePoliciesProperties
 * @version 2015-05-21-preview
 */
class EvaluatePoliciesProperties {
    /**
     * Constructs a new <code>EvaluatePoliciesProperties</code>.
     * Properties for evaluating a policy set.
     * @alias module:model/EvaluatePoliciesProperties
     */
    constructor() { 
        
        EvaluatePoliciesProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EvaluatePoliciesProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EvaluatePoliciesProperties} obj Optional instance to populate.
     * @return {module:model/EvaluatePoliciesProperties} The populated <code>EvaluatePoliciesProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EvaluatePoliciesProperties();

            if (data.hasOwnProperty('factData')) {
                obj['factData'] = ApiClient.convertToType(data['factData'], 'String');
            }
            if (data.hasOwnProperty('factName')) {
                obj['factName'] = ApiClient.convertToType(data['factName'], 'String');
            }
            if (data.hasOwnProperty('valueOffset')) {
                obj['valueOffset'] = ApiClient.convertToType(data['valueOffset'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EvaluatePoliciesProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EvaluatePoliciesProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['factData'] && !(typeof data['factData'] === 'string' || data['factData'] instanceof String)) {
            throw new Error("Expected the field `factData` to be a primitive type in the JSON string but got " + data['factData']);
        }
        // ensure the json data is a string
        if (data['factName'] && !(typeof data['factName'] === 'string' || data['factName'] instanceof String)) {
            throw new Error("Expected the field `factName` to be a primitive type in the JSON string but got " + data['factName']);
        }
        // ensure the json data is a string
        if (data['valueOffset'] && !(typeof data['valueOffset'] === 'string' || data['valueOffset'] instanceof String)) {
            throw new Error("Expected the field `valueOffset` to be a primitive type in the JSON string but got " + data['valueOffset']);
        }

        return true;
    }


}



/**
 * The fact data.
 * @member {String} factData
 */
EvaluatePoliciesProperties.prototype['factData'] = undefined;

/**
 * The fact name.
 * @member {String} factName
 */
EvaluatePoliciesProperties.prototype['factName'] = undefined;

/**
 * The value offset.
 * @member {String} valueOffset
 */
EvaluatePoliciesProperties.prototype['valueOffset'] = undefined;






export default EvaluatePoliciesProperties;

