/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArtifactSourceProperties model module.
 * @module model/ArtifactSourceProperties
 * @version 2015-05-21-preview
 */
class ArtifactSourceProperties {
    /**
     * Constructs a new <code>ArtifactSourceProperties</code>.
     * Properties of an artifact source.
     * @alias module:model/ArtifactSourceProperties
     */
    constructor() { 
        
        ArtifactSourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArtifactSourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArtifactSourceProperties} obj Optional instance to populate.
     * @return {module:model/ArtifactSourceProperties} The populated <code>ArtifactSourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArtifactSourceProperties();

            if (data.hasOwnProperty('branchRef')) {
                obj['branchRef'] = ApiClient.convertToType(data['branchRef'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('folderPath')) {
                obj['folderPath'] = ApiClient.convertToType(data['folderPath'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('securityToken')) {
                obj['securityToken'] = ApiClient.convertToType(data['securityToken'], 'String');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArtifactSourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArtifactSourceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['branchRef'] && !(typeof data['branchRef'] === 'string' || data['branchRef'] instanceof String)) {
            throw new Error("Expected the field `branchRef` to be a primitive type in the JSON string but got " + data['branchRef']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['folderPath'] && !(typeof data['folderPath'] === 'string' || data['folderPath'] instanceof String)) {
            throw new Error("Expected the field `folderPath` to be a primitive type in the JSON string but got " + data['folderPath']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['securityToken'] && !(typeof data['securityToken'] === 'string' || data['securityToken'] instanceof String)) {
            throw new Error("Expected the field `securityToken` to be a primitive type in the JSON string but got " + data['securityToken']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * The branch reference of the artifact source.
 * @member {String} branchRef
 */
ArtifactSourceProperties.prototype['branchRef'] = undefined;

/**
 * The display name of the artifact source.
 * @member {String} displayName
 */
ArtifactSourceProperties.prototype['displayName'] = undefined;

/**
 * The folder path of the artifact source.
 * @member {String} folderPath
 */
ArtifactSourceProperties.prototype['folderPath'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
ArtifactSourceProperties.prototype['provisioningState'] = undefined;

/**
 * The security token of the artifact source.
 * @member {String} securityToken
 */
ArtifactSourceProperties.prototype['securityToken'] = undefined;

/**
 * The type of the artifact source.
 * @member {module:model/ArtifactSourceProperties.SourceTypeEnum} sourceType
 */
ArtifactSourceProperties.prototype['sourceType'] = undefined;

/**
 * The status of the artifact source.
 * @member {module:model/ArtifactSourceProperties.StatusEnum} status
 */
ArtifactSourceProperties.prototype['status'] = undefined;

/**
 * The URI of the artifact source.
 * @member {String} uri
 */
ArtifactSourceProperties.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
ArtifactSourceProperties['SourceTypeEnum'] = {

    /**
     * value: "VsoGit"
     * @const
     */
    "VsoGit": "VsoGit",

    /**
     * value: "GitHub"
     * @const
     */
    "GitHub": "GitHub"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ArtifactSourceProperties['StatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default ArtifactSourceProperties;

