/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyViolation from './PolicyViolation';

/**
 * The PolicySetResult model module.
 * @module model/PolicySetResult
 * @version 2015-05-21-preview
 */
class PolicySetResult {
    /**
     * Constructs a new <code>PolicySetResult</code>.
     * Result of a policy set evaluation.
     * @alias module:model/PolicySetResult
     */
    constructor() { 
        
        PolicySetResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicySetResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicySetResult} obj Optional instance to populate.
     * @return {module:model/PolicySetResult} The populated <code>PolicySetResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicySetResult();

            if (data.hasOwnProperty('hasError')) {
                obj['hasError'] = ApiClient.convertToType(data['hasError'], 'Boolean');
            }
            if (data.hasOwnProperty('policyViolations')) {
                obj['policyViolations'] = ApiClient.convertToType(data['policyViolations'], [PolicyViolation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicySetResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicySetResult</code>.
     */
    static validateJSON(data) {
        if (data['policyViolations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policyViolations'])) {
                throw new Error("Expected the field `policyViolations` to be an array in the JSON data but got " + data['policyViolations']);
            }
            // validate the optional field `policyViolations` (array)
            for (const item of data['policyViolations']) {
                PolicyViolation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A value indicating whether this policy set evaluation has discovered violations.
 * @member {Boolean} hasError
 */
PolicySetResult.prototype['hasError'] = undefined;

/**
 * The list of policy violations.
 * @member {Array.<module:model/PolicyViolation>} policyViolations
 */
PolicySetResult.prototype['policyViolations'] = undefined;






export default PolicySetResult;

