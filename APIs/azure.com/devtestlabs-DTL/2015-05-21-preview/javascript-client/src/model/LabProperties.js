/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LabProperties model module.
 * @module model/LabProperties
 * @version 2015-05-21-preview
 */
class LabProperties {
    /**
     * Constructs a new <code>LabProperties</code>.
     * Properties of a lab.
     * @alias module:model/LabProperties
     */
    constructor() { 
        
        LabProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabProperties} obj Optional instance to populate.
     * @return {module:model/LabProperties} The populated <code>LabProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabProperties();

            if (data.hasOwnProperty('artifactsStorageAccount')) {
                obj['artifactsStorageAccount'] = ApiClient.convertToType(data['artifactsStorageAccount'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('defaultStorageAccount')) {
                obj['defaultStorageAccount'] = ApiClient.convertToType(data['defaultStorageAccount'], 'String');
            }
            if (data.hasOwnProperty('defaultVirtualNetworkId')) {
                obj['defaultVirtualNetworkId'] = ApiClient.convertToType(data['defaultVirtualNetworkId'], 'String');
            }
            if (data.hasOwnProperty('labStorageType')) {
                obj['labStorageType'] = ApiClient.convertToType(data['labStorageType'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('storageAccounts')) {
                obj['storageAccounts'] = ApiClient.convertToType(data['storageAccounts'], ['String']);
            }
            if (data.hasOwnProperty('vaultName')) {
                obj['vaultName'] = ApiClient.convertToType(data['vaultName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['artifactsStorageAccount'] && !(typeof data['artifactsStorageAccount'] === 'string' || data['artifactsStorageAccount'] instanceof String)) {
            throw new Error("Expected the field `artifactsStorageAccount` to be a primitive type in the JSON string but got " + data['artifactsStorageAccount']);
        }
        // ensure the json data is a string
        if (data['defaultStorageAccount'] && !(typeof data['defaultStorageAccount'] === 'string' || data['defaultStorageAccount'] instanceof String)) {
            throw new Error("Expected the field `defaultStorageAccount` to be a primitive type in the JSON string but got " + data['defaultStorageAccount']);
        }
        // ensure the json data is a string
        if (data['defaultVirtualNetworkId'] && !(typeof data['defaultVirtualNetworkId'] === 'string' || data['defaultVirtualNetworkId'] instanceof String)) {
            throw new Error("Expected the field `defaultVirtualNetworkId` to be a primitive type in the JSON string but got " + data['defaultVirtualNetworkId']);
        }
        // ensure the json data is a string
        if (data['labStorageType'] && !(typeof data['labStorageType'] === 'string' || data['labStorageType'] instanceof String)) {
            throw new Error("Expected the field `labStorageType` to be a primitive type in the JSON string but got " + data['labStorageType']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['storageAccounts'])) {
            throw new Error("Expected the field `storageAccounts` to be an array in the JSON data but got " + data['storageAccounts']);
        }
        // ensure the json data is a string
        if (data['vaultName'] && !(typeof data['vaultName'] === 'string' || data['vaultName'] instanceof String)) {
            throw new Error("Expected the field `vaultName` to be a primitive type in the JSON string but got " + data['vaultName']);
        }

        return true;
    }


}



/**
 * The artifact storage account of the lab.
 * @member {String} artifactsStorageAccount
 */
LabProperties.prototype['artifactsStorageAccount'] = undefined;

/**
 * The creation date of the lab.
 * @member {Date} createdDate
 */
LabProperties.prototype['createdDate'] = undefined;

/**
 * The lab's default storage account.
 * @member {String} defaultStorageAccount
 */
LabProperties.prototype['defaultStorageAccount'] = undefined;

/**
 * The default virtual network identifier of the lab.
 * @member {String} defaultVirtualNetworkId
 */
LabProperties.prototype['defaultVirtualNetworkId'] = undefined;

/**
 * The type of the lab storage.
 * @member {module:model/LabProperties.LabStorageTypeEnum} labStorageType
 */
LabProperties.prototype['labStorageType'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
LabProperties.prototype['provisioningState'] = undefined;

/**
 * The storage accounts of the lab.
 * @member {Array.<String>} storageAccounts
 */
LabProperties.prototype['storageAccounts'] = undefined;

/**
 * The name of the key vault of the lab.
 * @member {String} vaultName
 */
LabProperties.prototype['vaultName'] = undefined;





/**
 * Allowed values for the <code>labStorageType</code> property.
 * @enum {String}
 * @readonly
 */
LabProperties['LabStorageTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium"
};



export default LabProperties;

