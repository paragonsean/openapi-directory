/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import Cost from '../model/Cost';
import ResponseWithContinuationCost from '../model/ResponseWithContinuationCost';

/**
* Cost service.
* @module api/CostApi
* @version 2015-05-21-preview
*/
export default class CostApi {

    /**
    * Constructs a new CostApi. 
    * @alias module:api/CostApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the costGetResource operation.
     * @callback module:api/CostApi~costGetResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cost.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the cost.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CostApi~costGetResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cost}
     */
    costGetResource(subscriptionId, resourceGroupName, labName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling costGetResource");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling costGetResource");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling costGetResource");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling costGetResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling costGetResource");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Cost;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/costs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costList operation.
     * @callback module:api/CostApi~costListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationCost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List costs.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [orderBy] 
     * @param {module:api/CostApi~costListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationCost}
     */
    costList(subscriptionId, resourceGroupName, labName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling costList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling costList");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling costList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling costList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderBy': opts['orderBy'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResponseWithContinuationCost;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/costs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costRefreshData operation.
     * @callback module:api/CostApi~costRefreshDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh Lab's Cost Data. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the cost.
     * @param {String} apiVersion Client API version.
     * @param {module:api/CostApi~costRefreshDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    costRefreshData(subscriptionId, resourceGroupName, labName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling costRefreshData");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling costRefreshData");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling costRefreshData");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling costRefreshData");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling costRefreshData");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/costs/{name}/refreshData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
