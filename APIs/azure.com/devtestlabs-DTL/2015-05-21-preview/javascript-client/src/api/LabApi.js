/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import GenerateUploadUriParameter from '../model/GenerateUploadUriParameter';
import GenerateUploadUriResponse from '../model/GenerateUploadUriResponse';
import Lab from '../model/Lab';
import LabVirtualMachine from '../model/LabVirtualMachine';
import ResponseWithContinuationLab from '../model/ResponseWithContinuationLab';
import ResponseWithContinuationLabVhd from '../model/ResponseWithContinuationLabVhd';

/**
* Lab service.
* @module api/LabApi
* @version 2015-05-21-preview
*/
export default class LabApi {

    /**
    * Constructs a new LabApi. 
    * @alias module:api/LabApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the labCreateEnvironment operation.
     * @callback module:api/LabApi~labCreateEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create virtual machines in a Lab. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/LabVirtualMachine} labVirtualMachine 
     * @param {module:api/LabApi~labCreateEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labCreateEnvironment(subscriptionId, resourceGroupName, name, apiVersion, labVirtualMachine, callback) {
      let postBody = labVirtualMachine;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labCreateEnvironment");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labCreateEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labCreateEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labCreateEnvironment");
      }
      // verify the required parameter 'labVirtualMachine' is set
      if (labVirtualMachine === undefined || labVirtualMachine === null) {
        throw new Error("Missing the required parameter 'labVirtualMachine' when calling labCreateEnvironment");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labCreateOrUpdateResource operation.
     * @callback module:api/LabApi~labCreateOrUpdateResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace an existing Lab. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/Lab} lab 
     * @param {module:api/LabApi~labCreateOrUpdateResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lab}
     */
    labCreateOrUpdateResource(subscriptionId, resourceGroupName, name, apiVersion, lab, callback) {
      let postBody = lab;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labCreateOrUpdateResource");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labCreateOrUpdateResource");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labCreateOrUpdateResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labCreateOrUpdateResource");
      }
      // verify the required parameter 'lab' is set
      if (lab === undefined || lab === null) {
        throw new Error("Missing the required parameter 'lab' when calling labCreateOrUpdateResource");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Lab;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labDeleteResource operation.
     * @callback module:api/LabApi~labDeleteResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete lab. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:api/LabApi~labDeleteResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labDeleteResource(subscriptionId, resourceGroupName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labDeleteResource");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labDeleteResource");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labDeleteResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labDeleteResource");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labGenerateUploadUri operation.
     * @callback module:api/LabApi~labGenerateUploadUriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateUploadUriResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/GenerateUploadUriParameter} generateUploadUriParameter 
     * @param {module:api/LabApi~labGenerateUploadUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateUploadUriResponse}
     */
    labGenerateUploadUri(subscriptionId, resourceGroupName, name, apiVersion, generateUploadUriParameter, callback) {
      let postBody = generateUploadUriParameter;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labGenerateUploadUri");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labGenerateUploadUri");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labGenerateUploadUri");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labGenerateUploadUri");
      }
      // verify the required parameter 'generateUploadUriParameter' is set
      if (generateUploadUriParameter === undefined || generateUploadUriParameter === null) {
        throw new Error("Missing the required parameter 'generateUploadUriParameter' when calling labGenerateUploadUri");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = GenerateUploadUriResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/generateUploadUri', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labGetResource operation.
     * @callback module:api/LabApi~labGetResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lab.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:api/LabApi~labGetResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lab}
     */
    labGetResource(subscriptionId, resourceGroupName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labGetResource");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labGetResource");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labGetResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labGetResource");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Lab;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labListByResourceGroup operation.
     * @callback module:api/LabApi~labListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationLab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labs.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [orderBy] 
     * @param {module:api/LabApi~labListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationLab}
     */
    labListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderBy': opts['orderBy'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResponseWithContinuationLab;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labListBySubscription operation.
     * @callback module:api/LabApi~labListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationLab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labs.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [orderBy] 
     * @param {module:api/LabApi~labListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationLab}
     */
    labListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderBy': opts['orderBy'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResponseWithContinuationLab;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labListVhds operation.
     * @callback module:api/LabApi~labListVhdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationLabVhd} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List disk images available for custom image creation.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:api/LabApi~labListVhdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationLabVhd}
     */
    labListVhds(subscriptionId, resourceGroupName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labListVhds");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labListVhds");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labListVhds");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labListVhds");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResponseWithContinuationLabVhd;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/listVhds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labPatchResource operation.
     * @callback module:api/LabApi~labPatchResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify properties of labs.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/Lab} lab 
     * @param {module:api/LabApi~labPatchResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lab}
     */
    labPatchResource(subscriptionId, resourceGroupName, name, apiVersion, lab, callback) {
      let postBody = lab;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labPatchResource");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labPatchResource");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labPatchResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labPatchResource");
      }
      // verify the required parameter 'lab' is set
      if (lab === undefined || lab === null) {
        throw new Error("Missing the required parameter 'lab' when calling labPatchResource");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Lab;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
