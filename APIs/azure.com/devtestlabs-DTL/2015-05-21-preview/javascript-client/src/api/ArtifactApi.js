/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArmTemplateInfo from '../model/ArmTemplateInfo';
import Artifact from '../model/Artifact';
import CloudError from '../model/CloudError';
import GenerateArmTemplateRequest from '../model/GenerateArmTemplateRequest';
import ResponseWithContinuationArtifact from '../model/ResponseWithContinuationArtifact';

/**
* Artifact service.
* @module api/ArtifactApi
* @version 2015-05-21-preview
*/
export default class ArtifactApi {

    /**
    * Constructs a new ArtifactApi. 
    * @alias module:api/ArtifactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the artifactGenerateArmTemplate operation.
     * @callback module:api/ArtifactApi~artifactGenerateArmTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArmTemplateInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates an ARM template for the given artifact, uploads the required files to a storage account, and validates the generated artifact.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} artifactSourceName The name of the artifact source.
     * @param {String} name The name of the artifact.
     * @param {String} apiVersion Client API version.
     * @param {module:model/GenerateArmTemplateRequest} generateArmTemplateRequest 
     * @param {module:api/ArtifactApi~artifactGenerateArmTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArmTemplateInfo}
     */
    artifactGenerateArmTemplate(subscriptionId, resourceGroupName, labName, artifactSourceName, name, apiVersion, generateArmTemplateRequest, callback) {
      let postBody = generateArmTemplateRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactGenerateArmTemplate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactGenerateArmTemplate");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling artifactGenerateArmTemplate");
      }
      // verify the required parameter 'artifactSourceName' is set
      if (artifactSourceName === undefined || artifactSourceName === null) {
        throw new Error("Missing the required parameter 'artifactSourceName' when calling artifactGenerateArmTemplate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling artifactGenerateArmTemplate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling artifactGenerateArmTemplate");
      }
      // verify the required parameter 'generateArmTemplateRequest' is set
      if (generateArmTemplateRequest === undefined || generateArmTemplateRequest === null) {
        throw new Error("Missing the required parameter 'generateArmTemplateRequest' when calling artifactGenerateArmTemplate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'artifactSourceName': artifactSourceName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ArmTemplateInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}/generateArmTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactGetResource operation.
     * @callback module:api/ArtifactApi~artifactGetResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} artifactSourceName The name of the artifact source.
     * @param {String} name The name of the artifact.
     * @param {String} apiVersion Client API version.
     * @param {module:api/ArtifactApi~artifactGetResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    artifactGetResource(subscriptionId, resourceGroupName, labName, artifactSourceName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactGetResource");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactGetResource");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling artifactGetResource");
      }
      // verify the required parameter 'artifactSourceName' is set
      if (artifactSourceName === undefined || artifactSourceName === null) {
        throw new Error("Missing the required parameter 'artifactSourceName' when calling artifactGetResource");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling artifactGetResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling artifactGetResource");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'artifactSourceName': artifactSourceName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactList operation.
     * @callback module:api/ArtifactApi~artifactListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationArtifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifacts.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} artifactSourceName The name of the artifact source.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [top] 
     * @param {String} [orderBy] 
     * @param {module:api/ArtifactApi~artifactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationArtifact}
     */
    artifactList(subscriptionId, resourceGroupName, labName, artifactSourceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactList");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling artifactList");
      }
      // verify the required parameter 'artifactSourceName' is set
      if (artifactSourceName === undefined || artifactSourceName === null) {
        throw new Error("Missing the required parameter 'artifactSourceName' when calling artifactList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling artifactList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'artifactSourceName': artifactSourceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderBy': opts['orderBy'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResponseWithContinuationArtifact;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
