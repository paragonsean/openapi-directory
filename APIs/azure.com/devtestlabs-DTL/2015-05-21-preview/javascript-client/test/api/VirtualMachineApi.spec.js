/**
 * DevTestLabsClient
 * Azure DevTest Labs REST API version 2015-05-21-preview.
 *
 * The version of the OpenAPI document: 2015-05-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DevTestLabsClient);
  }
}(this, function(expect, DevTestLabsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DevTestLabsClient.VirtualMachineApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualMachineApi', function() {
    describe('virtualMachineApplyArtifacts', function() {
      it('should call virtualMachineApplyArtifacts successfully', function(done) {
        //uncomment below and update the code to test virtualMachineApplyArtifacts
        //instance.virtualMachineApplyArtifacts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineCreateOrUpdateResource', function() {
      it('should call virtualMachineCreateOrUpdateResource successfully', function(done) {
        //uncomment below and update the code to test virtualMachineCreateOrUpdateResource
        //instance.virtualMachineCreateOrUpdateResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineDeleteResource', function() {
      it('should call virtualMachineDeleteResource successfully', function(done) {
        //uncomment below and update the code to test virtualMachineDeleteResource
        //instance.virtualMachineDeleteResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineGetResource', function() {
      it('should call virtualMachineGetResource successfully', function(done) {
        //uncomment below and update the code to test virtualMachineGetResource
        //instance.virtualMachineGetResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineList', function() {
      it('should call virtualMachineList successfully', function(done) {
        //uncomment below and update the code to test virtualMachineList
        //instance.virtualMachineList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachinePatchResource', function() {
      it('should call virtualMachinePatchResource successfully', function(done) {
        //uncomment below and update the code to test virtualMachinePatchResource
        //instance.virtualMachinePatchResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineStart', function() {
      it('should call virtualMachineStart successfully', function(done) {
        //uncomment below and update the code to test virtualMachineStart
        //instance.virtualMachineStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualMachineStop', function() {
      it('should call virtualMachineStop successfully', function(done) {
        //uncomment below and update the code to test virtualMachineStop
        //instance.virtualMachineStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
