/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiskProperties model module.
 * @module model/DiskProperties
 * @version 2018-09-15
 */
class DiskProperties {
    /**
     * Constructs a new <code>DiskProperties</code>.
     * Properties of a disk.
     * @alias module:model/DiskProperties
     */
    constructor() { 
        
        DiskProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiskProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiskProperties} obj Optional instance to populate.
     * @return {module:model/DiskProperties} The populated <code>DiskProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiskProperties();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('diskBlobName')) {
                obj['diskBlobName'] = ApiClient.convertToType(data['diskBlobName'], 'String');
            }
            if (data.hasOwnProperty('diskSizeGiB')) {
                obj['diskSizeGiB'] = ApiClient.convertToType(data['diskSizeGiB'], 'Number');
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('diskUri')) {
                obj['diskUri'] = ApiClient.convertToType(data['diskUri'], 'String');
            }
            if (data.hasOwnProperty('hostCaching')) {
                obj['hostCaching'] = ApiClient.convertToType(data['hostCaching'], 'String');
            }
            if (data.hasOwnProperty('leasedByLabVmId')) {
                obj['leasedByLabVmId'] = ApiClient.convertToType(data['leasedByLabVmId'], 'String');
            }
            if (data.hasOwnProperty('managedDiskId')) {
                obj['managedDiskId'] = ApiClient.convertToType(data['managedDiskId'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiskProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiskProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diskBlobName'] && !(typeof data['diskBlobName'] === 'string' || data['diskBlobName'] instanceof String)) {
            throw new Error("Expected the field `diskBlobName` to be a primitive type in the JSON string but got " + data['diskBlobName']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // ensure the json data is a string
        if (data['diskUri'] && !(typeof data['diskUri'] === 'string' || data['diskUri'] instanceof String)) {
            throw new Error("Expected the field `diskUri` to be a primitive type in the JSON string but got " + data['diskUri']);
        }
        // ensure the json data is a string
        if (data['hostCaching'] && !(typeof data['hostCaching'] === 'string' || data['hostCaching'] instanceof String)) {
            throw new Error("Expected the field `hostCaching` to be a primitive type in the JSON string but got " + data['hostCaching']);
        }
        // ensure the json data is a string
        if (data['leasedByLabVmId'] && !(typeof data['leasedByLabVmId'] === 'string' || data['leasedByLabVmId'] instanceof String)) {
            throw new Error("Expected the field `leasedByLabVmId` to be a primitive type in the JSON string but got " + data['leasedByLabVmId']);
        }
        // ensure the json data is a string
        if (data['managedDiskId'] && !(typeof data['managedDiskId'] === 'string' || data['managedDiskId'] instanceof String)) {
            throw new Error("Expected the field `managedDiskId` to be a primitive type in the JSON string but got " + data['managedDiskId']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }

        return true;
    }


}



/**
 * The creation date of the disk.
 * @member {Date} createdDate
 */
DiskProperties.prototype['createdDate'] = undefined;

/**
 * When backed by a blob, the name of the VHD blob without extension.
 * @member {String} diskBlobName
 */
DiskProperties.prototype['diskBlobName'] = undefined;

/**
 * The size of the disk in GibiBytes.
 * @member {Number} diskSizeGiB
 */
DiskProperties.prototype['diskSizeGiB'] = undefined;

/**
 * The storage type for the disk (i.e. Standard, Premium).
 * @member {module:model/DiskProperties.DiskTypeEnum} diskType
 */
DiskProperties.prototype['diskType'] = undefined;

/**
 * When backed by a blob, the URI of underlying blob.
 * @member {String} diskUri
 */
DiskProperties.prototype['diskUri'] = undefined;

/**
 * The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).
 * @member {String} hostCaching
 */
DiskProperties.prototype['hostCaching'] = undefined;

/**
 * The resource ID of the VM to which this disk is leased.
 * @member {String} leasedByLabVmId
 */
DiskProperties.prototype['leasedByLabVmId'] = undefined;

/**
 * When backed by managed disk, this is the ID of the compute disk resource.
 * @member {String} managedDiskId
 */
DiskProperties.prototype['managedDiskId'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
DiskProperties.prototype['provisioningState'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
DiskProperties.prototype['uniqueIdentifier'] = undefined;





/**
 * Allowed values for the <code>diskType</code> property.
 * @enum {String}
 * @readonly
 */
DiskProperties['DiskTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium",

    /**
     * value: "StandardSSD"
     * @const
     */
    "StandardSSD": "StandardSSD"
};



export default DiskProperties;

