/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportLabVirtualMachineRequest model module.
 * @module model/ImportLabVirtualMachineRequest
 * @version 2018-09-15
 */
class ImportLabVirtualMachineRequest {
    /**
     * Constructs a new <code>ImportLabVirtualMachineRequest</code>.
     * This represents the payload required to import a virtual machine from a different lab into the current one
     * @alias module:model/ImportLabVirtualMachineRequest
     */
    constructor() { 
        
        ImportLabVirtualMachineRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportLabVirtualMachineRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportLabVirtualMachineRequest} obj Optional instance to populate.
     * @return {module:model/ImportLabVirtualMachineRequest} The populated <code>ImportLabVirtualMachineRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportLabVirtualMachineRequest();

            if (data.hasOwnProperty('destinationVirtualMachineName')) {
                obj['destinationVirtualMachineName'] = ApiClient.convertToType(data['destinationVirtualMachineName'], 'String');
            }
            if (data.hasOwnProperty('sourceVirtualMachineResourceId')) {
                obj['sourceVirtualMachineResourceId'] = ApiClient.convertToType(data['sourceVirtualMachineResourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportLabVirtualMachineRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportLabVirtualMachineRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['destinationVirtualMachineName'] && !(typeof data['destinationVirtualMachineName'] === 'string' || data['destinationVirtualMachineName'] instanceof String)) {
            throw new Error("Expected the field `destinationVirtualMachineName` to be a primitive type in the JSON string but got " + data['destinationVirtualMachineName']);
        }
        // ensure the json data is a string
        if (data['sourceVirtualMachineResourceId'] && !(typeof data['sourceVirtualMachineResourceId'] === 'string' || data['sourceVirtualMachineResourceId'] instanceof String)) {
            throw new Error("Expected the field `sourceVirtualMachineResourceId` to be a primitive type in the JSON string but got " + data['sourceVirtualMachineResourceId']);
        }

        return true;
    }


}



/**
 * The name of the virtual machine in the destination lab
 * @member {String} destinationVirtualMachineName
 */
ImportLabVirtualMachineRequest.prototype['destinationVirtualMachineName'] = undefined;

/**
 * The full resource ID of the virtual machine to be imported.
 * @member {String} sourceVirtualMachineResourceId
 */
ImportLabVirtualMachineRequest.prototype['sourceVirtualMachineResourceId'] = undefined;






export default ImportLabVirtualMachineRequest;

