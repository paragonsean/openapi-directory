/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabAnnouncementPropertiesFragment from './LabAnnouncementPropertiesFragment';
import LabSupportPropertiesFragment from './LabSupportPropertiesFragment';

/**
 * The LabPropertiesFragment model module.
 * @module model/LabPropertiesFragment
 * @version 2018-09-15
 */
class LabPropertiesFragment {
    /**
     * Constructs a new <code>LabPropertiesFragment</code>.
     * Properties of a lab.
     * @alias module:model/LabPropertiesFragment
     */
    constructor() { 
        
        LabPropertiesFragment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabPropertiesFragment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabPropertiesFragment} obj Optional instance to populate.
     * @return {module:model/LabPropertiesFragment} The populated <code>LabPropertiesFragment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabPropertiesFragment();

            if (data.hasOwnProperty('announcement')) {
                obj['announcement'] = LabAnnouncementPropertiesFragment.constructFromObject(data['announcement']);
            }
            if (data.hasOwnProperty('environmentPermission')) {
                obj['environmentPermission'] = ApiClient.convertToType(data['environmentPermission'], 'String');
            }
            if (data.hasOwnProperty('extendedProperties')) {
                obj['extendedProperties'] = ApiClient.convertToType(data['extendedProperties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('labStorageType')) {
                obj['labStorageType'] = ApiClient.convertToType(data['labStorageType'], 'String');
            }
            if (data.hasOwnProperty('mandatoryArtifactsResourceIdsLinux')) {
                obj['mandatoryArtifactsResourceIdsLinux'] = ApiClient.convertToType(data['mandatoryArtifactsResourceIdsLinux'], ['String']);
            }
            if (data.hasOwnProperty('mandatoryArtifactsResourceIdsWindows')) {
                obj['mandatoryArtifactsResourceIdsWindows'] = ApiClient.convertToType(data['mandatoryArtifactsResourceIdsWindows'], ['String']);
            }
            if (data.hasOwnProperty('premiumDataDisks')) {
                obj['premiumDataDisks'] = ApiClient.convertToType(data['premiumDataDisks'], 'String');
            }
            if (data.hasOwnProperty('support')) {
                obj['support'] = LabSupportPropertiesFragment.constructFromObject(data['support']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabPropertiesFragment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabPropertiesFragment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `announcement`
        if (data['announcement']) { // data not null
          LabAnnouncementPropertiesFragment.validateJSON(data['announcement']);
        }
        // ensure the json data is a string
        if (data['environmentPermission'] && !(typeof data['environmentPermission'] === 'string' || data['environmentPermission'] instanceof String)) {
            throw new Error("Expected the field `environmentPermission` to be a primitive type in the JSON string but got " + data['environmentPermission']);
        }
        // ensure the json data is a string
        if (data['labStorageType'] && !(typeof data['labStorageType'] === 'string' || data['labStorageType'] instanceof String)) {
            throw new Error("Expected the field `labStorageType` to be a primitive type in the JSON string but got " + data['labStorageType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mandatoryArtifactsResourceIdsLinux'])) {
            throw new Error("Expected the field `mandatoryArtifactsResourceIdsLinux` to be an array in the JSON data but got " + data['mandatoryArtifactsResourceIdsLinux']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mandatoryArtifactsResourceIdsWindows'])) {
            throw new Error("Expected the field `mandatoryArtifactsResourceIdsWindows` to be an array in the JSON data but got " + data['mandatoryArtifactsResourceIdsWindows']);
        }
        // ensure the json data is a string
        if (data['premiumDataDisks'] && !(typeof data['premiumDataDisks'] === 'string' || data['premiumDataDisks'] instanceof String)) {
            throw new Error("Expected the field `premiumDataDisks` to be a primitive type in the JSON string but got " + data['premiumDataDisks']);
        }
        // validate the optional field `support`
        if (data['support']) { // data not null
          LabSupportPropertiesFragment.validateJSON(data['support']);
        }

        return true;
    }


}



/**
 * @member {module:model/LabAnnouncementPropertiesFragment} announcement
 */
LabPropertiesFragment.prototype['announcement'] = undefined;

/**
 * The access rights to be granted to the user when provisioning an environment
 * @member {module:model/LabPropertiesFragment.EnvironmentPermissionEnum} environmentPermission
 */
LabPropertiesFragment.prototype['environmentPermission'] = undefined;

/**
 * Extended properties of the lab used for experimental features
 * @member {Object.<String, String>} extendedProperties
 */
LabPropertiesFragment.prototype['extendedProperties'] = undefined;

/**
 * Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
 * @member {module:model/LabPropertiesFragment.LabStorageTypeEnum} labStorageType
 */
LabPropertiesFragment.prototype['labStorageType'] = undefined;

/**
 * The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.
 * @member {Array.<String>} mandatoryArtifactsResourceIdsLinux
 */
LabPropertiesFragment.prototype['mandatoryArtifactsResourceIdsLinux'] = undefined;

/**
 * The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.
 * @member {Array.<String>} mandatoryArtifactsResourceIdsWindows
 */
LabPropertiesFragment.prototype['mandatoryArtifactsResourceIdsWindows'] = undefined;

/**
 * The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.
 * @member {module:model/LabPropertiesFragment.PremiumDataDisksEnum} premiumDataDisks
 */
LabPropertiesFragment.prototype['premiumDataDisks'] = undefined;

/**
 * @member {module:model/LabSupportPropertiesFragment} support
 */
LabPropertiesFragment.prototype['support'] = undefined;





/**
 * Allowed values for the <code>environmentPermission</code> property.
 * @enum {String}
 * @readonly
 */
LabPropertiesFragment['EnvironmentPermissionEnum'] = {

    /**
     * value: "Reader"
     * @const
     */
    "Reader": "Reader",

    /**
     * value: "Contributor"
     * @const
     */
    "Contributor": "Contributor"
};


/**
 * Allowed values for the <code>labStorageType</code> property.
 * @enum {String}
 * @readonly
 */
LabPropertiesFragment['LabStorageTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium",

    /**
     * value: "StandardSSD"
     * @const
     */
    "StandardSSD": "StandardSSD"
};


/**
 * Allowed values for the <code>premiumDataDisks</code> property.
 * @enum {String}
 * @readonly
 */
LabPropertiesFragment['PremiumDataDisksEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};



export default LabPropertiesFragment;

