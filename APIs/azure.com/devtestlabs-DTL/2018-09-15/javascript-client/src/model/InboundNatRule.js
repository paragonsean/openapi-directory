/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InboundNatRule model module.
 * @module model/InboundNatRule
 * @version 2018-09-15
 */
class InboundNatRule {
    /**
     * Constructs a new <code>InboundNatRule</code>.
     * A rule for NAT - exposing a VM&#39;s port (backendPort) on the public IP address using a load balancer.
     * @alias module:model/InboundNatRule
     */
    constructor() { 
        
        InboundNatRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InboundNatRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InboundNatRule} obj Optional instance to populate.
     * @return {module:model/InboundNatRule} The populated <code>InboundNatRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InboundNatRule();

            if (data.hasOwnProperty('backendPort')) {
                obj['backendPort'] = ApiClient.convertToType(data['backendPort'], 'Number');
            }
            if (data.hasOwnProperty('frontendPort')) {
                obj['frontendPort'] = ApiClient.convertToType(data['frontendPort'], 'Number');
            }
            if (data.hasOwnProperty('transportProtocol')) {
                obj['transportProtocol'] = ApiClient.convertToType(data['transportProtocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InboundNatRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InboundNatRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['transportProtocol'] && !(typeof data['transportProtocol'] === 'string' || data['transportProtocol'] instanceof String)) {
            throw new Error("Expected the field `transportProtocol` to be a primitive type in the JSON string but got " + data['transportProtocol']);
        }

        return true;
    }


}



/**
 * The port to which the external traffic will be redirected.
 * @member {Number} backendPort
 */
InboundNatRule.prototype['backendPort'] = undefined;

/**
 * The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically.
 * @member {Number} frontendPort
 */
InboundNatRule.prototype['frontendPort'] = undefined;

/**
 * The transport protocol for the endpoint.
 * @member {module:model/InboundNatRule.TransportProtocolEnum} transportProtocol
 */
InboundNatRule.prototype['transportProtocol'] = undefined;





/**
 * Allowed values for the <code>transportProtocol</code> property.
 * @enum {String}
 * @readonly
 */
InboundNatRule['TransportProtocolEnum'] = {

    /**
     * value: "Tcp"
     * @const
     */
    "Tcp": "Tcp",

    /**
     * value: "Udp"
     * @const
     */
    "Udp": "Udp"
};



export default InboundNatRule;

