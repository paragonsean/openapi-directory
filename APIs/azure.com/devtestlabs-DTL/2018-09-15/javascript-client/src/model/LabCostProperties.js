/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabCostDetailsProperties from './LabCostDetailsProperties';
import LabCostSummaryProperties from './LabCostSummaryProperties';
import LabResourceCostProperties from './LabResourceCostProperties';
import TargetCostProperties from './TargetCostProperties';

/**
 * The LabCostProperties model module.
 * @module model/LabCostProperties
 * @version 2018-09-15
 */
class LabCostProperties {
    /**
     * Constructs a new <code>LabCostProperties</code>.
     * Properties of a cost item.
     * @alias module:model/LabCostProperties
     */
    constructor() { 
        
        LabCostProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabCostProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabCostProperties} obj Optional instance to populate.
     * @return {module:model/LabCostProperties} The populated <code>LabCostProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabCostProperties();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('endDateTime')) {
                obj['endDateTime'] = ApiClient.convertToType(data['endDateTime'], 'Date');
            }
            if (data.hasOwnProperty('labCostDetails')) {
                obj['labCostDetails'] = ApiClient.convertToType(data['labCostDetails'], [LabCostDetailsProperties]);
            }
            if (data.hasOwnProperty('labCostSummary')) {
                obj['labCostSummary'] = LabCostSummaryProperties.constructFromObject(data['labCostSummary']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceCosts')) {
                obj['resourceCosts'] = ApiClient.convertToType(data['resourceCosts'], [LabResourceCostProperties]);
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'Date');
            }
            if (data.hasOwnProperty('targetCost')) {
                obj['targetCost'] = TargetCostProperties.constructFromObject(data['targetCost']);
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabCostProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabCostProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        if (data['labCostDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labCostDetails'])) {
                throw new Error("Expected the field `labCostDetails` to be an array in the JSON data but got " + data['labCostDetails']);
            }
            // validate the optional field `labCostDetails` (array)
            for (const item of data['labCostDetails']) {
                LabCostDetailsProperties.validateJSON(item);
            };
        }
        // validate the optional field `labCostSummary`
        if (data['labCostSummary']) { // data not null
          LabCostSummaryProperties.validateJSON(data['labCostSummary']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['resourceCosts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceCosts'])) {
                throw new Error("Expected the field `resourceCosts` to be an array in the JSON data but got " + data['resourceCosts']);
            }
            // validate the optional field `resourceCosts` (array)
            for (const item of data['resourceCosts']) {
                LabResourceCostProperties.validateJSON(item);
            };
        }
        // validate the optional field `targetCost`
        if (data['targetCost']) { // data not null
          TargetCostProperties.validateJSON(data['targetCost']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }

        return true;
    }


}



/**
 * The creation date of the cost.
 * @member {Date} createdDate
 */
LabCostProperties.prototype['createdDate'] = undefined;

/**
 * The currency code of the cost.
 * @member {String} currencyCode
 */
LabCostProperties.prototype['currencyCode'] = undefined;

/**
 * The end time of the cost data.
 * @member {Date} endDateTime
 */
LabCostProperties.prototype['endDateTime'] = undefined;

/**
 * The lab cost details component of the cost data.
 * @member {Array.<module:model/LabCostDetailsProperties>} labCostDetails
 */
LabCostProperties.prototype['labCostDetails'] = undefined;

/**
 * @member {module:model/LabCostSummaryProperties} labCostSummary
 */
LabCostProperties.prototype['labCostSummary'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
LabCostProperties.prototype['provisioningState'] = undefined;

/**
 * The resource cost component of the cost data.
 * @member {Array.<module:model/LabResourceCostProperties>} resourceCosts
 */
LabCostProperties.prototype['resourceCosts'] = undefined;

/**
 * The start time of the cost data.
 * @member {Date} startDateTime
 */
LabCostProperties.prototype['startDateTime'] = undefined;

/**
 * @member {module:model/TargetCostProperties} targetCost
 */
LabCostProperties.prototype['targetCost'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
LabCostProperties.prototype['uniqueIdentifier'] = undefined;






export default LabCostProperties;

