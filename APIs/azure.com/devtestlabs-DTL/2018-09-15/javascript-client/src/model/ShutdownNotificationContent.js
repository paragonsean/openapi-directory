/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShutdownNotificationContent model module.
 * @module model/ShutdownNotificationContent
 * @version 2018-09-15
 */
class ShutdownNotificationContent {
    /**
     * Constructs a new <code>ShutdownNotificationContent</code>.
     * The contents of a shutdown notification. Webhooks can use this type to deserialize the request body when they get notified of an imminent shutdown.
     * @alias module:model/ShutdownNotificationContent
     */
    constructor() { 
        
        ShutdownNotificationContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShutdownNotificationContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShutdownNotificationContent} obj Optional instance to populate.
     * @return {module:model/ShutdownNotificationContent} The populated <code>ShutdownNotificationContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShutdownNotificationContent();

            if (data.hasOwnProperty('delayUrl120')) {
                obj['delayUrl120'] = ApiClient.convertToType(data['delayUrl120'], 'String');
            }
            if (data.hasOwnProperty('delayUrl60')) {
                obj['delayUrl60'] = ApiClient.convertToType(data['delayUrl60'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('labName')) {
                obj['labName'] = ApiClient.convertToType(data['labName'], 'String');
            }
            if (data.hasOwnProperty('minutesUntilShutdown')) {
                obj['minutesUntilShutdown'] = ApiClient.convertToType(data['minutesUntilShutdown'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupName')) {
                obj['resourceGroupName'] = ApiClient.convertToType(data['resourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('skipUrl')) {
                obj['skipUrl'] = ApiClient.convertToType(data['skipUrl'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('vmName')) {
                obj['vmName'] = ApiClient.convertToType(data['vmName'], 'String');
            }
            if (data.hasOwnProperty('vmUrl')) {
                obj['vmUrl'] = ApiClient.convertToType(data['vmUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShutdownNotificationContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShutdownNotificationContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delayUrl120'] && !(typeof data['delayUrl120'] === 'string' || data['delayUrl120'] instanceof String)) {
            throw new Error("Expected the field `delayUrl120` to be a primitive type in the JSON string but got " + data['delayUrl120']);
        }
        // ensure the json data is a string
        if (data['delayUrl60'] && !(typeof data['delayUrl60'] === 'string' || data['delayUrl60'] instanceof String)) {
            throw new Error("Expected the field `delayUrl60` to be a primitive type in the JSON string but got " + data['delayUrl60']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['labName'] && !(typeof data['labName'] === 'string' || data['labName'] instanceof String)) {
            throw new Error("Expected the field `labName` to be a primitive type in the JSON string but got " + data['labName']);
        }
        // ensure the json data is a string
        if (data['minutesUntilShutdown'] && !(typeof data['minutesUntilShutdown'] === 'string' || data['minutesUntilShutdown'] instanceof String)) {
            throw new Error("Expected the field `minutesUntilShutdown` to be a primitive type in the JSON string but got " + data['minutesUntilShutdown']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['resourceGroupName'] && !(typeof data['resourceGroupName'] === 'string' || data['resourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got " + data['resourceGroupName']);
        }
        // ensure the json data is a string
        if (data['skipUrl'] && !(typeof data['skipUrl'] === 'string' || data['skipUrl'] instanceof String)) {
            throw new Error("Expected the field `skipUrl` to be a primitive type in the JSON string but got " + data['skipUrl']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['vmName'] && !(typeof data['vmName'] === 'string' || data['vmName'] instanceof String)) {
            throw new Error("Expected the field `vmName` to be a primitive type in the JSON string but got " + data['vmName']);
        }
        // ensure the json data is a string
        if (data['vmUrl'] && !(typeof data['vmUrl'] === 'string' || data['vmUrl'] instanceof String)) {
            throw new Error("Expected the field `vmUrl` to be a primitive type in the JSON string but got " + data['vmUrl']);
        }

        return true;
    }


}



/**
 * The URL to delay shutdown by 2 hours.
 * @member {String} delayUrl120
 */
ShutdownNotificationContent.prototype['delayUrl120'] = undefined;

/**
 * The URL to delay shutdown by 60 minutes.
 * @member {String} delayUrl60
 */
ShutdownNotificationContent.prototype['delayUrl60'] = undefined;

/**
 * The event for which a notification will be sent.
 * @member {String} eventType
 */
ShutdownNotificationContent.prototype['eventType'] = undefined;

/**
 * The GUID for the virtual machine to be shut down.
 * @member {String} guid
 */
ShutdownNotificationContent.prototype['guid'] = undefined;

/**
 * The lab for the schedule.
 * @member {String} labName
 */
ShutdownNotificationContent.prototype['labName'] = undefined;

/**
 * Minutes remaining until shutdown
 * @member {String} minutesUntilShutdown
 */
ShutdownNotificationContent.prototype['minutesUntilShutdown'] = undefined;

/**
 * The owner of the virtual machine.
 * @member {String} owner
 */
ShutdownNotificationContent.prototype['owner'] = undefined;

/**
 * The resource group name for the schedule.
 * @member {String} resourceGroupName
 */
ShutdownNotificationContent.prototype['resourceGroupName'] = undefined;

/**
 * The URL to skip auto-shutdown.
 * @member {String} skipUrl
 */
ShutdownNotificationContent.prototype['skipUrl'] = undefined;

/**
 * The subscription ID for the schedule.
 * @member {String} subscriptionId
 */
ShutdownNotificationContent.prototype['subscriptionId'] = undefined;

/**
 * The text for the notification.
 * @member {String} text
 */
ShutdownNotificationContent.prototype['text'] = undefined;

/**
 * The virtual machine to be shut down.
 * @member {String} vmName
 */
ShutdownNotificationContent.prototype['vmName'] = undefined;

/**
 * The URL of the virtual machine.
 * @member {String} vmUrl
 */
ShutdownNotificationContent.prototype['vmUrl'] = undefined;






export default ShutdownNotificationContent;

