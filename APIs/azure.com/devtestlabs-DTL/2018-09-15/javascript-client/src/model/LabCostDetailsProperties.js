/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LabCostDetailsProperties model module.
 * @module model/LabCostDetailsProperties
 * @version 2018-09-15
 */
class LabCostDetailsProperties {
    /**
     * Constructs a new <code>LabCostDetailsProperties</code>.
     * The properties of a lab cost item.
     * @alias module:model/LabCostDetailsProperties
     */
    constructor() { 
        
        LabCostDetailsProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabCostDetailsProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabCostDetailsProperties} obj Optional instance to populate.
     * @return {module:model/LabCostDetailsProperties} The populated <code>LabCostDetailsProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabCostDetailsProperties();

            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('costType')) {
                obj['costType'] = ApiClient.convertToType(data['costType'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabCostDetailsProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabCostDetailsProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['costType'] && !(typeof data['costType'] === 'string' || data['costType'] instanceof String)) {
            throw new Error("Expected the field `costType` to be a primitive type in the JSON string but got " + data['costType']);
        }

        return true;
    }


}



/**
 * The cost component of the cost item.
 * @member {Number} cost
 */
LabCostDetailsProperties.prototype['cost'] = undefined;

/**
 * The type of the cost.
 * @member {module:model/LabCostDetailsProperties.CostTypeEnum} costType
 */
LabCostDetailsProperties.prototype['costType'] = undefined;

/**
 * The date of the cost item.
 * @member {Date} date
 */
LabCostDetailsProperties.prototype['date'] = undefined;





/**
 * Allowed values for the <code>costType</code> property.
 * @enum {String}
 * @readonly
 */
LabCostDetailsProperties['CostTypeEnum'] = {

    /**
     * value: "Unavailable"
     * @const
     */
    "Unavailable": "Unavailable",

    /**
     * value: "Reported"
     * @const
     */
    "Reported": "Reported",

    /**
     * value: "Projected"
     * @const
     */
    "Projected": "Projected"
};



export default LabCostDetailsProperties;

