/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LabAnnouncementProperties model module.
 * @module model/LabAnnouncementProperties
 * @version 2018-09-15
 */
class LabAnnouncementProperties {
    /**
     * Constructs a new <code>LabAnnouncementProperties</code>.
     * Properties of a lab&#39;s announcement banner
     * @alias module:model/LabAnnouncementProperties
     */
    constructor() { 
        
        LabAnnouncementProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabAnnouncementProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabAnnouncementProperties} obj Optional instance to populate.
     * @return {module:model/LabAnnouncementProperties} The populated <code>LabAnnouncementProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabAnnouncementProperties();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'String');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('expired')) {
                obj['expired'] = ApiClient.convertToType(data['expired'], 'Boolean');
            }
            if (data.hasOwnProperty('markdown')) {
                obj['markdown'] = ApiClient.convertToType(data['markdown'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabAnnouncementProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabAnnouncementProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['enabled'] && !(typeof data['enabled'] === 'string' || data['enabled'] instanceof String)) {
            throw new Error("Expected the field `enabled` to be a primitive type in the JSON string but got " + data['enabled']);
        }
        // ensure the json data is a string
        if (data['markdown'] && !(typeof data['markdown'] === 'string' || data['markdown'] instanceof String)) {
            throw new Error("Expected the field `markdown` to be a primitive type in the JSON string but got " + data['markdown']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }

        return true;
    }


}



/**
 * Is the lab announcement active/enabled at this time?
 * @member {module:model/LabAnnouncementProperties.EnabledEnum} enabled
 */
LabAnnouncementProperties.prototype['enabled'] = undefined;

/**
 * The time at which the announcement expires (null for never)
 * @member {Date} expirationDate
 */
LabAnnouncementProperties.prototype['expirationDate'] = undefined;

/**
 * Has this announcement expired?
 * @member {Boolean} expired
 */
LabAnnouncementProperties.prototype['expired'] = undefined;

/**
 * The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
 * @member {String} markdown
 */
LabAnnouncementProperties.prototype['markdown'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
LabAnnouncementProperties.prototype['provisioningState'] = undefined;

/**
 * The plain text title for the lab announcement
 * @member {String} title
 */
LabAnnouncementProperties.prototype['title'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
LabAnnouncementProperties.prototype['uniqueIdentifier'] = undefined;





/**
 * Allowed values for the <code>enabled</code> property.
 * @enum {String}
 * @readonly
 */
LabAnnouncementProperties['EnabledEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default LabAnnouncementProperties;

