/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttachNewDataDiskOptions from './AttachNewDataDiskOptions';

/**
 * The DataDiskProperties model module.
 * @module model/DataDiskProperties
 * @version 2018-09-15
 */
class DataDiskProperties {
    /**
     * Constructs a new <code>DataDiskProperties</code>.
     * Request body for adding a new or existing data disk to a virtual machine.
     * @alias module:model/DataDiskProperties
     */
    constructor() { 
        
        DataDiskProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataDiskProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataDiskProperties} obj Optional instance to populate.
     * @return {module:model/DataDiskProperties} The populated <code>DataDiskProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataDiskProperties();

            if (data.hasOwnProperty('attachNewDataDiskOptions')) {
                obj['attachNewDataDiskOptions'] = AttachNewDataDiskOptions.constructFromObject(data['attachNewDataDiskOptions']);
            }
            if (data.hasOwnProperty('existingLabDiskId')) {
                obj['existingLabDiskId'] = ApiClient.convertToType(data['existingLabDiskId'], 'String');
            }
            if (data.hasOwnProperty('hostCaching')) {
                obj['hostCaching'] = ApiClient.convertToType(data['hostCaching'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataDiskProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataDiskProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attachNewDataDiskOptions`
        if (data['attachNewDataDiskOptions']) { // data not null
          AttachNewDataDiskOptions.validateJSON(data['attachNewDataDiskOptions']);
        }
        // ensure the json data is a string
        if (data['existingLabDiskId'] && !(typeof data['existingLabDiskId'] === 'string' || data['existingLabDiskId'] instanceof String)) {
            throw new Error("Expected the field `existingLabDiskId` to be a primitive type in the JSON string but got " + data['existingLabDiskId']);
        }
        // ensure the json data is a string
        if (data['hostCaching'] && !(typeof data['hostCaching'] === 'string' || data['hostCaching'] instanceof String)) {
            throw new Error("Expected the field `hostCaching` to be a primitive type in the JSON string but got " + data['hostCaching']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttachNewDataDiskOptions} attachNewDataDiskOptions
 */
DataDiskProperties.prototype['attachNewDataDiskOptions'] = undefined;

/**
 * Specifies the existing lab disk id to attach to virtual machine.
 * @member {String} existingLabDiskId
 */
DataDiskProperties.prototype['existingLabDiskId'] = undefined;

/**
 * Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
 * @member {module:model/DataDiskProperties.HostCachingEnum} hostCaching
 */
DataDiskProperties.prototype['hostCaching'] = undefined;





/**
 * Allowed values for the <code>hostCaching</code> property.
 * @enum {String}
 * @readonly
 */
DataDiskProperties['HostCachingEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "ReadOnly"
     * @const
     */
    "ReadOnly": "ReadOnly",

    /**
     * value: "ReadWrite"
     * @const
     */
    "ReadWrite": "ReadWrite"
};



export default DataDiskProperties;

