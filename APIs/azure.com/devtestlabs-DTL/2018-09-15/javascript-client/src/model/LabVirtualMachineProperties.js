/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicableSchedule from './ApplicableSchedule';
import ArtifactDeploymentStatusProperties from './ArtifactDeploymentStatusProperties';
import ArtifactInstallProperties from './ArtifactInstallProperties';
import ComputeVmProperties from './ComputeVmProperties';
import DataDiskProperties from './DataDiskProperties';
import GalleryImageReference from './GalleryImageReference';
import NetworkInterfaceProperties from './NetworkInterfaceProperties';
import ScheduleCreationParameter from './ScheduleCreationParameter';

/**
 * The LabVirtualMachineProperties model module.
 * @module model/LabVirtualMachineProperties
 * @version 2018-09-15
 */
class LabVirtualMachineProperties {
    /**
     * Constructs a new <code>LabVirtualMachineProperties</code>.
     * Properties of a virtual machine.
     * @alias module:model/LabVirtualMachineProperties
     */
    constructor() { 
        
        LabVirtualMachineProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabVirtualMachineProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabVirtualMachineProperties} obj Optional instance to populate.
     * @return {module:model/LabVirtualMachineProperties} The populated <code>LabVirtualMachineProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabVirtualMachineProperties();

            if (data.hasOwnProperty('allowClaim')) {
                obj['allowClaim'] = ApiClient.convertToType(data['allowClaim'], 'Boolean');
            }
            if (data.hasOwnProperty('applicableSchedule')) {
                obj['applicableSchedule'] = ApplicableSchedule.constructFromObject(data['applicableSchedule']);
            }
            if (data.hasOwnProperty('artifactDeploymentStatus')) {
                obj['artifactDeploymentStatus'] = ArtifactDeploymentStatusProperties.constructFromObject(data['artifactDeploymentStatus']);
            }
            if (data.hasOwnProperty('artifacts')) {
                obj['artifacts'] = ApiClient.convertToType(data['artifacts'], [ArtifactInstallProperties]);
            }
            if (data.hasOwnProperty('computeId')) {
                obj['computeId'] = ApiClient.convertToType(data['computeId'], 'String');
            }
            if (data.hasOwnProperty('computeVm')) {
                obj['computeVm'] = ComputeVmProperties.constructFromObject(data['computeVm']);
            }
            if (data.hasOwnProperty('createdByUser')) {
                obj['createdByUser'] = ApiClient.convertToType(data['createdByUser'], 'String');
            }
            if (data.hasOwnProperty('createdByUserId')) {
                obj['createdByUserId'] = ApiClient.convertToType(data['createdByUserId'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('customImageId')) {
                obj['customImageId'] = ApiClient.convertToType(data['customImageId'], 'String');
            }
            if (data.hasOwnProperty('dataDiskParameters')) {
                obj['dataDiskParameters'] = ApiClient.convertToType(data['dataDiskParameters'], [DataDiskProperties]);
            }
            if (data.hasOwnProperty('disallowPublicIpAddress')) {
                obj['disallowPublicIpAddress'] = ApiClient.convertToType(data['disallowPublicIpAddress'], 'Boolean');
            }
            if (data.hasOwnProperty('environmentId')) {
                obj['environmentId'] = ApiClient.convertToType(data['environmentId'], 'String');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('galleryImageReference')) {
                obj['galleryImageReference'] = GalleryImageReference.constructFromObject(data['galleryImageReference']);
            }
            if (data.hasOwnProperty('isAuthenticationWithSshKey')) {
                obj['isAuthenticationWithSshKey'] = ApiClient.convertToType(data['isAuthenticationWithSshKey'], 'Boolean');
            }
            if (data.hasOwnProperty('labSubnetName')) {
                obj['labSubnetName'] = ApiClient.convertToType(data['labSubnetName'], 'String');
            }
            if (data.hasOwnProperty('labVirtualNetworkId')) {
                obj['labVirtualNetworkId'] = ApiClient.convertToType(data['labVirtualNetworkId'], 'String');
            }
            if (data.hasOwnProperty('lastKnownPowerState')) {
                obj['lastKnownPowerState'] = ApiClient.convertToType(data['lastKnownPowerState'], 'String');
            }
            if (data.hasOwnProperty('networkInterface')) {
                obj['networkInterface'] = NetworkInterfaceProperties.constructFromObject(data['networkInterface']);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('ownerObjectId')) {
                obj['ownerObjectId'] = ApiClient.convertToType(data['ownerObjectId'], 'String');
            }
            if (data.hasOwnProperty('ownerUserPrincipalName')) {
                obj['ownerUserPrincipalName'] = ApiClient.convertToType(data['ownerUserPrincipalName'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('planId')) {
                obj['planId'] = ApiClient.convertToType(data['planId'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('scheduleParameters')) {
                obj['scheduleParameters'] = ApiClient.convertToType(data['scheduleParameters'], [ScheduleCreationParameter]);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('sshKey')) {
                obj['sshKey'] = ApiClient.convertToType(data['sshKey'], 'String');
            }
            if (data.hasOwnProperty('storageType')) {
                obj['storageType'] = ApiClient.convertToType(data['storageType'], 'String');
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
            if (data.hasOwnProperty('virtualMachineCreationSource')) {
                obj['virtualMachineCreationSource'] = ApiClient.convertToType(data['virtualMachineCreationSource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabVirtualMachineProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabVirtualMachineProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `applicableSchedule`
        if (data['applicableSchedule']) { // data not null
          ApplicableSchedule.validateJSON(data['applicableSchedule']);
        }
        // validate the optional field `artifactDeploymentStatus`
        if (data['artifactDeploymentStatus']) { // data not null
          ArtifactDeploymentStatusProperties.validateJSON(data['artifactDeploymentStatus']);
        }
        if (data['artifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artifacts'])) {
                throw new Error("Expected the field `artifacts` to be an array in the JSON data but got " + data['artifacts']);
            }
            // validate the optional field `artifacts` (array)
            for (const item of data['artifacts']) {
                ArtifactInstallProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['computeId'] && !(typeof data['computeId'] === 'string' || data['computeId'] instanceof String)) {
            throw new Error("Expected the field `computeId` to be a primitive type in the JSON string but got " + data['computeId']);
        }
        // validate the optional field `computeVm`
        if (data['computeVm']) { // data not null
          ComputeVmProperties.validateJSON(data['computeVm']);
        }
        // ensure the json data is a string
        if (data['createdByUser'] && !(typeof data['createdByUser'] === 'string' || data['createdByUser'] instanceof String)) {
            throw new Error("Expected the field `createdByUser` to be a primitive type in the JSON string but got " + data['createdByUser']);
        }
        // ensure the json data is a string
        if (data['createdByUserId'] && !(typeof data['createdByUserId'] === 'string' || data['createdByUserId'] instanceof String)) {
            throw new Error("Expected the field `createdByUserId` to be a primitive type in the JSON string but got " + data['createdByUserId']);
        }
        // ensure the json data is a string
        if (data['customImageId'] && !(typeof data['customImageId'] === 'string' || data['customImageId'] instanceof String)) {
            throw new Error("Expected the field `customImageId` to be a primitive type in the JSON string but got " + data['customImageId']);
        }
        if (data['dataDiskParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataDiskParameters'])) {
                throw new Error("Expected the field `dataDiskParameters` to be an array in the JSON data but got " + data['dataDiskParameters']);
            }
            // validate the optional field `dataDiskParameters` (array)
            for (const item of data['dataDiskParameters']) {
                DataDiskProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['environmentId'] && !(typeof data['environmentId'] === 'string' || data['environmentId'] instanceof String)) {
            throw new Error("Expected the field `environmentId` to be a primitive type in the JSON string but got " + data['environmentId']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // validate the optional field `galleryImageReference`
        if (data['galleryImageReference']) { // data not null
          GalleryImageReference.validateJSON(data['galleryImageReference']);
        }
        // ensure the json data is a string
        if (data['labSubnetName'] && !(typeof data['labSubnetName'] === 'string' || data['labSubnetName'] instanceof String)) {
            throw new Error("Expected the field `labSubnetName` to be a primitive type in the JSON string but got " + data['labSubnetName']);
        }
        // ensure the json data is a string
        if (data['labVirtualNetworkId'] && !(typeof data['labVirtualNetworkId'] === 'string' || data['labVirtualNetworkId'] instanceof String)) {
            throw new Error("Expected the field `labVirtualNetworkId` to be a primitive type in the JSON string but got " + data['labVirtualNetworkId']);
        }
        // ensure the json data is a string
        if (data['lastKnownPowerState'] && !(typeof data['lastKnownPowerState'] === 'string' || data['lastKnownPowerState'] instanceof String)) {
            throw new Error("Expected the field `lastKnownPowerState` to be a primitive type in the JSON string but got " + data['lastKnownPowerState']);
        }
        // validate the optional field `networkInterface`
        if (data['networkInterface']) { // data not null
          NetworkInterfaceProperties.validateJSON(data['networkInterface']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['ownerObjectId'] && !(typeof data['ownerObjectId'] === 'string' || data['ownerObjectId'] instanceof String)) {
            throw new Error("Expected the field `ownerObjectId` to be a primitive type in the JSON string but got " + data['ownerObjectId']);
        }
        // ensure the json data is a string
        if (data['ownerUserPrincipalName'] && !(typeof data['ownerUserPrincipalName'] === 'string' || data['ownerUserPrincipalName'] instanceof String)) {
            throw new Error("Expected the field `ownerUserPrincipalName` to be a primitive type in the JSON string but got " + data['ownerUserPrincipalName']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['planId'] && !(typeof data['planId'] === 'string' || data['planId'] instanceof String)) {
            throw new Error("Expected the field `planId` to be a primitive type in the JSON string but got " + data['planId']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['scheduleParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scheduleParameters'])) {
                throw new Error("Expected the field `scheduleParameters` to be an array in the JSON data but got " + data['scheduleParameters']);
            }
            // validate the optional field `scheduleParameters` (array)
            for (const item of data['scheduleParameters']) {
                ScheduleCreationParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['sshKey'] && !(typeof data['sshKey'] === 'string' || data['sshKey'] instanceof String)) {
            throw new Error("Expected the field `sshKey` to be a primitive type in the JSON string but got " + data['sshKey']);
        }
        // ensure the json data is a string
        if (data['storageType'] && !(typeof data['storageType'] === 'string' || data['storageType'] instanceof String)) {
            throw new Error("Expected the field `storageType` to be a primitive type in the JSON string but got " + data['storageType']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }
        // ensure the json data is a string
        if (data['virtualMachineCreationSource'] && !(typeof data['virtualMachineCreationSource'] === 'string' || data['virtualMachineCreationSource'] instanceof String)) {
            throw new Error("Expected the field `virtualMachineCreationSource` to be a primitive type in the JSON string but got " + data['virtualMachineCreationSource']);
        }

        return true;
    }


}



/**
 * Indicates whether another user can take ownership of the virtual machine
 * @member {Boolean} allowClaim
 */
LabVirtualMachineProperties.prototype['allowClaim'] = undefined;

/**
 * @member {module:model/ApplicableSchedule} applicableSchedule
 */
LabVirtualMachineProperties.prototype['applicableSchedule'] = undefined;

/**
 * @member {module:model/ArtifactDeploymentStatusProperties} artifactDeploymentStatus
 */
LabVirtualMachineProperties.prototype['artifactDeploymentStatus'] = undefined;

/**
 * The artifacts to be installed on the virtual machine.
 * @member {Array.<module:model/ArtifactInstallProperties>} artifacts
 */
LabVirtualMachineProperties.prototype['artifacts'] = undefined;

/**
 * The resource identifier (Microsoft.Compute) of the virtual machine.
 * @member {String} computeId
 */
LabVirtualMachineProperties.prototype['computeId'] = undefined;

/**
 * @member {module:model/ComputeVmProperties} computeVm
 */
LabVirtualMachineProperties.prototype['computeVm'] = undefined;

/**
 * The email address of creator of the virtual machine.
 * @member {String} createdByUser
 */
LabVirtualMachineProperties.prototype['createdByUser'] = undefined;

/**
 * The object identifier of the creator of the virtual machine.
 * @member {String} createdByUserId
 */
LabVirtualMachineProperties.prototype['createdByUserId'] = undefined;

/**
 * The creation date of the virtual machine.
 * @member {Date} createdDate
 */
LabVirtualMachineProperties.prototype['createdDate'] = undefined;

/**
 * The custom image identifier of the virtual machine.
 * @member {String} customImageId
 */
LabVirtualMachineProperties.prototype['customImageId'] = undefined;

/**
 * New or existing data disks to attach to the virtual machine after creation
 * @member {Array.<module:model/DataDiskProperties>} dataDiskParameters
 */
LabVirtualMachineProperties.prototype['dataDiskParameters'] = undefined;

/**
 * Indicates whether the virtual machine is to be created without a public IP address.
 * @member {Boolean} disallowPublicIpAddress
 */
LabVirtualMachineProperties.prototype['disallowPublicIpAddress'] = undefined;

/**
 * The resource ID of the environment that contains this virtual machine, if any.
 * @member {String} environmentId
 */
LabVirtualMachineProperties.prototype['environmentId'] = undefined;

/**
 * The expiration date for VM.
 * @member {Date} expirationDate
 */
LabVirtualMachineProperties.prototype['expirationDate'] = undefined;

/**
 * The fully-qualified domain name of the virtual machine.
 * @member {String} fqdn
 */
LabVirtualMachineProperties.prototype['fqdn'] = undefined;

/**
 * @member {module:model/GalleryImageReference} galleryImageReference
 */
LabVirtualMachineProperties.prototype['galleryImageReference'] = undefined;

/**
 * Indicates whether this virtual machine uses an SSH key for authentication.
 * @member {Boolean} isAuthenticationWithSshKey
 */
LabVirtualMachineProperties.prototype['isAuthenticationWithSshKey'] = undefined;

/**
 * The lab subnet name of the virtual machine.
 * @member {String} labSubnetName
 */
LabVirtualMachineProperties.prototype['labSubnetName'] = undefined;

/**
 * The lab virtual network identifier of the virtual machine.
 * @member {String} labVirtualNetworkId
 */
LabVirtualMachineProperties.prototype['labVirtualNetworkId'] = undefined;

/**
 * Last known compute power state captured in DTL
 * @member {String} lastKnownPowerState
 */
LabVirtualMachineProperties.prototype['lastKnownPowerState'] = undefined;

/**
 * @member {module:model/NetworkInterfaceProperties} networkInterface
 */
LabVirtualMachineProperties.prototype['networkInterface'] = undefined;

/**
 * The notes of the virtual machine.
 * @member {String} notes
 */
LabVirtualMachineProperties.prototype['notes'] = undefined;

/**
 * The OS type of the virtual machine.
 * @member {String} osType
 */
LabVirtualMachineProperties.prototype['osType'] = undefined;

/**
 * The object identifier of the owner of the virtual machine.
 * @member {String} ownerObjectId
 */
LabVirtualMachineProperties.prototype['ownerObjectId'] = undefined;

/**
 * The user principal name of the virtual machine owner.
 * @member {String} ownerUserPrincipalName
 */
LabVirtualMachineProperties.prototype['ownerUserPrincipalName'] = undefined;

/**
 * The password of the virtual machine administrator.
 * @member {String} password
 */
LabVirtualMachineProperties.prototype['password'] = undefined;

/**
 * The id of the plan associated with the virtual machine image
 * @member {String} planId
 */
LabVirtualMachineProperties.prototype['planId'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
LabVirtualMachineProperties.prototype['provisioningState'] = undefined;

/**
 * Virtual Machine schedules to be created
 * @member {Array.<module:model/ScheduleCreationParameter>} scheduleParameters
 */
LabVirtualMachineProperties.prototype['scheduleParameters'] = undefined;

/**
 * The size of the virtual machine.
 * @member {String} size
 */
LabVirtualMachineProperties.prototype['size'] = undefined;

/**
 * The SSH key of the virtual machine administrator.
 * @member {String} sshKey
 */
LabVirtualMachineProperties.prototype['sshKey'] = undefined;

/**
 * Storage type to use for virtual machine (i.e. Standard, Premium).
 * @member {String} storageType
 */
LabVirtualMachineProperties.prototype['storageType'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
LabVirtualMachineProperties.prototype['uniqueIdentifier'] = undefined;

/**
 * The user name of the virtual machine.
 * @member {String} userName
 */
LabVirtualMachineProperties.prototype['userName'] = undefined;

/**
 * Tells source of creation of lab virtual machine. Output property only.
 * @member {module:model/LabVirtualMachineProperties.VirtualMachineCreationSourceEnum} virtualMachineCreationSource
 */
LabVirtualMachineProperties.prototype['virtualMachineCreationSource'] = undefined;





/**
 * Allowed values for the <code>virtualMachineCreationSource</code> property.
 * @enum {String}
 * @readonly
 */
LabVirtualMachineProperties['VirtualMachineCreationSourceEnum'] = {

    /**
     * value: "FromCustomImage"
     * @const
     */
    "FromCustomImage": "FromCustomImage",

    /**
     * value: "FromGalleryImage"
     * @const
     */
    "FromGalleryImage": "FromGalleryImage",

    /**
     * value: "FromSharedGalleryImage"
     * @const
     */
    "FromSharedGalleryImage": "FromSharedGalleryImage"
};



export default LabVirtualMachineProperties;

