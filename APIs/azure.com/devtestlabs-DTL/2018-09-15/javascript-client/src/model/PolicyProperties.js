/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyProperties model module.
 * @module model/PolicyProperties
 * @version 2018-09-15
 */
class PolicyProperties {
    /**
     * Constructs a new <code>PolicyProperties</code>.
     * Properties of a Policy.
     * @alias module:model/PolicyProperties
     */
    constructor() { 
        
        PolicyProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyProperties} obj Optional instance to populate.
     * @return {module:model/PolicyProperties} The populated <code>PolicyProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyProperties();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('evaluatorType')) {
                obj['evaluatorType'] = ApiClient.convertToType(data['evaluatorType'], 'String');
            }
            if (data.hasOwnProperty('factData')) {
                obj['factData'] = ApiClient.convertToType(data['factData'], 'String');
            }
            if (data.hasOwnProperty('factName')) {
                obj['factName'] = ApiClient.convertToType(data['factName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'String');
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['evaluatorType'] && !(typeof data['evaluatorType'] === 'string' || data['evaluatorType'] instanceof String)) {
            throw new Error("Expected the field `evaluatorType` to be a primitive type in the JSON string but got " + data['evaluatorType']);
        }
        // ensure the json data is a string
        if (data['factData'] && !(typeof data['factData'] === 'string' || data['factData'] instanceof String)) {
            throw new Error("Expected the field `factData` to be a primitive type in the JSON string but got " + data['factData']);
        }
        // ensure the json data is a string
        if (data['factName'] && !(typeof data['factName'] === 'string' || data['factName'] instanceof String)) {
            throw new Error("Expected the field `factName` to be a primitive type in the JSON string but got " + data['factName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['threshold'] && !(typeof data['threshold'] === 'string' || data['threshold'] instanceof String)) {
            throw new Error("Expected the field `threshold` to be a primitive type in the JSON string but got " + data['threshold']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }

        return true;
    }


}



/**
 * The creation date of the policy.
 * @member {Date} createdDate
 */
PolicyProperties.prototype['createdDate'] = undefined;

/**
 * The description of the policy.
 * @member {String} description
 */
PolicyProperties.prototype['description'] = undefined;

/**
 * The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
 * @member {module:model/PolicyProperties.EvaluatorTypeEnum} evaluatorType
 */
PolicyProperties.prototype['evaluatorType'] = undefined;

/**
 * The fact data of the policy.
 * @member {String} factData
 */
PolicyProperties.prototype['factData'] = undefined;

/**
 * The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
 * @member {module:model/PolicyProperties.FactNameEnum} factName
 */
PolicyProperties.prototype['factName'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
PolicyProperties.prototype['provisioningState'] = undefined;

/**
 * The status of the policy.
 * @member {module:model/PolicyProperties.StatusEnum} status
 */
PolicyProperties.prototype['status'] = undefined;

/**
 * The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
 * @member {String} threshold
 */
PolicyProperties.prototype['threshold'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
PolicyProperties.prototype['uniqueIdentifier'] = undefined;





/**
 * Allowed values for the <code>evaluatorType</code> property.
 * @enum {String}
 * @readonly
 */
PolicyProperties['EvaluatorTypeEnum'] = {

    /**
     * value: "AllowedValuesPolicy"
     * @const
     */
    "AllowedValuesPolicy": "AllowedValuesPolicy",

    /**
     * value: "MaxValuePolicy"
     * @const
     */
    "MaxValuePolicy": "MaxValuePolicy"
};


/**
 * Allowed values for the <code>factName</code> property.
 * @enum {String}
 * @readonly
 */
PolicyProperties['FactNameEnum'] = {

    /**
     * value: "UserOwnedLabVmCount"
     * @const
     */
    "UserOwnedLabVmCount": "UserOwnedLabVmCount",

    /**
     * value: "UserOwnedLabPremiumVmCount"
     * @const
     */
    "UserOwnedLabPremiumVmCount": "UserOwnedLabPremiumVmCount",

    /**
     * value: "LabVmCount"
     * @const
     */
    "LabVmCount": "LabVmCount",

    /**
     * value: "LabPremiumVmCount"
     * @const
     */
    "LabPremiumVmCount": "LabPremiumVmCount",

    /**
     * value: "LabVmSize"
     * @const
     */
    "LabVmSize": "LabVmSize",

    /**
     * value: "GalleryImage"
     * @const
     */
    "GalleryImage": "GalleryImage",

    /**
     * value: "UserOwnedLabVmCountInSubnet"
     * @const
     */
    "UserOwnedLabVmCountInSubnet": "UserOwnedLabVmCountInSubnet",

    /**
     * value: "LabTargetCost"
     * @const
     */
    "LabTargetCost": "LabTargetCost",

    /**
     * value: "EnvironmentTemplate"
     * @const
     */
    "EnvironmentTemplate": "EnvironmentTemplate",

    /**
     * value: "ScheduleEditPermission"
     * @const
     */
    "ScheduleEditPermission": "ScheduleEditPermission"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PolicyProperties['StatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default PolicyProperties;

