/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AttachNewDataDiskOptionsFragment model module.
 * @module model/AttachNewDataDiskOptionsFragment
 * @version 2018-09-15
 */
class AttachNewDataDiskOptionsFragment {
    /**
     * Constructs a new <code>AttachNewDataDiskOptionsFragment</code>.
     * Properties to attach new disk to the Virtual Machine.
     * @alias module:model/AttachNewDataDiskOptionsFragment
     */
    constructor() { 
        
        AttachNewDataDiskOptionsFragment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttachNewDataDiskOptionsFragment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttachNewDataDiskOptionsFragment} obj Optional instance to populate.
     * @return {module:model/AttachNewDataDiskOptionsFragment} The populated <code>AttachNewDataDiskOptionsFragment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttachNewDataDiskOptionsFragment();

            if (data.hasOwnProperty('diskName')) {
                obj['diskName'] = ApiClient.convertToType(data['diskName'], 'String');
            }
            if (data.hasOwnProperty('diskSizeGiB')) {
                obj['diskSizeGiB'] = ApiClient.convertToType(data['diskSizeGiB'], 'Number');
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttachNewDataDiskOptionsFragment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttachNewDataDiskOptionsFragment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diskName'] && !(typeof data['diskName'] === 'string' || data['diskName'] instanceof String)) {
            throw new Error("Expected the field `diskName` to be a primitive type in the JSON string but got " + data['diskName']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }

        return true;
    }


}



/**
 * The name of the disk to be attached.
 * @member {String} diskName
 */
AttachNewDataDiskOptionsFragment.prototype['diskName'] = undefined;

/**
 * Size of the disk to be attached in GibiBytes.
 * @member {Number} diskSizeGiB
 */
AttachNewDataDiskOptionsFragment.prototype['diskSizeGiB'] = undefined;

/**
 * The storage type for the disk (i.e. Standard, Premium).
 * @member {module:model/AttachNewDataDiskOptionsFragment.DiskTypeEnum} diskType
 */
AttachNewDataDiskOptionsFragment.prototype['diskType'] = undefined;





/**
 * Allowed values for the <code>diskType</code> property.
 * @enum {String}
 * @readonly
 */
AttachNewDataDiskOptionsFragment['DiskTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium",

    /**
     * value: "StandardSSD"
     * @const
     */
    "StandardSSD": "StandardSSD"
};



export default AttachNewDataDiskOptionsFragment;

