/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomImagePropertiesCustomFragment from './CustomImagePropertiesCustomFragment';
import CustomImagePropertiesFromPlanFragment from './CustomImagePropertiesFromPlanFragment';
import CustomImagePropertiesFromVmFragment from './CustomImagePropertiesFromVmFragment';
import DataDiskStorageTypeInfoFragment from './DataDiskStorageTypeInfoFragment';

/**
 * The CustomImagePropertiesFragment model module.
 * @module model/CustomImagePropertiesFragment
 * @version 2018-09-15
 */
class CustomImagePropertiesFragment {
    /**
     * Constructs a new <code>CustomImagePropertiesFragment</code>.
     * Properties of a custom image.
     * @alias module:model/CustomImagePropertiesFragment
     */
    constructor() { 
        
        CustomImagePropertiesFragment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomImagePropertiesFragment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomImagePropertiesFragment} obj Optional instance to populate.
     * @return {module:model/CustomImagePropertiesFragment} The populated <code>CustomImagePropertiesFragment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomImagePropertiesFragment();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('customImagePlan')) {
                obj['customImagePlan'] = CustomImagePropertiesFromPlanFragment.constructFromObject(data['customImagePlan']);
            }
            if (data.hasOwnProperty('dataDiskStorageInfo')) {
                obj['dataDiskStorageInfo'] = ApiClient.convertToType(data['dataDiskStorageInfo'], [DataDiskStorageTypeInfoFragment]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isPlanAuthorized')) {
                obj['isPlanAuthorized'] = ApiClient.convertToType(data['isPlanAuthorized'], 'Boolean');
            }
            if (data.hasOwnProperty('managedImageId')) {
                obj['managedImageId'] = ApiClient.convertToType(data['managedImageId'], 'String');
            }
            if (data.hasOwnProperty('managedSnapshotId')) {
                obj['managedSnapshotId'] = ApiClient.convertToType(data['managedSnapshotId'], 'String');
            }
            if (data.hasOwnProperty('vhd')) {
                obj['vhd'] = CustomImagePropertiesCustomFragment.constructFromObject(data['vhd']);
            }
            if (data.hasOwnProperty('vm')) {
                obj['vm'] = CustomImagePropertiesFromVmFragment.constructFromObject(data['vm']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomImagePropertiesFragment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomImagePropertiesFragment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // validate the optional field `customImagePlan`
        if (data['customImagePlan']) { // data not null
          CustomImagePropertiesFromPlanFragment.validateJSON(data['customImagePlan']);
        }
        if (data['dataDiskStorageInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataDiskStorageInfo'])) {
                throw new Error("Expected the field `dataDiskStorageInfo` to be an array in the JSON data but got " + data['dataDiskStorageInfo']);
            }
            // validate the optional field `dataDiskStorageInfo` (array)
            for (const item of data['dataDiskStorageInfo']) {
                DataDiskStorageTypeInfoFragment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['managedImageId'] && !(typeof data['managedImageId'] === 'string' || data['managedImageId'] instanceof String)) {
            throw new Error("Expected the field `managedImageId` to be a primitive type in the JSON string but got " + data['managedImageId']);
        }
        // ensure the json data is a string
        if (data['managedSnapshotId'] && !(typeof data['managedSnapshotId'] === 'string' || data['managedSnapshotId'] instanceof String)) {
            throw new Error("Expected the field `managedSnapshotId` to be a primitive type in the JSON string but got " + data['managedSnapshotId']);
        }
        // validate the optional field `vhd`
        if (data['vhd']) { // data not null
          CustomImagePropertiesCustomFragment.validateJSON(data['vhd']);
        }
        // validate the optional field `vm`
        if (data['vm']) { // data not null
          CustomImagePropertiesFromVmFragment.validateJSON(data['vm']);
        }

        return true;
    }


}



/**
 * The author of the custom image.
 * @member {String} author
 */
CustomImagePropertiesFragment.prototype['author'] = undefined;

/**
 * @member {module:model/CustomImagePropertiesFromPlanFragment} customImagePlan
 */
CustomImagePropertiesFragment.prototype['customImagePlan'] = undefined;

/**
 * Storage information about the data disks present in the custom image
 * @member {Array.<module:model/DataDiskStorageTypeInfoFragment>} dataDiskStorageInfo
 */
CustomImagePropertiesFragment.prototype['dataDiskStorageInfo'] = undefined;

/**
 * The description of the custom image.
 * @member {String} description
 */
CustomImagePropertiesFragment.prototype['description'] = undefined;

/**
 * Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
 * @member {Boolean} isPlanAuthorized
 */
CustomImagePropertiesFragment.prototype['isPlanAuthorized'] = undefined;

/**
 * The Managed Image Id backing the custom image.
 * @member {String} managedImageId
 */
CustomImagePropertiesFragment.prototype['managedImageId'] = undefined;

/**
 * The Managed Snapshot Id backing the custom image.
 * @member {String} managedSnapshotId
 */
CustomImagePropertiesFragment.prototype['managedSnapshotId'] = undefined;

/**
 * @member {module:model/CustomImagePropertiesCustomFragment} vhd
 */
CustomImagePropertiesFragment.prototype['vhd'] = undefined;

/**
 * @member {module:model/CustomImagePropertiesFromVmFragment} vm
 */
CustomImagePropertiesFragment.prototype['vm'] = undefined;






export default CustomImagePropertiesFragment;

