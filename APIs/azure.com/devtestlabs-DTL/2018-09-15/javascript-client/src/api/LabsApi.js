/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import ExportResourceUsageParameters from '../model/ExportResourceUsageParameters';
import GenerateUploadUriParameter from '../model/GenerateUploadUriParameter';
import GenerateUploadUriResponse from '../model/GenerateUploadUriResponse';
import ImportLabVirtualMachineRequest from '../model/ImportLabVirtualMachineRequest';
import Lab from '../model/Lab';
import LabFragment from '../model/LabFragment';
import LabList from '../model/LabList';
import LabVhdList from '../model/LabVhdList';
import LabVirtualMachineCreationParameter from '../model/LabVirtualMachineCreationParameter';

/**
* Labs service.
* @module api/LabsApi
* @version 2018-09-15
*/
export default class LabsApi {

    /**
    * Constructs a new LabsApi. 
    * @alias module:api/LabsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the labsClaimAnyVm operation.
     * @callback module:api/LabsApi~labsClaimAnyVmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:api/LabsApi~labsClaimAnyVmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labsClaimAnyVm(subscriptionId, resourceGroupName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsClaimAnyVm");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsClaimAnyVm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsClaimAnyVm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsClaimAnyVm");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/claimAnyVm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsCreateEnvironment operation.
     * @callback module:api/LabsApi~labsCreateEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/LabVirtualMachineCreationParameter} labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @param {module:api/LabsApi~labsCreateEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labsCreateEnvironment(subscriptionId, resourceGroupName, name, apiVersion, labVirtualMachineCreationParameter, callback) {
      let postBody = labVirtualMachineCreationParameter;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsCreateEnvironment");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsCreateEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsCreateEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsCreateEnvironment");
      }
      // verify the required parameter 'labVirtualMachineCreationParameter' is set
      if (labVirtualMachineCreationParameter === undefined || labVirtualMachineCreationParameter === null) {
        throw new Error("Missing the required parameter 'labVirtualMachineCreationParameter' when calling labsCreateEnvironment");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsCreateOrUpdate operation.
     * @callback module:api/LabsApi~labsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/Lab} lab A lab.
     * @param {module:api/LabsApi~labsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lab}
     */
    labsCreateOrUpdate(subscriptionId, resourceGroupName, name, apiVersion, lab, callback) {
      let postBody = lab;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsCreateOrUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsCreateOrUpdate");
      }
      // verify the required parameter 'lab' is set
      if (lab === undefined || lab === null) {
        throw new Error("Missing the required parameter 'lab' when calling labsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Lab;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsDelete operation.
     * @callback module:api/LabsApi~labsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete lab. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:api/LabsApi~labsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labsDelete(subscriptionId, resourceGroupName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsExportResourceUsage operation.
     * @callback module:api/LabsApi~labsExportResourceUsageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/ExportResourceUsageParameters} exportResourceUsageParameters The parameters of the export operation.
     * @param {module:api/LabsApi~labsExportResourceUsageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labsExportResourceUsage(subscriptionId, resourceGroupName, name, apiVersion, exportResourceUsageParameters, callback) {
      let postBody = exportResourceUsageParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsExportResourceUsage");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsExportResourceUsage");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsExportResourceUsage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsExportResourceUsage");
      }
      // verify the required parameter 'exportResourceUsageParameters' is set
      if (exportResourceUsageParameters === undefined || exportResourceUsageParameters === null) {
        throw new Error("Missing the required parameter 'exportResourceUsageParameters' when calling labsExportResourceUsage");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/exportResourceUsage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsGenerateUploadUri operation.
     * @callback module:api/LabsApi~labsGenerateUploadUriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateUploadUriResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/GenerateUploadUriParameter} generateUploadUriParameter Properties for generating an upload URI.
     * @param {module:api/LabsApi~labsGenerateUploadUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateUploadUriResponse}
     */
    labsGenerateUploadUri(subscriptionId, resourceGroupName, name, apiVersion, generateUploadUriParameter, callback) {
      let postBody = generateUploadUriParameter;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsGenerateUploadUri");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsGenerateUploadUri");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsGenerateUploadUri");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsGenerateUploadUri");
      }
      // verify the required parameter 'generateUploadUriParameter' is set
      if (generateUploadUriParameter === undefined || generateUploadUriParameter === null) {
        throw new Error("Missing the required parameter 'generateUploadUriParameter' when calling labsGenerateUploadUri");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateUploadUriResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/generateUploadUri', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsGet operation.
     * @callback module:api/LabsApi~labsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lab.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param {module:api/LabsApi~labsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lab}
     */
    labsGet(subscriptionId, resourceGroupName, name, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Lab;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsImportVirtualMachine operation.
     * @callback module:api/LabsApi~labsImportVirtualMachineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a virtual machine into a different lab. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/ImportLabVirtualMachineRequest} importLabVirtualMachineRequest This represents the payload required to import a virtual machine from a different lab into the current one
     * @param {module:api/LabsApi~labsImportVirtualMachineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labsImportVirtualMachine(subscriptionId, resourceGroupName, name, apiVersion, importLabVirtualMachineRequest, callback) {
      let postBody = importLabVirtualMachineRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsImportVirtualMachine");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsImportVirtualMachine");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsImportVirtualMachine");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsImportVirtualMachine");
      }
      // verify the required parameter 'importLabVirtualMachineRequest' is set
      if (importLabVirtualMachineRequest === undefined || importLabVirtualMachineRequest === null) {
        throw new Error("Missing the required parameter 'importLabVirtualMachineRequest' when calling labsImportVirtualMachine");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/importVirtualMachine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsListByResourceGroup operation.
     * @callback module:api/LabsApi~labsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labs in a resource group.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param {String} [filter] The filter to apply to the operation. Example: '$filter=contains(name,'myName')
     * @param {Number} [top] The maximum number of resources to return from the operation. Example: '$top=10'
     * @param {String} [orderby] The ordering expression for the results, using OData notation. Example: '$orderby=name desc'
     * @param {module:api/LabsApi~labsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabList}
     */
    labsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsListBySubscription operation.
     * @callback module:api/LabsApi~labsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labs in a subscription.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
     * @param {String} [filter] The filter to apply to the operation. Example: '$filter=contains(name,'myName')
     * @param {Number} [top] The maximum number of resources to return from the operation. Example: '$top=10'
     * @param {String} [orderby] The ordering expression for the results, using OData notation. Example: '$orderby=name desc'
     * @param {module:api/LabsApi~labsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabList}
     */
    labsListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsListVhds operation.
     * @callback module:api/LabsApi~labsListVhdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabVhdList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List disk images available for custom image creation.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:api/LabsApi~labsListVhdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabVhdList}
     */
    labsListVhds(subscriptionId, resourceGroupName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsListVhds");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsListVhds");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsListVhds");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsListVhds");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabVhdList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/listVhds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labsUpdate operation.
     * @callback module:api/LabsApi~labsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lab} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows modifying tags of labs. All other properties will be ignored.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} name The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {module:model/LabFragment} lab A lab.
     * @param {module:api/LabsApi~labsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lab}
     */
    labsUpdate(subscriptionId, resourceGroupName, name, apiVersion, lab, callback) {
      let postBody = lab;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labsUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling labsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labsUpdate");
      }
      // verify the required parameter 'lab' is set
      if (lab === undefined || lab === null) {
        throw new Error("Missing the required parameter 'lab' when calling labsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Lab;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
