/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import Schedule from '../model/Schedule';
import ScheduleFragment from '../model/ScheduleFragment';
import ScheduleList from '../model/ScheduleList';

/**
* ServiceFabricSchedules service.
* @module api/ServiceFabricSchedulesApi
* @version 2018-09-15
*/
export default class ServiceFabricSchedulesApi {

    /**
    * Constructs a new ServiceFabricSchedulesApi. 
    * @alias module:api/ServiceFabricSchedulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serviceFabricSchedulesCreateOrUpdate operation.
     * @callback module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace an existing schedule.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} userName The name of the user profile.
     * @param {String} serviceFabricName The name of the service fabric.
     * @param {String} name The name of the schedule.
     * @param {String} apiVersion Client API version.
     * @param {module:model/Schedule} schedule A schedule.
     * @param {module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schedule}
     */
    serviceFabricSchedulesCreateOrUpdate(subscriptionId, resourceGroupName, labName, userName, serviceFabricName, name, apiVersion, schedule, callback) {
      let postBody = schedule;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceFabricSchedulesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serviceFabricSchedulesCreateOrUpdate");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling serviceFabricSchedulesCreateOrUpdate");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling serviceFabricSchedulesCreateOrUpdate");
      }
      // verify the required parameter 'serviceFabricName' is set
      if (serviceFabricName === undefined || serviceFabricName === null) {
        throw new Error("Missing the required parameter 'serviceFabricName' when calling serviceFabricSchedulesCreateOrUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceFabricSchedulesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceFabricSchedulesCreateOrUpdate");
      }
      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling serviceFabricSchedulesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'userName': userName,
        'serviceFabricName': serviceFabricName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Schedule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceFabricSchedulesDelete operation.
     * @callback module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete schedule.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} userName The name of the user profile.
     * @param {String} serviceFabricName The name of the service fabric.
     * @param {String} name The name of the schedule.
     * @param {String} apiVersion Client API version.
     * @param {module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceFabricSchedulesDelete(subscriptionId, resourceGroupName, labName, userName, serviceFabricName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceFabricSchedulesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serviceFabricSchedulesDelete");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling serviceFabricSchedulesDelete");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling serviceFabricSchedulesDelete");
      }
      // verify the required parameter 'serviceFabricName' is set
      if (serviceFabricName === undefined || serviceFabricName === null) {
        throw new Error("Missing the required parameter 'serviceFabricName' when calling serviceFabricSchedulesDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceFabricSchedulesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceFabricSchedulesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'userName': userName,
        'serviceFabricName': serviceFabricName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceFabricSchedulesExecute operation.
     * @callback module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesExecuteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} userName The name of the user profile.
     * @param {String} serviceFabricName The name of the service fabric.
     * @param {String} name The name of the schedule.
     * @param {String} apiVersion Client API version.
     * @param {module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesExecuteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceFabricSchedulesExecute(subscriptionId, resourceGroupName, labName, userName, serviceFabricName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceFabricSchedulesExecute");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serviceFabricSchedulesExecute");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling serviceFabricSchedulesExecute");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling serviceFabricSchedulesExecute");
      }
      // verify the required parameter 'serviceFabricName' is set
      if (serviceFabricName === undefined || serviceFabricName === null) {
        throw new Error("Missing the required parameter 'serviceFabricName' when calling serviceFabricSchedulesExecute");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceFabricSchedulesExecute");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceFabricSchedulesExecute");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'userName': userName,
        'serviceFabricName': serviceFabricName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceFabricSchedulesGet operation.
     * @callback module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schedule.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} userName The name of the user profile.
     * @param {String} serviceFabricName The name of the service fabric.
     * @param {String} name The name of the schedule.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($select=status)'
     * @param {module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schedule}
     */
    serviceFabricSchedulesGet(subscriptionId, resourceGroupName, labName, userName, serviceFabricName, name, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceFabricSchedulesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serviceFabricSchedulesGet");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling serviceFabricSchedulesGet");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling serviceFabricSchedulesGet");
      }
      // verify the required parameter 'serviceFabricName' is set
      if (serviceFabricName === undefined || serviceFabricName === null) {
        throw new Error("Missing the required parameter 'serviceFabricName' when calling serviceFabricSchedulesGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceFabricSchedulesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceFabricSchedulesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'userName': userName,
        'serviceFabricName': serviceFabricName,
        'name': name
      };
      let queryParams = {
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schedule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceFabricSchedulesList operation.
     * @callback module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List schedules in a given service fabric.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} userName The name of the user profile.
     * @param {String} serviceFabricName The name of the service fabric.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($select=status)'
     * @param {String} [filter] The filter to apply to the operation. Example: '$filter=contains(name,'myName')
     * @param {Number} [top] The maximum number of resources to return from the operation. Example: '$top=10'
     * @param {String} [orderby] The ordering expression for the results, using OData notation. Example: '$orderby=name desc'
     * @param {module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleList}
     */
    serviceFabricSchedulesList(subscriptionId, resourceGroupName, labName, userName, serviceFabricName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceFabricSchedulesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serviceFabricSchedulesList");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling serviceFabricSchedulesList");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling serviceFabricSchedulesList");
      }
      // verify the required parameter 'serviceFabricName' is set
      if (serviceFabricName === undefined || serviceFabricName === null) {
        throw new Error("Missing the required parameter 'serviceFabricName' when calling serviceFabricSchedulesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceFabricSchedulesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'userName': userName,
        'serviceFabricName': serviceFabricName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceFabricSchedulesUpdate operation.
     * @callback module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows modifying tags of schedules. All other properties will be ignored.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} userName The name of the user profile.
     * @param {String} serviceFabricName The name of the service fabric.
     * @param {String} name The name of the schedule.
     * @param {String} apiVersion Client API version.
     * @param {module:model/ScheduleFragment} schedule A schedule.
     * @param {module:api/ServiceFabricSchedulesApi~serviceFabricSchedulesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schedule}
     */
    serviceFabricSchedulesUpdate(subscriptionId, resourceGroupName, labName, userName, serviceFabricName, name, apiVersion, schedule, callback) {
      let postBody = schedule;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceFabricSchedulesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serviceFabricSchedulesUpdate");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling serviceFabricSchedulesUpdate");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling serviceFabricSchedulesUpdate");
      }
      // verify the required parameter 'serviceFabricName' is set
      if (serviceFabricName === undefined || serviceFabricName === null) {
        throw new Error("Missing the required parameter 'serviceFabricName' when calling serviceFabricSchedulesUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceFabricSchedulesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceFabricSchedulesUpdate");
      }
      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling serviceFabricSchedulesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'userName': userName,
        'serviceFabricName': serviceFabricName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Schedule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
