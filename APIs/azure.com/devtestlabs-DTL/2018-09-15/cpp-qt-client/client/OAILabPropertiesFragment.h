/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILabPropertiesFragment.h
 *
 * Properties of a lab.
 */

#ifndef OAILabPropertiesFragment_H
#define OAILabPropertiesFragment_H

#include <QJsonObject>

#include "OAILabAnnouncementPropertiesFragment.h"
#include "OAILabSupportPropertiesFragment.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILabAnnouncementPropertiesFragment;
class OAILabSupportPropertiesFragment;

class OAILabPropertiesFragment : public OAIObject {
public:
    OAILabPropertiesFragment();
    OAILabPropertiesFragment(QString json);
    ~OAILabPropertiesFragment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILabAnnouncementPropertiesFragment getAnnouncement() const;
    void setAnnouncement(const OAILabAnnouncementPropertiesFragment &announcement);
    bool is_announcement_Set() const;
    bool is_announcement_Valid() const;

    QString getEnvironmentPermission() const;
    void setEnvironmentPermission(const QString &environment_permission);
    bool is_environment_permission_Set() const;
    bool is_environment_permission_Valid() const;

    QMap<QString, QString> getExtendedProperties() const;
    void setExtendedProperties(const QMap<QString, QString> &extended_properties);
    bool is_extended_properties_Set() const;
    bool is_extended_properties_Valid() const;

    QString getLabStorageType() const;
    void setLabStorageType(const QString &lab_storage_type);
    bool is_lab_storage_type_Set() const;
    bool is_lab_storage_type_Valid() const;

    QList<QString> getMandatoryArtifactsResourceIdsLinux() const;
    void setMandatoryArtifactsResourceIdsLinux(const QList<QString> &mandatory_artifacts_resource_ids_linux);
    bool is_mandatory_artifacts_resource_ids_linux_Set() const;
    bool is_mandatory_artifacts_resource_ids_linux_Valid() const;

    QList<QString> getMandatoryArtifactsResourceIdsWindows() const;
    void setMandatoryArtifactsResourceIdsWindows(const QList<QString> &mandatory_artifacts_resource_ids_windows);
    bool is_mandatory_artifacts_resource_ids_windows_Set() const;
    bool is_mandatory_artifacts_resource_ids_windows_Valid() const;

    QString getPremiumDataDisks() const;
    void setPremiumDataDisks(const QString &premium_data_disks);
    bool is_premium_data_disks_Set() const;
    bool is_premium_data_disks_Valid() const;

    OAILabSupportPropertiesFragment getSupport() const;
    void setSupport(const OAILabSupportPropertiesFragment &support);
    bool is_support_Set() const;
    bool is_support_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILabAnnouncementPropertiesFragment m_announcement;
    bool m_announcement_isSet;
    bool m_announcement_isValid;

    QString m_environment_permission;
    bool m_environment_permission_isSet;
    bool m_environment_permission_isValid;

    QMap<QString, QString> m_extended_properties;
    bool m_extended_properties_isSet;
    bool m_extended_properties_isValid;

    QString m_lab_storage_type;
    bool m_lab_storage_type_isSet;
    bool m_lab_storage_type_isValid;

    QList<QString> m_mandatory_artifacts_resource_ids_linux;
    bool m_mandatory_artifacts_resource_ids_linux_isSet;
    bool m_mandatory_artifacts_resource_ids_linux_isValid;

    QList<QString> m_mandatory_artifacts_resource_ids_windows;
    bool m_mandatory_artifacts_resource_ids_windows_isSet;
    bool m_mandatory_artifacts_resource_ids_windows_isValid;

    QString m_premium_data_disks;
    bool m_premium_data_disks_isSet;
    bool m_premium_data_disks_isValid;

    OAILabSupportPropertiesFragment m_support;
    bool m_support_isSet;
    bool m_support_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILabPropertiesFragment)

#endif // OAILabPropertiesFragment_H
