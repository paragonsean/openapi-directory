/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceFabricSchedulesApi_H
#define OAI_OAIServiceFabricSchedulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAISchedule.h"
#include "OAIScheduleFragment.h"
#include "OAIScheduleList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceFabricSchedulesApi : public QObject {
    Q_OBJECT

public:
    OAIServiceFabricSchedulesApi(const int timeOut = 0);
    ~OAIServiceFabricSchedulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  service_fabric_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule OAISchedule [required]
    */
    virtual void serviceFabricSchedulesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version, const OAISchedule &schedule);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  service_fabric_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceFabricSchedulesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  service_fabric_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceFabricSchedulesExecute(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  service_fabric_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void serviceFabricSchedulesGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  service_fabric_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void serviceFabricSchedulesList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  service_fabric_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule OAIScheduleFragment [required]
    */
    virtual void serviceFabricSchedulesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version, const OAIScheduleFragment &schedule);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serviceFabricSchedulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void serviceFabricSchedulesDeleteCallback(OAIHttpRequestWorker *worker);
    void serviceFabricSchedulesExecuteCallback(OAIHttpRequestWorker *worker);
    void serviceFabricSchedulesGetCallback(OAIHttpRequestWorker *worker);
    void serviceFabricSchedulesListCallback(OAIHttpRequestWorker *worker);
    void serviceFabricSchedulesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serviceFabricSchedulesCreateOrUpdateSignal(OAISchedule summary);
    void serviceFabricSchedulesDeleteSignal();
    void serviceFabricSchedulesExecuteSignal();
    void serviceFabricSchedulesGetSignal(OAISchedule summary);
    void serviceFabricSchedulesListSignal(OAIScheduleList summary);
    void serviceFabricSchedulesUpdateSignal(OAISchedule summary);


    void serviceFabricSchedulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void serviceFabricSchedulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serviceFabricSchedulesExecuteSignalFull(OAIHttpRequestWorker *worker);
    void serviceFabricSchedulesGetSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void serviceFabricSchedulesListSignalFull(OAIHttpRequestWorker *worker, OAIScheduleList summary);
    void serviceFabricSchedulesUpdateSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);

    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesCreateOrUpdateSignalError() instead")
    void serviceFabricSchedulesCreateOrUpdateSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesCreateOrUpdateSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesDeleteSignalError() instead")
    void serviceFabricSchedulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesExecuteSignalError() instead")
    void serviceFabricSchedulesExecuteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesExecuteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesGetSignalError() instead")
    void serviceFabricSchedulesGetSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesGetSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesListSignalError() instead")
    void serviceFabricSchedulesListSignalE(OAIScheduleList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesListSignalError(OAIScheduleList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesUpdateSignalError() instead")
    void serviceFabricSchedulesUpdateSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesUpdateSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesCreateOrUpdateSignalErrorFull() instead")
    void serviceFabricSchedulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesDeleteSignalErrorFull() instead")
    void serviceFabricSchedulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesExecuteSignalErrorFull() instead")
    void serviceFabricSchedulesExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesGetSignalErrorFull() instead")
    void serviceFabricSchedulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesListSignalErrorFull() instead")
    void serviceFabricSchedulesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricSchedulesUpdateSignalErrorFull() instead")
    void serviceFabricSchedulesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricSchedulesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
