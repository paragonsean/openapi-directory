/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDiskProperties.h
 *
 * Properties of a disk.
 */

#ifndef OAIDiskProperties_H
#define OAIDiskProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDiskProperties : public OAIObject {
public:
    OAIDiskProperties();
    OAIDiskProperties(QString json);
    ~OAIDiskProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedDate() const;
    void setCreatedDate(const QDateTime &created_date);
    bool is_created_date_Set() const;
    bool is_created_date_Valid() const;

    QString getDiskBlobName() const;
    void setDiskBlobName(const QString &disk_blob_name);
    bool is_disk_blob_name_Set() const;
    bool is_disk_blob_name_Valid() const;

    qint32 getDiskSizeGiB() const;
    void setDiskSizeGiB(const qint32 &disk_size_gi_b);
    bool is_disk_size_gi_b_Set() const;
    bool is_disk_size_gi_b_Valid() const;

    QString getDiskType() const;
    void setDiskType(const QString &disk_type);
    bool is_disk_type_Set() const;
    bool is_disk_type_Valid() const;

    QString getDiskUri() const;
    void setDiskUri(const QString &disk_uri);
    bool is_disk_uri_Set() const;
    bool is_disk_uri_Valid() const;

    QString getHostCaching() const;
    void setHostCaching(const QString &host_caching);
    bool is_host_caching_Set() const;
    bool is_host_caching_Valid() const;

    QString getLeasedByLabVmId() const;
    void setLeasedByLabVmId(const QString &leased_by_lab_vm_id);
    bool is_leased_by_lab_vm_id_Set() const;
    bool is_leased_by_lab_vm_id_Valid() const;

    QString getManagedDiskId() const;
    void setManagedDiskId(const QString &managed_disk_id);
    bool is_managed_disk_id_Set() const;
    bool is_managed_disk_id_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getUniqueIdentifier() const;
    void setUniqueIdentifier(const QString &unique_identifier);
    bool is_unique_identifier_Set() const;
    bool is_unique_identifier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_date;
    bool m_created_date_isSet;
    bool m_created_date_isValid;

    QString m_disk_blob_name;
    bool m_disk_blob_name_isSet;
    bool m_disk_blob_name_isValid;

    qint32 m_disk_size_gi_b;
    bool m_disk_size_gi_b_isSet;
    bool m_disk_size_gi_b_isValid;

    QString m_disk_type;
    bool m_disk_type_isSet;
    bool m_disk_type_isValid;

    QString m_disk_uri;
    bool m_disk_uri_isSet;
    bool m_disk_uri_isValid;

    QString m_host_caching;
    bool m_host_caching_isSet;
    bool m_host_caching_isValid;

    QString m_leased_by_lab_vm_id;
    bool m_leased_by_lab_vm_id_isSet;
    bool m_leased_by_lab_vm_id_isValid;

    QString m_managed_disk_id;
    bool m_managed_disk_id_isSet;
    bool m_managed_disk_id_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_unique_identifier;
    bool m_unique_identifier_isSet;
    bool m_unique_identifier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDiskProperties)

#endif // OAIDiskProperties_H
