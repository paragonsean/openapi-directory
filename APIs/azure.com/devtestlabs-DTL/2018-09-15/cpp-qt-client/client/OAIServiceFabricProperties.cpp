/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceFabricProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceFabricProperties::OAIServiceFabricProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceFabricProperties::OAIServiceFabricProperties() {
    this->initializeModel();
}

OAIServiceFabricProperties::~OAIServiceFabricProperties() {}

void OAIServiceFabricProperties::initializeModel() {

    m_applicable_schedule_isSet = false;
    m_applicable_schedule_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_external_service_fabric_id_isSet = false;
    m_external_service_fabric_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAIServiceFabricProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceFabricProperties::fromJsonObject(QJsonObject json) {

    m_applicable_schedule_isValid = ::OpenAPI::fromJsonValue(m_applicable_schedule, json[QString("applicableSchedule")]);
    m_applicable_schedule_isSet = !json[QString("applicableSchedule")].isNull() && m_applicable_schedule_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_external_service_fabric_id_isValid = ::OpenAPI::fromJsonValue(m_external_service_fabric_id, json[QString("externalServiceFabricId")]);
    m_external_service_fabric_id_isSet = !json[QString("externalServiceFabricId")].isNull() && m_external_service_fabric_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAIServiceFabricProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceFabricProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_schedule.isSet()) {
        obj.insert(QString("applicableSchedule"), ::OpenAPI::toJsonValue(m_applicable_schedule));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_external_service_fabric_id_isSet) {
        obj.insert(QString("externalServiceFabricId"), ::OpenAPI::toJsonValue(m_external_service_fabric_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

OAIApplicableSchedule OAIServiceFabricProperties::getApplicableSchedule() const {
    return m_applicable_schedule;
}
void OAIServiceFabricProperties::setApplicableSchedule(const OAIApplicableSchedule &applicable_schedule) {
    m_applicable_schedule = applicable_schedule;
    m_applicable_schedule_isSet = true;
}

bool OAIServiceFabricProperties::is_applicable_schedule_Set() const{
    return m_applicable_schedule_isSet;
}

bool OAIServiceFabricProperties::is_applicable_schedule_Valid() const{
    return m_applicable_schedule_isValid;
}

QString OAIServiceFabricProperties::getEnvironmentId() const {
    return m_environment_id;
}
void OAIServiceFabricProperties::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIServiceFabricProperties::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIServiceFabricProperties::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QString OAIServiceFabricProperties::getExternalServiceFabricId() const {
    return m_external_service_fabric_id;
}
void OAIServiceFabricProperties::setExternalServiceFabricId(const QString &external_service_fabric_id) {
    m_external_service_fabric_id = external_service_fabric_id;
    m_external_service_fabric_id_isSet = true;
}

bool OAIServiceFabricProperties::is_external_service_fabric_id_Set() const{
    return m_external_service_fabric_id_isSet;
}

bool OAIServiceFabricProperties::is_external_service_fabric_id_Valid() const{
    return m_external_service_fabric_id_isValid;
}

QString OAIServiceFabricProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIServiceFabricProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIServiceFabricProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIServiceFabricProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIServiceFabricProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIServiceFabricProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIServiceFabricProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIServiceFabricProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAIServiceFabricProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_service_fabric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceFabricProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
