/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabPropertiesFragment::OAILabPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabPropertiesFragment::OAILabPropertiesFragment() {
    this->initializeModel();
}

OAILabPropertiesFragment::~OAILabPropertiesFragment() {}

void OAILabPropertiesFragment::initializeModel() {

    m_announcement_isSet = false;
    m_announcement_isValid = false;

    m_environment_permission_isSet = false;
    m_environment_permission_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_lab_storage_type_isSet = false;
    m_lab_storage_type_isValid = false;

    m_mandatory_artifacts_resource_ids_linux_isSet = false;
    m_mandatory_artifacts_resource_ids_linux_isValid = false;

    m_mandatory_artifacts_resource_ids_windows_isSet = false;
    m_mandatory_artifacts_resource_ids_windows_isValid = false;

    m_premium_data_disks_isSet = false;
    m_premium_data_disks_isValid = false;

    m_support_isSet = false;
    m_support_isValid = false;
}

void OAILabPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_announcement_isValid = ::OpenAPI::fromJsonValue(m_announcement, json[QString("announcement")]);
    m_announcement_isSet = !json[QString("announcement")].isNull() && m_announcement_isValid;

    m_environment_permission_isValid = ::OpenAPI::fromJsonValue(m_environment_permission, json[QString("environmentPermission")]);
    m_environment_permission_isSet = !json[QString("environmentPermission")].isNull() && m_environment_permission_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("extendedProperties")]);
    m_extended_properties_isSet = !json[QString("extendedProperties")].isNull() && m_extended_properties_isValid;

    m_lab_storage_type_isValid = ::OpenAPI::fromJsonValue(m_lab_storage_type, json[QString("labStorageType")]);
    m_lab_storage_type_isSet = !json[QString("labStorageType")].isNull() && m_lab_storage_type_isValid;

    m_mandatory_artifacts_resource_ids_linux_isValid = ::OpenAPI::fromJsonValue(m_mandatory_artifacts_resource_ids_linux, json[QString("mandatoryArtifactsResourceIdsLinux")]);
    m_mandatory_artifacts_resource_ids_linux_isSet = !json[QString("mandatoryArtifactsResourceIdsLinux")].isNull() && m_mandatory_artifacts_resource_ids_linux_isValid;

    m_mandatory_artifacts_resource_ids_windows_isValid = ::OpenAPI::fromJsonValue(m_mandatory_artifacts_resource_ids_windows, json[QString("mandatoryArtifactsResourceIdsWindows")]);
    m_mandatory_artifacts_resource_ids_windows_isSet = !json[QString("mandatoryArtifactsResourceIdsWindows")].isNull() && m_mandatory_artifacts_resource_ids_windows_isValid;

    m_premium_data_disks_isValid = ::OpenAPI::fromJsonValue(m_premium_data_disks, json[QString("premiumDataDisks")]);
    m_premium_data_disks_isSet = !json[QString("premiumDataDisks")].isNull() && m_premium_data_disks_isValid;

    m_support_isValid = ::OpenAPI::fromJsonValue(m_support, json[QString("support")]);
    m_support_isSet = !json[QString("support")].isNull() && m_support_isValid;
}

QString OAILabPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_announcement.isSet()) {
        obj.insert(QString("announcement"), ::OpenAPI::toJsonValue(m_announcement));
    }
    if (m_environment_permission_isSet) {
        obj.insert(QString("environmentPermission"), ::OpenAPI::toJsonValue(m_environment_permission));
    }
    if (m_extended_properties.size() > 0) {
        obj.insert(QString("extendedProperties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_lab_storage_type_isSet) {
        obj.insert(QString("labStorageType"), ::OpenAPI::toJsonValue(m_lab_storage_type));
    }
    if (m_mandatory_artifacts_resource_ids_linux.size() > 0) {
        obj.insert(QString("mandatoryArtifactsResourceIdsLinux"), ::OpenAPI::toJsonValue(m_mandatory_artifacts_resource_ids_linux));
    }
    if (m_mandatory_artifacts_resource_ids_windows.size() > 0) {
        obj.insert(QString("mandatoryArtifactsResourceIdsWindows"), ::OpenAPI::toJsonValue(m_mandatory_artifacts_resource_ids_windows));
    }
    if (m_premium_data_disks_isSet) {
        obj.insert(QString("premiumDataDisks"), ::OpenAPI::toJsonValue(m_premium_data_disks));
    }
    if (m_support.isSet()) {
        obj.insert(QString("support"), ::OpenAPI::toJsonValue(m_support));
    }
    return obj;
}

OAILabAnnouncementPropertiesFragment OAILabPropertiesFragment::getAnnouncement() const {
    return m_announcement;
}
void OAILabPropertiesFragment::setAnnouncement(const OAILabAnnouncementPropertiesFragment &announcement) {
    m_announcement = announcement;
    m_announcement_isSet = true;
}

bool OAILabPropertiesFragment::is_announcement_Set() const{
    return m_announcement_isSet;
}

bool OAILabPropertiesFragment::is_announcement_Valid() const{
    return m_announcement_isValid;
}

QString OAILabPropertiesFragment::getEnvironmentPermission() const {
    return m_environment_permission;
}
void OAILabPropertiesFragment::setEnvironmentPermission(const QString &environment_permission) {
    m_environment_permission = environment_permission;
    m_environment_permission_isSet = true;
}

bool OAILabPropertiesFragment::is_environment_permission_Set() const{
    return m_environment_permission_isSet;
}

bool OAILabPropertiesFragment::is_environment_permission_Valid() const{
    return m_environment_permission_isValid;
}

QMap<QString, QString> OAILabPropertiesFragment::getExtendedProperties() const {
    return m_extended_properties;
}
void OAILabPropertiesFragment::setExtendedProperties(const QMap<QString, QString> &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAILabPropertiesFragment::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAILabPropertiesFragment::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

QString OAILabPropertiesFragment::getLabStorageType() const {
    return m_lab_storage_type;
}
void OAILabPropertiesFragment::setLabStorageType(const QString &lab_storage_type) {
    m_lab_storage_type = lab_storage_type;
    m_lab_storage_type_isSet = true;
}

bool OAILabPropertiesFragment::is_lab_storage_type_Set() const{
    return m_lab_storage_type_isSet;
}

bool OAILabPropertiesFragment::is_lab_storage_type_Valid() const{
    return m_lab_storage_type_isValid;
}

QList<QString> OAILabPropertiesFragment::getMandatoryArtifactsResourceIdsLinux() const {
    return m_mandatory_artifacts_resource_ids_linux;
}
void OAILabPropertiesFragment::setMandatoryArtifactsResourceIdsLinux(const QList<QString> &mandatory_artifacts_resource_ids_linux) {
    m_mandatory_artifacts_resource_ids_linux = mandatory_artifacts_resource_ids_linux;
    m_mandatory_artifacts_resource_ids_linux_isSet = true;
}

bool OAILabPropertiesFragment::is_mandatory_artifacts_resource_ids_linux_Set() const{
    return m_mandatory_artifacts_resource_ids_linux_isSet;
}

bool OAILabPropertiesFragment::is_mandatory_artifacts_resource_ids_linux_Valid() const{
    return m_mandatory_artifacts_resource_ids_linux_isValid;
}

QList<QString> OAILabPropertiesFragment::getMandatoryArtifactsResourceIdsWindows() const {
    return m_mandatory_artifacts_resource_ids_windows;
}
void OAILabPropertiesFragment::setMandatoryArtifactsResourceIdsWindows(const QList<QString> &mandatory_artifacts_resource_ids_windows) {
    m_mandatory_artifacts_resource_ids_windows = mandatory_artifacts_resource_ids_windows;
    m_mandatory_artifacts_resource_ids_windows_isSet = true;
}

bool OAILabPropertiesFragment::is_mandatory_artifacts_resource_ids_windows_Set() const{
    return m_mandatory_artifacts_resource_ids_windows_isSet;
}

bool OAILabPropertiesFragment::is_mandatory_artifacts_resource_ids_windows_Valid() const{
    return m_mandatory_artifacts_resource_ids_windows_isValid;
}

QString OAILabPropertiesFragment::getPremiumDataDisks() const {
    return m_premium_data_disks;
}
void OAILabPropertiesFragment::setPremiumDataDisks(const QString &premium_data_disks) {
    m_premium_data_disks = premium_data_disks;
    m_premium_data_disks_isSet = true;
}

bool OAILabPropertiesFragment::is_premium_data_disks_Set() const{
    return m_premium_data_disks_isSet;
}

bool OAILabPropertiesFragment::is_premium_data_disks_Valid() const{
    return m_premium_data_disks_isValid;
}

OAILabSupportPropertiesFragment OAILabPropertiesFragment::getSupport() const {
    return m_support;
}
void OAILabPropertiesFragment::setSupport(const OAILabSupportPropertiesFragment &support) {
    m_support = support;
    m_support_isSet = true;
}

bool OAILabPropertiesFragment::is_support_Set() const{
    return m_support_isSet;
}

bool OAILabPropertiesFragment::is_support_Valid() const{
    return m_support_isValid;
}

bool OAILabPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_announcement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_artifacts_resource_ids_linux.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_artifacts_resource_ids_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_data_disks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
