/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGalleryImageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGalleryImageProperties::OAIGalleryImageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGalleryImageProperties::OAIGalleryImageProperties() {
    this->initializeModel();
}

OAIGalleryImageProperties::~OAIGalleryImageProperties() {}

void OAIGalleryImageProperties::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_image_reference_isSet = false;
    m_image_reference_isValid = false;

    m_is_plan_authorized_isSet = false;
    m_is_plan_authorized_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;
}

void OAIGalleryImageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGalleryImageProperties::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_image_reference_isValid = ::OpenAPI::fromJsonValue(m_image_reference, json[QString("imageReference")]);
    m_image_reference_isSet = !json[QString("imageReference")].isNull() && m_image_reference_isValid;

    m_is_plan_authorized_isValid = ::OpenAPI::fromJsonValue(m_is_plan_authorized, json[QString("isPlanAuthorized")]);
    m_is_plan_authorized_isSet = !json[QString("isPlanAuthorized")].isNull() && m_is_plan_authorized_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;
}

QString OAIGalleryImageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGalleryImageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_image_reference.isSet()) {
        obj.insert(QString("imageReference"), ::OpenAPI::toJsonValue(m_image_reference));
    }
    if (m_is_plan_authorized_isSet) {
        obj.insert(QString("isPlanAuthorized"), ::OpenAPI::toJsonValue(m_is_plan_authorized));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    return obj;
}

QString OAIGalleryImageProperties::getAuthor() const {
    return m_author;
}
void OAIGalleryImageProperties::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGalleryImageProperties::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGalleryImageProperties::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIGalleryImageProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIGalleryImageProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIGalleryImageProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIGalleryImageProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIGalleryImageProperties::getDescription() const {
    return m_description;
}
void OAIGalleryImageProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGalleryImageProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGalleryImageProperties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIGalleryImageProperties::isEnabled() const {
    return m_enabled;
}
void OAIGalleryImageProperties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGalleryImageProperties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGalleryImageProperties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIGalleryImageProperties::getIcon() const {
    return m_icon;
}
void OAIGalleryImageProperties::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIGalleryImageProperties::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIGalleryImageProperties::is_icon_Valid() const{
    return m_icon_isValid;
}

OAIGalleryImageReference OAIGalleryImageProperties::getImageReference() const {
    return m_image_reference;
}
void OAIGalleryImageProperties::setImageReference(const OAIGalleryImageReference &image_reference) {
    m_image_reference = image_reference;
    m_image_reference_isSet = true;
}

bool OAIGalleryImageProperties::is_image_reference_Set() const{
    return m_image_reference_isSet;
}

bool OAIGalleryImageProperties::is_image_reference_Valid() const{
    return m_image_reference_isValid;
}

bool OAIGalleryImageProperties::isIsPlanAuthorized() const {
    return m_is_plan_authorized;
}
void OAIGalleryImageProperties::setIsPlanAuthorized(const bool &is_plan_authorized) {
    m_is_plan_authorized = is_plan_authorized;
    m_is_plan_authorized_isSet = true;
}

bool OAIGalleryImageProperties::is_is_plan_authorized_Set() const{
    return m_is_plan_authorized_isSet;
}

bool OAIGalleryImageProperties::is_is_plan_authorized_Valid() const{
    return m_is_plan_authorized_isValid;
}

QString OAIGalleryImageProperties::getPlanId() const {
    return m_plan_id;
}
void OAIGalleryImageProperties::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIGalleryImageProperties::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIGalleryImageProperties::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

bool OAIGalleryImageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_plan_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGalleryImageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
