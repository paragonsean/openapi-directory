/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILabsApi_H
#define OAI_OAILabsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIExportResourceUsageParameters.h"
#include "OAIGenerateUploadUriParameter.h"
#include "OAIGenerateUploadUriResponse.h"
#include "OAIImportLabVirtualMachineRequest.h"
#include "OAILab.h"
#include "OAILabFragment.h"
#include "OAILabList.h"
#include "OAILabVhdList.h"
#include "OAILabVirtualMachineCreationParameter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILabsApi : public QObject {
    Q_OBJECT

public:
    OAILabsApi(const int timeOut = 0);
    ~OAILabsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labsClaimAnyVm(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab_virtual_machine_creation_parameter OAILabVirtualMachineCreationParameter [required]
    */
    virtual void labsCreateEnvironment(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAILabVirtualMachineCreationParameter &lab_virtual_machine_creation_parameter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab OAILab [required]
    */
    virtual void labsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAILab &lab);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  export_resource_usage_parameters OAIExportResourceUsageParameters [required]
    */
    virtual void labsExportResourceUsage(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAIExportResourceUsageParameters &export_resource_usage_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  generate_upload_uri_parameter OAIGenerateUploadUriParameter [required]
    */
    virtual void labsGenerateUploadUri(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAIGenerateUploadUriParameter &generate_upload_uri_parameter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void labsGet(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  import_lab_virtual_machine_request OAIImportLabVirtualMachineRequest [required]
    */
    virtual void labsImportVirtualMachine(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAIImportLabVirtualMachineRequest &import_lab_virtual_machine_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void labsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void labsListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labsListVhds(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab OAILabFragment [required]
    */
    virtual void labsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAILabFragment &lab);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void labsClaimAnyVmCallback(OAIHttpRequestWorker *worker);
    void labsCreateEnvironmentCallback(OAIHttpRequestWorker *worker);
    void labsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void labsDeleteCallback(OAIHttpRequestWorker *worker);
    void labsExportResourceUsageCallback(OAIHttpRequestWorker *worker);
    void labsGenerateUploadUriCallback(OAIHttpRequestWorker *worker);
    void labsGetCallback(OAIHttpRequestWorker *worker);
    void labsImportVirtualMachineCallback(OAIHttpRequestWorker *worker);
    void labsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void labsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void labsListVhdsCallback(OAIHttpRequestWorker *worker);
    void labsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void labsClaimAnyVmSignal();
    void labsCreateEnvironmentSignal();
    void labsCreateOrUpdateSignal(OAILab summary);
    void labsDeleteSignal();
    void labsExportResourceUsageSignal();
    void labsGenerateUploadUriSignal(OAIGenerateUploadUriResponse summary);
    void labsGetSignal(OAILab summary);
    void labsImportVirtualMachineSignal();
    void labsListByResourceGroupSignal(OAILabList summary);
    void labsListBySubscriptionSignal(OAILabList summary);
    void labsListVhdsSignal(OAILabVhdList summary);
    void labsUpdateSignal(OAILab summary);


    void labsClaimAnyVmSignalFull(OAIHttpRequestWorker *worker);
    void labsCreateEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void labsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILab summary);
    void labsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void labsExportResourceUsageSignalFull(OAIHttpRequestWorker *worker);
    void labsGenerateUploadUriSignalFull(OAIHttpRequestWorker *worker, OAIGenerateUploadUriResponse summary);
    void labsGetSignalFull(OAIHttpRequestWorker *worker, OAILab summary);
    void labsImportVirtualMachineSignalFull(OAIHttpRequestWorker *worker);
    void labsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAILabList summary);
    void labsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAILabList summary);
    void labsListVhdsSignalFull(OAIHttpRequestWorker *worker, OAILabVhdList summary);
    void labsUpdateSignalFull(OAIHttpRequestWorker *worker, OAILab summary);

    Q_DECL_DEPRECATED_X("Use labsClaimAnyVmSignalError() instead")
    void labsClaimAnyVmSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labsClaimAnyVmSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsCreateEnvironmentSignalError() instead")
    void labsCreateEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labsCreateEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsCreateOrUpdateSignalError() instead")
    void labsCreateOrUpdateSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsCreateOrUpdateSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsDeleteSignalError() instead")
    void labsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsExportResourceUsageSignalError() instead")
    void labsExportResourceUsageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labsExportResourceUsageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsGenerateUploadUriSignalError() instead")
    void labsGenerateUploadUriSignalE(OAIGenerateUploadUriResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsGenerateUploadUriSignalError(OAIGenerateUploadUriResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsGetSignalError() instead")
    void labsGetSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsGetSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsImportVirtualMachineSignalError() instead")
    void labsImportVirtualMachineSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labsImportVirtualMachineSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsListByResourceGroupSignalError() instead")
    void labsListByResourceGroupSignalE(OAILabList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsListByResourceGroupSignalError(OAILabList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsListBySubscriptionSignalError() instead")
    void labsListBySubscriptionSignalE(OAILabList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsListBySubscriptionSignalError(OAILabList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsListVhdsSignalError() instead")
    void labsListVhdsSignalE(OAILabVhdList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsListVhdsSignalError(OAILabVhdList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsUpdateSignalError() instead")
    void labsUpdateSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsUpdateSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use labsClaimAnyVmSignalErrorFull() instead")
    void labsClaimAnyVmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsClaimAnyVmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsCreateEnvironmentSignalErrorFull() instead")
    void labsCreateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsCreateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsCreateOrUpdateSignalErrorFull() instead")
    void labsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsDeleteSignalErrorFull() instead")
    void labsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsExportResourceUsageSignalErrorFull() instead")
    void labsExportResourceUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsExportResourceUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsGenerateUploadUriSignalErrorFull() instead")
    void labsGenerateUploadUriSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsGenerateUploadUriSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsGetSignalErrorFull() instead")
    void labsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsImportVirtualMachineSignalErrorFull() instead")
    void labsImportVirtualMachineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsImportVirtualMachineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsListByResourceGroupSignalErrorFull() instead")
    void labsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsListBySubscriptionSignalErrorFull() instead")
    void labsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsListVhdsSignalErrorFull() instead")
    void labsListVhdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsListVhdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsUpdateSignalErrorFull() instead")
    void labsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
