/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeVmProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeVmProperties::OAIComputeVmProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeVmProperties::OAIComputeVmProperties() {
    this->initializeModel();
}

OAIComputeVmProperties::~OAIComputeVmProperties() {}

void OAIComputeVmProperties::initializeModel() {

    m_data_disk_ids_isSet = false;
    m_data_disk_ids_isValid = false;

    m_data_disks_isSet = false;
    m_data_disks_isValid = false;

    m_network_interface_id_isSet = false;
    m_network_interface_id_isValid = false;

    m_os_disk_id_isSet = false;
    m_os_disk_id_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAIComputeVmProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputeVmProperties::fromJsonObject(QJsonObject json) {

    m_data_disk_ids_isValid = ::OpenAPI::fromJsonValue(m_data_disk_ids, json[QString("dataDiskIds")]);
    m_data_disk_ids_isSet = !json[QString("dataDiskIds")].isNull() && m_data_disk_ids_isValid;

    m_data_disks_isValid = ::OpenAPI::fromJsonValue(m_data_disks, json[QString("dataDisks")]);
    m_data_disks_isSet = !json[QString("dataDisks")].isNull() && m_data_disks_isValid;

    m_network_interface_id_isValid = ::OpenAPI::fromJsonValue(m_network_interface_id, json[QString("networkInterfaceId")]);
    m_network_interface_id_isSet = !json[QString("networkInterfaceId")].isNull() && m_network_interface_id_isValid;

    m_os_disk_id_isValid = ::OpenAPI::fromJsonValue(m_os_disk_id, json[QString("osDiskId")]);
    m_os_disk_id_isSet = !json[QString("osDiskId")].isNull() && m_os_disk_id_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAIComputeVmProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputeVmProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_disk_ids.size() > 0) {
        obj.insert(QString("dataDiskIds"), ::OpenAPI::toJsonValue(m_data_disk_ids));
    }
    if (m_data_disks.size() > 0) {
        obj.insert(QString("dataDisks"), ::OpenAPI::toJsonValue(m_data_disks));
    }
    if (m_network_interface_id_isSet) {
        obj.insert(QString("networkInterfaceId"), ::OpenAPI::toJsonValue(m_network_interface_id));
    }
    if (m_os_disk_id_isSet) {
        obj.insert(QString("osDiskId"), ::OpenAPI::toJsonValue(m_os_disk_id));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

QList<QString> OAIComputeVmProperties::getDataDiskIds() const {
    return m_data_disk_ids;
}
void OAIComputeVmProperties::setDataDiskIds(const QList<QString> &data_disk_ids) {
    m_data_disk_ids = data_disk_ids;
    m_data_disk_ids_isSet = true;
}

bool OAIComputeVmProperties::is_data_disk_ids_Set() const{
    return m_data_disk_ids_isSet;
}

bool OAIComputeVmProperties::is_data_disk_ids_Valid() const{
    return m_data_disk_ids_isValid;
}

QList<OAIComputeDataDisk> OAIComputeVmProperties::getDataDisks() const {
    return m_data_disks;
}
void OAIComputeVmProperties::setDataDisks(const QList<OAIComputeDataDisk> &data_disks) {
    m_data_disks = data_disks;
    m_data_disks_isSet = true;
}

bool OAIComputeVmProperties::is_data_disks_Set() const{
    return m_data_disks_isSet;
}

bool OAIComputeVmProperties::is_data_disks_Valid() const{
    return m_data_disks_isValid;
}

QString OAIComputeVmProperties::getNetworkInterfaceId() const {
    return m_network_interface_id;
}
void OAIComputeVmProperties::setNetworkInterfaceId(const QString &network_interface_id) {
    m_network_interface_id = network_interface_id;
    m_network_interface_id_isSet = true;
}

bool OAIComputeVmProperties::is_network_interface_id_Set() const{
    return m_network_interface_id_isSet;
}

bool OAIComputeVmProperties::is_network_interface_id_Valid() const{
    return m_network_interface_id_isValid;
}

QString OAIComputeVmProperties::getOsDiskId() const {
    return m_os_disk_id;
}
void OAIComputeVmProperties::setOsDiskId(const QString &os_disk_id) {
    m_os_disk_id = os_disk_id;
    m_os_disk_id_isSet = true;
}

bool OAIComputeVmProperties::is_os_disk_id_Set() const{
    return m_os_disk_id_isSet;
}

bool OAIComputeVmProperties::is_os_disk_id_Valid() const{
    return m_os_disk_id_isValid;
}

QString OAIComputeVmProperties::getOsType() const {
    return m_os_type;
}
void OAIComputeVmProperties::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIComputeVmProperties::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIComputeVmProperties::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QList<OAIComputeVmInstanceViewStatus> OAIComputeVmProperties::getStatuses() const {
    return m_statuses;
}
void OAIComputeVmProperties::setStatuses(const QList<OAIComputeVmInstanceViewStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIComputeVmProperties::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIComputeVmProperties::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QString OAIComputeVmProperties::getVmSize() const {
    return m_vm_size;
}
void OAIComputeVmProperties::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIComputeVmProperties::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIComputeVmProperties::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAIComputeVmProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_disk_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputeVmProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
