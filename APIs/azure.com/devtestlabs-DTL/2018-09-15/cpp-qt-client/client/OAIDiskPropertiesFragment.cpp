/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskPropertiesFragment::OAIDiskPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskPropertiesFragment::OAIDiskPropertiesFragment() {
    this->initializeModel();
}

OAIDiskPropertiesFragment::~OAIDiskPropertiesFragment() {}

void OAIDiskPropertiesFragment::initializeModel() {

    m_disk_blob_name_isSet = false;
    m_disk_blob_name_isValid = false;

    m_disk_size_gi_b_isSet = false;
    m_disk_size_gi_b_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_disk_uri_isSet = false;
    m_disk_uri_isValid = false;

    m_host_caching_isSet = false;
    m_host_caching_isValid = false;

    m_leased_by_lab_vm_id_isSet = false;
    m_leased_by_lab_vm_id_isValid = false;

    m_managed_disk_id_isSet = false;
    m_managed_disk_id_isValid = false;
}

void OAIDiskPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_disk_blob_name_isValid = ::OpenAPI::fromJsonValue(m_disk_blob_name, json[QString("diskBlobName")]);
    m_disk_blob_name_isSet = !json[QString("diskBlobName")].isNull() && m_disk_blob_name_isValid;

    m_disk_size_gi_b_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gi_b, json[QString("diskSizeGiB")]);
    m_disk_size_gi_b_isSet = !json[QString("diskSizeGiB")].isNull() && m_disk_size_gi_b_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_disk_uri_isValid = ::OpenAPI::fromJsonValue(m_disk_uri, json[QString("diskUri")]);
    m_disk_uri_isSet = !json[QString("diskUri")].isNull() && m_disk_uri_isValid;

    m_host_caching_isValid = ::OpenAPI::fromJsonValue(m_host_caching, json[QString("hostCaching")]);
    m_host_caching_isSet = !json[QString("hostCaching")].isNull() && m_host_caching_isValid;

    m_leased_by_lab_vm_id_isValid = ::OpenAPI::fromJsonValue(m_leased_by_lab_vm_id, json[QString("leasedByLabVmId")]);
    m_leased_by_lab_vm_id_isSet = !json[QString("leasedByLabVmId")].isNull() && m_leased_by_lab_vm_id_isValid;

    m_managed_disk_id_isValid = ::OpenAPI::fromJsonValue(m_managed_disk_id, json[QString("managedDiskId")]);
    m_managed_disk_id_isSet = !json[QString("managedDiskId")].isNull() && m_managed_disk_id_isValid;
}

QString OAIDiskPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_blob_name_isSet) {
        obj.insert(QString("diskBlobName"), ::OpenAPI::toJsonValue(m_disk_blob_name));
    }
    if (m_disk_size_gi_b_isSet) {
        obj.insert(QString("diskSizeGiB"), ::OpenAPI::toJsonValue(m_disk_size_gi_b));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_disk_uri_isSet) {
        obj.insert(QString("diskUri"), ::OpenAPI::toJsonValue(m_disk_uri));
    }
    if (m_host_caching_isSet) {
        obj.insert(QString("hostCaching"), ::OpenAPI::toJsonValue(m_host_caching));
    }
    if (m_leased_by_lab_vm_id_isSet) {
        obj.insert(QString("leasedByLabVmId"), ::OpenAPI::toJsonValue(m_leased_by_lab_vm_id));
    }
    if (m_managed_disk_id_isSet) {
        obj.insert(QString("managedDiskId"), ::OpenAPI::toJsonValue(m_managed_disk_id));
    }
    return obj;
}

QString OAIDiskPropertiesFragment::getDiskBlobName() const {
    return m_disk_blob_name;
}
void OAIDiskPropertiesFragment::setDiskBlobName(const QString &disk_blob_name) {
    m_disk_blob_name = disk_blob_name;
    m_disk_blob_name_isSet = true;
}

bool OAIDiskPropertiesFragment::is_disk_blob_name_Set() const{
    return m_disk_blob_name_isSet;
}

bool OAIDiskPropertiesFragment::is_disk_blob_name_Valid() const{
    return m_disk_blob_name_isValid;
}

qint32 OAIDiskPropertiesFragment::getDiskSizeGiB() const {
    return m_disk_size_gi_b;
}
void OAIDiskPropertiesFragment::setDiskSizeGiB(const qint32 &disk_size_gi_b) {
    m_disk_size_gi_b = disk_size_gi_b;
    m_disk_size_gi_b_isSet = true;
}

bool OAIDiskPropertiesFragment::is_disk_size_gi_b_Set() const{
    return m_disk_size_gi_b_isSet;
}

bool OAIDiskPropertiesFragment::is_disk_size_gi_b_Valid() const{
    return m_disk_size_gi_b_isValid;
}

QString OAIDiskPropertiesFragment::getDiskType() const {
    return m_disk_type;
}
void OAIDiskPropertiesFragment::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIDiskPropertiesFragment::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIDiskPropertiesFragment::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIDiskPropertiesFragment::getDiskUri() const {
    return m_disk_uri;
}
void OAIDiskPropertiesFragment::setDiskUri(const QString &disk_uri) {
    m_disk_uri = disk_uri;
    m_disk_uri_isSet = true;
}

bool OAIDiskPropertiesFragment::is_disk_uri_Set() const{
    return m_disk_uri_isSet;
}

bool OAIDiskPropertiesFragment::is_disk_uri_Valid() const{
    return m_disk_uri_isValid;
}

QString OAIDiskPropertiesFragment::getHostCaching() const {
    return m_host_caching;
}
void OAIDiskPropertiesFragment::setHostCaching(const QString &host_caching) {
    m_host_caching = host_caching;
    m_host_caching_isSet = true;
}

bool OAIDiskPropertiesFragment::is_host_caching_Set() const{
    return m_host_caching_isSet;
}

bool OAIDiskPropertiesFragment::is_host_caching_Valid() const{
    return m_host_caching_isValid;
}

QString OAIDiskPropertiesFragment::getLeasedByLabVmId() const {
    return m_leased_by_lab_vm_id;
}
void OAIDiskPropertiesFragment::setLeasedByLabVmId(const QString &leased_by_lab_vm_id) {
    m_leased_by_lab_vm_id = leased_by_lab_vm_id;
    m_leased_by_lab_vm_id_isSet = true;
}

bool OAIDiskPropertiesFragment::is_leased_by_lab_vm_id_Set() const{
    return m_leased_by_lab_vm_id_isSet;
}

bool OAIDiskPropertiesFragment::is_leased_by_lab_vm_id_Valid() const{
    return m_leased_by_lab_vm_id_isValid;
}

QString OAIDiskPropertiesFragment::getManagedDiskId() const {
    return m_managed_disk_id;
}
void OAIDiskPropertiesFragment::setManagedDiskId(const QString &managed_disk_id) {
    m_managed_disk_id = managed_disk_id;
    m_managed_disk_id_isSet = true;
}

bool OAIDiskPropertiesFragment::is_managed_disk_id_Set() const{
    return m_managed_disk_id_isSet;
}

bool OAIDiskPropertiesFragment::is_managed_disk_id_Valid() const{
    return m_managed_disk_id_isValid;
}

bool OAIDiskPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_blob_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_caching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leased_by_lab_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
