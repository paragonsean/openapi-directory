/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabProperties::OAILabProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabProperties::OAILabProperties() {
    this->initializeModel();
}

OAILabProperties::~OAILabProperties() {}

void OAILabProperties::initializeModel() {

    m_announcement_isSet = false;
    m_announcement_isValid = false;

    m_artifacts_storage_account_isSet = false;
    m_artifacts_storage_account_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_default_premium_storage_account_isSet = false;
    m_default_premium_storage_account_isValid = false;

    m_default_storage_account_isSet = false;
    m_default_storage_account_isValid = false;

    m_environment_permission_isSet = false;
    m_environment_permission_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_lab_storage_type_isSet = false;
    m_lab_storage_type_isValid = false;

    m_load_balancer_id_isSet = false;
    m_load_balancer_id_isValid = false;

    m_mandatory_artifacts_resource_ids_linux_isSet = false;
    m_mandatory_artifacts_resource_ids_linux_isValid = false;

    m_mandatory_artifacts_resource_ids_windows_isSet = false;
    m_mandatory_artifacts_resource_ids_windows_isValid = false;

    m_network_security_group_id_isSet = false;
    m_network_security_group_id_isValid = false;

    m_premium_data_disk_storage_account_isSet = false;
    m_premium_data_disk_storage_account_isValid = false;

    m_premium_data_disks_isSet = false;
    m_premium_data_disks_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_id_isSet = false;
    m_public_ip_id_isValid = false;

    m_support_isSet = false;
    m_support_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;

    m_vault_name_isSet = false;
    m_vault_name_isValid = false;

    m_vm_creation_resource_group_isSet = false;
    m_vm_creation_resource_group_isValid = false;
}

void OAILabProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabProperties::fromJsonObject(QJsonObject json) {

    m_announcement_isValid = ::OpenAPI::fromJsonValue(m_announcement, json[QString("announcement")]);
    m_announcement_isSet = !json[QString("announcement")].isNull() && m_announcement_isValid;

    m_artifacts_storage_account_isValid = ::OpenAPI::fromJsonValue(m_artifacts_storage_account, json[QString("artifactsStorageAccount")]);
    m_artifacts_storage_account_isSet = !json[QString("artifactsStorageAccount")].isNull() && m_artifacts_storage_account_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_default_premium_storage_account_isValid = ::OpenAPI::fromJsonValue(m_default_premium_storage_account, json[QString("defaultPremiumStorageAccount")]);
    m_default_premium_storage_account_isSet = !json[QString("defaultPremiumStorageAccount")].isNull() && m_default_premium_storage_account_isValid;

    m_default_storage_account_isValid = ::OpenAPI::fromJsonValue(m_default_storage_account, json[QString("defaultStorageAccount")]);
    m_default_storage_account_isSet = !json[QString("defaultStorageAccount")].isNull() && m_default_storage_account_isValid;

    m_environment_permission_isValid = ::OpenAPI::fromJsonValue(m_environment_permission, json[QString("environmentPermission")]);
    m_environment_permission_isSet = !json[QString("environmentPermission")].isNull() && m_environment_permission_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("extendedProperties")]);
    m_extended_properties_isSet = !json[QString("extendedProperties")].isNull() && m_extended_properties_isValid;

    m_lab_storage_type_isValid = ::OpenAPI::fromJsonValue(m_lab_storage_type, json[QString("labStorageType")]);
    m_lab_storage_type_isSet = !json[QString("labStorageType")].isNull() && m_lab_storage_type_isValid;

    m_load_balancer_id_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_id, json[QString("loadBalancerId")]);
    m_load_balancer_id_isSet = !json[QString("loadBalancerId")].isNull() && m_load_balancer_id_isValid;

    m_mandatory_artifacts_resource_ids_linux_isValid = ::OpenAPI::fromJsonValue(m_mandatory_artifacts_resource_ids_linux, json[QString("mandatoryArtifactsResourceIdsLinux")]);
    m_mandatory_artifacts_resource_ids_linux_isSet = !json[QString("mandatoryArtifactsResourceIdsLinux")].isNull() && m_mandatory_artifacts_resource_ids_linux_isValid;

    m_mandatory_artifacts_resource_ids_windows_isValid = ::OpenAPI::fromJsonValue(m_mandatory_artifacts_resource_ids_windows, json[QString("mandatoryArtifactsResourceIdsWindows")]);
    m_mandatory_artifacts_resource_ids_windows_isSet = !json[QString("mandatoryArtifactsResourceIdsWindows")].isNull() && m_mandatory_artifacts_resource_ids_windows_isValid;

    m_network_security_group_id_isValid = ::OpenAPI::fromJsonValue(m_network_security_group_id, json[QString("networkSecurityGroupId")]);
    m_network_security_group_id_isSet = !json[QString("networkSecurityGroupId")].isNull() && m_network_security_group_id_isValid;

    m_premium_data_disk_storage_account_isValid = ::OpenAPI::fromJsonValue(m_premium_data_disk_storage_account, json[QString("premiumDataDiskStorageAccount")]);
    m_premium_data_disk_storage_account_isSet = !json[QString("premiumDataDiskStorageAccount")].isNull() && m_premium_data_disk_storage_account_isValid;

    m_premium_data_disks_isValid = ::OpenAPI::fromJsonValue(m_premium_data_disks, json[QString("premiumDataDisks")]);
    m_premium_data_disks_isSet = !json[QString("premiumDataDisks")].isNull() && m_premium_data_disks_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_id_isValid = ::OpenAPI::fromJsonValue(m_public_ip_id, json[QString("publicIpId")]);
    m_public_ip_id_isSet = !json[QString("publicIpId")].isNull() && m_public_ip_id_isValid;

    m_support_isValid = ::OpenAPI::fromJsonValue(m_support, json[QString("support")]);
    m_support_isSet = !json[QString("support")].isNull() && m_support_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;

    m_vault_name_isValid = ::OpenAPI::fromJsonValue(m_vault_name, json[QString("vaultName")]);
    m_vault_name_isSet = !json[QString("vaultName")].isNull() && m_vault_name_isValid;

    m_vm_creation_resource_group_isValid = ::OpenAPI::fromJsonValue(m_vm_creation_resource_group, json[QString("vmCreationResourceGroup")]);
    m_vm_creation_resource_group_isSet = !json[QString("vmCreationResourceGroup")].isNull() && m_vm_creation_resource_group_isValid;
}

QString OAILabProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_announcement.isSet()) {
        obj.insert(QString("announcement"), ::OpenAPI::toJsonValue(m_announcement));
    }
    if (m_artifacts_storage_account_isSet) {
        obj.insert(QString("artifactsStorageAccount"), ::OpenAPI::toJsonValue(m_artifacts_storage_account));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_default_premium_storage_account_isSet) {
        obj.insert(QString("defaultPremiumStorageAccount"), ::OpenAPI::toJsonValue(m_default_premium_storage_account));
    }
    if (m_default_storage_account_isSet) {
        obj.insert(QString("defaultStorageAccount"), ::OpenAPI::toJsonValue(m_default_storage_account));
    }
    if (m_environment_permission_isSet) {
        obj.insert(QString("environmentPermission"), ::OpenAPI::toJsonValue(m_environment_permission));
    }
    if (m_extended_properties.size() > 0) {
        obj.insert(QString("extendedProperties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_lab_storage_type_isSet) {
        obj.insert(QString("labStorageType"), ::OpenAPI::toJsonValue(m_lab_storage_type));
    }
    if (m_load_balancer_id_isSet) {
        obj.insert(QString("loadBalancerId"), ::OpenAPI::toJsonValue(m_load_balancer_id));
    }
    if (m_mandatory_artifacts_resource_ids_linux.size() > 0) {
        obj.insert(QString("mandatoryArtifactsResourceIdsLinux"), ::OpenAPI::toJsonValue(m_mandatory_artifacts_resource_ids_linux));
    }
    if (m_mandatory_artifacts_resource_ids_windows.size() > 0) {
        obj.insert(QString("mandatoryArtifactsResourceIdsWindows"), ::OpenAPI::toJsonValue(m_mandatory_artifacts_resource_ids_windows));
    }
    if (m_network_security_group_id_isSet) {
        obj.insert(QString("networkSecurityGroupId"), ::OpenAPI::toJsonValue(m_network_security_group_id));
    }
    if (m_premium_data_disk_storage_account_isSet) {
        obj.insert(QString("premiumDataDiskStorageAccount"), ::OpenAPI::toJsonValue(m_premium_data_disk_storage_account));
    }
    if (m_premium_data_disks_isSet) {
        obj.insert(QString("premiumDataDisks"), ::OpenAPI::toJsonValue(m_premium_data_disks));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_id_isSet) {
        obj.insert(QString("publicIpId"), ::OpenAPI::toJsonValue(m_public_ip_id));
    }
    if (m_support.isSet()) {
        obj.insert(QString("support"), ::OpenAPI::toJsonValue(m_support));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    if (m_vault_name_isSet) {
        obj.insert(QString("vaultName"), ::OpenAPI::toJsonValue(m_vault_name));
    }
    if (m_vm_creation_resource_group_isSet) {
        obj.insert(QString("vmCreationResourceGroup"), ::OpenAPI::toJsonValue(m_vm_creation_resource_group));
    }
    return obj;
}

OAILabAnnouncementProperties OAILabProperties::getAnnouncement() const {
    return m_announcement;
}
void OAILabProperties::setAnnouncement(const OAILabAnnouncementProperties &announcement) {
    m_announcement = announcement;
    m_announcement_isSet = true;
}

bool OAILabProperties::is_announcement_Set() const{
    return m_announcement_isSet;
}

bool OAILabProperties::is_announcement_Valid() const{
    return m_announcement_isValid;
}

QString OAILabProperties::getArtifactsStorageAccount() const {
    return m_artifacts_storage_account;
}
void OAILabProperties::setArtifactsStorageAccount(const QString &artifacts_storage_account) {
    m_artifacts_storage_account = artifacts_storage_account;
    m_artifacts_storage_account_isSet = true;
}

bool OAILabProperties::is_artifacts_storage_account_Set() const{
    return m_artifacts_storage_account_isSet;
}

bool OAILabProperties::is_artifacts_storage_account_Valid() const{
    return m_artifacts_storage_account_isValid;
}

QDateTime OAILabProperties::getCreatedDate() const {
    return m_created_date;
}
void OAILabProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAILabProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAILabProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAILabProperties::getDefaultPremiumStorageAccount() const {
    return m_default_premium_storage_account;
}
void OAILabProperties::setDefaultPremiumStorageAccount(const QString &default_premium_storage_account) {
    m_default_premium_storage_account = default_premium_storage_account;
    m_default_premium_storage_account_isSet = true;
}

bool OAILabProperties::is_default_premium_storage_account_Set() const{
    return m_default_premium_storage_account_isSet;
}

bool OAILabProperties::is_default_premium_storage_account_Valid() const{
    return m_default_premium_storage_account_isValid;
}

QString OAILabProperties::getDefaultStorageAccount() const {
    return m_default_storage_account;
}
void OAILabProperties::setDefaultStorageAccount(const QString &default_storage_account) {
    m_default_storage_account = default_storage_account;
    m_default_storage_account_isSet = true;
}

bool OAILabProperties::is_default_storage_account_Set() const{
    return m_default_storage_account_isSet;
}

bool OAILabProperties::is_default_storage_account_Valid() const{
    return m_default_storage_account_isValid;
}

QString OAILabProperties::getEnvironmentPermission() const {
    return m_environment_permission;
}
void OAILabProperties::setEnvironmentPermission(const QString &environment_permission) {
    m_environment_permission = environment_permission;
    m_environment_permission_isSet = true;
}

bool OAILabProperties::is_environment_permission_Set() const{
    return m_environment_permission_isSet;
}

bool OAILabProperties::is_environment_permission_Valid() const{
    return m_environment_permission_isValid;
}

QMap<QString, QString> OAILabProperties::getExtendedProperties() const {
    return m_extended_properties;
}
void OAILabProperties::setExtendedProperties(const QMap<QString, QString> &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAILabProperties::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAILabProperties::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

QString OAILabProperties::getLabStorageType() const {
    return m_lab_storage_type;
}
void OAILabProperties::setLabStorageType(const QString &lab_storage_type) {
    m_lab_storage_type = lab_storage_type;
    m_lab_storage_type_isSet = true;
}

bool OAILabProperties::is_lab_storage_type_Set() const{
    return m_lab_storage_type_isSet;
}

bool OAILabProperties::is_lab_storage_type_Valid() const{
    return m_lab_storage_type_isValid;
}

QString OAILabProperties::getLoadBalancerId() const {
    return m_load_balancer_id;
}
void OAILabProperties::setLoadBalancerId(const QString &load_balancer_id) {
    m_load_balancer_id = load_balancer_id;
    m_load_balancer_id_isSet = true;
}

bool OAILabProperties::is_load_balancer_id_Set() const{
    return m_load_balancer_id_isSet;
}

bool OAILabProperties::is_load_balancer_id_Valid() const{
    return m_load_balancer_id_isValid;
}

QList<QString> OAILabProperties::getMandatoryArtifactsResourceIdsLinux() const {
    return m_mandatory_artifacts_resource_ids_linux;
}
void OAILabProperties::setMandatoryArtifactsResourceIdsLinux(const QList<QString> &mandatory_artifacts_resource_ids_linux) {
    m_mandatory_artifacts_resource_ids_linux = mandatory_artifacts_resource_ids_linux;
    m_mandatory_artifacts_resource_ids_linux_isSet = true;
}

bool OAILabProperties::is_mandatory_artifacts_resource_ids_linux_Set() const{
    return m_mandatory_artifacts_resource_ids_linux_isSet;
}

bool OAILabProperties::is_mandatory_artifacts_resource_ids_linux_Valid() const{
    return m_mandatory_artifacts_resource_ids_linux_isValid;
}

QList<QString> OAILabProperties::getMandatoryArtifactsResourceIdsWindows() const {
    return m_mandatory_artifacts_resource_ids_windows;
}
void OAILabProperties::setMandatoryArtifactsResourceIdsWindows(const QList<QString> &mandatory_artifacts_resource_ids_windows) {
    m_mandatory_artifacts_resource_ids_windows = mandatory_artifacts_resource_ids_windows;
    m_mandatory_artifacts_resource_ids_windows_isSet = true;
}

bool OAILabProperties::is_mandatory_artifacts_resource_ids_windows_Set() const{
    return m_mandatory_artifacts_resource_ids_windows_isSet;
}

bool OAILabProperties::is_mandatory_artifacts_resource_ids_windows_Valid() const{
    return m_mandatory_artifacts_resource_ids_windows_isValid;
}

QString OAILabProperties::getNetworkSecurityGroupId() const {
    return m_network_security_group_id;
}
void OAILabProperties::setNetworkSecurityGroupId(const QString &network_security_group_id) {
    m_network_security_group_id = network_security_group_id;
    m_network_security_group_id_isSet = true;
}

bool OAILabProperties::is_network_security_group_id_Set() const{
    return m_network_security_group_id_isSet;
}

bool OAILabProperties::is_network_security_group_id_Valid() const{
    return m_network_security_group_id_isValid;
}

QString OAILabProperties::getPremiumDataDiskStorageAccount() const {
    return m_premium_data_disk_storage_account;
}
void OAILabProperties::setPremiumDataDiskStorageAccount(const QString &premium_data_disk_storage_account) {
    m_premium_data_disk_storage_account = premium_data_disk_storage_account;
    m_premium_data_disk_storage_account_isSet = true;
}

bool OAILabProperties::is_premium_data_disk_storage_account_Set() const{
    return m_premium_data_disk_storage_account_isSet;
}

bool OAILabProperties::is_premium_data_disk_storage_account_Valid() const{
    return m_premium_data_disk_storage_account_isValid;
}

QString OAILabProperties::getPremiumDataDisks() const {
    return m_premium_data_disks;
}
void OAILabProperties::setPremiumDataDisks(const QString &premium_data_disks) {
    m_premium_data_disks = premium_data_disks;
    m_premium_data_disks_isSet = true;
}

bool OAILabProperties::is_premium_data_disks_Set() const{
    return m_premium_data_disks_isSet;
}

bool OAILabProperties::is_premium_data_disks_Valid() const{
    return m_premium_data_disks_isValid;
}

QString OAILabProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILabProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILabProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILabProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAILabProperties::getPublicIpId() const {
    return m_public_ip_id;
}
void OAILabProperties::setPublicIpId(const QString &public_ip_id) {
    m_public_ip_id = public_ip_id;
    m_public_ip_id_isSet = true;
}

bool OAILabProperties::is_public_ip_id_Set() const{
    return m_public_ip_id_isSet;
}

bool OAILabProperties::is_public_ip_id_Valid() const{
    return m_public_ip_id_isValid;
}

OAILabSupportProperties OAILabProperties::getSupport() const {
    return m_support;
}
void OAILabProperties::setSupport(const OAILabSupportProperties &support) {
    m_support = support;
    m_support_isSet = true;
}

bool OAILabProperties::is_support_Set() const{
    return m_support_isSet;
}

bool OAILabProperties::is_support_Valid() const{
    return m_support_isValid;
}

QString OAILabProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAILabProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAILabProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAILabProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

QString OAILabProperties::getVaultName() const {
    return m_vault_name;
}
void OAILabProperties::setVaultName(const QString &vault_name) {
    m_vault_name = vault_name;
    m_vault_name_isSet = true;
}

bool OAILabProperties::is_vault_name_Set() const{
    return m_vault_name_isSet;
}

bool OAILabProperties::is_vault_name_Valid() const{
    return m_vault_name_isValid;
}

QString OAILabProperties::getVmCreationResourceGroup() const {
    return m_vm_creation_resource_group;
}
void OAILabProperties::setVmCreationResourceGroup(const QString &vm_creation_resource_group) {
    m_vm_creation_resource_group = vm_creation_resource_group;
    m_vm_creation_resource_group_isSet = true;
}

bool OAILabProperties::is_vm_creation_resource_group_Set() const{
    return m_vm_creation_resource_group_isSet;
}

bool OAILabProperties::is_vm_creation_resource_group_Valid() const{
    return m_vm_creation_resource_group_isValid;
}

bool OAILabProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_announcement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_premium_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_artifacts_resource_ids_linux.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_artifacts_resource_ids_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_security_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_data_disk_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_data_disks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_creation_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
