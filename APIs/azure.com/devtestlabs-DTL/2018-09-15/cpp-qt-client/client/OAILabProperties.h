/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILabProperties.h
 *
 * Properties of a lab.
 */

#ifndef OAILabProperties_H
#define OAILabProperties_H

#include <QJsonObject>

#include "OAILabAnnouncementProperties.h"
#include "OAILabSupportProperties.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILabAnnouncementProperties;
class OAILabSupportProperties;

class OAILabProperties : public OAIObject {
public:
    OAILabProperties();
    OAILabProperties(QString json);
    ~OAILabProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILabAnnouncementProperties getAnnouncement() const;
    void setAnnouncement(const OAILabAnnouncementProperties &announcement);
    bool is_announcement_Set() const;
    bool is_announcement_Valid() const;

    QString getArtifactsStorageAccount() const;
    void setArtifactsStorageAccount(const QString &artifacts_storage_account);
    bool is_artifacts_storage_account_Set() const;
    bool is_artifacts_storage_account_Valid() const;

    QDateTime getCreatedDate() const;
    void setCreatedDate(const QDateTime &created_date);
    bool is_created_date_Set() const;
    bool is_created_date_Valid() const;

    QString getDefaultPremiumStorageAccount() const;
    void setDefaultPremiumStorageAccount(const QString &default_premium_storage_account);
    bool is_default_premium_storage_account_Set() const;
    bool is_default_premium_storage_account_Valid() const;

    QString getDefaultStorageAccount() const;
    void setDefaultStorageAccount(const QString &default_storage_account);
    bool is_default_storage_account_Set() const;
    bool is_default_storage_account_Valid() const;

    QString getEnvironmentPermission() const;
    void setEnvironmentPermission(const QString &environment_permission);
    bool is_environment_permission_Set() const;
    bool is_environment_permission_Valid() const;

    QMap<QString, QString> getExtendedProperties() const;
    void setExtendedProperties(const QMap<QString, QString> &extended_properties);
    bool is_extended_properties_Set() const;
    bool is_extended_properties_Valid() const;

    QString getLabStorageType() const;
    void setLabStorageType(const QString &lab_storage_type);
    bool is_lab_storage_type_Set() const;
    bool is_lab_storage_type_Valid() const;

    QString getLoadBalancerId() const;
    void setLoadBalancerId(const QString &load_balancer_id);
    bool is_load_balancer_id_Set() const;
    bool is_load_balancer_id_Valid() const;

    QList<QString> getMandatoryArtifactsResourceIdsLinux() const;
    void setMandatoryArtifactsResourceIdsLinux(const QList<QString> &mandatory_artifacts_resource_ids_linux);
    bool is_mandatory_artifacts_resource_ids_linux_Set() const;
    bool is_mandatory_artifacts_resource_ids_linux_Valid() const;

    QList<QString> getMandatoryArtifactsResourceIdsWindows() const;
    void setMandatoryArtifactsResourceIdsWindows(const QList<QString> &mandatory_artifacts_resource_ids_windows);
    bool is_mandatory_artifacts_resource_ids_windows_Set() const;
    bool is_mandatory_artifacts_resource_ids_windows_Valid() const;

    QString getNetworkSecurityGroupId() const;
    void setNetworkSecurityGroupId(const QString &network_security_group_id);
    bool is_network_security_group_id_Set() const;
    bool is_network_security_group_id_Valid() const;

    QString getPremiumDataDiskStorageAccount() const;
    void setPremiumDataDiskStorageAccount(const QString &premium_data_disk_storage_account);
    bool is_premium_data_disk_storage_account_Set() const;
    bool is_premium_data_disk_storage_account_Valid() const;

    QString getPremiumDataDisks() const;
    void setPremiumDataDisks(const QString &premium_data_disks);
    bool is_premium_data_disks_Set() const;
    bool is_premium_data_disks_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getPublicIpId() const;
    void setPublicIpId(const QString &public_ip_id);
    bool is_public_ip_id_Set() const;
    bool is_public_ip_id_Valid() const;

    OAILabSupportProperties getSupport() const;
    void setSupport(const OAILabSupportProperties &support);
    bool is_support_Set() const;
    bool is_support_Valid() const;

    QString getUniqueIdentifier() const;
    void setUniqueIdentifier(const QString &unique_identifier);
    bool is_unique_identifier_Set() const;
    bool is_unique_identifier_Valid() const;

    QString getVaultName() const;
    void setVaultName(const QString &vault_name);
    bool is_vault_name_Set() const;
    bool is_vault_name_Valid() const;

    QString getVmCreationResourceGroup() const;
    void setVmCreationResourceGroup(const QString &vm_creation_resource_group);
    bool is_vm_creation_resource_group_Set() const;
    bool is_vm_creation_resource_group_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILabAnnouncementProperties m_announcement;
    bool m_announcement_isSet;
    bool m_announcement_isValid;

    QString m_artifacts_storage_account;
    bool m_artifacts_storage_account_isSet;
    bool m_artifacts_storage_account_isValid;

    QDateTime m_created_date;
    bool m_created_date_isSet;
    bool m_created_date_isValid;

    QString m_default_premium_storage_account;
    bool m_default_premium_storage_account_isSet;
    bool m_default_premium_storage_account_isValid;

    QString m_default_storage_account;
    bool m_default_storage_account_isSet;
    bool m_default_storage_account_isValid;

    QString m_environment_permission;
    bool m_environment_permission_isSet;
    bool m_environment_permission_isValid;

    QMap<QString, QString> m_extended_properties;
    bool m_extended_properties_isSet;
    bool m_extended_properties_isValid;

    QString m_lab_storage_type;
    bool m_lab_storage_type_isSet;
    bool m_lab_storage_type_isValid;

    QString m_load_balancer_id;
    bool m_load_balancer_id_isSet;
    bool m_load_balancer_id_isValid;

    QList<QString> m_mandatory_artifacts_resource_ids_linux;
    bool m_mandatory_artifacts_resource_ids_linux_isSet;
    bool m_mandatory_artifacts_resource_ids_linux_isValid;

    QList<QString> m_mandatory_artifacts_resource_ids_windows;
    bool m_mandatory_artifacts_resource_ids_windows_isSet;
    bool m_mandatory_artifacts_resource_ids_windows_isValid;

    QString m_network_security_group_id;
    bool m_network_security_group_id_isSet;
    bool m_network_security_group_id_isValid;

    QString m_premium_data_disk_storage_account;
    bool m_premium_data_disk_storage_account_isSet;
    bool m_premium_data_disk_storage_account_isValid;

    QString m_premium_data_disks;
    bool m_premium_data_disks_isSet;
    bool m_premium_data_disks_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_public_ip_id;
    bool m_public_ip_id_isSet;
    bool m_public_ip_id_isValid;

    OAILabSupportProperties m_support;
    bool m_support_isSet;
    bool m_support_isValid;

    QString m_unique_identifier;
    bool m_unique_identifier_isSet;
    bool m_unique_identifier_isValid;

    QString m_vault_name;
    bool m_vault_name_isSet;
    bool m_vault_name_isValid;

    QString m_vm_creation_resource_group;
    bool m_vm_creation_resource_group_isSet;
    bool m_vm_creation_resource_group_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILabProperties)

#endif // OAILabProperties_H
