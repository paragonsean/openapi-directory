/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArtifactSourcesApi_H
#define OAI_OAIArtifactSourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtifactSource.h"
#include "OAIArtifactSourceFragment.h"
#include "OAIArtifactSourceList.h"
#include "OAICloudError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArtifactSourcesApi : public QObject {
    Q_OBJECT

public:
    OAIArtifactSourcesApi(const int timeOut = 0);
    ~OAIArtifactSourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  artifact_source OAIArtifactSource [required]
    */
    virtual void artifactSourcesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIArtifactSource &artifact_source);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void artifactSourcesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void artifactSourcesGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void artifactSourcesList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  artifact_source OAIArtifactSourceFragment [required]
    */
    virtual void artifactSourcesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIArtifactSourceFragment &artifact_source);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void artifactSourcesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void artifactSourcesDeleteCallback(OAIHttpRequestWorker *worker);
    void artifactSourcesGetCallback(OAIHttpRequestWorker *worker);
    void artifactSourcesListCallback(OAIHttpRequestWorker *worker);
    void artifactSourcesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void artifactSourcesCreateOrUpdateSignal(OAIArtifactSource summary);
    void artifactSourcesDeleteSignal();
    void artifactSourcesGetSignal(OAIArtifactSource summary);
    void artifactSourcesListSignal(OAIArtifactSourceList summary);
    void artifactSourcesUpdateSignal(OAIArtifactSource summary);


    void artifactSourcesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIArtifactSource summary);
    void artifactSourcesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void artifactSourcesGetSignalFull(OAIHttpRequestWorker *worker, OAIArtifactSource summary);
    void artifactSourcesListSignalFull(OAIHttpRequestWorker *worker, OAIArtifactSourceList summary);
    void artifactSourcesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIArtifactSource summary);

    Q_DECL_DEPRECATED_X("Use artifactSourcesCreateOrUpdateSignalError() instead")
    void artifactSourcesCreateOrUpdateSignalE(OAIArtifactSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesCreateOrUpdateSignalError(OAIArtifactSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactSourcesDeleteSignalError() instead")
    void artifactSourcesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactSourcesGetSignalError() instead")
    void artifactSourcesGetSignalE(OAIArtifactSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesGetSignalError(OAIArtifactSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactSourcesListSignalError() instead")
    void artifactSourcesListSignalE(OAIArtifactSourceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesListSignalError(OAIArtifactSourceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactSourcesUpdateSignalError() instead")
    void artifactSourcesUpdateSignalE(OAIArtifactSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesUpdateSignalError(OAIArtifactSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use artifactSourcesCreateOrUpdateSignalErrorFull() instead")
    void artifactSourcesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactSourcesDeleteSignalErrorFull() instead")
    void artifactSourcesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactSourcesGetSignalErrorFull() instead")
    void artifactSourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactSourcesListSignalErrorFull() instead")
    void artifactSourcesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactSourcesUpdateSignalErrorFull() instead")
    void artifactSourcesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactSourcesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
