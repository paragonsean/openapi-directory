/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabCostProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabCostProperties::OAILabCostProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabCostProperties::OAILabCostProperties() {
    this->initializeModel();
}

OAILabCostProperties::~OAILabCostProperties() {}

void OAILabCostProperties::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_lab_cost_details_isSet = false;
    m_lab_cost_details_isValid = false;

    m_lab_cost_summary_isSet = false;
    m_lab_cost_summary_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_costs_isSet = false;
    m_resource_costs_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_target_cost_isSet = false;
    m_target_cost_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAILabCostProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabCostProperties::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_lab_cost_details_isValid = ::OpenAPI::fromJsonValue(m_lab_cost_details, json[QString("labCostDetails")]);
    m_lab_cost_details_isSet = !json[QString("labCostDetails")].isNull() && m_lab_cost_details_isValid;

    m_lab_cost_summary_isValid = ::OpenAPI::fromJsonValue(m_lab_cost_summary, json[QString("labCostSummary")]);
    m_lab_cost_summary_isSet = !json[QString("labCostSummary")].isNull() && m_lab_cost_summary_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_costs_isValid = ::OpenAPI::fromJsonValue(m_resource_costs, json[QString("resourceCosts")]);
    m_resource_costs_isSet = !json[QString("resourceCosts")].isNull() && m_resource_costs_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_target_cost_isValid = ::OpenAPI::fromJsonValue(m_target_cost, json[QString("targetCost")]);
    m_target_cost_isSet = !json[QString("targetCost")].isNull() && m_target_cost_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAILabCostProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabCostProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_lab_cost_details.size() > 0) {
        obj.insert(QString("labCostDetails"), ::OpenAPI::toJsonValue(m_lab_cost_details));
    }
    if (m_lab_cost_summary.isSet()) {
        obj.insert(QString("labCostSummary"), ::OpenAPI::toJsonValue(m_lab_cost_summary));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_costs.size() > 0) {
        obj.insert(QString("resourceCosts"), ::OpenAPI::toJsonValue(m_resource_costs));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_target_cost.isSet()) {
        obj.insert(QString("targetCost"), ::OpenAPI::toJsonValue(m_target_cost));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QDateTime OAILabCostProperties::getCreatedDate() const {
    return m_created_date;
}
void OAILabCostProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAILabCostProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAILabCostProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAILabCostProperties::getCurrencyCode() const {
    return m_currency_code;
}
void OAILabCostProperties::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAILabCostProperties::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAILabCostProperties::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QDateTime OAILabCostProperties::getEndDateTime() const {
    return m_end_date_time;
}
void OAILabCostProperties::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAILabCostProperties::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAILabCostProperties::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QList<OAILabCostDetailsProperties> OAILabCostProperties::getLabCostDetails() const {
    return m_lab_cost_details;
}
void OAILabCostProperties::setLabCostDetails(const QList<OAILabCostDetailsProperties> &lab_cost_details) {
    m_lab_cost_details = lab_cost_details;
    m_lab_cost_details_isSet = true;
}

bool OAILabCostProperties::is_lab_cost_details_Set() const{
    return m_lab_cost_details_isSet;
}

bool OAILabCostProperties::is_lab_cost_details_Valid() const{
    return m_lab_cost_details_isValid;
}

OAILabCostSummaryProperties OAILabCostProperties::getLabCostSummary() const {
    return m_lab_cost_summary;
}
void OAILabCostProperties::setLabCostSummary(const OAILabCostSummaryProperties &lab_cost_summary) {
    m_lab_cost_summary = lab_cost_summary;
    m_lab_cost_summary_isSet = true;
}

bool OAILabCostProperties::is_lab_cost_summary_Set() const{
    return m_lab_cost_summary_isSet;
}

bool OAILabCostProperties::is_lab_cost_summary_Valid() const{
    return m_lab_cost_summary_isValid;
}

QString OAILabCostProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILabCostProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILabCostProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILabCostProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAILabResourceCostProperties> OAILabCostProperties::getResourceCosts() const {
    return m_resource_costs;
}
void OAILabCostProperties::setResourceCosts(const QList<OAILabResourceCostProperties> &resource_costs) {
    m_resource_costs = resource_costs;
    m_resource_costs_isSet = true;
}

bool OAILabCostProperties::is_resource_costs_Set() const{
    return m_resource_costs_isSet;
}

bool OAILabCostProperties::is_resource_costs_Valid() const{
    return m_resource_costs_isValid;
}

QDateTime OAILabCostProperties::getStartDateTime() const {
    return m_start_date_time;
}
void OAILabCostProperties::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAILabCostProperties::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAILabCostProperties::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

OAITargetCostProperties OAILabCostProperties::getTargetCost() const {
    return m_target_cost;
}
void OAILabCostProperties::setTargetCost(const OAITargetCostProperties &target_cost) {
    m_target_cost = target_cost;
    m_target_cost_isSet = true;
}

bool OAILabCostProperties::is_target_cost_Set() const{
    return m_target_cost_isSet;
}

bool OAILabCostProperties::is_target_cost_Valid() const{
    return m_target_cost_isValid;
}

QString OAILabCostProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAILabCostProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAILabCostProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAILabCostProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAILabCostProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_cost_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_cost_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_costs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabCostProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
