/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactInstallProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactInstallProperties::OAIArtifactInstallProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactInstallProperties::OAIArtifactInstallProperties() {
    this->initializeModel();
}

OAIArtifactInstallProperties::~OAIArtifactInstallProperties() {}

void OAIArtifactInstallProperties::initializeModel() {

    m_artifact_id_isSet = false;
    m_artifact_id_isValid = false;

    m_artifact_title_isSet = false;
    m_artifact_title_isValid = false;

    m_deployment_status_message_isSet = false;
    m_deployment_status_message_isValid = false;

    m_install_time_isSet = false;
    m_install_time_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vm_extension_status_message_isSet = false;
    m_vm_extension_status_message_isValid = false;
}

void OAIArtifactInstallProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactInstallProperties::fromJsonObject(QJsonObject json) {

    m_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_artifact_id, json[QString("artifactId")]);
    m_artifact_id_isSet = !json[QString("artifactId")].isNull() && m_artifact_id_isValid;

    m_artifact_title_isValid = ::OpenAPI::fromJsonValue(m_artifact_title, json[QString("artifactTitle")]);
    m_artifact_title_isSet = !json[QString("artifactTitle")].isNull() && m_artifact_title_isValid;

    m_deployment_status_message_isValid = ::OpenAPI::fromJsonValue(m_deployment_status_message, json[QString("deploymentStatusMessage")]);
    m_deployment_status_message_isSet = !json[QString("deploymentStatusMessage")].isNull() && m_deployment_status_message_isValid;

    m_install_time_isValid = ::OpenAPI::fromJsonValue(m_install_time, json[QString("installTime")]);
    m_install_time_isSet = !json[QString("installTime")].isNull() && m_install_time_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vm_extension_status_message_isValid = ::OpenAPI::fromJsonValue(m_vm_extension_status_message, json[QString("vmExtensionStatusMessage")]);
    m_vm_extension_status_message_isSet = !json[QString("vmExtensionStatusMessage")].isNull() && m_vm_extension_status_message_isValid;
}

QString OAIArtifactInstallProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactInstallProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_id_isSet) {
        obj.insert(QString("artifactId"), ::OpenAPI::toJsonValue(m_artifact_id));
    }
    if (m_artifact_title_isSet) {
        obj.insert(QString("artifactTitle"), ::OpenAPI::toJsonValue(m_artifact_title));
    }
    if (m_deployment_status_message_isSet) {
        obj.insert(QString("deploymentStatusMessage"), ::OpenAPI::toJsonValue(m_deployment_status_message));
    }
    if (m_install_time_isSet) {
        obj.insert(QString("installTime"), ::OpenAPI::toJsonValue(m_install_time));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vm_extension_status_message_isSet) {
        obj.insert(QString("vmExtensionStatusMessage"), ::OpenAPI::toJsonValue(m_vm_extension_status_message));
    }
    return obj;
}

QString OAIArtifactInstallProperties::getArtifactId() const {
    return m_artifact_id;
}
void OAIArtifactInstallProperties::setArtifactId(const QString &artifact_id) {
    m_artifact_id = artifact_id;
    m_artifact_id_isSet = true;
}

bool OAIArtifactInstallProperties::is_artifact_id_Set() const{
    return m_artifact_id_isSet;
}

bool OAIArtifactInstallProperties::is_artifact_id_Valid() const{
    return m_artifact_id_isValid;
}

QString OAIArtifactInstallProperties::getArtifactTitle() const {
    return m_artifact_title;
}
void OAIArtifactInstallProperties::setArtifactTitle(const QString &artifact_title) {
    m_artifact_title = artifact_title;
    m_artifact_title_isSet = true;
}

bool OAIArtifactInstallProperties::is_artifact_title_Set() const{
    return m_artifact_title_isSet;
}

bool OAIArtifactInstallProperties::is_artifact_title_Valid() const{
    return m_artifact_title_isValid;
}

QString OAIArtifactInstallProperties::getDeploymentStatusMessage() const {
    return m_deployment_status_message;
}
void OAIArtifactInstallProperties::setDeploymentStatusMessage(const QString &deployment_status_message) {
    m_deployment_status_message = deployment_status_message;
    m_deployment_status_message_isSet = true;
}

bool OAIArtifactInstallProperties::is_deployment_status_message_Set() const{
    return m_deployment_status_message_isSet;
}

bool OAIArtifactInstallProperties::is_deployment_status_message_Valid() const{
    return m_deployment_status_message_isValid;
}

QDateTime OAIArtifactInstallProperties::getInstallTime() const {
    return m_install_time;
}
void OAIArtifactInstallProperties::setInstallTime(const QDateTime &install_time) {
    m_install_time = install_time;
    m_install_time_isSet = true;
}

bool OAIArtifactInstallProperties::is_install_time_Set() const{
    return m_install_time_isSet;
}

bool OAIArtifactInstallProperties::is_install_time_Valid() const{
    return m_install_time_isValid;
}

QList<OAIArtifactParameterProperties> OAIArtifactInstallProperties::getParameters() const {
    return m_parameters;
}
void OAIArtifactInstallProperties::setParameters(const QList<OAIArtifactParameterProperties> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIArtifactInstallProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIArtifactInstallProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIArtifactInstallProperties::getStatus() const {
    return m_status;
}
void OAIArtifactInstallProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIArtifactInstallProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIArtifactInstallProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIArtifactInstallProperties::getVmExtensionStatusMessage() const {
    return m_vm_extension_status_message;
}
void OAIArtifactInstallProperties::setVmExtensionStatusMessage(const QString &vm_extension_status_message) {
    m_vm_extension_status_message = vm_extension_status_message;
    m_vm_extension_status_message_isSet = true;
}

bool OAIArtifactInstallProperties::is_vm_extension_status_message_Set() const{
    return m_vm_extension_status_message_isSet;
}

bool OAIArtifactInstallProperties::is_vm_extension_status_message_Valid() const{
    return m_vm_extension_status_message_isValid;
}

bool OAIArtifactInstallProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_extension_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactInstallProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
