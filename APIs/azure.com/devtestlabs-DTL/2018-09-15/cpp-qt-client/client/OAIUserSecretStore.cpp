/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSecretStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSecretStore::OAIUserSecretStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSecretStore::OAIUserSecretStore() {
    this->initializeModel();
}

OAIUserSecretStore::~OAIUserSecretStore() {}

void OAIUserSecretStore::initializeModel() {

    m_key_vault_id_isSet = false;
    m_key_vault_id_isValid = false;

    m_key_vault_uri_isSet = false;
    m_key_vault_uri_isValid = false;
}

void OAIUserSecretStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSecretStore::fromJsonObject(QJsonObject json) {

    m_key_vault_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_id, json[QString("keyVaultId")]);
    m_key_vault_id_isSet = !json[QString("keyVaultId")].isNull() && m_key_vault_id_isValid;

    m_key_vault_uri_isValid = ::OpenAPI::fromJsonValue(m_key_vault_uri, json[QString("keyVaultUri")]);
    m_key_vault_uri_isSet = !json[QString("keyVaultUri")].isNull() && m_key_vault_uri_isValid;
}

QString OAIUserSecretStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSecretStore::asJsonObject() const {
    QJsonObject obj;
    if (m_key_vault_id_isSet) {
        obj.insert(QString("keyVaultId"), ::OpenAPI::toJsonValue(m_key_vault_id));
    }
    if (m_key_vault_uri_isSet) {
        obj.insert(QString("keyVaultUri"), ::OpenAPI::toJsonValue(m_key_vault_uri));
    }
    return obj;
}

QString OAIUserSecretStore::getKeyVaultId() const {
    return m_key_vault_id;
}
void OAIUserSecretStore::setKeyVaultId(const QString &key_vault_id) {
    m_key_vault_id = key_vault_id;
    m_key_vault_id_isSet = true;
}

bool OAIUserSecretStore::is_key_vault_id_Set() const{
    return m_key_vault_id_isSet;
}

bool OAIUserSecretStore::is_key_vault_id_Valid() const{
    return m_key_vault_id_isValid;
}

QString OAIUserSecretStore::getKeyVaultUri() const {
    return m_key_vault_uri;
}
void OAIUserSecretStore::setKeyVaultUri(const QString &key_vault_uri) {
    m_key_vault_uri = key_vault_uri;
    m_key_vault_uri_isSet = true;
}

bool OAIUserSecretStore::is_key_vault_uri_Set() const{
    return m_key_vault_uri_isSet;
}

bool OAIUserSecretStore::is_key_vault_uri_Valid() const{
    return m_key_vault_uri_isValid;
}

bool OAIUserSecretStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSecretStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
