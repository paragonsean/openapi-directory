/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachNewDataDiskOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachNewDataDiskOptions::OAIAttachNewDataDiskOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachNewDataDiskOptions::OAIAttachNewDataDiskOptions() {
    this->initializeModel();
}

OAIAttachNewDataDiskOptions::~OAIAttachNewDataDiskOptions() {}

void OAIAttachNewDataDiskOptions::initializeModel() {

    m_disk_name_isSet = false;
    m_disk_name_isValid = false;

    m_disk_size_gi_b_isSet = false;
    m_disk_size_gi_b_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;
}

void OAIAttachNewDataDiskOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachNewDataDiskOptions::fromJsonObject(QJsonObject json) {

    m_disk_name_isValid = ::OpenAPI::fromJsonValue(m_disk_name, json[QString("diskName")]);
    m_disk_name_isSet = !json[QString("diskName")].isNull() && m_disk_name_isValid;

    m_disk_size_gi_b_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gi_b, json[QString("diskSizeGiB")]);
    m_disk_size_gi_b_isSet = !json[QString("diskSizeGiB")].isNull() && m_disk_size_gi_b_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;
}

QString OAIAttachNewDataDiskOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachNewDataDiskOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_name_isSet) {
        obj.insert(QString("diskName"), ::OpenAPI::toJsonValue(m_disk_name));
    }
    if (m_disk_size_gi_b_isSet) {
        obj.insert(QString("diskSizeGiB"), ::OpenAPI::toJsonValue(m_disk_size_gi_b));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    return obj;
}

QString OAIAttachNewDataDiskOptions::getDiskName() const {
    return m_disk_name;
}
void OAIAttachNewDataDiskOptions::setDiskName(const QString &disk_name) {
    m_disk_name = disk_name;
    m_disk_name_isSet = true;
}

bool OAIAttachNewDataDiskOptions::is_disk_name_Set() const{
    return m_disk_name_isSet;
}

bool OAIAttachNewDataDiskOptions::is_disk_name_Valid() const{
    return m_disk_name_isValid;
}

qint32 OAIAttachNewDataDiskOptions::getDiskSizeGiB() const {
    return m_disk_size_gi_b;
}
void OAIAttachNewDataDiskOptions::setDiskSizeGiB(const qint32 &disk_size_gi_b) {
    m_disk_size_gi_b = disk_size_gi_b;
    m_disk_size_gi_b_isSet = true;
}

bool OAIAttachNewDataDiskOptions::is_disk_size_gi_b_Set() const{
    return m_disk_size_gi_b_isSet;
}

bool OAIAttachNewDataDiskOptions::is_disk_size_gi_b_Valid() const{
    return m_disk_size_gi_b_isValid;
}

QString OAIAttachNewDataDiskOptions::getDiskType() const {
    return m_disk_type;
}
void OAIAttachNewDataDiskOptions::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIAttachNewDataDiskOptions::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIAttachNewDataDiskOptions::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

bool OAIAttachNewDataDiskOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachNewDataDiskOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
