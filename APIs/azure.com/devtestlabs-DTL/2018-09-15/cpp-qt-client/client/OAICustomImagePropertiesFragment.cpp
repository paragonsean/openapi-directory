/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomImagePropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomImagePropertiesFragment::OAICustomImagePropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomImagePropertiesFragment::OAICustomImagePropertiesFragment() {
    this->initializeModel();
}

OAICustomImagePropertiesFragment::~OAICustomImagePropertiesFragment() {}

void OAICustomImagePropertiesFragment::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_custom_image_plan_isSet = false;
    m_custom_image_plan_isValid = false;

    m_data_disk_storage_info_isSet = false;
    m_data_disk_storage_info_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_plan_authorized_isSet = false;
    m_is_plan_authorized_isValid = false;

    m_managed_image_id_isSet = false;
    m_managed_image_id_isValid = false;

    m_managed_snapshot_id_isSet = false;
    m_managed_snapshot_id_isValid = false;

    m_vhd_isSet = false;
    m_vhd_isValid = false;

    m_vm_isSet = false;
    m_vm_isValid = false;
}

void OAICustomImagePropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomImagePropertiesFragment::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_custom_image_plan_isValid = ::OpenAPI::fromJsonValue(m_custom_image_plan, json[QString("customImagePlan")]);
    m_custom_image_plan_isSet = !json[QString("customImagePlan")].isNull() && m_custom_image_plan_isValid;

    m_data_disk_storage_info_isValid = ::OpenAPI::fromJsonValue(m_data_disk_storage_info, json[QString("dataDiskStorageInfo")]);
    m_data_disk_storage_info_isSet = !json[QString("dataDiskStorageInfo")].isNull() && m_data_disk_storage_info_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_plan_authorized_isValid = ::OpenAPI::fromJsonValue(m_is_plan_authorized, json[QString("isPlanAuthorized")]);
    m_is_plan_authorized_isSet = !json[QString("isPlanAuthorized")].isNull() && m_is_plan_authorized_isValid;

    m_managed_image_id_isValid = ::OpenAPI::fromJsonValue(m_managed_image_id, json[QString("managedImageId")]);
    m_managed_image_id_isSet = !json[QString("managedImageId")].isNull() && m_managed_image_id_isValid;

    m_managed_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_managed_snapshot_id, json[QString("managedSnapshotId")]);
    m_managed_snapshot_id_isSet = !json[QString("managedSnapshotId")].isNull() && m_managed_snapshot_id_isValid;

    m_vhd_isValid = ::OpenAPI::fromJsonValue(m_vhd, json[QString("vhd")]);
    m_vhd_isSet = !json[QString("vhd")].isNull() && m_vhd_isValid;

    m_vm_isValid = ::OpenAPI::fromJsonValue(m_vm, json[QString("vm")]);
    m_vm_isSet = !json[QString("vm")].isNull() && m_vm_isValid;
}

QString OAICustomImagePropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomImagePropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_custom_image_plan.isSet()) {
        obj.insert(QString("customImagePlan"), ::OpenAPI::toJsonValue(m_custom_image_plan));
    }
    if (m_data_disk_storage_info.size() > 0) {
        obj.insert(QString("dataDiskStorageInfo"), ::OpenAPI::toJsonValue(m_data_disk_storage_info));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_plan_authorized_isSet) {
        obj.insert(QString("isPlanAuthorized"), ::OpenAPI::toJsonValue(m_is_plan_authorized));
    }
    if (m_managed_image_id_isSet) {
        obj.insert(QString("managedImageId"), ::OpenAPI::toJsonValue(m_managed_image_id));
    }
    if (m_managed_snapshot_id_isSet) {
        obj.insert(QString("managedSnapshotId"), ::OpenAPI::toJsonValue(m_managed_snapshot_id));
    }
    if (m_vhd.isSet()) {
        obj.insert(QString("vhd"), ::OpenAPI::toJsonValue(m_vhd));
    }
    if (m_vm.isSet()) {
        obj.insert(QString("vm"), ::OpenAPI::toJsonValue(m_vm));
    }
    return obj;
}

QString OAICustomImagePropertiesFragment::getAuthor() const {
    return m_author;
}
void OAICustomImagePropertiesFragment::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_author_Set() const{
    return m_author_isSet;
}

bool OAICustomImagePropertiesFragment::is_author_Valid() const{
    return m_author_isValid;
}

OAICustomImagePropertiesFromPlanFragment OAICustomImagePropertiesFragment::getCustomImagePlan() const {
    return m_custom_image_plan;
}
void OAICustomImagePropertiesFragment::setCustomImagePlan(const OAICustomImagePropertiesFromPlanFragment &custom_image_plan) {
    m_custom_image_plan = custom_image_plan;
    m_custom_image_plan_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_custom_image_plan_Set() const{
    return m_custom_image_plan_isSet;
}

bool OAICustomImagePropertiesFragment::is_custom_image_plan_Valid() const{
    return m_custom_image_plan_isValid;
}

QList<OAIDataDiskStorageTypeInfoFragment> OAICustomImagePropertiesFragment::getDataDiskStorageInfo() const {
    return m_data_disk_storage_info;
}
void OAICustomImagePropertiesFragment::setDataDiskStorageInfo(const QList<OAIDataDiskStorageTypeInfoFragment> &data_disk_storage_info) {
    m_data_disk_storage_info = data_disk_storage_info;
    m_data_disk_storage_info_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_data_disk_storage_info_Set() const{
    return m_data_disk_storage_info_isSet;
}

bool OAICustomImagePropertiesFragment::is_data_disk_storage_info_Valid() const{
    return m_data_disk_storage_info_isValid;
}

QString OAICustomImagePropertiesFragment::getDescription() const {
    return m_description;
}
void OAICustomImagePropertiesFragment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomImagePropertiesFragment::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICustomImagePropertiesFragment::isIsPlanAuthorized() const {
    return m_is_plan_authorized;
}
void OAICustomImagePropertiesFragment::setIsPlanAuthorized(const bool &is_plan_authorized) {
    m_is_plan_authorized = is_plan_authorized;
    m_is_plan_authorized_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_is_plan_authorized_Set() const{
    return m_is_plan_authorized_isSet;
}

bool OAICustomImagePropertiesFragment::is_is_plan_authorized_Valid() const{
    return m_is_plan_authorized_isValid;
}

QString OAICustomImagePropertiesFragment::getManagedImageId() const {
    return m_managed_image_id;
}
void OAICustomImagePropertiesFragment::setManagedImageId(const QString &managed_image_id) {
    m_managed_image_id = managed_image_id;
    m_managed_image_id_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_managed_image_id_Set() const{
    return m_managed_image_id_isSet;
}

bool OAICustomImagePropertiesFragment::is_managed_image_id_Valid() const{
    return m_managed_image_id_isValid;
}

QString OAICustomImagePropertiesFragment::getManagedSnapshotId() const {
    return m_managed_snapshot_id;
}
void OAICustomImagePropertiesFragment::setManagedSnapshotId(const QString &managed_snapshot_id) {
    m_managed_snapshot_id = managed_snapshot_id;
    m_managed_snapshot_id_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_managed_snapshot_id_Set() const{
    return m_managed_snapshot_id_isSet;
}

bool OAICustomImagePropertiesFragment::is_managed_snapshot_id_Valid() const{
    return m_managed_snapshot_id_isValid;
}

OAICustomImagePropertiesCustomFragment OAICustomImagePropertiesFragment::getVhd() const {
    return m_vhd;
}
void OAICustomImagePropertiesFragment::setVhd(const OAICustomImagePropertiesCustomFragment &vhd) {
    m_vhd = vhd;
    m_vhd_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_vhd_Set() const{
    return m_vhd_isSet;
}

bool OAICustomImagePropertiesFragment::is_vhd_Valid() const{
    return m_vhd_isValid;
}

OAICustomImagePropertiesFromVmFragment OAICustomImagePropertiesFragment::getVm() const {
    return m_vm;
}
void OAICustomImagePropertiesFragment::setVm(const OAICustomImagePropertiesFromVmFragment &vm) {
    m_vm = vm;
    m_vm_isSet = true;
}

bool OAICustomImagePropertiesFragment::is_vm_Set() const{
    return m_vm_isSet;
}

bool OAICustomImagePropertiesFragment::is_vm_Valid() const{
    return m_vm_isValid;
}

bool OAICustomImagePropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_image_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disk_storage_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_plan_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomImagePropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
