/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationSettingsFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationSettingsFragment::OAINotificationSettingsFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationSettingsFragment::OAINotificationSettingsFragment() {
    this->initializeModel();
}

OAINotificationSettingsFragment::~OAINotificationSettingsFragment() {}

void OAINotificationSettingsFragment::initializeModel() {

    m_email_recipient_isSet = false;
    m_email_recipient_isValid = false;

    m_notification_locale_isSet = false;
    m_notification_locale_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_in_minutes_isSet = false;
    m_time_in_minutes_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;
}

void OAINotificationSettingsFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationSettingsFragment::fromJsonObject(QJsonObject json) {

    m_email_recipient_isValid = ::OpenAPI::fromJsonValue(m_email_recipient, json[QString("emailRecipient")]);
    m_email_recipient_isSet = !json[QString("emailRecipient")].isNull() && m_email_recipient_isValid;

    m_notification_locale_isValid = ::OpenAPI::fromJsonValue(m_notification_locale, json[QString("notificationLocale")]);
    m_notification_locale_isSet = !json[QString("notificationLocale")].isNull() && m_notification_locale_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_in_minutes, json[QString("timeInMinutes")]);
    m_time_in_minutes_isSet = !json[QString("timeInMinutes")].isNull() && m_time_in_minutes_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhookUrl")]);
    m_webhook_url_isSet = !json[QString("webhookUrl")].isNull() && m_webhook_url_isValid;
}

QString OAINotificationSettingsFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationSettingsFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_email_recipient_isSet) {
        obj.insert(QString("emailRecipient"), ::OpenAPI::toJsonValue(m_email_recipient));
    }
    if (m_notification_locale_isSet) {
        obj.insert(QString("notificationLocale"), ::OpenAPI::toJsonValue(m_notification_locale));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_in_minutes_isSet) {
        obj.insert(QString("timeInMinutes"), ::OpenAPI::toJsonValue(m_time_in_minutes));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhookUrl"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    return obj;
}

QString OAINotificationSettingsFragment::getEmailRecipient() const {
    return m_email_recipient;
}
void OAINotificationSettingsFragment::setEmailRecipient(const QString &email_recipient) {
    m_email_recipient = email_recipient;
    m_email_recipient_isSet = true;
}

bool OAINotificationSettingsFragment::is_email_recipient_Set() const{
    return m_email_recipient_isSet;
}

bool OAINotificationSettingsFragment::is_email_recipient_Valid() const{
    return m_email_recipient_isValid;
}

QString OAINotificationSettingsFragment::getNotificationLocale() const {
    return m_notification_locale;
}
void OAINotificationSettingsFragment::setNotificationLocale(const QString &notification_locale) {
    m_notification_locale = notification_locale;
    m_notification_locale_isSet = true;
}

bool OAINotificationSettingsFragment::is_notification_locale_Set() const{
    return m_notification_locale_isSet;
}

bool OAINotificationSettingsFragment::is_notification_locale_Valid() const{
    return m_notification_locale_isValid;
}

QString OAINotificationSettingsFragment::getStatus() const {
    return m_status;
}
void OAINotificationSettingsFragment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINotificationSettingsFragment::is_status_Set() const{
    return m_status_isSet;
}

bool OAINotificationSettingsFragment::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAINotificationSettingsFragment::getTimeInMinutes() const {
    return m_time_in_minutes;
}
void OAINotificationSettingsFragment::setTimeInMinutes(const qint32 &time_in_minutes) {
    m_time_in_minutes = time_in_minutes;
    m_time_in_minutes_isSet = true;
}

bool OAINotificationSettingsFragment::is_time_in_minutes_Set() const{
    return m_time_in_minutes_isSet;
}

bool OAINotificationSettingsFragment::is_time_in_minutes_Valid() const{
    return m_time_in_minutes_isValid;
}

QString OAINotificationSettingsFragment::getWebhookUrl() const {
    return m_webhook_url;
}
void OAINotificationSettingsFragment::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAINotificationSettingsFragment::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAINotificationSettingsFragment::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

bool OAINotificationSettingsFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationSettingsFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
