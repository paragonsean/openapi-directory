/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabAnnouncementPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabAnnouncementPropertiesFragment::OAILabAnnouncementPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabAnnouncementPropertiesFragment::OAILabAnnouncementPropertiesFragment() {
    this->initializeModel();
}

OAILabAnnouncementPropertiesFragment::~OAILabAnnouncementPropertiesFragment() {}

void OAILabAnnouncementPropertiesFragment::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_markdown_isSet = false;
    m_markdown_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAILabAnnouncementPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabAnnouncementPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_markdown_isValid = ::OpenAPI::fromJsonValue(m_markdown, json[QString("markdown")]);
    m_markdown_isSet = !json[QString("markdown")].isNull() && m_markdown_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAILabAnnouncementPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabAnnouncementPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_markdown_isSet) {
        obj.insert(QString("markdown"), ::OpenAPI::toJsonValue(m_markdown));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAILabAnnouncementPropertiesFragment::getEnabled() const {
    return m_enabled;
}
void OAILabAnnouncementPropertiesFragment::setEnabled(const QString &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAILabAnnouncementPropertiesFragment::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAILabAnnouncementPropertiesFragment::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QDateTime OAILabAnnouncementPropertiesFragment::getExpirationDate() const {
    return m_expiration_date;
}
void OAILabAnnouncementPropertiesFragment::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAILabAnnouncementPropertiesFragment::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAILabAnnouncementPropertiesFragment::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

bool OAILabAnnouncementPropertiesFragment::isExpired() const {
    return m_expired;
}
void OAILabAnnouncementPropertiesFragment::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAILabAnnouncementPropertiesFragment::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAILabAnnouncementPropertiesFragment::is_expired_Valid() const{
    return m_expired_isValid;
}

QString OAILabAnnouncementPropertiesFragment::getMarkdown() const {
    return m_markdown;
}
void OAILabAnnouncementPropertiesFragment::setMarkdown(const QString &markdown) {
    m_markdown = markdown;
    m_markdown_isSet = true;
}

bool OAILabAnnouncementPropertiesFragment::is_markdown_Set() const{
    return m_markdown_isSet;
}

bool OAILabAnnouncementPropertiesFragment::is_markdown_Valid() const{
    return m_markdown_isValid;
}

QString OAILabAnnouncementPropertiesFragment::getTitle() const {
    return m_title;
}
void OAILabAnnouncementPropertiesFragment::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILabAnnouncementPropertiesFragment::is_title_Set() const{
    return m_title_isSet;
}

bool OAILabAnnouncementPropertiesFragment::is_title_Valid() const{
    return m_title_isValid;
}

bool OAILabAnnouncementPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabAnnouncementPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
