/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormulaPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormulaPropertiesFragment::OAIFormulaPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormulaPropertiesFragment::OAIFormulaPropertiesFragment() {
    this->initializeModel();
}

OAIFormulaPropertiesFragment::~OAIFormulaPropertiesFragment() {}

void OAIFormulaPropertiesFragment::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_formula_content_isSet = false;
    m_formula_content_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_vm_isSet = false;
    m_vm_isValid = false;
}

void OAIFormulaPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormulaPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_formula_content_isValid = ::OpenAPI::fromJsonValue(m_formula_content, json[QString("formulaContent")]);
    m_formula_content_isSet = !json[QString("formulaContent")].isNull() && m_formula_content_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_vm_isValid = ::OpenAPI::fromJsonValue(m_vm, json[QString("vm")]);
    m_vm_isSet = !json[QString("vm")].isNull() && m_vm_isValid;
}

QString OAIFormulaPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormulaPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_formula_content.isSet()) {
        obj.insert(QString("formulaContent"), ::OpenAPI::toJsonValue(m_formula_content));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_vm.isSet()) {
        obj.insert(QString("vm"), ::OpenAPI::toJsonValue(m_vm));
    }
    return obj;
}

QString OAIFormulaPropertiesFragment::getAuthor() const {
    return m_author;
}
void OAIFormulaPropertiesFragment::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIFormulaPropertiesFragment::is_author_Set() const{
    return m_author_isSet;
}

bool OAIFormulaPropertiesFragment::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIFormulaPropertiesFragment::getDescription() const {
    return m_description;
}
void OAIFormulaPropertiesFragment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFormulaPropertiesFragment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFormulaPropertiesFragment::is_description_Valid() const{
    return m_description_isValid;
}

OAILabVirtualMachineCreationParameterFragment OAIFormulaPropertiesFragment::getFormulaContent() const {
    return m_formula_content;
}
void OAIFormulaPropertiesFragment::setFormulaContent(const OAILabVirtualMachineCreationParameterFragment &formula_content) {
    m_formula_content = formula_content;
    m_formula_content_isSet = true;
}

bool OAIFormulaPropertiesFragment::is_formula_content_Set() const{
    return m_formula_content_isSet;
}

bool OAIFormulaPropertiesFragment::is_formula_content_Valid() const{
    return m_formula_content_isValid;
}

QString OAIFormulaPropertiesFragment::getOsType() const {
    return m_os_type;
}
void OAIFormulaPropertiesFragment::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIFormulaPropertiesFragment::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIFormulaPropertiesFragment::is_os_type_Valid() const{
    return m_os_type_isValid;
}

OAIFormulaPropertiesFromVmFragment OAIFormulaPropertiesFragment::getVm() const {
    return m_vm;
}
void OAIFormulaPropertiesFragment::setVm(const OAIFormulaPropertiesFromVmFragment &vm) {
    m_vm = vm;
    m_vm_isSet = true;
}

bool OAIFormulaPropertiesFragment::is_vm_Set() const{
    return m_vm_isSet;
}

bool OAIFormulaPropertiesFragment::is_vm_Valid() const{
    return m_vm_isValid;
}

bool OAIFormulaPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formula_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormulaPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
