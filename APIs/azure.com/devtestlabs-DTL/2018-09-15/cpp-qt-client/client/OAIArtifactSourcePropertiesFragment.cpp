/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactSourcePropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactSourcePropertiesFragment::OAIArtifactSourcePropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactSourcePropertiesFragment::OAIArtifactSourcePropertiesFragment() {
    this->initializeModel();
}

OAIArtifactSourcePropertiesFragment::~OAIArtifactSourcePropertiesFragment() {}

void OAIArtifactSourcePropertiesFragment::initializeModel() {

    m_arm_template_folder_path_isSet = false;
    m_arm_template_folder_path_isValid = false;

    m_branch_ref_isSet = false;
    m_branch_ref_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;

    m_security_token_isSet = false;
    m_security_token_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIArtifactSourcePropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactSourcePropertiesFragment::fromJsonObject(QJsonObject json) {

    m_arm_template_folder_path_isValid = ::OpenAPI::fromJsonValue(m_arm_template_folder_path, json[QString("armTemplateFolderPath")]);
    m_arm_template_folder_path_isSet = !json[QString("armTemplateFolderPath")].isNull() && m_arm_template_folder_path_isValid;

    m_branch_ref_isValid = ::OpenAPI::fromJsonValue(m_branch_ref, json[QString("branchRef")]);
    m_branch_ref_isSet = !json[QString("branchRef")].isNull() && m_branch_ref_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("folderPath")]);
    m_folder_path_isSet = !json[QString("folderPath")].isNull() && m_folder_path_isValid;

    m_security_token_isValid = ::OpenAPI::fromJsonValue(m_security_token, json[QString("securityToken")]);
    m_security_token_isSet = !json[QString("securityToken")].isNull() && m_security_token_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIArtifactSourcePropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactSourcePropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_arm_template_folder_path_isSet) {
        obj.insert(QString("armTemplateFolderPath"), ::OpenAPI::toJsonValue(m_arm_template_folder_path));
    }
    if (m_branch_ref_isSet) {
        obj.insert(QString("branchRef"), ::OpenAPI::toJsonValue(m_branch_ref));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_folder_path_isSet) {
        obj.insert(QString("folderPath"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    if (m_security_token_isSet) {
        obj.insert(QString("securityToken"), ::OpenAPI::toJsonValue(m_security_token));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIArtifactSourcePropertiesFragment::getArmTemplateFolderPath() const {
    return m_arm_template_folder_path;
}
void OAIArtifactSourcePropertiesFragment::setArmTemplateFolderPath(const QString &arm_template_folder_path) {
    m_arm_template_folder_path = arm_template_folder_path;
    m_arm_template_folder_path_isSet = true;
}

bool OAIArtifactSourcePropertiesFragment::is_arm_template_folder_path_Set() const{
    return m_arm_template_folder_path_isSet;
}

bool OAIArtifactSourcePropertiesFragment::is_arm_template_folder_path_Valid() const{
    return m_arm_template_folder_path_isValid;
}

QString OAIArtifactSourcePropertiesFragment::getBranchRef() const {
    return m_branch_ref;
}
void OAIArtifactSourcePropertiesFragment::setBranchRef(const QString &branch_ref) {
    m_branch_ref = branch_ref;
    m_branch_ref_isSet = true;
}

bool OAIArtifactSourcePropertiesFragment::is_branch_ref_Set() const{
    return m_branch_ref_isSet;
}

bool OAIArtifactSourcePropertiesFragment::is_branch_ref_Valid() const{
    return m_branch_ref_isValid;
}

QString OAIArtifactSourcePropertiesFragment::getDisplayName() const {
    return m_display_name;
}
void OAIArtifactSourcePropertiesFragment::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIArtifactSourcePropertiesFragment::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIArtifactSourcePropertiesFragment::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIArtifactSourcePropertiesFragment::getFolderPath() const {
    return m_folder_path;
}
void OAIArtifactSourcePropertiesFragment::setFolderPath(const QString &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAIArtifactSourcePropertiesFragment::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAIArtifactSourcePropertiesFragment::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

QString OAIArtifactSourcePropertiesFragment::getSecurityToken() const {
    return m_security_token;
}
void OAIArtifactSourcePropertiesFragment::setSecurityToken(const QString &security_token) {
    m_security_token = security_token;
    m_security_token_isSet = true;
}

bool OAIArtifactSourcePropertiesFragment::is_security_token_Set() const{
    return m_security_token_isSet;
}

bool OAIArtifactSourcePropertiesFragment::is_security_token_Valid() const{
    return m_security_token_isValid;
}

QString OAIArtifactSourcePropertiesFragment::getSourceType() const {
    return m_source_type;
}
void OAIArtifactSourcePropertiesFragment::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIArtifactSourcePropertiesFragment::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIArtifactSourcePropertiesFragment::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAIArtifactSourcePropertiesFragment::getStatus() const {
    return m_status;
}
void OAIArtifactSourcePropertiesFragment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIArtifactSourcePropertiesFragment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIArtifactSourcePropertiesFragment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIArtifactSourcePropertiesFragment::getUri() const {
    return m_uri;
}
void OAIArtifactSourcePropertiesFragment::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIArtifactSourcePropertiesFragment::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIArtifactSourcePropertiesFragment::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIArtifactSourcePropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arm_template_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactSourcePropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
