/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataDiskStorageTypeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataDiskStorageTypeInfo::OAIDataDiskStorageTypeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataDiskStorageTypeInfo::OAIDataDiskStorageTypeInfo() {
    this->initializeModel();
}

OAIDataDiskStorageTypeInfo::~OAIDataDiskStorageTypeInfo() {}

void OAIDataDiskStorageTypeInfo::initializeModel() {

    m_lun_isSet = false;
    m_lun_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;
}

void OAIDataDiskStorageTypeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataDiskStorageTypeInfo::fromJsonObject(QJsonObject json) {

    m_lun_isValid = ::OpenAPI::fromJsonValue(m_lun, json[QString("lun")]);
    m_lun_isSet = !json[QString("lun")].isNull() && m_lun_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;
}

QString OAIDataDiskStorageTypeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataDiskStorageTypeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_lun_isSet) {
        obj.insert(QString("lun"), ::OpenAPI::toJsonValue(m_lun));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    return obj;
}

QString OAIDataDiskStorageTypeInfo::getLun() const {
    return m_lun;
}
void OAIDataDiskStorageTypeInfo::setLun(const QString &lun) {
    m_lun = lun;
    m_lun_isSet = true;
}

bool OAIDataDiskStorageTypeInfo::is_lun_Set() const{
    return m_lun_isSet;
}

bool OAIDataDiskStorageTypeInfo::is_lun_Valid() const{
    return m_lun_isValid;
}

QString OAIDataDiskStorageTypeInfo::getStorageType() const {
    return m_storage_type;
}
void OAIDataDiskStorageTypeInfo::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIDataDiskStorageTypeInfo::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIDataDiskStorageTypeInfo::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

bool OAIDataDiskStorageTypeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lun_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataDiskStorageTypeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
