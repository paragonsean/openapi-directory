/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceFabricsApi_H
#define OAI_OAIServiceFabricsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicableSchedule.h"
#include "OAICloudError.h"
#include "OAIServiceFabric.h"
#include "OAIServiceFabricFragment.h"
#include "OAIServiceFabricList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceFabricsApi : public QObject {
    Q_OBJECT

public:
    OAIServiceFabricsApi(const int timeOut = 0);
    ~OAIServiceFabricsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_fabric OAIServiceFabric [required]
    */
    virtual void serviceFabricsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &name, const QString &api_version, const OAIServiceFabric &service_fabric);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceFabricsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void serviceFabricsGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void serviceFabricsList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceFabricsListApplicableSchedules(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceFabricsStart(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceFabricsStop(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_fabric OAIServiceFabricFragment [required]
    */
    virtual void serviceFabricsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &name, const QString &api_version, const OAIServiceFabricFragment &service_fabric);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serviceFabricsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void serviceFabricsDeleteCallback(OAIHttpRequestWorker *worker);
    void serviceFabricsGetCallback(OAIHttpRequestWorker *worker);
    void serviceFabricsListCallback(OAIHttpRequestWorker *worker);
    void serviceFabricsListApplicableSchedulesCallback(OAIHttpRequestWorker *worker);
    void serviceFabricsStartCallback(OAIHttpRequestWorker *worker);
    void serviceFabricsStopCallback(OAIHttpRequestWorker *worker);
    void serviceFabricsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serviceFabricsCreateOrUpdateSignal(OAIServiceFabric summary);
    void serviceFabricsDeleteSignal();
    void serviceFabricsGetSignal(OAIServiceFabric summary);
    void serviceFabricsListSignal(OAIServiceFabricList summary);
    void serviceFabricsListApplicableSchedulesSignal(OAIApplicableSchedule summary);
    void serviceFabricsStartSignal();
    void serviceFabricsStopSignal();
    void serviceFabricsUpdateSignal(OAIServiceFabric summary);


    void serviceFabricsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceFabric summary);
    void serviceFabricsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serviceFabricsGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceFabric summary);
    void serviceFabricsListSignalFull(OAIHttpRequestWorker *worker, OAIServiceFabricList summary);
    void serviceFabricsListApplicableSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIApplicableSchedule summary);
    void serviceFabricsStartSignalFull(OAIHttpRequestWorker *worker);
    void serviceFabricsStopSignalFull(OAIHttpRequestWorker *worker);
    void serviceFabricsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceFabric summary);

    Q_DECL_DEPRECATED_X("Use serviceFabricsCreateOrUpdateSignalError() instead")
    void serviceFabricsCreateOrUpdateSignalE(OAIServiceFabric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsCreateOrUpdateSignalError(OAIServiceFabric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsDeleteSignalError() instead")
    void serviceFabricsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsGetSignalError() instead")
    void serviceFabricsGetSignalE(OAIServiceFabric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsGetSignalError(OAIServiceFabric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsListSignalError() instead")
    void serviceFabricsListSignalE(OAIServiceFabricList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsListSignalError(OAIServiceFabricList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsListApplicableSchedulesSignalError() instead")
    void serviceFabricsListApplicableSchedulesSignalE(OAIApplicableSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsListApplicableSchedulesSignalError(OAIApplicableSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsStartSignalError() instead")
    void serviceFabricsStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsStopSignalError() instead")
    void serviceFabricsStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsUpdateSignalError() instead")
    void serviceFabricsUpdateSignalE(OAIServiceFabric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsUpdateSignalError(OAIServiceFabric summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serviceFabricsCreateOrUpdateSignalErrorFull() instead")
    void serviceFabricsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsDeleteSignalErrorFull() instead")
    void serviceFabricsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsGetSignalErrorFull() instead")
    void serviceFabricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsListSignalErrorFull() instead")
    void serviceFabricsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsListApplicableSchedulesSignalErrorFull() instead")
    void serviceFabricsListApplicableSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsListApplicableSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsStartSignalErrorFull() instead")
    void serviceFabricsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsStopSignalErrorFull() instead")
    void serviceFabricsStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFabricsUpdateSignalErrorFull() instead")
    void serviceFabricsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFabricsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
