/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationChannelsApi_H
#define OAI_OAINotificationChannelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAINotificationChannel.h"
#include "OAINotificationChannelFragment.h"
#include "OAINotificationChannelList.h"
#include "OAINotifyParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationChannelsApi : public QObject {
    Q_OBJECT

public:
    OAINotificationChannelsApi(const int timeOut = 0);
    ~OAINotificationChannelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  notification_channel OAINotificationChannel [required]
    */
    virtual void notificationChannelsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAINotificationChannel &notification_channel);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void notificationChannelsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void notificationChannelsGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void notificationChannelsList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  notify_parameters OAINotifyParameters [required]
    */
    virtual void notificationChannelsNotify(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAINotifyParameters &notify_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  notification_channel OAINotificationChannelFragment [required]
    */
    virtual void notificationChannelsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAINotificationChannelFragment &notification_channel);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationChannelsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void notificationChannelsDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationChannelsGetCallback(OAIHttpRequestWorker *worker);
    void notificationChannelsListCallback(OAIHttpRequestWorker *worker);
    void notificationChannelsNotifyCallback(OAIHttpRequestWorker *worker);
    void notificationChannelsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationChannelsCreateOrUpdateSignal(OAINotificationChannel summary);
    void notificationChannelsDeleteSignal();
    void notificationChannelsGetSignal(OAINotificationChannel summary);
    void notificationChannelsListSignal(OAINotificationChannelList summary);
    void notificationChannelsNotifySignal();
    void notificationChannelsUpdateSignal(OAINotificationChannel summary);


    void notificationChannelsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAINotificationChannel summary);
    void notificationChannelsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationChannelsGetSignalFull(OAIHttpRequestWorker *worker, OAINotificationChannel summary);
    void notificationChannelsListSignalFull(OAIHttpRequestWorker *worker, OAINotificationChannelList summary);
    void notificationChannelsNotifySignalFull(OAIHttpRequestWorker *worker);
    void notificationChannelsUpdateSignalFull(OAIHttpRequestWorker *worker, OAINotificationChannel summary);

    Q_DECL_DEPRECATED_X("Use notificationChannelsCreateOrUpdateSignalError() instead")
    void notificationChannelsCreateOrUpdateSignalE(OAINotificationChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsCreateOrUpdateSignalError(OAINotificationChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsDeleteSignalError() instead")
    void notificationChannelsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsGetSignalError() instead")
    void notificationChannelsGetSignalE(OAINotificationChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsGetSignalError(OAINotificationChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsListSignalError() instead")
    void notificationChannelsListSignalE(OAINotificationChannelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsListSignalError(OAINotificationChannelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsNotifySignalError() instead")
    void notificationChannelsNotifySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsNotifySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsUpdateSignalError() instead")
    void notificationChannelsUpdateSignalE(OAINotificationChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsUpdateSignalError(OAINotificationChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationChannelsCreateOrUpdateSignalErrorFull() instead")
    void notificationChannelsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsDeleteSignalErrorFull() instead")
    void notificationChannelsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsGetSignalErrorFull() instead")
    void notificationChannelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsListSignalErrorFull() instead")
    void notificationChannelsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsNotifySignalErrorFull() instead")
    void notificationChannelsNotifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsNotifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationChannelsUpdateSignalErrorFull() instead")
    void notificationChannelsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationChannelsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
