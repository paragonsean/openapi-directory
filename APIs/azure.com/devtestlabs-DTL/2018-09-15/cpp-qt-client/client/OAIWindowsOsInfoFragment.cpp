/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsOsInfoFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsOsInfoFragment::OAIWindowsOsInfoFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsOsInfoFragment::OAIWindowsOsInfoFragment() {
    this->initializeModel();
}

OAIWindowsOsInfoFragment::~OAIWindowsOsInfoFragment() {}

void OAIWindowsOsInfoFragment::initializeModel() {

    m_windows_os_state_isSet = false;
    m_windows_os_state_isValid = false;
}

void OAIWindowsOsInfoFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsOsInfoFragment::fromJsonObject(QJsonObject json) {

    m_windows_os_state_isValid = ::OpenAPI::fromJsonValue(m_windows_os_state, json[QString("windowsOsState")]);
    m_windows_os_state_isSet = !json[QString("windowsOsState")].isNull() && m_windows_os_state_isValid;
}

QString OAIWindowsOsInfoFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsOsInfoFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_windows_os_state_isSet) {
        obj.insert(QString("windowsOsState"), ::OpenAPI::toJsonValue(m_windows_os_state));
    }
    return obj;
}

QString OAIWindowsOsInfoFragment::getWindowsOsState() const {
    return m_windows_os_state;
}
void OAIWindowsOsInfoFragment::setWindowsOsState(const QString &windows_os_state) {
    m_windows_os_state = windows_os_state;
    m_windows_os_state_isSet = true;
}

bool OAIWindowsOsInfoFragment::is_windows_os_state_Set() const{
    return m_windows_os_state_isSet;
}

bool OAIWindowsOsInfoFragment::is_windows_os_state_Valid() const{
    return m_windows_os_state_isValid;
}

bool OAIWindowsOsInfoFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_windows_os_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsOsInfoFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
