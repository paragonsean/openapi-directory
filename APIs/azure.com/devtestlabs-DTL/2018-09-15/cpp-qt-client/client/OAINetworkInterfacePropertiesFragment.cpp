/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInterfacePropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInterfacePropertiesFragment::OAINetworkInterfacePropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInterfacePropertiesFragment::OAINetworkInterfacePropertiesFragment() {
    this->initializeModel();
}

OAINetworkInterfacePropertiesFragment::~OAINetworkInterfacePropertiesFragment() {}

void OAINetworkInterfacePropertiesFragment::initializeModel() {

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;

    m_public_ip_address_id_isSet = false;
    m_public_ip_address_id_isValid = false;

    m_rdp_authority_isSet = false;
    m_rdp_authority_isValid = false;

    m_shared_public_ip_address_configuration_isSet = false;
    m_shared_public_ip_address_configuration_isValid = false;

    m_ssh_authority_isSet = false;
    m_ssh_authority_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_virtual_network_id_isSet = false;
    m_virtual_network_id_isValid = false;
}

void OAINetworkInterfacePropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInterfacePropertiesFragment::fromJsonObject(QJsonObject json) {

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("dnsName")]);
    m_dns_name_isSet = !json[QString("dnsName")].isNull() && m_dns_name_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("privateIpAddress")]);
    m_private_ip_address_isSet = !json[QString("privateIpAddress")].isNull() && m_private_ip_address_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIpAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIpAddress")].isNull() && m_public_ip_address_isValid;

    m_public_ip_address_id_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address_id, json[QString("publicIpAddressId")]);
    m_public_ip_address_id_isSet = !json[QString("publicIpAddressId")].isNull() && m_public_ip_address_id_isValid;

    m_rdp_authority_isValid = ::OpenAPI::fromJsonValue(m_rdp_authority, json[QString("rdpAuthority")]);
    m_rdp_authority_isSet = !json[QString("rdpAuthority")].isNull() && m_rdp_authority_isValid;

    m_shared_public_ip_address_configuration_isValid = ::OpenAPI::fromJsonValue(m_shared_public_ip_address_configuration, json[QString("sharedPublicIpAddressConfiguration")]);
    m_shared_public_ip_address_configuration_isSet = !json[QString("sharedPublicIpAddressConfiguration")].isNull() && m_shared_public_ip_address_configuration_isValid;

    m_ssh_authority_isValid = ::OpenAPI::fromJsonValue(m_ssh_authority, json[QString("sshAuthority")]);
    m_ssh_authority_isSet = !json[QString("sshAuthority")].isNull() && m_ssh_authority_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_virtual_network_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_id, json[QString("virtualNetworkId")]);
    m_virtual_network_id_isSet = !json[QString("virtualNetworkId")].isNull() && m_virtual_network_id_isValid;
}

QString OAINetworkInterfacePropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInterfacePropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_name_isSet) {
        obj.insert(QString("dnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("privateIpAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_public_ip_address_isSet) {
        obj.insert(QString("publicIpAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    if (m_public_ip_address_id_isSet) {
        obj.insert(QString("publicIpAddressId"), ::OpenAPI::toJsonValue(m_public_ip_address_id));
    }
    if (m_rdp_authority_isSet) {
        obj.insert(QString("rdpAuthority"), ::OpenAPI::toJsonValue(m_rdp_authority));
    }
    if (m_shared_public_ip_address_configuration.isSet()) {
        obj.insert(QString("sharedPublicIpAddressConfiguration"), ::OpenAPI::toJsonValue(m_shared_public_ip_address_configuration));
    }
    if (m_ssh_authority_isSet) {
        obj.insert(QString("sshAuthority"), ::OpenAPI::toJsonValue(m_ssh_authority));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_virtual_network_id_isSet) {
        obj.insert(QString("virtualNetworkId"), ::OpenAPI::toJsonValue(m_virtual_network_id));
    }
    return obj;
}

QString OAINetworkInterfacePropertiesFragment::getDnsName() const {
    return m_dns_name;
}
void OAINetworkInterfacePropertiesFragment::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

QString OAINetworkInterfacePropertiesFragment::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAINetworkInterfacePropertiesFragment::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

QString OAINetworkInterfacePropertiesFragment::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAINetworkInterfacePropertiesFragment::setPublicIpAddress(const QString &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

QString OAINetworkInterfacePropertiesFragment::getPublicIpAddressId() const {
    return m_public_ip_address_id;
}
void OAINetworkInterfacePropertiesFragment::setPublicIpAddressId(const QString &public_ip_address_id) {
    m_public_ip_address_id = public_ip_address_id;
    m_public_ip_address_id_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_public_ip_address_id_Set() const{
    return m_public_ip_address_id_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_public_ip_address_id_Valid() const{
    return m_public_ip_address_id_isValid;
}

QString OAINetworkInterfacePropertiesFragment::getRdpAuthority() const {
    return m_rdp_authority;
}
void OAINetworkInterfacePropertiesFragment::setRdpAuthority(const QString &rdp_authority) {
    m_rdp_authority = rdp_authority;
    m_rdp_authority_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_rdp_authority_Set() const{
    return m_rdp_authority_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_rdp_authority_Valid() const{
    return m_rdp_authority_isValid;
}

OAISharedPublicIpAddressConfigurationFragment OAINetworkInterfacePropertiesFragment::getSharedPublicIpAddressConfiguration() const {
    return m_shared_public_ip_address_configuration;
}
void OAINetworkInterfacePropertiesFragment::setSharedPublicIpAddressConfiguration(const OAISharedPublicIpAddressConfigurationFragment &shared_public_ip_address_configuration) {
    m_shared_public_ip_address_configuration = shared_public_ip_address_configuration;
    m_shared_public_ip_address_configuration_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_shared_public_ip_address_configuration_Set() const{
    return m_shared_public_ip_address_configuration_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_shared_public_ip_address_configuration_Valid() const{
    return m_shared_public_ip_address_configuration_isValid;
}

QString OAINetworkInterfacePropertiesFragment::getSshAuthority() const {
    return m_ssh_authority;
}
void OAINetworkInterfacePropertiesFragment::setSshAuthority(const QString &ssh_authority) {
    m_ssh_authority = ssh_authority;
    m_ssh_authority_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_ssh_authority_Set() const{
    return m_ssh_authority_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_ssh_authority_Valid() const{
    return m_ssh_authority_isValid;
}

QString OAINetworkInterfacePropertiesFragment::getSubnetId() const {
    return m_subnet_id;
}
void OAINetworkInterfacePropertiesFragment::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAINetworkInterfacePropertiesFragment::getVirtualNetworkId() const {
    return m_virtual_network_id;
}
void OAINetworkInterfacePropertiesFragment::setVirtualNetworkId(const QString &virtual_network_id) {
    m_virtual_network_id = virtual_network_id;
    m_virtual_network_id_isSet = true;
}

bool OAINetworkInterfacePropertiesFragment::is_virtual_network_id_Set() const{
    return m_virtual_network_id_isSet;
}

bool OAINetworkInterfacePropertiesFragment::is_virtual_network_id_Valid() const{
    return m_virtual_network_id_isValid;
}

bool OAINetworkInterfacePropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rdp_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_public_ip_address_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInterfacePropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
