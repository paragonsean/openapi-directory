/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceFabricSchedulesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIServiceFabricSchedulesApi::OAIServiceFabricSchedulesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIServiceFabricSchedulesApi::~OAIServiceFabricSchedulesApi() {
}

void OAIServiceFabricSchedulesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://management.azure.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("serviceFabricSchedulesCreateOrUpdate", defaultConf);
    _serverIndices.insert("serviceFabricSchedulesCreateOrUpdate", 0);
    _serverConfigs.insert("serviceFabricSchedulesDelete", defaultConf);
    _serverIndices.insert("serviceFabricSchedulesDelete", 0);
    _serverConfigs.insert("serviceFabricSchedulesExecute", defaultConf);
    _serverIndices.insert("serviceFabricSchedulesExecute", 0);
    _serverConfigs.insert("serviceFabricSchedulesGet", defaultConf);
    _serverIndices.insert("serviceFabricSchedulesGet", 0);
    _serverConfigs.insert("serviceFabricSchedulesList", defaultConf);
    _serverIndices.insert("serviceFabricSchedulesList", 0);
    _serverConfigs.insert("serviceFabricSchedulesUpdate", defaultConf);
    _serverIndices.insert("serviceFabricSchedulesUpdate", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIServiceFabricSchedulesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIServiceFabricSchedulesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIServiceFabricSchedulesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIServiceFabricSchedulesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIServiceFabricSchedulesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIServiceFabricSchedulesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIServiceFabricSchedulesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIServiceFabricSchedulesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIServiceFabricSchedulesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIServiceFabricSchedulesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIServiceFabricSchedulesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIServiceFabricSchedulesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIServiceFabricSchedulesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIServiceFabricSchedulesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIServiceFabricSchedulesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIServiceFabricSchedulesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIServiceFabricSchedulesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIServiceFabricSchedulesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIServiceFabricSchedulesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version, const OAISchedule &schedule) {
    QString fullPath = QString(_serverConfigs["serviceFabricSchedulesCreateOrUpdate"][_serverIndices.value("serviceFabricSchedulesCreateOrUpdate")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}");
    
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString lab_namePathParam("{");
        lab_namePathParam.append("labName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labName"+pathSuffix : pathPrefix;
        fullPath.replace(lab_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lab_name)));
    }
    
    {
        QString user_namePathParam("{");
        user_namePathParam.append("userName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userName"+pathSuffix : pathPrefix;
        fullPath.replace(user_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_name)));
    }
    
    {
        QString service_fabric_namePathParam("{");
        service_fabric_namePathParam.append("serviceFabricName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serviceFabricName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serviceFabricName"+pathSuffix : pathPrefix;
        fullPath.replace(service_fabric_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_fabric_name)));
    }
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = schedule.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesCreateOrUpdateCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesCreateOrUpdateCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISchedule output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceFabricSchedulesCreateOrUpdateSignal(output);
        Q_EMIT serviceFabricSchedulesCreateOrUpdateSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceFabricSchedulesCreateOrUpdateSignalE(output, error_type, error_str);
        Q_EMIT serviceFabricSchedulesCreateOrUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceFabricSchedulesCreateOrUpdateSignalError(output, error_type, error_str);
        Q_EMIT serviceFabricSchedulesCreateOrUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["serviceFabricSchedulesDelete"][_serverIndices.value("serviceFabricSchedulesDelete")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}");
    
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString lab_namePathParam("{");
        lab_namePathParam.append("labName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labName"+pathSuffix : pathPrefix;
        fullPath.replace(lab_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lab_name)));
    }
    
    {
        QString user_namePathParam("{");
        user_namePathParam.append("userName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userName"+pathSuffix : pathPrefix;
        fullPath.replace(user_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_name)));
    }
    
    {
        QString service_fabric_namePathParam("{");
        service_fabric_namePathParam.append("serviceFabricName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serviceFabricName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serviceFabricName"+pathSuffix : pathPrefix;
        fullPath.replace(service_fabric_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_fabric_name)));
    }
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesDeleteCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesDeleteCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceFabricSchedulesDeleteSignal();
        Q_EMIT serviceFabricSchedulesDeleteSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceFabricSchedulesDeleteSignalE(error_type, error_str);
        Q_EMIT serviceFabricSchedulesDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceFabricSchedulesDeleteSignalError(error_type, error_str);
        Q_EMIT serviceFabricSchedulesDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesExecute(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["serviceFabricSchedulesExecute"][_serverIndices.value("serviceFabricSchedulesExecute")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}/execute");
    
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString lab_namePathParam("{");
        lab_namePathParam.append("labName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labName"+pathSuffix : pathPrefix;
        fullPath.replace(lab_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lab_name)));
    }
    
    {
        QString user_namePathParam("{");
        user_namePathParam.append("userName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userName"+pathSuffix : pathPrefix;
        fullPath.replace(user_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_name)));
    }
    
    {
        QString service_fabric_namePathParam("{");
        service_fabric_namePathParam.append("serviceFabricName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serviceFabricName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serviceFabricName"+pathSuffix : pathPrefix;
        fullPath.replace(service_fabric_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_fabric_name)));
    }
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesExecuteCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesExecuteCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesExecuteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceFabricSchedulesExecuteSignal();
        Q_EMIT serviceFabricSchedulesExecuteSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceFabricSchedulesExecuteSignalE(error_type, error_str);
        Q_EMIT serviceFabricSchedulesExecuteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceFabricSchedulesExecuteSignalError(error_type, error_str);
        Q_EMIT serviceFabricSchedulesExecuteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand) {
    QString fullPath = QString(_serverConfigs["serviceFabricSchedulesGet"][_serverIndices.value("serviceFabricSchedulesGet")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}");
    
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString lab_namePathParam("{");
        lab_namePathParam.append("labName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labName"+pathSuffix : pathPrefix;
        fullPath.replace(lab_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lab_name)));
    }
    
    {
        QString user_namePathParam("{");
        user_namePathParam.append("userName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userName"+pathSuffix : pathPrefix;
        fullPath.replace(user_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_name)));
    }
    
    {
        QString service_fabric_namePathParam("{");
        service_fabric_namePathParam.append("serviceFabricName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serviceFabricName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serviceFabricName"+pathSuffix : pathPrefix;
        fullPath.replace(service_fabric_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_fabric_name)));
    }
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "$expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("$expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesGetCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesGetCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISchedule output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceFabricSchedulesGetSignal(output);
        Q_EMIT serviceFabricSchedulesGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceFabricSchedulesGetSignalE(output, error_type, error_str);
        Q_EMIT serviceFabricSchedulesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceFabricSchedulesGetSignalError(output, error_type, error_str);
        Q_EMIT serviceFabricSchedulesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<qint32> &top, const ::OpenAPI::OptionalParam<QString> &orderby) {
    QString fullPath = QString(_serverConfigs["serviceFabricSchedulesList"][_serverIndices.value("serviceFabricSchedulesList")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules");
    
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString lab_namePathParam("{");
        lab_namePathParam.append("labName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labName"+pathSuffix : pathPrefix;
        fullPath.replace(lab_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lab_name)));
    }
    
    {
        QString user_namePathParam("{");
        user_namePathParam.append("userName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userName"+pathSuffix : pathPrefix;
        fullPath.replace(user_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_name)));
    }
    
    {
        QString service_fabric_namePathParam("{");
        service_fabric_namePathParam.append("serviceFabricName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serviceFabricName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serviceFabricName"+pathSuffix : pathPrefix;
        fullPath.replace(service_fabric_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_fabric_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expand.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "$expand", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("$expand")).append(querySuffix).append(QUrl::toPercentEncoding(expand.stringValue()));
    }
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "$filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("$filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (top.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "$top", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("$top")).append(querySuffix).append(QUrl::toPercentEncoding(top.stringValue()));
    }
    if (orderby.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "$orderby", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("$orderby")).append(querySuffix).append(QUrl::toPercentEncoding(orderby.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesListCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesListCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScheduleList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceFabricSchedulesListSignal(output);
        Q_EMIT serviceFabricSchedulesListSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceFabricSchedulesListSignalE(output, error_type, error_str);
        Q_EMIT serviceFabricSchedulesListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceFabricSchedulesListSignalError(output, error_type, error_str);
        Q_EMIT serviceFabricSchedulesListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &user_name, const QString &service_fabric_name, const QString &name, const QString &api_version, const OAIScheduleFragment &schedule) {
    QString fullPath = QString(_serverConfigs["serviceFabricSchedulesUpdate"][_serverIndices.value("serviceFabricSchedulesUpdate")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}");
    
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString lab_namePathParam("{");
        lab_namePathParam.append("labName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labName"+pathSuffix : pathPrefix;
        fullPath.replace(lab_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lab_name)));
    }
    
    {
        QString user_namePathParam("{");
        user_namePathParam.append("userName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userName"+pathSuffix : pathPrefix;
        fullPath.replace(user_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_name)));
    }
    
    {
        QString service_fabric_namePathParam("{");
        service_fabric_namePathParam.append("serviceFabricName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serviceFabricName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serviceFabricName"+pathSuffix : pathPrefix;
        fullPath.replace(service_fabric_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_fabric_name)));
    }
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = schedule.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesUpdateCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIServiceFabricSchedulesApi::serviceFabricSchedulesUpdateCallback);
    connect(this, &OAIServiceFabricSchedulesApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAIServiceFabricSchedulesApi::serviceFabricSchedulesUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISchedule output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT serviceFabricSchedulesUpdateSignal(output);
        Q_EMIT serviceFabricSchedulesUpdateSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT serviceFabricSchedulesUpdateSignalE(output, error_type, error_str);
        Q_EMIT serviceFabricSchedulesUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT serviceFabricSchedulesUpdateSignalError(output, error_type, error_str);
        Q_EMIT serviceFabricSchedulesUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIServiceFabricSchedulesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
