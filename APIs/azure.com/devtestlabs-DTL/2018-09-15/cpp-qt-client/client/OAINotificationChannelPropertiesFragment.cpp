/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationChannelPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationChannelPropertiesFragment::OAINotificationChannelPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationChannelPropertiesFragment::OAINotificationChannelPropertiesFragment() {
    this->initializeModel();
}

OAINotificationChannelPropertiesFragment::~OAINotificationChannelPropertiesFragment() {}

void OAINotificationChannelPropertiesFragment::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_recipient_isSet = false;
    m_email_recipient_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_notification_locale_isSet = false;
    m_notification_locale_isValid = false;

    m_web_hook_url_isSet = false;
    m_web_hook_url_isValid = false;
}

void OAINotificationChannelPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationChannelPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_recipient_isValid = ::OpenAPI::fromJsonValue(m_email_recipient, json[QString("emailRecipient")]);
    m_email_recipient_isSet = !json[QString("emailRecipient")].isNull() && m_email_recipient_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_notification_locale_isValid = ::OpenAPI::fromJsonValue(m_notification_locale, json[QString("notificationLocale")]);
    m_notification_locale_isSet = !json[QString("notificationLocale")].isNull() && m_notification_locale_isValid;

    m_web_hook_url_isValid = ::OpenAPI::fromJsonValue(m_web_hook_url, json[QString("webHookUrl")]);
    m_web_hook_url_isSet = !json[QString("webHookUrl")].isNull() && m_web_hook_url_isValid;
}

QString OAINotificationChannelPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationChannelPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_recipient_isSet) {
        obj.insert(QString("emailRecipient"), ::OpenAPI::toJsonValue(m_email_recipient));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_notification_locale_isSet) {
        obj.insert(QString("notificationLocale"), ::OpenAPI::toJsonValue(m_notification_locale));
    }
    if (m_web_hook_url_isSet) {
        obj.insert(QString("webHookUrl"), ::OpenAPI::toJsonValue(m_web_hook_url));
    }
    return obj;
}

QString OAINotificationChannelPropertiesFragment::getDescription() const {
    return m_description;
}
void OAINotificationChannelPropertiesFragment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINotificationChannelPropertiesFragment::is_description_Set() const{
    return m_description_isSet;
}

bool OAINotificationChannelPropertiesFragment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINotificationChannelPropertiesFragment::getEmailRecipient() const {
    return m_email_recipient;
}
void OAINotificationChannelPropertiesFragment::setEmailRecipient(const QString &email_recipient) {
    m_email_recipient = email_recipient;
    m_email_recipient_isSet = true;
}

bool OAINotificationChannelPropertiesFragment::is_email_recipient_Set() const{
    return m_email_recipient_isSet;
}

bool OAINotificationChannelPropertiesFragment::is_email_recipient_Valid() const{
    return m_email_recipient_isValid;
}

QList<OAIEventFragment> OAINotificationChannelPropertiesFragment::getEvents() const {
    return m_events;
}
void OAINotificationChannelPropertiesFragment::setEvents(const QList<OAIEventFragment> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAINotificationChannelPropertiesFragment::is_events_Set() const{
    return m_events_isSet;
}

bool OAINotificationChannelPropertiesFragment::is_events_Valid() const{
    return m_events_isValid;
}

QString OAINotificationChannelPropertiesFragment::getNotificationLocale() const {
    return m_notification_locale;
}
void OAINotificationChannelPropertiesFragment::setNotificationLocale(const QString &notification_locale) {
    m_notification_locale = notification_locale;
    m_notification_locale_isSet = true;
}

bool OAINotificationChannelPropertiesFragment::is_notification_locale_Set() const{
    return m_notification_locale_isSet;
}

bool OAINotificationChannelPropertiesFragment::is_notification_locale_Valid() const{
    return m_notification_locale_isValid;
}

QString OAINotificationChannelPropertiesFragment::getWebHookUrl() const {
    return m_web_hook_url;
}
void OAINotificationChannelPropertiesFragment::setWebHookUrl(const QString &web_hook_url) {
    m_web_hook_url = web_hook_url;
    m_web_hook_url_isSet = true;
}

bool OAINotificationChannelPropertiesFragment::is_web_hook_url_Set() const{
    return m_web_hook_url_isSet;
}

bool OAINotificationChannelPropertiesFragment::is_web_hook_url_Valid() const{
    return m_web_hook_url_isValid;
}

bool OAINotificationChannelPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationChannelPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
