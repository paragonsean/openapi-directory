/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleCreationParameterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleCreationParameterProperties::OAIScheduleCreationParameterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleCreationParameterProperties::OAIScheduleCreationParameterProperties() {
    this->initializeModel();
}

OAIScheduleCreationParameterProperties::~OAIScheduleCreationParameterProperties() {}

void OAIScheduleCreationParameterProperties::initializeModel() {

    m_daily_recurrence_isSet = false;
    m_daily_recurrence_isValid = false;

    m_hourly_recurrence_isSet = false;
    m_hourly_recurrence_isValid = false;

    m_notification_settings_isSet = false;
    m_notification_settings_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_resource_id_isSet = false;
    m_target_resource_id_isValid = false;

    m_task_type_isSet = false;
    m_task_type_isValid = false;

    m_time_zone_id_isSet = false;
    m_time_zone_id_isValid = false;

    m_weekly_recurrence_isSet = false;
    m_weekly_recurrence_isValid = false;
}

void OAIScheduleCreationParameterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleCreationParameterProperties::fromJsonObject(QJsonObject json) {

    m_daily_recurrence_isValid = ::OpenAPI::fromJsonValue(m_daily_recurrence, json[QString("dailyRecurrence")]);
    m_daily_recurrence_isSet = !json[QString("dailyRecurrence")].isNull() && m_daily_recurrence_isValid;

    m_hourly_recurrence_isValid = ::OpenAPI::fromJsonValue(m_hourly_recurrence, json[QString("hourlyRecurrence")]);
    m_hourly_recurrence_isSet = !json[QString("hourlyRecurrence")].isNull() && m_hourly_recurrence_isValid;

    m_notification_settings_isValid = ::OpenAPI::fromJsonValue(m_notification_settings, json[QString("notificationSettings")]);
    m_notification_settings_isSet = !json[QString("notificationSettings")].isNull() && m_notification_settings_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_id, json[QString("targetResourceId")]);
    m_target_resource_id_isSet = !json[QString("targetResourceId")].isNull() && m_target_resource_id_isValid;

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("taskType")]);
    m_task_type_isSet = !json[QString("taskType")].isNull() && m_task_type_isValid;

    m_time_zone_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_id, json[QString("timeZoneId")]);
    m_time_zone_id_isSet = !json[QString("timeZoneId")].isNull() && m_time_zone_id_isValid;

    m_weekly_recurrence_isValid = ::OpenAPI::fromJsonValue(m_weekly_recurrence, json[QString("weeklyRecurrence")]);
    m_weekly_recurrence_isSet = !json[QString("weeklyRecurrence")].isNull() && m_weekly_recurrence_isValid;
}

QString OAIScheduleCreationParameterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleCreationParameterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_recurrence.isSet()) {
        obj.insert(QString("dailyRecurrence"), ::OpenAPI::toJsonValue(m_daily_recurrence));
    }
    if (m_hourly_recurrence.isSet()) {
        obj.insert(QString("hourlyRecurrence"), ::OpenAPI::toJsonValue(m_hourly_recurrence));
    }
    if (m_notification_settings.isSet()) {
        obj.insert(QString("notificationSettings"), ::OpenAPI::toJsonValue(m_notification_settings));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_resource_id_isSet) {
        obj.insert(QString("targetResourceId"), ::OpenAPI::toJsonValue(m_target_resource_id));
    }
    if (m_task_type_isSet) {
        obj.insert(QString("taskType"), ::OpenAPI::toJsonValue(m_task_type));
    }
    if (m_time_zone_id_isSet) {
        obj.insert(QString("timeZoneId"), ::OpenAPI::toJsonValue(m_time_zone_id));
    }
    if (m_weekly_recurrence.isSet()) {
        obj.insert(QString("weeklyRecurrence"), ::OpenAPI::toJsonValue(m_weekly_recurrence));
    }
    return obj;
}

OAIDayDetails OAIScheduleCreationParameterProperties::getDailyRecurrence() const {
    return m_daily_recurrence;
}
void OAIScheduleCreationParameterProperties::setDailyRecurrence(const OAIDayDetails &daily_recurrence) {
    m_daily_recurrence = daily_recurrence;
    m_daily_recurrence_isSet = true;
}

bool OAIScheduleCreationParameterProperties::is_daily_recurrence_Set() const{
    return m_daily_recurrence_isSet;
}

bool OAIScheduleCreationParameterProperties::is_daily_recurrence_Valid() const{
    return m_daily_recurrence_isValid;
}

OAIHourDetails OAIScheduleCreationParameterProperties::getHourlyRecurrence() const {
    return m_hourly_recurrence;
}
void OAIScheduleCreationParameterProperties::setHourlyRecurrence(const OAIHourDetails &hourly_recurrence) {
    m_hourly_recurrence = hourly_recurrence;
    m_hourly_recurrence_isSet = true;
}

bool OAIScheduleCreationParameterProperties::is_hourly_recurrence_Set() const{
    return m_hourly_recurrence_isSet;
}

bool OAIScheduleCreationParameterProperties::is_hourly_recurrence_Valid() const{
    return m_hourly_recurrence_isValid;
}

OAINotificationSettings OAIScheduleCreationParameterProperties::getNotificationSettings() const {
    return m_notification_settings;
}
void OAIScheduleCreationParameterProperties::setNotificationSettings(const OAINotificationSettings &notification_settings) {
    m_notification_settings = notification_settings;
    m_notification_settings_isSet = true;
}

bool OAIScheduleCreationParameterProperties::is_notification_settings_Set() const{
    return m_notification_settings_isSet;
}

bool OAIScheduleCreationParameterProperties::is_notification_settings_Valid() const{
    return m_notification_settings_isValid;
}

QString OAIScheduleCreationParameterProperties::getStatus() const {
    return m_status;
}
void OAIScheduleCreationParameterProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScheduleCreationParameterProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScheduleCreationParameterProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIScheduleCreationParameterProperties::getTargetResourceId() const {
    return m_target_resource_id;
}
void OAIScheduleCreationParameterProperties::setTargetResourceId(const QString &target_resource_id) {
    m_target_resource_id = target_resource_id;
    m_target_resource_id_isSet = true;
}

bool OAIScheduleCreationParameterProperties::is_target_resource_id_Set() const{
    return m_target_resource_id_isSet;
}

bool OAIScheduleCreationParameterProperties::is_target_resource_id_Valid() const{
    return m_target_resource_id_isValid;
}

QString OAIScheduleCreationParameterProperties::getTaskType() const {
    return m_task_type;
}
void OAIScheduleCreationParameterProperties::setTaskType(const QString &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAIScheduleCreationParameterProperties::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAIScheduleCreationParameterProperties::is_task_type_Valid() const{
    return m_task_type_isValid;
}

QString OAIScheduleCreationParameterProperties::getTimeZoneId() const {
    return m_time_zone_id;
}
void OAIScheduleCreationParameterProperties::setTimeZoneId(const QString &time_zone_id) {
    m_time_zone_id = time_zone_id;
    m_time_zone_id_isSet = true;
}

bool OAIScheduleCreationParameterProperties::is_time_zone_id_Set() const{
    return m_time_zone_id_isSet;
}

bool OAIScheduleCreationParameterProperties::is_time_zone_id_Valid() const{
    return m_time_zone_id_isValid;
}

OAIWeekDetails OAIScheduleCreationParameterProperties::getWeeklyRecurrence() const {
    return m_weekly_recurrence;
}
void OAIScheduleCreationParameterProperties::setWeeklyRecurrence(const OAIWeekDetails &weekly_recurrence) {
    m_weekly_recurrence = weekly_recurrence;
    m_weekly_recurrence_isSet = true;
}

bool OAIScheduleCreationParameterProperties::is_weekly_recurrence_Set() const{
    return m_weekly_recurrence_isSet;
}

bool OAIScheduleCreationParameterProperties::is_weekly_recurrence_Valid() const{
    return m_weekly_recurrence_isValid;
}

bool OAIScheduleCreationParameterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleCreationParameterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
