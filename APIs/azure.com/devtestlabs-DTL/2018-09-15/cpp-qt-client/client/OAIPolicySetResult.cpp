/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicySetResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicySetResult::OAIPolicySetResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicySetResult::OAIPolicySetResult() {
    this->initializeModel();
}

OAIPolicySetResult::~OAIPolicySetResult() {}

void OAIPolicySetResult::initializeModel() {

    m_has_error_isSet = false;
    m_has_error_isValid = false;

    m_policy_violations_isSet = false;
    m_policy_violations_isValid = false;
}

void OAIPolicySetResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicySetResult::fromJsonObject(QJsonObject json) {

    m_has_error_isValid = ::OpenAPI::fromJsonValue(m_has_error, json[QString("hasError")]);
    m_has_error_isSet = !json[QString("hasError")].isNull() && m_has_error_isValid;

    m_policy_violations_isValid = ::OpenAPI::fromJsonValue(m_policy_violations, json[QString("policyViolations")]);
    m_policy_violations_isSet = !json[QString("policyViolations")].isNull() && m_policy_violations_isValid;
}

QString OAIPolicySetResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicySetResult::asJsonObject() const {
    QJsonObject obj;
    if (m_has_error_isSet) {
        obj.insert(QString("hasError"), ::OpenAPI::toJsonValue(m_has_error));
    }
    if (m_policy_violations.size() > 0) {
        obj.insert(QString("policyViolations"), ::OpenAPI::toJsonValue(m_policy_violations));
    }
    return obj;
}

bool OAIPolicySetResult::isHasError() const {
    return m_has_error;
}
void OAIPolicySetResult::setHasError(const bool &has_error) {
    m_has_error = has_error;
    m_has_error_isSet = true;
}

bool OAIPolicySetResult::is_has_error_Set() const{
    return m_has_error_isSet;
}

bool OAIPolicySetResult::is_has_error_Valid() const{
    return m_has_error_isValid;
}

QList<OAIPolicyViolation> OAIPolicySetResult::getPolicyViolations() const {
    return m_policy_violations;
}
void OAIPolicySetResult::setPolicyViolations(const QList<OAIPolicyViolation> &policy_violations) {
    m_policy_violations = policy_violations;
    m_policy_violations_isSet = true;
}

bool OAIPolicySetResult::is_policy_violations_Set() const{
    return m_policy_violations_isSet;
}

bool OAIPolicySetResult::is_policy_violations_Valid() const{
    return m_policy_violations_isValid;
}

bool OAIPolicySetResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_violations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicySetResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
