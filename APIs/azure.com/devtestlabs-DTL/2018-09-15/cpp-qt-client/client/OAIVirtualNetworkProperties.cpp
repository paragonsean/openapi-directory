/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkProperties::OAIVirtualNetworkProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkProperties::OAIVirtualNetworkProperties() {
    this->initializeModel();
}

OAIVirtualNetworkProperties::~OAIVirtualNetworkProperties() {}

void OAIVirtualNetworkProperties::initializeModel() {

    m_allowed_subnets_isSet = false;
    m_allowed_subnets_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_provider_resource_id_isSet = false;
    m_external_provider_resource_id_isValid = false;

    m_external_subnets_isSet = false;
    m_external_subnets_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_subnet_overrides_isSet = false;
    m_subnet_overrides_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAIVirtualNetworkProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkProperties::fromJsonObject(QJsonObject json) {

    m_allowed_subnets_isValid = ::OpenAPI::fromJsonValue(m_allowed_subnets, json[QString("allowedSubnets")]);
    m_allowed_subnets_isSet = !json[QString("allowedSubnets")].isNull() && m_allowed_subnets_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_provider_resource_id_isValid = ::OpenAPI::fromJsonValue(m_external_provider_resource_id, json[QString("externalProviderResourceId")]);
    m_external_provider_resource_id_isSet = !json[QString("externalProviderResourceId")].isNull() && m_external_provider_resource_id_isValid;

    m_external_subnets_isValid = ::OpenAPI::fromJsonValue(m_external_subnets, json[QString("externalSubnets")]);
    m_external_subnets_isSet = !json[QString("externalSubnets")].isNull() && m_external_subnets_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_subnet_overrides_isValid = ::OpenAPI::fromJsonValue(m_subnet_overrides, json[QString("subnetOverrides")]);
    m_subnet_overrides_isSet = !json[QString("subnetOverrides")].isNull() && m_subnet_overrides_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAIVirtualNetworkProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_subnets.size() > 0) {
        obj.insert(QString("allowedSubnets"), ::OpenAPI::toJsonValue(m_allowed_subnets));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_provider_resource_id_isSet) {
        obj.insert(QString("externalProviderResourceId"), ::OpenAPI::toJsonValue(m_external_provider_resource_id));
    }
    if (m_external_subnets.size() > 0) {
        obj.insert(QString("externalSubnets"), ::OpenAPI::toJsonValue(m_external_subnets));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_subnet_overrides.size() > 0) {
        obj.insert(QString("subnetOverrides"), ::OpenAPI::toJsonValue(m_subnet_overrides));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QList<OAISubnet> OAIVirtualNetworkProperties::getAllowedSubnets() const {
    return m_allowed_subnets;
}
void OAIVirtualNetworkProperties::setAllowedSubnets(const QList<OAISubnet> &allowed_subnets) {
    m_allowed_subnets = allowed_subnets;
    m_allowed_subnets_isSet = true;
}

bool OAIVirtualNetworkProperties::is_allowed_subnets_Set() const{
    return m_allowed_subnets_isSet;
}

bool OAIVirtualNetworkProperties::is_allowed_subnets_Valid() const{
    return m_allowed_subnets_isValid;
}

QDateTime OAIVirtualNetworkProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIVirtualNetworkProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIVirtualNetworkProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIVirtualNetworkProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIVirtualNetworkProperties::getDescription() const {
    return m_description;
}
void OAIVirtualNetworkProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVirtualNetworkProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVirtualNetworkProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVirtualNetworkProperties::getExternalProviderResourceId() const {
    return m_external_provider_resource_id;
}
void OAIVirtualNetworkProperties::setExternalProviderResourceId(const QString &external_provider_resource_id) {
    m_external_provider_resource_id = external_provider_resource_id;
    m_external_provider_resource_id_isSet = true;
}

bool OAIVirtualNetworkProperties::is_external_provider_resource_id_Set() const{
    return m_external_provider_resource_id_isSet;
}

bool OAIVirtualNetworkProperties::is_external_provider_resource_id_Valid() const{
    return m_external_provider_resource_id_isValid;
}

QList<OAIExternalSubnet> OAIVirtualNetworkProperties::getExternalSubnets() const {
    return m_external_subnets;
}
void OAIVirtualNetworkProperties::setExternalSubnets(const QList<OAIExternalSubnet> &external_subnets) {
    m_external_subnets = external_subnets;
    m_external_subnets_isSet = true;
}

bool OAIVirtualNetworkProperties::is_external_subnets_Set() const{
    return m_external_subnets_isSet;
}

bool OAIVirtualNetworkProperties::is_external_subnets_Valid() const{
    return m_external_subnets_isValid;
}

QString OAIVirtualNetworkProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualNetworkProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualNetworkProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualNetworkProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAISubnetOverride> OAIVirtualNetworkProperties::getSubnetOverrides() const {
    return m_subnet_overrides;
}
void OAIVirtualNetworkProperties::setSubnetOverrides(const QList<OAISubnetOverride> &subnet_overrides) {
    m_subnet_overrides = subnet_overrides;
    m_subnet_overrides_isSet = true;
}

bool OAIVirtualNetworkProperties::is_subnet_overrides_Set() const{
    return m_subnet_overrides_isSet;
}

bool OAIVirtualNetworkProperties::is_subnet_overrides_Valid() const{
    return m_subnet_overrides_isValid;
}

QString OAIVirtualNetworkProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIVirtualNetworkProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIVirtualNetworkProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIVirtualNetworkProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAIVirtualNetworkProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_provider_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
