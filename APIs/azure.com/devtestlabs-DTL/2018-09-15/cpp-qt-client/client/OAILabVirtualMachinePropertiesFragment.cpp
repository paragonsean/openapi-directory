/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabVirtualMachinePropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabVirtualMachinePropertiesFragment::OAILabVirtualMachinePropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabVirtualMachinePropertiesFragment::OAILabVirtualMachinePropertiesFragment() {
    this->initializeModel();
}

OAILabVirtualMachinePropertiesFragment::~OAILabVirtualMachinePropertiesFragment() {}

void OAILabVirtualMachinePropertiesFragment::initializeModel() {

    m_allow_claim_isSet = false;
    m_allow_claim_isValid = false;

    m_artifact_deployment_status_isSet = false;
    m_artifact_deployment_status_isValid = false;

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_compute_id_isSet = false;
    m_compute_id_isValid = false;

    m_created_by_user_isSet = false;
    m_created_by_user_isValid = false;

    m_created_by_user_id_isSet = false;
    m_created_by_user_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_custom_image_id_isSet = false;
    m_custom_image_id_isValid = false;

    m_data_disk_parameters_isSet = false;
    m_data_disk_parameters_isValid = false;

    m_disallow_public_ip_address_isSet = false;
    m_disallow_public_ip_address_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_gallery_image_reference_isSet = false;
    m_gallery_image_reference_isValid = false;

    m_is_authentication_with_ssh_key_isSet = false;
    m_is_authentication_with_ssh_key_isValid = false;

    m_lab_subnet_name_isSet = false;
    m_lab_subnet_name_isValid = false;

    m_lab_virtual_network_id_isSet = false;
    m_lab_virtual_network_id_isValid = false;

    m_last_known_power_state_isSet = false;
    m_last_known_power_state_isValid = false;

    m_network_interface_isSet = false;
    m_network_interface_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_owner_object_id_isSet = false;
    m_owner_object_id_isValid = false;

    m_owner_user_principal_name_isSet = false;
    m_owner_user_principal_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_schedule_parameters_isSet = false;
    m_schedule_parameters_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_ssh_key_isSet = false;
    m_ssh_key_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_virtual_machine_creation_source_isSet = false;
    m_virtual_machine_creation_source_isValid = false;
}

void OAILabVirtualMachinePropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabVirtualMachinePropertiesFragment::fromJsonObject(QJsonObject json) {

    m_allow_claim_isValid = ::OpenAPI::fromJsonValue(m_allow_claim, json[QString("allowClaim")]);
    m_allow_claim_isSet = !json[QString("allowClaim")].isNull() && m_allow_claim_isValid;

    m_artifact_deployment_status_isValid = ::OpenAPI::fromJsonValue(m_artifact_deployment_status, json[QString("artifactDeploymentStatus")]);
    m_artifact_deployment_status_isSet = !json[QString("artifactDeploymentStatus")].isNull() && m_artifact_deployment_status_isValid;

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_compute_id_isValid = ::OpenAPI::fromJsonValue(m_compute_id, json[QString("computeId")]);
    m_compute_id_isSet = !json[QString("computeId")].isNull() && m_compute_id_isValid;

    m_created_by_user_isValid = ::OpenAPI::fromJsonValue(m_created_by_user, json[QString("createdByUser")]);
    m_created_by_user_isSet = !json[QString("createdByUser")].isNull() && m_created_by_user_isValid;

    m_created_by_user_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_user_id, json[QString("createdByUserId")]);
    m_created_by_user_id_isSet = !json[QString("createdByUserId")].isNull() && m_created_by_user_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_custom_image_id_isValid = ::OpenAPI::fromJsonValue(m_custom_image_id, json[QString("customImageId")]);
    m_custom_image_id_isSet = !json[QString("customImageId")].isNull() && m_custom_image_id_isValid;

    m_data_disk_parameters_isValid = ::OpenAPI::fromJsonValue(m_data_disk_parameters, json[QString("dataDiskParameters")]);
    m_data_disk_parameters_isSet = !json[QString("dataDiskParameters")].isNull() && m_data_disk_parameters_isValid;

    m_disallow_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_disallow_public_ip_address, json[QString("disallowPublicIpAddress")]);
    m_disallow_public_ip_address_isSet = !json[QString("disallowPublicIpAddress")].isNull() && m_disallow_public_ip_address_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_gallery_image_reference_isValid = ::OpenAPI::fromJsonValue(m_gallery_image_reference, json[QString("galleryImageReference")]);
    m_gallery_image_reference_isSet = !json[QString("galleryImageReference")].isNull() && m_gallery_image_reference_isValid;

    m_is_authentication_with_ssh_key_isValid = ::OpenAPI::fromJsonValue(m_is_authentication_with_ssh_key, json[QString("isAuthenticationWithSshKey")]);
    m_is_authentication_with_ssh_key_isSet = !json[QString("isAuthenticationWithSshKey")].isNull() && m_is_authentication_with_ssh_key_isValid;

    m_lab_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_lab_subnet_name, json[QString("labSubnetName")]);
    m_lab_subnet_name_isSet = !json[QString("labSubnetName")].isNull() && m_lab_subnet_name_isValid;

    m_lab_virtual_network_id_isValid = ::OpenAPI::fromJsonValue(m_lab_virtual_network_id, json[QString("labVirtualNetworkId")]);
    m_lab_virtual_network_id_isSet = !json[QString("labVirtualNetworkId")].isNull() && m_lab_virtual_network_id_isValid;

    m_last_known_power_state_isValid = ::OpenAPI::fromJsonValue(m_last_known_power_state, json[QString("lastKnownPowerState")]);
    m_last_known_power_state_isSet = !json[QString("lastKnownPowerState")].isNull() && m_last_known_power_state_isValid;

    m_network_interface_isValid = ::OpenAPI::fromJsonValue(m_network_interface, json[QString("networkInterface")]);
    m_network_interface_isSet = !json[QString("networkInterface")].isNull() && m_network_interface_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_owner_object_id_isValid = ::OpenAPI::fromJsonValue(m_owner_object_id, json[QString("ownerObjectId")]);
    m_owner_object_id_isSet = !json[QString("ownerObjectId")].isNull() && m_owner_object_id_isValid;

    m_owner_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_owner_user_principal_name, json[QString("ownerUserPrincipalName")]);
    m_owner_user_principal_name_isSet = !json[QString("ownerUserPrincipalName")].isNull() && m_owner_user_principal_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_schedule_parameters_isValid = ::OpenAPI::fromJsonValue(m_schedule_parameters, json[QString("scheduleParameters")]);
    m_schedule_parameters_isSet = !json[QString("scheduleParameters")].isNull() && m_schedule_parameters_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_ssh_key_isValid = ::OpenAPI::fromJsonValue(m_ssh_key, json[QString("sshKey")]);
    m_ssh_key_isSet = !json[QString("sshKey")].isNull() && m_ssh_key_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_virtual_machine_creation_source_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_creation_source, json[QString("virtualMachineCreationSource")]);
    m_virtual_machine_creation_source_isSet = !json[QString("virtualMachineCreationSource")].isNull() && m_virtual_machine_creation_source_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabVirtualMachinePropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_claim_isSet) {
        obj.insert(QString("allowClaim"), ::OpenAPI::toJsonValue(m_allow_claim));
    }
    if (m_artifact_deployment_status.isSet()) {
        obj.insert(QString("artifactDeploymentStatus"), ::OpenAPI::toJsonValue(m_artifact_deployment_status));
    }
    if (m_artifacts.size() > 0) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_compute_id_isSet) {
        obj.insert(QString("computeId"), ::OpenAPI::toJsonValue(m_compute_id));
    }
    if (m_created_by_user_isSet) {
        obj.insert(QString("createdByUser"), ::OpenAPI::toJsonValue(m_created_by_user));
    }
    if (m_created_by_user_id_isSet) {
        obj.insert(QString("createdByUserId"), ::OpenAPI::toJsonValue(m_created_by_user_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_custom_image_id_isSet) {
        obj.insert(QString("customImageId"), ::OpenAPI::toJsonValue(m_custom_image_id));
    }
    if (m_data_disk_parameters.size() > 0) {
        obj.insert(QString("dataDiskParameters"), ::OpenAPI::toJsonValue(m_data_disk_parameters));
    }
    if (m_disallow_public_ip_address_isSet) {
        obj.insert(QString("disallowPublicIpAddress"), ::OpenAPI::toJsonValue(m_disallow_public_ip_address));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_gallery_image_reference.isSet()) {
        obj.insert(QString("galleryImageReference"), ::OpenAPI::toJsonValue(m_gallery_image_reference));
    }
    if (m_is_authentication_with_ssh_key_isSet) {
        obj.insert(QString("isAuthenticationWithSshKey"), ::OpenAPI::toJsonValue(m_is_authentication_with_ssh_key));
    }
    if (m_lab_subnet_name_isSet) {
        obj.insert(QString("labSubnetName"), ::OpenAPI::toJsonValue(m_lab_subnet_name));
    }
    if (m_lab_virtual_network_id_isSet) {
        obj.insert(QString("labVirtualNetworkId"), ::OpenAPI::toJsonValue(m_lab_virtual_network_id));
    }
    if (m_last_known_power_state_isSet) {
        obj.insert(QString("lastKnownPowerState"), ::OpenAPI::toJsonValue(m_last_known_power_state));
    }
    if (m_network_interface.isSet()) {
        obj.insert(QString("networkInterface"), ::OpenAPI::toJsonValue(m_network_interface));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_owner_object_id_isSet) {
        obj.insert(QString("ownerObjectId"), ::OpenAPI::toJsonValue(m_owner_object_id));
    }
    if (m_owner_user_principal_name_isSet) {
        obj.insert(QString("ownerUserPrincipalName"), ::OpenAPI::toJsonValue(m_owner_user_principal_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_schedule_parameters.size() > 0) {
        obj.insert(QString("scheduleParameters"), ::OpenAPI::toJsonValue(m_schedule_parameters));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_ssh_key_isSet) {
        obj.insert(QString("sshKey"), ::OpenAPI::toJsonValue(m_ssh_key));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_virtual_machine_creation_source_isSet) {
        obj.insert(QString("virtualMachineCreationSource"), ::OpenAPI::toJsonValue(m_virtual_machine_creation_source));
    }
    return obj;
}

bool OAILabVirtualMachinePropertiesFragment::isAllowClaim() const {
    return m_allow_claim;
}
void OAILabVirtualMachinePropertiesFragment::setAllowClaim(const bool &allow_claim) {
    m_allow_claim = allow_claim;
    m_allow_claim_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_allow_claim_Set() const{
    return m_allow_claim_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_allow_claim_Valid() const{
    return m_allow_claim_isValid;
}

OAIArtifactDeploymentStatusPropertiesFragment OAILabVirtualMachinePropertiesFragment::getArtifactDeploymentStatus() const {
    return m_artifact_deployment_status;
}
void OAILabVirtualMachinePropertiesFragment::setArtifactDeploymentStatus(const OAIArtifactDeploymentStatusPropertiesFragment &artifact_deployment_status) {
    m_artifact_deployment_status = artifact_deployment_status;
    m_artifact_deployment_status_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_artifact_deployment_status_Set() const{
    return m_artifact_deployment_status_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_artifact_deployment_status_Valid() const{
    return m_artifact_deployment_status_isValid;
}

QList<OAIArtifactInstallPropertiesFragment> OAILabVirtualMachinePropertiesFragment::getArtifacts() const {
    return m_artifacts;
}
void OAILabVirtualMachinePropertiesFragment::setArtifacts(const QList<OAIArtifactInstallPropertiesFragment> &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getComputeId() const {
    return m_compute_id;
}
void OAILabVirtualMachinePropertiesFragment::setComputeId(const QString &compute_id) {
    m_compute_id = compute_id;
    m_compute_id_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_compute_id_Set() const{
    return m_compute_id_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_compute_id_Valid() const{
    return m_compute_id_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getCreatedByUser() const {
    return m_created_by_user;
}
void OAILabVirtualMachinePropertiesFragment::setCreatedByUser(const QString &created_by_user) {
    m_created_by_user = created_by_user;
    m_created_by_user_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_created_by_user_Set() const{
    return m_created_by_user_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_created_by_user_Valid() const{
    return m_created_by_user_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getCreatedByUserId() const {
    return m_created_by_user_id;
}
void OAILabVirtualMachinePropertiesFragment::setCreatedByUserId(const QString &created_by_user_id) {
    m_created_by_user_id = created_by_user_id;
    m_created_by_user_id_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_created_by_user_id_Set() const{
    return m_created_by_user_id_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_created_by_user_id_Valid() const{
    return m_created_by_user_id_isValid;
}

QDateTime OAILabVirtualMachinePropertiesFragment::getCreatedDate() const {
    return m_created_date;
}
void OAILabVirtualMachinePropertiesFragment::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getCustomImageId() const {
    return m_custom_image_id;
}
void OAILabVirtualMachinePropertiesFragment::setCustomImageId(const QString &custom_image_id) {
    m_custom_image_id = custom_image_id;
    m_custom_image_id_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_custom_image_id_Set() const{
    return m_custom_image_id_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_custom_image_id_Valid() const{
    return m_custom_image_id_isValid;
}

QList<OAIDataDiskPropertiesFragment> OAILabVirtualMachinePropertiesFragment::getDataDiskParameters() const {
    return m_data_disk_parameters;
}
void OAILabVirtualMachinePropertiesFragment::setDataDiskParameters(const QList<OAIDataDiskPropertiesFragment> &data_disk_parameters) {
    m_data_disk_parameters = data_disk_parameters;
    m_data_disk_parameters_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_data_disk_parameters_Set() const{
    return m_data_disk_parameters_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_data_disk_parameters_Valid() const{
    return m_data_disk_parameters_isValid;
}

bool OAILabVirtualMachinePropertiesFragment::isDisallowPublicIpAddress() const {
    return m_disallow_public_ip_address;
}
void OAILabVirtualMachinePropertiesFragment::setDisallowPublicIpAddress(const bool &disallow_public_ip_address) {
    m_disallow_public_ip_address = disallow_public_ip_address;
    m_disallow_public_ip_address_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_disallow_public_ip_address_Set() const{
    return m_disallow_public_ip_address_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_disallow_public_ip_address_Valid() const{
    return m_disallow_public_ip_address_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getEnvironmentId() const {
    return m_environment_id;
}
void OAILabVirtualMachinePropertiesFragment::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAILabVirtualMachinePropertiesFragment::getExpirationDate() const {
    return m_expiration_date;
}
void OAILabVirtualMachinePropertiesFragment::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getFqdn() const {
    return m_fqdn;
}
void OAILabVirtualMachinePropertiesFragment::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

OAIGalleryImageReferenceFragment OAILabVirtualMachinePropertiesFragment::getGalleryImageReference() const {
    return m_gallery_image_reference;
}
void OAILabVirtualMachinePropertiesFragment::setGalleryImageReference(const OAIGalleryImageReferenceFragment &gallery_image_reference) {
    m_gallery_image_reference = gallery_image_reference;
    m_gallery_image_reference_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_gallery_image_reference_Set() const{
    return m_gallery_image_reference_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_gallery_image_reference_Valid() const{
    return m_gallery_image_reference_isValid;
}

bool OAILabVirtualMachinePropertiesFragment::isIsAuthenticationWithSshKey() const {
    return m_is_authentication_with_ssh_key;
}
void OAILabVirtualMachinePropertiesFragment::setIsAuthenticationWithSshKey(const bool &is_authentication_with_ssh_key) {
    m_is_authentication_with_ssh_key = is_authentication_with_ssh_key;
    m_is_authentication_with_ssh_key_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_is_authentication_with_ssh_key_Set() const{
    return m_is_authentication_with_ssh_key_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_is_authentication_with_ssh_key_Valid() const{
    return m_is_authentication_with_ssh_key_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getLabSubnetName() const {
    return m_lab_subnet_name;
}
void OAILabVirtualMachinePropertiesFragment::setLabSubnetName(const QString &lab_subnet_name) {
    m_lab_subnet_name = lab_subnet_name;
    m_lab_subnet_name_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_lab_subnet_name_Set() const{
    return m_lab_subnet_name_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_lab_subnet_name_Valid() const{
    return m_lab_subnet_name_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getLabVirtualNetworkId() const {
    return m_lab_virtual_network_id;
}
void OAILabVirtualMachinePropertiesFragment::setLabVirtualNetworkId(const QString &lab_virtual_network_id) {
    m_lab_virtual_network_id = lab_virtual_network_id;
    m_lab_virtual_network_id_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_lab_virtual_network_id_Set() const{
    return m_lab_virtual_network_id_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_lab_virtual_network_id_Valid() const{
    return m_lab_virtual_network_id_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getLastKnownPowerState() const {
    return m_last_known_power_state;
}
void OAILabVirtualMachinePropertiesFragment::setLastKnownPowerState(const QString &last_known_power_state) {
    m_last_known_power_state = last_known_power_state;
    m_last_known_power_state_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_last_known_power_state_Set() const{
    return m_last_known_power_state_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_last_known_power_state_Valid() const{
    return m_last_known_power_state_isValid;
}

OAINetworkInterfacePropertiesFragment OAILabVirtualMachinePropertiesFragment::getNetworkInterface() const {
    return m_network_interface;
}
void OAILabVirtualMachinePropertiesFragment::setNetworkInterface(const OAINetworkInterfacePropertiesFragment &network_interface) {
    m_network_interface = network_interface;
    m_network_interface_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_network_interface_Set() const{
    return m_network_interface_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_network_interface_Valid() const{
    return m_network_interface_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getNotes() const {
    return m_notes;
}
void OAILabVirtualMachinePropertiesFragment::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getOsType() const {
    return m_os_type;
}
void OAILabVirtualMachinePropertiesFragment::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getOwnerObjectId() const {
    return m_owner_object_id;
}
void OAILabVirtualMachinePropertiesFragment::setOwnerObjectId(const QString &owner_object_id) {
    m_owner_object_id = owner_object_id;
    m_owner_object_id_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_owner_object_id_Set() const{
    return m_owner_object_id_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_owner_object_id_Valid() const{
    return m_owner_object_id_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getOwnerUserPrincipalName() const {
    return m_owner_user_principal_name;
}
void OAILabVirtualMachinePropertiesFragment::setOwnerUserPrincipalName(const QString &owner_user_principal_name) {
    m_owner_user_principal_name = owner_user_principal_name;
    m_owner_user_principal_name_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_owner_user_principal_name_Set() const{
    return m_owner_user_principal_name_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_owner_user_principal_name_Valid() const{
    return m_owner_user_principal_name_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getPassword() const {
    return m_password;
}
void OAILabVirtualMachinePropertiesFragment::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_password_Set() const{
    return m_password_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_password_Valid() const{
    return m_password_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getPlanId() const {
    return m_plan_id;
}
void OAILabVirtualMachinePropertiesFragment::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QList<OAIScheduleCreationParameterFragment> OAILabVirtualMachinePropertiesFragment::getScheduleParameters() const {
    return m_schedule_parameters;
}
void OAILabVirtualMachinePropertiesFragment::setScheduleParameters(const QList<OAIScheduleCreationParameterFragment> &schedule_parameters) {
    m_schedule_parameters = schedule_parameters;
    m_schedule_parameters_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_schedule_parameters_Set() const{
    return m_schedule_parameters_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_schedule_parameters_Valid() const{
    return m_schedule_parameters_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getSize() const {
    return m_size;
}
void OAILabVirtualMachinePropertiesFragment::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_size_Set() const{
    return m_size_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_size_Valid() const{
    return m_size_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getSshKey() const {
    return m_ssh_key;
}
void OAILabVirtualMachinePropertiesFragment::setSshKey(const QString &ssh_key) {
    m_ssh_key = ssh_key;
    m_ssh_key_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_ssh_key_Set() const{
    return m_ssh_key_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_ssh_key_Valid() const{
    return m_ssh_key_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getStorageType() const {
    return m_storage_type;
}
void OAILabVirtualMachinePropertiesFragment::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getUserName() const {
    return m_user_name;
}
void OAILabVirtualMachinePropertiesFragment::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAILabVirtualMachinePropertiesFragment::getVirtualMachineCreationSource() const {
    return m_virtual_machine_creation_source;
}
void OAILabVirtualMachinePropertiesFragment::setVirtualMachineCreationSource(const QString &virtual_machine_creation_source) {
    m_virtual_machine_creation_source = virtual_machine_creation_source;
    m_virtual_machine_creation_source_isSet = true;
}

bool OAILabVirtualMachinePropertiesFragment::is_virtual_machine_creation_source_Set() const{
    return m_virtual_machine_creation_source_isSet;
}

bool OAILabVirtualMachinePropertiesFragment::is_virtual_machine_creation_source_Valid() const{
    return m_virtual_machine_creation_source_isValid;
}

bool OAILabVirtualMachinePropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_deployment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disk_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disallow_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gallery_image_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_authentication_with_ssh_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_virtual_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_known_power_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_creation_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabVirtualMachinePropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
