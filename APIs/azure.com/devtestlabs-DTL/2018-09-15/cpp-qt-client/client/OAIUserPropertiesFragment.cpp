/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPropertiesFragment::OAIUserPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPropertiesFragment::OAIUserPropertiesFragment() {
    this->initializeModel();
}

OAIUserPropertiesFragment::~OAIUserPropertiesFragment() {}

void OAIUserPropertiesFragment::initializeModel() {

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_secret_store_isSet = false;
    m_secret_store_isValid = false;
}

void OAIUserPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_secret_store_isValid = ::OpenAPI::fromJsonValue(m_secret_store, json[QString("secretStore")]);
    m_secret_store_isSet = !json[QString("secretStore")].isNull() && m_secret_store_isValid;
}

QString OAIUserPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_identity.isSet()) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_secret_store.isSet()) {
        obj.insert(QString("secretStore"), ::OpenAPI::toJsonValue(m_secret_store));
    }
    return obj;
}

OAIUserIdentityFragment OAIUserPropertiesFragment::getIdentity() const {
    return m_identity;
}
void OAIUserPropertiesFragment::setIdentity(const OAIUserIdentityFragment &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIUserPropertiesFragment::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIUserPropertiesFragment::is_identity_Valid() const{
    return m_identity_isValid;
}

OAIUserSecretStoreFragment OAIUserPropertiesFragment::getSecretStore() const {
    return m_secret_store;
}
void OAIUserPropertiesFragment::setSecretStore(const OAIUserSecretStoreFragment &secret_store) {
    m_secret_store = secret_store;
    m_secret_store_isSet = true;
}

bool OAIUserPropertiesFragment::is_secret_store_Set() const{
    return m_secret_store_isSet;
}

bool OAIUserPropertiesFragment::is_secret_store_Valid() const{
    return m_secret_store_isValid;
}

bool OAIUserPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_store.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
