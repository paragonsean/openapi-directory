/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGlobalSchedulesApi_H
#define OAI_OAIGlobalSchedulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIRetargetScheduleProperties.h"
#include "OAISchedule.h"
#include "OAIScheduleFragment.h"
#include "OAIScheduleList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGlobalSchedulesApi : public QObject {
    Q_OBJECT

public:
    OAIGlobalSchedulesApi(const int timeOut = 0);
    ~OAIGlobalSchedulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule OAISchedule [required]
    */
    virtual void globalSchedulesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAISchedule &schedule);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalSchedulesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalSchedulesExecute(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void globalSchedulesGet(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void globalSchedulesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void globalSchedulesListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  retarget_schedule_properties OAIRetargetScheduleProperties [required]
    */
    virtual void globalSchedulesRetarget(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAIRetargetScheduleProperties &retarget_schedule_properties);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule OAIScheduleFragment [required]
    */
    virtual void globalSchedulesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &name, const QString &api_version, const OAIScheduleFragment &schedule);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void globalSchedulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void globalSchedulesDeleteCallback(OAIHttpRequestWorker *worker);
    void globalSchedulesExecuteCallback(OAIHttpRequestWorker *worker);
    void globalSchedulesGetCallback(OAIHttpRequestWorker *worker);
    void globalSchedulesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void globalSchedulesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void globalSchedulesRetargetCallback(OAIHttpRequestWorker *worker);
    void globalSchedulesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void globalSchedulesCreateOrUpdateSignal(OAISchedule summary);
    void globalSchedulesDeleteSignal();
    void globalSchedulesExecuteSignal();
    void globalSchedulesGetSignal(OAISchedule summary);
    void globalSchedulesListByResourceGroupSignal(OAIScheduleList summary);
    void globalSchedulesListBySubscriptionSignal(OAIScheduleList summary);
    void globalSchedulesRetargetSignal();
    void globalSchedulesUpdateSignal(OAISchedule summary);


    void globalSchedulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void globalSchedulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void globalSchedulesExecuteSignalFull(OAIHttpRequestWorker *worker);
    void globalSchedulesGetSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void globalSchedulesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIScheduleList summary);
    void globalSchedulesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIScheduleList summary);
    void globalSchedulesRetargetSignalFull(OAIHttpRequestWorker *worker);
    void globalSchedulesUpdateSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);

    Q_DECL_DEPRECATED_X("Use globalSchedulesCreateOrUpdateSignalError() instead")
    void globalSchedulesCreateOrUpdateSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesCreateOrUpdateSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesDeleteSignalError() instead")
    void globalSchedulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesExecuteSignalError() instead")
    void globalSchedulesExecuteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesExecuteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesGetSignalError() instead")
    void globalSchedulesGetSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesGetSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesListByResourceGroupSignalError() instead")
    void globalSchedulesListByResourceGroupSignalE(OAIScheduleList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesListByResourceGroupSignalError(OAIScheduleList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesListBySubscriptionSignalError() instead")
    void globalSchedulesListBySubscriptionSignalE(OAIScheduleList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesListBySubscriptionSignalError(OAIScheduleList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesRetargetSignalError() instead")
    void globalSchedulesRetargetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesRetargetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesUpdateSignalError() instead")
    void globalSchedulesUpdateSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesUpdateSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use globalSchedulesCreateOrUpdateSignalErrorFull() instead")
    void globalSchedulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesDeleteSignalErrorFull() instead")
    void globalSchedulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesExecuteSignalErrorFull() instead")
    void globalSchedulesExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesGetSignalErrorFull() instead")
    void globalSchedulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesListByResourceGroupSignalErrorFull() instead")
    void globalSchedulesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesListBySubscriptionSignalErrorFull() instead")
    void globalSchedulesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesRetargetSignalErrorFull() instead")
    void globalSchedulesRetargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesRetargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalSchedulesUpdateSignalErrorFull() instead")
    void globalSchedulesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalSchedulesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
