/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostThresholdProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostThresholdProperties::OAICostThresholdProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostThresholdProperties::OAICostThresholdProperties() {
    this->initializeModel();
}

OAICostThresholdProperties::~OAICostThresholdProperties() {}

void OAICostThresholdProperties::initializeModel() {

    m_display_on_chart_isSet = false;
    m_display_on_chart_isValid = false;

    m_notification_sent_isSet = false;
    m_notification_sent_isValid = false;

    m_percentage_threshold_isSet = false;
    m_percentage_threshold_isValid = false;

    m_send_notification_when_exceeded_isSet = false;
    m_send_notification_when_exceeded_isValid = false;

    m_threshold_id_isSet = false;
    m_threshold_id_isValid = false;
}

void OAICostThresholdProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostThresholdProperties::fromJsonObject(QJsonObject json) {

    m_display_on_chart_isValid = ::OpenAPI::fromJsonValue(m_display_on_chart, json[QString("displayOnChart")]);
    m_display_on_chart_isSet = !json[QString("displayOnChart")].isNull() && m_display_on_chart_isValid;

    m_notification_sent_isValid = ::OpenAPI::fromJsonValue(m_notification_sent, json[QString("notificationSent")]);
    m_notification_sent_isSet = !json[QString("notificationSent")].isNull() && m_notification_sent_isValid;

    m_percentage_threshold_isValid = ::OpenAPI::fromJsonValue(m_percentage_threshold, json[QString("percentageThreshold")]);
    m_percentage_threshold_isSet = !json[QString("percentageThreshold")].isNull() && m_percentage_threshold_isValid;

    m_send_notification_when_exceeded_isValid = ::OpenAPI::fromJsonValue(m_send_notification_when_exceeded, json[QString("sendNotificationWhenExceeded")]);
    m_send_notification_when_exceeded_isSet = !json[QString("sendNotificationWhenExceeded")].isNull() && m_send_notification_when_exceeded_isValid;

    m_threshold_id_isValid = ::OpenAPI::fromJsonValue(m_threshold_id, json[QString("thresholdId")]);
    m_threshold_id_isSet = !json[QString("thresholdId")].isNull() && m_threshold_id_isValid;
}

QString OAICostThresholdProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostThresholdProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_display_on_chart_isSet) {
        obj.insert(QString("displayOnChart"), ::OpenAPI::toJsonValue(m_display_on_chart));
    }
    if (m_notification_sent_isSet) {
        obj.insert(QString("notificationSent"), ::OpenAPI::toJsonValue(m_notification_sent));
    }
    if (m_percentage_threshold.isSet()) {
        obj.insert(QString("percentageThreshold"), ::OpenAPI::toJsonValue(m_percentage_threshold));
    }
    if (m_send_notification_when_exceeded_isSet) {
        obj.insert(QString("sendNotificationWhenExceeded"), ::OpenAPI::toJsonValue(m_send_notification_when_exceeded));
    }
    if (m_threshold_id_isSet) {
        obj.insert(QString("thresholdId"), ::OpenAPI::toJsonValue(m_threshold_id));
    }
    return obj;
}

QString OAICostThresholdProperties::getDisplayOnChart() const {
    return m_display_on_chart;
}
void OAICostThresholdProperties::setDisplayOnChart(const QString &display_on_chart) {
    m_display_on_chart = display_on_chart;
    m_display_on_chart_isSet = true;
}

bool OAICostThresholdProperties::is_display_on_chart_Set() const{
    return m_display_on_chart_isSet;
}

bool OAICostThresholdProperties::is_display_on_chart_Valid() const{
    return m_display_on_chart_isValid;
}

QString OAICostThresholdProperties::getNotificationSent() const {
    return m_notification_sent;
}
void OAICostThresholdProperties::setNotificationSent(const QString &notification_sent) {
    m_notification_sent = notification_sent;
    m_notification_sent_isSet = true;
}

bool OAICostThresholdProperties::is_notification_sent_Set() const{
    return m_notification_sent_isSet;
}

bool OAICostThresholdProperties::is_notification_sent_Valid() const{
    return m_notification_sent_isValid;
}

OAIPercentageCostThresholdProperties OAICostThresholdProperties::getPercentageThreshold() const {
    return m_percentage_threshold;
}
void OAICostThresholdProperties::setPercentageThreshold(const OAIPercentageCostThresholdProperties &percentage_threshold) {
    m_percentage_threshold = percentage_threshold;
    m_percentage_threshold_isSet = true;
}

bool OAICostThresholdProperties::is_percentage_threshold_Set() const{
    return m_percentage_threshold_isSet;
}

bool OAICostThresholdProperties::is_percentage_threshold_Valid() const{
    return m_percentage_threshold_isValid;
}

QString OAICostThresholdProperties::getSendNotificationWhenExceeded() const {
    return m_send_notification_when_exceeded;
}
void OAICostThresholdProperties::setSendNotificationWhenExceeded(const QString &send_notification_when_exceeded) {
    m_send_notification_when_exceeded = send_notification_when_exceeded;
    m_send_notification_when_exceeded_isSet = true;
}

bool OAICostThresholdProperties::is_send_notification_when_exceeded_Set() const{
    return m_send_notification_when_exceeded_isSet;
}

bool OAICostThresholdProperties::is_send_notification_when_exceeded_Valid() const{
    return m_send_notification_when_exceeded_isValid;
}

QString OAICostThresholdProperties::getThresholdId() const {
    return m_threshold_id;
}
void OAICostThresholdProperties::setThresholdId(const QString &threshold_id) {
    m_threshold_id = threshold_id;
    m_threshold_id_isSet = true;
}

bool OAICostThresholdProperties::is_threshold_id_Set() const{
    return m_threshold_id_isSet;
}

bool OAICostThresholdProperties::is_threshold_id_Valid() const{
    return m_threshold_id_isValid;
}

bool OAICostThresholdProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_on_chart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_notification_when_exceeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostThresholdProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
