# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserIdentityFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, object_id: str=None, principal_id: str=None, principal_name: str=None, tenant_id: str=None):
        """UserIdentityFragment - a model defined in OpenAPI

        :param app_id: The app_id of this UserIdentityFragment.
        :param object_id: The object_id of this UserIdentityFragment.
        :param principal_id: The principal_id of this UserIdentityFragment.
        :param principal_name: The principal_name of this UserIdentityFragment.
        :param tenant_id: The tenant_id of this UserIdentityFragment.
        """
        self.openapi_types = {
            'app_id': str,
            'object_id': str,
            'principal_id': str,
            'principal_name': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'object_id': 'objectId',
            'principal_id': 'principalId',
            'principal_name': 'principalName',
            'tenant_id': 'tenantId'
        }

        self._app_id = app_id
        self._object_id = object_id
        self._principal_id = principal_id
        self._principal_name = principal_name
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserIdentityFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserIdentityFragment of this UserIdentityFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this UserIdentityFragment.

        Set to the app Id of the client JWT making the request.

        :return: The app_id of this UserIdentityFragment.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this UserIdentityFragment.

        Set to the app Id of the client JWT making the request.

        :param app_id: The app_id of this UserIdentityFragment.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def object_id(self):
        """Gets the object_id of this UserIdentityFragment.

        Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available.

        :return: The object_id of this UserIdentityFragment.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this UserIdentityFragment.

        Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available.

        :param object_id: The object_id of this UserIdentityFragment.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def principal_id(self):
        """Gets the principal_id of this UserIdentityFragment.

        Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id.

        :return: The principal_id of this UserIdentityFragment.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this UserIdentityFragment.

        Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id.

        :param principal_id: The principal_id of this UserIdentityFragment.
        :type principal_id: str
        """

        self._principal_id = principal_id

    @property
    def principal_name(self):
        """Gets the principal_name of this UserIdentityFragment.

        Set to the principal name / UPN of the client JWT making the request.

        :return: The principal_name of this UserIdentityFragment.
        :rtype: str
        """
        return self._principal_name

    @principal_name.setter
    def principal_name(self, principal_name):
        """Sets the principal_name of this UserIdentityFragment.

        Set to the principal name / UPN of the client JWT making the request.

        :param principal_name: The principal_name of this UserIdentityFragment.
        :type principal_name: str
        """

        self._principal_name = principal_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UserIdentityFragment.

        Set to the tenant ID of the client JWT making the request.

        :return: The tenant_id of this UserIdentityFragment.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UserIdentityFragment.

        Set to the tenant ID of the client JWT making the request.

        :param tenant_id: The tenant_id of this UserIdentityFragment.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
