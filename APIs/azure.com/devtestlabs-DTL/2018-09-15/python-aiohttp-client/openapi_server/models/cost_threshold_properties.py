# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.percentage_cost_threshold_properties import PercentageCostThresholdProperties
from openapi_server import util


class CostThresholdProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_on_chart: str=None, notification_sent: str=None, percentage_threshold: PercentageCostThresholdProperties=None, send_notification_when_exceeded: str=None, threshold_id: str=None):
        """CostThresholdProperties - a model defined in OpenAPI

        :param display_on_chart: The display_on_chart of this CostThresholdProperties.
        :param notification_sent: The notification_sent of this CostThresholdProperties.
        :param percentage_threshold: The percentage_threshold of this CostThresholdProperties.
        :param send_notification_when_exceeded: The send_notification_when_exceeded of this CostThresholdProperties.
        :param threshold_id: The threshold_id of this CostThresholdProperties.
        """
        self.openapi_types = {
            'display_on_chart': str,
            'notification_sent': str,
            'percentage_threshold': PercentageCostThresholdProperties,
            'send_notification_when_exceeded': str,
            'threshold_id': str
        }

        self.attribute_map = {
            'display_on_chart': 'displayOnChart',
            'notification_sent': 'notificationSent',
            'percentage_threshold': 'percentageThreshold',
            'send_notification_when_exceeded': 'sendNotificationWhenExceeded',
            'threshold_id': 'thresholdId'
        }

        self._display_on_chart = display_on_chart
        self._notification_sent = notification_sent
        self._percentage_threshold = percentage_threshold
        self._send_notification_when_exceeded = send_notification_when_exceeded
        self._threshold_id = threshold_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostThresholdProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostThresholdProperties of this CostThresholdProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_on_chart(self):
        """Gets the display_on_chart of this CostThresholdProperties.

        Indicates whether this threshold will be displayed on cost charts.

        :return: The display_on_chart of this CostThresholdProperties.
        :rtype: str
        """
        return self._display_on_chart

    @display_on_chart.setter
    def display_on_chart(self, display_on_chart):
        """Sets the display_on_chart of this CostThresholdProperties.

        Indicates whether this threshold will be displayed on cost charts.

        :param display_on_chart: The display_on_chart of this CostThresholdProperties.
        :type display_on_chart: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if display_on_chart not in allowed_values:
            raise ValueError(
                "Invalid value for `display_on_chart` ({0}), must be one of {1}"
                .format(display_on_chart, allowed_values)
            )

        self._display_on_chart = display_on_chart

    @property
    def notification_sent(self):
        """Gets the notification_sent of this CostThresholdProperties.

        Indicates the datetime when notifications were last sent for this threshold.

        :return: The notification_sent of this CostThresholdProperties.
        :rtype: str
        """
        return self._notification_sent

    @notification_sent.setter
    def notification_sent(self, notification_sent):
        """Sets the notification_sent of this CostThresholdProperties.

        Indicates the datetime when notifications were last sent for this threshold.

        :param notification_sent: The notification_sent of this CostThresholdProperties.
        :type notification_sent: str
        """

        self._notification_sent = notification_sent

    @property
    def percentage_threshold(self):
        """Gets the percentage_threshold of this CostThresholdProperties.


        :return: The percentage_threshold of this CostThresholdProperties.
        :rtype: PercentageCostThresholdProperties
        """
        return self._percentage_threshold

    @percentage_threshold.setter
    def percentage_threshold(self, percentage_threshold):
        """Sets the percentage_threshold of this CostThresholdProperties.


        :param percentage_threshold: The percentage_threshold of this CostThresholdProperties.
        :type percentage_threshold: PercentageCostThresholdProperties
        """

        self._percentage_threshold = percentage_threshold

    @property
    def send_notification_when_exceeded(self):
        """Gets the send_notification_when_exceeded of this CostThresholdProperties.

        Indicates whether notifications will be sent when this threshold is exceeded.

        :return: The send_notification_when_exceeded of this CostThresholdProperties.
        :rtype: str
        """
        return self._send_notification_when_exceeded

    @send_notification_when_exceeded.setter
    def send_notification_when_exceeded(self, send_notification_when_exceeded):
        """Sets the send_notification_when_exceeded of this CostThresholdProperties.

        Indicates whether notifications will be sent when this threshold is exceeded.

        :param send_notification_when_exceeded: The send_notification_when_exceeded of this CostThresholdProperties.
        :type send_notification_when_exceeded: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if send_notification_when_exceeded not in allowed_values:
            raise ValueError(
                "Invalid value for `send_notification_when_exceeded` ({0}), must be one of {1}"
                .format(send_notification_when_exceeded, allowed_values)
            )

        self._send_notification_when_exceeded = send_notification_when_exceeded

    @property
    def threshold_id(self):
        """Gets the threshold_id of this CostThresholdProperties.

        The ID of the cost threshold item.

        :return: The threshold_id of this CostThresholdProperties.
        :rtype: str
        """
        return self._threshold_id

    @threshold_id.setter
    def threshold_id(self, threshold_id):
        """Sets the threshold_id of this CostThresholdProperties.

        The ID of the cost threshold item.

        :param threshold_id: The threshold_id of this CostThresholdProperties.
        :type threshold_id: str
        """

        self._threshold_id = threshold_id
