# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.applicable_schedule import ApplicableSchedule
from openapi_server import util


class ServiceFabricProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_schedule: ApplicableSchedule=None, environment_id: str=None, external_service_fabric_id: str=None, provisioning_state: str=None, unique_identifier: str=None):
        """ServiceFabricProperties - a model defined in OpenAPI

        :param applicable_schedule: The applicable_schedule of this ServiceFabricProperties.
        :param environment_id: The environment_id of this ServiceFabricProperties.
        :param external_service_fabric_id: The external_service_fabric_id of this ServiceFabricProperties.
        :param provisioning_state: The provisioning_state of this ServiceFabricProperties.
        :param unique_identifier: The unique_identifier of this ServiceFabricProperties.
        """
        self.openapi_types = {
            'applicable_schedule': ApplicableSchedule,
            'environment_id': str,
            'external_service_fabric_id': str,
            'provisioning_state': str,
            'unique_identifier': str
        }

        self.attribute_map = {
            'applicable_schedule': 'applicableSchedule',
            'environment_id': 'environmentId',
            'external_service_fabric_id': 'externalServiceFabricId',
            'provisioning_state': 'provisioningState',
            'unique_identifier': 'uniqueIdentifier'
        }

        self._applicable_schedule = applicable_schedule
        self._environment_id = environment_id
        self._external_service_fabric_id = external_service_fabric_id
        self._provisioning_state = provisioning_state
        self._unique_identifier = unique_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceFabricProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceFabricProperties of this ServiceFabricProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_schedule(self):
        """Gets the applicable_schedule of this ServiceFabricProperties.


        :return: The applicable_schedule of this ServiceFabricProperties.
        :rtype: ApplicableSchedule
        """
        return self._applicable_schedule

    @applicable_schedule.setter
    def applicable_schedule(self, applicable_schedule):
        """Sets the applicable_schedule of this ServiceFabricProperties.


        :param applicable_schedule: The applicable_schedule of this ServiceFabricProperties.
        :type applicable_schedule: ApplicableSchedule
        """

        self._applicable_schedule = applicable_schedule

    @property
    def environment_id(self):
        """Gets the environment_id of this ServiceFabricProperties.

        The resource id of the environment under which the service fabric resource is present

        :return: The environment_id of this ServiceFabricProperties.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this ServiceFabricProperties.

        The resource id of the environment under which the service fabric resource is present

        :param environment_id: The environment_id of this ServiceFabricProperties.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def external_service_fabric_id(self):
        """Gets the external_service_fabric_id of this ServiceFabricProperties.

        The backing service fabric resource's id

        :return: The external_service_fabric_id of this ServiceFabricProperties.
        :rtype: str
        """
        return self._external_service_fabric_id

    @external_service_fabric_id.setter
    def external_service_fabric_id(self, external_service_fabric_id):
        """Sets the external_service_fabric_id of this ServiceFabricProperties.

        The backing service fabric resource's id

        :param external_service_fabric_id: The external_service_fabric_id of this ServiceFabricProperties.
        :type external_service_fabric_id: str
        """

        self._external_service_fabric_id = external_service_fabric_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ServiceFabricProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this ServiceFabricProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ServiceFabricProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this ServiceFabricProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this ServiceFabricProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this ServiceFabricProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this ServiceFabricProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this ServiceFabricProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier
