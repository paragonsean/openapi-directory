# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gallery_image_reference import GalleryImageReference
from openapi_server import util


class GalleryImageProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, created_date: datetime=None, description: str=None, enabled: bool=None, icon: str=None, image_reference: GalleryImageReference=None, is_plan_authorized: bool=None, plan_id: str=None):
        """GalleryImageProperties - a model defined in OpenAPI

        :param author: The author of this GalleryImageProperties.
        :param created_date: The created_date of this GalleryImageProperties.
        :param description: The description of this GalleryImageProperties.
        :param enabled: The enabled of this GalleryImageProperties.
        :param icon: The icon of this GalleryImageProperties.
        :param image_reference: The image_reference of this GalleryImageProperties.
        :param is_plan_authorized: The is_plan_authorized of this GalleryImageProperties.
        :param plan_id: The plan_id of this GalleryImageProperties.
        """
        self.openapi_types = {
            'author': str,
            'created_date': datetime,
            'description': str,
            'enabled': bool,
            'icon': str,
            'image_reference': GalleryImageReference,
            'is_plan_authorized': bool,
            'plan_id': str
        }

        self.attribute_map = {
            'author': 'author',
            'created_date': 'createdDate',
            'description': 'description',
            'enabled': 'enabled',
            'icon': 'icon',
            'image_reference': 'imageReference',
            'is_plan_authorized': 'isPlanAuthorized',
            'plan_id': 'planId'
        }

        self._author = author
        self._created_date = created_date
        self._description = description
        self._enabled = enabled
        self._icon = icon
        self._image_reference = image_reference
        self._is_plan_authorized = is_plan_authorized
        self._plan_id = plan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GalleryImageProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GalleryImageProperties of this GalleryImageProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this GalleryImageProperties.

        The author of the gallery image.

        :return: The author of this GalleryImageProperties.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GalleryImageProperties.

        The author of the gallery image.

        :param author: The author of this GalleryImageProperties.
        :type author: str
        """

        self._author = author

    @property
    def created_date(self):
        """Gets the created_date of this GalleryImageProperties.

        The creation date of the gallery image.

        :return: The created_date of this GalleryImageProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GalleryImageProperties.

        The creation date of the gallery image.

        :param created_date: The created_date of this GalleryImageProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this GalleryImageProperties.

        The description of the gallery image.

        :return: The description of this GalleryImageProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GalleryImageProperties.

        The description of the gallery image.

        :param description: The description of this GalleryImageProperties.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this GalleryImageProperties.

        Indicates whether this gallery image is enabled.

        :return: The enabled of this GalleryImageProperties.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GalleryImageProperties.

        Indicates whether this gallery image is enabled.

        :param enabled: The enabled of this GalleryImageProperties.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def icon(self):
        """Gets the icon of this GalleryImageProperties.

        The icon of the gallery image.

        :return: The icon of this GalleryImageProperties.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this GalleryImageProperties.

        The icon of the gallery image.

        :param icon: The icon of this GalleryImageProperties.
        :type icon: str
        """

        self._icon = icon

    @property
    def image_reference(self):
        """Gets the image_reference of this GalleryImageProperties.


        :return: The image_reference of this GalleryImageProperties.
        :rtype: GalleryImageReference
        """
        return self._image_reference

    @image_reference.setter
    def image_reference(self, image_reference):
        """Sets the image_reference of this GalleryImageProperties.


        :param image_reference: The image_reference of this GalleryImageProperties.
        :type image_reference: GalleryImageReference
        """

        self._image_reference = image_reference

    @property
    def is_plan_authorized(self):
        """Gets the is_plan_authorized of this GalleryImageProperties.

        Indicates if the plan has been authorized for programmatic deployment.

        :return: The is_plan_authorized of this GalleryImageProperties.
        :rtype: bool
        """
        return self._is_plan_authorized

    @is_plan_authorized.setter
    def is_plan_authorized(self, is_plan_authorized):
        """Sets the is_plan_authorized of this GalleryImageProperties.

        Indicates if the plan has been authorized for programmatic deployment.

        :param is_plan_authorized: The is_plan_authorized of this GalleryImageProperties.
        :type is_plan_authorized: bool
        """

        self._is_plan_authorized = is_plan_authorized

    @property
    def plan_id(self):
        """Gets the plan_id of this GalleryImageProperties.

        The third party plan that applies to this image

        :return: The plan_id of this GalleryImageProperties.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this GalleryImageProperties.

        The third party plan that applies to this image

        :param plan_id: The plan_id of this GalleryImageProperties.
        :type plan_id: str
        """

        self._plan_id = plan_id
