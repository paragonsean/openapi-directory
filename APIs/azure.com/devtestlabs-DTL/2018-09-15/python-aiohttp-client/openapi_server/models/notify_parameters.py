# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotifyParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_name: str=None, json_payload: str=None):
        """NotifyParameters - a model defined in OpenAPI

        :param event_name: The event_name of this NotifyParameters.
        :param json_payload: The json_payload of this NotifyParameters.
        """
        self.openapi_types = {
            'event_name': str,
            'json_payload': str
        }

        self.attribute_map = {
            'event_name': 'eventName',
            'json_payload': 'jsonPayload'
        }

        self._event_name = event_name
        self._json_payload = json_payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotifyParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotifyParameters of this NotifyParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_name(self):
        """Gets the event_name of this NotifyParameters.

        The type of event (i.e. AutoShutdown, Cost)

        :return: The event_name of this NotifyParameters.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this NotifyParameters.

        The type of event (i.e. AutoShutdown, Cost)

        :param event_name: The event_name of this NotifyParameters.
        :type event_name: str
        """
        allowed_values = ["AutoShutdown", "Cost"]  # noqa: E501
        if event_name not in allowed_values:
            raise ValueError(
                "Invalid value for `event_name` ({0}), must be one of {1}"
                .format(event_name, allowed_values)
            )

        self._event_name = event_name

    @property
    def json_payload(self):
        """Gets the json_payload of this NotifyParameters.

        Properties for the notification in json format.

        :return: The json_payload of this NotifyParameters.
        :rtype: str
        """
        return self._json_payload

    @json_payload.setter
    def json_payload(self, json_payload):
        """Sets the json_payload of this NotifyParameters.

        Properties for the notification in json format.

        :param json_payload: The json_payload of this NotifyParameters.
        :type json_payload: str
        """

        self._json_payload = json_payload
