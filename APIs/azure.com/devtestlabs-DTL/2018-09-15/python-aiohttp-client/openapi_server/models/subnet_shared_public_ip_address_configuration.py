# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.port import Port
from openapi_server import util


class SubnetSharedPublicIpAddressConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_ports: List[Port]=None):
        """SubnetSharedPublicIpAddressConfiguration - a model defined in OpenAPI

        :param allowed_ports: The allowed_ports of this SubnetSharedPublicIpAddressConfiguration.
        """
        self.openapi_types = {
            'allowed_ports': List[Port]
        }

        self.attribute_map = {
            'allowed_ports': 'allowedPorts'
        }

        self._allowed_ports = allowed_ports

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubnetSharedPublicIpAddressConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubnetSharedPublicIpAddressConfiguration of this SubnetSharedPublicIpAddressConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_ports(self):
        """Gets the allowed_ports of this SubnetSharedPublicIpAddressConfiguration.

        Backend ports that virtual machines on this subnet are allowed to expose

        :return: The allowed_ports of this SubnetSharedPublicIpAddressConfiguration.
        :rtype: List[Port]
        """
        return self._allowed_ports

    @allowed_ports.setter
    def allowed_ports(self, allowed_ports):
        """Sets the allowed_ports of this SubnetSharedPublicIpAddressConfiguration.

        Backend ports that virtual machines on this subnet are allowed to expose

        :param allowed_ports: The allowed_ports of this SubnetSharedPublicIpAddressConfiguration.
        :type allowed_ports: List[Port]
        """

        self._allowed_ports = allowed_ports
