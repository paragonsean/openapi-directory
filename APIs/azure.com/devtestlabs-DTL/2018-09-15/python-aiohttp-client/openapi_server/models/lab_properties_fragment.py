# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lab_announcement_properties_fragment import LabAnnouncementPropertiesFragment
from openapi_server.models.lab_support_properties_fragment import LabSupportPropertiesFragment
from openapi_server import util


class LabPropertiesFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, announcement: LabAnnouncementPropertiesFragment=None, environment_permission: str=None, extended_properties: Dict[str, str]=None, lab_storage_type: str=None, mandatory_artifacts_resource_ids_linux: List[str]=None, mandatory_artifacts_resource_ids_windows: List[str]=None, premium_data_disks: str=None, support: LabSupportPropertiesFragment=None):
        """LabPropertiesFragment - a model defined in OpenAPI

        :param announcement: The announcement of this LabPropertiesFragment.
        :param environment_permission: The environment_permission of this LabPropertiesFragment.
        :param extended_properties: The extended_properties of this LabPropertiesFragment.
        :param lab_storage_type: The lab_storage_type of this LabPropertiesFragment.
        :param mandatory_artifacts_resource_ids_linux: The mandatory_artifacts_resource_ids_linux of this LabPropertiesFragment.
        :param mandatory_artifacts_resource_ids_windows: The mandatory_artifacts_resource_ids_windows of this LabPropertiesFragment.
        :param premium_data_disks: The premium_data_disks of this LabPropertiesFragment.
        :param support: The support of this LabPropertiesFragment.
        """
        self.openapi_types = {
            'announcement': LabAnnouncementPropertiesFragment,
            'environment_permission': str,
            'extended_properties': Dict[str, str],
            'lab_storage_type': str,
            'mandatory_artifacts_resource_ids_linux': List[str],
            'mandatory_artifacts_resource_ids_windows': List[str],
            'premium_data_disks': str,
            'support': LabSupportPropertiesFragment
        }

        self.attribute_map = {
            'announcement': 'announcement',
            'environment_permission': 'environmentPermission',
            'extended_properties': 'extendedProperties',
            'lab_storage_type': 'labStorageType',
            'mandatory_artifacts_resource_ids_linux': 'mandatoryArtifactsResourceIdsLinux',
            'mandatory_artifacts_resource_ids_windows': 'mandatoryArtifactsResourceIdsWindows',
            'premium_data_disks': 'premiumDataDisks',
            'support': 'support'
        }

        self._announcement = announcement
        self._environment_permission = environment_permission
        self._extended_properties = extended_properties
        self._lab_storage_type = lab_storage_type
        self._mandatory_artifacts_resource_ids_linux = mandatory_artifacts_resource_ids_linux
        self._mandatory_artifacts_resource_ids_windows = mandatory_artifacts_resource_ids_windows
        self._premium_data_disks = premium_data_disks
        self._support = support

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabPropertiesFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabPropertiesFragment of this LabPropertiesFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def announcement(self):
        """Gets the announcement of this LabPropertiesFragment.


        :return: The announcement of this LabPropertiesFragment.
        :rtype: LabAnnouncementPropertiesFragment
        """
        return self._announcement

    @announcement.setter
    def announcement(self, announcement):
        """Sets the announcement of this LabPropertiesFragment.


        :param announcement: The announcement of this LabPropertiesFragment.
        :type announcement: LabAnnouncementPropertiesFragment
        """

        self._announcement = announcement

    @property
    def environment_permission(self):
        """Gets the environment_permission of this LabPropertiesFragment.

        The access rights to be granted to the user when provisioning an environment

        :return: The environment_permission of this LabPropertiesFragment.
        :rtype: str
        """
        return self._environment_permission

    @environment_permission.setter
    def environment_permission(self, environment_permission):
        """Sets the environment_permission of this LabPropertiesFragment.

        The access rights to be granted to the user when provisioning an environment

        :param environment_permission: The environment_permission of this LabPropertiesFragment.
        :type environment_permission: str
        """
        allowed_values = ["Reader", "Contributor"]  # noqa: E501
        if environment_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_permission` ({0}), must be one of {1}"
                .format(environment_permission, allowed_values)
            )

        self._environment_permission = environment_permission

    @property
    def extended_properties(self):
        """Gets the extended_properties of this LabPropertiesFragment.

        Extended properties of the lab used for experimental features

        :return: The extended_properties of this LabPropertiesFragment.
        :rtype: Dict[str, str]
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this LabPropertiesFragment.

        Extended properties of the lab used for experimental features

        :param extended_properties: The extended_properties of this LabPropertiesFragment.
        :type extended_properties: Dict[str, str]
        """

        self._extended_properties = extended_properties

    @property
    def lab_storage_type(self):
        """Gets the lab_storage_type of this LabPropertiesFragment.

        Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.

        :return: The lab_storage_type of this LabPropertiesFragment.
        :rtype: str
        """
        return self._lab_storage_type

    @lab_storage_type.setter
    def lab_storage_type(self, lab_storage_type):
        """Sets the lab_storage_type of this LabPropertiesFragment.

        Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.

        :param lab_storage_type: The lab_storage_type of this LabPropertiesFragment.
        :type lab_storage_type: str
        """
        allowed_values = ["Standard", "Premium", "StandardSSD"]  # noqa: E501
        if lab_storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lab_storage_type` ({0}), must be one of {1}"
                .format(lab_storage_type, allowed_values)
            )

        self._lab_storage_type = lab_storage_type

    @property
    def mandatory_artifacts_resource_ids_linux(self):
        """Gets the mandatory_artifacts_resource_ids_linux of this LabPropertiesFragment.

        The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.

        :return: The mandatory_artifacts_resource_ids_linux of this LabPropertiesFragment.
        :rtype: List[str]
        """
        return self._mandatory_artifacts_resource_ids_linux

    @mandatory_artifacts_resource_ids_linux.setter
    def mandatory_artifacts_resource_ids_linux(self, mandatory_artifacts_resource_ids_linux):
        """Sets the mandatory_artifacts_resource_ids_linux of this LabPropertiesFragment.

        The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.

        :param mandatory_artifacts_resource_ids_linux: The mandatory_artifacts_resource_ids_linux of this LabPropertiesFragment.
        :type mandatory_artifacts_resource_ids_linux: List[str]
        """

        self._mandatory_artifacts_resource_ids_linux = mandatory_artifacts_resource_ids_linux

    @property
    def mandatory_artifacts_resource_ids_windows(self):
        """Gets the mandatory_artifacts_resource_ids_windows of this LabPropertiesFragment.

        The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.

        :return: The mandatory_artifacts_resource_ids_windows of this LabPropertiesFragment.
        :rtype: List[str]
        """
        return self._mandatory_artifacts_resource_ids_windows

    @mandatory_artifacts_resource_ids_windows.setter
    def mandatory_artifacts_resource_ids_windows(self, mandatory_artifacts_resource_ids_windows):
        """Sets the mandatory_artifacts_resource_ids_windows of this LabPropertiesFragment.

        The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.

        :param mandatory_artifacts_resource_ids_windows: The mandatory_artifacts_resource_ids_windows of this LabPropertiesFragment.
        :type mandatory_artifacts_resource_ids_windows: List[str]
        """

        self._mandatory_artifacts_resource_ids_windows = mandatory_artifacts_resource_ids_windows

    @property
    def premium_data_disks(self):
        """Gets the premium_data_disks of this LabPropertiesFragment.

        The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.

        :return: The premium_data_disks of this LabPropertiesFragment.
        :rtype: str
        """
        return self._premium_data_disks

    @premium_data_disks.setter
    def premium_data_disks(self, premium_data_disks):
        """Sets the premium_data_disks of this LabPropertiesFragment.

        The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.

        :param premium_data_disks: The premium_data_disks of this LabPropertiesFragment.
        :type premium_data_disks: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if premium_data_disks not in allowed_values:
            raise ValueError(
                "Invalid value for `premium_data_disks` ({0}), must be one of {1}"
                .format(premium_data_disks, allowed_values)
            )

        self._premium_data_disks = premium_data_disks

    @property
    def support(self):
        """Gets the support of this LabPropertiesFragment.


        :return: The support of this LabPropertiesFragment.
        :rtype: LabSupportPropertiesFragment
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this LabPropertiesFragment.


        :param support: The support of this LabPropertiesFragment.
        :type support: LabSupportPropertiesFragment
        """

        self._support = support
