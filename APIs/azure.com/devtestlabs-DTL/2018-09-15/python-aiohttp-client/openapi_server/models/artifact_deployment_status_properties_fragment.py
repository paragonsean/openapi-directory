# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArtifactDeploymentStatusPropertiesFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts_applied: int=None, deployment_status: str=None, total_artifacts: int=None):
        """ArtifactDeploymentStatusPropertiesFragment - a model defined in OpenAPI

        :param artifacts_applied: The artifacts_applied of this ArtifactDeploymentStatusPropertiesFragment.
        :param deployment_status: The deployment_status of this ArtifactDeploymentStatusPropertiesFragment.
        :param total_artifacts: The total_artifacts of this ArtifactDeploymentStatusPropertiesFragment.
        """
        self.openapi_types = {
            'artifacts_applied': int,
            'deployment_status': str,
            'total_artifacts': int
        }

        self.attribute_map = {
            'artifacts_applied': 'artifactsApplied',
            'deployment_status': 'deploymentStatus',
            'total_artifacts': 'totalArtifacts'
        }

        self._artifacts_applied = artifacts_applied
        self._deployment_status = deployment_status
        self._total_artifacts = total_artifacts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactDeploymentStatusPropertiesFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactDeploymentStatusPropertiesFragment of this ArtifactDeploymentStatusPropertiesFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts_applied(self):
        """Gets the artifacts_applied of this ArtifactDeploymentStatusPropertiesFragment.

        The total count of the artifacts that were successfully applied.

        :return: The artifacts_applied of this ArtifactDeploymentStatusPropertiesFragment.
        :rtype: int
        """
        return self._artifacts_applied

    @artifacts_applied.setter
    def artifacts_applied(self, artifacts_applied):
        """Sets the artifacts_applied of this ArtifactDeploymentStatusPropertiesFragment.

        The total count of the artifacts that were successfully applied.

        :param artifacts_applied: The artifacts_applied of this ArtifactDeploymentStatusPropertiesFragment.
        :type artifacts_applied: int
        """

        self._artifacts_applied = artifacts_applied

    @property
    def deployment_status(self):
        """Gets the deployment_status of this ArtifactDeploymentStatusPropertiesFragment.

        The deployment status of the artifact.

        :return: The deployment_status of this ArtifactDeploymentStatusPropertiesFragment.
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this ArtifactDeploymentStatusPropertiesFragment.

        The deployment status of the artifact.

        :param deployment_status: The deployment_status of this ArtifactDeploymentStatusPropertiesFragment.
        :type deployment_status: str
        """

        self._deployment_status = deployment_status

    @property
    def total_artifacts(self):
        """Gets the total_artifacts of this ArtifactDeploymentStatusPropertiesFragment.

        The total count of the artifacts that were tentatively applied.

        :return: The total_artifacts of this ArtifactDeploymentStatusPropertiesFragment.
        :rtype: int
        """
        return self._total_artifacts

    @total_artifacts.setter
    def total_artifacts(self, total_artifacts):
        """Sets the total_artifacts of this ArtifactDeploymentStatusPropertiesFragment.

        The total count of the artifacts that were tentatively applied.

        :param total_artifacts: The total_artifacts of this ArtifactDeploymentStatusPropertiesFragment.
        :type total_artifacts: int
        """

        self._total_artifacts = total_artifacts
