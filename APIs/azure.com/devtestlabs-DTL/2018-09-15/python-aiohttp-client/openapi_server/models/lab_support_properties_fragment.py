# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabSupportPropertiesFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: str=None, markdown: str=None):
        """LabSupportPropertiesFragment - a model defined in OpenAPI

        :param enabled: The enabled of this LabSupportPropertiesFragment.
        :param markdown: The markdown of this LabSupportPropertiesFragment.
        """
        self.openapi_types = {
            'enabled': str,
            'markdown': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'markdown': 'markdown'
        }

        self._enabled = enabled
        self._markdown = markdown

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabSupportPropertiesFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabSupportPropertiesFragment of this LabSupportPropertiesFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this LabSupportPropertiesFragment.

        Is the lab support banner active/enabled at this time?

        :return: The enabled of this LabSupportPropertiesFragment.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LabSupportPropertiesFragment.

        Is the lab support banner active/enabled at this time?

        :param enabled: The enabled of this LabSupportPropertiesFragment.
        :type enabled: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled` ({0}), must be one of {1}"
                .format(enabled, allowed_values)
            )

        self._enabled = enabled

    @property
    def markdown(self):
        """Gets the markdown of this LabSupportPropertiesFragment.

        The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.

        :return: The markdown of this LabSupportPropertiesFragment.
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """Sets the markdown of this LabSupportPropertiesFragment.

        The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.

        :param markdown: The markdown of this LabSupportPropertiesFragment.
        :type markdown: str
        """

        self._markdown = markdown
