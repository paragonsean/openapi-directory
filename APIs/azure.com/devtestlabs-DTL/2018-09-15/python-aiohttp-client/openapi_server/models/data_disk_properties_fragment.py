# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attach_new_data_disk_options_fragment import AttachNewDataDiskOptionsFragment
from openapi_server import util


class DataDiskPropertiesFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attach_new_data_disk_options: AttachNewDataDiskOptionsFragment=None, existing_lab_disk_id: str=None, host_caching: str=None):
        """DataDiskPropertiesFragment - a model defined in OpenAPI

        :param attach_new_data_disk_options: The attach_new_data_disk_options of this DataDiskPropertiesFragment.
        :param existing_lab_disk_id: The existing_lab_disk_id of this DataDiskPropertiesFragment.
        :param host_caching: The host_caching of this DataDiskPropertiesFragment.
        """
        self.openapi_types = {
            'attach_new_data_disk_options': AttachNewDataDiskOptionsFragment,
            'existing_lab_disk_id': str,
            'host_caching': str
        }

        self.attribute_map = {
            'attach_new_data_disk_options': 'attachNewDataDiskOptions',
            'existing_lab_disk_id': 'existingLabDiskId',
            'host_caching': 'hostCaching'
        }

        self._attach_new_data_disk_options = attach_new_data_disk_options
        self._existing_lab_disk_id = existing_lab_disk_id
        self._host_caching = host_caching

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataDiskPropertiesFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataDiskPropertiesFragment of this DataDiskPropertiesFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attach_new_data_disk_options(self):
        """Gets the attach_new_data_disk_options of this DataDiskPropertiesFragment.


        :return: The attach_new_data_disk_options of this DataDiskPropertiesFragment.
        :rtype: AttachNewDataDiskOptionsFragment
        """
        return self._attach_new_data_disk_options

    @attach_new_data_disk_options.setter
    def attach_new_data_disk_options(self, attach_new_data_disk_options):
        """Sets the attach_new_data_disk_options of this DataDiskPropertiesFragment.


        :param attach_new_data_disk_options: The attach_new_data_disk_options of this DataDiskPropertiesFragment.
        :type attach_new_data_disk_options: AttachNewDataDiskOptionsFragment
        """

        self._attach_new_data_disk_options = attach_new_data_disk_options

    @property
    def existing_lab_disk_id(self):
        """Gets the existing_lab_disk_id of this DataDiskPropertiesFragment.

        Specifies the existing lab disk id to attach to virtual machine.

        :return: The existing_lab_disk_id of this DataDiskPropertiesFragment.
        :rtype: str
        """
        return self._existing_lab_disk_id

    @existing_lab_disk_id.setter
    def existing_lab_disk_id(self, existing_lab_disk_id):
        """Sets the existing_lab_disk_id of this DataDiskPropertiesFragment.

        Specifies the existing lab disk id to attach to virtual machine.

        :param existing_lab_disk_id: The existing_lab_disk_id of this DataDiskPropertiesFragment.
        :type existing_lab_disk_id: str
        """

        self._existing_lab_disk_id = existing_lab_disk_id

    @property
    def host_caching(self):
        """Gets the host_caching of this DataDiskPropertiesFragment.

        Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).

        :return: The host_caching of this DataDiskPropertiesFragment.
        :rtype: str
        """
        return self._host_caching

    @host_caching.setter
    def host_caching(self, host_caching):
        """Sets the host_caching of this DataDiskPropertiesFragment.

        Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).

        :param host_caching: The host_caching of this DataDiskPropertiesFragment.
        :type host_caching: str
        """
        allowed_values = ["None", "ReadOnly", "ReadWrite"]  # noqa: E501
        if host_caching not in allowed_values:
            raise ValueError(
                "Invalid value for `host_caching` ({0}), must be one of {1}"
                .format(host_caching, allowed_values)
            )

        self._host_caching = host_caching
