# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_image_properties_custom_fragment import CustomImagePropertiesCustomFragment
from openapi_server.models.custom_image_properties_from_plan_fragment import CustomImagePropertiesFromPlanFragment
from openapi_server.models.custom_image_properties_from_vm_fragment import CustomImagePropertiesFromVmFragment
from openapi_server.models.data_disk_storage_type_info_fragment import DataDiskStorageTypeInfoFragment
from openapi_server import util


class CustomImagePropertiesFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, custom_image_plan: CustomImagePropertiesFromPlanFragment=None, data_disk_storage_info: List[DataDiskStorageTypeInfoFragment]=None, description: str=None, is_plan_authorized: bool=None, managed_image_id: str=None, managed_snapshot_id: str=None, vhd: CustomImagePropertiesCustomFragment=None, vm: CustomImagePropertiesFromVmFragment=None):
        """CustomImagePropertiesFragment - a model defined in OpenAPI

        :param author: The author of this CustomImagePropertiesFragment.
        :param custom_image_plan: The custom_image_plan of this CustomImagePropertiesFragment.
        :param data_disk_storage_info: The data_disk_storage_info of this CustomImagePropertiesFragment.
        :param description: The description of this CustomImagePropertiesFragment.
        :param is_plan_authorized: The is_plan_authorized of this CustomImagePropertiesFragment.
        :param managed_image_id: The managed_image_id of this CustomImagePropertiesFragment.
        :param managed_snapshot_id: The managed_snapshot_id of this CustomImagePropertiesFragment.
        :param vhd: The vhd of this CustomImagePropertiesFragment.
        :param vm: The vm of this CustomImagePropertiesFragment.
        """
        self.openapi_types = {
            'author': str,
            'custom_image_plan': CustomImagePropertiesFromPlanFragment,
            'data_disk_storage_info': List[DataDiskStorageTypeInfoFragment],
            'description': str,
            'is_plan_authorized': bool,
            'managed_image_id': str,
            'managed_snapshot_id': str,
            'vhd': CustomImagePropertiesCustomFragment,
            'vm': CustomImagePropertiesFromVmFragment
        }

        self.attribute_map = {
            'author': 'author',
            'custom_image_plan': 'customImagePlan',
            'data_disk_storage_info': 'dataDiskStorageInfo',
            'description': 'description',
            'is_plan_authorized': 'isPlanAuthorized',
            'managed_image_id': 'managedImageId',
            'managed_snapshot_id': 'managedSnapshotId',
            'vhd': 'vhd',
            'vm': 'vm'
        }

        self._author = author
        self._custom_image_plan = custom_image_plan
        self._data_disk_storage_info = data_disk_storage_info
        self._description = description
        self._is_plan_authorized = is_plan_authorized
        self._managed_image_id = managed_image_id
        self._managed_snapshot_id = managed_snapshot_id
        self._vhd = vhd
        self._vm = vm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomImagePropertiesFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomImagePropertiesFragment of this CustomImagePropertiesFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this CustomImagePropertiesFragment.

        The author of the custom image.

        :return: The author of this CustomImagePropertiesFragment.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CustomImagePropertiesFragment.

        The author of the custom image.

        :param author: The author of this CustomImagePropertiesFragment.
        :type author: str
        """

        self._author = author

    @property
    def custom_image_plan(self):
        """Gets the custom_image_plan of this CustomImagePropertiesFragment.


        :return: The custom_image_plan of this CustomImagePropertiesFragment.
        :rtype: CustomImagePropertiesFromPlanFragment
        """
        return self._custom_image_plan

    @custom_image_plan.setter
    def custom_image_plan(self, custom_image_plan):
        """Sets the custom_image_plan of this CustomImagePropertiesFragment.


        :param custom_image_plan: The custom_image_plan of this CustomImagePropertiesFragment.
        :type custom_image_plan: CustomImagePropertiesFromPlanFragment
        """

        self._custom_image_plan = custom_image_plan

    @property
    def data_disk_storage_info(self):
        """Gets the data_disk_storage_info of this CustomImagePropertiesFragment.

        Storage information about the data disks present in the custom image

        :return: The data_disk_storage_info of this CustomImagePropertiesFragment.
        :rtype: List[DataDiskStorageTypeInfoFragment]
        """
        return self._data_disk_storage_info

    @data_disk_storage_info.setter
    def data_disk_storage_info(self, data_disk_storage_info):
        """Sets the data_disk_storage_info of this CustomImagePropertiesFragment.

        Storage information about the data disks present in the custom image

        :param data_disk_storage_info: The data_disk_storage_info of this CustomImagePropertiesFragment.
        :type data_disk_storage_info: List[DataDiskStorageTypeInfoFragment]
        """

        self._data_disk_storage_info = data_disk_storage_info

    @property
    def description(self):
        """Gets the description of this CustomImagePropertiesFragment.

        The description of the custom image.

        :return: The description of this CustomImagePropertiesFragment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomImagePropertiesFragment.

        The description of the custom image.

        :param description: The description of this CustomImagePropertiesFragment.
        :type description: str
        """

        self._description = description

    @property
    def is_plan_authorized(self):
        """Gets the is_plan_authorized of this CustomImagePropertiesFragment.

        Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment

        :return: The is_plan_authorized of this CustomImagePropertiesFragment.
        :rtype: bool
        """
        return self._is_plan_authorized

    @is_plan_authorized.setter
    def is_plan_authorized(self, is_plan_authorized):
        """Sets the is_plan_authorized of this CustomImagePropertiesFragment.

        Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment

        :param is_plan_authorized: The is_plan_authorized of this CustomImagePropertiesFragment.
        :type is_plan_authorized: bool
        """

        self._is_plan_authorized = is_plan_authorized

    @property
    def managed_image_id(self):
        """Gets the managed_image_id of this CustomImagePropertiesFragment.

        The Managed Image Id backing the custom image.

        :return: The managed_image_id of this CustomImagePropertiesFragment.
        :rtype: str
        """
        return self._managed_image_id

    @managed_image_id.setter
    def managed_image_id(self, managed_image_id):
        """Sets the managed_image_id of this CustomImagePropertiesFragment.

        The Managed Image Id backing the custom image.

        :param managed_image_id: The managed_image_id of this CustomImagePropertiesFragment.
        :type managed_image_id: str
        """

        self._managed_image_id = managed_image_id

    @property
    def managed_snapshot_id(self):
        """Gets the managed_snapshot_id of this CustomImagePropertiesFragment.

        The Managed Snapshot Id backing the custom image.

        :return: The managed_snapshot_id of this CustomImagePropertiesFragment.
        :rtype: str
        """
        return self._managed_snapshot_id

    @managed_snapshot_id.setter
    def managed_snapshot_id(self, managed_snapshot_id):
        """Sets the managed_snapshot_id of this CustomImagePropertiesFragment.

        The Managed Snapshot Id backing the custom image.

        :param managed_snapshot_id: The managed_snapshot_id of this CustomImagePropertiesFragment.
        :type managed_snapshot_id: str
        """

        self._managed_snapshot_id = managed_snapshot_id

    @property
    def vhd(self):
        """Gets the vhd of this CustomImagePropertiesFragment.


        :return: The vhd of this CustomImagePropertiesFragment.
        :rtype: CustomImagePropertiesCustomFragment
        """
        return self._vhd

    @vhd.setter
    def vhd(self, vhd):
        """Sets the vhd of this CustomImagePropertiesFragment.


        :param vhd: The vhd of this CustomImagePropertiesFragment.
        :type vhd: CustomImagePropertiesCustomFragment
        """

        self._vhd = vhd

    @property
    def vm(self):
        """Gets the vm of this CustomImagePropertiesFragment.


        :return: The vm of this CustomImagePropertiesFragment.
        :rtype: CustomImagePropertiesFromVmFragment
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this CustomImagePropertiesFragment.


        :param vm: The vm of this CustomImagePropertiesFragment.
        :type vm: CustomImagePropertiesFromVmFragment
        """

        self._vm = vm
