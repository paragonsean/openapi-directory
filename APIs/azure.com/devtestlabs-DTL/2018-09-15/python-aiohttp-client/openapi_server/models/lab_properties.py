# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lab_announcement_properties import LabAnnouncementProperties
from openapi_server.models.lab_support_properties import LabSupportProperties
from openapi_server import util


class LabProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, announcement: LabAnnouncementProperties=None, artifacts_storage_account: str=None, created_date: datetime=None, default_premium_storage_account: str=None, default_storage_account: str=None, environment_permission: str=None, extended_properties: Dict[str, str]=None, lab_storage_type: str=None, load_balancer_id: str=None, mandatory_artifacts_resource_ids_linux: List[str]=None, mandatory_artifacts_resource_ids_windows: List[str]=None, network_security_group_id: str=None, premium_data_disk_storage_account: str=None, premium_data_disks: str=None, provisioning_state: str=None, public_ip_id: str=None, support: LabSupportProperties=None, unique_identifier: str=None, vault_name: str=None, vm_creation_resource_group: str=None):
        """LabProperties - a model defined in OpenAPI

        :param announcement: The announcement of this LabProperties.
        :param artifacts_storage_account: The artifacts_storage_account of this LabProperties.
        :param created_date: The created_date of this LabProperties.
        :param default_premium_storage_account: The default_premium_storage_account of this LabProperties.
        :param default_storage_account: The default_storage_account of this LabProperties.
        :param environment_permission: The environment_permission of this LabProperties.
        :param extended_properties: The extended_properties of this LabProperties.
        :param lab_storage_type: The lab_storage_type of this LabProperties.
        :param load_balancer_id: The load_balancer_id of this LabProperties.
        :param mandatory_artifacts_resource_ids_linux: The mandatory_artifacts_resource_ids_linux of this LabProperties.
        :param mandatory_artifacts_resource_ids_windows: The mandatory_artifacts_resource_ids_windows of this LabProperties.
        :param network_security_group_id: The network_security_group_id of this LabProperties.
        :param premium_data_disk_storage_account: The premium_data_disk_storage_account of this LabProperties.
        :param premium_data_disks: The premium_data_disks of this LabProperties.
        :param provisioning_state: The provisioning_state of this LabProperties.
        :param public_ip_id: The public_ip_id of this LabProperties.
        :param support: The support of this LabProperties.
        :param unique_identifier: The unique_identifier of this LabProperties.
        :param vault_name: The vault_name of this LabProperties.
        :param vm_creation_resource_group: The vm_creation_resource_group of this LabProperties.
        """
        self.openapi_types = {
            'announcement': LabAnnouncementProperties,
            'artifacts_storage_account': str,
            'created_date': datetime,
            'default_premium_storage_account': str,
            'default_storage_account': str,
            'environment_permission': str,
            'extended_properties': Dict[str, str],
            'lab_storage_type': str,
            'load_balancer_id': str,
            'mandatory_artifacts_resource_ids_linux': List[str],
            'mandatory_artifacts_resource_ids_windows': List[str],
            'network_security_group_id': str,
            'premium_data_disk_storage_account': str,
            'premium_data_disks': str,
            'provisioning_state': str,
            'public_ip_id': str,
            'support': LabSupportProperties,
            'unique_identifier': str,
            'vault_name': str,
            'vm_creation_resource_group': str
        }

        self.attribute_map = {
            'announcement': 'announcement',
            'artifacts_storage_account': 'artifactsStorageAccount',
            'created_date': 'createdDate',
            'default_premium_storage_account': 'defaultPremiumStorageAccount',
            'default_storage_account': 'defaultStorageAccount',
            'environment_permission': 'environmentPermission',
            'extended_properties': 'extendedProperties',
            'lab_storage_type': 'labStorageType',
            'load_balancer_id': 'loadBalancerId',
            'mandatory_artifacts_resource_ids_linux': 'mandatoryArtifactsResourceIdsLinux',
            'mandatory_artifacts_resource_ids_windows': 'mandatoryArtifactsResourceIdsWindows',
            'network_security_group_id': 'networkSecurityGroupId',
            'premium_data_disk_storage_account': 'premiumDataDiskStorageAccount',
            'premium_data_disks': 'premiumDataDisks',
            'provisioning_state': 'provisioningState',
            'public_ip_id': 'publicIpId',
            'support': 'support',
            'unique_identifier': 'uniqueIdentifier',
            'vault_name': 'vaultName',
            'vm_creation_resource_group': 'vmCreationResourceGroup'
        }

        self._announcement = announcement
        self._artifacts_storage_account = artifacts_storage_account
        self._created_date = created_date
        self._default_premium_storage_account = default_premium_storage_account
        self._default_storage_account = default_storage_account
        self._environment_permission = environment_permission
        self._extended_properties = extended_properties
        self._lab_storage_type = lab_storage_type
        self._load_balancer_id = load_balancer_id
        self._mandatory_artifacts_resource_ids_linux = mandatory_artifacts_resource_ids_linux
        self._mandatory_artifacts_resource_ids_windows = mandatory_artifacts_resource_ids_windows
        self._network_security_group_id = network_security_group_id
        self._premium_data_disk_storage_account = premium_data_disk_storage_account
        self._premium_data_disks = premium_data_disks
        self._provisioning_state = provisioning_state
        self._public_ip_id = public_ip_id
        self._support = support
        self._unique_identifier = unique_identifier
        self._vault_name = vault_name
        self._vm_creation_resource_group = vm_creation_resource_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabProperties of this LabProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def announcement(self):
        """Gets the announcement of this LabProperties.


        :return: The announcement of this LabProperties.
        :rtype: LabAnnouncementProperties
        """
        return self._announcement

    @announcement.setter
    def announcement(self, announcement):
        """Sets the announcement of this LabProperties.


        :param announcement: The announcement of this LabProperties.
        :type announcement: LabAnnouncementProperties
        """

        self._announcement = announcement

    @property
    def artifacts_storage_account(self):
        """Gets the artifacts_storage_account of this LabProperties.

        The lab's artifact storage account.

        :return: The artifacts_storage_account of this LabProperties.
        :rtype: str
        """
        return self._artifacts_storage_account

    @artifacts_storage_account.setter
    def artifacts_storage_account(self, artifacts_storage_account):
        """Sets the artifacts_storage_account of this LabProperties.

        The lab's artifact storage account.

        :param artifacts_storage_account: The artifacts_storage_account of this LabProperties.
        :type artifacts_storage_account: str
        """

        self._artifacts_storage_account = artifacts_storage_account

    @property
    def created_date(self):
        """Gets the created_date of this LabProperties.

        The creation date of the lab.

        :return: The created_date of this LabProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this LabProperties.

        The creation date of the lab.

        :param created_date: The created_date of this LabProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def default_premium_storage_account(self):
        """Gets the default_premium_storage_account of this LabProperties.

        The lab's default premium storage account.

        :return: The default_premium_storage_account of this LabProperties.
        :rtype: str
        """
        return self._default_premium_storage_account

    @default_premium_storage_account.setter
    def default_premium_storage_account(self, default_premium_storage_account):
        """Sets the default_premium_storage_account of this LabProperties.

        The lab's default premium storage account.

        :param default_premium_storage_account: The default_premium_storage_account of this LabProperties.
        :type default_premium_storage_account: str
        """

        self._default_premium_storage_account = default_premium_storage_account

    @property
    def default_storage_account(self):
        """Gets the default_storage_account of this LabProperties.

        The lab's default storage account.

        :return: The default_storage_account of this LabProperties.
        :rtype: str
        """
        return self._default_storage_account

    @default_storage_account.setter
    def default_storage_account(self, default_storage_account):
        """Sets the default_storage_account of this LabProperties.

        The lab's default storage account.

        :param default_storage_account: The default_storage_account of this LabProperties.
        :type default_storage_account: str
        """

        self._default_storage_account = default_storage_account

    @property
    def environment_permission(self):
        """Gets the environment_permission of this LabProperties.

        The access rights to be granted to the user when provisioning an environment

        :return: The environment_permission of this LabProperties.
        :rtype: str
        """
        return self._environment_permission

    @environment_permission.setter
    def environment_permission(self, environment_permission):
        """Sets the environment_permission of this LabProperties.

        The access rights to be granted to the user when provisioning an environment

        :param environment_permission: The environment_permission of this LabProperties.
        :type environment_permission: str
        """
        allowed_values = ["Reader", "Contributor"]  # noqa: E501
        if environment_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_permission` ({0}), must be one of {1}"
                .format(environment_permission, allowed_values)
            )

        self._environment_permission = environment_permission

    @property
    def extended_properties(self):
        """Gets the extended_properties of this LabProperties.

        Extended properties of the lab used for experimental features

        :return: The extended_properties of this LabProperties.
        :rtype: Dict[str, str]
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this LabProperties.

        Extended properties of the lab used for experimental features

        :param extended_properties: The extended_properties of this LabProperties.
        :type extended_properties: Dict[str, str]
        """

        self._extended_properties = extended_properties

    @property
    def lab_storage_type(self):
        """Gets the lab_storage_type of this LabProperties.

        Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.

        :return: The lab_storage_type of this LabProperties.
        :rtype: str
        """
        return self._lab_storage_type

    @lab_storage_type.setter
    def lab_storage_type(self, lab_storage_type):
        """Sets the lab_storage_type of this LabProperties.

        Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.

        :param lab_storage_type: The lab_storage_type of this LabProperties.
        :type lab_storage_type: str
        """
        allowed_values = ["Standard", "Premium", "StandardSSD"]  # noqa: E501
        if lab_storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lab_storage_type` ({0}), must be one of {1}"
                .format(lab_storage_type, allowed_values)
            )

        self._lab_storage_type = lab_storage_type

    @property
    def load_balancer_id(self):
        """Gets the load_balancer_id of this LabProperties.

        The load balancer used to for lab VMs that use shared IP address.

        :return: The load_balancer_id of this LabProperties.
        :rtype: str
        """
        return self._load_balancer_id

    @load_balancer_id.setter
    def load_balancer_id(self, load_balancer_id):
        """Sets the load_balancer_id of this LabProperties.

        The load balancer used to for lab VMs that use shared IP address.

        :param load_balancer_id: The load_balancer_id of this LabProperties.
        :type load_balancer_id: str
        """

        self._load_balancer_id = load_balancer_id

    @property
    def mandatory_artifacts_resource_ids_linux(self):
        """Gets the mandatory_artifacts_resource_ids_linux of this LabProperties.

        The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.

        :return: The mandatory_artifacts_resource_ids_linux of this LabProperties.
        :rtype: List[str]
        """
        return self._mandatory_artifacts_resource_ids_linux

    @mandatory_artifacts_resource_ids_linux.setter
    def mandatory_artifacts_resource_ids_linux(self, mandatory_artifacts_resource_ids_linux):
        """Sets the mandatory_artifacts_resource_ids_linux of this LabProperties.

        The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.

        :param mandatory_artifacts_resource_ids_linux: The mandatory_artifacts_resource_ids_linux of this LabProperties.
        :type mandatory_artifacts_resource_ids_linux: List[str]
        """

        self._mandatory_artifacts_resource_ids_linux = mandatory_artifacts_resource_ids_linux

    @property
    def mandatory_artifacts_resource_ids_windows(self):
        """Gets the mandatory_artifacts_resource_ids_windows of this LabProperties.

        The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.

        :return: The mandatory_artifacts_resource_ids_windows of this LabProperties.
        :rtype: List[str]
        """
        return self._mandatory_artifacts_resource_ids_windows

    @mandatory_artifacts_resource_ids_windows.setter
    def mandatory_artifacts_resource_ids_windows(self, mandatory_artifacts_resource_ids_windows):
        """Sets the mandatory_artifacts_resource_ids_windows of this LabProperties.

        The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.

        :param mandatory_artifacts_resource_ids_windows: The mandatory_artifacts_resource_ids_windows of this LabProperties.
        :type mandatory_artifacts_resource_ids_windows: List[str]
        """

        self._mandatory_artifacts_resource_ids_windows = mandatory_artifacts_resource_ids_windows

    @property
    def network_security_group_id(self):
        """Gets the network_security_group_id of this LabProperties.

        The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.

        :return: The network_security_group_id of this LabProperties.
        :rtype: str
        """
        return self._network_security_group_id

    @network_security_group_id.setter
    def network_security_group_id(self, network_security_group_id):
        """Sets the network_security_group_id of this LabProperties.

        The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.

        :param network_security_group_id: The network_security_group_id of this LabProperties.
        :type network_security_group_id: str
        """

        self._network_security_group_id = network_security_group_id

    @property
    def premium_data_disk_storage_account(self):
        """Gets the premium_data_disk_storage_account of this LabProperties.

        The lab's premium data disk storage account.

        :return: The premium_data_disk_storage_account of this LabProperties.
        :rtype: str
        """
        return self._premium_data_disk_storage_account

    @premium_data_disk_storage_account.setter
    def premium_data_disk_storage_account(self, premium_data_disk_storage_account):
        """Sets the premium_data_disk_storage_account of this LabProperties.

        The lab's premium data disk storage account.

        :param premium_data_disk_storage_account: The premium_data_disk_storage_account of this LabProperties.
        :type premium_data_disk_storage_account: str
        """

        self._premium_data_disk_storage_account = premium_data_disk_storage_account

    @property
    def premium_data_disks(self):
        """Gets the premium_data_disks of this LabProperties.

        The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.

        :return: The premium_data_disks of this LabProperties.
        :rtype: str
        """
        return self._premium_data_disks

    @premium_data_disks.setter
    def premium_data_disks(self, premium_data_disks):
        """Sets the premium_data_disks of this LabProperties.

        The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.

        :param premium_data_disks: The premium_data_disks of this LabProperties.
        :type premium_data_disks: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if premium_data_disks not in allowed_values:
            raise ValueError(
                "Invalid value for `premium_data_disks` ({0}), must be one of {1}"
                .format(premium_data_disks, allowed_values)
            )

        self._premium_data_disks = premium_data_disks

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LabProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this LabProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LabProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this LabProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def public_ip_id(self):
        """Gets the public_ip_id of this LabProperties.

        The public IP address for the lab's load balancer.

        :return: The public_ip_id of this LabProperties.
        :rtype: str
        """
        return self._public_ip_id

    @public_ip_id.setter
    def public_ip_id(self, public_ip_id):
        """Sets the public_ip_id of this LabProperties.

        The public IP address for the lab's load balancer.

        :param public_ip_id: The public_ip_id of this LabProperties.
        :type public_ip_id: str
        """

        self._public_ip_id = public_ip_id

    @property
    def support(self):
        """Gets the support of this LabProperties.


        :return: The support of this LabProperties.
        :rtype: LabSupportProperties
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this LabProperties.


        :param support: The support of this LabProperties.
        :type support: LabSupportProperties
        """

        self._support = support

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this LabProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this LabProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this LabProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this LabProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier

    @property
    def vault_name(self):
        """Gets the vault_name of this LabProperties.

        The lab's Key vault.

        :return: The vault_name of this LabProperties.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this LabProperties.

        The lab's Key vault.

        :param vault_name: The vault_name of this LabProperties.
        :type vault_name: str
        """

        self._vault_name = vault_name

    @property
    def vm_creation_resource_group(self):
        """Gets the vm_creation_resource_group of this LabProperties.

        The resource group in which all new lab virtual machines will be created. To let DevTest Labs manage resource group creation, set this value to null.

        :return: The vm_creation_resource_group of this LabProperties.
        :rtype: str
        """
        return self._vm_creation_resource_group

    @vm_creation_resource_group.setter
    def vm_creation_resource_group(self, vm_creation_resource_group):
        """Sets the vm_creation_resource_group of this LabProperties.

        The resource group in which all new lab virtual machines will be created. To let DevTest Labs manage resource group creation, set this value to null.

        :param vm_creation_resource_group: The vm_creation_resource_group of this LabProperties.
        :type vm_creation_resource_group: str
        """

        self._vm_creation_resource_group = vm_creation_resource_group
