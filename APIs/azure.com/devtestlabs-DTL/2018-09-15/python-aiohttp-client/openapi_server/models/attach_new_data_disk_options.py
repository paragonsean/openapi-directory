# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttachNewDataDiskOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_name: str=None, disk_size_gi_b: int=None, disk_type: str=None):
        """AttachNewDataDiskOptions - a model defined in OpenAPI

        :param disk_name: The disk_name of this AttachNewDataDiskOptions.
        :param disk_size_gi_b: The disk_size_gi_b of this AttachNewDataDiskOptions.
        :param disk_type: The disk_type of this AttachNewDataDiskOptions.
        """
        self.openapi_types = {
            'disk_name': str,
            'disk_size_gi_b': int,
            'disk_type': str
        }

        self.attribute_map = {
            'disk_name': 'diskName',
            'disk_size_gi_b': 'diskSizeGiB',
            'disk_type': 'diskType'
        }

        self._disk_name = disk_name
        self._disk_size_gi_b = disk_size_gi_b
        self._disk_type = disk_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachNewDataDiskOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachNewDataDiskOptions of this AttachNewDataDiskOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_name(self):
        """Gets the disk_name of this AttachNewDataDiskOptions.

        The name of the disk to be attached.

        :return: The disk_name of this AttachNewDataDiskOptions.
        :rtype: str
        """
        return self._disk_name

    @disk_name.setter
    def disk_name(self, disk_name):
        """Sets the disk_name of this AttachNewDataDiskOptions.

        The name of the disk to be attached.

        :param disk_name: The disk_name of this AttachNewDataDiskOptions.
        :type disk_name: str
        """

        self._disk_name = disk_name

    @property
    def disk_size_gi_b(self):
        """Gets the disk_size_gi_b of this AttachNewDataDiskOptions.

        Size of the disk to be attached in GibiBytes.

        :return: The disk_size_gi_b of this AttachNewDataDiskOptions.
        :rtype: int
        """
        return self._disk_size_gi_b

    @disk_size_gi_b.setter
    def disk_size_gi_b(self, disk_size_gi_b):
        """Sets the disk_size_gi_b of this AttachNewDataDiskOptions.

        Size of the disk to be attached in GibiBytes.

        :param disk_size_gi_b: The disk_size_gi_b of this AttachNewDataDiskOptions.
        :type disk_size_gi_b: int
        """

        self._disk_size_gi_b = disk_size_gi_b

    @property
    def disk_type(self):
        """Gets the disk_type of this AttachNewDataDiskOptions.

        The storage type for the disk (i.e. Standard, Premium).

        :return: The disk_type of this AttachNewDataDiskOptions.
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this AttachNewDataDiskOptions.

        The storage type for the disk (i.e. Standard, Premium).

        :param disk_type: The disk_type of this AttachNewDataDiskOptions.
        :type disk_type: str
        """
        allowed_values = ["Standard", "Premium", "StandardSSD"]  # noqa: E501
        if disk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `disk_type` ({0}), must be one of {1}"
                .format(disk_type, allowed_values)
            )

        self._disk_type = disk_type
