# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subnet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_public_ip: str=None, lab_subnet_name: str=None, resource_id: str=None):
        """Subnet - a model defined in OpenAPI

        :param allow_public_ip: The allow_public_ip of this Subnet.
        :param lab_subnet_name: The lab_subnet_name of this Subnet.
        :param resource_id: The resource_id of this Subnet.
        """
        self.openapi_types = {
            'allow_public_ip': str,
            'lab_subnet_name': str,
            'resource_id': str
        }

        self.attribute_map = {
            'allow_public_ip': 'allowPublicIp',
            'lab_subnet_name': 'labSubnetName',
            'resource_id': 'resourceId'
        }

        self._allow_public_ip = allow_public_ip
        self._lab_subnet_name = lab_subnet_name
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subnet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subnet of this Subnet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_public_ip(self):
        """Gets the allow_public_ip of this Subnet.

        The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)).

        :return: The allow_public_ip of this Subnet.
        :rtype: str
        """
        return self._allow_public_ip

    @allow_public_ip.setter
    def allow_public_ip(self, allow_public_ip):
        """Sets the allow_public_ip of this Subnet.

        The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)).

        :param allow_public_ip: The allow_public_ip of this Subnet.
        :type allow_public_ip: str
        """
        allowed_values = ["Default", "Deny", "Allow"]  # noqa: E501
        if allow_public_ip not in allowed_values:
            raise ValueError(
                "Invalid value for `allow_public_ip` ({0}), must be one of {1}"
                .format(allow_public_ip, allowed_values)
            )

        self._allow_public_ip = allow_public_ip

    @property
    def lab_subnet_name(self):
        """Gets the lab_subnet_name of this Subnet.

        The name of the subnet as seen in the lab.

        :return: The lab_subnet_name of this Subnet.
        :rtype: str
        """
        return self._lab_subnet_name

    @lab_subnet_name.setter
    def lab_subnet_name(self, lab_subnet_name):
        """Sets the lab_subnet_name of this Subnet.

        The name of the subnet as seen in the lab.

        :param lab_subnet_name: The lab_subnet_name of this Subnet.
        :type lab_subnet_name: str
        """

        self._lab_subnet_name = lab_subnet_name

    @property
    def resource_id(self):
        """Gets the resource_id of this Subnet.

        The resource ID of the subnet.

        :return: The resource_id of this Subnet.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Subnet.

        The resource ID of the subnet.

        :param resource_id: The resource_id of this Subnet.
        :type resource_id: str
        """

        self._resource_id = resource_id
