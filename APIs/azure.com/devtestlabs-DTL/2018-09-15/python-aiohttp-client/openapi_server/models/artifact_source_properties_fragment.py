# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArtifactSourcePropertiesFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arm_template_folder_path: str=None, branch_ref: str=None, display_name: str=None, folder_path: str=None, security_token: str=None, source_type: str=None, status: str=None, uri: str=None):
        """ArtifactSourcePropertiesFragment - a model defined in OpenAPI

        :param arm_template_folder_path: The arm_template_folder_path of this ArtifactSourcePropertiesFragment.
        :param branch_ref: The branch_ref of this ArtifactSourcePropertiesFragment.
        :param display_name: The display_name of this ArtifactSourcePropertiesFragment.
        :param folder_path: The folder_path of this ArtifactSourcePropertiesFragment.
        :param security_token: The security_token of this ArtifactSourcePropertiesFragment.
        :param source_type: The source_type of this ArtifactSourcePropertiesFragment.
        :param status: The status of this ArtifactSourcePropertiesFragment.
        :param uri: The uri of this ArtifactSourcePropertiesFragment.
        """
        self.openapi_types = {
            'arm_template_folder_path': str,
            'branch_ref': str,
            'display_name': str,
            'folder_path': str,
            'security_token': str,
            'source_type': str,
            'status': str,
            'uri': str
        }

        self.attribute_map = {
            'arm_template_folder_path': 'armTemplateFolderPath',
            'branch_ref': 'branchRef',
            'display_name': 'displayName',
            'folder_path': 'folderPath',
            'security_token': 'securityToken',
            'source_type': 'sourceType',
            'status': 'status',
            'uri': 'uri'
        }

        self._arm_template_folder_path = arm_template_folder_path
        self._branch_ref = branch_ref
        self._display_name = display_name
        self._folder_path = folder_path
        self._security_token = security_token
        self._source_type = source_type
        self._status = status
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactSourcePropertiesFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactSourcePropertiesFragment of this ArtifactSourcePropertiesFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arm_template_folder_path(self):
        """Gets the arm_template_folder_path of this ArtifactSourcePropertiesFragment.

        The folder containing Azure Resource Manager templates.

        :return: The arm_template_folder_path of this ArtifactSourcePropertiesFragment.
        :rtype: str
        """
        return self._arm_template_folder_path

    @arm_template_folder_path.setter
    def arm_template_folder_path(self, arm_template_folder_path):
        """Sets the arm_template_folder_path of this ArtifactSourcePropertiesFragment.

        The folder containing Azure Resource Manager templates.

        :param arm_template_folder_path: The arm_template_folder_path of this ArtifactSourcePropertiesFragment.
        :type arm_template_folder_path: str
        """

        self._arm_template_folder_path = arm_template_folder_path

    @property
    def branch_ref(self):
        """Gets the branch_ref of this ArtifactSourcePropertiesFragment.

        The artifact source's branch reference.

        :return: The branch_ref of this ArtifactSourcePropertiesFragment.
        :rtype: str
        """
        return self._branch_ref

    @branch_ref.setter
    def branch_ref(self, branch_ref):
        """Sets the branch_ref of this ArtifactSourcePropertiesFragment.

        The artifact source's branch reference.

        :param branch_ref: The branch_ref of this ArtifactSourcePropertiesFragment.
        :type branch_ref: str
        """

        self._branch_ref = branch_ref

    @property
    def display_name(self):
        """Gets the display_name of this ArtifactSourcePropertiesFragment.

        The artifact source's display name.

        :return: The display_name of this ArtifactSourcePropertiesFragment.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ArtifactSourcePropertiesFragment.

        The artifact source's display name.

        :param display_name: The display_name of this ArtifactSourcePropertiesFragment.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def folder_path(self):
        """Gets the folder_path of this ArtifactSourcePropertiesFragment.

        The folder containing artifacts.

        :return: The folder_path of this ArtifactSourcePropertiesFragment.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this ArtifactSourcePropertiesFragment.

        The folder containing artifacts.

        :param folder_path: The folder_path of this ArtifactSourcePropertiesFragment.
        :type folder_path: str
        """

        self._folder_path = folder_path

    @property
    def security_token(self):
        """Gets the security_token of this ArtifactSourcePropertiesFragment.

        The security token to authenticate to the artifact source.

        :return: The security_token of this ArtifactSourcePropertiesFragment.
        :rtype: str
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this ArtifactSourcePropertiesFragment.

        The security token to authenticate to the artifact source.

        :param security_token: The security_token of this ArtifactSourcePropertiesFragment.
        :type security_token: str
        """

        self._security_token = security_token

    @property
    def source_type(self):
        """Gets the source_type of this ArtifactSourcePropertiesFragment.

        The artifact source's type.

        :return: The source_type of this ArtifactSourcePropertiesFragment.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this ArtifactSourcePropertiesFragment.

        The artifact source's type.

        :param source_type: The source_type of this ArtifactSourcePropertiesFragment.
        :type source_type: str
        """
        allowed_values = ["VsoGit", "GitHub"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this ArtifactSourcePropertiesFragment.

        Indicates if the artifact source is enabled (values: Enabled, Disabled).

        :return: The status of this ArtifactSourcePropertiesFragment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ArtifactSourcePropertiesFragment.

        Indicates if the artifact source is enabled (values: Enabled, Disabled).

        :param status: The status of this ArtifactSourcePropertiesFragment.
        :type status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def uri(self):
        """Gets the uri of this ArtifactSourcePropertiesFragment.

        The artifact source's URI.

        :return: The uri of this ArtifactSourcePropertiesFragment.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ArtifactSourcePropertiesFragment.

        The artifact source's URI.

        :param uri: The uri of this ArtifactSourcePropertiesFragment.
        :type uri: str
        """

        self._uri = uri
