# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiskProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: datetime=None, disk_blob_name: str=None, disk_size_gi_b: int=None, disk_type: str=None, disk_uri: str=None, host_caching: str=None, leased_by_lab_vm_id: str=None, managed_disk_id: str=None, provisioning_state: str=None, unique_identifier: str=None):
        """DiskProperties - a model defined in OpenAPI

        :param created_date: The created_date of this DiskProperties.
        :param disk_blob_name: The disk_blob_name of this DiskProperties.
        :param disk_size_gi_b: The disk_size_gi_b of this DiskProperties.
        :param disk_type: The disk_type of this DiskProperties.
        :param disk_uri: The disk_uri of this DiskProperties.
        :param host_caching: The host_caching of this DiskProperties.
        :param leased_by_lab_vm_id: The leased_by_lab_vm_id of this DiskProperties.
        :param managed_disk_id: The managed_disk_id of this DiskProperties.
        :param provisioning_state: The provisioning_state of this DiskProperties.
        :param unique_identifier: The unique_identifier of this DiskProperties.
        """
        self.openapi_types = {
            'created_date': datetime,
            'disk_blob_name': str,
            'disk_size_gi_b': int,
            'disk_type': str,
            'disk_uri': str,
            'host_caching': str,
            'leased_by_lab_vm_id': str,
            'managed_disk_id': str,
            'provisioning_state': str,
            'unique_identifier': str
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'disk_blob_name': 'diskBlobName',
            'disk_size_gi_b': 'diskSizeGiB',
            'disk_type': 'diskType',
            'disk_uri': 'diskUri',
            'host_caching': 'hostCaching',
            'leased_by_lab_vm_id': 'leasedByLabVmId',
            'managed_disk_id': 'managedDiskId',
            'provisioning_state': 'provisioningState',
            'unique_identifier': 'uniqueIdentifier'
        }

        self._created_date = created_date
        self._disk_blob_name = disk_blob_name
        self._disk_size_gi_b = disk_size_gi_b
        self._disk_type = disk_type
        self._disk_uri = disk_uri
        self._host_caching = host_caching
        self._leased_by_lab_vm_id = leased_by_lab_vm_id
        self._managed_disk_id = managed_disk_id
        self._provisioning_state = provisioning_state
        self._unique_identifier = unique_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskProperties of this DiskProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this DiskProperties.

        The creation date of the disk.

        :return: The created_date of this DiskProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DiskProperties.

        The creation date of the disk.

        :param created_date: The created_date of this DiskProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def disk_blob_name(self):
        """Gets the disk_blob_name of this DiskProperties.

        When backed by a blob, the name of the VHD blob without extension.

        :return: The disk_blob_name of this DiskProperties.
        :rtype: str
        """
        return self._disk_blob_name

    @disk_blob_name.setter
    def disk_blob_name(self, disk_blob_name):
        """Sets the disk_blob_name of this DiskProperties.

        When backed by a blob, the name of the VHD blob without extension.

        :param disk_blob_name: The disk_blob_name of this DiskProperties.
        :type disk_blob_name: str
        """

        self._disk_blob_name = disk_blob_name

    @property
    def disk_size_gi_b(self):
        """Gets the disk_size_gi_b of this DiskProperties.

        The size of the disk in GibiBytes.

        :return: The disk_size_gi_b of this DiskProperties.
        :rtype: int
        """
        return self._disk_size_gi_b

    @disk_size_gi_b.setter
    def disk_size_gi_b(self, disk_size_gi_b):
        """Sets the disk_size_gi_b of this DiskProperties.

        The size of the disk in GibiBytes.

        :param disk_size_gi_b: The disk_size_gi_b of this DiskProperties.
        :type disk_size_gi_b: int
        """

        self._disk_size_gi_b = disk_size_gi_b

    @property
    def disk_type(self):
        """Gets the disk_type of this DiskProperties.

        The storage type for the disk (i.e. Standard, Premium).

        :return: The disk_type of this DiskProperties.
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this DiskProperties.

        The storage type for the disk (i.e. Standard, Premium).

        :param disk_type: The disk_type of this DiskProperties.
        :type disk_type: str
        """
        allowed_values = ["Standard", "Premium", "StandardSSD"]  # noqa: E501
        if disk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `disk_type` ({0}), must be one of {1}"
                .format(disk_type, allowed_values)
            )

        self._disk_type = disk_type

    @property
    def disk_uri(self):
        """Gets the disk_uri of this DiskProperties.

        When backed by a blob, the URI of underlying blob.

        :return: The disk_uri of this DiskProperties.
        :rtype: str
        """
        return self._disk_uri

    @disk_uri.setter
    def disk_uri(self, disk_uri):
        """Sets the disk_uri of this DiskProperties.

        When backed by a blob, the URI of underlying blob.

        :param disk_uri: The disk_uri of this DiskProperties.
        :type disk_uri: str
        """

        self._disk_uri = disk_uri

    @property
    def host_caching(self):
        """Gets the host_caching of this DiskProperties.

        The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).

        :return: The host_caching of this DiskProperties.
        :rtype: str
        """
        return self._host_caching

    @host_caching.setter
    def host_caching(self, host_caching):
        """Sets the host_caching of this DiskProperties.

        The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).

        :param host_caching: The host_caching of this DiskProperties.
        :type host_caching: str
        """

        self._host_caching = host_caching

    @property
    def leased_by_lab_vm_id(self):
        """Gets the leased_by_lab_vm_id of this DiskProperties.

        The resource ID of the VM to which this disk is leased.

        :return: The leased_by_lab_vm_id of this DiskProperties.
        :rtype: str
        """
        return self._leased_by_lab_vm_id

    @leased_by_lab_vm_id.setter
    def leased_by_lab_vm_id(self, leased_by_lab_vm_id):
        """Sets the leased_by_lab_vm_id of this DiskProperties.

        The resource ID of the VM to which this disk is leased.

        :param leased_by_lab_vm_id: The leased_by_lab_vm_id of this DiskProperties.
        :type leased_by_lab_vm_id: str
        """

        self._leased_by_lab_vm_id = leased_by_lab_vm_id

    @property
    def managed_disk_id(self):
        """Gets the managed_disk_id of this DiskProperties.

        When backed by managed disk, this is the ID of the compute disk resource.

        :return: The managed_disk_id of this DiskProperties.
        :rtype: str
        """
        return self._managed_disk_id

    @managed_disk_id.setter
    def managed_disk_id(self, managed_disk_id):
        """Sets the managed_disk_id of this DiskProperties.

        When backed by managed disk, this is the ID of the compute disk resource.

        :param managed_disk_id: The managed_disk_id of this DiskProperties.
        :type managed_disk_id: str
        """

        self._managed_disk_id = managed_disk_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DiskProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this DiskProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DiskProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this DiskProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this DiskProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this DiskProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this DiskProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this DiskProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier
