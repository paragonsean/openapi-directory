# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabAnnouncementPropertiesFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: str=None, expiration_date: datetime=None, expired: bool=None, markdown: str=None, title: str=None):
        """LabAnnouncementPropertiesFragment - a model defined in OpenAPI

        :param enabled: The enabled of this LabAnnouncementPropertiesFragment.
        :param expiration_date: The expiration_date of this LabAnnouncementPropertiesFragment.
        :param expired: The expired of this LabAnnouncementPropertiesFragment.
        :param markdown: The markdown of this LabAnnouncementPropertiesFragment.
        :param title: The title of this LabAnnouncementPropertiesFragment.
        """
        self.openapi_types = {
            'enabled': str,
            'expiration_date': datetime,
            'expired': bool,
            'markdown': str,
            'title': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'expiration_date': 'expirationDate',
            'expired': 'expired',
            'markdown': 'markdown',
            'title': 'title'
        }

        self._enabled = enabled
        self._expiration_date = expiration_date
        self._expired = expired
        self._markdown = markdown
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabAnnouncementPropertiesFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabAnnouncementPropertiesFragment of this LabAnnouncementPropertiesFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this LabAnnouncementPropertiesFragment.

        Is the lab announcement active/enabled at this time?

        :return: The enabled of this LabAnnouncementPropertiesFragment.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LabAnnouncementPropertiesFragment.

        Is the lab announcement active/enabled at this time?

        :param enabled: The enabled of this LabAnnouncementPropertiesFragment.
        :type enabled: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled` ({0}), must be one of {1}"
                .format(enabled, allowed_values)
            )

        self._enabled = enabled

    @property
    def expiration_date(self):
        """Gets the expiration_date of this LabAnnouncementPropertiesFragment.

        The time at which the announcement expires (null for never)

        :return: The expiration_date of this LabAnnouncementPropertiesFragment.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this LabAnnouncementPropertiesFragment.

        The time at which the announcement expires (null for never)

        :param expiration_date: The expiration_date of this LabAnnouncementPropertiesFragment.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def expired(self):
        """Gets the expired of this LabAnnouncementPropertiesFragment.

        Has this announcement expired?

        :return: The expired of this LabAnnouncementPropertiesFragment.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this LabAnnouncementPropertiesFragment.

        Has this announcement expired?

        :param expired: The expired of this LabAnnouncementPropertiesFragment.
        :type expired: bool
        """

        self._expired = expired

    @property
    def markdown(self):
        """Gets the markdown of this LabAnnouncementPropertiesFragment.

        The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.

        :return: The markdown of this LabAnnouncementPropertiesFragment.
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """Sets the markdown of this LabAnnouncementPropertiesFragment.

        The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.

        :param markdown: The markdown of this LabAnnouncementPropertiesFragment.
        :type markdown: str
        """

        self._markdown = markdown

    @property
    def title(self):
        """Gets the title of this LabAnnouncementPropertiesFragment.

        The plain text title for the lab announcement

        :return: The title of this LabAnnouncementPropertiesFragment.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LabAnnouncementPropertiesFragment.

        The plain text title for the lab announcement

        :param title: The title of this LabAnnouncementPropertiesFragment.
        :type title: str
        """

        self._title = title
