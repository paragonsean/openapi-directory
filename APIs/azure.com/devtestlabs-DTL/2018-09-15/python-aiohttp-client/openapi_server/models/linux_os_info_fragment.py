# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinuxOsInfoFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, linux_os_state: str=None):
        """LinuxOsInfoFragment - a model defined in OpenAPI

        :param linux_os_state: The linux_os_state of this LinuxOsInfoFragment.
        """
        self.openapi_types = {
            'linux_os_state': str
        }

        self.attribute_map = {
            'linux_os_state': 'linuxOsState'
        }

        self._linux_os_state = linux_os_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinuxOsInfoFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinuxOsInfoFragment of this LinuxOsInfoFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def linux_os_state(self):
        """Gets the linux_os_state of this LinuxOsInfoFragment.

        The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).

        :return: The linux_os_state of this LinuxOsInfoFragment.
        :rtype: str
        """
        return self._linux_os_state

    @linux_os_state.setter
    def linux_os_state(self, linux_os_state):
        """Sets the linux_os_state of this LinuxOsInfoFragment.

        The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).

        :param linux_os_state: The linux_os_state of this LinuxOsInfoFragment.
        :type linux_os_state: str
        """
        allowed_values = ["NonDeprovisioned", "DeprovisionRequested", "DeprovisionApplied"]  # noqa: E501
        if linux_os_state not in allowed_values:
            raise ValueError(
                "Invalid value for `linux_os_state` ({0}), must be one of {1}"
                .format(linux_os_state, allowed_values)
            )

        self._linux_os_state = linux_os_state
