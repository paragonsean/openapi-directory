# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_parameter_properties import ArtifactParameterProperties
from openapi_server import util


class ArtifactInstallProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_id: str=None, artifact_title: str=None, deployment_status_message: str=None, install_time: datetime=None, parameters: List[ArtifactParameterProperties]=None, status: str=None, vm_extension_status_message: str=None):
        """ArtifactInstallProperties - a model defined in OpenAPI

        :param artifact_id: The artifact_id of this ArtifactInstallProperties.
        :param artifact_title: The artifact_title of this ArtifactInstallProperties.
        :param deployment_status_message: The deployment_status_message of this ArtifactInstallProperties.
        :param install_time: The install_time of this ArtifactInstallProperties.
        :param parameters: The parameters of this ArtifactInstallProperties.
        :param status: The status of this ArtifactInstallProperties.
        :param vm_extension_status_message: The vm_extension_status_message of this ArtifactInstallProperties.
        """
        self.openapi_types = {
            'artifact_id': str,
            'artifact_title': str,
            'deployment_status_message': str,
            'install_time': datetime,
            'parameters': List[ArtifactParameterProperties],
            'status': str,
            'vm_extension_status_message': str
        }

        self.attribute_map = {
            'artifact_id': 'artifactId',
            'artifact_title': 'artifactTitle',
            'deployment_status_message': 'deploymentStatusMessage',
            'install_time': 'installTime',
            'parameters': 'parameters',
            'status': 'status',
            'vm_extension_status_message': 'vmExtensionStatusMessage'
        }

        self._artifact_id = artifact_id
        self._artifact_title = artifact_title
        self._deployment_status_message = deployment_status_message
        self._install_time = install_time
        self._parameters = parameters
        self._status = status
        self._vm_extension_status_message = vm_extension_status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactInstallProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactInstallProperties of this ArtifactInstallProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_id(self):
        """Gets the artifact_id of this ArtifactInstallProperties.

        The artifact's identifier.

        :return: The artifact_id of this ArtifactInstallProperties.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this ArtifactInstallProperties.

        The artifact's identifier.

        :param artifact_id: The artifact_id of this ArtifactInstallProperties.
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def artifact_title(self):
        """Gets the artifact_title of this ArtifactInstallProperties.

        The artifact's title.

        :return: The artifact_title of this ArtifactInstallProperties.
        :rtype: str
        """
        return self._artifact_title

    @artifact_title.setter
    def artifact_title(self, artifact_title):
        """Sets the artifact_title of this ArtifactInstallProperties.

        The artifact's title.

        :param artifact_title: The artifact_title of this ArtifactInstallProperties.
        :type artifact_title: str
        """

        self._artifact_title = artifact_title

    @property
    def deployment_status_message(self):
        """Gets the deployment_status_message of this ArtifactInstallProperties.

        The status message from the deployment.

        :return: The deployment_status_message of this ArtifactInstallProperties.
        :rtype: str
        """
        return self._deployment_status_message

    @deployment_status_message.setter
    def deployment_status_message(self, deployment_status_message):
        """Sets the deployment_status_message of this ArtifactInstallProperties.

        The status message from the deployment.

        :param deployment_status_message: The deployment_status_message of this ArtifactInstallProperties.
        :type deployment_status_message: str
        """

        self._deployment_status_message = deployment_status_message

    @property
    def install_time(self):
        """Gets the install_time of this ArtifactInstallProperties.

        The time that the artifact starts to install on the virtual machine.

        :return: The install_time of this ArtifactInstallProperties.
        :rtype: datetime
        """
        return self._install_time

    @install_time.setter
    def install_time(self, install_time):
        """Sets the install_time of this ArtifactInstallProperties.

        The time that the artifact starts to install on the virtual machine.

        :param install_time: The install_time of this ArtifactInstallProperties.
        :type install_time: datetime
        """

        self._install_time = install_time

    @property
    def parameters(self):
        """Gets the parameters of this ArtifactInstallProperties.

        The parameters of the artifact.

        :return: The parameters of this ArtifactInstallProperties.
        :rtype: List[ArtifactParameterProperties]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ArtifactInstallProperties.

        The parameters of the artifact.

        :param parameters: The parameters of this ArtifactInstallProperties.
        :type parameters: List[ArtifactParameterProperties]
        """

        self._parameters = parameters

    @property
    def status(self):
        """Gets the status of this ArtifactInstallProperties.

        The status of the artifact.

        :return: The status of this ArtifactInstallProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ArtifactInstallProperties.

        The status of the artifact.

        :param status: The status of this ArtifactInstallProperties.
        :type status: str
        """

        self._status = status

    @property
    def vm_extension_status_message(self):
        """Gets the vm_extension_status_message of this ArtifactInstallProperties.

        The status message from the virtual machine extension.

        :return: The vm_extension_status_message of this ArtifactInstallProperties.
        :rtype: str
        """
        return self._vm_extension_status_message

    @vm_extension_status_message.setter
    def vm_extension_status_message(self, vm_extension_status_message):
        """Sets the vm_extension_status_message of this ArtifactInstallProperties.

        The status message from the virtual machine extension.

        :param vm_extension_status_message: The vm_extension_status_message of this ArtifactInstallProperties.
        :type vm_extension_status_message: str
        """

        self._vm_extension_status_message = vm_extension_status_message
