# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_violation import PolicyViolation
from openapi_server import util


class PolicySetResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_error: bool=None, policy_violations: List[PolicyViolation]=None):
        """PolicySetResult - a model defined in OpenAPI

        :param has_error: The has_error of this PolicySetResult.
        :param policy_violations: The policy_violations of this PolicySetResult.
        """
        self.openapi_types = {
            'has_error': bool,
            'policy_violations': List[PolicyViolation]
        }

        self.attribute_map = {
            'has_error': 'hasError',
            'policy_violations': 'policyViolations'
        }

        self._has_error = has_error
        self._policy_violations = policy_violations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicySetResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicySetResult of this PolicySetResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_error(self):
        """Gets the has_error of this PolicySetResult.

        A value indicating whether this policy set evaluation has discovered violations.

        :return: The has_error of this PolicySetResult.
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """Sets the has_error of this PolicySetResult.

        A value indicating whether this policy set evaluation has discovered violations.

        :param has_error: The has_error of this PolicySetResult.
        :type has_error: bool
        """

        self._has_error = has_error

    @property
    def policy_violations(self):
        """Gets the policy_violations of this PolicySetResult.

        The list of policy violations.

        :return: The policy_violations of this PolicySetResult.
        :rtype: List[PolicyViolation]
        """
        return self._policy_violations

    @policy_violations.setter
    def policy_violations(self, policy_violations):
        """Sets the policy_violations of this PolicySetResult.

        The list of policy violations.

        :param policy_violations: The policy_violations of this PolicySetResult.
        :type policy_violations: List[PolicyViolation]
        """

        self._policy_violations = policy_violations
