# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationSettingsFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_recipient: str=None, notification_locale: str=None, status: str=None, time_in_minutes: int=None, webhook_url: str=None):
        """NotificationSettingsFragment - a model defined in OpenAPI

        :param email_recipient: The email_recipient of this NotificationSettingsFragment.
        :param notification_locale: The notification_locale of this NotificationSettingsFragment.
        :param status: The status of this NotificationSettingsFragment.
        :param time_in_minutes: The time_in_minutes of this NotificationSettingsFragment.
        :param webhook_url: The webhook_url of this NotificationSettingsFragment.
        """
        self.openapi_types = {
            'email_recipient': str,
            'notification_locale': str,
            'status': str,
            'time_in_minutes': int,
            'webhook_url': str
        }

        self.attribute_map = {
            'email_recipient': 'emailRecipient',
            'notification_locale': 'notificationLocale',
            'status': 'status',
            'time_in_minutes': 'timeInMinutes',
            'webhook_url': 'webhookUrl'
        }

        self._email_recipient = email_recipient
        self._notification_locale = notification_locale
        self._status = status
        self._time_in_minutes = time_in_minutes
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSettingsFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSettingsFragment of this NotificationSettingsFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_recipient(self):
        """Gets the email_recipient of this NotificationSettingsFragment.

        The email recipient to send notifications to (can be a list of semi-colon separated email addresses).

        :return: The email_recipient of this NotificationSettingsFragment.
        :rtype: str
        """
        return self._email_recipient

    @email_recipient.setter
    def email_recipient(self, email_recipient):
        """Sets the email_recipient of this NotificationSettingsFragment.

        The email recipient to send notifications to (can be a list of semi-colon separated email addresses).

        :param email_recipient: The email_recipient of this NotificationSettingsFragment.
        :type email_recipient: str
        """

        self._email_recipient = email_recipient

    @property
    def notification_locale(self):
        """Gets the notification_locale of this NotificationSettingsFragment.

        The locale to use when sending a notification (fallback for unsupported languages is EN).

        :return: The notification_locale of this NotificationSettingsFragment.
        :rtype: str
        """
        return self._notification_locale

    @notification_locale.setter
    def notification_locale(self, notification_locale):
        """Sets the notification_locale of this NotificationSettingsFragment.

        The locale to use when sending a notification (fallback for unsupported languages is EN).

        :param notification_locale: The notification_locale of this NotificationSettingsFragment.
        :type notification_locale: str
        """

        self._notification_locale = notification_locale

    @property
    def status(self):
        """Gets the status of this NotificationSettingsFragment.

        If notifications are enabled for this schedule (i.e. Enabled, Disabled).

        :return: The status of this NotificationSettingsFragment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotificationSettingsFragment.

        If notifications are enabled for this schedule (i.e. Enabled, Disabled).

        :param status: The status of this NotificationSettingsFragment.
        :type status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_in_minutes(self):
        """Gets the time_in_minutes of this NotificationSettingsFragment.

        Time in minutes before event at which notification will be sent.

        :return: The time_in_minutes of this NotificationSettingsFragment.
        :rtype: int
        """
        return self._time_in_minutes

    @time_in_minutes.setter
    def time_in_minutes(self, time_in_minutes):
        """Sets the time_in_minutes of this NotificationSettingsFragment.

        Time in minutes before event at which notification will be sent.

        :param time_in_minutes: The time_in_minutes of this NotificationSettingsFragment.
        :type time_in_minutes: int
        """

        self._time_in_minutes = time_in_minutes

    @property
    def webhook_url(self):
        """Gets the webhook_url of this NotificationSettingsFragment.

        The webhook URL to which the notification will be sent.

        :return: The webhook_url of this NotificationSettingsFragment.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this NotificationSettingsFragment.

        The webhook URL to which the notification will be sent.

        :param webhook_url: The webhook_url of this NotificationSettingsFragment.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url
