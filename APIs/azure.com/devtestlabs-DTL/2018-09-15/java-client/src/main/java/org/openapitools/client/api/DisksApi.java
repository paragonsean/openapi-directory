/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttachDiskProperties;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.DetachDiskProperties;
import org.openapitools.client.model.Disk;
import org.openapitools.client.model.DiskFragment;
import org.openapitools.client.model.DiskList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for disksAttach
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param attachDiskProperties Properties of the disk to attach. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksAttachCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, AttachDiskProperties attachDiskProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachDiskProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}/attach"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disksAttachValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, AttachDiskProperties attachDiskProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disksAttach(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disksAttach(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling disksAttach(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling disksAttach(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling disksAttach(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disksAttach(Async)");
        }

        // verify the required parameter 'attachDiskProperties' is set
        if (attachDiskProperties == null) {
            throw new ApiException("Missing the required parameter 'attachDiskProperties' when calling disksAttach(Async)");
        }

        return disksAttachCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, attachDiskProperties, _callback);

    }

    /**
     * 
     * Attach and create the lease of the disk to the virtual machine. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param attachDiskProperties Properties of the disk to attach. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void disksAttach(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, AttachDiskProperties attachDiskProperties) throws ApiException {
        disksAttachWithHttpInfo(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, attachDiskProperties);
    }

    /**
     * 
     * Attach and create the lease of the disk to the virtual machine. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param attachDiskProperties Properties of the disk to attach. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disksAttachWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, AttachDiskProperties attachDiskProperties) throws ApiException {
        okhttp3.Call localVarCall = disksAttachValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, attachDiskProperties, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Attach and create the lease of the disk to the virtual machine. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param attachDiskProperties Properties of the disk to attach. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksAttachAsync(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, AttachDiskProperties attachDiskProperties, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disksAttachValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, attachDiskProperties, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disksCreateOrUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param disk A Disk. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, Disk disk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disk;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disksCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, Disk disk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling disksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling disksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling disksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'disk' is set
        if (disk == null) {
            throw new ApiException("Missing the required parameter 'disk' when calling disksCreateOrUpdate(Async)");
        }

        return disksCreateOrUpdateCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, disk, _callback);

    }

    /**
     * 
     * Create or replace an existing disk. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param disk A Disk. (required)
     * @return Disk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Disk disksCreateOrUpdate(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, Disk disk) throws ApiException {
        ApiResponse<Disk> localVarResp = disksCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, disk);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or replace an existing disk. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param disk A Disk. (required)
     * @return ApiResponse&lt;Disk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Disk> disksCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, Disk disk) throws ApiException {
        okhttp3.Call localVarCall = disksCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, disk, null);
        Type localVarReturnType = new TypeToken<Disk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or replace an existing disk. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param disk A Disk. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, Disk disk, final ApiCallback<Disk> _callback) throws ApiException {

        okhttp3.Call localVarCall = disksCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, disk, _callback);
        Type localVarReturnType = new TypeToken<Disk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disksDelete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksDeleteCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disksDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disksDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disksDelete(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling disksDelete(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling disksDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling disksDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disksDelete(Async)");
        }

        return disksDeleteCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, _callback);

    }

    /**
     * 
     * Delete disk. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void disksDelete(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion) throws ApiException {
        disksDeleteWithHttpInfo(subscriptionId, resourceGroupName, labName, userName, name, apiVersion);
    }

    /**
     * 
     * Delete disk. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disksDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = disksDeleteValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete disk. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksDeleteAsync(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disksDeleteValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disksDetach
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param detachDiskProperties Properties of the disk to detach. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksDetachCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DetachDiskProperties detachDiskProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachDiskProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}/detach"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disksDetachValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DetachDiskProperties detachDiskProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disksDetach(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disksDetach(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling disksDetach(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling disksDetach(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling disksDetach(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disksDetach(Async)");
        }

        // verify the required parameter 'detachDiskProperties' is set
        if (detachDiskProperties == null) {
            throw new ApiException("Missing the required parameter 'detachDiskProperties' when calling disksDetach(Async)");
        }

        return disksDetachCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, detachDiskProperties, _callback);

    }

    /**
     * 
     * Detach and break the lease of the disk attached to the virtual machine. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param detachDiskProperties Properties of the disk to detach. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void disksDetach(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DetachDiskProperties detachDiskProperties) throws ApiException {
        disksDetachWithHttpInfo(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, detachDiskProperties);
    }

    /**
     * 
     * Detach and break the lease of the disk attached to the virtual machine. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param detachDiskProperties Properties of the disk to detach. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disksDetachWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DetachDiskProperties detachDiskProperties) throws ApiException {
        okhttp3.Call localVarCall = disksDetachValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, detachDiskProperties, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Detach and break the lease of the disk attached to the virtual machine. This operation can take a while to complete.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param detachDiskProperties Properties of the disk to detach. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksDetachAsync(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DetachDiskProperties detachDiskProperties, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disksDetachValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, detachDiskProperties, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disksGet
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;diskType)&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksGetCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disksGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disksGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disksGet(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling disksGet(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling disksGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling disksGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disksGet(Async)");
        }

        return disksGetCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, $expand, _callback);

    }

    /**
     * 
     * Get disk.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;diskType)&#39; (optional)
     * @return Disk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Disk disksGet(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, String $expand) throws ApiException {
        ApiResponse<Disk> localVarResp = disksGetWithHttpInfo(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Get disk.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;diskType)&#39; (optional)
     * @return ApiResponse&lt;Disk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Disk> disksGetWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = disksGetValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<Disk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get disk.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;diskType)&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksGetAsync(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, String $expand, final ApiCallback<Disk> _callback) throws ApiException {

        okhttp3.Call localVarCall = disksGetValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<Disk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disksList
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;diskType)&#39; (optional)
     * @param $filter The filter to apply to the operation. Example: &#39;$filter&#x3D;contains(name,&#39;myName&#39;) (optional)
     * @param $top The maximum number of resources to return from the operation. Example: &#39;$top&#x3D;10&#39; (optional)
     * @param $orderby The ordering expression for the results, using OData notation. Example: &#39;$orderby&#x3D;name desc&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksListCall(String subscriptionId, String resourceGroupName, String labName, String userName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disksListValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String userName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disksList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disksList(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling disksList(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling disksList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disksList(Async)");
        }

        return disksListCall(subscriptionId, resourceGroupName, labName, userName, apiVersion, $expand, $filter, $top, $orderby, _callback);

    }

    /**
     * 
     * List disks in a given user profile.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;diskType)&#39; (optional)
     * @param $filter The filter to apply to the operation. Example: &#39;$filter&#x3D;contains(name,&#39;myName&#39;) (optional)
     * @param $top The maximum number of resources to return from the operation. Example: &#39;$top&#x3D;10&#39; (optional)
     * @param $orderby The ordering expression for the results, using OData notation. Example: &#39;$orderby&#x3D;name desc&#39; (optional)
     * @return DiskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public DiskList disksList(String subscriptionId, String resourceGroupName, String labName, String userName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby) throws ApiException {
        ApiResponse<DiskList> localVarResp = disksListWithHttpInfo(subscriptionId, resourceGroupName, labName, userName, apiVersion, $expand, $filter, $top, $orderby);
        return localVarResp.getData();
    }

    /**
     * 
     * List disks in a given user profile.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;diskType)&#39; (optional)
     * @param $filter The filter to apply to the operation. Example: &#39;$filter&#x3D;contains(name,&#39;myName&#39;) (optional)
     * @param $top The maximum number of resources to return from the operation. Example: &#39;$top&#x3D;10&#39; (optional)
     * @param $orderby The ordering expression for the results, using OData notation. Example: &#39;$orderby&#x3D;name desc&#39; (optional)
     * @return ApiResponse&lt;DiskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiskList> disksListWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String userName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby) throws ApiException {
        okhttp3.Call localVarCall = disksListValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, apiVersion, $expand, $filter, $top, $orderby, null);
        Type localVarReturnType = new TypeToken<DiskList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List disks in a given user profile.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;diskType)&#39; (optional)
     * @param $filter The filter to apply to the operation. Example: &#39;$filter&#x3D;contains(name,&#39;myName&#39;) (optional)
     * @param $top The maximum number of resources to return from the operation. Example: &#39;$top&#x3D;10&#39; (optional)
     * @param $orderby The ordering expression for the results, using OData notation. Example: &#39;$orderby&#x3D;name desc&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksListAsync(String subscriptionId, String resourceGroupName, String labName, String userName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback<DiskList> _callback) throws ApiException {

        okhttp3.Call localVarCall = disksListValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, apiVersion, $expand, $filter, $top, $orderby, _callback);
        Type localVarReturnType = new TypeToken<DiskList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disksUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param disk A Disk. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksUpdateCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DiskFragment disk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disk;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disksUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DiskFragment disk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disksUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling disksUpdate(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling disksUpdate(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling disksUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling disksUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disksUpdate(Async)");
        }

        // verify the required parameter 'disk' is set
        if (disk == null) {
            throw new ApiException("Missing the required parameter 'disk' when calling disksUpdate(Async)");
        }

        return disksUpdateCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, disk, _callback);

    }

    /**
     * 
     * Allows modifying tags of disks. All other properties will be ignored.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param disk A Disk. (required)
     * @return Disk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Disk disksUpdate(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DiskFragment disk) throws ApiException {
        ApiResponse<Disk> localVarResp = disksUpdateWithHttpInfo(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, disk);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows modifying tags of disks. All other properties will be ignored.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param disk A Disk. (required)
     * @return ApiResponse&lt;Disk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Disk> disksUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DiskFragment disk) throws ApiException {
        okhttp3.Call localVarCall = disksUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, disk, null);
        Type localVarReturnType = new TypeToken<Disk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows modifying tags of disks. All other properties will be ignored.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labName The name of the lab. (required)
     * @param userName The name of the user profile. (required)
     * @param name The name of the disk. (required)
     * @param apiVersion Client API version. (required)
     * @param disk A Disk. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disksUpdateAsync(String subscriptionId, String resourceGroupName, String labName, String userName, String name, String apiVersion, DiskFragment disk, final ApiCallback<Disk> _callback) throws ApiException {

        okhttp3.Call localVarCall = disksUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labName, userName, name, apiVersion, disk, _callback);
        Type localVarReturnType = new TypeToken<Disk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
