/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskPropertiesFragment {
  public static final String SERIALIZED_NAME_DISK_BLOB_NAME = "diskBlobName";
  @SerializedName(SERIALIZED_NAME_DISK_BLOB_NAME)
  private String diskBlobName;

  public static final String SERIALIZED_NAME_DISK_SIZE_GI_B = "diskSizeGiB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_GI_B)
  private Integer diskSizeGiB;

  /**
   * The storage type for the disk (i.e. Standard, Premium).
   */
  @JsonAdapter(DiskTypeEnum.Adapter.class)
  public enum DiskTypeEnum {
    STANDARD("Standard"),
    
    PREMIUM("Premium"),
    
    STANDARD_SSD("StandardSSD");

    private String value;

    DiskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiskTypeEnum fromValue(String value) {
      for (DiskTypeEnum b : DiskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISK_TYPE = "diskType";
  @SerializedName(SERIALIZED_NAME_DISK_TYPE)
  private DiskTypeEnum diskType;

  public static final String SERIALIZED_NAME_DISK_URI = "diskUri";
  @SerializedName(SERIALIZED_NAME_DISK_URI)
  private String diskUri;

  public static final String SERIALIZED_NAME_HOST_CACHING = "hostCaching";
  @SerializedName(SERIALIZED_NAME_HOST_CACHING)
  private String hostCaching;

  public static final String SERIALIZED_NAME_LEASED_BY_LAB_VM_ID = "leasedByLabVmId";
  @SerializedName(SERIALIZED_NAME_LEASED_BY_LAB_VM_ID)
  private String leasedByLabVmId;

  public static final String SERIALIZED_NAME_MANAGED_DISK_ID = "managedDiskId";
  @SerializedName(SERIALIZED_NAME_MANAGED_DISK_ID)
  private String managedDiskId;

  public DiskPropertiesFragment() {
  }

  public DiskPropertiesFragment diskBlobName(String diskBlobName) {
    this.diskBlobName = diskBlobName;
    return this;
  }

  /**
   * When backed by a blob, the name of the VHD blob without extension.
   * @return diskBlobName
   */
  @javax.annotation.Nullable
  public String getDiskBlobName() {
    return diskBlobName;
  }

  public void setDiskBlobName(String diskBlobName) {
    this.diskBlobName = diskBlobName;
  }


  public DiskPropertiesFragment diskSizeGiB(Integer diskSizeGiB) {
    this.diskSizeGiB = diskSizeGiB;
    return this;
  }

  /**
   * The size of the disk in GibiBytes.
   * @return diskSizeGiB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGiB() {
    return diskSizeGiB;
  }

  public void setDiskSizeGiB(Integer diskSizeGiB) {
    this.diskSizeGiB = diskSizeGiB;
  }


  public DiskPropertiesFragment diskType(DiskTypeEnum diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * The storage type for the disk (i.e. Standard, Premium).
   * @return diskType
   */
  @javax.annotation.Nullable
  public DiskTypeEnum getDiskType() {
    return diskType;
  }

  public void setDiskType(DiskTypeEnum diskType) {
    this.diskType = diskType;
  }


  public DiskPropertiesFragment diskUri(String diskUri) {
    this.diskUri = diskUri;
    return this;
  }

  /**
   * When backed by a blob, the URI of underlying blob.
   * @return diskUri
   */
  @javax.annotation.Nullable
  public String getDiskUri() {
    return diskUri;
  }

  public void setDiskUri(String diskUri) {
    this.diskUri = diskUri;
  }


  public DiskPropertiesFragment hostCaching(String hostCaching) {
    this.hostCaching = hostCaching;
    return this;
  }

  /**
   * The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).
   * @return hostCaching
   */
  @javax.annotation.Nullable
  public String getHostCaching() {
    return hostCaching;
  }

  public void setHostCaching(String hostCaching) {
    this.hostCaching = hostCaching;
  }


  public DiskPropertiesFragment leasedByLabVmId(String leasedByLabVmId) {
    this.leasedByLabVmId = leasedByLabVmId;
    return this;
  }

  /**
   * The resource ID of the VM to which this disk is leased.
   * @return leasedByLabVmId
   */
  @javax.annotation.Nullable
  public String getLeasedByLabVmId() {
    return leasedByLabVmId;
  }

  public void setLeasedByLabVmId(String leasedByLabVmId) {
    this.leasedByLabVmId = leasedByLabVmId;
  }


  public DiskPropertiesFragment managedDiskId(String managedDiskId) {
    this.managedDiskId = managedDiskId;
    return this;
  }

  /**
   * When backed by managed disk, this is the ID of the compute disk resource.
   * @return managedDiskId
   */
  @javax.annotation.Nullable
  public String getManagedDiskId() {
    return managedDiskId;
  }

  public void setManagedDiskId(String managedDiskId) {
    this.managedDiskId = managedDiskId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskPropertiesFragment diskPropertiesFragment = (DiskPropertiesFragment) o;
    return Objects.equals(this.diskBlobName, diskPropertiesFragment.diskBlobName) &&
        Objects.equals(this.diskSizeGiB, diskPropertiesFragment.diskSizeGiB) &&
        Objects.equals(this.diskType, diskPropertiesFragment.diskType) &&
        Objects.equals(this.diskUri, diskPropertiesFragment.diskUri) &&
        Objects.equals(this.hostCaching, diskPropertiesFragment.hostCaching) &&
        Objects.equals(this.leasedByLabVmId, diskPropertiesFragment.leasedByLabVmId) &&
        Objects.equals(this.managedDiskId, diskPropertiesFragment.managedDiskId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskBlobName, diskSizeGiB, diskType, diskUri, hostCaching, leasedByLabVmId, managedDiskId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskPropertiesFragment {\n");
    sb.append("    diskBlobName: ").append(toIndentedString(diskBlobName)).append("\n");
    sb.append("    diskSizeGiB: ").append(toIndentedString(diskSizeGiB)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    diskUri: ").append(toIndentedString(diskUri)).append("\n");
    sb.append("    hostCaching: ").append(toIndentedString(hostCaching)).append("\n");
    sb.append("    leasedByLabVmId: ").append(toIndentedString(leasedByLabVmId)).append("\n");
    sb.append("    managedDiskId: ").append(toIndentedString(managedDiskId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskBlobName");
    openapiFields.add("diskSizeGiB");
    openapiFields.add("diskType");
    openapiFields.add("diskUri");
    openapiFields.add("hostCaching");
    openapiFields.add("leasedByLabVmId");
    openapiFields.add("managedDiskId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskPropertiesFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskPropertiesFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskPropertiesFragment is not found in the empty JSON string", DiskPropertiesFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskPropertiesFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskPropertiesFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diskBlobName") != null && !jsonObj.get("diskBlobName").isJsonNull()) && !jsonObj.get("diskBlobName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskBlobName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskBlobName").toString()));
      }
      if ((jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) && !jsonObj.get("diskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskType").toString()));
      }
      // validate the optional field `diskType`
      if (jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) {
        DiskTypeEnum.validateJsonElement(jsonObj.get("diskType"));
      }
      if ((jsonObj.get("diskUri") != null && !jsonObj.get("diskUri").isJsonNull()) && !jsonObj.get("diskUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskUri").toString()));
      }
      if ((jsonObj.get("hostCaching") != null && !jsonObj.get("hostCaching").isJsonNull()) && !jsonObj.get("hostCaching").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostCaching` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostCaching").toString()));
      }
      if ((jsonObj.get("leasedByLabVmId") != null && !jsonObj.get("leasedByLabVmId").isJsonNull()) && !jsonObj.get("leasedByLabVmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leasedByLabVmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leasedByLabVmId").toString()));
      }
      if ((jsonObj.get("managedDiskId") != null && !jsonObj.get("managedDiskId").isJsonNull()) && !jsonObj.get("managedDiskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedDiskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedDiskId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskPropertiesFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskPropertiesFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskPropertiesFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskPropertiesFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskPropertiesFragment>() {
           @Override
           public void write(JsonWriter out, DiskPropertiesFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskPropertiesFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskPropertiesFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskPropertiesFragment
   * @throws IOException if the JSON string is invalid with respect to DiskPropertiesFragment
   */
  public static DiskPropertiesFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskPropertiesFragment.class);
  }

  /**
   * Convert an instance of DiskPropertiesFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

