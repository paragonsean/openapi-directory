/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArtifactDeploymentStatusPropertiesFragment;
import org.openapitools.client.model.ArtifactInstallPropertiesFragment;
import org.openapitools.client.model.DataDiskPropertiesFragment;
import org.openapitools.client.model.GalleryImageReferenceFragment;
import org.openapitools.client.model.NetworkInterfacePropertiesFragment;
import org.openapitools.client.model.ScheduleCreationParameterFragment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a virtual machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabVirtualMachinePropertiesFragment {
  public static final String SERIALIZED_NAME_ALLOW_CLAIM = "allowClaim";
  @SerializedName(SERIALIZED_NAME_ALLOW_CLAIM)
  private Boolean allowClaim;

  public static final String SERIALIZED_NAME_ARTIFACT_DEPLOYMENT_STATUS = "artifactDeploymentStatus";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_DEPLOYMENT_STATUS)
  private ArtifactDeploymentStatusPropertiesFragment artifactDeploymentStatus;

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private List<ArtifactInstallPropertiesFragment> artifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPUTE_ID = "computeId";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ID)
  private String computeId;

  public static final String SERIALIZED_NAME_CREATED_BY_USER = "createdByUser";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER)
  private String createdByUser;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_ID = "createdByUserId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_ID)
  private String createdByUserId;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CUSTOM_IMAGE_ID = "customImageId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_IMAGE_ID)
  private String customImageId;

  public static final String SERIALIZED_NAME_DATA_DISK_PARAMETERS = "dataDiskParameters";
  @SerializedName(SERIALIZED_NAME_DATA_DISK_PARAMETERS)
  private List<DataDiskPropertiesFragment> dataDiskParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISALLOW_PUBLIC_IP_ADDRESS = "disallowPublicIpAddress";
  @SerializedName(SERIALIZED_NAME_DISALLOW_PUBLIC_IP_ADDRESS)
  private Boolean disallowPublicIpAddress;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environmentId";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private String environmentId;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_GALLERY_IMAGE_REFERENCE = "galleryImageReference";
  @SerializedName(SERIALIZED_NAME_GALLERY_IMAGE_REFERENCE)
  private GalleryImageReferenceFragment galleryImageReference;

  public static final String SERIALIZED_NAME_IS_AUTHENTICATION_WITH_SSH_KEY = "isAuthenticationWithSshKey";
  @SerializedName(SERIALIZED_NAME_IS_AUTHENTICATION_WITH_SSH_KEY)
  private Boolean isAuthenticationWithSshKey;

  public static final String SERIALIZED_NAME_LAB_SUBNET_NAME = "labSubnetName";
  @SerializedName(SERIALIZED_NAME_LAB_SUBNET_NAME)
  private String labSubnetName;

  public static final String SERIALIZED_NAME_LAB_VIRTUAL_NETWORK_ID = "labVirtualNetworkId";
  @SerializedName(SERIALIZED_NAME_LAB_VIRTUAL_NETWORK_ID)
  private String labVirtualNetworkId;

  public static final String SERIALIZED_NAME_LAST_KNOWN_POWER_STATE = "lastKnownPowerState";
  @SerializedName(SERIALIZED_NAME_LAST_KNOWN_POWER_STATE)
  private String lastKnownPowerState;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE = "networkInterface";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE)
  private NetworkInterfacePropertiesFragment networkInterface;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_OWNER_OBJECT_ID = "ownerObjectId";
  @SerializedName(SERIALIZED_NAME_OWNER_OBJECT_ID)
  private String ownerObjectId;

  public static final String SERIALIZED_NAME_OWNER_USER_PRINCIPAL_NAME = "ownerUserPrincipalName";
  @SerializedName(SERIALIZED_NAME_OWNER_USER_PRINCIPAL_NAME)
  private String ownerUserPrincipalName;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PLAN_ID = "planId";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_SCHEDULE_PARAMETERS = "scheduleParameters";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_PARAMETERS)
  private List<ScheduleCreationParameterFragment> scheduleParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_SSH_KEY = "sshKey";
  @SerializedName(SERIALIZED_NAME_SSH_KEY)
  private String sshKey;

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "storageType";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private String storageType;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  /**
   * Tells source of creation of lab virtual machine. Output property only.
   */
  @JsonAdapter(VirtualMachineCreationSourceEnum.Adapter.class)
  public enum VirtualMachineCreationSourceEnum {
    FROM_CUSTOM_IMAGE("FromCustomImage"),
    
    FROM_GALLERY_IMAGE("FromGalleryImage"),
    
    FROM_SHARED_GALLERY_IMAGE("FromSharedGalleryImage");

    private String value;

    VirtualMachineCreationSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VirtualMachineCreationSourceEnum fromValue(String value) {
      for (VirtualMachineCreationSourceEnum b : VirtualMachineCreationSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VirtualMachineCreationSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VirtualMachineCreationSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VirtualMachineCreationSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VirtualMachineCreationSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VirtualMachineCreationSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINE_CREATION_SOURCE = "virtualMachineCreationSource";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE_CREATION_SOURCE)
  private VirtualMachineCreationSourceEnum virtualMachineCreationSource;

  public LabVirtualMachinePropertiesFragment() {
  }

  public LabVirtualMachinePropertiesFragment allowClaim(Boolean allowClaim) {
    this.allowClaim = allowClaim;
    return this;
  }

  /**
   * Indicates whether another user can take ownership of the virtual machine
   * @return allowClaim
   */
  @javax.annotation.Nullable
  public Boolean getAllowClaim() {
    return allowClaim;
  }

  public void setAllowClaim(Boolean allowClaim) {
    this.allowClaim = allowClaim;
  }


  public LabVirtualMachinePropertiesFragment artifactDeploymentStatus(ArtifactDeploymentStatusPropertiesFragment artifactDeploymentStatus) {
    this.artifactDeploymentStatus = artifactDeploymentStatus;
    return this;
  }

  /**
   * Get artifactDeploymentStatus
   * @return artifactDeploymentStatus
   */
  @javax.annotation.Nullable
  public ArtifactDeploymentStatusPropertiesFragment getArtifactDeploymentStatus() {
    return artifactDeploymentStatus;
  }

  public void setArtifactDeploymentStatus(ArtifactDeploymentStatusPropertiesFragment artifactDeploymentStatus) {
    this.artifactDeploymentStatus = artifactDeploymentStatus;
  }


  public LabVirtualMachinePropertiesFragment artifacts(List<ArtifactInstallPropertiesFragment> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public LabVirtualMachinePropertiesFragment addArtifactsItem(ArtifactInstallPropertiesFragment artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new ArrayList<>();
    }
    this.artifacts.add(artifactsItem);
    return this;
  }

  /**
   * The artifacts to be installed on the virtual machine.
   * @return artifacts
   */
  @javax.annotation.Nullable
  public List<ArtifactInstallPropertiesFragment> getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(List<ArtifactInstallPropertiesFragment> artifacts) {
    this.artifacts = artifacts;
  }


  public LabVirtualMachinePropertiesFragment computeId(String computeId) {
    this.computeId = computeId;
    return this;
  }

  /**
   * The resource identifier (Microsoft.Compute) of the virtual machine.
   * @return computeId
   */
  @javax.annotation.Nullable
  public String getComputeId() {
    return computeId;
  }

  public void setComputeId(String computeId) {
    this.computeId = computeId;
  }


  public LabVirtualMachinePropertiesFragment createdByUser(String createdByUser) {
    this.createdByUser = createdByUser;
    return this;
  }

  /**
   * The email address of creator of the virtual machine.
   * @return createdByUser
   */
  @javax.annotation.Nullable
  public String getCreatedByUser() {
    return createdByUser;
  }

  public void setCreatedByUser(String createdByUser) {
    this.createdByUser = createdByUser;
  }


  public LabVirtualMachinePropertiesFragment createdByUserId(String createdByUserId) {
    this.createdByUserId = createdByUserId;
    return this;
  }

  /**
   * The object identifier of the creator of the virtual machine.
   * @return createdByUserId
   */
  @javax.annotation.Nullable
  public String getCreatedByUserId() {
    return createdByUserId;
  }

  public void setCreatedByUserId(String createdByUserId) {
    this.createdByUserId = createdByUserId;
  }


  public LabVirtualMachinePropertiesFragment createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The creation date of the virtual machine.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public LabVirtualMachinePropertiesFragment customImageId(String customImageId) {
    this.customImageId = customImageId;
    return this;
  }

  /**
   * The custom image identifier of the virtual machine.
   * @return customImageId
   */
  @javax.annotation.Nullable
  public String getCustomImageId() {
    return customImageId;
  }

  public void setCustomImageId(String customImageId) {
    this.customImageId = customImageId;
  }


  public LabVirtualMachinePropertiesFragment dataDiskParameters(List<DataDiskPropertiesFragment> dataDiskParameters) {
    this.dataDiskParameters = dataDiskParameters;
    return this;
  }

  public LabVirtualMachinePropertiesFragment addDataDiskParametersItem(DataDiskPropertiesFragment dataDiskParametersItem) {
    if (this.dataDiskParameters == null) {
      this.dataDiskParameters = new ArrayList<>();
    }
    this.dataDiskParameters.add(dataDiskParametersItem);
    return this;
  }

  /**
   * New or existing data disks to attach to the virtual machine after creation
   * @return dataDiskParameters
   */
  @javax.annotation.Nullable
  public List<DataDiskPropertiesFragment> getDataDiskParameters() {
    return dataDiskParameters;
  }

  public void setDataDiskParameters(List<DataDiskPropertiesFragment> dataDiskParameters) {
    this.dataDiskParameters = dataDiskParameters;
  }


  public LabVirtualMachinePropertiesFragment disallowPublicIpAddress(Boolean disallowPublicIpAddress) {
    this.disallowPublicIpAddress = disallowPublicIpAddress;
    return this;
  }

  /**
   * Indicates whether the virtual machine is to be created without a public IP address.
   * @return disallowPublicIpAddress
   */
  @javax.annotation.Nullable
  public Boolean getDisallowPublicIpAddress() {
    return disallowPublicIpAddress;
  }

  public void setDisallowPublicIpAddress(Boolean disallowPublicIpAddress) {
    this.disallowPublicIpAddress = disallowPublicIpAddress;
  }


  public LabVirtualMachinePropertiesFragment environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

  /**
   * The resource ID of the environment that contains this virtual machine, if any.
   * @return environmentId
   */
  @javax.annotation.Nullable
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }


  public LabVirtualMachinePropertiesFragment expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * The expiration date for VM.
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public LabVirtualMachinePropertiesFragment fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * The fully-qualified domain name of the virtual machine.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public LabVirtualMachinePropertiesFragment galleryImageReference(GalleryImageReferenceFragment galleryImageReference) {
    this.galleryImageReference = galleryImageReference;
    return this;
  }

  /**
   * Get galleryImageReference
   * @return galleryImageReference
   */
  @javax.annotation.Nullable
  public GalleryImageReferenceFragment getGalleryImageReference() {
    return galleryImageReference;
  }

  public void setGalleryImageReference(GalleryImageReferenceFragment galleryImageReference) {
    this.galleryImageReference = galleryImageReference;
  }


  public LabVirtualMachinePropertiesFragment isAuthenticationWithSshKey(Boolean isAuthenticationWithSshKey) {
    this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
    return this;
  }

  /**
   * Indicates whether this virtual machine uses an SSH key for authentication.
   * @return isAuthenticationWithSshKey
   */
  @javax.annotation.Nullable
  public Boolean getIsAuthenticationWithSshKey() {
    return isAuthenticationWithSshKey;
  }

  public void setIsAuthenticationWithSshKey(Boolean isAuthenticationWithSshKey) {
    this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
  }


  public LabVirtualMachinePropertiesFragment labSubnetName(String labSubnetName) {
    this.labSubnetName = labSubnetName;
    return this;
  }

  /**
   * The lab subnet name of the virtual machine.
   * @return labSubnetName
   */
  @javax.annotation.Nullable
  public String getLabSubnetName() {
    return labSubnetName;
  }

  public void setLabSubnetName(String labSubnetName) {
    this.labSubnetName = labSubnetName;
  }


  public LabVirtualMachinePropertiesFragment labVirtualNetworkId(String labVirtualNetworkId) {
    this.labVirtualNetworkId = labVirtualNetworkId;
    return this;
  }

  /**
   * The lab virtual network identifier of the virtual machine.
   * @return labVirtualNetworkId
   */
  @javax.annotation.Nullable
  public String getLabVirtualNetworkId() {
    return labVirtualNetworkId;
  }

  public void setLabVirtualNetworkId(String labVirtualNetworkId) {
    this.labVirtualNetworkId = labVirtualNetworkId;
  }


  public LabVirtualMachinePropertiesFragment lastKnownPowerState(String lastKnownPowerState) {
    this.lastKnownPowerState = lastKnownPowerState;
    return this;
  }

  /**
   * Last known compute power state captured in DTL
   * @return lastKnownPowerState
   */
  @javax.annotation.Nullable
  public String getLastKnownPowerState() {
    return lastKnownPowerState;
  }

  public void setLastKnownPowerState(String lastKnownPowerState) {
    this.lastKnownPowerState = lastKnownPowerState;
  }


  public LabVirtualMachinePropertiesFragment networkInterface(NetworkInterfacePropertiesFragment networkInterface) {
    this.networkInterface = networkInterface;
    return this;
  }

  /**
   * Get networkInterface
   * @return networkInterface
   */
  @javax.annotation.Nullable
  public NetworkInterfacePropertiesFragment getNetworkInterface() {
    return networkInterface;
  }

  public void setNetworkInterface(NetworkInterfacePropertiesFragment networkInterface) {
    this.networkInterface = networkInterface;
  }


  public LabVirtualMachinePropertiesFragment notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * The notes of the virtual machine.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public LabVirtualMachinePropertiesFragment osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The OS type of the virtual machine.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public LabVirtualMachinePropertiesFragment ownerObjectId(String ownerObjectId) {
    this.ownerObjectId = ownerObjectId;
    return this;
  }

  /**
   * The object identifier of the owner of the virtual machine.
   * @return ownerObjectId
   */
  @javax.annotation.Nullable
  public String getOwnerObjectId() {
    return ownerObjectId;
  }

  public void setOwnerObjectId(String ownerObjectId) {
    this.ownerObjectId = ownerObjectId;
  }


  public LabVirtualMachinePropertiesFragment ownerUserPrincipalName(String ownerUserPrincipalName) {
    this.ownerUserPrincipalName = ownerUserPrincipalName;
    return this;
  }

  /**
   * The user principal name of the virtual machine owner.
   * @return ownerUserPrincipalName
   */
  @javax.annotation.Nullable
  public String getOwnerUserPrincipalName() {
    return ownerUserPrincipalName;
  }

  public void setOwnerUserPrincipalName(String ownerUserPrincipalName) {
    this.ownerUserPrincipalName = ownerUserPrincipalName;
  }


  public LabVirtualMachinePropertiesFragment password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password of the virtual machine administrator.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public LabVirtualMachinePropertiesFragment planId(String planId) {
    this.planId = planId;
    return this;
  }

  /**
   * The id of the plan associated with the virtual machine image
   * @return planId
   */
  @javax.annotation.Nullable
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public LabVirtualMachinePropertiesFragment scheduleParameters(List<ScheduleCreationParameterFragment> scheduleParameters) {
    this.scheduleParameters = scheduleParameters;
    return this;
  }

  public LabVirtualMachinePropertiesFragment addScheduleParametersItem(ScheduleCreationParameterFragment scheduleParametersItem) {
    if (this.scheduleParameters == null) {
      this.scheduleParameters = new ArrayList<>();
    }
    this.scheduleParameters.add(scheduleParametersItem);
    return this;
  }

  /**
   * Virtual Machine schedules to be created
   * @return scheduleParameters
   */
  @javax.annotation.Nullable
  public List<ScheduleCreationParameterFragment> getScheduleParameters() {
    return scheduleParameters;
  }

  public void setScheduleParameters(List<ScheduleCreationParameterFragment> scheduleParameters) {
    this.scheduleParameters = scheduleParameters;
  }


  public LabVirtualMachinePropertiesFragment size(String size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the virtual machine.
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public LabVirtualMachinePropertiesFragment sshKey(String sshKey) {
    this.sshKey = sshKey;
    return this;
  }

  /**
   * The SSH key of the virtual machine administrator.
   * @return sshKey
   */
  @javax.annotation.Nullable
  public String getSshKey() {
    return sshKey;
  }

  public void setSshKey(String sshKey) {
    this.sshKey = sshKey;
  }


  public LabVirtualMachinePropertiesFragment storageType(String storageType) {
    this.storageType = storageType;
    return this;
  }

  /**
   * Storage type to use for virtual machine (i.e. Standard, Premium).
   * @return storageType
   */
  @javax.annotation.Nullable
  public String getStorageType() {
    return storageType;
  }

  public void setStorageType(String storageType) {
    this.storageType = storageType;
  }


  public LabVirtualMachinePropertiesFragment userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * The user name of the virtual machine.
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public LabVirtualMachinePropertiesFragment virtualMachineCreationSource(VirtualMachineCreationSourceEnum virtualMachineCreationSource) {
    this.virtualMachineCreationSource = virtualMachineCreationSource;
    return this;
  }

  /**
   * Tells source of creation of lab virtual machine. Output property only.
   * @return virtualMachineCreationSource
   */
  @javax.annotation.Nullable
  public VirtualMachineCreationSourceEnum getVirtualMachineCreationSource() {
    return virtualMachineCreationSource;
  }

  public void setVirtualMachineCreationSource(VirtualMachineCreationSourceEnum virtualMachineCreationSource) {
    this.virtualMachineCreationSource = virtualMachineCreationSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabVirtualMachinePropertiesFragment labVirtualMachinePropertiesFragment = (LabVirtualMachinePropertiesFragment) o;
    return Objects.equals(this.allowClaim, labVirtualMachinePropertiesFragment.allowClaim) &&
        Objects.equals(this.artifactDeploymentStatus, labVirtualMachinePropertiesFragment.artifactDeploymentStatus) &&
        Objects.equals(this.artifacts, labVirtualMachinePropertiesFragment.artifacts) &&
        Objects.equals(this.computeId, labVirtualMachinePropertiesFragment.computeId) &&
        Objects.equals(this.createdByUser, labVirtualMachinePropertiesFragment.createdByUser) &&
        Objects.equals(this.createdByUserId, labVirtualMachinePropertiesFragment.createdByUserId) &&
        Objects.equals(this.createdDate, labVirtualMachinePropertiesFragment.createdDate) &&
        Objects.equals(this.customImageId, labVirtualMachinePropertiesFragment.customImageId) &&
        Objects.equals(this.dataDiskParameters, labVirtualMachinePropertiesFragment.dataDiskParameters) &&
        Objects.equals(this.disallowPublicIpAddress, labVirtualMachinePropertiesFragment.disallowPublicIpAddress) &&
        Objects.equals(this.environmentId, labVirtualMachinePropertiesFragment.environmentId) &&
        Objects.equals(this.expirationDate, labVirtualMachinePropertiesFragment.expirationDate) &&
        Objects.equals(this.fqdn, labVirtualMachinePropertiesFragment.fqdn) &&
        Objects.equals(this.galleryImageReference, labVirtualMachinePropertiesFragment.galleryImageReference) &&
        Objects.equals(this.isAuthenticationWithSshKey, labVirtualMachinePropertiesFragment.isAuthenticationWithSshKey) &&
        Objects.equals(this.labSubnetName, labVirtualMachinePropertiesFragment.labSubnetName) &&
        Objects.equals(this.labVirtualNetworkId, labVirtualMachinePropertiesFragment.labVirtualNetworkId) &&
        Objects.equals(this.lastKnownPowerState, labVirtualMachinePropertiesFragment.lastKnownPowerState) &&
        Objects.equals(this.networkInterface, labVirtualMachinePropertiesFragment.networkInterface) &&
        Objects.equals(this.notes, labVirtualMachinePropertiesFragment.notes) &&
        Objects.equals(this.osType, labVirtualMachinePropertiesFragment.osType) &&
        Objects.equals(this.ownerObjectId, labVirtualMachinePropertiesFragment.ownerObjectId) &&
        Objects.equals(this.ownerUserPrincipalName, labVirtualMachinePropertiesFragment.ownerUserPrincipalName) &&
        Objects.equals(this.password, labVirtualMachinePropertiesFragment.password) &&
        Objects.equals(this.planId, labVirtualMachinePropertiesFragment.planId) &&
        Objects.equals(this.scheduleParameters, labVirtualMachinePropertiesFragment.scheduleParameters) &&
        Objects.equals(this.size, labVirtualMachinePropertiesFragment.size) &&
        Objects.equals(this.sshKey, labVirtualMachinePropertiesFragment.sshKey) &&
        Objects.equals(this.storageType, labVirtualMachinePropertiesFragment.storageType) &&
        Objects.equals(this.userName, labVirtualMachinePropertiesFragment.userName) &&
        Objects.equals(this.virtualMachineCreationSource, labVirtualMachinePropertiesFragment.virtualMachineCreationSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowClaim, artifactDeploymentStatus, artifacts, computeId, createdByUser, createdByUserId, createdDate, customImageId, dataDiskParameters, disallowPublicIpAddress, environmentId, expirationDate, fqdn, galleryImageReference, isAuthenticationWithSshKey, labSubnetName, labVirtualNetworkId, lastKnownPowerState, networkInterface, notes, osType, ownerObjectId, ownerUserPrincipalName, password, planId, scheduleParameters, size, sshKey, storageType, userName, virtualMachineCreationSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabVirtualMachinePropertiesFragment {\n");
    sb.append("    allowClaim: ").append(toIndentedString(allowClaim)).append("\n");
    sb.append("    artifactDeploymentStatus: ").append(toIndentedString(artifactDeploymentStatus)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    computeId: ").append(toIndentedString(computeId)).append("\n");
    sb.append("    createdByUser: ").append(toIndentedString(createdByUser)).append("\n");
    sb.append("    createdByUserId: ").append(toIndentedString(createdByUserId)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    customImageId: ").append(toIndentedString(customImageId)).append("\n");
    sb.append("    dataDiskParameters: ").append(toIndentedString(dataDiskParameters)).append("\n");
    sb.append("    disallowPublicIpAddress: ").append(toIndentedString(disallowPublicIpAddress)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    galleryImageReference: ").append(toIndentedString(galleryImageReference)).append("\n");
    sb.append("    isAuthenticationWithSshKey: ").append(toIndentedString(isAuthenticationWithSshKey)).append("\n");
    sb.append("    labSubnetName: ").append(toIndentedString(labSubnetName)).append("\n");
    sb.append("    labVirtualNetworkId: ").append(toIndentedString(labVirtualNetworkId)).append("\n");
    sb.append("    lastKnownPowerState: ").append(toIndentedString(lastKnownPowerState)).append("\n");
    sb.append("    networkInterface: ").append(toIndentedString(networkInterface)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    ownerObjectId: ").append(toIndentedString(ownerObjectId)).append("\n");
    sb.append("    ownerUserPrincipalName: ").append(toIndentedString(ownerUserPrincipalName)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    scheduleParameters: ").append(toIndentedString(scheduleParameters)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sshKey: ").append(toIndentedString(sshKey)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    virtualMachineCreationSource: ").append(toIndentedString(virtualMachineCreationSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowClaim");
    openapiFields.add("artifactDeploymentStatus");
    openapiFields.add("artifacts");
    openapiFields.add("computeId");
    openapiFields.add("createdByUser");
    openapiFields.add("createdByUserId");
    openapiFields.add("createdDate");
    openapiFields.add("customImageId");
    openapiFields.add("dataDiskParameters");
    openapiFields.add("disallowPublicIpAddress");
    openapiFields.add("environmentId");
    openapiFields.add("expirationDate");
    openapiFields.add("fqdn");
    openapiFields.add("galleryImageReference");
    openapiFields.add("isAuthenticationWithSshKey");
    openapiFields.add("labSubnetName");
    openapiFields.add("labVirtualNetworkId");
    openapiFields.add("lastKnownPowerState");
    openapiFields.add("networkInterface");
    openapiFields.add("notes");
    openapiFields.add("osType");
    openapiFields.add("ownerObjectId");
    openapiFields.add("ownerUserPrincipalName");
    openapiFields.add("password");
    openapiFields.add("planId");
    openapiFields.add("scheduleParameters");
    openapiFields.add("size");
    openapiFields.add("sshKey");
    openapiFields.add("storageType");
    openapiFields.add("userName");
    openapiFields.add("virtualMachineCreationSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabVirtualMachinePropertiesFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabVirtualMachinePropertiesFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabVirtualMachinePropertiesFragment is not found in the empty JSON string", LabVirtualMachinePropertiesFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabVirtualMachinePropertiesFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabVirtualMachinePropertiesFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `artifactDeploymentStatus`
      if (jsonObj.get("artifactDeploymentStatus") != null && !jsonObj.get("artifactDeploymentStatus").isJsonNull()) {
        ArtifactDeploymentStatusPropertiesFragment.validateJsonElement(jsonObj.get("artifactDeploymentStatus"));
      }
      if (jsonObj.get("artifacts") != null && !jsonObj.get("artifacts").isJsonNull()) {
        JsonArray jsonArrayartifacts = jsonObj.getAsJsonArray("artifacts");
        if (jsonArrayartifacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artifacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artifacts` to be an array in the JSON string but got `%s`", jsonObj.get("artifacts").toString()));
          }

          // validate the optional field `artifacts` (array)
          for (int i = 0; i < jsonArrayartifacts.size(); i++) {
            ArtifactInstallPropertiesFragment.validateJsonElement(jsonArrayartifacts.get(i));
          };
        }
      }
      if ((jsonObj.get("computeId") != null && !jsonObj.get("computeId").isJsonNull()) && !jsonObj.get("computeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeId").toString()));
      }
      if ((jsonObj.get("createdByUser") != null && !jsonObj.get("createdByUser").isJsonNull()) && !jsonObj.get("createdByUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUser").toString()));
      }
      if ((jsonObj.get("createdByUserId") != null && !jsonObj.get("createdByUserId").isJsonNull()) && !jsonObj.get("createdByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUserId").toString()));
      }
      if ((jsonObj.get("customImageId") != null && !jsonObj.get("customImageId").isJsonNull()) && !jsonObj.get("customImageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customImageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customImageId").toString()));
      }
      if (jsonObj.get("dataDiskParameters") != null && !jsonObj.get("dataDiskParameters").isJsonNull()) {
        JsonArray jsonArraydataDiskParameters = jsonObj.getAsJsonArray("dataDiskParameters");
        if (jsonArraydataDiskParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataDiskParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataDiskParameters` to be an array in the JSON string but got `%s`", jsonObj.get("dataDiskParameters").toString()));
          }

          // validate the optional field `dataDiskParameters` (array)
          for (int i = 0; i < jsonArraydataDiskParameters.size(); i++) {
            DataDiskPropertiesFragment.validateJsonElement(jsonArraydataDiskParameters.get(i));
          };
        }
      }
      if ((jsonObj.get("environmentId") != null && !jsonObj.get("environmentId").isJsonNull()) && !jsonObj.get("environmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentId").toString()));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      // validate the optional field `galleryImageReference`
      if (jsonObj.get("galleryImageReference") != null && !jsonObj.get("galleryImageReference").isJsonNull()) {
        GalleryImageReferenceFragment.validateJsonElement(jsonObj.get("galleryImageReference"));
      }
      if ((jsonObj.get("labSubnetName") != null && !jsonObj.get("labSubnetName").isJsonNull()) && !jsonObj.get("labSubnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labSubnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labSubnetName").toString()));
      }
      if ((jsonObj.get("labVirtualNetworkId") != null && !jsonObj.get("labVirtualNetworkId").isJsonNull()) && !jsonObj.get("labVirtualNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labVirtualNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labVirtualNetworkId").toString()));
      }
      if ((jsonObj.get("lastKnownPowerState") != null && !jsonObj.get("lastKnownPowerState").isJsonNull()) && !jsonObj.get("lastKnownPowerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastKnownPowerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastKnownPowerState").toString()));
      }
      // validate the optional field `networkInterface`
      if (jsonObj.get("networkInterface") != null && !jsonObj.get("networkInterface").isJsonNull()) {
        NetworkInterfacePropertiesFragment.validateJsonElement(jsonObj.get("networkInterface"));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if ((jsonObj.get("ownerObjectId") != null && !jsonObj.get("ownerObjectId").isJsonNull()) && !jsonObj.get("ownerObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerObjectId").toString()));
      }
      if ((jsonObj.get("ownerUserPrincipalName") != null && !jsonObj.get("ownerUserPrincipalName").isJsonNull()) && !jsonObj.get("ownerUserPrincipalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerUserPrincipalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerUserPrincipalName").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("planId") != null && !jsonObj.get("planId").isJsonNull()) && !jsonObj.get("planId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planId").toString()));
      }
      if (jsonObj.get("scheduleParameters") != null && !jsonObj.get("scheduleParameters").isJsonNull()) {
        JsonArray jsonArrayscheduleParameters = jsonObj.getAsJsonArray("scheduleParameters");
        if (jsonArrayscheduleParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scheduleParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scheduleParameters` to be an array in the JSON string but got `%s`", jsonObj.get("scheduleParameters").toString()));
          }

          // validate the optional field `scheduleParameters` (array)
          for (int i = 0; i < jsonArrayscheduleParameters.size(); i++) {
            ScheduleCreationParameterFragment.validateJsonElement(jsonArrayscheduleParameters.get(i));
          };
        }
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("sshKey") != null && !jsonObj.get("sshKey").isJsonNull()) && !jsonObj.get("sshKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sshKey").toString()));
      }
      if ((jsonObj.get("storageType") != null && !jsonObj.get("storageType").isJsonNull()) && !jsonObj.get("storageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageType").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("virtualMachineCreationSource") != null && !jsonObj.get("virtualMachineCreationSource").isJsonNull()) && !jsonObj.get("virtualMachineCreationSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualMachineCreationSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualMachineCreationSource").toString()));
      }
      // validate the optional field `virtualMachineCreationSource`
      if (jsonObj.get("virtualMachineCreationSource") != null && !jsonObj.get("virtualMachineCreationSource").isJsonNull()) {
        VirtualMachineCreationSourceEnum.validateJsonElement(jsonObj.get("virtualMachineCreationSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabVirtualMachinePropertiesFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabVirtualMachinePropertiesFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabVirtualMachinePropertiesFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabVirtualMachinePropertiesFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<LabVirtualMachinePropertiesFragment>() {
           @Override
           public void write(JsonWriter out, LabVirtualMachinePropertiesFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabVirtualMachinePropertiesFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabVirtualMachinePropertiesFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabVirtualMachinePropertiesFragment
   * @throws IOException if the JSON string is invalid with respect to LabVirtualMachinePropertiesFragment
   */
  public static LabVirtualMachinePropertiesFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabVirtualMachinePropertiesFragment.class);
  }

  /**
   * Convert an instance of LabVirtualMachinePropertiesFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

