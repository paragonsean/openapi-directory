/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Event;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationChannelProperties {
  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL_RECIPIENT = "emailRecipient";
  @SerializedName(SERIALIZED_NAME_EMAIL_RECIPIENT)
  private String emailRecipient;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<Event> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_LOCALE = "notificationLocale";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_LOCALE)
  private String notificationLocale;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_WEB_HOOK_URL = "webHookUrl";
  @SerializedName(SERIALIZED_NAME_WEB_HOOK_URL)
  private String webHookUrl;

  public NotificationChannelProperties() {
  }

  public NotificationChannelProperties(
     OffsetDateTime createdDate, 
     String provisioningState, 
     String uniqueIdentifier
  ) {
    this();
    this.createdDate = createdDate;
    this.provisioningState = provisioningState;
    this.uniqueIdentifier = uniqueIdentifier;
  }

  /**
   * The creation date of the notification channel.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }



  public NotificationChannelProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of notification.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NotificationChannelProperties emailRecipient(String emailRecipient) {
    this.emailRecipient = emailRecipient;
    return this;
  }

  /**
   * The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
   * @return emailRecipient
   */
  @javax.annotation.Nullable
  public String getEmailRecipient() {
    return emailRecipient;
  }

  public void setEmailRecipient(String emailRecipient) {
    this.emailRecipient = emailRecipient;
  }


  public NotificationChannelProperties events(List<Event> events) {
    this.events = events;
    return this;
  }

  public NotificationChannelProperties addEventsItem(Event eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * The list of event for which this notification is enabled.
   * @return events
   */
  @javax.annotation.Nullable
  public List<Event> getEvents() {
    return events;
  }

  public void setEvents(List<Event> events) {
    this.events = events;
  }


  public NotificationChannelProperties notificationLocale(String notificationLocale) {
    this.notificationLocale = notificationLocale;
    return this;
  }

  /**
   * The locale to use when sending a notification (fallback for unsupported languages is EN).
   * @return notificationLocale
   */
  @javax.annotation.Nullable
  public String getNotificationLocale() {
    return notificationLocale;
  }

  public void setNotificationLocale(String notificationLocale) {
    this.notificationLocale = notificationLocale;
  }


  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The unique immutable identifier of a resource (Guid).
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }



  public NotificationChannelProperties webHookUrl(String webHookUrl) {
    this.webHookUrl = webHookUrl;
    return this;
  }

  /**
   * The webhook URL to send notifications to.
   * @return webHookUrl
   */
  @javax.annotation.Nullable
  public String getWebHookUrl() {
    return webHookUrl;
  }

  public void setWebHookUrl(String webHookUrl) {
    this.webHookUrl = webHookUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationChannelProperties notificationChannelProperties = (NotificationChannelProperties) o;
    return Objects.equals(this.createdDate, notificationChannelProperties.createdDate) &&
        Objects.equals(this.description, notificationChannelProperties.description) &&
        Objects.equals(this.emailRecipient, notificationChannelProperties.emailRecipient) &&
        Objects.equals(this.events, notificationChannelProperties.events) &&
        Objects.equals(this.notificationLocale, notificationChannelProperties.notificationLocale) &&
        Objects.equals(this.provisioningState, notificationChannelProperties.provisioningState) &&
        Objects.equals(this.uniqueIdentifier, notificationChannelProperties.uniqueIdentifier) &&
        Objects.equals(this.webHookUrl, notificationChannelProperties.webHookUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDate, description, emailRecipient, events, notificationLocale, provisioningState, uniqueIdentifier, webHookUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationChannelProperties {\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailRecipient: ").append(toIndentedString(emailRecipient)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    notificationLocale: ").append(toIndentedString(notificationLocale)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    webHookUrl: ").append(toIndentedString(webHookUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdDate");
    openapiFields.add("description");
    openapiFields.add("emailRecipient");
    openapiFields.add("events");
    openapiFields.add("notificationLocale");
    openapiFields.add("provisioningState");
    openapiFields.add("uniqueIdentifier");
    openapiFields.add("webHookUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationChannelProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationChannelProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationChannelProperties is not found in the empty JSON string", NotificationChannelProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationChannelProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationChannelProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("emailRecipient") != null && !jsonObj.get("emailRecipient").isJsonNull()) && !jsonObj.get("emailRecipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailRecipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailRecipient").toString()));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            Event.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if ((jsonObj.get("notificationLocale") != null && !jsonObj.get("notificationLocale").isJsonNull()) && !jsonObj.get("notificationLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationLocale").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("uniqueIdentifier") != null && !jsonObj.get("uniqueIdentifier").isJsonNull()) && !jsonObj.get("uniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIdentifier").toString()));
      }
      if ((jsonObj.get("webHookUrl") != null && !jsonObj.get("webHookUrl").isJsonNull()) && !jsonObj.get("webHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webHookUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationChannelProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationChannelProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationChannelProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationChannelProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationChannelProperties>() {
           @Override
           public void write(JsonWriter out, NotificationChannelProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationChannelProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationChannelProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationChannelProperties
   * @throws IOException if the JSON string is invalid with respect to NotificationChannelProperties
   */
  public static NotificationChannelProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationChannelProperties.class);
  }

  /**
   * Convert an instance of NotificationChannelProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

