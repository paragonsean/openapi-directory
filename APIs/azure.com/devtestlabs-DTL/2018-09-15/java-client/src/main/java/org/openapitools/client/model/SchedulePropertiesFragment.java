/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DayDetailsFragment;
import org.openapitools.client.model.HourDetailsFragment;
import org.openapitools.client.model.NotificationSettingsFragment;
import org.openapitools.client.model.WeekDetailsFragment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchedulePropertiesFragment {
  public static final String SERIALIZED_NAME_DAILY_RECURRENCE = "dailyRecurrence";
  @SerializedName(SERIALIZED_NAME_DAILY_RECURRENCE)
  private DayDetailsFragment dailyRecurrence;

  public static final String SERIALIZED_NAME_HOURLY_RECURRENCE = "hourlyRecurrence";
  @SerializedName(SERIALIZED_NAME_HOURLY_RECURRENCE)
  private HourDetailsFragment hourlyRecurrence;

  public static final String SERIALIZED_NAME_NOTIFICATION_SETTINGS = "notificationSettings";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SETTINGS)
  private NotificationSettingsFragment notificationSettings;

  /**
   * The status of the schedule (i.e. Enabled, Disabled)
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_ID = "targetResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_ID)
  private String targetResourceId;

  public static final String SERIALIZED_NAME_TASK_TYPE = "taskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private String taskType;

  public static final String SERIALIZED_NAME_TIME_ZONE_ID = "timeZoneId";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_ID)
  private String timeZoneId;

  public static final String SERIALIZED_NAME_WEEKLY_RECURRENCE = "weeklyRecurrence";
  @SerializedName(SERIALIZED_NAME_WEEKLY_RECURRENCE)
  private WeekDetailsFragment weeklyRecurrence;

  public SchedulePropertiesFragment() {
  }

  public SchedulePropertiesFragment dailyRecurrence(DayDetailsFragment dailyRecurrence) {
    this.dailyRecurrence = dailyRecurrence;
    return this;
  }

  /**
   * Get dailyRecurrence
   * @return dailyRecurrence
   */
  @javax.annotation.Nullable
  public DayDetailsFragment getDailyRecurrence() {
    return dailyRecurrence;
  }

  public void setDailyRecurrence(DayDetailsFragment dailyRecurrence) {
    this.dailyRecurrence = dailyRecurrence;
  }


  public SchedulePropertiesFragment hourlyRecurrence(HourDetailsFragment hourlyRecurrence) {
    this.hourlyRecurrence = hourlyRecurrence;
    return this;
  }

  /**
   * Get hourlyRecurrence
   * @return hourlyRecurrence
   */
  @javax.annotation.Nullable
  public HourDetailsFragment getHourlyRecurrence() {
    return hourlyRecurrence;
  }

  public void setHourlyRecurrence(HourDetailsFragment hourlyRecurrence) {
    this.hourlyRecurrence = hourlyRecurrence;
  }


  public SchedulePropertiesFragment notificationSettings(NotificationSettingsFragment notificationSettings) {
    this.notificationSettings = notificationSettings;
    return this;
  }

  /**
   * Get notificationSettings
   * @return notificationSettings
   */
  @javax.annotation.Nullable
  public NotificationSettingsFragment getNotificationSettings() {
    return notificationSettings;
  }

  public void setNotificationSettings(NotificationSettingsFragment notificationSettings) {
    this.notificationSettings = notificationSettings;
  }


  public SchedulePropertiesFragment status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the schedule (i.e. Enabled, Disabled)
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public SchedulePropertiesFragment targetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
    return this;
  }

  /**
   * The resource ID to which the schedule belongs
   * @return targetResourceId
   */
  @javax.annotation.Nullable
  public String getTargetResourceId() {
    return targetResourceId;
  }

  public void setTargetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
  }


  public SchedulePropertiesFragment taskType(String taskType) {
    this.taskType = taskType;
    return this;
  }

  /**
   * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
   * @return taskType
   */
  @javax.annotation.Nullable
  public String getTaskType() {
    return taskType;
  }

  public void setTaskType(String taskType) {
    this.taskType = taskType;
  }


  public SchedulePropertiesFragment timeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
    return this;
  }

  /**
   * The time zone ID (e.g. Pacific Standard time).
   * @return timeZoneId
   */
  @javax.annotation.Nullable
  public String getTimeZoneId() {
    return timeZoneId;
  }

  public void setTimeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
  }


  public SchedulePropertiesFragment weeklyRecurrence(WeekDetailsFragment weeklyRecurrence) {
    this.weeklyRecurrence = weeklyRecurrence;
    return this;
  }

  /**
   * Get weeklyRecurrence
   * @return weeklyRecurrence
   */
  @javax.annotation.Nullable
  public WeekDetailsFragment getWeeklyRecurrence() {
    return weeklyRecurrence;
  }

  public void setWeeklyRecurrence(WeekDetailsFragment weeklyRecurrence) {
    this.weeklyRecurrence = weeklyRecurrence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchedulePropertiesFragment schedulePropertiesFragment = (SchedulePropertiesFragment) o;
    return Objects.equals(this.dailyRecurrence, schedulePropertiesFragment.dailyRecurrence) &&
        Objects.equals(this.hourlyRecurrence, schedulePropertiesFragment.hourlyRecurrence) &&
        Objects.equals(this.notificationSettings, schedulePropertiesFragment.notificationSettings) &&
        Objects.equals(this.status, schedulePropertiesFragment.status) &&
        Objects.equals(this.targetResourceId, schedulePropertiesFragment.targetResourceId) &&
        Objects.equals(this.taskType, schedulePropertiesFragment.taskType) &&
        Objects.equals(this.timeZoneId, schedulePropertiesFragment.timeZoneId) &&
        Objects.equals(this.weeklyRecurrence, schedulePropertiesFragment.weeklyRecurrence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dailyRecurrence, hourlyRecurrence, notificationSettings, status, targetResourceId, taskType, timeZoneId, weeklyRecurrence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchedulePropertiesFragment {\n");
    sb.append("    dailyRecurrence: ").append(toIndentedString(dailyRecurrence)).append("\n");
    sb.append("    hourlyRecurrence: ").append(toIndentedString(hourlyRecurrence)).append("\n");
    sb.append("    notificationSettings: ").append(toIndentedString(notificationSettings)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetResourceId: ").append(toIndentedString(targetResourceId)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    timeZoneId: ").append(toIndentedString(timeZoneId)).append("\n");
    sb.append("    weeklyRecurrence: ").append(toIndentedString(weeklyRecurrence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dailyRecurrence");
    openapiFields.add("hourlyRecurrence");
    openapiFields.add("notificationSettings");
    openapiFields.add("status");
    openapiFields.add("targetResourceId");
    openapiFields.add("taskType");
    openapiFields.add("timeZoneId");
    openapiFields.add("weeklyRecurrence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchedulePropertiesFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchedulePropertiesFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchedulePropertiesFragment is not found in the empty JSON string", SchedulePropertiesFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchedulePropertiesFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchedulePropertiesFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dailyRecurrence`
      if (jsonObj.get("dailyRecurrence") != null && !jsonObj.get("dailyRecurrence").isJsonNull()) {
        DayDetailsFragment.validateJsonElement(jsonObj.get("dailyRecurrence"));
      }
      // validate the optional field `hourlyRecurrence`
      if (jsonObj.get("hourlyRecurrence") != null && !jsonObj.get("hourlyRecurrence").isJsonNull()) {
        HourDetailsFragment.validateJsonElement(jsonObj.get("hourlyRecurrence"));
      }
      // validate the optional field `notificationSettings`
      if (jsonObj.get("notificationSettings") != null && !jsonObj.get("notificationSettings").isJsonNull()) {
        NotificationSettingsFragment.validateJsonElement(jsonObj.get("notificationSettings"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("targetResourceId") != null && !jsonObj.get("targetResourceId").isJsonNull()) && !jsonObj.get("targetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceId").toString()));
      }
      if ((jsonObj.get("taskType") != null && !jsonObj.get("taskType").isJsonNull()) && !jsonObj.get("taskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskType").toString()));
      }
      if ((jsonObj.get("timeZoneId") != null && !jsonObj.get("timeZoneId").isJsonNull()) && !jsonObj.get("timeZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZoneId").toString()));
      }
      // validate the optional field `weeklyRecurrence`
      if (jsonObj.get("weeklyRecurrence") != null && !jsonObj.get("weeklyRecurrence").isJsonNull()) {
        WeekDetailsFragment.validateJsonElement(jsonObj.get("weeklyRecurrence"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchedulePropertiesFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchedulePropertiesFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchedulePropertiesFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchedulePropertiesFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<SchedulePropertiesFragment>() {
           @Override
           public void write(JsonWriter out, SchedulePropertiesFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchedulePropertiesFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchedulePropertiesFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchedulePropertiesFragment
   * @throws IOException if the JSON string is invalid with respect to SchedulePropertiesFragment
   */
  public static SchedulePropertiesFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchedulePropertiesFragment.class);
  }

  /**
   * Convert an instance of SchedulePropertiesFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

