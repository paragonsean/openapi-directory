/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a resource cost item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabResourceCostProperties {
  public static final String SERIALIZED_NAME_EXTERNAL_RESOURCE_ID = "externalResourceId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_RESOURCE_ID)
  private String externalResourceId;

  public static final String SERIALIZED_NAME_RESOURCE_COST = "resourceCost";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COST)
  private Double resourceCost;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER = "resourceOwner";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER)
  private String resourceOwner;

  public static final String SERIALIZED_NAME_RESOURCE_PRICING_TIER = "resourcePricingTier";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PRICING_TIER)
  private String resourcePricingTier;

  public static final String SERIALIZED_NAME_RESOURCE_STATUS = "resourceStatus";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATUS)
  private String resourceStatus;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_U_ID = "resourceUId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_U_ID)
  private String resourceUId;

  public static final String SERIALIZED_NAME_RESOURCENAME = "resourcename";
  @SerializedName(SERIALIZED_NAME_RESOURCENAME)
  private String resourcename;

  public LabResourceCostProperties() {
  }

  public LabResourceCostProperties externalResourceId(String externalResourceId) {
    this.externalResourceId = externalResourceId;
    return this;
  }

  /**
   * The ID of the external resource
   * @return externalResourceId
   */
  @javax.annotation.Nullable
  public String getExternalResourceId() {
    return externalResourceId;
  }

  public void setExternalResourceId(String externalResourceId) {
    this.externalResourceId = externalResourceId;
  }


  public LabResourceCostProperties resourceCost(Double resourceCost) {
    this.resourceCost = resourceCost;
    return this;
  }

  /**
   * The cost component of the resource cost item.
   * @return resourceCost
   */
  @javax.annotation.Nullable
  public Double getResourceCost() {
    return resourceCost;
  }

  public void setResourceCost(Double resourceCost) {
    this.resourceCost = resourceCost;
  }


  public LabResourceCostProperties resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * The ID of the resource
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public LabResourceCostProperties resourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
    return this;
  }

  /**
   * The owner of the resource (ex. janedoe@microsoft.com)
   * @return resourceOwner
   */
  @javax.annotation.Nullable
  public String getResourceOwner() {
    return resourceOwner;
  }

  public void setResourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
  }


  public LabResourceCostProperties resourcePricingTier(String resourcePricingTier) {
    this.resourcePricingTier = resourcePricingTier;
    return this;
  }

  /**
   * The category of the resource (ex. Premium_LRS, Standard_DS1)
   * @return resourcePricingTier
   */
  @javax.annotation.Nullable
  public String getResourcePricingTier() {
    return resourcePricingTier;
  }

  public void setResourcePricingTier(String resourcePricingTier) {
    this.resourcePricingTier = resourcePricingTier;
  }


  public LabResourceCostProperties resourceStatus(String resourceStatus) {
    this.resourceStatus = resourceStatus;
    return this;
  }

  /**
   * The status of the resource (ex. Active)
   * @return resourceStatus
   */
  @javax.annotation.Nullable
  public String getResourceStatus() {
    return resourceStatus;
  }

  public void setResourceStatus(String resourceStatus) {
    this.resourceStatus = resourceStatus;
  }


  public LabResourceCostProperties resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The logical resource type (ex. virtualmachine, storageaccount)
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public LabResourceCostProperties resourceUId(String resourceUId) {
    this.resourceUId = resourceUId;
    return this;
  }

  /**
   * The unique identifier of the resource.
   * @return resourceUId
   */
  @javax.annotation.Nullable
  public String getResourceUId() {
    return resourceUId;
  }

  public void setResourceUId(String resourceUId) {
    this.resourceUId = resourceUId;
  }


  public LabResourceCostProperties resourcename(String resourcename) {
    this.resourcename = resourcename;
    return this;
  }

  /**
   * The name of the resource.
   * @return resourcename
   */
  @javax.annotation.Nullable
  public String getResourcename() {
    return resourcename;
  }

  public void setResourcename(String resourcename) {
    this.resourcename = resourcename;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabResourceCostProperties labResourceCostProperties = (LabResourceCostProperties) o;
    return Objects.equals(this.externalResourceId, labResourceCostProperties.externalResourceId) &&
        Objects.equals(this.resourceCost, labResourceCostProperties.resourceCost) &&
        Objects.equals(this.resourceId, labResourceCostProperties.resourceId) &&
        Objects.equals(this.resourceOwner, labResourceCostProperties.resourceOwner) &&
        Objects.equals(this.resourcePricingTier, labResourceCostProperties.resourcePricingTier) &&
        Objects.equals(this.resourceStatus, labResourceCostProperties.resourceStatus) &&
        Objects.equals(this.resourceType, labResourceCostProperties.resourceType) &&
        Objects.equals(this.resourceUId, labResourceCostProperties.resourceUId) &&
        Objects.equals(this.resourcename, labResourceCostProperties.resourcename);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalResourceId, resourceCost, resourceId, resourceOwner, resourcePricingTier, resourceStatus, resourceType, resourceUId, resourcename);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabResourceCostProperties {\n");
    sb.append("    externalResourceId: ").append(toIndentedString(externalResourceId)).append("\n");
    sb.append("    resourceCost: ").append(toIndentedString(resourceCost)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceOwner: ").append(toIndentedString(resourceOwner)).append("\n");
    sb.append("    resourcePricingTier: ").append(toIndentedString(resourcePricingTier)).append("\n");
    sb.append("    resourceStatus: ").append(toIndentedString(resourceStatus)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceUId: ").append(toIndentedString(resourceUId)).append("\n");
    sb.append("    resourcename: ").append(toIndentedString(resourcename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalResourceId");
    openapiFields.add("resourceCost");
    openapiFields.add("resourceId");
    openapiFields.add("resourceOwner");
    openapiFields.add("resourcePricingTier");
    openapiFields.add("resourceStatus");
    openapiFields.add("resourceType");
    openapiFields.add("resourceUId");
    openapiFields.add("resourcename");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabResourceCostProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabResourceCostProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabResourceCostProperties is not found in the empty JSON string", LabResourceCostProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabResourceCostProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabResourceCostProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalResourceId") != null && !jsonObj.get("externalResourceId").isJsonNull()) && !jsonObj.get("externalResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalResourceId").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("resourceOwner") != null && !jsonObj.get("resourceOwner").isJsonNull()) && !jsonObj.get("resourceOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceOwner").toString()));
      }
      if ((jsonObj.get("resourcePricingTier") != null && !jsonObj.get("resourcePricingTier").isJsonNull()) && !jsonObj.get("resourcePricingTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePricingTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePricingTier").toString()));
      }
      if ((jsonObj.get("resourceStatus") != null && !jsonObj.get("resourceStatus").isJsonNull()) && !jsonObj.get("resourceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceStatus").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("resourceUId") != null && !jsonObj.get("resourceUId").isJsonNull()) && !jsonObj.get("resourceUId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUId").toString()));
      }
      if ((jsonObj.get("resourcename") != null && !jsonObj.get("resourcename").isJsonNull()) && !jsonObj.get("resourcename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcename").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabResourceCostProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabResourceCostProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabResourceCostProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabResourceCostProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LabResourceCostProperties>() {
           @Override
           public void write(JsonWriter out, LabResourceCostProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabResourceCostProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabResourceCostProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabResourceCostProperties
   * @throws IOException if the JSON string is invalid with respect to LabResourceCostProperties
   */
  public static LabResourceCostProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabResourceCostProperties.class);
  }

  /**
   * Convert an instance of LabResourceCostProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

