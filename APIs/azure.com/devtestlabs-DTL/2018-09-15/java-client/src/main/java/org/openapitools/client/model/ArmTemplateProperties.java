/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ParametersValueFileInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an Azure Resource Manager template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArmTemplateProperties {
  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private Object contents;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_PARAMETERS_VALUE_FILES_INFO = "parametersValueFilesInfo";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_VALUE_FILES_INFO)
  private List<ParametersValueFileInfo> parametersValueFilesInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public ArmTemplateProperties() {
  }

  public ArmTemplateProperties(
     Object contents, 
     OffsetDateTime createdDate, 
     String description, 
     String displayName, 
     Boolean enabled, 
     String icon, 
     List<ParametersValueFileInfo> parametersValueFilesInfo, 
     String publisher
  ) {
    this();
    this.contents = contents;
    this.createdDate = createdDate;
    this.description = description;
    this.displayName = displayName;
    this.enabled = enabled;
    this.icon = icon;
    this.parametersValueFilesInfo = parametersValueFilesInfo;
    this.publisher = publisher;
  }

  /**
   * The contents of the ARM template.
   * @return contents
   */
  @javax.annotation.Nullable
  public Object getContents() {
    return contents;
  }



  /**
   * The creation date of the armTemplate.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }



  /**
   * The description of the ARM template.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The display name of the ARM template.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Whether or not ARM template is enabled for use by lab user.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }



  /**
   * The URI to the icon of the ARM template.
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }



  /**
   * File name and parameter values information from all azuredeploy.*.parameters.json for the ARM template.
   * @return parametersValueFilesInfo
   */
  @javax.annotation.Nullable
  public List<ParametersValueFileInfo> getParametersValueFilesInfo() {
    return parametersValueFilesInfo;
  }



  /**
   * The publisher of the ARM template.
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArmTemplateProperties armTemplateProperties = (ArmTemplateProperties) o;
    return Objects.equals(this.contents, armTemplateProperties.contents) &&
        Objects.equals(this.createdDate, armTemplateProperties.createdDate) &&
        Objects.equals(this.description, armTemplateProperties.description) &&
        Objects.equals(this.displayName, armTemplateProperties.displayName) &&
        Objects.equals(this.enabled, armTemplateProperties.enabled) &&
        Objects.equals(this.icon, armTemplateProperties.icon) &&
        Objects.equals(this.parametersValueFilesInfo, armTemplateProperties.parametersValueFilesInfo) &&
        Objects.equals(this.publisher, armTemplateProperties.publisher);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contents, createdDate, description, displayName, enabled, icon, parametersValueFilesInfo, publisher);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArmTemplateProperties {\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    parametersValueFilesInfo: ").append(toIndentedString(parametersValueFilesInfo)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contents");
    openapiFields.add("createdDate");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("enabled");
    openapiFields.add("icon");
    openapiFields.add("parametersValueFilesInfo");
    openapiFields.add("publisher");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArmTemplateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArmTemplateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArmTemplateProperties is not found in the empty JSON string", ArmTemplateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArmTemplateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArmTemplateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if (jsonObj.get("parametersValueFilesInfo") != null && !jsonObj.get("parametersValueFilesInfo").isJsonNull()) {
        JsonArray jsonArrayparametersValueFilesInfo = jsonObj.getAsJsonArray("parametersValueFilesInfo");
        if (jsonArrayparametersValueFilesInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parametersValueFilesInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parametersValueFilesInfo` to be an array in the JSON string but got `%s`", jsonObj.get("parametersValueFilesInfo").toString()));
          }

          // validate the optional field `parametersValueFilesInfo` (array)
          for (int i = 0; i < jsonArrayparametersValueFilesInfo.size(); i++) {
            ParametersValueFileInfo.validateJsonElement(jsonArrayparametersValueFilesInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArmTemplateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArmTemplateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArmTemplateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArmTemplateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ArmTemplateProperties>() {
           @Override
           public void write(JsonWriter out, ArmTemplateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArmTemplateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArmTemplateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArmTemplateProperties
   * @throws IOException if the JSON string is invalid with respect to ArmTemplateProperties
   */
  public static ArmTemplateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArmTemplateProperties.class);
  }

  /**
   * Convert an instance of ArmTemplateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

