/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LabAnnouncementPropertiesFragment;
import org.openapitools.client.model.LabSupportPropertiesFragment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a lab.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabPropertiesFragment {
  public static final String SERIALIZED_NAME_ANNOUNCEMENT = "announcement";
  @SerializedName(SERIALIZED_NAME_ANNOUNCEMENT)
  private LabAnnouncementPropertiesFragment announcement;

  /**
   * The access rights to be granted to the user when provisioning an environment
   */
  @JsonAdapter(EnvironmentPermissionEnum.Adapter.class)
  public enum EnvironmentPermissionEnum {
    READER("Reader"),
    
    CONTRIBUTOR("Contributor");

    private String value;

    EnvironmentPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentPermissionEnum fromValue(String value) {
      for (EnvironmentPermissionEnum b : EnvironmentPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentPermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnvironmentPermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENT_PERMISSION = "environmentPermission";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_PERMISSION)
  private EnvironmentPermissionEnum environmentPermission;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extendedProperties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private Map<String, String> extendedProperties = new HashMap<>();

  /**
   * Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
   */
  @JsonAdapter(LabStorageTypeEnum.Adapter.class)
  public enum LabStorageTypeEnum {
    STANDARD("Standard"),
    
    PREMIUM("Premium"),
    
    STANDARD_SSD("StandardSSD");

    private String value;

    LabStorageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabStorageTypeEnum fromValue(String value) {
      for (LabStorageTypeEnum b : LabStorageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabStorageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabStorageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabStorageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabStorageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabStorageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAB_STORAGE_TYPE = "labStorageType";
  @SerializedName(SERIALIZED_NAME_LAB_STORAGE_TYPE)
  private LabStorageTypeEnum labStorageType;

  public static final String SERIALIZED_NAME_MANDATORY_ARTIFACTS_RESOURCE_IDS_LINUX = "mandatoryArtifactsResourceIdsLinux";
  @SerializedName(SERIALIZED_NAME_MANDATORY_ARTIFACTS_RESOURCE_IDS_LINUX)
  private List<String> mandatoryArtifactsResourceIdsLinux = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANDATORY_ARTIFACTS_RESOURCE_IDS_WINDOWS = "mandatoryArtifactsResourceIdsWindows";
  @SerializedName(SERIALIZED_NAME_MANDATORY_ARTIFACTS_RESOURCE_IDS_WINDOWS)
  private List<String> mandatoryArtifactsResourceIdsWindows = new ArrayList<>();

  /**
   * The setting to enable usage of premium data disks.  When its value is &#39;Enabled&#39;, creation of standard or premium data disks is allowed.  When its value is &#39;Disabled&#39;, only creation of standard data disks is allowed.
   */
  @JsonAdapter(PremiumDataDisksEnum.Adapter.class)
  public enum PremiumDataDisksEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    PremiumDataDisksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PremiumDataDisksEnum fromValue(String value) {
      for (PremiumDataDisksEnum b : PremiumDataDisksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PremiumDataDisksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PremiumDataDisksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PremiumDataDisksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PremiumDataDisksEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PremiumDataDisksEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREMIUM_DATA_DISKS = "premiumDataDisks";
  @SerializedName(SERIALIZED_NAME_PREMIUM_DATA_DISKS)
  private PremiumDataDisksEnum premiumDataDisks;

  public static final String SERIALIZED_NAME_SUPPORT = "support";
  @SerializedName(SERIALIZED_NAME_SUPPORT)
  private LabSupportPropertiesFragment support;

  public LabPropertiesFragment() {
  }

  public LabPropertiesFragment announcement(LabAnnouncementPropertiesFragment announcement) {
    this.announcement = announcement;
    return this;
  }

  /**
   * Get announcement
   * @return announcement
   */
  @javax.annotation.Nullable
  public LabAnnouncementPropertiesFragment getAnnouncement() {
    return announcement;
  }

  public void setAnnouncement(LabAnnouncementPropertiesFragment announcement) {
    this.announcement = announcement;
  }


  public LabPropertiesFragment environmentPermission(EnvironmentPermissionEnum environmentPermission) {
    this.environmentPermission = environmentPermission;
    return this;
  }

  /**
   * The access rights to be granted to the user when provisioning an environment
   * @return environmentPermission
   */
  @javax.annotation.Nullable
  public EnvironmentPermissionEnum getEnvironmentPermission() {
    return environmentPermission;
  }

  public void setEnvironmentPermission(EnvironmentPermissionEnum environmentPermission) {
    this.environmentPermission = environmentPermission;
  }


  public LabPropertiesFragment extendedProperties(Map<String, String> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public LabPropertiesFragment putExtendedPropertiesItem(String key, String extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new HashMap<>();
    }
    this.extendedProperties.put(key, extendedPropertiesItem);
    return this;
  }

  /**
   * Extended properties of the lab used for experimental features
   * @return extendedProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(Map<String, String> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public LabPropertiesFragment labStorageType(LabStorageTypeEnum labStorageType) {
    this.labStorageType = labStorageType;
    return this;
  }

  /**
   * Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
   * @return labStorageType
   */
  @javax.annotation.Nullable
  public LabStorageTypeEnum getLabStorageType() {
    return labStorageType;
  }

  public void setLabStorageType(LabStorageTypeEnum labStorageType) {
    this.labStorageType = labStorageType;
  }


  public LabPropertiesFragment mandatoryArtifactsResourceIdsLinux(List<String> mandatoryArtifactsResourceIdsLinux) {
    this.mandatoryArtifactsResourceIdsLinux = mandatoryArtifactsResourceIdsLinux;
    return this;
  }

  public LabPropertiesFragment addMandatoryArtifactsResourceIdsLinuxItem(String mandatoryArtifactsResourceIdsLinuxItem) {
    if (this.mandatoryArtifactsResourceIdsLinux == null) {
      this.mandatoryArtifactsResourceIdsLinux = new ArrayList<>();
    }
    this.mandatoryArtifactsResourceIdsLinux.add(mandatoryArtifactsResourceIdsLinuxItem);
    return this;
  }

  /**
   * The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.
   * @return mandatoryArtifactsResourceIdsLinux
   */
  @javax.annotation.Nullable
  public List<String> getMandatoryArtifactsResourceIdsLinux() {
    return mandatoryArtifactsResourceIdsLinux;
  }

  public void setMandatoryArtifactsResourceIdsLinux(List<String> mandatoryArtifactsResourceIdsLinux) {
    this.mandatoryArtifactsResourceIdsLinux = mandatoryArtifactsResourceIdsLinux;
  }


  public LabPropertiesFragment mandatoryArtifactsResourceIdsWindows(List<String> mandatoryArtifactsResourceIdsWindows) {
    this.mandatoryArtifactsResourceIdsWindows = mandatoryArtifactsResourceIdsWindows;
    return this;
  }

  public LabPropertiesFragment addMandatoryArtifactsResourceIdsWindowsItem(String mandatoryArtifactsResourceIdsWindowsItem) {
    if (this.mandatoryArtifactsResourceIdsWindows == null) {
      this.mandatoryArtifactsResourceIdsWindows = new ArrayList<>();
    }
    this.mandatoryArtifactsResourceIdsWindows.add(mandatoryArtifactsResourceIdsWindowsItem);
    return this;
  }

  /**
   * The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.
   * @return mandatoryArtifactsResourceIdsWindows
   */
  @javax.annotation.Nullable
  public List<String> getMandatoryArtifactsResourceIdsWindows() {
    return mandatoryArtifactsResourceIdsWindows;
  }

  public void setMandatoryArtifactsResourceIdsWindows(List<String> mandatoryArtifactsResourceIdsWindows) {
    this.mandatoryArtifactsResourceIdsWindows = mandatoryArtifactsResourceIdsWindows;
  }


  public LabPropertiesFragment premiumDataDisks(PremiumDataDisksEnum premiumDataDisks) {
    this.premiumDataDisks = premiumDataDisks;
    return this;
  }

  /**
   * The setting to enable usage of premium data disks.  When its value is &#39;Enabled&#39;, creation of standard or premium data disks is allowed.  When its value is &#39;Disabled&#39;, only creation of standard data disks is allowed.
   * @return premiumDataDisks
   */
  @javax.annotation.Nullable
  public PremiumDataDisksEnum getPremiumDataDisks() {
    return premiumDataDisks;
  }

  public void setPremiumDataDisks(PremiumDataDisksEnum premiumDataDisks) {
    this.premiumDataDisks = premiumDataDisks;
  }


  public LabPropertiesFragment support(LabSupportPropertiesFragment support) {
    this.support = support;
    return this;
  }

  /**
   * Get support
   * @return support
   */
  @javax.annotation.Nullable
  public LabSupportPropertiesFragment getSupport() {
    return support;
  }

  public void setSupport(LabSupportPropertiesFragment support) {
    this.support = support;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabPropertiesFragment labPropertiesFragment = (LabPropertiesFragment) o;
    return Objects.equals(this.announcement, labPropertiesFragment.announcement) &&
        Objects.equals(this.environmentPermission, labPropertiesFragment.environmentPermission) &&
        Objects.equals(this.extendedProperties, labPropertiesFragment.extendedProperties) &&
        Objects.equals(this.labStorageType, labPropertiesFragment.labStorageType) &&
        Objects.equals(this.mandatoryArtifactsResourceIdsLinux, labPropertiesFragment.mandatoryArtifactsResourceIdsLinux) &&
        Objects.equals(this.mandatoryArtifactsResourceIdsWindows, labPropertiesFragment.mandatoryArtifactsResourceIdsWindows) &&
        Objects.equals(this.premiumDataDisks, labPropertiesFragment.premiumDataDisks) &&
        Objects.equals(this.support, labPropertiesFragment.support);
  }

  @Override
  public int hashCode() {
    return Objects.hash(announcement, environmentPermission, extendedProperties, labStorageType, mandatoryArtifactsResourceIdsLinux, mandatoryArtifactsResourceIdsWindows, premiumDataDisks, support);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabPropertiesFragment {\n");
    sb.append("    announcement: ").append(toIndentedString(announcement)).append("\n");
    sb.append("    environmentPermission: ").append(toIndentedString(environmentPermission)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    labStorageType: ").append(toIndentedString(labStorageType)).append("\n");
    sb.append("    mandatoryArtifactsResourceIdsLinux: ").append(toIndentedString(mandatoryArtifactsResourceIdsLinux)).append("\n");
    sb.append("    mandatoryArtifactsResourceIdsWindows: ").append(toIndentedString(mandatoryArtifactsResourceIdsWindows)).append("\n");
    sb.append("    premiumDataDisks: ").append(toIndentedString(premiumDataDisks)).append("\n");
    sb.append("    support: ").append(toIndentedString(support)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("announcement");
    openapiFields.add("environmentPermission");
    openapiFields.add("extendedProperties");
    openapiFields.add("labStorageType");
    openapiFields.add("mandatoryArtifactsResourceIdsLinux");
    openapiFields.add("mandatoryArtifactsResourceIdsWindows");
    openapiFields.add("premiumDataDisks");
    openapiFields.add("support");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabPropertiesFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabPropertiesFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabPropertiesFragment is not found in the empty JSON string", LabPropertiesFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabPropertiesFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabPropertiesFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `announcement`
      if (jsonObj.get("announcement") != null && !jsonObj.get("announcement").isJsonNull()) {
        LabAnnouncementPropertiesFragment.validateJsonElement(jsonObj.get("announcement"));
      }
      if ((jsonObj.get("environmentPermission") != null && !jsonObj.get("environmentPermission").isJsonNull()) && !jsonObj.get("environmentPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentPermission").toString()));
      }
      // validate the optional field `environmentPermission`
      if (jsonObj.get("environmentPermission") != null && !jsonObj.get("environmentPermission").isJsonNull()) {
        EnvironmentPermissionEnum.validateJsonElement(jsonObj.get("environmentPermission"));
      }
      if ((jsonObj.get("labStorageType") != null && !jsonObj.get("labStorageType").isJsonNull()) && !jsonObj.get("labStorageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labStorageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labStorageType").toString()));
      }
      // validate the optional field `labStorageType`
      if (jsonObj.get("labStorageType") != null && !jsonObj.get("labStorageType").isJsonNull()) {
        LabStorageTypeEnum.validateJsonElement(jsonObj.get("labStorageType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mandatoryArtifactsResourceIdsLinux") != null && !jsonObj.get("mandatoryArtifactsResourceIdsLinux").isJsonNull() && !jsonObj.get("mandatoryArtifactsResourceIdsLinux").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandatoryArtifactsResourceIdsLinux` to be an array in the JSON string but got `%s`", jsonObj.get("mandatoryArtifactsResourceIdsLinux").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mandatoryArtifactsResourceIdsWindows") != null && !jsonObj.get("mandatoryArtifactsResourceIdsWindows").isJsonNull() && !jsonObj.get("mandatoryArtifactsResourceIdsWindows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandatoryArtifactsResourceIdsWindows` to be an array in the JSON string but got `%s`", jsonObj.get("mandatoryArtifactsResourceIdsWindows").toString()));
      }
      if ((jsonObj.get("premiumDataDisks") != null && !jsonObj.get("premiumDataDisks").isJsonNull()) && !jsonObj.get("premiumDataDisks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `premiumDataDisks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("premiumDataDisks").toString()));
      }
      // validate the optional field `premiumDataDisks`
      if (jsonObj.get("premiumDataDisks") != null && !jsonObj.get("premiumDataDisks").isJsonNull()) {
        PremiumDataDisksEnum.validateJsonElement(jsonObj.get("premiumDataDisks"));
      }
      // validate the optional field `support`
      if (jsonObj.get("support") != null && !jsonObj.get("support").isJsonNull()) {
        LabSupportPropertiesFragment.validateJsonElement(jsonObj.get("support"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabPropertiesFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabPropertiesFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabPropertiesFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabPropertiesFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<LabPropertiesFragment>() {
           @Override
           public void write(JsonWriter out, LabPropertiesFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabPropertiesFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabPropertiesFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabPropertiesFragment
   * @throws IOException if the JSON string is invalid with respect to LabPropertiesFragment
   */
  public static LabPropertiesFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabPropertiesFragment.class);
  }

  /**
   * Convert an instance of LabPropertiesFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

