/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventFragment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationChannelPropertiesFragment {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL_RECIPIENT = "emailRecipient";
  @SerializedName(SERIALIZED_NAME_EMAIL_RECIPIENT)
  private String emailRecipient;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<EventFragment> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_LOCALE = "notificationLocale";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_LOCALE)
  private String notificationLocale;

  public static final String SERIALIZED_NAME_WEB_HOOK_URL = "webHookUrl";
  @SerializedName(SERIALIZED_NAME_WEB_HOOK_URL)
  private String webHookUrl;

  public NotificationChannelPropertiesFragment() {
  }

  public NotificationChannelPropertiesFragment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of notification.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NotificationChannelPropertiesFragment emailRecipient(String emailRecipient) {
    this.emailRecipient = emailRecipient;
    return this;
  }

  /**
   * The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
   * @return emailRecipient
   */
  @javax.annotation.Nullable
  public String getEmailRecipient() {
    return emailRecipient;
  }

  public void setEmailRecipient(String emailRecipient) {
    this.emailRecipient = emailRecipient;
  }


  public NotificationChannelPropertiesFragment events(List<EventFragment> events) {
    this.events = events;
    return this;
  }

  public NotificationChannelPropertiesFragment addEventsItem(EventFragment eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * The list of event for which this notification is enabled.
   * @return events
   */
  @javax.annotation.Nullable
  public List<EventFragment> getEvents() {
    return events;
  }

  public void setEvents(List<EventFragment> events) {
    this.events = events;
  }


  public NotificationChannelPropertiesFragment notificationLocale(String notificationLocale) {
    this.notificationLocale = notificationLocale;
    return this;
  }

  /**
   * The locale to use when sending a notification (fallback for unsupported languages is EN).
   * @return notificationLocale
   */
  @javax.annotation.Nullable
  public String getNotificationLocale() {
    return notificationLocale;
  }

  public void setNotificationLocale(String notificationLocale) {
    this.notificationLocale = notificationLocale;
  }


  public NotificationChannelPropertiesFragment webHookUrl(String webHookUrl) {
    this.webHookUrl = webHookUrl;
    return this;
  }

  /**
   * The webhook URL to send notifications to.
   * @return webHookUrl
   */
  @javax.annotation.Nullable
  public String getWebHookUrl() {
    return webHookUrl;
  }

  public void setWebHookUrl(String webHookUrl) {
    this.webHookUrl = webHookUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationChannelPropertiesFragment notificationChannelPropertiesFragment = (NotificationChannelPropertiesFragment) o;
    return Objects.equals(this.description, notificationChannelPropertiesFragment.description) &&
        Objects.equals(this.emailRecipient, notificationChannelPropertiesFragment.emailRecipient) &&
        Objects.equals(this.events, notificationChannelPropertiesFragment.events) &&
        Objects.equals(this.notificationLocale, notificationChannelPropertiesFragment.notificationLocale) &&
        Objects.equals(this.webHookUrl, notificationChannelPropertiesFragment.webHookUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, emailRecipient, events, notificationLocale, webHookUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationChannelPropertiesFragment {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailRecipient: ").append(toIndentedString(emailRecipient)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    notificationLocale: ").append(toIndentedString(notificationLocale)).append("\n");
    sb.append("    webHookUrl: ").append(toIndentedString(webHookUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("emailRecipient");
    openapiFields.add("events");
    openapiFields.add("notificationLocale");
    openapiFields.add("webHookUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationChannelPropertiesFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationChannelPropertiesFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationChannelPropertiesFragment is not found in the empty JSON string", NotificationChannelPropertiesFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationChannelPropertiesFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationChannelPropertiesFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("emailRecipient") != null && !jsonObj.get("emailRecipient").isJsonNull()) && !jsonObj.get("emailRecipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailRecipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailRecipient").toString()));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            EventFragment.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if ((jsonObj.get("notificationLocale") != null && !jsonObj.get("notificationLocale").isJsonNull()) && !jsonObj.get("notificationLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationLocale").toString()));
      }
      if ((jsonObj.get("webHookUrl") != null && !jsonObj.get("webHookUrl").isJsonNull()) && !jsonObj.get("webHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webHookUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationChannelPropertiesFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationChannelPropertiesFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationChannelPropertiesFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationChannelPropertiesFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationChannelPropertiesFragment>() {
           @Override
           public void write(JsonWriter out, NotificationChannelPropertiesFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationChannelPropertiesFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationChannelPropertiesFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationChannelPropertiesFragment
   * @throws IOException if the JSON string is invalid with respect to NotificationChannelPropertiesFragment
   */
  public static NotificationChannelPropertiesFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationChannelPropertiesFragment.class);
  }

  /**
   * Convert an instance of NotificationChannelPropertiesFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

