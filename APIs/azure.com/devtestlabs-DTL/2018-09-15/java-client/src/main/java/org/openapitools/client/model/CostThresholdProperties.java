/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2018-09-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PercentageCostThresholdProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a cost threshold item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:35.224017-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CostThresholdProperties {
  /**
   * Indicates whether this threshold will be displayed on cost charts.
   */
  @JsonAdapter(DisplayOnChartEnum.Adapter.class)
  public enum DisplayOnChartEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    DisplayOnChartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayOnChartEnum fromValue(String value) {
      for (DisplayOnChartEnum b : DisplayOnChartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayOnChartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayOnChartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayOnChartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayOnChartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayOnChartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_ON_CHART = "displayOnChart";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ON_CHART)
  private DisplayOnChartEnum displayOnChart;

  public static final String SERIALIZED_NAME_NOTIFICATION_SENT = "notificationSent";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SENT)
  private String notificationSent;

  public static final String SERIALIZED_NAME_PERCENTAGE_THRESHOLD = "percentageThreshold";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_THRESHOLD)
  private PercentageCostThresholdProperties percentageThreshold;

  /**
   * Indicates whether notifications will be sent when this threshold is exceeded.
   */
  @JsonAdapter(SendNotificationWhenExceededEnum.Adapter.class)
  public enum SendNotificationWhenExceededEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    SendNotificationWhenExceededEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendNotificationWhenExceededEnum fromValue(String value) {
      for (SendNotificationWhenExceededEnum b : SendNotificationWhenExceededEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendNotificationWhenExceededEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendNotificationWhenExceededEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendNotificationWhenExceededEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendNotificationWhenExceededEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SendNotificationWhenExceededEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEND_NOTIFICATION_WHEN_EXCEEDED = "sendNotificationWhenExceeded";
  @SerializedName(SERIALIZED_NAME_SEND_NOTIFICATION_WHEN_EXCEEDED)
  private SendNotificationWhenExceededEnum sendNotificationWhenExceeded;

  public static final String SERIALIZED_NAME_THRESHOLD_ID = "thresholdId";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_ID)
  private String thresholdId;

  public CostThresholdProperties() {
  }

  public CostThresholdProperties displayOnChart(DisplayOnChartEnum displayOnChart) {
    this.displayOnChart = displayOnChart;
    return this;
  }

  /**
   * Indicates whether this threshold will be displayed on cost charts.
   * @return displayOnChart
   */
  @javax.annotation.Nullable
  public DisplayOnChartEnum getDisplayOnChart() {
    return displayOnChart;
  }

  public void setDisplayOnChart(DisplayOnChartEnum displayOnChart) {
    this.displayOnChart = displayOnChart;
  }


  public CostThresholdProperties notificationSent(String notificationSent) {
    this.notificationSent = notificationSent;
    return this;
  }

  /**
   * Indicates the datetime when notifications were last sent for this threshold.
   * @return notificationSent
   */
  @javax.annotation.Nullable
  public String getNotificationSent() {
    return notificationSent;
  }

  public void setNotificationSent(String notificationSent) {
    this.notificationSent = notificationSent;
  }


  public CostThresholdProperties percentageThreshold(PercentageCostThresholdProperties percentageThreshold) {
    this.percentageThreshold = percentageThreshold;
    return this;
  }

  /**
   * Get percentageThreshold
   * @return percentageThreshold
   */
  @javax.annotation.Nullable
  public PercentageCostThresholdProperties getPercentageThreshold() {
    return percentageThreshold;
  }

  public void setPercentageThreshold(PercentageCostThresholdProperties percentageThreshold) {
    this.percentageThreshold = percentageThreshold;
  }


  public CostThresholdProperties sendNotificationWhenExceeded(SendNotificationWhenExceededEnum sendNotificationWhenExceeded) {
    this.sendNotificationWhenExceeded = sendNotificationWhenExceeded;
    return this;
  }

  /**
   * Indicates whether notifications will be sent when this threshold is exceeded.
   * @return sendNotificationWhenExceeded
   */
  @javax.annotation.Nullable
  public SendNotificationWhenExceededEnum getSendNotificationWhenExceeded() {
    return sendNotificationWhenExceeded;
  }

  public void setSendNotificationWhenExceeded(SendNotificationWhenExceededEnum sendNotificationWhenExceeded) {
    this.sendNotificationWhenExceeded = sendNotificationWhenExceeded;
  }


  public CostThresholdProperties thresholdId(String thresholdId) {
    this.thresholdId = thresholdId;
    return this;
  }

  /**
   * The ID of the cost threshold item.
   * @return thresholdId
   */
  @javax.annotation.Nullable
  public String getThresholdId() {
    return thresholdId;
  }

  public void setThresholdId(String thresholdId) {
    this.thresholdId = thresholdId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostThresholdProperties costThresholdProperties = (CostThresholdProperties) o;
    return Objects.equals(this.displayOnChart, costThresholdProperties.displayOnChart) &&
        Objects.equals(this.notificationSent, costThresholdProperties.notificationSent) &&
        Objects.equals(this.percentageThreshold, costThresholdProperties.percentageThreshold) &&
        Objects.equals(this.sendNotificationWhenExceeded, costThresholdProperties.sendNotificationWhenExceeded) &&
        Objects.equals(this.thresholdId, costThresholdProperties.thresholdId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayOnChart, notificationSent, percentageThreshold, sendNotificationWhenExceeded, thresholdId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostThresholdProperties {\n");
    sb.append("    displayOnChart: ").append(toIndentedString(displayOnChart)).append("\n");
    sb.append("    notificationSent: ").append(toIndentedString(notificationSent)).append("\n");
    sb.append("    percentageThreshold: ").append(toIndentedString(percentageThreshold)).append("\n");
    sb.append("    sendNotificationWhenExceeded: ").append(toIndentedString(sendNotificationWhenExceeded)).append("\n");
    sb.append("    thresholdId: ").append(toIndentedString(thresholdId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayOnChart");
    openapiFields.add("notificationSent");
    openapiFields.add("percentageThreshold");
    openapiFields.add("sendNotificationWhenExceeded");
    openapiFields.add("thresholdId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CostThresholdProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CostThresholdProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CostThresholdProperties is not found in the empty JSON string", CostThresholdProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CostThresholdProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CostThresholdProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayOnChart") != null && !jsonObj.get("displayOnChart").isJsonNull()) && !jsonObj.get("displayOnChart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayOnChart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayOnChart").toString()));
      }
      // validate the optional field `displayOnChart`
      if (jsonObj.get("displayOnChart") != null && !jsonObj.get("displayOnChart").isJsonNull()) {
        DisplayOnChartEnum.validateJsonElement(jsonObj.get("displayOnChart"));
      }
      if ((jsonObj.get("notificationSent") != null && !jsonObj.get("notificationSent").isJsonNull()) && !jsonObj.get("notificationSent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationSent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationSent").toString()));
      }
      // validate the optional field `percentageThreshold`
      if (jsonObj.get("percentageThreshold") != null && !jsonObj.get("percentageThreshold").isJsonNull()) {
        PercentageCostThresholdProperties.validateJsonElement(jsonObj.get("percentageThreshold"));
      }
      if ((jsonObj.get("sendNotificationWhenExceeded") != null && !jsonObj.get("sendNotificationWhenExceeded").isJsonNull()) && !jsonObj.get("sendNotificationWhenExceeded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendNotificationWhenExceeded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendNotificationWhenExceeded").toString()));
      }
      // validate the optional field `sendNotificationWhenExceeded`
      if (jsonObj.get("sendNotificationWhenExceeded") != null && !jsonObj.get("sendNotificationWhenExceeded").isJsonNull()) {
        SendNotificationWhenExceededEnum.validateJsonElement(jsonObj.get("sendNotificationWhenExceeded"));
      }
      if ((jsonObj.get("thresholdId") != null && !jsonObj.get("thresholdId").isJsonNull()) && !jsonObj.get("thresholdId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thresholdId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thresholdId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CostThresholdProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CostThresholdProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CostThresholdProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CostThresholdProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CostThresholdProperties>() {
           @Override
           public void write(JsonWriter out, CostThresholdProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CostThresholdProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CostThresholdProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CostThresholdProperties
   * @throws IOException if the JSON string is invalid with respect to CostThresholdProperties
   */
  public static CostThresholdProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CostThresholdProperties.class);
  }

  /**
   * Convert an instance of CostThresholdProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

