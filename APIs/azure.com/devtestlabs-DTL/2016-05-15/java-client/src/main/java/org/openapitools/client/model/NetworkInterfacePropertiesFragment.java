/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SharedPublicIpAddressConfigurationFragment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a network interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkInterfacePropertiesFragment {
  public static final String SERIALIZED_NAME_DNS_NAME = "dnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESS = "privateIpAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESS)
  private String privateIpAddress;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESS = "publicIpAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESS)
  private String publicIpAddress;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESS_ID = "publicIpAddressId";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESS_ID)
  private String publicIpAddressId;

  public static final String SERIALIZED_NAME_RDP_AUTHORITY = "rdpAuthority";
  @SerializedName(SERIALIZED_NAME_RDP_AUTHORITY)
  private String rdpAuthority;

  public static final String SERIALIZED_NAME_SHARED_PUBLIC_IP_ADDRESS_CONFIGURATION = "sharedPublicIpAddressConfiguration";
  @SerializedName(SERIALIZED_NAME_SHARED_PUBLIC_IP_ADDRESS_CONFIGURATION)
  private SharedPublicIpAddressConfigurationFragment sharedPublicIpAddressConfiguration;

  public static final String SERIALIZED_NAME_SSH_AUTHORITY = "sshAuthority";
  @SerializedName(SERIALIZED_NAME_SSH_AUTHORITY)
  private String sshAuthority;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_ID = "virtualNetworkId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_ID)
  private String virtualNetworkId;

  public NetworkInterfacePropertiesFragment() {
  }

  public NetworkInterfacePropertiesFragment dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * The DNS name.
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public NetworkInterfacePropertiesFragment privateIpAddress(String privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
    return this;
  }

  /**
   * The private IP address.
   * @return privateIpAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIpAddress() {
    return privateIpAddress;
  }

  public void setPrivateIpAddress(String privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
  }


  public NetworkInterfacePropertiesFragment publicIpAddress(String publicIpAddress) {
    this.publicIpAddress = publicIpAddress;
    return this;
  }

  /**
   * The public IP address.
   * @return publicIpAddress
   */
  @javax.annotation.Nullable
  public String getPublicIpAddress() {
    return publicIpAddress;
  }

  public void setPublicIpAddress(String publicIpAddress) {
    this.publicIpAddress = publicIpAddress;
  }


  public NetworkInterfacePropertiesFragment publicIpAddressId(String publicIpAddressId) {
    this.publicIpAddressId = publicIpAddressId;
    return this;
  }

  /**
   * The resource ID of the public IP address.
   * @return publicIpAddressId
   */
  @javax.annotation.Nullable
  public String getPublicIpAddressId() {
    return publicIpAddressId;
  }

  public void setPublicIpAddressId(String publicIpAddressId) {
    this.publicIpAddressId = publicIpAddressId;
  }


  public NetworkInterfacePropertiesFragment rdpAuthority(String rdpAuthority) {
    this.rdpAuthority = rdpAuthority;
    return this;
  }

  /**
   * The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
   * @return rdpAuthority
   */
  @javax.annotation.Nullable
  public String getRdpAuthority() {
    return rdpAuthority;
  }

  public void setRdpAuthority(String rdpAuthority) {
    this.rdpAuthority = rdpAuthority;
  }


  public NetworkInterfacePropertiesFragment sharedPublicIpAddressConfiguration(SharedPublicIpAddressConfigurationFragment sharedPublicIpAddressConfiguration) {
    this.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
    return this;
  }

  /**
   * Get sharedPublicIpAddressConfiguration
   * @return sharedPublicIpAddressConfiguration
   */
  @javax.annotation.Nullable
  public SharedPublicIpAddressConfigurationFragment getSharedPublicIpAddressConfiguration() {
    return sharedPublicIpAddressConfiguration;
  }

  public void setSharedPublicIpAddressConfiguration(SharedPublicIpAddressConfigurationFragment sharedPublicIpAddressConfiguration) {
    this.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
  }


  public NetworkInterfacePropertiesFragment sshAuthority(String sshAuthority) {
    this.sshAuthority = sshAuthority;
    return this;
  }

  /**
   * The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
   * @return sshAuthority
   */
  @javax.annotation.Nullable
  public String getSshAuthority() {
    return sshAuthority;
  }

  public void setSshAuthority(String sshAuthority) {
    this.sshAuthority = sshAuthority;
  }


  public NetworkInterfacePropertiesFragment subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * The resource ID of the sub net.
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public NetworkInterfacePropertiesFragment virtualNetworkId(String virtualNetworkId) {
    this.virtualNetworkId = virtualNetworkId;
    return this;
  }

  /**
   * The resource ID of the virtual network.
   * @return virtualNetworkId
   */
  @javax.annotation.Nullable
  public String getVirtualNetworkId() {
    return virtualNetworkId;
  }

  public void setVirtualNetworkId(String virtualNetworkId) {
    this.virtualNetworkId = virtualNetworkId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkInterfacePropertiesFragment networkInterfacePropertiesFragment = (NetworkInterfacePropertiesFragment) o;
    return Objects.equals(this.dnsName, networkInterfacePropertiesFragment.dnsName) &&
        Objects.equals(this.privateIpAddress, networkInterfacePropertiesFragment.privateIpAddress) &&
        Objects.equals(this.publicIpAddress, networkInterfacePropertiesFragment.publicIpAddress) &&
        Objects.equals(this.publicIpAddressId, networkInterfacePropertiesFragment.publicIpAddressId) &&
        Objects.equals(this.rdpAuthority, networkInterfacePropertiesFragment.rdpAuthority) &&
        Objects.equals(this.sharedPublicIpAddressConfiguration, networkInterfacePropertiesFragment.sharedPublicIpAddressConfiguration) &&
        Objects.equals(this.sshAuthority, networkInterfacePropertiesFragment.sshAuthority) &&
        Objects.equals(this.subnetId, networkInterfacePropertiesFragment.subnetId) &&
        Objects.equals(this.virtualNetworkId, networkInterfacePropertiesFragment.virtualNetworkId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsName, privateIpAddress, publicIpAddress, publicIpAddressId, rdpAuthority, sharedPublicIpAddressConfiguration, sshAuthority, subnetId, virtualNetworkId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkInterfacePropertiesFragment {\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    privateIpAddress: ").append(toIndentedString(privateIpAddress)).append("\n");
    sb.append("    publicIpAddress: ").append(toIndentedString(publicIpAddress)).append("\n");
    sb.append("    publicIpAddressId: ").append(toIndentedString(publicIpAddressId)).append("\n");
    sb.append("    rdpAuthority: ").append(toIndentedString(rdpAuthority)).append("\n");
    sb.append("    sharedPublicIpAddressConfiguration: ").append(toIndentedString(sharedPublicIpAddressConfiguration)).append("\n");
    sb.append("    sshAuthority: ").append(toIndentedString(sshAuthority)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    virtualNetworkId: ").append(toIndentedString(virtualNetworkId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsName");
    openapiFields.add("privateIpAddress");
    openapiFields.add("publicIpAddress");
    openapiFields.add("publicIpAddressId");
    openapiFields.add("rdpAuthority");
    openapiFields.add("sharedPublicIpAddressConfiguration");
    openapiFields.add("sshAuthority");
    openapiFields.add("subnetId");
    openapiFields.add("virtualNetworkId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkInterfacePropertiesFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkInterfacePropertiesFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkInterfacePropertiesFragment is not found in the empty JSON string", NetworkInterfacePropertiesFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkInterfacePropertiesFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkInterfacePropertiesFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dnsName") != null && !jsonObj.get("dnsName").isJsonNull()) && !jsonObj.get("dnsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsName").toString()));
      }
      if ((jsonObj.get("privateIpAddress") != null && !jsonObj.get("privateIpAddress").isJsonNull()) && !jsonObj.get("privateIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIpAddress").toString()));
      }
      if ((jsonObj.get("publicIpAddress") != null && !jsonObj.get("publicIpAddress").isJsonNull()) && !jsonObj.get("publicIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIpAddress").toString()));
      }
      if ((jsonObj.get("publicIpAddressId") != null && !jsonObj.get("publicIpAddressId").isJsonNull()) && !jsonObj.get("publicIpAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIpAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIpAddressId").toString()));
      }
      if ((jsonObj.get("rdpAuthority") != null && !jsonObj.get("rdpAuthority").isJsonNull()) && !jsonObj.get("rdpAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdpAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdpAuthority").toString()));
      }
      // validate the optional field `sharedPublicIpAddressConfiguration`
      if (jsonObj.get("sharedPublicIpAddressConfiguration") != null && !jsonObj.get("sharedPublicIpAddressConfiguration").isJsonNull()) {
        SharedPublicIpAddressConfigurationFragment.validateJsonElement(jsonObj.get("sharedPublicIpAddressConfiguration"));
      }
      if ((jsonObj.get("sshAuthority") != null && !jsonObj.get("sshAuthority").isJsonNull()) && !jsonObj.get("sshAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sshAuthority").toString()));
      }
      if ((jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) && !jsonObj.get("subnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetId").toString()));
      }
      if ((jsonObj.get("virtualNetworkId") != null && !jsonObj.get("virtualNetworkId").isJsonNull()) && !jsonObj.get("virtualNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNetworkId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkInterfacePropertiesFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkInterfacePropertiesFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkInterfacePropertiesFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkInterfacePropertiesFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkInterfacePropertiesFragment>() {
           @Override
           public void write(JsonWriter out, NetworkInterfacePropertiesFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkInterfacePropertiesFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkInterfacePropertiesFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkInterfacePropertiesFragment
   * @throws IOException if the JSON string is invalid with respect to NetworkInterfacePropertiesFragment
   */
  public static NetworkInterfacePropertiesFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkInterfacePropertiesFragment.class);
  }

  /**
   * Convert an instance of NetworkInterfacePropertiesFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

