/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SubnetSharedPublicIpAddressConfigurationFragment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Property overrides on a subnet of a virtual network.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubnetOverrideFragment {
  public static final String SERIALIZED_NAME_LAB_SUBNET_NAME = "labSubnetName";
  @SerializedName(SERIALIZED_NAME_LAB_SUBNET_NAME)
  private String labSubnetName;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_SHARED_PUBLIC_IP_ADDRESS_CONFIGURATION = "sharedPublicIpAddressConfiguration";
  @SerializedName(SERIALIZED_NAME_SHARED_PUBLIC_IP_ADDRESS_CONFIGURATION)
  private SubnetSharedPublicIpAddressConfigurationFragment sharedPublicIpAddressConfiguration;

  /**
   * Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
   */
  @JsonAdapter(UseInVmCreationPermissionEnum.Adapter.class)
  public enum UseInVmCreationPermissionEnum {
    DEFAULT("Default"),
    
    DENY("Deny"),
    
    ALLOW("Allow");

    private String value;

    UseInVmCreationPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UseInVmCreationPermissionEnum fromValue(String value) {
      for (UseInVmCreationPermissionEnum b : UseInVmCreationPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UseInVmCreationPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UseInVmCreationPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UseInVmCreationPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UseInVmCreationPermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UseInVmCreationPermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USE_IN_VM_CREATION_PERMISSION = "useInVmCreationPermission";
  @SerializedName(SERIALIZED_NAME_USE_IN_VM_CREATION_PERMISSION)
  private UseInVmCreationPermissionEnum useInVmCreationPermission;

  /**
   * Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
   */
  @JsonAdapter(UsePublicIpAddressPermissionEnum.Adapter.class)
  public enum UsePublicIpAddressPermissionEnum {
    DEFAULT("Default"),
    
    DENY("Deny"),
    
    ALLOW("Allow");

    private String value;

    UsePublicIpAddressPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsePublicIpAddressPermissionEnum fromValue(String value) {
      for (UsePublicIpAddressPermissionEnum b : UsePublicIpAddressPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsePublicIpAddressPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsePublicIpAddressPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsePublicIpAddressPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsePublicIpAddressPermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsePublicIpAddressPermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USE_PUBLIC_IP_ADDRESS_PERMISSION = "usePublicIpAddressPermission";
  @SerializedName(SERIALIZED_NAME_USE_PUBLIC_IP_ADDRESS_PERMISSION)
  private UsePublicIpAddressPermissionEnum usePublicIpAddressPermission;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_POOL_NAME = "virtualNetworkPoolName";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_POOL_NAME)
  private String virtualNetworkPoolName;

  public SubnetOverrideFragment() {
  }

  public SubnetOverrideFragment labSubnetName(String labSubnetName) {
    this.labSubnetName = labSubnetName;
    return this;
  }

  /**
   * The name given to the subnet within the lab.
   * @return labSubnetName
   */
  @javax.annotation.Nullable
  public String getLabSubnetName() {
    return labSubnetName;
  }

  public void setLabSubnetName(String labSubnetName) {
    this.labSubnetName = labSubnetName;
  }


  public SubnetOverrideFragment resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * The resource ID of the subnet.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public SubnetOverrideFragment sharedPublicIpAddressConfiguration(SubnetSharedPublicIpAddressConfigurationFragment sharedPublicIpAddressConfiguration) {
    this.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
    return this;
  }

  /**
   * Get sharedPublicIpAddressConfiguration
   * @return sharedPublicIpAddressConfiguration
   */
  @javax.annotation.Nullable
  public SubnetSharedPublicIpAddressConfigurationFragment getSharedPublicIpAddressConfiguration() {
    return sharedPublicIpAddressConfiguration;
  }

  public void setSharedPublicIpAddressConfiguration(SubnetSharedPublicIpAddressConfigurationFragment sharedPublicIpAddressConfiguration) {
    this.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
  }


  public SubnetOverrideFragment useInVmCreationPermission(UseInVmCreationPermissionEnum useInVmCreationPermission) {
    this.useInVmCreationPermission = useInVmCreationPermission;
    return this;
  }

  /**
   * Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
   * @return useInVmCreationPermission
   */
  @javax.annotation.Nullable
  public UseInVmCreationPermissionEnum getUseInVmCreationPermission() {
    return useInVmCreationPermission;
  }

  public void setUseInVmCreationPermission(UseInVmCreationPermissionEnum useInVmCreationPermission) {
    this.useInVmCreationPermission = useInVmCreationPermission;
  }


  public SubnetOverrideFragment usePublicIpAddressPermission(UsePublicIpAddressPermissionEnum usePublicIpAddressPermission) {
    this.usePublicIpAddressPermission = usePublicIpAddressPermission;
    return this;
  }

  /**
   * Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
   * @return usePublicIpAddressPermission
   */
  @javax.annotation.Nullable
  public UsePublicIpAddressPermissionEnum getUsePublicIpAddressPermission() {
    return usePublicIpAddressPermission;
  }

  public void setUsePublicIpAddressPermission(UsePublicIpAddressPermissionEnum usePublicIpAddressPermission) {
    this.usePublicIpAddressPermission = usePublicIpAddressPermission;
  }


  public SubnetOverrideFragment virtualNetworkPoolName(String virtualNetworkPoolName) {
    this.virtualNetworkPoolName = virtualNetworkPoolName;
    return this;
  }

  /**
   * The virtual network pool associated with this subnet.
   * @return virtualNetworkPoolName
   */
  @javax.annotation.Nullable
  public String getVirtualNetworkPoolName() {
    return virtualNetworkPoolName;
  }

  public void setVirtualNetworkPoolName(String virtualNetworkPoolName) {
    this.virtualNetworkPoolName = virtualNetworkPoolName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubnetOverrideFragment subnetOverrideFragment = (SubnetOverrideFragment) o;
    return Objects.equals(this.labSubnetName, subnetOverrideFragment.labSubnetName) &&
        Objects.equals(this.resourceId, subnetOverrideFragment.resourceId) &&
        Objects.equals(this.sharedPublicIpAddressConfiguration, subnetOverrideFragment.sharedPublicIpAddressConfiguration) &&
        Objects.equals(this.useInVmCreationPermission, subnetOverrideFragment.useInVmCreationPermission) &&
        Objects.equals(this.usePublicIpAddressPermission, subnetOverrideFragment.usePublicIpAddressPermission) &&
        Objects.equals(this.virtualNetworkPoolName, subnetOverrideFragment.virtualNetworkPoolName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labSubnetName, resourceId, sharedPublicIpAddressConfiguration, useInVmCreationPermission, usePublicIpAddressPermission, virtualNetworkPoolName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubnetOverrideFragment {\n");
    sb.append("    labSubnetName: ").append(toIndentedString(labSubnetName)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    sharedPublicIpAddressConfiguration: ").append(toIndentedString(sharedPublicIpAddressConfiguration)).append("\n");
    sb.append("    useInVmCreationPermission: ").append(toIndentedString(useInVmCreationPermission)).append("\n");
    sb.append("    usePublicIpAddressPermission: ").append(toIndentedString(usePublicIpAddressPermission)).append("\n");
    sb.append("    virtualNetworkPoolName: ").append(toIndentedString(virtualNetworkPoolName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("labSubnetName");
    openapiFields.add("resourceId");
    openapiFields.add("sharedPublicIpAddressConfiguration");
    openapiFields.add("useInVmCreationPermission");
    openapiFields.add("usePublicIpAddressPermission");
    openapiFields.add("virtualNetworkPoolName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubnetOverrideFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubnetOverrideFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubnetOverrideFragment is not found in the empty JSON string", SubnetOverrideFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubnetOverrideFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubnetOverrideFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("labSubnetName") != null && !jsonObj.get("labSubnetName").isJsonNull()) && !jsonObj.get("labSubnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labSubnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labSubnetName").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      // validate the optional field `sharedPublicIpAddressConfiguration`
      if (jsonObj.get("sharedPublicIpAddressConfiguration") != null && !jsonObj.get("sharedPublicIpAddressConfiguration").isJsonNull()) {
        SubnetSharedPublicIpAddressConfigurationFragment.validateJsonElement(jsonObj.get("sharedPublicIpAddressConfiguration"));
      }
      if ((jsonObj.get("useInVmCreationPermission") != null && !jsonObj.get("useInVmCreationPermission").isJsonNull()) && !jsonObj.get("useInVmCreationPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `useInVmCreationPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("useInVmCreationPermission").toString()));
      }
      // validate the optional field `useInVmCreationPermission`
      if (jsonObj.get("useInVmCreationPermission") != null && !jsonObj.get("useInVmCreationPermission").isJsonNull()) {
        UseInVmCreationPermissionEnum.validateJsonElement(jsonObj.get("useInVmCreationPermission"));
      }
      if ((jsonObj.get("usePublicIpAddressPermission") != null && !jsonObj.get("usePublicIpAddressPermission").isJsonNull()) && !jsonObj.get("usePublicIpAddressPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usePublicIpAddressPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usePublicIpAddressPermission").toString()));
      }
      // validate the optional field `usePublicIpAddressPermission`
      if (jsonObj.get("usePublicIpAddressPermission") != null && !jsonObj.get("usePublicIpAddressPermission").isJsonNull()) {
        UsePublicIpAddressPermissionEnum.validateJsonElement(jsonObj.get("usePublicIpAddressPermission"));
      }
      if ((jsonObj.get("virtualNetworkPoolName") != null && !jsonObj.get("virtualNetworkPoolName").isJsonNull()) && !jsonObj.get("virtualNetworkPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNetworkPoolName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubnetOverrideFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubnetOverrideFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubnetOverrideFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubnetOverrideFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<SubnetOverrideFragment>() {
           @Override
           public void write(JsonWriter out, SubnetOverrideFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubnetOverrideFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubnetOverrideFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubnetOverrideFragment
   * @throws IOException if the JSON string is invalid with respect to SubnetOverrideFragment
   */
  public static SubnetOverrideFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubnetOverrideFragment.class);
  }

  /**
   * Convert an instance of SubnetOverrideFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

