/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a Policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyPropertiesFragment {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
   */
  @JsonAdapter(EvaluatorTypeEnum.Adapter.class)
  public enum EvaluatorTypeEnum {
    ALLOWED_VALUES_POLICY("AllowedValuesPolicy"),
    
    MAX_VALUE_POLICY("MaxValuePolicy");

    private String value;

    EvaluatorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluatorTypeEnum fromValue(String value) {
      for (EvaluatorTypeEnum b : EvaluatorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluatorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluatorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluatorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluatorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluatorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATOR_TYPE = "evaluatorType";
  @SerializedName(SERIALIZED_NAME_EVALUATOR_TYPE)
  private EvaluatorTypeEnum evaluatorType;

  public static final String SERIALIZED_NAME_FACT_DATA = "factData";
  @SerializedName(SERIALIZED_NAME_FACT_DATA)
  private String factData;

  /**
   * The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
   */
  @JsonAdapter(FactNameEnum.Adapter.class)
  public enum FactNameEnum {
    USER_OWNED_LAB_VM_COUNT("UserOwnedLabVmCount"),
    
    USER_OWNED_LAB_PREMIUM_VM_COUNT("UserOwnedLabPremiumVmCount"),
    
    LAB_VM_COUNT("LabVmCount"),
    
    LAB_PREMIUM_VM_COUNT("LabPremiumVmCount"),
    
    LAB_VM_SIZE("LabVmSize"),
    
    GALLERY_IMAGE("GalleryImage"),
    
    USER_OWNED_LAB_VM_COUNT_IN_SUBNET("UserOwnedLabVmCountInSubnet"),
    
    LAB_TARGET_COST("LabTargetCost");

    private String value;

    FactNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FactNameEnum fromValue(String value) {
      for (FactNameEnum b : FactNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FactNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FactNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FactNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FactNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FactNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FACT_NAME = "factName";
  @SerializedName(SERIALIZED_NAME_FACT_NAME)
  private FactNameEnum factName;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * The status of the policy.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private String threshold;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public PolicyPropertiesFragment() {
  }

  public PolicyPropertiesFragment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the policy.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PolicyPropertiesFragment evaluatorType(EvaluatorTypeEnum evaluatorType) {
    this.evaluatorType = evaluatorType;
    return this;
  }

  /**
   * The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
   * @return evaluatorType
   */
  @javax.annotation.Nullable
  public EvaluatorTypeEnum getEvaluatorType() {
    return evaluatorType;
  }

  public void setEvaluatorType(EvaluatorTypeEnum evaluatorType) {
    this.evaluatorType = evaluatorType;
  }


  public PolicyPropertiesFragment factData(String factData) {
    this.factData = factData;
    return this;
  }

  /**
   * The fact data of the policy.
   * @return factData
   */
  @javax.annotation.Nullable
  public String getFactData() {
    return factData;
  }

  public void setFactData(String factData) {
    this.factData = factData;
  }


  public PolicyPropertiesFragment factName(FactNameEnum factName) {
    this.factName = factName;
    return this;
  }

  /**
   * The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
   * @return factName
   */
  @javax.annotation.Nullable
  public FactNameEnum getFactName() {
    return factName;
  }

  public void setFactName(FactNameEnum factName) {
    this.factName = factName;
  }


  public PolicyPropertiesFragment provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public PolicyPropertiesFragment status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the policy.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PolicyPropertiesFragment threshold(String threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
   * @return threshold
   */
  @javax.annotation.Nullable
  public String getThreshold() {
    return threshold;
  }

  public void setThreshold(String threshold) {
    this.threshold = threshold;
  }


  public PolicyPropertiesFragment uniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * The unique immutable identifier of a resource (Guid).
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyPropertiesFragment policyPropertiesFragment = (PolicyPropertiesFragment) o;
    return Objects.equals(this.description, policyPropertiesFragment.description) &&
        Objects.equals(this.evaluatorType, policyPropertiesFragment.evaluatorType) &&
        Objects.equals(this.factData, policyPropertiesFragment.factData) &&
        Objects.equals(this.factName, policyPropertiesFragment.factName) &&
        Objects.equals(this.provisioningState, policyPropertiesFragment.provisioningState) &&
        Objects.equals(this.status, policyPropertiesFragment.status) &&
        Objects.equals(this.threshold, policyPropertiesFragment.threshold) &&
        Objects.equals(this.uniqueIdentifier, policyPropertiesFragment.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, evaluatorType, factData, factName, provisioningState, status, threshold, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyPropertiesFragment {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    evaluatorType: ").append(toIndentedString(evaluatorType)).append("\n");
    sb.append("    factData: ").append(toIndentedString(factData)).append("\n");
    sb.append("    factName: ").append(toIndentedString(factName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("evaluatorType");
    openapiFields.add("factData");
    openapiFields.add("factName");
    openapiFields.add("provisioningState");
    openapiFields.add("status");
    openapiFields.add("threshold");
    openapiFields.add("uniqueIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyPropertiesFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyPropertiesFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyPropertiesFragment is not found in the empty JSON string", PolicyPropertiesFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyPropertiesFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyPropertiesFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("evaluatorType") != null && !jsonObj.get("evaluatorType").isJsonNull()) && !jsonObj.get("evaluatorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluatorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluatorType").toString()));
      }
      // validate the optional field `evaluatorType`
      if (jsonObj.get("evaluatorType") != null && !jsonObj.get("evaluatorType").isJsonNull()) {
        EvaluatorTypeEnum.validateJsonElement(jsonObj.get("evaluatorType"));
      }
      if ((jsonObj.get("factData") != null && !jsonObj.get("factData").isJsonNull()) && !jsonObj.get("factData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factData").toString()));
      }
      if ((jsonObj.get("factName") != null && !jsonObj.get("factName").isJsonNull()) && !jsonObj.get("factName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factName").toString()));
      }
      // validate the optional field `factName`
      if (jsonObj.get("factName") != null && !jsonObj.get("factName").isJsonNull()) {
        FactNameEnum.validateJsonElement(jsonObj.get("factName"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("threshold") != null && !jsonObj.get("threshold").isJsonNull()) && !jsonObj.get("threshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threshold").toString()));
      }
      if ((jsonObj.get("uniqueIdentifier") != null && !jsonObj.get("uniqueIdentifier").isJsonNull()) && !jsonObj.get("uniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyPropertiesFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyPropertiesFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyPropertiesFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyPropertiesFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyPropertiesFragment>() {
           @Override
           public void write(JsonWriter out, PolicyPropertiesFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyPropertiesFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyPropertiesFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyPropertiesFragment
   * @throws IOException if the JSON string is invalid with respect to PolicyPropertiesFragment
   */
  public static PolicyPropertiesFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyPropertiesFragment.class);
  }

  /**
   * Convert an instance of PolicyPropertiesFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

