/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArtifactParameterProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an artifact.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArtifactInstallProperties {
  public static final String SERIALIZED_NAME_ARTIFACT_ID = "artifactId";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_ID)
  private String artifactId;

  public static final String SERIALIZED_NAME_DEPLOYMENT_STATUS_MESSAGE = "deploymentStatusMessage";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_STATUS_MESSAGE)
  private String deploymentStatusMessage;

  public static final String SERIALIZED_NAME_INSTALL_TIME = "installTime";
  @SerializedName(SERIALIZED_NAME_INSTALL_TIME)
  private OffsetDateTime installTime;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<ArtifactParameterProperties> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_VM_EXTENSION_STATUS_MESSAGE = "vmExtensionStatusMessage";
  @SerializedName(SERIALIZED_NAME_VM_EXTENSION_STATUS_MESSAGE)
  private String vmExtensionStatusMessage;

  public ArtifactInstallProperties() {
  }

  public ArtifactInstallProperties artifactId(String artifactId) {
    this.artifactId = artifactId;
    return this;
  }

  /**
   * The artifact&#39;s identifier.
   * @return artifactId
   */
  @javax.annotation.Nullable
  public String getArtifactId() {
    return artifactId;
  }

  public void setArtifactId(String artifactId) {
    this.artifactId = artifactId;
  }


  public ArtifactInstallProperties deploymentStatusMessage(String deploymentStatusMessage) {
    this.deploymentStatusMessage = deploymentStatusMessage;
    return this;
  }

  /**
   * The status message from the deployment.
   * @return deploymentStatusMessage
   */
  @javax.annotation.Nullable
  public String getDeploymentStatusMessage() {
    return deploymentStatusMessage;
  }

  public void setDeploymentStatusMessage(String deploymentStatusMessage) {
    this.deploymentStatusMessage = deploymentStatusMessage;
  }


  public ArtifactInstallProperties installTime(OffsetDateTime installTime) {
    this.installTime = installTime;
    return this;
  }

  /**
   * The time that the artifact starts to install on the virtual machine.
   * @return installTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInstallTime() {
    return installTime;
  }

  public void setInstallTime(OffsetDateTime installTime) {
    this.installTime = installTime;
  }


  public ArtifactInstallProperties parameters(List<ArtifactParameterProperties> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ArtifactInstallProperties addParametersItem(ArtifactParameterProperties parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * The parameters of the artifact.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<ArtifactParameterProperties> getParameters() {
    return parameters;
  }

  public void setParameters(List<ArtifactParameterProperties> parameters) {
    this.parameters = parameters;
  }


  public ArtifactInstallProperties status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the artifact.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ArtifactInstallProperties vmExtensionStatusMessage(String vmExtensionStatusMessage) {
    this.vmExtensionStatusMessage = vmExtensionStatusMessage;
    return this;
  }

  /**
   * The status message from the virtual machine extension.
   * @return vmExtensionStatusMessage
   */
  @javax.annotation.Nullable
  public String getVmExtensionStatusMessage() {
    return vmExtensionStatusMessage;
  }

  public void setVmExtensionStatusMessage(String vmExtensionStatusMessage) {
    this.vmExtensionStatusMessage = vmExtensionStatusMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtifactInstallProperties artifactInstallProperties = (ArtifactInstallProperties) o;
    return Objects.equals(this.artifactId, artifactInstallProperties.artifactId) &&
        Objects.equals(this.deploymentStatusMessage, artifactInstallProperties.deploymentStatusMessage) &&
        Objects.equals(this.installTime, artifactInstallProperties.installTime) &&
        Objects.equals(this.parameters, artifactInstallProperties.parameters) &&
        Objects.equals(this.status, artifactInstallProperties.status) &&
        Objects.equals(this.vmExtensionStatusMessage, artifactInstallProperties.vmExtensionStatusMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactId, deploymentStatusMessage, installTime, parameters, status, vmExtensionStatusMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtifactInstallProperties {\n");
    sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
    sb.append("    deploymentStatusMessage: ").append(toIndentedString(deploymentStatusMessage)).append("\n");
    sb.append("    installTime: ").append(toIndentedString(installTime)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vmExtensionStatusMessage: ").append(toIndentedString(vmExtensionStatusMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactId");
    openapiFields.add("deploymentStatusMessage");
    openapiFields.add("installTime");
    openapiFields.add("parameters");
    openapiFields.add("status");
    openapiFields.add("vmExtensionStatusMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtifactInstallProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtifactInstallProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtifactInstallProperties is not found in the empty JSON string", ArtifactInstallProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtifactInstallProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtifactInstallProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("artifactId") != null && !jsonObj.get("artifactId").isJsonNull()) && !jsonObj.get("artifactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactId").toString()));
      }
      if ((jsonObj.get("deploymentStatusMessage") != null && !jsonObj.get("deploymentStatusMessage").isJsonNull()) && !jsonObj.get("deploymentStatusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentStatusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentStatusMessage").toString()));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            ArtifactParameterProperties.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("vmExtensionStatusMessage") != null && !jsonObj.get("vmExtensionStatusMessage").isJsonNull()) && !jsonObj.get("vmExtensionStatusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmExtensionStatusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmExtensionStatusMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtifactInstallProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtifactInstallProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtifactInstallProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtifactInstallProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtifactInstallProperties>() {
           @Override
           public void write(JsonWriter out, ArtifactInstallProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtifactInstallProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtifactInstallProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtifactInstallProperties
   * @throws IOException if the JSON string is invalid with respect to ArtifactInstallProperties
   */
  public static ArtifactInstallProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtifactInstallProperties.class);
  }

  /**
   * Convert an instance of ArtifactInstallProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

