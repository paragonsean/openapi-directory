/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The contents of a shutdown notification. Webhooks can use this type to deserialize the request body when they get notified of an imminent shutdown.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShutdownNotificationContent {
  public static final String SERIALIZED_NAME_DELAY_URL120 = "delayUrl120";
  @SerializedName(SERIALIZED_NAME_DELAY_URL120)
  private String delayUrl120;

  public static final String SERIALIZED_NAME_DELAY_URL60 = "delayUrl60";
  @SerializedName(SERIALIZED_NAME_DELAY_URL60)
  private String delayUrl60;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_LAB_NAME = "labName";
  @SerializedName(SERIALIZED_NAME_LAB_NAME)
  private String labName;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_SKIP_URL = "skipUrl";
  @SerializedName(SERIALIZED_NAME_SKIP_URL)
  private String skipUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_VM_NAME = "vmName";
  @SerializedName(SERIALIZED_NAME_VM_NAME)
  private String vmName;

  public ShutdownNotificationContent() {
  }

  public ShutdownNotificationContent delayUrl120(String delayUrl120) {
    this.delayUrl120 = delayUrl120;
    return this;
  }

  /**
   * The URL to delay shutdown by 2 hours.
   * @return delayUrl120
   */
  @javax.annotation.Nullable
  public String getDelayUrl120() {
    return delayUrl120;
  }

  public void setDelayUrl120(String delayUrl120) {
    this.delayUrl120 = delayUrl120;
  }


  public ShutdownNotificationContent delayUrl60(String delayUrl60) {
    this.delayUrl60 = delayUrl60;
    return this;
  }

  /**
   * The URL to delay shutdown by 60 minutes.
   * @return delayUrl60
   */
  @javax.annotation.Nullable
  public String getDelayUrl60() {
    return delayUrl60;
  }

  public void setDelayUrl60(String delayUrl60) {
    this.delayUrl60 = delayUrl60;
  }


  public ShutdownNotificationContent eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The event for which a notification will be sent.
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public ShutdownNotificationContent guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * The GUID for the virtual machine to be shut down.
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public ShutdownNotificationContent labName(String labName) {
    this.labName = labName;
    return this;
  }

  /**
   * The lab for the schedule.
   * @return labName
   */
  @javax.annotation.Nullable
  public String getLabName() {
    return labName;
  }

  public void setLabName(String labName) {
    this.labName = labName;
  }


  public ShutdownNotificationContent owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * The owner of the virtual machine.
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public ShutdownNotificationContent resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * The resource group name for the schedule.
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public ShutdownNotificationContent skipUrl(String skipUrl) {
    this.skipUrl = skipUrl;
    return this;
  }

  /**
   * The URL to skip auto-shutdown.
   * @return skipUrl
   */
  @javax.annotation.Nullable
  public String getSkipUrl() {
    return skipUrl;
  }

  public void setSkipUrl(String skipUrl) {
    this.skipUrl = skipUrl;
  }


  public ShutdownNotificationContent subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The subscription ID for the schedule.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public ShutdownNotificationContent text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text for the notification.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public ShutdownNotificationContent vmName(String vmName) {
    this.vmName = vmName;
    return this;
  }

  /**
   * The virtual machine to be shut down.
   * @return vmName
   */
  @javax.annotation.Nullable
  public String getVmName() {
    return vmName;
  }

  public void setVmName(String vmName) {
    this.vmName = vmName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShutdownNotificationContent shutdownNotificationContent = (ShutdownNotificationContent) o;
    return Objects.equals(this.delayUrl120, shutdownNotificationContent.delayUrl120) &&
        Objects.equals(this.delayUrl60, shutdownNotificationContent.delayUrl60) &&
        Objects.equals(this.eventType, shutdownNotificationContent.eventType) &&
        Objects.equals(this.guid, shutdownNotificationContent.guid) &&
        Objects.equals(this.labName, shutdownNotificationContent.labName) &&
        Objects.equals(this.owner, shutdownNotificationContent.owner) &&
        Objects.equals(this.resourceGroupName, shutdownNotificationContent.resourceGroupName) &&
        Objects.equals(this.skipUrl, shutdownNotificationContent.skipUrl) &&
        Objects.equals(this.subscriptionId, shutdownNotificationContent.subscriptionId) &&
        Objects.equals(this.text, shutdownNotificationContent.text) &&
        Objects.equals(this.vmName, shutdownNotificationContent.vmName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delayUrl120, delayUrl60, eventType, guid, labName, owner, resourceGroupName, skipUrl, subscriptionId, text, vmName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShutdownNotificationContent {\n");
    sb.append("    delayUrl120: ").append(toIndentedString(delayUrl120)).append("\n");
    sb.append("    delayUrl60: ").append(toIndentedString(delayUrl60)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    labName: ").append(toIndentedString(labName)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    skipUrl: ").append(toIndentedString(skipUrl)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    vmName: ").append(toIndentedString(vmName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delayUrl120");
    openapiFields.add("delayUrl60");
    openapiFields.add("eventType");
    openapiFields.add("guid");
    openapiFields.add("labName");
    openapiFields.add("owner");
    openapiFields.add("resourceGroupName");
    openapiFields.add("skipUrl");
    openapiFields.add("subscriptionId");
    openapiFields.add("text");
    openapiFields.add("vmName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShutdownNotificationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShutdownNotificationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShutdownNotificationContent is not found in the empty JSON string", ShutdownNotificationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShutdownNotificationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShutdownNotificationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delayUrl120") != null && !jsonObj.get("delayUrl120").isJsonNull()) && !jsonObj.get("delayUrl120").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delayUrl120` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delayUrl120").toString()));
      }
      if ((jsonObj.get("delayUrl60") != null && !jsonObj.get("delayUrl60").isJsonNull()) && !jsonObj.get("delayUrl60").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delayUrl60` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delayUrl60").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("labName") != null && !jsonObj.get("labName").isJsonNull()) && !jsonObj.get("labName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labName").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("resourceGroupName") != null && !jsonObj.get("resourceGroupName").isJsonNull()) && !jsonObj.get("resourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupName").toString()));
      }
      if ((jsonObj.get("skipUrl") != null && !jsonObj.get("skipUrl").isJsonNull()) && !jsonObj.get("skipUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skipUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skipUrl").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("vmName") != null && !jsonObj.get("vmName").isJsonNull()) && !jsonObj.get("vmName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShutdownNotificationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShutdownNotificationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShutdownNotificationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShutdownNotificationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<ShutdownNotificationContent>() {
           @Override
           public void write(JsonWriter out, ShutdownNotificationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShutdownNotificationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShutdownNotificationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShutdownNotificationContent
   * @throws IOException if the JSON string is invalid with respect to ShutdownNotificationContent
   */
  public static ShutdownNotificationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShutdownNotificationContent.class);
  }

  /**
   * Convert an instance of ShutdownNotificationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

