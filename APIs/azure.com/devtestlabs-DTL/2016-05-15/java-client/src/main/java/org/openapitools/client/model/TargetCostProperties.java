/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CostThresholdProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a cost target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetCostProperties {
  public static final String SERIALIZED_NAME_COST_THRESHOLDS = "costThresholds";
  @SerializedName(SERIALIZED_NAME_COST_THRESHOLDS)
  private List<CostThresholdProperties> costThresholds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CYCLE_END_DATE_TIME = "cycleEndDateTime";
  @SerializedName(SERIALIZED_NAME_CYCLE_END_DATE_TIME)
  private OffsetDateTime cycleEndDateTime;

  public static final String SERIALIZED_NAME_CYCLE_START_DATE_TIME = "cycleStartDateTime";
  @SerializedName(SERIALIZED_NAME_CYCLE_START_DATE_TIME)
  private OffsetDateTime cycleStartDateTime;

  /**
   * Reporting cycle type.
   */
  @JsonAdapter(CycleTypeEnum.Adapter.class)
  public enum CycleTypeEnum {
    CALENDAR_MONTH("CalendarMonth"),
    
    CUSTOM("Custom");

    private String value;

    CycleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CycleTypeEnum fromValue(String value) {
      for (CycleTypeEnum b : CycleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CycleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CycleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CycleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CycleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CycleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CYCLE_TYPE = "cycleType";
  @SerializedName(SERIALIZED_NAME_CYCLE_TYPE)
  private CycleTypeEnum cycleType;

  /**
   * Target cost status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private Integer target;

  public TargetCostProperties() {
  }

  public TargetCostProperties costThresholds(List<CostThresholdProperties> costThresholds) {
    this.costThresholds = costThresholds;
    return this;
  }

  public TargetCostProperties addCostThresholdsItem(CostThresholdProperties costThresholdsItem) {
    if (this.costThresholds == null) {
      this.costThresholds = new ArrayList<>();
    }
    this.costThresholds.add(costThresholdsItem);
    return this;
  }

  /**
   * Cost thresholds.
   * @return costThresholds
   */
  @javax.annotation.Nullable
  public List<CostThresholdProperties> getCostThresholds() {
    return costThresholds;
  }

  public void setCostThresholds(List<CostThresholdProperties> costThresholds) {
    this.costThresholds = costThresholds;
  }


  public TargetCostProperties cycleEndDateTime(OffsetDateTime cycleEndDateTime) {
    this.cycleEndDateTime = cycleEndDateTime;
    return this;
  }

  /**
   * Reporting cycle end date.
   * @return cycleEndDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCycleEndDateTime() {
    return cycleEndDateTime;
  }

  public void setCycleEndDateTime(OffsetDateTime cycleEndDateTime) {
    this.cycleEndDateTime = cycleEndDateTime;
  }


  public TargetCostProperties cycleStartDateTime(OffsetDateTime cycleStartDateTime) {
    this.cycleStartDateTime = cycleStartDateTime;
    return this;
  }

  /**
   * Reporting cycle start date.
   * @return cycleStartDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCycleStartDateTime() {
    return cycleStartDateTime;
  }

  public void setCycleStartDateTime(OffsetDateTime cycleStartDateTime) {
    this.cycleStartDateTime = cycleStartDateTime;
  }


  public TargetCostProperties cycleType(CycleTypeEnum cycleType) {
    this.cycleType = cycleType;
    return this;
  }

  /**
   * Reporting cycle type.
   * @return cycleType
   */
  @javax.annotation.Nullable
  public CycleTypeEnum getCycleType() {
    return cycleType;
  }

  public void setCycleType(CycleTypeEnum cycleType) {
    this.cycleType = cycleType;
  }


  public TargetCostProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Target cost status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TargetCostProperties target(Integer target) {
    this.target = target;
    return this;
  }

  /**
   * Lab target cost
   * @return target
   */
  @javax.annotation.Nullable
  public Integer getTarget() {
    return target;
  }

  public void setTarget(Integer target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetCostProperties targetCostProperties = (TargetCostProperties) o;
    return Objects.equals(this.costThresholds, targetCostProperties.costThresholds) &&
        Objects.equals(this.cycleEndDateTime, targetCostProperties.cycleEndDateTime) &&
        Objects.equals(this.cycleStartDateTime, targetCostProperties.cycleStartDateTime) &&
        Objects.equals(this.cycleType, targetCostProperties.cycleType) &&
        Objects.equals(this.status, targetCostProperties.status) &&
        Objects.equals(this.target, targetCostProperties.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costThresholds, cycleEndDateTime, cycleStartDateTime, cycleType, status, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetCostProperties {\n");
    sb.append("    costThresholds: ").append(toIndentedString(costThresholds)).append("\n");
    sb.append("    cycleEndDateTime: ").append(toIndentedString(cycleEndDateTime)).append("\n");
    sb.append("    cycleStartDateTime: ").append(toIndentedString(cycleStartDateTime)).append("\n");
    sb.append("    cycleType: ").append(toIndentedString(cycleType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costThresholds");
    openapiFields.add("cycleEndDateTime");
    openapiFields.add("cycleStartDateTime");
    openapiFields.add("cycleType");
    openapiFields.add("status");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetCostProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetCostProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetCostProperties is not found in the empty JSON string", TargetCostProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetCostProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetCostProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("costThresholds") != null && !jsonObj.get("costThresholds").isJsonNull()) {
        JsonArray jsonArraycostThresholds = jsonObj.getAsJsonArray("costThresholds");
        if (jsonArraycostThresholds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("costThresholds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `costThresholds` to be an array in the JSON string but got `%s`", jsonObj.get("costThresholds").toString()));
          }

          // validate the optional field `costThresholds` (array)
          for (int i = 0; i < jsonArraycostThresholds.size(); i++) {
            CostThresholdProperties.validateJsonElement(jsonArraycostThresholds.get(i));
          };
        }
      }
      if ((jsonObj.get("cycleType") != null && !jsonObj.get("cycleType").isJsonNull()) && !jsonObj.get("cycleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cycleType").toString()));
      }
      // validate the optional field `cycleType`
      if (jsonObj.get("cycleType") != null && !jsonObj.get("cycleType").isJsonNull()) {
        CycleTypeEnum.validateJsonElement(jsonObj.get("cycleType"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetCostProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetCostProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetCostProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetCostProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetCostProperties>() {
           @Override
           public void write(JsonWriter out, TargetCostProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetCostProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetCostProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetCostProperties
   * @throws IOException if the JSON string is invalid with respect to TargetCostProperties
   */
  public static TargetCostProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetCostProperties.class);
  }

  /**
   * Convert an instance of TargetCostProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

