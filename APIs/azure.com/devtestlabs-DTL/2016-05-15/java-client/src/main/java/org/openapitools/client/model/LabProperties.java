/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a lab.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabProperties {
  public static final String SERIALIZED_NAME_ARTIFACTS_STORAGE_ACCOUNT = "artifactsStorageAccount";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS_STORAGE_ACCOUNT)
  private String artifactsStorageAccount;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DEFAULT_PREMIUM_STORAGE_ACCOUNT = "defaultPremiumStorageAccount";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PREMIUM_STORAGE_ACCOUNT)
  private String defaultPremiumStorageAccount;

  public static final String SERIALIZED_NAME_DEFAULT_STORAGE_ACCOUNT = "defaultStorageAccount";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STORAGE_ACCOUNT)
  private String defaultStorageAccount;

  /**
   * Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
   */
  @JsonAdapter(LabStorageTypeEnum.Adapter.class)
  public enum LabStorageTypeEnum {
    STANDARD("Standard"),
    
    PREMIUM("Premium");

    private String value;

    LabStorageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabStorageTypeEnum fromValue(String value) {
      for (LabStorageTypeEnum b : LabStorageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabStorageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabStorageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabStorageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabStorageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabStorageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAB_STORAGE_TYPE = "labStorageType";
  @SerializedName(SERIALIZED_NAME_LAB_STORAGE_TYPE)
  private LabStorageTypeEnum labStorageType;

  public static final String SERIALIZED_NAME_PREMIUM_DATA_DISK_STORAGE_ACCOUNT = "premiumDataDiskStorageAccount";
  @SerializedName(SERIALIZED_NAME_PREMIUM_DATA_DISK_STORAGE_ACCOUNT)
  private String premiumDataDiskStorageAccount;

  /**
   * The setting to enable usage of premium data disks.  When its value is &#39;Enabled&#39;, creation of standard or premium data disks is allowed.  When its value is &#39;Disabled&#39;, only creation of standard data disks is allowed.
   */
  @JsonAdapter(PremiumDataDisksEnum.Adapter.class)
  public enum PremiumDataDisksEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    PremiumDataDisksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PremiumDataDisksEnum fromValue(String value) {
      for (PremiumDataDisksEnum b : PremiumDataDisksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PremiumDataDisksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PremiumDataDisksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PremiumDataDisksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PremiumDataDisksEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PremiumDataDisksEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREMIUM_DATA_DISKS = "premiumDataDisks";
  @SerializedName(SERIALIZED_NAME_PREMIUM_DATA_DISKS)
  private PremiumDataDisksEnum premiumDataDisks;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_VAULT_NAME = "vaultName";
  @SerializedName(SERIALIZED_NAME_VAULT_NAME)
  private String vaultName;

  public LabProperties() {
  }

  public LabProperties(
     String artifactsStorageAccount, 
     OffsetDateTime createdDate, 
     String defaultPremiumStorageAccount, 
     String defaultStorageAccount, 
     String premiumDataDiskStorageAccount, 
     String vaultName
  ) {
    this();
    this.artifactsStorageAccount = artifactsStorageAccount;
    this.createdDate = createdDate;
    this.defaultPremiumStorageAccount = defaultPremiumStorageAccount;
    this.defaultStorageAccount = defaultStorageAccount;
    this.premiumDataDiskStorageAccount = premiumDataDiskStorageAccount;
    this.vaultName = vaultName;
  }

  /**
   * The lab&#39;s artifact storage account.
   * @return artifactsStorageAccount
   */
  @javax.annotation.Nullable
  public String getArtifactsStorageAccount() {
    return artifactsStorageAccount;
  }



  /**
   * The creation date of the lab.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }



  /**
   * The lab&#39;s default premium storage account.
   * @return defaultPremiumStorageAccount
   */
  @javax.annotation.Nullable
  public String getDefaultPremiumStorageAccount() {
    return defaultPremiumStorageAccount;
  }



  /**
   * The lab&#39;s default storage account.
   * @return defaultStorageAccount
   */
  @javax.annotation.Nullable
  public String getDefaultStorageAccount() {
    return defaultStorageAccount;
  }



  public LabProperties labStorageType(LabStorageTypeEnum labStorageType) {
    this.labStorageType = labStorageType;
    return this;
  }

  /**
   * Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
   * @return labStorageType
   */
  @javax.annotation.Nullable
  public LabStorageTypeEnum getLabStorageType() {
    return labStorageType;
  }

  public void setLabStorageType(LabStorageTypeEnum labStorageType) {
    this.labStorageType = labStorageType;
  }


  /**
   * The lab&#39;s premium data disk storage account.
   * @return premiumDataDiskStorageAccount
   */
  @javax.annotation.Nullable
  public String getPremiumDataDiskStorageAccount() {
    return premiumDataDiskStorageAccount;
  }



  public LabProperties premiumDataDisks(PremiumDataDisksEnum premiumDataDisks) {
    this.premiumDataDisks = premiumDataDisks;
    return this;
  }

  /**
   * The setting to enable usage of premium data disks.  When its value is &#39;Enabled&#39;, creation of standard or premium data disks is allowed.  When its value is &#39;Disabled&#39;, only creation of standard data disks is allowed.
   * @return premiumDataDisks
   */
  @javax.annotation.Nullable
  public PremiumDataDisksEnum getPremiumDataDisks() {
    return premiumDataDisks;
  }

  public void setPremiumDataDisks(PremiumDataDisksEnum premiumDataDisks) {
    this.premiumDataDisks = premiumDataDisks;
  }


  public LabProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public LabProperties uniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * The unique immutable identifier of a resource (Guid).
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }


  /**
   * The lab&#39;s Key vault.
   * @return vaultName
   */
  @javax.annotation.Nullable
  public String getVaultName() {
    return vaultName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabProperties labProperties = (LabProperties) o;
    return Objects.equals(this.artifactsStorageAccount, labProperties.artifactsStorageAccount) &&
        Objects.equals(this.createdDate, labProperties.createdDate) &&
        Objects.equals(this.defaultPremiumStorageAccount, labProperties.defaultPremiumStorageAccount) &&
        Objects.equals(this.defaultStorageAccount, labProperties.defaultStorageAccount) &&
        Objects.equals(this.labStorageType, labProperties.labStorageType) &&
        Objects.equals(this.premiumDataDiskStorageAccount, labProperties.premiumDataDiskStorageAccount) &&
        Objects.equals(this.premiumDataDisks, labProperties.premiumDataDisks) &&
        Objects.equals(this.provisioningState, labProperties.provisioningState) &&
        Objects.equals(this.uniqueIdentifier, labProperties.uniqueIdentifier) &&
        Objects.equals(this.vaultName, labProperties.vaultName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactsStorageAccount, createdDate, defaultPremiumStorageAccount, defaultStorageAccount, labStorageType, premiumDataDiskStorageAccount, premiumDataDisks, provisioningState, uniqueIdentifier, vaultName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabProperties {\n");
    sb.append("    artifactsStorageAccount: ").append(toIndentedString(artifactsStorageAccount)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    defaultPremiumStorageAccount: ").append(toIndentedString(defaultPremiumStorageAccount)).append("\n");
    sb.append("    defaultStorageAccount: ").append(toIndentedString(defaultStorageAccount)).append("\n");
    sb.append("    labStorageType: ").append(toIndentedString(labStorageType)).append("\n");
    sb.append("    premiumDataDiskStorageAccount: ").append(toIndentedString(premiumDataDiskStorageAccount)).append("\n");
    sb.append("    premiumDataDisks: ").append(toIndentedString(premiumDataDisks)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    vaultName: ").append(toIndentedString(vaultName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactsStorageAccount");
    openapiFields.add("createdDate");
    openapiFields.add("defaultPremiumStorageAccount");
    openapiFields.add("defaultStorageAccount");
    openapiFields.add("labStorageType");
    openapiFields.add("premiumDataDiskStorageAccount");
    openapiFields.add("premiumDataDisks");
    openapiFields.add("provisioningState");
    openapiFields.add("uniqueIdentifier");
    openapiFields.add("vaultName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabProperties is not found in the empty JSON string", LabProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("artifactsStorageAccount") != null && !jsonObj.get("artifactsStorageAccount").isJsonNull()) && !jsonObj.get("artifactsStorageAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactsStorageAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactsStorageAccount").toString()));
      }
      if ((jsonObj.get("defaultPremiumStorageAccount") != null && !jsonObj.get("defaultPremiumStorageAccount").isJsonNull()) && !jsonObj.get("defaultPremiumStorageAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPremiumStorageAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPremiumStorageAccount").toString()));
      }
      if ((jsonObj.get("defaultStorageAccount") != null && !jsonObj.get("defaultStorageAccount").isJsonNull()) && !jsonObj.get("defaultStorageAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultStorageAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultStorageAccount").toString()));
      }
      if ((jsonObj.get("labStorageType") != null && !jsonObj.get("labStorageType").isJsonNull()) && !jsonObj.get("labStorageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labStorageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labStorageType").toString()));
      }
      // validate the optional field `labStorageType`
      if (jsonObj.get("labStorageType") != null && !jsonObj.get("labStorageType").isJsonNull()) {
        LabStorageTypeEnum.validateJsonElement(jsonObj.get("labStorageType"));
      }
      if ((jsonObj.get("premiumDataDiskStorageAccount") != null && !jsonObj.get("premiumDataDiskStorageAccount").isJsonNull()) && !jsonObj.get("premiumDataDiskStorageAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `premiumDataDiskStorageAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("premiumDataDiskStorageAccount").toString()));
      }
      if ((jsonObj.get("premiumDataDisks") != null && !jsonObj.get("premiumDataDisks").isJsonNull()) && !jsonObj.get("premiumDataDisks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `premiumDataDisks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("premiumDataDisks").toString()));
      }
      // validate the optional field `premiumDataDisks`
      if (jsonObj.get("premiumDataDisks") != null && !jsonObj.get("premiumDataDisks").isJsonNull()) {
        PremiumDataDisksEnum.validateJsonElement(jsonObj.get("premiumDataDisks"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("uniqueIdentifier") != null && !jsonObj.get("uniqueIdentifier").isJsonNull()) && !jsonObj.get("uniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIdentifier").toString()));
      }
      if ((jsonObj.get("vaultName") != null && !jsonObj.get("vaultName").isJsonNull()) && !jsonObj.get("vaultName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LabProperties>() {
           @Override
           public void write(JsonWriter out, LabProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabProperties
   * @throws IOException if the JSON string is invalid with respect to LabProperties
   */
  public static LabProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabProperties.class);
  }

  /**
   * Convert an instance of LabProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

