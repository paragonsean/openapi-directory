/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComputeDataDiskFragment;
import org.openapitools.client.model.ComputeVmInstanceViewStatusFragment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a virtual machine returned by the Microsoft.Compute API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComputeVmPropertiesFragment {
  public static final String SERIALIZED_NAME_DATA_DISK_IDS = "dataDiskIds";
  @SerializedName(SERIALIZED_NAME_DATA_DISK_IDS)
  private List<String> dataDiskIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_DISKS = "dataDisks";
  @SerializedName(SERIALIZED_NAME_DATA_DISKS)
  private List<ComputeDataDiskFragment> dataDisks = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE_ID = "networkInterfaceId";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE_ID)
  private String networkInterfaceId;

  public static final String SERIALIZED_NAME_OS_DISK_ID = "osDiskId";
  @SerializedName(SERIALIZED_NAME_OS_DISK_ID)
  private String osDiskId;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<ComputeVmInstanceViewStatusFragment> statuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_SIZE = "vmSize";
  @SerializedName(SERIALIZED_NAME_VM_SIZE)
  private String vmSize;

  public ComputeVmPropertiesFragment() {
  }

  public ComputeVmPropertiesFragment dataDiskIds(List<String> dataDiskIds) {
    this.dataDiskIds = dataDiskIds;
    return this;
  }

  public ComputeVmPropertiesFragment addDataDiskIdsItem(String dataDiskIdsItem) {
    if (this.dataDiskIds == null) {
      this.dataDiskIds = new ArrayList<>();
    }
    this.dataDiskIds.add(dataDiskIdsItem);
    return this;
  }

  /**
   * Gets data disks blob uri for the virtual machine.
   * @return dataDiskIds
   */
  @javax.annotation.Nullable
  public List<String> getDataDiskIds() {
    return dataDiskIds;
  }

  public void setDataDiskIds(List<String> dataDiskIds) {
    this.dataDiskIds = dataDiskIds;
  }


  public ComputeVmPropertiesFragment dataDisks(List<ComputeDataDiskFragment> dataDisks) {
    this.dataDisks = dataDisks;
    return this;
  }

  public ComputeVmPropertiesFragment addDataDisksItem(ComputeDataDiskFragment dataDisksItem) {
    if (this.dataDisks == null) {
      this.dataDisks = new ArrayList<>();
    }
    this.dataDisks.add(dataDisksItem);
    return this;
  }

  /**
   * Gets all data disks attached to the virtual machine.
   * @return dataDisks
   */
  @javax.annotation.Nullable
  public List<ComputeDataDiskFragment> getDataDisks() {
    return dataDisks;
  }

  public void setDataDisks(List<ComputeDataDiskFragment> dataDisks) {
    this.dataDisks = dataDisks;
  }


  public ComputeVmPropertiesFragment networkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
    return this;
  }

  /**
   * Gets the network interface ID of the virtual machine.
   * @return networkInterfaceId
   */
  @javax.annotation.Nullable
  public String getNetworkInterfaceId() {
    return networkInterfaceId;
  }

  public void setNetworkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
  }


  public ComputeVmPropertiesFragment osDiskId(String osDiskId) {
    this.osDiskId = osDiskId;
    return this;
  }

  /**
   * Gets OS disk blob uri for the virtual machine.
   * @return osDiskId
   */
  @javax.annotation.Nullable
  public String getOsDiskId() {
    return osDiskId;
  }

  public void setOsDiskId(String osDiskId) {
    this.osDiskId = osDiskId;
  }


  public ComputeVmPropertiesFragment osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * Gets the OS type of the virtual machine.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public ComputeVmPropertiesFragment statuses(List<ComputeVmInstanceViewStatusFragment> statuses) {
    this.statuses = statuses;
    return this;
  }

  public ComputeVmPropertiesFragment addStatusesItem(ComputeVmInstanceViewStatusFragment statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * Gets the statuses of the virtual machine.
   * @return statuses
   */
  @javax.annotation.Nullable
  public List<ComputeVmInstanceViewStatusFragment> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<ComputeVmInstanceViewStatusFragment> statuses) {
    this.statuses = statuses;
  }


  public ComputeVmPropertiesFragment vmSize(String vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  /**
   * Gets the size of the virtual machine.
   * @return vmSize
   */
  @javax.annotation.Nullable
  public String getVmSize() {
    return vmSize;
  }

  public void setVmSize(String vmSize) {
    this.vmSize = vmSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComputeVmPropertiesFragment computeVmPropertiesFragment = (ComputeVmPropertiesFragment) o;
    return Objects.equals(this.dataDiskIds, computeVmPropertiesFragment.dataDiskIds) &&
        Objects.equals(this.dataDisks, computeVmPropertiesFragment.dataDisks) &&
        Objects.equals(this.networkInterfaceId, computeVmPropertiesFragment.networkInterfaceId) &&
        Objects.equals(this.osDiskId, computeVmPropertiesFragment.osDiskId) &&
        Objects.equals(this.osType, computeVmPropertiesFragment.osType) &&
        Objects.equals(this.statuses, computeVmPropertiesFragment.statuses) &&
        Objects.equals(this.vmSize, computeVmPropertiesFragment.vmSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataDiskIds, dataDisks, networkInterfaceId, osDiskId, osType, statuses, vmSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComputeVmPropertiesFragment {\n");
    sb.append("    dataDiskIds: ").append(toIndentedString(dataDiskIds)).append("\n");
    sb.append("    dataDisks: ").append(toIndentedString(dataDisks)).append("\n");
    sb.append("    networkInterfaceId: ").append(toIndentedString(networkInterfaceId)).append("\n");
    sb.append("    osDiskId: ").append(toIndentedString(osDiskId)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    vmSize: ").append(toIndentedString(vmSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataDiskIds");
    openapiFields.add("dataDisks");
    openapiFields.add("networkInterfaceId");
    openapiFields.add("osDiskId");
    openapiFields.add("osType");
    openapiFields.add("statuses");
    openapiFields.add("vmSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComputeVmPropertiesFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComputeVmPropertiesFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComputeVmPropertiesFragment is not found in the empty JSON string", ComputeVmPropertiesFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComputeVmPropertiesFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComputeVmPropertiesFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dataDiskIds") != null && !jsonObj.get("dataDiskIds").isJsonNull() && !jsonObj.get("dataDiskIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataDiskIds` to be an array in the JSON string but got `%s`", jsonObj.get("dataDiskIds").toString()));
      }
      if (jsonObj.get("dataDisks") != null && !jsonObj.get("dataDisks").isJsonNull()) {
        JsonArray jsonArraydataDisks = jsonObj.getAsJsonArray("dataDisks");
        if (jsonArraydataDisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataDisks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataDisks` to be an array in the JSON string but got `%s`", jsonObj.get("dataDisks").toString()));
          }

          // validate the optional field `dataDisks` (array)
          for (int i = 0; i < jsonArraydataDisks.size(); i++) {
            ComputeDataDiskFragment.validateJsonElement(jsonArraydataDisks.get(i));
          };
        }
      }
      if ((jsonObj.get("networkInterfaceId") != null && !jsonObj.get("networkInterfaceId").isJsonNull()) && !jsonObj.get("networkInterfaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkInterfaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkInterfaceId").toString()));
      }
      if ((jsonObj.get("osDiskId") != null && !jsonObj.get("osDiskId").isJsonNull()) && !jsonObj.get("osDiskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osDiskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osDiskId").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) {
        JsonArray jsonArraystatuses = jsonObj.getAsJsonArray("statuses");
        if (jsonArraystatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
          }

          // validate the optional field `statuses` (array)
          for (int i = 0; i < jsonArraystatuses.size(); i++) {
            ComputeVmInstanceViewStatusFragment.validateJsonElement(jsonArraystatuses.get(i));
          };
        }
      }
      if ((jsonObj.get("vmSize") != null && !jsonObj.get("vmSize").isJsonNull()) && !jsonObj.get("vmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComputeVmPropertiesFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComputeVmPropertiesFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComputeVmPropertiesFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComputeVmPropertiesFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<ComputeVmPropertiesFragment>() {
           @Override
           public void write(JsonWriter out, ComputeVmPropertiesFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComputeVmPropertiesFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComputeVmPropertiesFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComputeVmPropertiesFragment
   * @throws IOException if the JSON string is invalid with respect to ComputeVmPropertiesFragment
   */
  public static ComputeVmPropertiesFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComputeVmPropertiesFragment.class);
  }

  /**
   * Convert an instance of ComputeVmPropertiesFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

