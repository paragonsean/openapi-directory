/*
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LabCostDetailsProperties;
import org.openapitools.client.model.LabCostSummaryProperties;
import org.openapitools.client.model.LabResourceCostProperties;
import org.openapitools.client.model.TargetCostProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a cost item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:40.188363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabCostProperties {
  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_END_DATE_TIME = "endDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private OffsetDateTime endDateTime;

  public static final String SERIALIZED_NAME_LAB_COST_DETAILS = "labCostDetails";
  @SerializedName(SERIALIZED_NAME_LAB_COST_DETAILS)
  private List<LabCostDetailsProperties> labCostDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAB_COST_SUMMARY = "labCostSummary";
  @SerializedName(SERIALIZED_NAME_LAB_COST_SUMMARY)
  private LabCostSummaryProperties labCostSummary;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_COSTS = "resourceCosts";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COSTS)
  private List<LabResourceCostProperties> resourceCosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private OffsetDateTime startDateTime;

  public static final String SERIALIZED_NAME_TARGET_COST = "targetCost";
  @SerializedName(SERIALIZED_NAME_TARGET_COST)
  private TargetCostProperties targetCost;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public LabCostProperties() {
  }

  public LabCostProperties(
     List<LabCostDetailsProperties> labCostDetails, 
     List<LabResourceCostProperties> resourceCosts
  ) {
    this();
    this.labCostDetails = labCostDetails;
    this.resourceCosts = resourceCosts;
  }

  public LabCostProperties createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The creation date of the cost.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public LabCostProperties currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code of the cost.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public LabCostProperties endDateTime(OffsetDateTime endDateTime) {
    this.endDateTime = endDateTime;
    return this;
  }

  /**
   * The end time of the cost data.
   * @return endDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateTime() {
    return endDateTime;
  }

  public void setEndDateTime(OffsetDateTime endDateTime) {
    this.endDateTime = endDateTime;
  }


  /**
   * The lab cost details component of the cost data.
   * @return labCostDetails
   */
  @javax.annotation.Nullable
  public List<LabCostDetailsProperties> getLabCostDetails() {
    return labCostDetails;
  }



  public LabCostProperties labCostSummary(LabCostSummaryProperties labCostSummary) {
    this.labCostSummary = labCostSummary;
    return this;
  }

  /**
   * Get labCostSummary
   * @return labCostSummary
   */
  @javax.annotation.Nullable
  public LabCostSummaryProperties getLabCostSummary() {
    return labCostSummary;
  }

  public void setLabCostSummary(LabCostSummaryProperties labCostSummary) {
    this.labCostSummary = labCostSummary;
  }


  public LabCostProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  /**
   * The resource cost component of the cost data.
   * @return resourceCosts
   */
  @javax.annotation.Nullable
  public List<LabResourceCostProperties> getResourceCosts() {
    return resourceCosts;
  }



  public LabCostProperties startDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * The start time of the cost data.
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
  }


  public LabCostProperties targetCost(TargetCostProperties targetCost) {
    this.targetCost = targetCost;
    return this;
  }

  /**
   * Get targetCost
   * @return targetCost
   */
  @javax.annotation.Nullable
  public TargetCostProperties getTargetCost() {
    return targetCost;
  }

  public void setTargetCost(TargetCostProperties targetCost) {
    this.targetCost = targetCost;
  }


  public LabCostProperties uniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * The unique immutable identifier of a resource (Guid).
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabCostProperties labCostProperties = (LabCostProperties) o;
    return Objects.equals(this.createdDate, labCostProperties.createdDate) &&
        Objects.equals(this.currencyCode, labCostProperties.currencyCode) &&
        Objects.equals(this.endDateTime, labCostProperties.endDateTime) &&
        Objects.equals(this.labCostDetails, labCostProperties.labCostDetails) &&
        Objects.equals(this.labCostSummary, labCostProperties.labCostSummary) &&
        Objects.equals(this.provisioningState, labCostProperties.provisioningState) &&
        Objects.equals(this.resourceCosts, labCostProperties.resourceCosts) &&
        Objects.equals(this.startDateTime, labCostProperties.startDateTime) &&
        Objects.equals(this.targetCost, labCostProperties.targetCost) &&
        Objects.equals(this.uniqueIdentifier, labCostProperties.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDate, currencyCode, endDateTime, labCostDetails, labCostSummary, provisioningState, resourceCosts, startDateTime, targetCost, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabCostProperties {\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    labCostDetails: ").append(toIndentedString(labCostDetails)).append("\n");
    sb.append("    labCostSummary: ").append(toIndentedString(labCostSummary)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceCosts: ").append(toIndentedString(resourceCosts)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    targetCost: ").append(toIndentedString(targetCost)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdDate");
    openapiFields.add("currencyCode");
    openapiFields.add("endDateTime");
    openapiFields.add("labCostDetails");
    openapiFields.add("labCostSummary");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceCosts");
    openapiFields.add("startDateTime");
    openapiFields.add("targetCost");
    openapiFields.add("uniqueIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabCostProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabCostProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabCostProperties is not found in the empty JSON string", LabCostProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabCostProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabCostProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if (jsonObj.get("labCostDetails") != null && !jsonObj.get("labCostDetails").isJsonNull()) {
        JsonArray jsonArraylabCostDetails = jsonObj.getAsJsonArray("labCostDetails");
        if (jsonArraylabCostDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labCostDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labCostDetails` to be an array in the JSON string but got `%s`", jsonObj.get("labCostDetails").toString()));
          }

          // validate the optional field `labCostDetails` (array)
          for (int i = 0; i < jsonArraylabCostDetails.size(); i++) {
            LabCostDetailsProperties.validateJsonElement(jsonArraylabCostDetails.get(i));
          };
        }
      }
      // validate the optional field `labCostSummary`
      if (jsonObj.get("labCostSummary") != null && !jsonObj.get("labCostSummary").isJsonNull()) {
        LabCostSummaryProperties.validateJsonElement(jsonObj.get("labCostSummary"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("resourceCosts") != null && !jsonObj.get("resourceCosts").isJsonNull()) {
        JsonArray jsonArrayresourceCosts = jsonObj.getAsJsonArray("resourceCosts");
        if (jsonArrayresourceCosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceCosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceCosts` to be an array in the JSON string but got `%s`", jsonObj.get("resourceCosts").toString()));
          }

          // validate the optional field `resourceCosts` (array)
          for (int i = 0; i < jsonArrayresourceCosts.size(); i++) {
            LabResourceCostProperties.validateJsonElement(jsonArrayresourceCosts.get(i));
          };
        }
      }
      // validate the optional field `targetCost`
      if (jsonObj.get("targetCost") != null && !jsonObj.get("targetCost").isJsonNull()) {
        TargetCostProperties.validateJsonElement(jsonObj.get("targetCost"));
      }
      if ((jsonObj.get("uniqueIdentifier") != null && !jsonObj.get("uniqueIdentifier").isJsonNull()) && !jsonObj.get("uniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabCostProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabCostProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabCostProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabCostProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LabCostProperties>() {
           @Override
           public void write(JsonWriter out, LabCostProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabCostProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabCostProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabCostProperties
   * @throws IOException if the JSON string is invalid with respect to LabCostProperties
   */
  public static LabCostProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabCostProperties.class);
  }

  /**
   * Convert an instance of LabCostProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

