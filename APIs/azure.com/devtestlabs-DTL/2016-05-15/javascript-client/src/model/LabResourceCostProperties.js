/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LabResourceCostProperties model module.
 * @module model/LabResourceCostProperties
 * @version 2016-05-15
 */
class LabResourceCostProperties {
    /**
     * Constructs a new <code>LabResourceCostProperties</code>.
     * The properties of a resource cost item.
     * @alias module:model/LabResourceCostProperties
     */
    constructor() { 
        
        LabResourceCostProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabResourceCostProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabResourceCostProperties} obj Optional instance to populate.
     * @return {module:model/LabResourceCostProperties} The populated <code>LabResourceCostProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabResourceCostProperties();

            if (data.hasOwnProperty('externalResourceId')) {
                obj['externalResourceId'] = ApiClient.convertToType(data['externalResourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceCost')) {
                obj['resourceCost'] = ApiClient.convertToType(data['resourceCost'], 'Number');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceOwner')) {
                obj['resourceOwner'] = ApiClient.convertToType(data['resourceOwner'], 'String');
            }
            if (data.hasOwnProperty('resourcePricingTier')) {
                obj['resourcePricingTier'] = ApiClient.convertToType(data['resourcePricingTier'], 'String');
            }
            if (data.hasOwnProperty('resourceStatus')) {
                obj['resourceStatus'] = ApiClient.convertToType(data['resourceStatus'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('resourceUId')) {
                obj['resourceUId'] = ApiClient.convertToType(data['resourceUId'], 'String');
            }
            if (data.hasOwnProperty('resourcename')) {
                obj['resourcename'] = ApiClient.convertToType(data['resourcename'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabResourceCostProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabResourceCostProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['externalResourceId'] && !(typeof data['externalResourceId'] === 'string' || data['externalResourceId'] instanceof String)) {
            throw new Error("Expected the field `externalResourceId` to be a primitive type in the JSON string but got " + data['externalResourceId']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['resourceOwner'] && !(typeof data['resourceOwner'] === 'string' || data['resourceOwner'] instanceof String)) {
            throw new Error("Expected the field `resourceOwner` to be a primitive type in the JSON string but got " + data['resourceOwner']);
        }
        // ensure the json data is a string
        if (data['resourcePricingTier'] && !(typeof data['resourcePricingTier'] === 'string' || data['resourcePricingTier'] instanceof String)) {
            throw new Error("Expected the field `resourcePricingTier` to be a primitive type in the JSON string but got " + data['resourcePricingTier']);
        }
        // ensure the json data is a string
        if (data['resourceStatus'] && !(typeof data['resourceStatus'] === 'string' || data['resourceStatus'] instanceof String)) {
            throw new Error("Expected the field `resourceStatus` to be a primitive type in the JSON string but got " + data['resourceStatus']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        // ensure the json data is a string
        if (data['resourceUId'] && !(typeof data['resourceUId'] === 'string' || data['resourceUId'] instanceof String)) {
            throw new Error("Expected the field `resourceUId` to be a primitive type in the JSON string but got " + data['resourceUId']);
        }
        // ensure the json data is a string
        if (data['resourcename'] && !(typeof data['resourcename'] === 'string' || data['resourcename'] instanceof String)) {
            throw new Error("Expected the field `resourcename` to be a primitive type in the JSON string but got " + data['resourcename']);
        }

        return true;
    }


}



/**
 * The ID of the external resource
 * @member {String} externalResourceId
 */
LabResourceCostProperties.prototype['externalResourceId'] = undefined;

/**
 * The cost component of the resource cost item.
 * @member {Number} resourceCost
 */
LabResourceCostProperties.prototype['resourceCost'] = undefined;

/**
 * The ID of the resource
 * @member {String} resourceId
 */
LabResourceCostProperties.prototype['resourceId'] = undefined;

/**
 * The owner of the resource (ex. janedoe@microsoft.com)
 * @member {String} resourceOwner
 */
LabResourceCostProperties.prototype['resourceOwner'] = undefined;

/**
 * The category of the resource (ex. Premium_LRS, Standard_DS1)
 * @member {String} resourcePricingTier
 */
LabResourceCostProperties.prototype['resourcePricingTier'] = undefined;

/**
 * The status of the resource (ex. Active)
 * @member {String} resourceStatus
 */
LabResourceCostProperties.prototype['resourceStatus'] = undefined;

/**
 * The logical resource type (ex. virtualmachine, storageaccount)
 * @member {String} resourceType
 */
LabResourceCostProperties.prototype['resourceType'] = undefined;

/**
 * The unique identifier of the resource.
 * @member {String} resourceUId
 */
LabResourceCostProperties.prototype['resourceUId'] = undefined;

/**
 * The name of the resource.
 * @member {String} resourcename
 */
LabResourceCostProperties.prototype['resourcename'] = undefined;






export default LabResourceCostProperties;

