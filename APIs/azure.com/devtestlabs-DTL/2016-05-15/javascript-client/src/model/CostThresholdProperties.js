/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PercentageCostThresholdProperties from './PercentageCostThresholdProperties';

/**
 * The CostThresholdProperties model module.
 * @module model/CostThresholdProperties
 * @version 2016-05-15
 */
class CostThresholdProperties {
    /**
     * Constructs a new <code>CostThresholdProperties</code>.
     * Properties of a cost threshold item.
     * @alias module:model/CostThresholdProperties
     */
    constructor() { 
        
        CostThresholdProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CostThresholdProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CostThresholdProperties} obj Optional instance to populate.
     * @return {module:model/CostThresholdProperties} The populated <code>CostThresholdProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CostThresholdProperties();

            if (data.hasOwnProperty('displayOnChart')) {
                obj['displayOnChart'] = ApiClient.convertToType(data['displayOnChart'], 'String');
            }
            if (data.hasOwnProperty('notificationSent')) {
                obj['notificationSent'] = ApiClient.convertToType(data['notificationSent'], 'String');
            }
            if (data.hasOwnProperty('percentageThreshold')) {
                obj['percentageThreshold'] = PercentageCostThresholdProperties.constructFromObject(data['percentageThreshold']);
            }
            if (data.hasOwnProperty('sendNotificationWhenExceeded')) {
                obj['sendNotificationWhenExceeded'] = ApiClient.convertToType(data['sendNotificationWhenExceeded'], 'String');
            }
            if (data.hasOwnProperty('thresholdId')) {
                obj['thresholdId'] = ApiClient.convertToType(data['thresholdId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CostThresholdProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CostThresholdProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayOnChart'] && !(typeof data['displayOnChart'] === 'string' || data['displayOnChart'] instanceof String)) {
            throw new Error("Expected the field `displayOnChart` to be a primitive type in the JSON string but got " + data['displayOnChart']);
        }
        // ensure the json data is a string
        if (data['notificationSent'] && !(typeof data['notificationSent'] === 'string' || data['notificationSent'] instanceof String)) {
            throw new Error("Expected the field `notificationSent` to be a primitive type in the JSON string but got " + data['notificationSent']);
        }
        // validate the optional field `percentageThreshold`
        if (data['percentageThreshold']) { // data not null
          PercentageCostThresholdProperties.validateJSON(data['percentageThreshold']);
        }
        // ensure the json data is a string
        if (data['sendNotificationWhenExceeded'] && !(typeof data['sendNotificationWhenExceeded'] === 'string' || data['sendNotificationWhenExceeded'] instanceof String)) {
            throw new Error("Expected the field `sendNotificationWhenExceeded` to be a primitive type in the JSON string but got " + data['sendNotificationWhenExceeded']);
        }
        // ensure the json data is a string
        if (data['thresholdId'] && !(typeof data['thresholdId'] === 'string' || data['thresholdId'] instanceof String)) {
            throw new Error("Expected the field `thresholdId` to be a primitive type in the JSON string but got " + data['thresholdId']);
        }

        return true;
    }


}



/**
 * Indicates whether this threshold will be displayed on cost charts.
 * @member {module:model/CostThresholdProperties.DisplayOnChartEnum} displayOnChart
 */
CostThresholdProperties.prototype['displayOnChart'] = undefined;

/**
 * Indicates the datetime when notifications were last sent for this threshold.
 * @member {String} notificationSent
 */
CostThresholdProperties.prototype['notificationSent'] = undefined;

/**
 * @member {module:model/PercentageCostThresholdProperties} percentageThreshold
 */
CostThresholdProperties.prototype['percentageThreshold'] = undefined;

/**
 * Indicates whether notifications will be sent when this threshold is exceeded.
 * @member {module:model/CostThresholdProperties.SendNotificationWhenExceededEnum} sendNotificationWhenExceeded
 */
CostThresholdProperties.prototype['sendNotificationWhenExceeded'] = undefined;

/**
 * The ID of the cost threshold item.
 * @member {String} thresholdId
 */
CostThresholdProperties.prototype['thresholdId'] = undefined;





/**
 * Allowed values for the <code>displayOnChart</code> property.
 * @enum {String}
 * @readonly
 */
CostThresholdProperties['DisplayOnChartEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>sendNotificationWhenExceeded</code> property.
 * @enum {String}
 * @readonly
 */
CostThresholdProperties['SendNotificationWhenExceededEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default CostThresholdProperties;

