/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArtifactProperties model module.
 * @module model/ArtifactProperties
 * @version 2016-05-15
 */
class ArtifactProperties {
    /**
     * Constructs a new <code>ArtifactProperties</code>.
     * Properties of an artifact.
     * @alias module:model/ArtifactProperties
     */
    constructor() { 
        
        ArtifactProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArtifactProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArtifactProperties} obj Optional instance to populate.
     * @return {module:model/ArtifactProperties} The populated <code>ArtifactProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArtifactProperties();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('targetOsType')) {
                obj['targetOsType'] = ApiClient.convertToType(data['targetOsType'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArtifactProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArtifactProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['targetOsType'] && !(typeof data['targetOsType'] === 'string' || data['targetOsType'] instanceof String)) {
            throw new Error("Expected the field `targetOsType` to be a primitive type in the JSON string but got " + data['targetOsType']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The artifact's creation date.
 * @member {Date} createdDate
 */
ArtifactProperties.prototype['createdDate'] = undefined;

/**
 * The artifact's description.
 * @member {String} description
 */
ArtifactProperties.prototype['description'] = undefined;

/**
 * The file path to the artifact.
 * @member {String} filePath
 */
ArtifactProperties.prototype['filePath'] = undefined;

/**
 * The URI to the artifact icon.
 * @member {String} icon
 */
ArtifactProperties.prototype['icon'] = undefined;

/**
 * The artifact's parameters.
 * @member {Object} parameters
 */
ArtifactProperties.prototype['parameters'] = undefined;

/**
 * The artifact's publisher.
 * @member {String} publisher
 */
ArtifactProperties.prototype['publisher'] = undefined;

/**
 * The artifact's target OS.
 * @member {String} targetOsType
 */
ArtifactProperties.prototype['targetOsType'] = undefined;

/**
 * The artifact's title.
 * @member {String} title
 */
ArtifactProperties.prototype['title'] = undefined;






export default ArtifactProperties;

