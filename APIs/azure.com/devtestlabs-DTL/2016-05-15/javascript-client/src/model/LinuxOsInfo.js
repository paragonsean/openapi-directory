/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinuxOsInfo model module.
 * @module model/LinuxOsInfo
 * @version 2016-05-15
 */
class LinuxOsInfo {
    /**
     * Constructs a new <code>LinuxOsInfo</code>.
     * Information about a Linux OS.
     * @alias module:model/LinuxOsInfo
     */
    constructor() { 
        
        LinuxOsInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinuxOsInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinuxOsInfo} obj Optional instance to populate.
     * @return {module:model/LinuxOsInfo} The populated <code>LinuxOsInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinuxOsInfo();

            if (data.hasOwnProperty('linuxOsState')) {
                obj['linuxOsState'] = ApiClient.convertToType(data['linuxOsState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinuxOsInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinuxOsInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['linuxOsState'] && !(typeof data['linuxOsState'] === 'string' || data['linuxOsState'] instanceof String)) {
            throw new Error("Expected the field `linuxOsState` to be a primitive type in the JSON string but got " + data['linuxOsState']);
        }

        return true;
    }


}



/**
 * The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
 * @member {module:model/LinuxOsInfo.LinuxOsStateEnum} linuxOsState
 */
LinuxOsInfo.prototype['linuxOsState'] = undefined;





/**
 * Allowed values for the <code>linuxOsState</code> property.
 * @enum {String}
 * @readonly
 */
LinuxOsInfo['LinuxOsStateEnum'] = {

    /**
     * value: "NonDeprovisioned"
     * @const
     */
    "NonDeprovisioned": "NonDeprovisioned",

    /**
     * value: "DeprovisionRequested"
     * @const
     */
    "DeprovisionRequested": "DeprovisionRequested",

    /**
     * value: "DeprovisionApplied"
     * @const
     */
    "DeprovisionApplied": "DeprovisionApplied"
};



export default LinuxOsInfo;

