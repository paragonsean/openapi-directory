/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Event from './Event';

/**
 * The NotificationChannelProperties model module.
 * @module model/NotificationChannelProperties
 * @version 2016-05-15
 */
class NotificationChannelProperties {
    /**
     * Constructs a new <code>NotificationChannelProperties</code>.
     * Properties of a schedule.
     * @alias module:model/NotificationChannelProperties
     */
    constructor() { 
        
        NotificationChannelProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationChannelProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationChannelProperties} obj Optional instance to populate.
     * @return {module:model/NotificationChannelProperties} The populated <code>NotificationChannelProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationChannelProperties();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [Event]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
            if (data.hasOwnProperty('webHookUrl')) {
                obj['webHookUrl'] = ApiClient.convertToType(data['webHookUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationChannelProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationChannelProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                Event.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }
        // ensure the json data is a string
        if (data['webHookUrl'] && !(typeof data['webHookUrl'] === 'string' || data['webHookUrl'] instanceof String)) {
            throw new Error("Expected the field `webHookUrl` to be a primitive type in the JSON string but got " + data['webHookUrl']);
        }

        return true;
    }


}



/**
 * The creation date of the notification channel.
 * @member {Date} createdDate
 */
NotificationChannelProperties.prototype['createdDate'] = undefined;

/**
 * Description of notification.
 * @member {String} description
 */
NotificationChannelProperties.prototype['description'] = undefined;

/**
 * The list of event for which this notification is enabled.
 * @member {Array.<module:model/Event>} events
 */
NotificationChannelProperties.prototype['events'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
NotificationChannelProperties.prototype['provisioningState'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
NotificationChannelProperties.prototype['uniqueIdentifier'] = undefined;

/**
 * The webhook URL to send notifications to.
 * @member {String} webHookUrl
 */
NotificationChannelProperties.prototype['webHookUrl'] = undefined;






export default NotificationChannelProperties;

