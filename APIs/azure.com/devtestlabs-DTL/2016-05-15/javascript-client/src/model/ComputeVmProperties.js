/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComputeDataDisk from './ComputeDataDisk';
import ComputeVmInstanceViewStatus from './ComputeVmInstanceViewStatus';

/**
 * The ComputeVmProperties model module.
 * @module model/ComputeVmProperties
 * @version 2016-05-15
 */
class ComputeVmProperties {
    /**
     * Constructs a new <code>ComputeVmProperties</code>.
     * Properties of a virtual machine returned by the Microsoft.Compute API.
     * @alias module:model/ComputeVmProperties
     */
    constructor() { 
        
        ComputeVmProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeVmProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeVmProperties} obj Optional instance to populate.
     * @return {module:model/ComputeVmProperties} The populated <code>ComputeVmProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeVmProperties();

            if (data.hasOwnProperty('dataDiskIds')) {
                obj['dataDiskIds'] = ApiClient.convertToType(data['dataDiskIds'], ['String']);
            }
            if (data.hasOwnProperty('dataDisks')) {
                obj['dataDisks'] = ApiClient.convertToType(data['dataDisks'], [ComputeDataDisk]);
            }
            if (data.hasOwnProperty('networkInterfaceId')) {
                obj['networkInterfaceId'] = ApiClient.convertToType(data['networkInterfaceId'], 'String');
            }
            if (data.hasOwnProperty('osDiskId')) {
                obj['osDiskId'] = ApiClient.convertToType(data['osDiskId'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [ComputeVmInstanceViewStatus]);
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeVmProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeVmProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dataDiskIds'])) {
            throw new Error("Expected the field `dataDiskIds` to be an array in the JSON data but got " + data['dataDiskIds']);
        }
        if (data['dataDisks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataDisks'])) {
                throw new Error("Expected the field `dataDisks` to be an array in the JSON data but got " + data['dataDisks']);
            }
            // validate the optional field `dataDisks` (array)
            for (const item of data['dataDisks']) {
                ComputeDataDisk.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['networkInterfaceId'] && !(typeof data['networkInterfaceId'] === 'string' || data['networkInterfaceId'] instanceof String)) {
            throw new Error("Expected the field `networkInterfaceId` to be a primitive type in the JSON string but got " + data['networkInterfaceId']);
        }
        // ensure the json data is a string
        if (data['osDiskId'] && !(typeof data['osDiskId'] === 'string' || data['osDiskId'] instanceof String)) {
            throw new Error("Expected the field `osDiskId` to be a primitive type in the JSON string but got " + data['osDiskId']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                ComputeVmInstanceViewStatus.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }

        return true;
    }


}



/**
 * Gets data disks blob uri for the virtual machine.
 * @member {Array.<String>} dataDiskIds
 */
ComputeVmProperties.prototype['dataDiskIds'] = undefined;

/**
 * Gets all data disks attached to the virtual machine.
 * @member {Array.<module:model/ComputeDataDisk>} dataDisks
 */
ComputeVmProperties.prototype['dataDisks'] = undefined;

/**
 * Gets the network interface ID of the virtual machine.
 * @member {String} networkInterfaceId
 */
ComputeVmProperties.prototype['networkInterfaceId'] = undefined;

/**
 * Gets OS disk blob uri for the virtual machine.
 * @member {String} osDiskId
 */
ComputeVmProperties.prototype['osDiskId'] = undefined;

/**
 * Gets the OS type of the virtual machine.
 * @member {String} osType
 */
ComputeVmProperties.prototype['osType'] = undefined;

/**
 * Gets the statuses of the virtual machine.
 * @member {Array.<module:model/ComputeVmInstanceViewStatus>} statuses
 */
ComputeVmProperties.prototype['statuses'] = undefined;

/**
 * Gets the size of the virtual machine.
 * @member {String} vmSize
 */
ComputeVmProperties.prototype['vmSize'] = undefined;






export default ComputeVmProperties;

