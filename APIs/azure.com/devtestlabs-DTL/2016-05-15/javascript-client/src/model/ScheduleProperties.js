/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DayDetails from './DayDetails';
import HourDetails from './HourDetails';
import NotificationSettings from './NotificationSettings';
import WeekDetails from './WeekDetails';

/**
 * The ScheduleProperties model module.
 * @module model/ScheduleProperties
 * @version 2016-05-15
 */
class ScheduleProperties {
    /**
     * Constructs a new <code>ScheduleProperties</code>.
     * Properties of a schedule.
     * @alias module:model/ScheduleProperties
     */
    constructor() { 
        
        ScheduleProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScheduleProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduleProperties} obj Optional instance to populate.
     * @return {module:model/ScheduleProperties} The populated <code>ScheduleProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduleProperties();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('dailyRecurrence')) {
                obj['dailyRecurrence'] = DayDetails.constructFromObject(data['dailyRecurrence']);
            }
            if (data.hasOwnProperty('hourlyRecurrence')) {
                obj['hourlyRecurrence'] = HourDetails.constructFromObject(data['hourlyRecurrence']);
            }
            if (data.hasOwnProperty('notificationSettings')) {
                obj['notificationSettings'] = NotificationSettings.constructFromObject(data['notificationSettings']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('targetResourceId')) {
                obj['targetResourceId'] = ApiClient.convertToType(data['targetResourceId'], 'String');
            }
            if (data.hasOwnProperty('taskType')) {
                obj['taskType'] = ApiClient.convertToType(data['taskType'], 'String');
            }
            if (data.hasOwnProperty('timeZoneId')) {
                obj['timeZoneId'] = ApiClient.convertToType(data['timeZoneId'], 'String');
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
            if (data.hasOwnProperty('weeklyRecurrence')) {
                obj['weeklyRecurrence'] = WeekDetails.constructFromObject(data['weeklyRecurrence']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduleProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduleProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dailyRecurrence`
        if (data['dailyRecurrence']) { // data not null
          DayDetails.validateJSON(data['dailyRecurrence']);
        }
        // validate the optional field `hourlyRecurrence`
        if (data['hourlyRecurrence']) { // data not null
          HourDetails.validateJSON(data['hourlyRecurrence']);
        }
        // validate the optional field `notificationSettings`
        if (data['notificationSettings']) { // data not null
          NotificationSettings.validateJSON(data['notificationSettings']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['targetResourceId'] && !(typeof data['targetResourceId'] === 'string' || data['targetResourceId'] instanceof String)) {
            throw new Error("Expected the field `targetResourceId` to be a primitive type in the JSON string but got " + data['targetResourceId']);
        }
        // ensure the json data is a string
        if (data['taskType'] && !(typeof data['taskType'] === 'string' || data['taskType'] instanceof String)) {
            throw new Error("Expected the field `taskType` to be a primitive type in the JSON string but got " + data['taskType']);
        }
        // ensure the json data is a string
        if (data['timeZoneId'] && !(typeof data['timeZoneId'] === 'string' || data['timeZoneId'] instanceof String)) {
            throw new Error("Expected the field `timeZoneId` to be a primitive type in the JSON string but got " + data['timeZoneId']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }
        // validate the optional field `weeklyRecurrence`
        if (data['weeklyRecurrence']) { // data not null
          WeekDetails.validateJSON(data['weeklyRecurrence']);
        }

        return true;
    }


}



/**
 * The creation date of the schedule.
 * @member {Date} createdDate
 */
ScheduleProperties.prototype['createdDate'] = undefined;

/**
 * @member {module:model/DayDetails} dailyRecurrence
 */
ScheduleProperties.prototype['dailyRecurrence'] = undefined;

/**
 * @member {module:model/HourDetails} hourlyRecurrence
 */
ScheduleProperties.prototype['hourlyRecurrence'] = undefined;

/**
 * @member {module:model/NotificationSettings} notificationSettings
 */
ScheduleProperties.prototype['notificationSettings'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
ScheduleProperties.prototype['provisioningState'] = undefined;

/**
 * The status of the schedule (i.e. Enabled, Disabled)
 * @member {module:model/ScheduleProperties.StatusEnum} status
 */
ScheduleProperties.prototype['status'] = undefined;

/**
 * The resource ID to which the schedule belongs
 * @member {String} targetResourceId
 */
ScheduleProperties.prototype['targetResourceId'] = undefined;

/**
 * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
 * @member {String} taskType
 */
ScheduleProperties.prototype['taskType'] = undefined;

/**
 * The time zone ID (e.g. Pacific Standard time).
 * @member {String} timeZoneId
 */
ScheduleProperties.prototype['timeZoneId'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
ScheduleProperties.prototype['uniqueIdentifier'] = undefined;

/**
 * @member {module:model/WeekDetails} weeklyRecurrence
 */
ScheduleProperties.prototype['weeklyRecurrence'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ScheduleProperties['StatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default ScheduleProperties;

