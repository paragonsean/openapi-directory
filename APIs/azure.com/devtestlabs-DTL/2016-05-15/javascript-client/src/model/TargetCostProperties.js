/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CostThresholdProperties from './CostThresholdProperties';

/**
 * The TargetCostProperties model module.
 * @module model/TargetCostProperties
 * @version 2016-05-15
 */
class TargetCostProperties {
    /**
     * Constructs a new <code>TargetCostProperties</code>.
     * Properties of a cost target.
     * @alias module:model/TargetCostProperties
     */
    constructor() { 
        
        TargetCostProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TargetCostProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetCostProperties} obj Optional instance to populate.
     * @return {module:model/TargetCostProperties} The populated <code>TargetCostProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TargetCostProperties();

            if (data.hasOwnProperty('costThresholds')) {
                obj['costThresholds'] = ApiClient.convertToType(data['costThresholds'], [CostThresholdProperties]);
            }
            if (data.hasOwnProperty('cycleEndDateTime')) {
                obj['cycleEndDateTime'] = ApiClient.convertToType(data['cycleEndDateTime'], 'Date');
            }
            if (data.hasOwnProperty('cycleStartDateTime')) {
                obj['cycleStartDateTime'] = ApiClient.convertToType(data['cycleStartDateTime'], 'Date');
            }
            if (data.hasOwnProperty('cycleType')) {
                obj['cycleType'] = ApiClient.convertToType(data['cycleType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TargetCostProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TargetCostProperties</code>.
     */
    static validateJSON(data) {
        if (data['costThresholds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['costThresholds'])) {
                throw new Error("Expected the field `costThresholds` to be an array in the JSON data but got " + data['costThresholds']);
            }
            // validate the optional field `costThresholds` (array)
            for (const item of data['costThresholds']) {
                CostThresholdProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['cycleType'] && !(typeof data['cycleType'] === 'string' || data['cycleType'] instanceof String)) {
            throw new Error("Expected the field `cycleType` to be a primitive type in the JSON string but got " + data['cycleType']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Cost thresholds.
 * @member {Array.<module:model/CostThresholdProperties>} costThresholds
 */
TargetCostProperties.prototype['costThresholds'] = undefined;

/**
 * Reporting cycle end date.
 * @member {Date} cycleEndDateTime
 */
TargetCostProperties.prototype['cycleEndDateTime'] = undefined;

/**
 * Reporting cycle start date.
 * @member {Date} cycleStartDateTime
 */
TargetCostProperties.prototype['cycleStartDateTime'] = undefined;

/**
 * Reporting cycle type.
 * @member {module:model/TargetCostProperties.CycleTypeEnum} cycleType
 */
TargetCostProperties.prototype['cycleType'] = undefined;

/**
 * Target cost status
 * @member {module:model/TargetCostProperties.StatusEnum} status
 */
TargetCostProperties.prototype['status'] = undefined;

/**
 * Lab target cost
 * @member {Number} target
 */
TargetCostProperties.prototype['target'] = undefined;





/**
 * Allowed values for the <code>cycleType</code> property.
 * @enum {String}
 * @readonly
 */
TargetCostProperties['CycleTypeEnum'] = {

    /**
     * value: "CalendarMonth"
     * @const
     */
    "CalendarMonth": "CalendarMonth",

    /**
     * value: "Custom"
     * @const
     */
    "Custom": "Custom"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TargetCostProperties['StatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default TargetCostProperties;

