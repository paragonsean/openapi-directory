/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LabProperties model module.
 * @module model/LabProperties
 * @version 2016-05-15
 */
class LabProperties {
    /**
     * Constructs a new <code>LabProperties</code>.
     * Properties of a lab.
     * @alias module:model/LabProperties
     */
    constructor() { 
        
        LabProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabProperties} obj Optional instance to populate.
     * @return {module:model/LabProperties} The populated <code>LabProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabProperties();

            if (data.hasOwnProperty('artifactsStorageAccount')) {
                obj['artifactsStorageAccount'] = ApiClient.convertToType(data['artifactsStorageAccount'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('defaultPremiumStorageAccount')) {
                obj['defaultPremiumStorageAccount'] = ApiClient.convertToType(data['defaultPremiumStorageAccount'], 'String');
            }
            if (data.hasOwnProperty('defaultStorageAccount')) {
                obj['defaultStorageAccount'] = ApiClient.convertToType(data['defaultStorageAccount'], 'String');
            }
            if (data.hasOwnProperty('labStorageType')) {
                obj['labStorageType'] = ApiClient.convertToType(data['labStorageType'], 'String');
            }
            if (data.hasOwnProperty('premiumDataDiskStorageAccount')) {
                obj['premiumDataDiskStorageAccount'] = ApiClient.convertToType(data['premiumDataDiskStorageAccount'], 'String');
            }
            if (data.hasOwnProperty('premiumDataDisks')) {
                obj['premiumDataDisks'] = ApiClient.convertToType(data['premiumDataDisks'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
            if (data.hasOwnProperty('vaultName')) {
                obj['vaultName'] = ApiClient.convertToType(data['vaultName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['artifactsStorageAccount'] && !(typeof data['artifactsStorageAccount'] === 'string' || data['artifactsStorageAccount'] instanceof String)) {
            throw new Error("Expected the field `artifactsStorageAccount` to be a primitive type in the JSON string but got " + data['artifactsStorageAccount']);
        }
        // ensure the json data is a string
        if (data['defaultPremiumStorageAccount'] && !(typeof data['defaultPremiumStorageAccount'] === 'string' || data['defaultPremiumStorageAccount'] instanceof String)) {
            throw new Error("Expected the field `defaultPremiumStorageAccount` to be a primitive type in the JSON string but got " + data['defaultPremiumStorageAccount']);
        }
        // ensure the json data is a string
        if (data['defaultStorageAccount'] && !(typeof data['defaultStorageAccount'] === 'string' || data['defaultStorageAccount'] instanceof String)) {
            throw new Error("Expected the field `defaultStorageAccount` to be a primitive type in the JSON string but got " + data['defaultStorageAccount']);
        }
        // ensure the json data is a string
        if (data['labStorageType'] && !(typeof data['labStorageType'] === 'string' || data['labStorageType'] instanceof String)) {
            throw new Error("Expected the field `labStorageType` to be a primitive type in the JSON string but got " + data['labStorageType']);
        }
        // ensure the json data is a string
        if (data['premiumDataDiskStorageAccount'] && !(typeof data['premiumDataDiskStorageAccount'] === 'string' || data['premiumDataDiskStorageAccount'] instanceof String)) {
            throw new Error("Expected the field `premiumDataDiskStorageAccount` to be a primitive type in the JSON string but got " + data['premiumDataDiskStorageAccount']);
        }
        // ensure the json data is a string
        if (data['premiumDataDisks'] && !(typeof data['premiumDataDisks'] === 'string' || data['premiumDataDisks'] instanceof String)) {
            throw new Error("Expected the field `premiumDataDisks` to be a primitive type in the JSON string but got " + data['premiumDataDisks']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }
        // ensure the json data is a string
        if (data['vaultName'] && !(typeof data['vaultName'] === 'string' || data['vaultName'] instanceof String)) {
            throw new Error("Expected the field `vaultName` to be a primitive type in the JSON string but got " + data['vaultName']);
        }

        return true;
    }


}



/**
 * The lab's artifact storage account.
 * @member {String} artifactsStorageAccount
 */
LabProperties.prototype['artifactsStorageAccount'] = undefined;

/**
 * The creation date of the lab.
 * @member {Date} createdDate
 */
LabProperties.prototype['createdDate'] = undefined;

/**
 * The lab's default premium storage account.
 * @member {String} defaultPremiumStorageAccount
 */
LabProperties.prototype['defaultPremiumStorageAccount'] = undefined;

/**
 * The lab's default storage account.
 * @member {String} defaultStorageAccount
 */
LabProperties.prototype['defaultStorageAccount'] = undefined;

/**
 * Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
 * @member {module:model/LabProperties.LabStorageTypeEnum} labStorageType
 */
LabProperties.prototype['labStorageType'] = undefined;

/**
 * The lab's premium data disk storage account.
 * @member {String} premiumDataDiskStorageAccount
 */
LabProperties.prototype['premiumDataDiskStorageAccount'] = undefined;

/**
 * The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.
 * @member {module:model/LabProperties.PremiumDataDisksEnum} premiumDataDisks
 */
LabProperties.prototype['premiumDataDisks'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
LabProperties.prototype['provisioningState'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
LabProperties.prototype['uniqueIdentifier'] = undefined;

/**
 * The lab's Key vault.
 * @member {String} vaultName
 */
LabProperties.prototype['vaultName'] = undefined;





/**
 * Allowed values for the <code>labStorageType</code> property.
 * @enum {String}
 * @readonly
 */
LabProperties['LabStorageTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium"
};


/**
 * Allowed values for the <code>premiumDataDisks</code> property.
 * @enum {String}
 * @readonly
 */
LabProperties['PremiumDataDisksEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};



export default LabProperties;

