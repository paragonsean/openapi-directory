/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharedPublicIpAddressConfiguration from './SharedPublicIpAddressConfiguration';

/**
 * The NetworkInterfaceProperties model module.
 * @module model/NetworkInterfaceProperties
 * @version 2016-05-15
 */
class NetworkInterfaceProperties {
    /**
     * Constructs a new <code>NetworkInterfaceProperties</code>.
     * Properties of a network interface.
     * @alias module:model/NetworkInterfaceProperties
     */
    constructor() { 
        
        NetworkInterfaceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkInterfaceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkInterfaceProperties} obj Optional instance to populate.
     * @return {module:model/NetworkInterfaceProperties} The populated <code>NetworkInterfaceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkInterfaceProperties();

            if (data.hasOwnProperty('dnsName')) {
                obj['dnsName'] = ApiClient.convertToType(data['dnsName'], 'String');
            }
            if (data.hasOwnProperty('privateIpAddress')) {
                obj['privateIpAddress'] = ApiClient.convertToType(data['privateIpAddress'], 'String');
            }
            if (data.hasOwnProperty('publicIpAddress')) {
                obj['publicIpAddress'] = ApiClient.convertToType(data['publicIpAddress'], 'String');
            }
            if (data.hasOwnProperty('publicIpAddressId')) {
                obj['publicIpAddressId'] = ApiClient.convertToType(data['publicIpAddressId'], 'String');
            }
            if (data.hasOwnProperty('rdpAuthority')) {
                obj['rdpAuthority'] = ApiClient.convertToType(data['rdpAuthority'], 'String');
            }
            if (data.hasOwnProperty('sharedPublicIpAddressConfiguration')) {
                obj['sharedPublicIpAddressConfiguration'] = SharedPublicIpAddressConfiguration.constructFromObject(data['sharedPublicIpAddressConfiguration']);
            }
            if (data.hasOwnProperty('sshAuthority')) {
                obj['sshAuthority'] = ApiClient.convertToType(data['sshAuthority'], 'String');
            }
            if (data.hasOwnProperty('subnetId')) {
                obj['subnetId'] = ApiClient.convertToType(data['subnetId'], 'String');
            }
            if (data.hasOwnProperty('virtualNetworkId')) {
                obj['virtualNetworkId'] = ApiClient.convertToType(data['virtualNetworkId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkInterfaceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkInterfaceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dnsName'] && !(typeof data['dnsName'] === 'string' || data['dnsName'] instanceof String)) {
            throw new Error("Expected the field `dnsName` to be a primitive type in the JSON string but got " + data['dnsName']);
        }
        // ensure the json data is a string
        if (data['privateIpAddress'] && !(typeof data['privateIpAddress'] === 'string' || data['privateIpAddress'] instanceof String)) {
            throw new Error("Expected the field `privateIpAddress` to be a primitive type in the JSON string but got " + data['privateIpAddress']);
        }
        // ensure the json data is a string
        if (data['publicIpAddress'] && !(typeof data['publicIpAddress'] === 'string' || data['publicIpAddress'] instanceof String)) {
            throw new Error("Expected the field `publicIpAddress` to be a primitive type in the JSON string but got " + data['publicIpAddress']);
        }
        // ensure the json data is a string
        if (data['publicIpAddressId'] && !(typeof data['publicIpAddressId'] === 'string' || data['publicIpAddressId'] instanceof String)) {
            throw new Error("Expected the field `publicIpAddressId` to be a primitive type in the JSON string but got " + data['publicIpAddressId']);
        }
        // ensure the json data is a string
        if (data['rdpAuthority'] && !(typeof data['rdpAuthority'] === 'string' || data['rdpAuthority'] instanceof String)) {
            throw new Error("Expected the field `rdpAuthority` to be a primitive type in the JSON string but got " + data['rdpAuthority']);
        }
        // validate the optional field `sharedPublicIpAddressConfiguration`
        if (data['sharedPublicIpAddressConfiguration']) { // data not null
          SharedPublicIpAddressConfiguration.validateJSON(data['sharedPublicIpAddressConfiguration']);
        }
        // ensure the json data is a string
        if (data['sshAuthority'] && !(typeof data['sshAuthority'] === 'string' || data['sshAuthority'] instanceof String)) {
            throw new Error("Expected the field `sshAuthority` to be a primitive type in the JSON string but got " + data['sshAuthority']);
        }
        // ensure the json data is a string
        if (data['subnetId'] && !(typeof data['subnetId'] === 'string' || data['subnetId'] instanceof String)) {
            throw new Error("Expected the field `subnetId` to be a primitive type in the JSON string but got " + data['subnetId']);
        }
        // ensure the json data is a string
        if (data['virtualNetworkId'] && !(typeof data['virtualNetworkId'] === 'string' || data['virtualNetworkId'] instanceof String)) {
            throw new Error("Expected the field `virtualNetworkId` to be a primitive type in the JSON string but got " + data['virtualNetworkId']);
        }

        return true;
    }


}



/**
 * The DNS name.
 * @member {String} dnsName
 */
NetworkInterfaceProperties.prototype['dnsName'] = undefined;

/**
 * The private IP address.
 * @member {String} privateIpAddress
 */
NetworkInterfaceProperties.prototype['privateIpAddress'] = undefined;

/**
 * The public IP address.
 * @member {String} publicIpAddress
 */
NetworkInterfaceProperties.prototype['publicIpAddress'] = undefined;

/**
 * The resource ID of the public IP address.
 * @member {String} publicIpAddressId
 */
NetworkInterfaceProperties.prototype['publicIpAddressId'] = undefined;

/**
 * The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
 * @member {String} rdpAuthority
 */
NetworkInterfaceProperties.prototype['rdpAuthority'] = undefined;

/**
 * @member {module:model/SharedPublicIpAddressConfiguration} sharedPublicIpAddressConfiguration
 */
NetworkInterfaceProperties.prototype['sharedPublicIpAddressConfiguration'] = undefined;

/**
 * The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
 * @member {String} sshAuthority
 */
NetworkInterfaceProperties.prototype['sshAuthority'] = undefined;

/**
 * The resource ID of the sub net.
 * @member {String} subnetId
 */
NetworkInterfaceProperties.prototype['subnetId'] = undefined;

/**
 * The resource ID of the virtual network.
 * @member {String} virtualNetworkId
 */
NetworkInterfaceProperties.prototype['virtualNetworkId'] = undefined;






export default NetworkInterfaceProperties;

