/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParametersValueFileInfo from './ParametersValueFileInfo';

/**
 * The ArmTemplateProperties model module.
 * @module model/ArmTemplateProperties
 * @version 2016-05-15
 */
class ArmTemplateProperties {
    /**
     * Constructs a new <code>ArmTemplateProperties</code>.
     * Properties of an Azure Resource Manager template.
     * @alias module:model/ArmTemplateProperties
     */
    constructor() { 
        
        ArmTemplateProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArmTemplateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArmTemplateProperties} obj Optional instance to populate.
     * @return {module:model/ArmTemplateProperties} The populated <code>ArmTemplateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArmTemplateProperties();

            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ApiClient.convertToType(data['contents'], Object);
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('parametersValueFilesInfo')) {
                obj['parametersValueFilesInfo'] = ApiClient.convertToType(data['parametersValueFilesInfo'], [ParametersValueFileInfo]);
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArmTemplateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArmTemplateProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        if (data['parametersValueFilesInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parametersValueFilesInfo'])) {
                throw new Error("Expected the field `parametersValueFilesInfo` to be an array in the JSON data but got " + data['parametersValueFilesInfo']);
            }
            // validate the optional field `parametersValueFilesInfo` (array)
            for (const item of data['parametersValueFilesInfo']) {
                ParametersValueFileInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }

        return true;
    }


}



/**
 * The contents of the ARM template.
 * @member {Object} contents
 */
ArmTemplateProperties.prototype['contents'] = undefined;

/**
 * The creation date of the armTemplate.
 * @member {Date} createdDate
 */
ArmTemplateProperties.prototype['createdDate'] = undefined;

/**
 * The description of the ARM template.
 * @member {String} description
 */
ArmTemplateProperties.prototype['description'] = undefined;

/**
 * The display name of the ARM template.
 * @member {String} displayName
 */
ArmTemplateProperties.prototype['displayName'] = undefined;

/**
 * The URI to the icon of the ARM template.
 * @member {String} icon
 */
ArmTemplateProperties.prototype['icon'] = undefined;

/**
 * File name and parameter values information from all azuredeploy.*.parameters.json for the ARM template.
 * @member {Array.<module:model/ParametersValueFileInfo>} parametersValueFilesInfo
 */
ArmTemplateProperties.prototype['parametersValueFilesInfo'] = undefined;

/**
 * The publisher of the ARM template.
 * @member {String} publisher
 */
ArmTemplateProperties.prototype['publisher'] = undefined;






export default ArmTemplateProperties;

