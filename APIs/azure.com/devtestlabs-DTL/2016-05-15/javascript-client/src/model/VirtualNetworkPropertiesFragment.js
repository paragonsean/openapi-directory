/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalSubnetFragment from './ExternalSubnetFragment';
import SubnetFragment from './SubnetFragment';
import SubnetOverrideFragment from './SubnetOverrideFragment';

/**
 * The VirtualNetworkPropertiesFragment model module.
 * @module model/VirtualNetworkPropertiesFragment
 * @version 2016-05-15
 */
class VirtualNetworkPropertiesFragment {
    /**
     * Constructs a new <code>VirtualNetworkPropertiesFragment</code>.
     * Properties of a virtual network.
     * @alias module:model/VirtualNetworkPropertiesFragment
     */
    constructor() { 
        
        VirtualNetworkPropertiesFragment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualNetworkPropertiesFragment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualNetworkPropertiesFragment} obj Optional instance to populate.
     * @return {module:model/VirtualNetworkPropertiesFragment} The populated <code>VirtualNetworkPropertiesFragment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualNetworkPropertiesFragment();

            if (data.hasOwnProperty('allowedSubnets')) {
                obj['allowedSubnets'] = ApiClient.convertToType(data['allowedSubnets'], [SubnetFragment]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('externalProviderResourceId')) {
                obj['externalProviderResourceId'] = ApiClient.convertToType(data['externalProviderResourceId'], 'String');
            }
            if (data.hasOwnProperty('externalSubnets')) {
                obj['externalSubnets'] = ApiClient.convertToType(data['externalSubnets'], [ExternalSubnetFragment]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('subnetOverrides')) {
                obj['subnetOverrides'] = ApiClient.convertToType(data['subnetOverrides'], [SubnetOverrideFragment]);
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualNetworkPropertiesFragment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualNetworkPropertiesFragment</code>.
     */
    static validateJSON(data) {
        if (data['allowedSubnets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowedSubnets'])) {
                throw new Error("Expected the field `allowedSubnets` to be an array in the JSON data but got " + data['allowedSubnets']);
            }
            // validate the optional field `allowedSubnets` (array)
            for (const item of data['allowedSubnets']) {
                SubnetFragment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['externalProviderResourceId'] && !(typeof data['externalProviderResourceId'] === 'string' || data['externalProviderResourceId'] instanceof String)) {
            throw new Error("Expected the field `externalProviderResourceId` to be a primitive type in the JSON string but got " + data['externalProviderResourceId']);
        }
        if (data['externalSubnets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalSubnets'])) {
                throw new Error("Expected the field `externalSubnets` to be an array in the JSON data but got " + data['externalSubnets']);
            }
            // validate the optional field `externalSubnets` (array)
            for (const item of data['externalSubnets']) {
                ExternalSubnetFragment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['subnetOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subnetOverrides'])) {
                throw new Error("Expected the field `subnetOverrides` to be an array in the JSON data but got " + data['subnetOverrides']);
            }
            // validate the optional field `subnetOverrides` (array)
            for (const item of data['subnetOverrides']) {
                SubnetOverrideFragment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }

        return true;
    }


}



/**
 * The allowed subnets of the virtual network.
 * @member {Array.<module:model/SubnetFragment>} allowedSubnets
 */
VirtualNetworkPropertiesFragment.prototype['allowedSubnets'] = undefined;

/**
 * The description of the virtual network.
 * @member {String} description
 */
VirtualNetworkPropertiesFragment.prototype['description'] = undefined;

/**
 * The Microsoft.Network resource identifier of the virtual network.
 * @member {String} externalProviderResourceId
 */
VirtualNetworkPropertiesFragment.prototype['externalProviderResourceId'] = undefined;

/**
 * The external subnet properties.
 * @member {Array.<module:model/ExternalSubnetFragment>} externalSubnets
 */
VirtualNetworkPropertiesFragment.prototype['externalSubnets'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
VirtualNetworkPropertiesFragment.prototype['provisioningState'] = undefined;

/**
 * The subnet overrides of the virtual network.
 * @member {Array.<module:model/SubnetOverrideFragment>} subnetOverrides
 */
VirtualNetworkPropertiesFragment.prototype['subnetOverrides'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
VirtualNetworkPropertiesFragment.prototype['uniqueIdentifier'] = undefined;






export default VirtualNetworkPropertiesFragment;

