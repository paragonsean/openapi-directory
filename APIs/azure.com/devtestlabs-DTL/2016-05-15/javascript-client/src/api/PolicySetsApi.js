/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import EvaluatePoliciesRequest from '../model/EvaluatePoliciesRequest';
import EvaluatePoliciesResponse from '../model/EvaluatePoliciesResponse';

/**
* PolicySets service.
* @module api/PolicySetsApi
* @version 2016-05-15
*/
export default class PolicySetsApi {

    /**
    * Constructs a new PolicySetsApi. 
    * @alias module:api/PolicySetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the policySetsEvaluatePolicies operation.
     * @callback module:api/PolicySetsApi~policySetsEvaluatePoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EvaluatePoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluates lab policy.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the policy set.
     * @param {String} apiVersion Client API version.
     * @param {module:model/EvaluatePoliciesRequest} evaluatePoliciesRequest Request body for evaluating a policy set.
     * @param {module:api/PolicySetsApi~policySetsEvaluatePoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EvaluatePoliciesResponse}
     */
    policySetsEvaluatePolicies(subscriptionId, resourceGroupName, labName, name, apiVersion, evaluatePoliciesRequest, callback) {
      let postBody = evaluatePoliciesRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policySetsEvaluatePolicies");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policySetsEvaluatePolicies");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling policySetsEvaluatePolicies");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling policySetsEvaluatePolicies");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetsEvaluatePolicies");
      }
      // verify the required parameter 'evaluatePoliciesRequest' is set
      if (evaluatePoliciesRequest === undefined || evaluatePoliciesRequest === null) {
        throw new Error("Missing the required parameter 'evaluatePoliciesRequest' when calling policySetsEvaluatePolicies");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EvaluatePoliciesResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{name}/evaluatePolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
