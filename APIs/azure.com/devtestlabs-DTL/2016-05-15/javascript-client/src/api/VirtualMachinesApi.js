/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicableSchedule from '../model/ApplicableSchedule';
import ApplyArtifactsRequest from '../model/ApplyArtifactsRequest';
import CloudError from '../model/CloudError';
import DataDiskProperties from '../model/DataDiskProperties';
import DetachDataDiskProperties from '../model/DetachDataDiskProperties';
import LabVirtualMachine from '../model/LabVirtualMachine';
import LabVirtualMachineFragment from '../model/LabVirtualMachineFragment';
import ResponseWithContinuationLabVirtualMachine from '../model/ResponseWithContinuationLabVirtualMachine';

/**
* VirtualMachines service.
* @module api/VirtualMachinesApi
* @version 2016-05-15
*/
export default class VirtualMachinesApi {

    /**
    * Constructs a new VirtualMachinesApi. 
    * @alias module:api/VirtualMachinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the virtualMachinesAddDataDisk operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesAddDataDiskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a new or existing data disk to virtual machine. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:model/DataDiskProperties} dataDiskProperties Request body for adding a new or existing data disk to a virtual machine.
     * @param {module:api/VirtualMachinesApi~virtualMachinesAddDataDiskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesAddDataDisk(subscriptionId, resourceGroupName, labName, name, apiVersion, dataDiskProperties, callback) {
      let postBody = dataDiskProperties;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesAddDataDisk");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesAddDataDisk");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesAddDataDisk");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesAddDataDisk");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesAddDataDisk");
      }
      // verify the required parameter 'dataDiskProperties' is set
      if (dataDiskProperties === undefined || dataDiskProperties === null) {
        throw new Error("Missing the required parameter 'dataDiskProperties' when calling virtualMachinesAddDataDisk");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/addDataDisk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesApplyArtifacts operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesApplyArtifactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply artifacts to virtual machine. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:model/ApplyArtifactsRequest} applyArtifactsRequest Request body for applying artifacts to a virtual machine.
     * @param {module:api/VirtualMachinesApi~virtualMachinesApplyArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesApplyArtifacts(subscriptionId, resourceGroupName, labName, name, apiVersion, applyArtifactsRequest, callback) {
      let postBody = applyArtifactsRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesApplyArtifacts");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesApplyArtifacts");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesApplyArtifacts");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesApplyArtifacts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesApplyArtifacts");
      }
      // verify the required parameter 'applyArtifactsRequest' is set
      if (applyArtifactsRequest === undefined || applyArtifactsRequest === null) {
        throw new Error("Missing the required parameter 'applyArtifactsRequest' when calling virtualMachinesApplyArtifacts");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/applyArtifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesClaim operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesClaimCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Take ownership of an existing virtual machine This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:api/VirtualMachinesApi~virtualMachinesClaimCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesClaim(subscriptionId, resourceGroupName, labName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesClaim");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesClaim");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesClaim");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesClaim");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesClaim");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesCreateOrUpdate operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabVirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace an existing Virtual machine. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:model/LabVirtualMachine} labVirtualMachine A virtual machine.
     * @param {module:api/VirtualMachinesApi~virtualMachinesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabVirtualMachine}
     */
    virtualMachinesCreateOrUpdate(subscriptionId, resourceGroupName, labName, name, apiVersion, labVirtualMachine, callback) {
      let postBody = labVirtualMachine;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'labVirtualMachine' is set
      if (labVirtualMachine === undefined || labVirtualMachine === null) {
        throw new Error("Missing the required parameter 'labVirtualMachine' when calling virtualMachinesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabVirtualMachine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesDelete operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete virtual machine. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:api/VirtualMachinesApi~virtualMachinesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesDelete(subscriptionId, resourceGroupName, labName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesDelete");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesDetachDataDisk operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesDetachDataDiskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detach the specified disk from the virtual machine. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:model/DetachDataDiskProperties} detachDataDiskProperties Request body for detaching data disk from a virtual machine.
     * @param {module:api/VirtualMachinesApi~virtualMachinesDetachDataDiskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesDetachDataDisk(subscriptionId, resourceGroupName, labName, name, apiVersion, detachDataDiskProperties, callback) {
      let postBody = detachDataDiskProperties;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesDetachDataDisk");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesDetachDataDisk");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesDetachDataDisk");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesDetachDataDisk");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesDetachDataDisk");
      }
      // verify the required parameter 'detachDataDiskProperties' is set
      if (detachDataDiskProperties === undefined || detachDataDiskProperties === null) {
        throw new Error("Missing the required parameter 'detachDataDiskProperties' when calling virtualMachinesDetachDataDisk");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/detachDataDisk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesGet operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabVirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get virtual machine.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'
     * @param {module:api/VirtualMachinesApi~virtualMachinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabVirtualMachine}
     */
    virtualMachinesGet(subscriptionId, resourceGroupName, labName, name, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesGet");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabVirtualMachine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesList operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationLabVirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List virtual machines in a given lab.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'
     * @param {String} [filter] The filter to apply to the operation.
     * @param {Number} [top] The maximum number of resources to return from the operation.
     * @param {String} [orderby] The ordering expression for the results, using OData notation.
     * @param {module:api/VirtualMachinesApi~virtualMachinesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationLabVirtualMachine}
     */
    virtualMachinesList(subscriptionId, resourceGroupName, labName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesList");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseWithContinuationLabVirtualMachine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesListApplicableSchedules operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesListApplicableSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicableSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all applicable schedules
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:api/VirtualMachinesApi~virtualMachinesListApplicableSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicableSchedule}
     */
    virtualMachinesListApplicableSchedules(subscriptionId, resourceGroupName, labName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesListApplicableSchedules");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesListApplicableSchedules");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesListApplicableSchedules");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesListApplicableSchedules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesListApplicableSchedules");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicableSchedule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/listApplicableSchedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesStart operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a virtual machine. This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:api/VirtualMachinesApi~virtualMachinesStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesStart(subscriptionId, resourceGroupName, labName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesStart");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesStart");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesStop operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a virtual machine This operation can take a while to complete.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:api/VirtualMachinesApi~virtualMachinesStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesStop(subscriptionId, resourceGroupName, labName, name, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesStop");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesStop");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesStop");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesStop");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesUpdate operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabVirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify properties of virtual machines.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labName The name of the lab.
     * @param {String} name The name of the virtual machine.
     * @param {String} apiVersion Client API version.
     * @param {module:model/LabVirtualMachineFragment} labVirtualMachine A virtual machine.
     * @param {module:api/VirtualMachinesApi~virtualMachinesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabVirtualMachine}
     */
    virtualMachinesUpdate(subscriptionId, resourceGroupName, labName, name, apiVersion, labVirtualMachine, callback) {
      let postBody = labVirtualMachine;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'labVirtualMachine' is set
      if (labVirtualMachine === undefined || labVirtualMachine === null) {
        throw new Error("Missing the required parameter 'labVirtualMachine' when calling virtualMachinesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labName': labName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabVirtualMachine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
