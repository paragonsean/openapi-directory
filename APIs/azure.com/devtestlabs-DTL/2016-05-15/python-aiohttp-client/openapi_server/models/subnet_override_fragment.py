# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subnet_shared_public_ip_address_configuration_fragment import SubnetSharedPublicIpAddressConfigurationFragment
from openapi_server import util


class SubnetOverrideFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lab_subnet_name: str=None, resource_id: str=None, shared_public_ip_address_configuration: SubnetSharedPublicIpAddressConfigurationFragment=None, use_in_vm_creation_permission: str=None, use_public_ip_address_permission: str=None, virtual_network_pool_name: str=None):
        """SubnetOverrideFragment - a model defined in OpenAPI

        :param lab_subnet_name: The lab_subnet_name of this SubnetOverrideFragment.
        :param resource_id: The resource_id of this SubnetOverrideFragment.
        :param shared_public_ip_address_configuration: The shared_public_ip_address_configuration of this SubnetOverrideFragment.
        :param use_in_vm_creation_permission: The use_in_vm_creation_permission of this SubnetOverrideFragment.
        :param use_public_ip_address_permission: The use_public_ip_address_permission of this SubnetOverrideFragment.
        :param virtual_network_pool_name: The virtual_network_pool_name of this SubnetOverrideFragment.
        """
        self.openapi_types = {
            'lab_subnet_name': str,
            'resource_id': str,
            'shared_public_ip_address_configuration': SubnetSharedPublicIpAddressConfigurationFragment,
            'use_in_vm_creation_permission': str,
            'use_public_ip_address_permission': str,
            'virtual_network_pool_name': str
        }

        self.attribute_map = {
            'lab_subnet_name': 'labSubnetName',
            'resource_id': 'resourceId',
            'shared_public_ip_address_configuration': 'sharedPublicIpAddressConfiguration',
            'use_in_vm_creation_permission': 'useInVmCreationPermission',
            'use_public_ip_address_permission': 'usePublicIpAddressPermission',
            'virtual_network_pool_name': 'virtualNetworkPoolName'
        }

        self._lab_subnet_name = lab_subnet_name
        self._resource_id = resource_id
        self._shared_public_ip_address_configuration = shared_public_ip_address_configuration
        self._use_in_vm_creation_permission = use_in_vm_creation_permission
        self._use_public_ip_address_permission = use_public_ip_address_permission
        self._virtual_network_pool_name = virtual_network_pool_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubnetOverrideFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubnetOverrideFragment of this SubnetOverrideFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lab_subnet_name(self):
        """Gets the lab_subnet_name of this SubnetOverrideFragment.

        The name given to the subnet within the lab.

        :return: The lab_subnet_name of this SubnetOverrideFragment.
        :rtype: str
        """
        return self._lab_subnet_name

    @lab_subnet_name.setter
    def lab_subnet_name(self, lab_subnet_name):
        """Sets the lab_subnet_name of this SubnetOverrideFragment.

        The name given to the subnet within the lab.

        :param lab_subnet_name: The lab_subnet_name of this SubnetOverrideFragment.
        :type lab_subnet_name: str
        """

        self._lab_subnet_name = lab_subnet_name

    @property
    def resource_id(self):
        """Gets the resource_id of this SubnetOverrideFragment.

        The resource ID of the subnet.

        :return: The resource_id of this SubnetOverrideFragment.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this SubnetOverrideFragment.

        The resource ID of the subnet.

        :param resource_id: The resource_id of this SubnetOverrideFragment.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def shared_public_ip_address_configuration(self):
        """Gets the shared_public_ip_address_configuration of this SubnetOverrideFragment.


        :return: The shared_public_ip_address_configuration of this SubnetOverrideFragment.
        :rtype: SubnetSharedPublicIpAddressConfigurationFragment
        """
        return self._shared_public_ip_address_configuration

    @shared_public_ip_address_configuration.setter
    def shared_public_ip_address_configuration(self, shared_public_ip_address_configuration):
        """Sets the shared_public_ip_address_configuration of this SubnetOverrideFragment.


        :param shared_public_ip_address_configuration: The shared_public_ip_address_configuration of this SubnetOverrideFragment.
        :type shared_public_ip_address_configuration: SubnetSharedPublicIpAddressConfigurationFragment
        """

        self._shared_public_ip_address_configuration = shared_public_ip_address_configuration

    @property
    def use_in_vm_creation_permission(self):
        """Gets the use_in_vm_creation_permission of this SubnetOverrideFragment.

        Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).

        :return: The use_in_vm_creation_permission of this SubnetOverrideFragment.
        :rtype: str
        """
        return self._use_in_vm_creation_permission

    @use_in_vm_creation_permission.setter
    def use_in_vm_creation_permission(self, use_in_vm_creation_permission):
        """Sets the use_in_vm_creation_permission of this SubnetOverrideFragment.

        Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).

        :param use_in_vm_creation_permission: The use_in_vm_creation_permission of this SubnetOverrideFragment.
        :type use_in_vm_creation_permission: str
        """
        allowed_values = ["Default", "Deny", "Allow"]  # noqa: E501
        if use_in_vm_creation_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `use_in_vm_creation_permission` ({0}), must be one of {1}"
                .format(use_in_vm_creation_permission, allowed_values)
            )

        self._use_in_vm_creation_permission = use_in_vm_creation_permission

    @property
    def use_public_ip_address_permission(self):
        """Gets the use_public_ip_address_permission of this SubnetOverrideFragment.

        Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).

        :return: The use_public_ip_address_permission of this SubnetOverrideFragment.
        :rtype: str
        """
        return self._use_public_ip_address_permission

    @use_public_ip_address_permission.setter
    def use_public_ip_address_permission(self, use_public_ip_address_permission):
        """Sets the use_public_ip_address_permission of this SubnetOverrideFragment.

        Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).

        :param use_public_ip_address_permission: The use_public_ip_address_permission of this SubnetOverrideFragment.
        :type use_public_ip_address_permission: str
        """
        allowed_values = ["Default", "Deny", "Allow"]  # noqa: E501
        if use_public_ip_address_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `use_public_ip_address_permission` ({0}), must be one of {1}"
                .format(use_public_ip_address_permission, allowed_values)
            )

        self._use_public_ip_address_permission = use_public_ip_address_permission

    @property
    def virtual_network_pool_name(self):
        """Gets the virtual_network_pool_name of this SubnetOverrideFragment.

        The virtual network pool associated with this subnet.

        :return: The virtual_network_pool_name of this SubnetOverrideFragment.
        :rtype: str
        """
        return self._virtual_network_pool_name

    @virtual_network_pool_name.setter
    def virtual_network_pool_name(self, virtual_network_pool_name):
        """Sets the virtual_network_pool_name of this SubnetOverrideFragment.

        The virtual network pool associated with this subnet.

        :param virtual_network_pool_name: The virtual_network_pool_name of this SubnetOverrideFragment.
        :type virtual_network_pool_name: str
        """

        self._virtual_network_pool_name = virtual_network_pool_name
