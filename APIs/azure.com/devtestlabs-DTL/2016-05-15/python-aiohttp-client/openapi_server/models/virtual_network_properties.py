# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_subnet import ExternalSubnet
from openapi_server.models.subnet import Subnet
from openapi_server.models.subnet_override import SubnetOverride
from openapi_server import util


class VirtualNetworkProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_subnets: List[Subnet]=None, created_date: datetime=None, description: str=None, external_provider_resource_id: str=None, external_subnets: List[ExternalSubnet]=None, provisioning_state: str=None, subnet_overrides: List[SubnetOverride]=None, unique_identifier: str=None):
        """VirtualNetworkProperties - a model defined in OpenAPI

        :param allowed_subnets: The allowed_subnets of this VirtualNetworkProperties.
        :param created_date: The created_date of this VirtualNetworkProperties.
        :param description: The description of this VirtualNetworkProperties.
        :param external_provider_resource_id: The external_provider_resource_id of this VirtualNetworkProperties.
        :param external_subnets: The external_subnets of this VirtualNetworkProperties.
        :param provisioning_state: The provisioning_state of this VirtualNetworkProperties.
        :param subnet_overrides: The subnet_overrides of this VirtualNetworkProperties.
        :param unique_identifier: The unique_identifier of this VirtualNetworkProperties.
        """
        self.openapi_types = {
            'allowed_subnets': List[Subnet],
            'created_date': datetime,
            'description': str,
            'external_provider_resource_id': str,
            'external_subnets': List[ExternalSubnet],
            'provisioning_state': str,
            'subnet_overrides': List[SubnetOverride],
            'unique_identifier': str
        }

        self.attribute_map = {
            'allowed_subnets': 'allowedSubnets',
            'created_date': 'createdDate',
            'description': 'description',
            'external_provider_resource_id': 'externalProviderResourceId',
            'external_subnets': 'externalSubnets',
            'provisioning_state': 'provisioningState',
            'subnet_overrides': 'subnetOverrides',
            'unique_identifier': 'uniqueIdentifier'
        }

        self._allowed_subnets = allowed_subnets
        self._created_date = created_date
        self._description = description
        self._external_provider_resource_id = external_provider_resource_id
        self._external_subnets = external_subnets
        self._provisioning_state = provisioning_state
        self._subnet_overrides = subnet_overrides
        self._unique_identifier = unique_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetworkProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetworkProperties of this VirtualNetworkProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_subnets(self):
        """Gets the allowed_subnets of this VirtualNetworkProperties.

        The allowed subnets of the virtual network.

        :return: The allowed_subnets of this VirtualNetworkProperties.
        :rtype: List[Subnet]
        """
        return self._allowed_subnets

    @allowed_subnets.setter
    def allowed_subnets(self, allowed_subnets):
        """Sets the allowed_subnets of this VirtualNetworkProperties.

        The allowed subnets of the virtual network.

        :param allowed_subnets: The allowed_subnets of this VirtualNetworkProperties.
        :type allowed_subnets: List[Subnet]
        """

        self._allowed_subnets = allowed_subnets

    @property
    def created_date(self):
        """Gets the created_date of this VirtualNetworkProperties.

        The creation date of the virtual network.

        :return: The created_date of this VirtualNetworkProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this VirtualNetworkProperties.

        The creation date of the virtual network.

        :param created_date: The created_date of this VirtualNetworkProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this VirtualNetworkProperties.

        The description of the virtual network.

        :return: The description of this VirtualNetworkProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualNetworkProperties.

        The description of the virtual network.

        :param description: The description of this VirtualNetworkProperties.
        :type description: str
        """

        self._description = description

    @property
    def external_provider_resource_id(self):
        """Gets the external_provider_resource_id of this VirtualNetworkProperties.

        The Microsoft.Network resource identifier of the virtual network.

        :return: The external_provider_resource_id of this VirtualNetworkProperties.
        :rtype: str
        """
        return self._external_provider_resource_id

    @external_provider_resource_id.setter
    def external_provider_resource_id(self, external_provider_resource_id):
        """Sets the external_provider_resource_id of this VirtualNetworkProperties.

        The Microsoft.Network resource identifier of the virtual network.

        :param external_provider_resource_id: The external_provider_resource_id of this VirtualNetworkProperties.
        :type external_provider_resource_id: str
        """

        self._external_provider_resource_id = external_provider_resource_id

    @property
    def external_subnets(self):
        """Gets the external_subnets of this VirtualNetworkProperties.

        The external subnet properties.

        :return: The external_subnets of this VirtualNetworkProperties.
        :rtype: List[ExternalSubnet]
        """
        return self._external_subnets

    @external_subnets.setter
    def external_subnets(self, external_subnets):
        """Sets the external_subnets of this VirtualNetworkProperties.

        The external subnet properties.

        :param external_subnets: The external_subnets of this VirtualNetworkProperties.
        :type external_subnets: List[ExternalSubnet]
        """

        self._external_subnets = external_subnets

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualNetworkProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this VirtualNetworkProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualNetworkProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this VirtualNetworkProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def subnet_overrides(self):
        """Gets the subnet_overrides of this VirtualNetworkProperties.

        The subnet overrides of the virtual network.

        :return: The subnet_overrides of this VirtualNetworkProperties.
        :rtype: List[SubnetOverride]
        """
        return self._subnet_overrides

    @subnet_overrides.setter
    def subnet_overrides(self, subnet_overrides):
        """Sets the subnet_overrides of this VirtualNetworkProperties.

        The subnet overrides of the virtual network.

        :param subnet_overrides: The subnet_overrides of this VirtualNetworkProperties.
        :type subnet_overrides: List[SubnetOverride]
        """

        self._subnet_overrides = subnet_overrides

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this VirtualNetworkProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this VirtualNetworkProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this VirtualNetworkProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this VirtualNetworkProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier
