# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.applicable_schedule import ApplicableSchedule
from openapi_server.models.artifact_deployment_status_properties import ArtifactDeploymentStatusProperties
from openapi_server.models.artifact_install_properties import ArtifactInstallProperties
from openapi_server.models.compute_vm_properties import ComputeVmProperties
from openapi_server.models.gallery_image_reference import GalleryImageReference
from openapi_server.models.network_interface_properties import NetworkInterfaceProperties
from openapi_server import util


class LabVirtualMachineProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_claim: bool=None, applicable_schedule: ApplicableSchedule=None, artifact_deployment_status: ArtifactDeploymentStatusProperties=None, artifacts: List[ArtifactInstallProperties]=None, compute_id: str=None, compute_vm: ComputeVmProperties=None, created_by_user: str=None, created_by_user_id: str=None, created_date: datetime=None, custom_image_id: str=None, disallow_public_ip_address: bool=None, environment_id: str=None, expiration_date: datetime=None, fqdn: str=None, gallery_image_reference: GalleryImageReference=None, is_authentication_with_ssh_key: bool=None, lab_subnet_name: str=None, lab_virtual_network_id: str=None, network_interface: NetworkInterfaceProperties=None, notes: str=None, os_type: str=None, owner_object_id: str=None, owner_user_principal_name: str=None, password: str=None, provisioning_state: str=None, size: str=None, ssh_key: str=None, storage_type: str=None, unique_identifier: str=None, user_name: str=None, virtual_machine_creation_source: str=None):
        """LabVirtualMachineProperties - a model defined in OpenAPI

        :param allow_claim: The allow_claim of this LabVirtualMachineProperties.
        :param applicable_schedule: The applicable_schedule of this LabVirtualMachineProperties.
        :param artifact_deployment_status: The artifact_deployment_status of this LabVirtualMachineProperties.
        :param artifacts: The artifacts of this LabVirtualMachineProperties.
        :param compute_id: The compute_id of this LabVirtualMachineProperties.
        :param compute_vm: The compute_vm of this LabVirtualMachineProperties.
        :param created_by_user: The created_by_user of this LabVirtualMachineProperties.
        :param created_by_user_id: The created_by_user_id of this LabVirtualMachineProperties.
        :param created_date: The created_date of this LabVirtualMachineProperties.
        :param custom_image_id: The custom_image_id of this LabVirtualMachineProperties.
        :param disallow_public_ip_address: The disallow_public_ip_address of this LabVirtualMachineProperties.
        :param environment_id: The environment_id of this LabVirtualMachineProperties.
        :param expiration_date: The expiration_date of this LabVirtualMachineProperties.
        :param fqdn: The fqdn of this LabVirtualMachineProperties.
        :param gallery_image_reference: The gallery_image_reference of this LabVirtualMachineProperties.
        :param is_authentication_with_ssh_key: The is_authentication_with_ssh_key of this LabVirtualMachineProperties.
        :param lab_subnet_name: The lab_subnet_name of this LabVirtualMachineProperties.
        :param lab_virtual_network_id: The lab_virtual_network_id of this LabVirtualMachineProperties.
        :param network_interface: The network_interface of this LabVirtualMachineProperties.
        :param notes: The notes of this LabVirtualMachineProperties.
        :param os_type: The os_type of this LabVirtualMachineProperties.
        :param owner_object_id: The owner_object_id of this LabVirtualMachineProperties.
        :param owner_user_principal_name: The owner_user_principal_name of this LabVirtualMachineProperties.
        :param password: The password of this LabVirtualMachineProperties.
        :param provisioning_state: The provisioning_state of this LabVirtualMachineProperties.
        :param size: The size of this LabVirtualMachineProperties.
        :param ssh_key: The ssh_key of this LabVirtualMachineProperties.
        :param storage_type: The storage_type of this LabVirtualMachineProperties.
        :param unique_identifier: The unique_identifier of this LabVirtualMachineProperties.
        :param user_name: The user_name of this LabVirtualMachineProperties.
        :param virtual_machine_creation_source: The virtual_machine_creation_source of this LabVirtualMachineProperties.
        """
        self.openapi_types = {
            'allow_claim': bool,
            'applicable_schedule': ApplicableSchedule,
            'artifact_deployment_status': ArtifactDeploymentStatusProperties,
            'artifacts': List[ArtifactInstallProperties],
            'compute_id': str,
            'compute_vm': ComputeVmProperties,
            'created_by_user': str,
            'created_by_user_id': str,
            'created_date': datetime,
            'custom_image_id': str,
            'disallow_public_ip_address': bool,
            'environment_id': str,
            'expiration_date': datetime,
            'fqdn': str,
            'gallery_image_reference': GalleryImageReference,
            'is_authentication_with_ssh_key': bool,
            'lab_subnet_name': str,
            'lab_virtual_network_id': str,
            'network_interface': NetworkInterfaceProperties,
            'notes': str,
            'os_type': str,
            'owner_object_id': str,
            'owner_user_principal_name': str,
            'password': str,
            'provisioning_state': str,
            'size': str,
            'ssh_key': str,
            'storage_type': str,
            'unique_identifier': str,
            'user_name': str,
            'virtual_machine_creation_source': str
        }

        self.attribute_map = {
            'allow_claim': 'allowClaim',
            'applicable_schedule': 'applicableSchedule',
            'artifact_deployment_status': 'artifactDeploymentStatus',
            'artifacts': 'artifacts',
            'compute_id': 'computeId',
            'compute_vm': 'computeVm',
            'created_by_user': 'createdByUser',
            'created_by_user_id': 'createdByUserId',
            'created_date': 'createdDate',
            'custom_image_id': 'customImageId',
            'disallow_public_ip_address': 'disallowPublicIpAddress',
            'environment_id': 'environmentId',
            'expiration_date': 'expirationDate',
            'fqdn': 'fqdn',
            'gallery_image_reference': 'galleryImageReference',
            'is_authentication_with_ssh_key': 'isAuthenticationWithSshKey',
            'lab_subnet_name': 'labSubnetName',
            'lab_virtual_network_id': 'labVirtualNetworkId',
            'network_interface': 'networkInterface',
            'notes': 'notes',
            'os_type': 'osType',
            'owner_object_id': 'ownerObjectId',
            'owner_user_principal_name': 'ownerUserPrincipalName',
            'password': 'password',
            'provisioning_state': 'provisioningState',
            'size': 'size',
            'ssh_key': 'sshKey',
            'storage_type': 'storageType',
            'unique_identifier': 'uniqueIdentifier',
            'user_name': 'userName',
            'virtual_machine_creation_source': 'virtualMachineCreationSource'
        }

        self._allow_claim = allow_claim
        self._applicable_schedule = applicable_schedule
        self._artifact_deployment_status = artifact_deployment_status
        self._artifacts = artifacts
        self._compute_id = compute_id
        self._compute_vm = compute_vm
        self._created_by_user = created_by_user
        self._created_by_user_id = created_by_user_id
        self._created_date = created_date
        self._custom_image_id = custom_image_id
        self._disallow_public_ip_address = disallow_public_ip_address
        self._environment_id = environment_id
        self._expiration_date = expiration_date
        self._fqdn = fqdn
        self._gallery_image_reference = gallery_image_reference
        self._is_authentication_with_ssh_key = is_authentication_with_ssh_key
        self._lab_subnet_name = lab_subnet_name
        self._lab_virtual_network_id = lab_virtual_network_id
        self._network_interface = network_interface
        self._notes = notes
        self._os_type = os_type
        self._owner_object_id = owner_object_id
        self._owner_user_principal_name = owner_user_principal_name
        self._password = password
        self._provisioning_state = provisioning_state
        self._size = size
        self._ssh_key = ssh_key
        self._storage_type = storage_type
        self._unique_identifier = unique_identifier
        self._user_name = user_name
        self._virtual_machine_creation_source = virtual_machine_creation_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabVirtualMachineProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabVirtualMachineProperties of this LabVirtualMachineProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_claim(self):
        """Gets the allow_claim of this LabVirtualMachineProperties.

        Indicates whether another user can take ownership of the virtual machine

        :return: The allow_claim of this LabVirtualMachineProperties.
        :rtype: bool
        """
        return self._allow_claim

    @allow_claim.setter
    def allow_claim(self, allow_claim):
        """Sets the allow_claim of this LabVirtualMachineProperties.

        Indicates whether another user can take ownership of the virtual machine

        :param allow_claim: The allow_claim of this LabVirtualMachineProperties.
        :type allow_claim: bool
        """

        self._allow_claim = allow_claim

    @property
    def applicable_schedule(self):
        """Gets the applicable_schedule of this LabVirtualMachineProperties.


        :return: The applicable_schedule of this LabVirtualMachineProperties.
        :rtype: ApplicableSchedule
        """
        return self._applicable_schedule

    @applicable_schedule.setter
    def applicable_schedule(self, applicable_schedule):
        """Sets the applicable_schedule of this LabVirtualMachineProperties.


        :param applicable_schedule: The applicable_schedule of this LabVirtualMachineProperties.
        :type applicable_schedule: ApplicableSchedule
        """

        self._applicable_schedule = applicable_schedule

    @property
    def artifact_deployment_status(self):
        """Gets the artifact_deployment_status of this LabVirtualMachineProperties.


        :return: The artifact_deployment_status of this LabVirtualMachineProperties.
        :rtype: ArtifactDeploymentStatusProperties
        """
        return self._artifact_deployment_status

    @artifact_deployment_status.setter
    def artifact_deployment_status(self, artifact_deployment_status):
        """Sets the artifact_deployment_status of this LabVirtualMachineProperties.


        :param artifact_deployment_status: The artifact_deployment_status of this LabVirtualMachineProperties.
        :type artifact_deployment_status: ArtifactDeploymentStatusProperties
        """

        self._artifact_deployment_status = artifact_deployment_status

    @property
    def artifacts(self):
        """Gets the artifacts of this LabVirtualMachineProperties.

        The artifacts to be installed on the virtual machine.

        :return: The artifacts of this LabVirtualMachineProperties.
        :rtype: List[ArtifactInstallProperties]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this LabVirtualMachineProperties.

        The artifacts to be installed on the virtual machine.

        :param artifacts: The artifacts of this LabVirtualMachineProperties.
        :type artifacts: List[ArtifactInstallProperties]
        """

        self._artifacts = artifacts

    @property
    def compute_id(self):
        """Gets the compute_id of this LabVirtualMachineProperties.

        The resource identifier (Microsoft.Compute) of the virtual machine.

        :return: The compute_id of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._compute_id

    @compute_id.setter
    def compute_id(self, compute_id):
        """Sets the compute_id of this LabVirtualMachineProperties.

        The resource identifier (Microsoft.Compute) of the virtual machine.

        :param compute_id: The compute_id of this LabVirtualMachineProperties.
        :type compute_id: str
        """

        self._compute_id = compute_id

    @property
    def compute_vm(self):
        """Gets the compute_vm of this LabVirtualMachineProperties.


        :return: The compute_vm of this LabVirtualMachineProperties.
        :rtype: ComputeVmProperties
        """
        return self._compute_vm

    @compute_vm.setter
    def compute_vm(self, compute_vm):
        """Sets the compute_vm of this LabVirtualMachineProperties.


        :param compute_vm: The compute_vm of this LabVirtualMachineProperties.
        :type compute_vm: ComputeVmProperties
        """

        self._compute_vm = compute_vm

    @property
    def created_by_user(self):
        """Gets the created_by_user of this LabVirtualMachineProperties.

        The email address of creator of the virtual machine.

        :return: The created_by_user of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this LabVirtualMachineProperties.

        The email address of creator of the virtual machine.

        :param created_by_user: The created_by_user of this LabVirtualMachineProperties.
        :type created_by_user: str
        """

        self._created_by_user = created_by_user

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this LabVirtualMachineProperties.

        The object identifier of the creator of the virtual machine.

        :return: The created_by_user_id of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this LabVirtualMachineProperties.

        The object identifier of the creator of the virtual machine.

        :param created_by_user_id: The created_by_user_id of this LabVirtualMachineProperties.
        :type created_by_user_id: str
        """

        self._created_by_user_id = created_by_user_id

    @property
    def created_date(self):
        """Gets the created_date of this LabVirtualMachineProperties.

        The creation date of the virtual machine.

        :return: The created_date of this LabVirtualMachineProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this LabVirtualMachineProperties.

        The creation date of the virtual machine.

        :param created_date: The created_date of this LabVirtualMachineProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def custom_image_id(self):
        """Gets the custom_image_id of this LabVirtualMachineProperties.

        The custom image identifier of the virtual machine.

        :return: The custom_image_id of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._custom_image_id

    @custom_image_id.setter
    def custom_image_id(self, custom_image_id):
        """Sets the custom_image_id of this LabVirtualMachineProperties.

        The custom image identifier of the virtual machine.

        :param custom_image_id: The custom_image_id of this LabVirtualMachineProperties.
        :type custom_image_id: str
        """

        self._custom_image_id = custom_image_id

    @property
    def disallow_public_ip_address(self):
        """Gets the disallow_public_ip_address of this LabVirtualMachineProperties.

        Indicates whether the virtual machine is to be created without a public IP address.

        :return: The disallow_public_ip_address of this LabVirtualMachineProperties.
        :rtype: bool
        """
        return self._disallow_public_ip_address

    @disallow_public_ip_address.setter
    def disallow_public_ip_address(self, disallow_public_ip_address):
        """Sets the disallow_public_ip_address of this LabVirtualMachineProperties.

        Indicates whether the virtual machine is to be created without a public IP address.

        :param disallow_public_ip_address: The disallow_public_ip_address of this LabVirtualMachineProperties.
        :type disallow_public_ip_address: bool
        """

        self._disallow_public_ip_address = disallow_public_ip_address

    @property
    def environment_id(self):
        """Gets the environment_id of this LabVirtualMachineProperties.

        The resource ID of the environment that contains this virtual machine, if any.

        :return: The environment_id of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this LabVirtualMachineProperties.

        The resource ID of the environment that contains this virtual machine, if any.

        :param environment_id: The environment_id of this LabVirtualMachineProperties.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def expiration_date(self):
        """Gets the expiration_date of this LabVirtualMachineProperties.

        The expiration date for VM.

        :return: The expiration_date of this LabVirtualMachineProperties.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this LabVirtualMachineProperties.

        The expiration date for VM.

        :param expiration_date: The expiration_date of this LabVirtualMachineProperties.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def fqdn(self):
        """Gets the fqdn of this LabVirtualMachineProperties.

        The fully-qualified domain name of the virtual machine.

        :return: The fqdn of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this LabVirtualMachineProperties.

        The fully-qualified domain name of the virtual machine.

        :param fqdn: The fqdn of this LabVirtualMachineProperties.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def gallery_image_reference(self):
        """Gets the gallery_image_reference of this LabVirtualMachineProperties.


        :return: The gallery_image_reference of this LabVirtualMachineProperties.
        :rtype: GalleryImageReference
        """
        return self._gallery_image_reference

    @gallery_image_reference.setter
    def gallery_image_reference(self, gallery_image_reference):
        """Sets the gallery_image_reference of this LabVirtualMachineProperties.


        :param gallery_image_reference: The gallery_image_reference of this LabVirtualMachineProperties.
        :type gallery_image_reference: GalleryImageReference
        """

        self._gallery_image_reference = gallery_image_reference

    @property
    def is_authentication_with_ssh_key(self):
        """Gets the is_authentication_with_ssh_key of this LabVirtualMachineProperties.

        Indicates whether this virtual machine uses an SSH key for authentication.

        :return: The is_authentication_with_ssh_key of this LabVirtualMachineProperties.
        :rtype: bool
        """
        return self._is_authentication_with_ssh_key

    @is_authentication_with_ssh_key.setter
    def is_authentication_with_ssh_key(self, is_authentication_with_ssh_key):
        """Sets the is_authentication_with_ssh_key of this LabVirtualMachineProperties.

        Indicates whether this virtual machine uses an SSH key for authentication.

        :param is_authentication_with_ssh_key: The is_authentication_with_ssh_key of this LabVirtualMachineProperties.
        :type is_authentication_with_ssh_key: bool
        """

        self._is_authentication_with_ssh_key = is_authentication_with_ssh_key

    @property
    def lab_subnet_name(self):
        """Gets the lab_subnet_name of this LabVirtualMachineProperties.

        The lab subnet name of the virtual machine.

        :return: The lab_subnet_name of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._lab_subnet_name

    @lab_subnet_name.setter
    def lab_subnet_name(self, lab_subnet_name):
        """Sets the lab_subnet_name of this LabVirtualMachineProperties.

        The lab subnet name of the virtual machine.

        :param lab_subnet_name: The lab_subnet_name of this LabVirtualMachineProperties.
        :type lab_subnet_name: str
        """

        self._lab_subnet_name = lab_subnet_name

    @property
    def lab_virtual_network_id(self):
        """Gets the lab_virtual_network_id of this LabVirtualMachineProperties.

        The lab virtual network identifier of the virtual machine.

        :return: The lab_virtual_network_id of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._lab_virtual_network_id

    @lab_virtual_network_id.setter
    def lab_virtual_network_id(self, lab_virtual_network_id):
        """Sets the lab_virtual_network_id of this LabVirtualMachineProperties.

        The lab virtual network identifier of the virtual machine.

        :param lab_virtual_network_id: The lab_virtual_network_id of this LabVirtualMachineProperties.
        :type lab_virtual_network_id: str
        """

        self._lab_virtual_network_id = lab_virtual_network_id

    @property
    def network_interface(self):
        """Gets the network_interface of this LabVirtualMachineProperties.


        :return: The network_interface of this LabVirtualMachineProperties.
        :rtype: NetworkInterfaceProperties
        """
        return self._network_interface

    @network_interface.setter
    def network_interface(self, network_interface):
        """Sets the network_interface of this LabVirtualMachineProperties.


        :param network_interface: The network_interface of this LabVirtualMachineProperties.
        :type network_interface: NetworkInterfaceProperties
        """

        self._network_interface = network_interface

    @property
    def notes(self):
        """Gets the notes of this LabVirtualMachineProperties.

        The notes of the virtual machine.

        :return: The notes of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this LabVirtualMachineProperties.

        The notes of the virtual machine.

        :param notes: The notes of this LabVirtualMachineProperties.
        :type notes: str
        """

        self._notes = notes

    @property
    def os_type(self):
        """Gets the os_type of this LabVirtualMachineProperties.

        The OS type of the virtual machine.

        :return: The os_type of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this LabVirtualMachineProperties.

        The OS type of the virtual machine.

        :param os_type: The os_type of this LabVirtualMachineProperties.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def owner_object_id(self):
        """Gets the owner_object_id of this LabVirtualMachineProperties.

        The object identifier of the owner of the virtual machine.

        :return: The owner_object_id of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._owner_object_id

    @owner_object_id.setter
    def owner_object_id(self, owner_object_id):
        """Sets the owner_object_id of this LabVirtualMachineProperties.

        The object identifier of the owner of the virtual machine.

        :param owner_object_id: The owner_object_id of this LabVirtualMachineProperties.
        :type owner_object_id: str
        """

        self._owner_object_id = owner_object_id

    @property
    def owner_user_principal_name(self):
        """Gets the owner_user_principal_name of this LabVirtualMachineProperties.

        The user principal name of the virtual machine owner.

        :return: The owner_user_principal_name of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._owner_user_principal_name

    @owner_user_principal_name.setter
    def owner_user_principal_name(self, owner_user_principal_name):
        """Sets the owner_user_principal_name of this LabVirtualMachineProperties.

        The user principal name of the virtual machine owner.

        :param owner_user_principal_name: The owner_user_principal_name of this LabVirtualMachineProperties.
        :type owner_user_principal_name: str
        """

        self._owner_user_principal_name = owner_user_principal_name

    @property
    def password(self):
        """Gets the password of this LabVirtualMachineProperties.

        The password of the virtual machine administrator.

        :return: The password of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LabVirtualMachineProperties.

        The password of the virtual machine administrator.

        :param password: The password of this LabVirtualMachineProperties.
        :type password: str
        """

        self._password = password

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LabVirtualMachineProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LabVirtualMachineProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this LabVirtualMachineProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def size(self):
        """Gets the size of this LabVirtualMachineProperties.

        The size of the virtual machine.

        :return: The size of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LabVirtualMachineProperties.

        The size of the virtual machine.

        :param size: The size of this LabVirtualMachineProperties.
        :type size: str
        """

        self._size = size

    @property
    def ssh_key(self):
        """Gets the ssh_key of this LabVirtualMachineProperties.

        The SSH key of the virtual machine administrator.

        :return: The ssh_key of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._ssh_key

    @ssh_key.setter
    def ssh_key(self, ssh_key):
        """Sets the ssh_key of this LabVirtualMachineProperties.

        The SSH key of the virtual machine administrator.

        :param ssh_key: The ssh_key of this LabVirtualMachineProperties.
        :type ssh_key: str
        """

        self._ssh_key = ssh_key

    @property
    def storage_type(self):
        """Gets the storage_type of this LabVirtualMachineProperties.

        Storage type to use for virtual machine (i.e. Standard, Premium).

        :return: The storage_type of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this LabVirtualMachineProperties.

        Storage type to use for virtual machine (i.e. Standard, Premium).

        :param storage_type: The storage_type of this LabVirtualMachineProperties.
        :type storage_type: str
        """

        self._storage_type = storage_type

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this LabVirtualMachineProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this LabVirtualMachineProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this LabVirtualMachineProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier

    @property
    def user_name(self):
        """Gets the user_name of this LabVirtualMachineProperties.

        The user name of the virtual machine.

        :return: The user_name of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LabVirtualMachineProperties.

        The user name of the virtual machine.

        :param user_name: The user_name of this LabVirtualMachineProperties.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def virtual_machine_creation_source(self):
        """Gets the virtual_machine_creation_source of this LabVirtualMachineProperties.

        Tells source of creation of lab virtual machine. Output property only.

        :return: The virtual_machine_creation_source of this LabVirtualMachineProperties.
        :rtype: str
        """
        return self._virtual_machine_creation_source

    @virtual_machine_creation_source.setter
    def virtual_machine_creation_source(self, virtual_machine_creation_source):
        """Sets the virtual_machine_creation_source of this LabVirtualMachineProperties.

        Tells source of creation of lab virtual machine. Output property only.

        :param virtual_machine_creation_source: The virtual_machine_creation_source of this LabVirtualMachineProperties.
        :type virtual_machine_creation_source: str
        """
        allowed_values = ["FromCustomImage", "FromGalleryImage"]  # noqa: E501
        if virtual_machine_creation_source not in allowed_values:
            raise ValueError(
                "Invalid value for `virtual_machine_creation_source` ({0}), must be one of {1}"
                .format(virtual_machine_creation_source, allowed_values)
            )

        self._virtual_machine_creation_source = virtual_machine_creation_source
