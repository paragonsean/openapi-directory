# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabCostSummaryProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_lab_cost: float=None):
        """LabCostSummaryProperties - a model defined in OpenAPI

        :param estimated_lab_cost: The estimated_lab_cost of this LabCostSummaryProperties.
        """
        self.openapi_types = {
            'estimated_lab_cost': float
        }

        self.attribute_map = {
            'estimated_lab_cost': 'estimatedLabCost'
        }

        self._estimated_lab_cost = estimated_lab_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabCostSummaryProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabCostSummaryProperties of this LabCostSummaryProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_lab_cost(self):
        """Gets the estimated_lab_cost of this LabCostSummaryProperties.

        The cost component of the cost item.

        :return: The estimated_lab_cost of this LabCostSummaryProperties.
        :rtype: float
        """
        return self._estimated_lab_cost

    @estimated_lab_cost.setter
    def estimated_lab_cost(self, estimated_lab_cost):
        """Sets the estimated_lab_cost of this LabCostSummaryProperties.

        The cost component of the cost item.

        :param estimated_lab_cost: The estimated_lab_cost of this LabCostSummaryProperties.
        :type estimated_lab_cost: float
        """

        self._estimated_lab_cost = estimated_lab_cost
