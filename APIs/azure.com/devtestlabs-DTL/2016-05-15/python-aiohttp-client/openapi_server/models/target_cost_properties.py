# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_threshold_properties import CostThresholdProperties
from openapi_server import util


class TargetCostProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_thresholds: List[CostThresholdProperties]=None, cycle_end_date_time: datetime=None, cycle_start_date_time: datetime=None, cycle_type: str=None, status: str=None, target: int=None):
        """TargetCostProperties - a model defined in OpenAPI

        :param cost_thresholds: The cost_thresholds of this TargetCostProperties.
        :param cycle_end_date_time: The cycle_end_date_time of this TargetCostProperties.
        :param cycle_start_date_time: The cycle_start_date_time of this TargetCostProperties.
        :param cycle_type: The cycle_type of this TargetCostProperties.
        :param status: The status of this TargetCostProperties.
        :param target: The target of this TargetCostProperties.
        """
        self.openapi_types = {
            'cost_thresholds': List[CostThresholdProperties],
            'cycle_end_date_time': datetime,
            'cycle_start_date_time': datetime,
            'cycle_type': str,
            'status': str,
            'target': int
        }

        self.attribute_map = {
            'cost_thresholds': 'costThresholds',
            'cycle_end_date_time': 'cycleEndDateTime',
            'cycle_start_date_time': 'cycleStartDateTime',
            'cycle_type': 'cycleType',
            'status': 'status',
            'target': 'target'
        }

        self._cost_thresholds = cost_thresholds
        self._cycle_end_date_time = cycle_end_date_time
        self._cycle_start_date_time = cycle_start_date_time
        self._cycle_type = cycle_type
        self._status = status
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetCostProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetCostProperties of this TargetCostProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_thresholds(self):
        """Gets the cost_thresholds of this TargetCostProperties.

        Cost thresholds.

        :return: The cost_thresholds of this TargetCostProperties.
        :rtype: List[CostThresholdProperties]
        """
        return self._cost_thresholds

    @cost_thresholds.setter
    def cost_thresholds(self, cost_thresholds):
        """Sets the cost_thresholds of this TargetCostProperties.

        Cost thresholds.

        :param cost_thresholds: The cost_thresholds of this TargetCostProperties.
        :type cost_thresholds: List[CostThresholdProperties]
        """

        self._cost_thresholds = cost_thresholds

    @property
    def cycle_end_date_time(self):
        """Gets the cycle_end_date_time of this TargetCostProperties.

        Reporting cycle end date.

        :return: The cycle_end_date_time of this TargetCostProperties.
        :rtype: datetime
        """
        return self._cycle_end_date_time

    @cycle_end_date_time.setter
    def cycle_end_date_time(self, cycle_end_date_time):
        """Sets the cycle_end_date_time of this TargetCostProperties.

        Reporting cycle end date.

        :param cycle_end_date_time: The cycle_end_date_time of this TargetCostProperties.
        :type cycle_end_date_time: datetime
        """

        self._cycle_end_date_time = cycle_end_date_time

    @property
    def cycle_start_date_time(self):
        """Gets the cycle_start_date_time of this TargetCostProperties.

        Reporting cycle start date.

        :return: The cycle_start_date_time of this TargetCostProperties.
        :rtype: datetime
        """
        return self._cycle_start_date_time

    @cycle_start_date_time.setter
    def cycle_start_date_time(self, cycle_start_date_time):
        """Sets the cycle_start_date_time of this TargetCostProperties.

        Reporting cycle start date.

        :param cycle_start_date_time: The cycle_start_date_time of this TargetCostProperties.
        :type cycle_start_date_time: datetime
        """

        self._cycle_start_date_time = cycle_start_date_time

    @property
    def cycle_type(self):
        """Gets the cycle_type of this TargetCostProperties.

        Reporting cycle type.

        :return: The cycle_type of this TargetCostProperties.
        :rtype: str
        """
        return self._cycle_type

    @cycle_type.setter
    def cycle_type(self, cycle_type):
        """Sets the cycle_type of this TargetCostProperties.

        Reporting cycle type.

        :param cycle_type: The cycle_type of this TargetCostProperties.
        :type cycle_type: str
        """
        allowed_values = ["CalendarMonth", "Custom"]  # noqa: E501
        if cycle_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cycle_type` ({0}), must be one of {1}"
                .format(cycle_type, allowed_values)
            )

        self._cycle_type = cycle_type

    @property
    def status(self):
        """Gets the status of this TargetCostProperties.

        Target cost status

        :return: The status of this TargetCostProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TargetCostProperties.

        Target cost status

        :param status: The status of this TargetCostProperties.
        :type status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target(self):
        """Gets the target of this TargetCostProperties.

        Lab target cost

        :return: The target of this TargetCostProperties.
        :rtype: int
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this TargetCostProperties.

        Lab target cost

        :param target: The target of this TargetCostProperties.
        :type target: int
        """

        self._target = target
