# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: datetime=None, description: str=None, evaluator_type: str=None, fact_data: str=None, fact_name: str=None, provisioning_state: str=None, status: str=None, threshold: str=None, unique_identifier: str=None):
        """PolicyProperties - a model defined in OpenAPI

        :param created_date: The created_date of this PolicyProperties.
        :param description: The description of this PolicyProperties.
        :param evaluator_type: The evaluator_type of this PolicyProperties.
        :param fact_data: The fact_data of this PolicyProperties.
        :param fact_name: The fact_name of this PolicyProperties.
        :param provisioning_state: The provisioning_state of this PolicyProperties.
        :param status: The status of this PolicyProperties.
        :param threshold: The threshold of this PolicyProperties.
        :param unique_identifier: The unique_identifier of this PolicyProperties.
        """
        self.openapi_types = {
            'created_date': datetime,
            'description': str,
            'evaluator_type': str,
            'fact_data': str,
            'fact_name': str,
            'provisioning_state': str,
            'status': str,
            'threshold': str,
            'unique_identifier': str
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'description': 'description',
            'evaluator_type': 'evaluatorType',
            'fact_data': 'factData',
            'fact_name': 'factName',
            'provisioning_state': 'provisioningState',
            'status': 'status',
            'threshold': 'threshold',
            'unique_identifier': 'uniqueIdentifier'
        }

        self._created_date = created_date
        self._description = description
        self._evaluator_type = evaluator_type
        self._fact_data = fact_data
        self._fact_name = fact_name
        self._provisioning_state = provisioning_state
        self._status = status
        self._threshold = threshold
        self._unique_identifier = unique_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyProperties of this PolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this PolicyProperties.

        The creation date of the policy.

        :return: The created_date of this PolicyProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this PolicyProperties.

        The creation date of the policy.

        :param created_date: The created_date of this PolicyProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this PolicyProperties.

        The description of the policy.

        :return: The description of this PolicyProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyProperties.

        The description of the policy.

        :param description: The description of this PolicyProperties.
        :type description: str
        """

        self._description = description

    @property
    def evaluator_type(self):
        """Gets the evaluator_type of this PolicyProperties.

        The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).

        :return: The evaluator_type of this PolicyProperties.
        :rtype: str
        """
        return self._evaluator_type

    @evaluator_type.setter
    def evaluator_type(self, evaluator_type):
        """Sets the evaluator_type of this PolicyProperties.

        The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).

        :param evaluator_type: The evaluator_type of this PolicyProperties.
        :type evaluator_type: str
        """
        allowed_values = ["AllowedValuesPolicy", "MaxValuePolicy"]  # noqa: E501
        if evaluator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluator_type` ({0}), must be one of {1}"
                .format(evaluator_type, allowed_values)
            )

        self._evaluator_type = evaluator_type

    @property
    def fact_data(self):
        """Gets the fact_data of this PolicyProperties.

        The fact data of the policy.

        :return: The fact_data of this PolicyProperties.
        :rtype: str
        """
        return self._fact_data

    @fact_data.setter
    def fact_data(self, fact_data):
        """Sets the fact_data of this PolicyProperties.

        The fact data of the policy.

        :param fact_data: The fact_data of this PolicyProperties.
        :type fact_data: str
        """

        self._fact_data = fact_data

    @property
    def fact_name(self):
        """Gets the fact_name of this PolicyProperties.

        The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.

        :return: The fact_name of this PolicyProperties.
        :rtype: str
        """
        return self._fact_name

    @fact_name.setter
    def fact_name(self, fact_name):
        """Sets the fact_name of this PolicyProperties.

        The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.

        :param fact_name: The fact_name of this PolicyProperties.
        :type fact_name: str
        """
        allowed_values = ["UserOwnedLabVmCount", "UserOwnedLabPremiumVmCount", "LabVmCount", "LabPremiumVmCount", "LabVmSize", "GalleryImage", "UserOwnedLabVmCountInSubnet", "LabTargetCost"]  # noqa: E501
        if fact_name not in allowed_values:
            raise ValueError(
                "Invalid value for `fact_name` ({0}), must be one of {1}"
                .format(fact_name, allowed_values)
            )

        self._fact_name = fact_name

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PolicyProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this PolicyProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PolicyProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this PolicyProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def status(self):
        """Gets the status of this PolicyProperties.

        The status of the policy.

        :return: The status of this PolicyProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PolicyProperties.

        The status of the policy.

        :param status: The status of this PolicyProperties.
        :type status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def threshold(self):
        """Gets the threshold of this PolicyProperties.

        The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).

        :return: The threshold of this PolicyProperties.
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this PolicyProperties.

        The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).

        :param threshold: The threshold of this PolicyProperties.
        :type threshold: str
        """

        self._threshold = threshold

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this PolicyProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this PolicyProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this PolicyProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this PolicyProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier
