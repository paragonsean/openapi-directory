# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShutdownNotificationContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delay_url120: str=None, delay_url60: str=None, event_type: str=None, guid: str=None, lab_name: str=None, owner: str=None, resource_group_name: str=None, skip_url: str=None, subscription_id: str=None, text: str=None, vm_name: str=None):
        """ShutdownNotificationContent - a model defined in OpenAPI

        :param delay_url120: The delay_url120 of this ShutdownNotificationContent.
        :param delay_url60: The delay_url60 of this ShutdownNotificationContent.
        :param event_type: The event_type of this ShutdownNotificationContent.
        :param guid: The guid of this ShutdownNotificationContent.
        :param lab_name: The lab_name of this ShutdownNotificationContent.
        :param owner: The owner of this ShutdownNotificationContent.
        :param resource_group_name: The resource_group_name of this ShutdownNotificationContent.
        :param skip_url: The skip_url of this ShutdownNotificationContent.
        :param subscription_id: The subscription_id of this ShutdownNotificationContent.
        :param text: The text of this ShutdownNotificationContent.
        :param vm_name: The vm_name of this ShutdownNotificationContent.
        """
        self.openapi_types = {
            'delay_url120': str,
            'delay_url60': str,
            'event_type': str,
            'guid': str,
            'lab_name': str,
            'owner': str,
            'resource_group_name': str,
            'skip_url': str,
            'subscription_id': str,
            'text': str,
            'vm_name': str
        }

        self.attribute_map = {
            'delay_url120': 'delayUrl120',
            'delay_url60': 'delayUrl60',
            'event_type': 'eventType',
            'guid': 'guid',
            'lab_name': 'labName',
            'owner': 'owner',
            'resource_group_name': 'resourceGroupName',
            'skip_url': 'skipUrl',
            'subscription_id': 'subscriptionId',
            'text': 'text',
            'vm_name': 'vmName'
        }

        self._delay_url120 = delay_url120
        self._delay_url60 = delay_url60
        self._event_type = event_type
        self._guid = guid
        self._lab_name = lab_name
        self._owner = owner
        self._resource_group_name = resource_group_name
        self._skip_url = skip_url
        self._subscription_id = subscription_id
        self._text = text
        self._vm_name = vm_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShutdownNotificationContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShutdownNotificationContent of this ShutdownNotificationContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delay_url120(self):
        """Gets the delay_url120 of this ShutdownNotificationContent.

        The URL to delay shutdown by 2 hours.

        :return: The delay_url120 of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._delay_url120

    @delay_url120.setter
    def delay_url120(self, delay_url120):
        """Sets the delay_url120 of this ShutdownNotificationContent.

        The URL to delay shutdown by 2 hours.

        :param delay_url120: The delay_url120 of this ShutdownNotificationContent.
        :type delay_url120: str
        """

        self._delay_url120 = delay_url120

    @property
    def delay_url60(self):
        """Gets the delay_url60 of this ShutdownNotificationContent.

        The URL to delay shutdown by 60 minutes.

        :return: The delay_url60 of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._delay_url60

    @delay_url60.setter
    def delay_url60(self, delay_url60):
        """Sets the delay_url60 of this ShutdownNotificationContent.

        The URL to delay shutdown by 60 minutes.

        :param delay_url60: The delay_url60 of this ShutdownNotificationContent.
        :type delay_url60: str
        """

        self._delay_url60 = delay_url60

    @property
    def event_type(self):
        """Gets the event_type of this ShutdownNotificationContent.

        The event for which a notification will be sent.

        :return: The event_type of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ShutdownNotificationContent.

        The event for which a notification will be sent.

        :param event_type: The event_type of this ShutdownNotificationContent.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def guid(self):
        """Gets the guid of this ShutdownNotificationContent.

        The GUID for the virtual machine to be shut down.

        :return: The guid of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ShutdownNotificationContent.

        The GUID for the virtual machine to be shut down.

        :param guid: The guid of this ShutdownNotificationContent.
        :type guid: str
        """

        self._guid = guid

    @property
    def lab_name(self):
        """Gets the lab_name of this ShutdownNotificationContent.

        The lab for the schedule.

        :return: The lab_name of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._lab_name

    @lab_name.setter
    def lab_name(self, lab_name):
        """Sets the lab_name of this ShutdownNotificationContent.

        The lab for the schedule.

        :param lab_name: The lab_name of this ShutdownNotificationContent.
        :type lab_name: str
        """

        self._lab_name = lab_name

    @property
    def owner(self):
        """Gets the owner of this ShutdownNotificationContent.

        The owner of the virtual machine.

        :return: The owner of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ShutdownNotificationContent.

        The owner of the virtual machine.

        :param owner: The owner of this ShutdownNotificationContent.
        :type owner: str
        """

        self._owner = owner

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this ShutdownNotificationContent.

        The resource group name for the schedule.

        :return: The resource_group_name of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this ShutdownNotificationContent.

        The resource group name for the schedule.

        :param resource_group_name: The resource_group_name of this ShutdownNotificationContent.
        :type resource_group_name: str
        """

        self._resource_group_name = resource_group_name

    @property
    def skip_url(self):
        """Gets the skip_url of this ShutdownNotificationContent.

        The URL to skip auto-shutdown.

        :return: The skip_url of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._skip_url

    @skip_url.setter
    def skip_url(self, skip_url):
        """Sets the skip_url of this ShutdownNotificationContent.

        The URL to skip auto-shutdown.

        :param skip_url: The skip_url of this ShutdownNotificationContent.
        :type skip_url: str
        """

        self._skip_url = skip_url

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ShutdownNotificationContent.

        The subscription ID for the schedule.

        :return: The subscription_id of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ShutdownNotificationContent.

        The subscription ID for the schedule.

        :param subscription_id: The subscription_id of this ShutdownNotificationContent.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def text(self):
        """Gets the text of this ShutdownNotificationContent.

        The text for the notification.

        :return: The text of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ShutdownNotificationContent.

        The text for the notification.

        :param text: The text of this ShutdownNotificationContent.
        :type text: str
        """

        self._text = text

    @property
    def vm_name(self):
        """Gets the vm_name of this ShutdownNotificationContent.

        The virtual machine to be shut down.

        :return: The vm_name of this ShutdownNotificationContent.
        :rtype: str
        """
        return self._vm_name

    @vm_name.setter
    def vm_name(self, vm_name):
        """Sets the vm_name of this ShutdownNotificationContent.

        The virtual machine to be shut down.

        :param vm_name: The vm_name of this ShutdownNotificationContent.
        :type vm_name: str
        """

        self._vm_name = vm_name
