# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundNatRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_port: int=None, frontend_port: int=None, transport_protocol: str=None):
        """InboundNatRule - a model defined in OpenAPI

        :param backend_port: The backend_port of this InboundNatRule.
        :param frontend_port: The frontend_port of this InboundNatRule.
        :param transport_protocol: The transport_protocol of this InboundNatRule.
        """
        self.openapi_types = {
            'backend_port': int,
            'frontend_port': int,
            'transport_protocol': str
        }

        self.attribute_map = {
            'backend_port': 'backendPort',
            'frontend_port': 'frontendPort',
            'transport_protocol': 'transportProtocol'
        }

        self._backend_port = backend_port
        self._frontend_port = frontend_port
        self._transport_protocol = transport_protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundNatRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundNatRule of this InboundNatRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_port(self):
        """Gets the backend_port of this InboundNatRule.

        The port to which the external traffic will be redirected.

        :return: The backend_port of this InboundNatRule.
        :rtype: int
        """
        return self._backend_port

    @backend_port.setter
    def backend_port(self, backend_port):
        """Sets the backend_port of this InboundNatRule.

        The port to which the external traffic will be redirected.

        :param backend_port: The backend_port of this InboundNatRule.
        :type backend_port: int
        """

        self._backend_port = backend_port

    @property
    def frontend_port(self):
        """Gets the frontend_port of this InboundNatRule.

        The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically.

        :return: The frontend_port of this InboundNatRule.
        :rtype: int
        """
        return self._frontend_port

    @frontend_port.setter
    def frontend_port(self, frontend_port):
        """Sets the frontend_port of this InboundNatRule.

        The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically.

        :param frontend_port: The frontend_port of this InboundNatRule.
        :type frontend_port: int
        """

        self._frontend_port = frontend_port

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this InboundNatRule.

        The transport protocol for the endpoint.

        :return: The transport_protocol of this InboundNatRule.
        :rtype: str
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this InboundNatRule.

        The transport protocol for the endpoint.

        :param transport_protocol: The transport_protocol of this InboundNatRule.
        :type transport_protocol: str
        """
        allowed_values = ["Tcp", "Udp"]  # noqa: E501
        if transport_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_protocol` ({0}), must be one of {1}"
                .format(transport_protocol, allowed_values)
            )

        self._transport_protocol = transport_protocol
