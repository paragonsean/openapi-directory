# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_name: str=None):
        """Event - a model defined in OpenAPI

        :param event_name: The event_name of this Event.
        """
        self.openapi_types = {
            'event_name': str
        }

        self.attribute_map = {
            'event_name': 'eventName'
        }

        self._event_name = event_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_name(self):
        """Gets the event_name of this Event.

        The event type for which this notification is enabled (i.e. AutoShutdown, Cost)

        :return: The event_name of this Event.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this Event.

        The event type for which this notification is enabled (i.e. AutoShutdown, Cost)

        :param event_name: The event_name of this Event.
        :type event_name: str
        """
        allowed_values = ["AutoShutdown", "Cost"]  # noqa: E501
        if event_name not in allowed_values:
            raise ValueError(
                "Invalid value for `event_name` ({0}), must be one of {1}"
                .format(event_name, allowed_values)
            )

        self._event_name = event_name
