# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabResourceCostProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_resource_id: str=None, resource_cost: float=None, resource_id: str=None, resource_owner: str=None, resource_pricing_tier: str=None, resource_status: str=None, resource_type: str=None, resource_uid: str=None, resourcename: str=None):
        """LabResourceCostProperties - a model defined in OpenAPI

        :param external_resource_id: The external_resource_id of this LabResourceCostProperties.
        :param resource_cost: The resource_cost of this LabResourceCostProperties.
        :param resource_id: The resource_id of this LabResourceCostProperties.
        :param resource_owner: The resource_owner of this LabResourceCostProperties.
        :param resource_pricing_tier: The resource_pricing_tier of this LabResourceCostProperties.
        :param resource_status: The resource_status of this LabResourceCostProperties.
        :param resource_type: The resource_type of this LabResourceCostProperties.
        :param resource_uid: The resource_uid of this LabResourceCostProperties.
        :param resourcename: The resourcename of this LabResourceCostProperties.
        """
        self.openapi_types = {
            'external_resource_id': str,
            'resource_cost': float,
            'resource_id': str,
            'resource_owner': str,
            'resource_pricing_tier': str,
            'resource_status': str,
            'resource_type': str,
            'resource_uid': str,
            'resourcename': str
        }

        self.attribute_map = {
            'external_resource_id': 'externalResourceId',
            'resource_cost': 'resourceCost',
            'resource_id': 'resourceId',
            'resource_owner': 'resourceOwner',
            'resource_pricing_tier': 'resourcePricingTier',
            'resource_status': 'resourceStatus',
            'resource_type': 'resourceType',
            'resource_uid': 'resourceUId',
            'resourcename': 'resourcename'
        }

        self._external_resource_id = external_resource_id
        self._resource_cost = resource_cost
        self._resource_id = resource_id
        self._resource_owner = resource_owner
        self._resource_pricing_tier = resource_pricing_tier
        self._resource_status = resource_status
        self._resource_type = resource_type
        self._resource_uid = resource_uid
        self._resourcename = resourcename

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabResourceCostProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabResourceCostProperties of this LabResourceCostProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_resource_id(self):
        """Gets the external_resource_id of this LabResourceCostProperties.

        The ID of the external resource

        :return: The external_resource_id of this LabResourceCostProperties.
        :rtype: str
        """
        return self._external_resource_id

    @external_resource_id.setter
    def external_resource_id(self, external_resource_id):
        """Sets the external_resource_id of this LabResourceCostProperties.

        The ID of the external resource

        :param external_resource_id: The external_resource_id of this LabResourceCostProperties.
        :type external_resource_id: str
        """

        self._external_resource_id = external_resource_id

    @property
    def resource_cost(self):
        """Gets the resource_cost of this LabResourceCostProperties.

        The cost component of the resource cost item.

        :return: The resource_cost of this LabResourceCostProperties.
        :rtype: float
        """
        return self._resource_cost

    @resource_cost.setter
    def resource_cost(self, resource_cost):
        """Sets the resource_cost of this LabResourceCostProperties.

        The cost component of the resource cost item.

        :param resource_cost: The resource_cost of this LabResourceCostProperties.
        :type resource_cost: float
        """

        self._resource_cost = resource_cost

    @property
    def resource_id(self):
        """Gets the resource_id of this LabResourceCostProperties.

        The ID of the resource

        :return: The resource_id of this LabResourceCostProperties.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this LabResourceCostProperties.

        The ID of the resource

        :param resource_id: The resource_id of this LabResourceCostProperties.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_owner(self):
        """Gets the resource_owner of this LabResourceCostProperties.

        The owner of the resource (ex. janedoe@microsoft.com)

        :return: The resource_owner of this LabResourceCostProperties.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this LabResourceCostProperties.

        The owner of the resource (ex. janedoe@microsoft.com)

        :param resource_owner: The resource_owner of this LabResourceCostProperties.
        :type resource_owner: str
        """

        self._resource_owner = resource_owner

    @property
    def resource_pricing_tier(self):
        """Gets the resource_pricing_tier of this LabResourceCostProperties.

        The category of the resource (ex. Premium_LRS, Standard_DS1)

        :return: The resource_pricing_tier of this LabResourceCostProperties.
        :rtype: str
        """
        return self._resource_pricing_tier

    @resource_pricing_tier.setter
    def resource_pricing_tier(self, resource_pricing_tier):
        """Sets the resource_pricing_tier of this LabResourceCostProperties.

        The category of the resource (ex. Premium_LRS, Standard_DS1)

        :param resource_pricing_tier: The resource_pricing_tier of this LabResourceCostProperties.
        :type resource_pricing_tier: str
        """

        self._resource_pricing_tier = resource_pricing_tier

    @property
    def resource_status(self):
        """Gets the resource_status of this LabResourceCostProperties.

        The status of the resource (ex. Active)

        :return: The resource_status of this LabResourceCostProperties.
        :rtype: str
        """
        return self._resource_status

    @resource_status.setter
    def resource_status(self, resource_status):
        """Sets the resource_status of this LabResourceCostProperties.

        The status of the resource (ex. Active)

        :param resource_status: The resource_status of this LabResourceCostProperties.
        :type resource_status: str
        """

        self._resource_status = resource_status

    @property
    def resource_type(self):
        """Gets the resource_type of this LabResourceCostProperties.

        The logical resource type (ex. virtualmachine, storageaccount)

        :return: The resource_type of this LabResourceCostProperties.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LabResourceCostProperties.

        The logical resource type (ex. virtualmachine, storageaccount)

        :param resource_type: The resource_type of this LabResourceCostProperties.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def resource_uid(self):
        """Gets the resource_uid of this LabResourceCostProperties.

        The unique identifier of the resource.

        :return: The resource_uid of this LabResourceCostProperties.
        :rtype: str
        """
        return self._resource_uid

    @resource_uid.setter
    def resource_uid(self, resource_uid):
        """Sets the resource_uid of this LabResourceCostProperties.

        The unique identifier of the resource.

        :param resource_uid: The resource_uid of this LabResourceCostProperties.
        :type resource_uid: str
        """

        self._resource_uid = resource_uid

    @property
    def resourcename(self):
        """Gets the resourcename of this LabResourceCostProperties.

        The name of the resource.

        :return: The resourcename of this LabResourceCostProperties.
        :rtype: str
        """
        return self._resourcename

    @resourcename.setter
    def resourcename(self, resourcename):
        """Sets the resourcename of this LabResourceCostProperties.

        The name of the resource.

        :param resourcename: The resourcename of this LabResourceCostProperties.
        :type resourcename: str
        """

        self._resourcename = resourcename
