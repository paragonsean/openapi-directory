# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts_storage_account: str=None, created_date: datetime=None, default_premium_storage_account: str=None, default_storage_account: str=None, lab_storage_type: str=None, premium_data_disk_storage_account: str=None, premium_data_disks: str=None, provisioning_state: str=None, unique_identifier: str=None, vault_name: str=None):
        """LabProperties - a model defined in OpenAPI

        :param artifacts_storage_account: The artifacts_storage_account of this LabProperties.
        :param created_date: The created_date of this LabProperties.
        :param default_premium_storage_account: The default_premium_storage_account of this LabProperties.
        :param default_storage_account: The default_storage_account of this LabProperties.
        :param lab_storage_type: The lab_storage_type of this LabProperties.
        :param premium_data_disk_storage_account: The premium_data_disk_storage_account of this LabProperties.
        :param premium_data_disks: The premium_data_disks of this LabProperties.
        :param provisioning_state: The provisioning_state of this LabProperties.
        :param unique_identifier: The unique_identifier of this LabProperties.
        :param vault_name: The vault_name of this LabProperties.
        """
        self.openapi_types = {
            'artifacts_storage_account': str,
            'created_date': datetime,
            'default_premium_storage_account': str,
            'default_storage_account': str,
            'lab_storage_type': str,
            'premium_data_disk_storage_account': str,
            'premium_data_disks': str,
            'provisioning_state': str,
            'unique_identifier': str,
            'vault_name': str
        }

        self.attribute_map = {
            'artifacts_storage_account': 'artifactsStorageAccount',
            'created_date': 'createdDate',
            'default_premium_storage_account': 'defaultPremiumStorageAccount',
            'default_storage_account': 'defaultStorageAccount',
            'lab_storage_type': 'labStorageType',
            'premium_data_disk_storage_account': 'premiumDataDiskStorageAccount',
            'premium_data_disks': 'premiumDataDisks',
            'provisioning_state': 'provisioningState',
            'unique_identifier': 'uniqueIdentifier',
            'vault_name': 'vaultName'
        }

        self._artifacts_storage_account = artifacts_storage_account
        self._created_date = created_date
        self._default_premium_storage_account = default_premium_storage_account
        self._default_storage_account = default_storage_account
        self._lab_storage_type = lab_storage_type
        self._premium_data_disk_storage_account = premium_data_disk_storage_account
        self._premium_data_disks = premium_data_disks
        self._provisioning_state = provisioning_state
        self._unique_identifier = unique_identifier
        self._vault_name = vault_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabProperties of this LabProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts_storage_account(self):
        """Gets the artifacts_storage_account of this LabProperties.

        The lab's artifact storage account.

        :return: The artifacts_storage_account of this LabProperties.
        :rtype: str
        """
        return self._artifacts_storage_account

    @artifacts_storage_account.setter
    def artifacts_storage_account(self, artifacts_storage_account):
        """Sets the artifacts_storage_account of this LabProperties.

        The lab's artifact storage account.

        :param artifacts_storage_account: The artifacts_storage_account of this LabProperties.
        :type artifacts_storage_account: str
        """

        self._artifacts_storage_account = artifacts_storage_account

    @property
    def created_date(self):
        """Gets the created_date of this LabProperties.

        The creation date of the lab.

        :return: The created_date of this LabProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this LabProperties.

        The creation date of the lab.

        :param created_date: The created_date of this LabProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def default_premium_storage_account(self):
        """Gets the default_premium_storage_account of this LabProperties.

        The lab's default premium storage account.

        :return: The default_premium_storage_account of this LabProperties.
        :rtype: str
        """
        return self._default_premium_storage_account

    @default_premium_storage_account.setter
    def default_premium_storage_account(self, default_premium_storage_account):
        """Sets the default_premium_storage_account of this LabProperties.

        The lab's default premium storage account.

        :param default_premium_storage_account: The default_premium_storage_account of this LabProperties.
        :type default_premium_storage_account: str
        """

        self._default_premium_storage_account = default_premium_storage_account

    @property
    def default_storage_account(self):
        """Gets the default_storage_account of this LabProperties.

        The lab's default storage account.

        :return: The default_storage_account of this LabProperties.
        :rtype: str
        """
        return self._default_storage_account

    @default_storage_account.setter
    def default_storage_account(self, default_storage_account):
        """Sets the default_storage_account of this LabProperties.

        The lab's default storage account.

        :param default_storage_account: The default_storage_account of this LabProperties.
        :type default_storage_account: str
        """

        self._default_storage_account = default_storage_account

    @property
    def lab_storage_type(self):
        """Gets the lab_storage_type of this LabProperties.

        Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.

        :return: The lab_storage_type of this LabProperties.
        :rtype: str
        """
        return self._lab_storage_type

    @lab_storage_type.setter
    def lab_storage_type(self, lab_storage_type):
        """Sets the lab_storage_type of this LabProperties.

        Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.

        :param lab_storage_type: The lab_storage_type of this LabProperties.
        :type lab_storage_type: str
        """
        allowed_values = ["Standard", "Premium"]  # noqa: E501
        if lab_storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lab_storage_type` ({0}), must be one of {1}"
                .format(lab_storage_type, allowed_values)
            )

        self._lab_storage_type = lab_storage_type

    @property
    def premium_data_disk_storage_account(self):
        """Gets the premium_data_disk_storage_account of this LabProperties.

        The lab's premium data disk storage account.

        :return: The premium_data_disk_storage_account of this LabProperties.
        :rtype: str
        """
        return self._premium_data_disk_storage_account

    @premium_data_disk_storage_account.setter
    def premium_data_disk_storage_account(self, premium_data_disk_storage_account):
        """Sets the premium_data_disk_storage_account of this LabProperties.

        The lab's premium data disk storage account.

        :param premium_data_disk_storage_account: The premium_data_disk_storage_account of this LabProperties.
        :type premium_data_disk_storage_account: str
        """

        self._premium_data_disk_storage_account = premium_data_disk_storage_account

    @property
    def premium_data_disks(self):
        """Gets the premium_data_disks of this LabProperties.

        The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.

        :return: The premium_data_disks of this LabProperties.
        :rtype: str
        """
        return self._premium_data_disks

    @premium_data_disks.setter
    def premium_data_disks(self, premium_data_disks):
        """Sets the premium_data_disks of this LabProperties.

        The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.

        :param premium_data_disks: The premium_data_disks of this LabProperties.
        :type premium_data_disks: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if premium_data_disks not in allowed_values:
            raise ValueError(
                "Invalid value for `premium_data_disks` ({0}), must be one of {1}"
                .format(premium_data_disks, allowed_values)
            )

        self._premium_data_disks = premium_data_disks

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LabProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this LabProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LabProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this LabProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this LabProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this LabProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this LabProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this LabProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier

    @property
    def vault_name(self):
        """Gets the vault_name of this LabProperties.

        The lab's Key vault.

        :return: The vault_name of this LabProperties.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this LabProperties.

        The lab's Key vault.

        :param vault_name: The vault_name of this LabProperties.
        :type vault_name: str
        """

        self._vault_name = vault_name
