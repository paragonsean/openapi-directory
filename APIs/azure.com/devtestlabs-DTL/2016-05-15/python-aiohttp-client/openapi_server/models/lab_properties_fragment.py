# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabPropertiesFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lab_storage_type: str=None, premium_data_disks: str=None, provisioning_state: str=None, unique_identifier: str=None):
        """LabPropertiesFragment - a model defined in OpenAPI

        :param lab_storage_type: The lab_storage_type of this LabPropertiesFragment.
        :param premium_data_disks: The premium_data_disks of this LabPropertiesFragment.
        :param provisioning_state: The provisioning_state of this LabPropertiesFragment.
        :param unique_identifier: The unique_identifier of this LabPropertiesFragment.
        """
        self.openapi_types = {
            'lab_storage_type': str,
            'premium_data_disks': str,
            'provisioning_state': str,
            'unique_identifier': str
        }

        self.attribute_map = {
            'lab_storage_type': 'labStorageType',
            'premium_data_disks': 'premiumDataDisks',
            'provisioning_state': 'provisioningState',
            'unique_identifier': 'uniqueIdentifier'
        }

        self._lab_storage_type = lab_storage_type
        self._premium_data_disks = premium_data_disks
        self._provisioning_state = provisioning_state
        self._unique_identifier = unique_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabPropertiesFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabPropertiesFragment of this LabPropertiesFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lab_storage_type(self):
        """Gets the lab_storage_type of this LabPropertiesFragment.

        Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.

        :return: The lab_storage_type of this LabPropertiesFragment.
        :rtype: str
        """
        return self._lab_storage_type

    @lab_storage_type.setter
    def lab_storage_type(self, lab_storage_type):
        """Sets the lab_storage_type of this LabPropertiesFragment.

        Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.

        :param lab_storage_type: The lab_storage_type of this LabPropertiesFragment.
        :type lab_storage_type: str
        """
        allowed_values = ["Standard", "Premium"]  # noqa: E501
        if lab_storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lab_storage_type` ({0}), must be one of {1}"
                .format(lab_storage_type, allowed_values)
            )

        self._lab_storage_type = lab_storage_type

    @property
    def premium_data_disks(self):
        """Gets the premium_data_disks of this LabPropertiesFragment.

        The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.

        :return: The premium_data_disks of this LabPropertiesFragment.
        :rtype: str
        """
        return self._premium_data_disks

    @premium_data_disks.setter
    def premium_data_disks(self, premium_data_disks):
        """Sets the premium_data_disks of this LabPropertiesFragment.

        The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.

        :param premium_data_disks: The premium_data_disks of this LabPropertiesFragment.
        :type premium_data_disks: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if premium_data_disks not in allowed_values:
            raise ValueError(
                "Invalid value for `premium_data_disks` ({0}), must be one of {1}"
                .format(premium_data_disks, allowed_values)
            )

        self._premium_data_disks = premium_data_disks

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LabPropertiesFragment.

        The provisioning status of the resource.

        :return: The provisioning_state of this LabPropertiesFragment.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LabPropertiesFragment.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this LabPropertiesFragment.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this LabPropertiesFragment.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this LabPropertiesFragment.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this LabPropertiesFragment.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this LabPropertiesFragment.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier
