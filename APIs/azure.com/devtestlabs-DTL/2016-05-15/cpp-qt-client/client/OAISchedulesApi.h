/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISchedulesApi_H
#define OAI_OAISchedulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIResponseWithContinuation_Schedule.h"
#include "OAISchedule.h"
#include "OAIScheduleFragment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISchedulesApi : public QObject {
    Q_OBJECT

public:
    OAISchedulesApi(const int timeOut = 0);
    ~OAISchedulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule OAISchedule [required]
    */
    virtual void schedulesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAISchedule &schedule);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void schedulesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void schedulesExecute(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void schedulesGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void schedulesList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void schedulesListApplicable(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  schedule OAIScheduleFragment [required]
    */
    virtual void schedulesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIScheduleFragment &schedule);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void schedulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void schedulesDeleteCallback(OAIHttpRequestWorker *worker);
    void schedulesExecuteCallback(OAIHttpRequestWorker *worker);
    void schedulesGetCallback(OAIHttpRequestWorker *worker);
    void schedulesListCallback(OAIHttpRequestWorker *worker);
    void schedulesListApplicableCallback(OAIHttpRequestWorker *worker);
    void schedulesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void schedulesCreateOrUpdateSignal(OAISchedule summary);
    void schedulesDeleteSignal();
    void schedulesExecuteSignal();
    void schedulesGetSignal(OAISchedule summary);
    void schedulesListSignal(OAIResponseWithContinuation_Schedule summary);
    void schedulesListApplicableSignal(OAIResponseWithContinuation_Schedule summary);
    void schedulesUpdateSignal(OAISchedule summary);


    void schedulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void schedulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void schedulesExecuteSignalFull(OAIHttpRequestWorker *worker);
    void schedulesGetSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void schedulesListSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_Schedule summary);
    void schedulesListApplicableSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_Schedule summary);
    void schedulesUpdateSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);

    Q_DECL_DEPRECATED_X("Use schedulesCreateOrUpdateSignalError() instead")
    void schedulesCreateOrUpdateSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesCreateOrUpdateSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesDeleteSignalError() instead")
    void schedulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesExecuteSignalError() instead")
    void schedulesExecuteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesExecuteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesGetSignalError() instead")
    void schedulesGetSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesGetSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesListSignalError() instead")
    void schedulesListSignalE(OAIResponseWithContinuation_Schedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesListSignalError(OAIResponseWithContinuation_Schedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesListApplicableSignalError() instead")
    void schedulesListApplicableSignalE(OAIResponseWithContinuation_Schedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesListApplicableSignalError(OAIResponseWithContinuation_Schedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesUpdateSignalError() instead")
    void schedulesUpdateSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesUpdateSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use schedulesCreateOrUpdateSignalErrorFull() instead")
    void schedulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesDeleteSignalErrorFull() instead")
    void schedulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesExecuteSignalErrorFull() instead")
    void schedulesExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesGetSignalErrorFull() instead")
    void schedulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesListSignalErrorFull() instead")
    void schedulesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesListApplicableSignalErrorFull() instead")
    void schedulesListApplicableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesListApplicableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesUpdateSignalErrorFull() instead")
    void schedulesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
