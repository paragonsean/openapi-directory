/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArmTemplateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArmTemplateProperties::OAIArmTemplateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArmTemplateProperties::OAIArmTemplateProperties() {
    this->initializeModel();
}

OAIArmTemplateProperties::~OAIArmTemplateProperties() {}

void OAIArmTemplateProperties::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_parameters_value_files_info_isSet = false;
    m_parameters_value_files_info_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;
}

void OAIArmTemplateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArmTemplateProperties::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_parameters_value_files_info_isValid = ::OpenAPI::fromJsonValue(m_parameters_value_files_info, json[QString("parametersValueFilesInfo")]);
    m_parameters_value_files_info_isSet = !json[QString("parametersValueFilesInfo")].isNull() && m_parameters_value_files_info_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;
}

QString OAIArmTemplateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArmTemplateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_contents_isSet) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_parameters_value_files_info.size() > 0) {
        obj.insert(QString("parametersValueFilesInfo"), ::OpenAPI::toJsonValue(m_parameters_value_files_info));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    return obj;
}

OAIObject OAIArmTemplateProperties::getContents() const {
    return m_contents;
}
void OAIArmTemplateProperties::setContents(const OAIObject &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIArmTemplateProperties::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIArmTemplateProperties::is_contents_Valid() const{
    return m_contents_isValid;
}

QDateTime OAIArmTemplateProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIArmTemplateProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIArmTemplateProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIArmTemplateProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIArmTemplateProperties::getDescription() const {
    return m_description;
}
void OAIArmTemplateProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIArmTemplateProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIArmTemplateProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIArmTemplateProperties::getDisplayName() const {
    return m_display_name;
}
void OAIArmTemplateProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIArmTemplateProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIArmTemplateProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIArmTemplateProperties::getIcon() const {
    return m_icon;
}
void OAIArmTemplateProperties::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIArmTemplateProperties::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIArmTemplateProperties::is_icon_Valid() const{
    return m_icon_isValid;
}

QList<OAIParametersValueFileInfo> OAIArmTemplateProperties::getParametersValueFilesInfo() const {
    return m_parameters_value_files_info;
}
void OAIArmTemplateProperties::setParametersValueFilesInfo(const QList<OAIParametersValueFileInfo> &parameters_value_files_info) {
    m_parameters_value_files_info = parameters_value_files_info;
    m_parameters_value_files_info_isSet = true;
}

bool OAIArmTemplateProperties::is_parameters_value_files_info_Set() const{
    return m_parameters_value_files_info_isSet;
}

bool OAIArmTemplateProperties::is_parameters_value_files_info_Valid() const{
    return m_parameters_value_files_info_isValid;
}

QString OAIArmTemplateProperties::getPublisher() const {
    return m_publisher;
}
void OAIArmTemplateProperties::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIArmTemplateProperties::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIArmTemplateProperties::is_publisher_Valid() const{
    return m_publisher_isValid;
}

bool OAIArmTemplateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_value_files_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArmTemplateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
