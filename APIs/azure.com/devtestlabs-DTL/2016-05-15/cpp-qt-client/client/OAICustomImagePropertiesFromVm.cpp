/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomImagePropertiesFromVm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomImagePropertiesFromVm::OAICustomImagePropertiesFromVm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomImagePropertiesFromVm::OAICustomImagePropertiesFromVm() {
    this->initializeModel();
}

OAICustomImagePropertiesFromVm::~OAICustomImagePropertiesFromVm() {}

void OAICustomImagePropertiesFromVm::initializeModel() {

    m_linux_os_info_isSet = false;
    m_linux_os_info_isValid = false;

    m_source_vm_id_isSet = false;
    m_source_vm_id_isValid = false;

    m_windows_os_info_isSet = false;
    m_windows_os_info_isValid = false;
}

void OAICustomImagePropertiesFromVm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomImagePropertiesFromVm::fromJsonObject(QJsonObject json) {

    m_linux_os_info_isValid = ::OpenAPI::fromJsonValue(m_linux_os_info, json[QString("linuxOsInfo")]);
    m_linux_os_info_isSet = !json[QString("linuxOsInfo")].isNull() && m_linux_os_info_isValid;

    m_source_vm_id_isValid = ::OpenAPI::fromJsonValue(m_source_vm_id, json[QString("sourceVmId")]);
    m_source_vm_id_isSet = !json[QString("sourceVmId")].isNull() && m_source_vm_id_isValid;

    m_windows_os_info_isValid = ::OpenAPI::fromJsonValue(m_windows_os_info, json[QString("windowsOsInfo")]);
    m_windows_os_info_isSet = !json[QString("windowsOsInfo")].isNull() && m_windows_os_info_isValid;
}

QString OAICustomImagePropertiesFromVm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomImagePropertiesFromVm::asJsonObject() const {
    QJsonObject obj;
    if (m_linux_os_info.isSet()) {
        obj.insert(QString("linuxOsInfo"), ::OpenAPI::toJsonValue(m_linux_os_info));
    }
    if (m_source_vm_id_isSet) {
        obj.insert(QString("sourceVmId"), ::OpenAPI::toJsonValue(m_source_vm_id));
    }
    if (m_windows_os_info.isSet()) {
        obj.insert(QString("windowsOsInfo"), ::OpenAPI::toJsonValue(m_windows_os_info));
    }
    return obj;
}

OAILinuxOsInfo OAICustomImagePropertiesFromVm::getLinuxOsInfo() const {
    return m_linux_os_info;
}
void OAICustomImagePropertiesFromVm::setLinuxOsInfo(const OAILinuxOsInfo &linux_os_info) {
    m_linux_os_info = linux_os_info;
    m_linux_os_info_isSet = true;
}

bool OAICustomImagePropertiesFromVm::is_linux_os_info_Set() const{
    return m_linux_os_info_isSet;
}

bool OAICustomImagePropertiesFromVm::is_linux_os_info_Valid() const{
    return m_linux_os_info_isValid;
}

QString OAICustomImagePropertiesFromVm::getSourceVmId() const {
    return m_source_vm_id;
}
void OAICustomImagePropertiesFromVm::setSourceVmId(const QString &source_vm_id) {
    m_source_vm_id = source_vm_id;
    m_source_vm_id_isSet = true;
}

bool OAICustomImagePropertiesFromVm::is_source_vm_id_Set() const{
    return m_source_vm_id_isSet;
}

bool OAICustomImagePropertiesFromVm::is_source_vm_id_Valid() const{
    return m_source_vm_id_isValid;
}

OAIWindowsOsInfo OAICustomImagePropertiesFromVm::getWindowsOsInfo() const {
    return m_windows_os_info;
}
void OAICustomImagePropertiesFromVm::setWindowsOsInfo(const OAIWindowsOsInfo &windows_os_info) {
    m_windows_os_info = windows_os_info;
    m_windows_os_info_isSet = true;
}

bool OAICustomImagePropertiesFromVm::is_windows_os_info_Set() const{
    return m_windows_os_info_isSet;
}

bool OAICustomImagePropertiesFromVm::is_windows_os_info_Valid() const{
    return m_windows_os_info_isValid;
}

bool OAICustomImagePropertiesFromVm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_linux_os_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_os_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomImagePropertiesFromVm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
