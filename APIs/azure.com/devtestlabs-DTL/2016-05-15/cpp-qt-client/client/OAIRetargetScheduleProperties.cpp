/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetargetScheduleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetargetScheduleProperties::OAIRetargetScheduleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetargetScheduleProperties::OAIRetargetScheduleProperties() {
    this->initializeModel();
}

OAIRetargetScheduleProperties::~OAIRetargetScheduleProperties() {}

void OAIRetargetScheduleProperties::initializeModel() {

    m_current_resource_id_isSet = false;
    m_current_resource_id_isValid = false;

    m_target_resource_id_isSet = false;
    m_target_resource_id_isValid = false;
}

void OAIRetargetScheduleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetargetScheduleProperties::fromJsonObject(QJsonObject json) {

    m_current_resource_id_isValid = ::OpenAPI::fromJsonValue(m_current_resource_id, json[QString("currentResourceId")]);
    m_current_resource_id_isSet = !json[QString("currentResourceId")].isNull() && m_current_resource_id_isValid;

    m_target_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_id, json[QString("targetResourceId")]);
    m_target_resource_id_isSet = !json[QString("targetResourceId")].isNull() && m_target_resource_id_isValid;
}

QString OAIRetargetScheduleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetargetScheduleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_current_resource_id_isSet) {
        obj.insert(QString("currentResourceId"), ::OpenAPI::toJsonValue(m_current_resource_id));
    }
    if (m_target_resource_id_isSet) {
        obj.insert(QString("targetResourceId"), ::OpenAPI::toJsonValue(m_target_resource_id));
    }
    return obj;
}

QString OAIRetargetScheduleProperties::getCurrentResourceId() const {
    return m_current_resource_id;
}
void OAIRetargetScheduleProperties::setCurrentResourceId(const QString &current_resource_id) {
    m_current_resource_id = current_resource_id;
    m_current_resource_id_isSet = true;
}

bool OAIRetargetScheduleProperties::is_current_resource_id_Set() const{
    return m_current_resource_id_isSet;
}

bool OAIRetargetScheduleProperties::is_current_resource_id_Valid() const{
    return m_current_resource_id_isValid;
}

QString OAIRetargetScheduleProperties::getTargetResourceId() const {
    return m_target_resource_id;
}
void OAIRetargetScheduleProperties::setTargetResourceId(const QString &target_resource_id) {
    m_target_resource_id = target_resource_id;
    m_target_resource_id_isSet = true;
}

bool OAIRetargetScheduleProperties::is_target_resource_id_Set() const{
    return m_target_resource_id_isSet;
}

bool OAIRetargetScheduleProperties::is_target_resource_id_Valid() const{
    return m_target_resource_id_isValid;
}

bool OAIRetargetScheduleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetargetScheduleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
