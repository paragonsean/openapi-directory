/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicableScheduleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicableScheduleProperties::OAIApplicableScheduleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicableScheduleProperties::OAIApplicableScheduleProperties() {
    this->initializeModel();
}

OAIApplicableScheduleProperties::~OAIApplicableScheduleProperties() {}

void OAIApplicableScheduleProperties::initializeModel() {

    m_lab_vms_shutdown_isSet = false;
    m_lab_vms_shutdown_isValid = false;

    m_lab_vms_startup_isSet = false;
    m_lab_vms_startup_isValid = false;
}

void OAIApplicableScheduleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicableScheduleProperties::fromJsonObject(QJsonObject json) {

    m_lab_vms_shutdown_isValid = ::OpenAPI::fromJsonValue(m_lab_vms_shutdown, json[QString("labVmsShutdown")]);
    m_lab_vms_shutdown_isSet = !json[QString("labVmsShutdown")].isNull() && m_lab_vms_shutdown_isValid;

    m_lab_vms_startup_isValid = ::OpenAPI::fromJsonValue(m_lab_vms_startup, json[QString("labVmsStartup")]);
    m_lab_vms_startup_isSet = !json[QString("labVmsStartup")].isNull() && m_lab_vms_startup_isValid;
}

QString OAIApplicableScheduleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicableScheduleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_lab_vms_shutdown.isSet()) {
        obj.insert(QString("labVmsShutdown"), ::OpenAPI::toJsonValue(m_lab_vms_shutdown));
    }
    if (m_lab_vms_startup.isSet()) {
        obj.insert(QString("labVmsStartup"), ::OpenAPI::toJsonValue(m_lab_vms_startup));
    }
    return obj;
}

OAISchedule OAIApplicableScheduleProperties::getLabVmsShutdown() const {
    return m_lab_vms_shutdown;
}
void OAIApplicableScheduleProperties::setLabVmsShutdown(const OAISchedule &lab_vms_shutdown) {
    m_lab_vms_shutdown = lab_vms_shutdown;
    m_lab_vms_shutdown_isSet = true;
}

bool OAIApplicableScheduleProperties::is_lab_vms_shutdown_Set() const{
    return m_lab_vms_shutdown_isSet;
}

bool OAIApplicableScheduleProperties::is_lab_vms_shutdown_Valid() const{
    return m_lab_vms_shutdown_isValid;
}

OAISchedule OAIApplicableScheduleProperties::getLabVmsStartup() const {
    return m_lab_vms_startup;
}
void OAIApplicableScheduleProperties::setLabVmsStartup(const OAISchedule &lab_vms_startup) {
    m_lab_vms_startup = lab_vms_startup;
    m_lab_vms_startup_isSet = true;
}

bool OAIApplicableScheduleProperties::is_lab_vms_startup_Set() const{
    return m_lab_vms_startup_isSet;
}

bool OAIApplicableScheduleProperties::is_lab_vms_startup_Valid() const{
    return m_lab_vms_startup_isValid;
}

bool OAIApplicableScheduleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lab_vms_shutdown.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_vms_startup.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicableScheduleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
