/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationChannelProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationChannelProperties::OAINotificationChannelProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationChannelProperties::OAINotificationChannelProperties() {
    this->initializeModel();
}

OAINotificationChannelProperties::~OAINotificationChannelProperties() {}

void OAINotificationChannelProperties::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;

    m_web_hook_url_isSet = false;
    m_web_hook_url_isValid = false;
}

void OAINotificationChannelProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationChannelProperties::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;

    m_web_hook_url_isValid = ::OpenAPI::fromJsonValue(m_web_hook_url, json[QString("webHookUrl")]);
    m_web_hook_url_isSet = !json[QString("webHookUrl")].isNull() && m_web_hook_url_isValid;
}

QString OAINotificationChannelProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationChannelProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    if (m_web_hook_url_isSet) {
        obj.insert(QString("webHookUrl"), ::OpenAPI::toJsonValue(m_web_hook_url));
    }
    return obj;
}

QDateTime OAINotificationChannelProperties::getCreatedDate() const {
    return m_created_date;
}
void OAINotificationChannelProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAINotificationChannelProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAINotificationChannelProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAINotificationChannelProperties::getDescription() const {
    return m_description;
}
void OAINotificationChannelProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINotificationChannelProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAINotificationChannelProperties::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEvent> OAINotificationChannelProperties::getEvents() const {
    return m_events;
}
void OAINotificationChannelProperties::setEvents(const QList<OAIEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAINotificationChannelProperties::is_events_Set() const{
    return m_events_isSet;
}

bool OAINotificationChannelProperties::is_events_Valid() const{
    return m_events_isValid;
}

QString OAINotificationChannelProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAINotificationChannelProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAINotificationChannelProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAINotificationChannelProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAINotificationChannelProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAINotificationChannelProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAINotificationChannelProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAINotificationChannelProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

QString OAINotificationChannelProperties::getWebHookUrl() const {
    return m_web_hook_url;
}
void OAINotificationChannelProperties::setWebHookUrl(const QString &web_hook_url) {
    m_web_hook_url = web_hook_url;
    m_web_hook_url_isSet = true;
}

bool OAINotificationChannelProperties::is_web_hook_url_Set() const{
    return m_web_hook_url_isSet;
}

bool OAINotificationChannelProperties::is_web_hook_url_Valid() const{
    return m_web_hook_url_isValid;
}

bool OAINotificationChannelProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationChannelProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
