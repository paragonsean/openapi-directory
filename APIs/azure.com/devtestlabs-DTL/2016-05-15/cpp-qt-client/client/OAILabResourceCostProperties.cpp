/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabResourceCostProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabResourceCostProperties::OAILabResourceCostProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabResourceCostProperties::OAILabResourceCostProperties() {
    this->initializeModel();
}

OAILabResourceCostProperties::~OAILabResourceCostProperties() {}

void OAILabResourceCostProperties::initializeModel() {

    m_external_resource_id_isSet = false;
    m_external_resource_id_isValid = false;

    m_resource_cost_isSet = false;
    m_resource_cost_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_resource_pricing_tier_isSet = false;
    m_resource_pricing_tier_isValid = false;

    m_resource_status_isSet = false;
    m_resource_status_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_uid_isSet = false;
    m_resource_uid_isValid = false;

    m_resourcename_isSet = false;
    m_resourcename_isValid = false;
}

void OAILabResourceCostProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabResourceCostProperties::fromJsonObject(QJsonObject json) {

    m_external_resource_id_isValid = ::OpenAPI::fromJsonValue(m_external_resource_id, json[QString("externalResourceId")]);
    m_external_resource_id_isSet = !json[QString("externalResourceId")].isNull() && m_external_resource_id_isValid;

    m_resource_cost_isValid = ::OpenAPI::fromJsonValue(m_resource_cost, json[QString("resourceCost")]);
    m_resource_cost_isSet = !json[QString("resourceCost")].isNull() && m_resource_cost_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_resource_pricing_tier_isValid = ::OpenAPI::fromJsonValue(m_resource_pricing_tier, json[QString("resourcePricingTier")]);
    m_resource_pricing_tier_isSet = !json[QString("resourcePricingTier")].isNull() && m_resource_pricing_tier_isValid;

    m_resource_status_isValid = ::OpenAPI::fromJsonValue(m_resource_status, json[QString("resourceStatus")]);
    m_resource_status_isSet = !json[QString("resourceStatus")].isNull() && m_resource_status_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_resource_uid_isValid = ::OpenAPI::fromJsonValue(m_resource_uid, json[QString("resourceUId")]);
    m_resource_uid_isSet = !json[QString("resourceUId")].isNull() && m_resource_uid_isValid;

    m_resourcename_isValid = ::OpenAPI::fromJsonValue(m_resourcename, json[QString("resourcename")]);
    m_resourcename_isSet = !json[QString("resourcename")].isNull() && m_resourcename_isValid;
}

QString OAILabResourceCostProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabResourceCostProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_external_resource_id_isSet) {
        obj.insert(QString("externalResourceId"), ::OpenAPI::toJsonValue(m_external_resource_id));
    }
    if (m_resource_cost_isSet) {
        obj.insert(QString("resourceCost"), ::OpenAPI::toJsonValue(m_resource_cost));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_resource_pricing_tier_isSet) {
        obj.insert(QString("resourcePricingTier"), ::OpenAPI::toJsonValue(m_resource_pricing_tier));
    }
    if (m_resource_status_isSet) {
        obj.insert(QString("resourceStatus"), ::OpenAPI::toJsonValue(m_resource_status));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_uid_isSet) {
        obj.insert(QString("resourceUId"), ::OpenAPI::toJsonValue(m_resource_uid));
    }
    if (m_resourcename_isSet) {
        obj.insert(QString("resourcename"), ::OpenAPI::toJsonValue(m_resourcename));
    }
    return obj;
}

QString OAILabResourceCostProperties::getExternalResourceId() const {
    return m_external_resource_id;
}
void OAILabResourceCostProperties::setExternalResourceId(const QString &external_resource_id) {
    m_external_resource_id = external_resource_id;
    m_external_resource_id_isSet = true;
}

bool OAILabResourceCostProperties::is_external_resource_id_Set() const{
    return m_external_resource_id_isSet;
}

bool OAILabResourceCostProperties::is_external_resource_id_Valid() const{
    return m_external_resource_id_isValid;
}

double OAILabResourceCostProperties::getResourceCost() const {
    return m_resource_cost;
}
void OAILabResourceCostProperties::setResourceCost(const double &resource_cost) {
    m_resource_cost = resource_cost;
    m_resource_cost_isSet = true;
}

bool OAILabResourceCostProperties::is_resource_cost_Set() const{
    return m_resource_cost_isSet;
}

bool OAILabResourceCostProperties::is_resource_cost_Valid() const{
    return m_resource_cost_isValid;
}

QString OAILabResourceCostProperties::getResourceId() const {
    return m_resource_id;
}
void OAILabResourceCostProperties::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAILabResourceCostProperties::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAILabResourceCostProperties::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAILabResourceCostProperties::getResourceOwner() const {
    return m_resource_owner;
}
void OAILabResourceCostProperties::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAILabResourceCostProperties::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAILabResourceCostProperties::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAILabResourceCostProperties::getResourcePricingTier() const {
    return m_resource_pricing_tier;
}
void OAILabResourceCostProperties::setResourcePricingTier(const QString &resource_pricing_tier) {
    m_resource_pricing_tier = resource_pricing_tier;
    m_resource_pricing_tier_isSet = true;
}

bool OAILabResourceCostProperties::is_resource_pricing_tier_Set() const{
    return m_resource_pricing_tier_isSet;
}

bool OAILabResourceCostProperties::is_resource_pricing_tier_Valid() const{
    return m_resource_pricing_tier_isValid;
}

QString OAILabResourceCostProperties::getResourceStatus() const {
    return m_resource_status;
}
void OAILabResourceCostProperties::setResourceStatus(const QString &resource_status) {
    m_resource_status = resource_status;
    m_resource_status_isSet = true;
}

bool OAILabResourceCostProperties::is_resource_status_Set() const{
    return m_resource_status_isSet;
}

bool OAILabResourceCostProperties::is_resource_status_Valid() const{
    return m_resource_status_isValid;
}

QString OAILabResourceCostProperties::getResourceType() const {
    return m_resource_type;
}
void OAILabResourceCostProperties::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAILabResourceCostProperties::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAILabResourceCostProperties::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAILabResourceCostProperties::getResourceUid() const {
    return m_resource_uid;
}
void OAILabResourceCostProperties::setResourceUid(const QString &resource_uid) {
    m_resource_uid = resource_uid;
    m_resource_uid_isSet = true;
}

bool OAILabResourceCostProperties::is_resource_uid_Set() const{
    return m_resource_uid_isSet;
}

bool OAILabResourceCostProperties::is_resource_uid_Valid() const{
    return m_resource_uid_isValid;
}

QString OAILabResourceCostProperties::getResourcename() const {
    return m_resourcename;
}
void OAILabResourceCostProperties::setResourcename(const QString &resourcename) {
    m_resourcename = resourcename;
    m_resourcename_isSet = true;
}

bool OAILabResourceCostProperties::is_resourcename_Set() const{
    return m_resourcename_isSet;
}

bool OAILabResourceCostProperties::is_resourcename_Valid() const{
    return m_resourcename_isValid;
}

bool OAILabResourceCostProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_pricing_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resourcename_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabResourceCostProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
