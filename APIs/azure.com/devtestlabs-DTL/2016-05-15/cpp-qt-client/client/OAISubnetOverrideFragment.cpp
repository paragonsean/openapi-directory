/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubnetOverrideFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubnetOverrideFragment::OAISubnetOverrideFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubnetOverrideFragment::OAISubnetOverrideFragment() {
    this->initializeModel();
}

OAISubnetOverrideFragment::~OAISubnetOverrideFragment() {}

void OAISubnetOverrideFragment::initializeModel() {

    m_lab_subnet_name_isSet = false;
    m_lab_subnet_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_shared_public_ip_address_configuration_isSet = false;
    m_shared_public_ip_address_configuration_isValid = false;

    m_use_in_vm_creation_permission_isSet = false;
    m_use_in_vm_creation_permission_isValid = false;

    m_use_public_ip_address_permission_isSet = false;
    m_use_public_ip_address_permission_isValid = false;

    m_virtual_network_pool_name_isSet = false;
    m_virtual_network_pool_name_isValid = false;
}

void OAISubnetOverrideFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubnetOverrideFragment::fromJsonObject(QJsonObject json) {

    m_lab_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_lab_subnet_name, json[QString("labSubnetName")]);
    m_lab_subnet_name_isSet = !json[QString("labSubnetName")].isNull() && m_lab_subnet_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_shared_public_ip_address_configuration_isValid = ::OpenAPI::fromJsonValue(m_shared_public_ip_address_configuration, json[QString("sharedPublicIpAddressConfiguration")]);
    m_shared_public_ip_address_configuration_isSet = !json[QString("sharedPublicIpAddressConfiguration")].isNull() && m_shared_public_ip_address_configuration_isValid;

    m_use_in_vm_creation_permission_isValid = ::OpenAPI::fromJsonValue(m_use_in_vm_creation_permission, json[QString("useInVmCreationPermission")]);
    m_use_in_vm_creation_permission_isSet = !json[QString("useInVmCreationPermission")].isNull() && m_use_in_vm_creation_permission_isValid;

    m_use_public_ip_address_permission_isValid = ::OpenAPI::fromJsonValue(m_use_public_ip_address_permission, json[QString("usePublicIpAddressPermission")]);
    m_use_public_ip_address_permission_isSet = !json[QString("usePublicIpAddressPermission")].isNull() && m_use_public_ip_address_permission_isValid;

    m_virtual_network_pool_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_pool_name, json[QString("virtualNetworkPoolName")]);
    m_virtual_network_pool_name_isSet = !json[QString("virtualNetworkPoolName")].isNull() && m_virtual_network_pool_name_isValid;
}

QString OAISubnetOverrideFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubnetOverrideFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_lab_subnet_name_isSet) {
        obj.insert(QString("labSubnetName"), ::OpenAPI::toJsonValue(m_lab_subnet_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_shared_public_ip_address_configuration.isSet()) {
        obj.insert(QString("sharedPublicIpAddressConfiguration"), ::OpenAPI::toJsonValue(m_shared_public_ip_address_configuration));
    }
    if (m_use_in_vm_creation_permission_isSet) {
        obj.insert(QString("useInVmCreationPermission"), ::OpenAPI::toJsonValue(m_use_in_vm_creation_permission));
    }
    if (m_use_public_ip_address_permission_isSet) {
        obj.insert(QString("usePublicIpAddressPermission"), ::OpenAPI::toJsonValue(m_use_public_ip_address_permission));
    }
    if (m_virtual_network_pool_name_isSet) {
        obj.insert(QString("virtualNetworkPoolName"), ::OpenAPI::toJsonValue(m_virtual_network_pool_name));
    }
    return obj;
}

QString OAISubnetOverrideFragment::getLabSubnetName() const {
    return m_lab_subnet_name;
}
void OAISubnetOverrideFragment::setLabSubnetName(const QString &lab_subnet_name) {
    m_lab_subnet_name = lab_subnet_name;
    m_lab_subnet_name_isSet = true;
}

bool OAISubnetOverrideFragment::is_lab_subnet_name_Set() const{
    return m_lab_subnet_name_isSet;
}

bool OAISubnetOverrideFragment::is_lab_subnet_name_Valid() const{
    return m_lab_subnet_name_isValid;
}

QString OAISubnetOverrideFragment::getResourceId() const {
    return m_resource_id;
}
void OAISubnetOverrideFragment::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAISubnetOverrideFragment::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAISubnetOverrideFragment::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAISubnetSharedPublicIpAddressConfigurationFragment OAISubnetOverrideFragment::getSharedPublicIpAddressConfiguration() const {
    return m_shared_public_ip_address_configuration;
}
void OAISubnetOverrideFragment::setSharedPublicIpAddressConfiguration(const OAISubnetSharedPublicIpAddressConfigurationFragment &shared_public_ip_address_configuration) {
    m_shared_public_ip_address_configuration = shared_public_ip_address_configuration;
    m_shared_public_ip_address_configuration_isSet = true;
}

bool OAISubnetOverrideFragment::is_shared_public_ip_address_configuration_Set() const{
    return m_shared_public_ip_address_configuration_isSet;
}

bool OAISubnetOverrideFragment::is_shared_public_ip_address_configuration_Valid() const{
    return m_shared_public_ip_address_configuration_isValid;
}

QString OAISubnetOverrideFragment::getUseInVmCreationPermission() const {
    return m_use_in_vm_creation_permission;
}
void OAISubnetOverrideFragment::setUseInVmCreationPermission(const QString &use_in_vm_creation_permission) {
    m_use_in_vm_creation_permission = use_in_vm_creation_permission;
    m_use_in_vm_creation_permission_isSet = true;
}

bool OAISubnetOverrideFragment::is_use_in_vm_creation_permission_Set() const{
    return m_use_in_vm_creation_permission_isSet;
}

bool OAISubnetOverrideFragment::is_use_in_vm_creation_permission_Valid() const{
    return m_use_in_vm_creation_permission_isValid;
}

QString OAISubnetOverrideFragment::getUsePublicIpAddressPermission() const {
    return m_use_public_ip_address_permission;
}
void OAISubnetOverrideFragment::setUsePublicIpAddressPermission(const QString &use_public_ip_address_permission) {
    m_use_public_ip_address_permission = use_public_ip_address_permission;
    m_use_public_ip_address_permission_isSet = true;
}

bool OAISubnetOverrideFragment::is_use_public_ip_address_permission_Set() const{
    return m_use_public_ip_address_permission_isSet;
}

bool OAISubnetOverrideFragment::is_use_public_ip_address_permission_Valid() const{
    return m_use_public_ip_address_permission_isValid;
}

QString OAISubnetOverrideFragment::getVirtualNetworkPoolName() const {
    return m_virtual_network_pool_name;
}
void OAISubnetOverrideFragment::setVirtualNetworkPoolName(const QString &virtual_network_pool_name) {
    m_virtual_network_pool_name = virtual_network_pool_name;
    m_virtual_network_pool_name_isSet = true;
}

bool OAISubnetOverrideFragment::is_virtual_network_pool_name_Set() const{
    return m_virtual_network_pool_name_isSet;
}

bool OAISubnetOverrideFragment::is_virtual_network_pool_name_Valid() const{
    return m_virtual_network_pool_name_isValid;
}

bool OAISubnetOverrideFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lab_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_public_ip_address_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_in_vm_creation_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_public_ip_address_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubnetOverrideFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
