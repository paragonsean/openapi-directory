/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactProperties::OAIArtifactProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactProperties::OAIArtifactProperties() {
    this->initializeModel();
}

OAIArtifactProperties::~OAIArtifactProperties() {}

void OAIArtifactProperties::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_target_os_type_isSet = false;
    m_target_os_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIArtifactProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactProperties::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_target_os_type_isValid = ::OpenAPI::fromJsonValue(m_target_os_type, json[QString("targetOsType")]);
    m_target_os_type_isSet = !json[QString("targetOsType")].isNull() && m_target_os_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIArtifactProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_target_os_type_isSet) {
        obj.insert(QString("targetOsType"), ::OpenAPI::toJsonValue(m_target_os_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIArtifactProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIArtifactProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIArtifactProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIArtifactProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIArtifactProperties::getDescription() const {
    return m_description;
}
void OAIArtifactProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIArtifactProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIArtifactProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIArtifactProperties::getFilePath() const {
    return m_file_path;
}
void OAIArtifactProperties::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIArtifactProperties::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIArtifactProperties::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIArtifactProperties::getIcon() const {
    return m_icon;
}
void OAIArtifactProperties::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIArtifactProperties::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIArtifactProperties::is_icon_Valid() const{
    return m_icon_isValid;
}

OAIObject OAIArtifactProperties::getParameters() const {
    return m_parameters;
}
void OAIArtifactProperties::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIArtifactProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIArtifactProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIArtifactProperties::getPublisher() const {
    return m_publisher;
}
void OAIArtifactProperties::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIArtifactProperties::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIArtifactProperties::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIArtifactProperties::getTargetOsType() const {
    return m_target_os_type;
}
void OAIArtifactProperties::setTargetOsType(const QString &target_os_type) {
    m_target_os_type = target_os_type;
    m_target_os_type_isSet = true;
}

bool OAIArtifactProperties::is_target_os_type_Set() const{
    return m_target_os_type_isSet;
}

bool OAIArtifactProperties::is_target_os_type_Valid() const{
    return m_target_os_type_isValid;
}

QString OAIArtifactProperties::getTitle() const {
    return m_title;
}
void OAIArtifactProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIArtifactProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAIArtifactProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIArtifactProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
