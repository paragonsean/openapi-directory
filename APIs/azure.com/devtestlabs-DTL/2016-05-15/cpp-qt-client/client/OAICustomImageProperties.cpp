/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomImageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomImageProperties::OAICustomImageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomImageProperties::OAICustomImageProperties() {
    this->initializeModel();
}

OAICustomImageProperties::~OAICustomImageProperties() {}

void OAICustomImageProperties::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_managed_image_id_isSet = false;
    m_managed_image_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;

    m_vhd_isSet = false;
    m_vhd_isValid = false;

    m_vm_isSet = false;
    m_vm_isValid = false;
}

void OAICustomImageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomImageProperties::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_managed_image_id_isValid = ::OpenAPI::fromJsonValue(m_managed_image_id, json[QString("managedImageId")]);
    m_managed_image_id_isSet = !json[QString("managedImageId")].isNull() && m_managed_image_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;

    m_vhd_isValid = ::OpenAPI::fromJsonValue(m_vhd, json[QString("vhd")]);
    m_vhd_isSet = !json[QString("vhd")].isNull() && m_vhd_isValid;

    m_vm_isValid = ::OpenAPI::fromJsonValue(m_vm, json[QString("vm")]);
    m_vm_isSet = !json[QString("vm")].isNull() && m_vm_isValid;
}

QString OAICustomImageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomImageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_managed_image_id_isSet) {
        obj.insert(QString("managedImageId"), ::OpenAPI::toJsonValue(m_managed_image_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    if (m_vhd.isSet()) {
        obj.insert(QString("vhd"), ::OpenAPI::toJsonValue(m_vhd));
    }
    if (m_vm.isSet()) {
        obj.insert(QString("vm"), ::OpenAPI::toJsonValue(m_vm));
    }
    return obj;
}

QString OAICustomImageProperties::getAuthor() const {
    return m_author;
}
void OAICustomImageProperties::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICustomImageProperties::is_author_Set() const{
    return m_author_isSet;
}

bool OAICustomImageProperties::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAICustomImageProperties::getCreationDate() const {
    return m_creation_date;
}
void OAICustomImageProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAICustomImageProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAICustomImageProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAICustomImageProperties::getDescription() const {
    return m_description;
}
void OAICustomImageProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomImageProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomImageProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICustomImageProperties::getManagedImageId() const {
    return m_managed_image_id;
}
void OAICustomImageProperties::setManagedImageId(const QString &managed_image_id) {
    m_managed_image_id = managed_image_id;
    m_managed_image_id_isSet = true;
}

bool OAICustomImageProperties::is_managed_image_id_Set() const{
    return m_managed_image_id_isSet;
}

bool OAICustomImageProperties::is_managed_image_id_Valid() const{
    return m_managed_image_id_isValid;
}

QString OAICustomImageProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAICustomImageProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAICustomImageProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAICustomImageProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAICustomImageProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAICustomImageProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAICustomImageProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAICustomImageProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

OAICustomImagePropertiesCustom OAICustomImageProperties::getVhd() const {
    return m_vhd;
}
void OAICustomImageProperties::setVhd(const OAICustomImagePropertiesCustom &vhd) {
    m_vhd = vhd;
    m_vhd_isSet = true;
}

bool OAICustomImageProperties::is_vhd_Set() const{
    return m_vhd_isSet;
}

bool OAICustomImageProperties::is_vhd_Valid() const{
    return m_vhd_isValid;
}

OAICustomImagePropertiesFromVm OAICustomImageProperties::getVm() const {
    return m_vm;
}
void OAICustomImageProperties::setVm(const OAICustomImagePropertiesFromVm &vm) {
    m_vm = vm;
    m_vm_isSet = true;
}

bool OAICustomImageProperties::is_vm_Set() const{
    return m_vm_isSet;
}

bool OAICustomImageProperties::is_vm_Valid() const{
    return m_vm_isValid;
}

bool OAICustomImageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomImageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
