/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyPropertiesFragment::OAIPolicyPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyPropertiesFragment::OAIPolicyPropertiesFragment() {
    this->initializeModel();
}

OAIPolicyPropertiesFragment::~OAIPolicyPropertiesFragment() {}

void OAIPolicyPropertiesFragment::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_evaluator_type_isSet = false;
    m_evaluator_type_isValid = false;

    m_fact_data_isSet = false;
    m_fact_data_isValid = false;

    m_fact_name_isSet = false;
    m_fact_name_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAIPolicyPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_evaluator_type_isValid = ::OpenAPI::fromJsonValue(m_evaluator_type, json[QString("evaluatorType")]);
    m_evaluator_type_isSet = !json[QString("evaluatorType")].isNull() && m_evaluator_type_isValid;

    m_fact_data_isValid = ::OpenAPI::fromJsonValue(m_fact_data, json[QString("factData")]);
    m_fact_data_isSet = !json[QString("factData")].isNull() && m_fact_data_isValid;

    m_fact_name_isValid = ::OpenAPI::fromJsonValue(m_fact_name, json[QString("factName")]);
    m_fact_name_isSet = !json[QString("factName")].isNull() && m_fact_name_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAIPolicyPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_evaluator_type_isSet) {
        obj.insert(QString("evaluatorType"), ::OpenAPI::toJsonValue(m_evaluator_type));
    }
    if (m_fact_data_isSet) {
        obj.insert(QString("factData"), ::OpenAPI::toJsonValue(m_fact_data));
    }
    if (m_fact_name_isSet) {
        obj.insert(QString("factName"), ::OpenAPI::toJsonValue(m_fact_name));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QString OAIPolicyPropertiesFragment::getDescription() const {
    return m_description;
}
void OAIPolicyPropertiesFragment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPolicyPropertiesFragment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPolicyPropertiesFragment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPolicyPropertiesFragment::getEvaluatorType() const {
    return m_evaluator_type;
}
void OAIPolicyPropertiesFragment::setEvaluatorType(const QString &evaluator_type) {
    m_evaluator_type = evaluator_type;
    m_evaluator_type_isSet = true;
}

bool OAIPolicyPropertiesFragment::is_evaluator_type_Set() const{
    return m_evaluator_type_isSet;
}

bool OAIPolicyPropertiesFragment::is_evaluator_type_Valid() const{
    return m_evaluator_type_isValid;
}

QString OAIPolicyPropertiesFragment::getFactData() const {
    return m_fact_data;
}
void OAIPolicyPropertiesFragment::setFactData(const QString &fact_data) {
    m_fact_data = fact_data;
    m_fact_data_isSet = true;
}

bool OAIPolicyPropertiesFragment::is_fact_data_Set() const{
    return m_fact_data_isSet;
}

bool OAIPolicyPropertiesFragment::is_fact_data_Valid() const{
    return m_fact_data_isValid;
}

QString OAIPolicyPropertiesFragment::getFactName() const {
    return m_fact_name;
}
void OAIPolicyPropertiesFragment::setFactName(const QString &fact_name) {
    m_fact_name = fact_name;
    m_fact_name_isSet = true;
}

bool OAIPolicyPropertiesFragment::is_fact_name_Set() const{
    return m_fact_name_isSet;
}

bool OAIPolicyPropertiesFragment::is_fact_name_Valid() const{
    return m_fact_name_isValid;
}

QString OAIPolicyPropertiesFragment::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPolicyPropertiesFragment::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPolicyPropertiesFragment::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPolicyPropertiesFragment::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIPolicyPropertiesFragment::getStatus() const {
    return m_status;
}
void OAIPolicyPropertiesFragment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPolicyPropertiesFragment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPolicyPropertiesFragment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPolicyPropertiesFragment::getThreshold() const {
    return m_threshold;
}
void OAIPolicyPropertiesFragment::setThreshold(const QString &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIPolicyPropertiesFragment::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIPolicyPropertiesFragment::is_threshold_Valid() const{
    return m_threshold_isValid;
}

QString OAIPolicyPropertiesFragment::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIPolicyPropertiesFragment::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIPolicyPropertiesFragment::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIPolicyPropertiesFragment::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAIPolicyPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
