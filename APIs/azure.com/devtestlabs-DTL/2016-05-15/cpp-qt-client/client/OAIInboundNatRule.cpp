/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundNatRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundNatRule::OAIInboundNatRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundNatRule::OAIInboundNatRule() {
    this->initializeModel();
}

OAIInboundNatRule::~OAIInboundNatRule() {}

void OAIInboundNatRule::initializeModel() {

    m_backend_port_isSet = false;
    m_backend_port_isValid = false;

    m_frontend_port_isSet = false;
    m_frontend_port_isValid = false;

    m_transport_protocol_isSet = false;
    m_transport_protocol_isValid = false;
}

void OAIInboundNatRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundNatRule::fromJsonObject(QJsonObject json) {

    m_backend_port_isValid = ::OpenAPI::fromJsonValue(m_backend_port, json[QString("backendPort")]);
    m_backend_port_isSet = !json[QString("backendPort")].isNull() && m_backend_port_isValid;

    m_frontend_port_isValid = ::OpenAPI::fromJsonValue(m_frontend_port, json[QString("frontendPort")]);
    m_frontend_port_isSet = !json[QString("frontendPort")].isNull() && m_frontend_port_isValid;

    m_transport_protocol_isValid = ::OpenAPI::fromJsonValue(m_transport_protocol, json[QString("transportProtocol")]);
    m_transport_protocol_isSet = !json[QString("transportProtocol")].isNull() && m_transport_protocol_isValid;
}

QString OAIInboundNatRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundNatRule::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_port_isSet) {
        obj.insert(QString("backendPort"), ::OpenAPI::toJsonValue(m_backend_port));
    }
    if (m_frontend_port_isSet) {
        obj.insert(QString("frontendPort"), ::OpenAPI::toJsonValue(m_frontend_port));
    }
    if (m_transport_protocol_isSet) {
        obj.insert(QString("transportProtocol"), ::OpenAPI::toJsonValue(m_transport_protocol));
    }
    return obj;
}

qint32 OAIInboundNatRule::getBackendPort() const {
    return m_backend_port;
}
void OAIInboundNatRule::setBackendPort(const qint32 &backend_port) {
    m_backend_port = backend_port;
    m_backend_port_isSet = true;
}

bool OAIInboundNatRule::is_backend_port_Set() const{
    return m_backend_port_isSet;
}

bool OAIInboundNatRule::is_backend_port_Valid() const{
    return m_backend_port_isValid;
}

qint32 OAIInboundNatRule::getFrontendPort() const {
    return m_frontend_port;
}
void OAIInboundNatRule::setFrontendPort(const qint32 &frontend_port) {
    m_frontend_port = frontend_port;
    m_frontend_port_isSet = true;
}

bool OAIInboundNatRule::is_frontend_port_Set() const{
    return m_frontend_port_isSet;
}

bool OAIInboundNatRule::is_frontend_port_Valid() const{
    return m_frontend_port_isValid;
}

QString OAIInboundNatRule::getTransportProtocol() const {
    return m_transport_protocol;
}
void OAIInboundNatRule::setTransportProtocol(const QString &transport_protocol) {
    m_transport_protocol = transport_protocol;
    m_transport_protocol_isSet = true;
}

bool OAIInboundNatRule::is_transport_protocol_Set() const{
    return m_transport_protocol_isSet;
}

bool OAIInboundNatRule::is_transport_protocol_Valid() const{
    return m_transport_protocol_isValid;
}

bool OAIInboundNatRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundNatRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
