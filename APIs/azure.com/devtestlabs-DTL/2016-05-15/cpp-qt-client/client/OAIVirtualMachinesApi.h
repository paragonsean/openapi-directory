/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachinesApi_H
#define OAI_OAIVirtualMachinesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicableSchedule.h"
#include "OAIApplyArtifactsRequest.h"
#include "OAICloudError.h"
#include "OAIDataDiskProperties.h"
#include "OAIDetachDataDiskProperties.h"
#include "OAILabVirtualMachine.h"
#include "OAILabVirtualMachineFragment.h"
#include "OAIResponseWithContinuation_LabVirtualMachine.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachinesApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachinesApi(const int timeOut = 0);
    ~OAIVirtualMachinesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  data_disk_properties OAIDataDiskProperties [required]
    */
    virtual void virtualMachinesAddDataDisk(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIDataDiskProperties &data_disk_properties);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  apply_artifacts_request OAIApplyArtifactsRequest [required]
    */
    virtual void virtualMachinesApplyArtifacts(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIApplyArtifactsRequest &apply_artifacts_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachinesClaim(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab_virtual_machine OAILabVirtualMachine [required]
    */
    virtual void virtualMachinesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAILabVirtualMachine &lab_virtual_machine);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachinesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  detach_data_disk_properties OAIDetachDataDiskProperties [required]
    */
    virtual void virtualMachinesDetachDataDisk(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAIDetachDataDiskProperties &detach_data_disk_properties);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualMachinesGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void virtualMachinesList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachinesListApplicableSchedules(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachinesStart(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachinesStop(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab_virtual_machine OAILabVirtualMachineFragment [required]
    */
    virtual void virtualMachinesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_name, const QString &name, const QString &api_version, const OAILabVirtualMachineFragment &lab_virtual_machine);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachinesAddDataDiskCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesApplyArtifactsCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesClaimCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesDetachDataDiskCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesListCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesListApplicableSchedulesCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesStartCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesStopCallback(OAIHttpRequestWorker *worker);
    void virtualMachinesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachinesAddDataDiskSignal();
    void virtualMachinesApplyArtifactsSignal();
    void virtualMachinesClaimSignal();
    void virtualMachinesCreateOrUpdateSignal(OAILabVirtualMachine summary);
    void virtualMachinesDeleteSignal();
    void virtualMachinesDetachDataDiskSignal();
    void virtualMachinesGetSignal(OAILabVirtualMachine summary);
    void virtualMachinesListSignal(OAIResponseWithContinuation_LabVirtualMachine summary);
    void virtualMachinesListApplicableSchedulesSignal(OAIApplicableSchedule summary);
    void virtualMachinesStartSignal();
    void virtualMachinesStopSignal();
    void virtualMachinesUpdateSignal(OAILabVirtualMachine summary);


    void virtualMachinesAddDataDiskSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachinesApplyArtifactsSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachinesClaimSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachinesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILabVirtualMachine summary);
    void virtualMachinesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachinesDetachDataDiskSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachinesGetSignalFull(OAIHttpRequestWorker *worker, OAILabVirtualMachine summary);
    void virtualMachinesListSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_LabVirtualMachine summary);
    void virtualMachinesListApplicableSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIApplicableSchedule summary);
    void virtualMachinesStartSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachinesStopSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachinesUpdateSignalFull(OAIHttpRequestWorker *worker, OAILabVirtualMachine summary);

    Q_DECL_DEPRECATED_X("Use virtualMachinesAddDataDiskSignalError() instead")
    void virtualMachinesAddDataDiskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesAddDataDiskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesApplyArtifactsSignalError() instead")
    void virtualMachinesApplyArtifactsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesApplyArtifactsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesClaimSignalError() instead")
    void virtualMachinesClaimSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesClaimSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesCreateOrUpdateSignalError() instead")
    void virtualMachinesCreateOrUpdateSignalE(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesCreateOrUpdateSignalError(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesDeleteSignalError() instead")
    void virtualMachinesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesDetachDataDiskSignalError() instead")
    void virtualMachinesDetachDataDiskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesDetachDataDiskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesGetSignalError() instead")
    void virtualMachinesGetSignalE(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesGetSignalError(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListSignalError() instead")
    void virtualMachinesListSignalE(OAIResponseWithContinuation_LabVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListSignalError(OAIResponseWithContinuation_LabVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListApplicableSchedulesSignalError() instead")
    void virtualMachinesListApplicableSchedulesSignalE(OAIApplicableSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListApplicableSchedulesSignalError(OAIApplicableSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesStartSignalError() instead")
    void virtualMachinesStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesStopSignalError() instead")
    void virtualMachinesStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesUpdateSignalError() instead")
    void virtualMachinesUpdateSignalE(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesUpdateSignalError(OAILabVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachinesAddDataDiskSignalErrorFull() instead")
    void virtualMachinesAddDataDiskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesAddDataDiskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesApplyArtifactsSignalErrorFull() instead")
    void virtualMachinesApplyArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesApplyArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesClaimSignalErrorFull() instead")
    void virtualMachinesClaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesClaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesCreateOrUpdateSignalErrorFull() instead")
    void virtualMachinesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesDeleteSignalErrorFull() instead")
    void virtualMachinesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesDetachDataDiskSignalErrorFull() instead")
    void virtualMachinesDetachDataDiskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesDetachDataDiskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesGetSignalErrorFull() instead")
    void virtualMachinesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListSignalErrorFull() instead")
    void virtualMachinesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesListApplicableSchedulesSignalErrorFull() instead")
    void virtualMachinesListApplicableSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesListApplicableSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesStartSignalErrorFull() instead")
    void virtualMachinesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesStopSignalErrorFull() instead")
    void virtualMachinesStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachinesUpdateSignalErrorFull() instead")
    void virtualMachinesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachinesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
