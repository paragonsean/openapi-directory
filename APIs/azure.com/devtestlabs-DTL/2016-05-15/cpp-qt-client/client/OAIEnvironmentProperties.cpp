/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentProperties::OAIEnvironmentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentProperties::OAIEnvironmentProperties() {
    this->initializeModel();
}

OAIEnvironmentProperties::~OAIEnvironmentProperties() {}

void OAIEnvironmentProperties::initializeModel() {

    m_arm_template_display_name_isSet = false;
    m_arm_template_display_name_isValid = false;

    m_created_by_user_isSet = false;
    m_created_by_user_isValid = false;

    m_deployment_properties_isSet = false;
    m_deployment_properties_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_group_id_isSet = false;
    m_resource_group_id_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAIEnvironmentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentProperties::fromJsonObject(QJsonObject json) {

    m_arm_template_display_name_isValid = ::OpenAPI::fromJsonValue(m_arm_template_display_name, json[QString("armTemplateDisplayName")]);
    m_arm_template_display_name_isSet = !json[QString("armTemplateDisplayName")].isNull() && m_arm_template_display_name_isValid;

    m_created_by_user_isValid = ::OpenAPI::fromJsonValue(m_created_by_user, json[QString("createdByUser")]);
    m_created_by_user_isSet = !json[QString("createdByUser")].isNull() && m_created_by_user_isValid;

    m_deployment_properties_isValid = ::OpenAPI::fromJsonValue(m_deployment_properties, json[QString("deploymentProperties")]);
    m_deployment_properties_isSet = !json[QString("deploymentProperties")].isNull() && m_deployment_properties_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_resource_group_id, json[QString("resourceGroupId")]);
    m_resource_group_id_isSet = !json[QString("resourceGroupId")].isNull() && m_resource_group_id_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAIEnvironmentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_arm_template_display_name_isSet) {
        obj.insert(QString("armTemplateDisplayName"), ::OpenAPI::toJsonValue(m_arm_template_display_name));
    }
    if (m_created_by_user_isSet) {
        obj.insert(QString("createdByUser"), ::OpenAPI::toJsonValue(m_created_by_user));
    }
    if (m_deployment_properties.isSet()) {
        obj.insert(QString("deploymentProperties"), ::OpenAPI::toJsonValue(m_deployment_properties));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_group_id_isSet) {
        obj.insert(QString("resourceGroupId"), ::OpenAPI::toJsonValue(m_resource_group_id));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QString OAIEnvironmentProperties::getArmTemplateDisplayName() const {
    return m_arm_template_display_name;
}
void OAIEnvironmentProperties::setArmTemplateDisplayName(const QString &arm_template_display_name) {
    m_arm_template_display_name = arm_template_display_name;
    m_arm_template_display_name_isSet = true;
}

bool OAIEnvironmentProperties::is_arm_template_display_name_Set() const{
    return m_arm_template_display_name_isSet;
}

bool OAIEnvironmentProperties::is_arm_template_display_name_Valid() const{
    return m_arm_template_display_name_isValid;
}

QString OAIEnvironmentProperties::getCreatedByUser() const {
    return m_created_by_user;
}
void OAIEnvironmentProperties::setCreatedByUser(const QString &created_by_user) {
    m_created_by_user = created_by_user;
    m_created_by_user_isSet = true;
}

bool OAIEnvironmentProperties::is_created_by_user_Set() const{
    return m_created_by_user_isSet;
}

bool OAIEnvironmentProperties::is_created_by_user_Valid() const{
    return m_created_by_user_isValid;
}

OAIEnvironmentDeploymentProperties OAIEnvironmentProperties::getDeploymentProperties() const {
    return m_deployment_properties;
}
void OAIEnvironmentProperties::setDeploymentProperties(const OAIEnvironmentDeploymentProperties &deployment_properties) {
    m_deployment_properties = deployment_properties;
    m_deployment_properties_isSet = true;
}

bool OAIEnvironmentProperties::is_deployment_properties_Set() const{
    return m_deployment_properties_isSet;
}

bool OAIEnvironmentProperties::is_deployment_properties_Valid() const{
    return m_deployment_properties_isValid;
}

QString OAIEnvironmentProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIEnvironmentProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIEnvironmentProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIEnvironmentProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIEnvironmentProperties::getResourceGroupId() const {
    return m_resource_group_id;
}
void OAIEnvironmentProperties::setResourceGroupId(const QString &resource_group_id) {
    m_resource_group_id = resource_group_id;
    m_resource_group_id_isSet = true;
}

bool OAIEnvironmentProperties::is_resource_group_id_Set() const{
    return m_resource_group_id_isSet;
}

bool OAIEnvironmentProperties::is_resource_group_id_Valid() const{
    return m_resource_group_id_isValid;
}

QString OAIEnvironmentProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIEnvironmentProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIEnvironmentProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIEnvironmentProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAIEnvironmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arm_template_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
