/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetCostProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetCostProperties::OAITargetCostProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetCostProperties::OAITargetCostProperties() {
    this->initializeModel();
}

OAITargetCostProperties::~OAITargetCostProperties() {}

void OAITargetCostProperties::initializeModel() {

    m_cost_thresholds_isSet = false;
    m_cost_thresholds_isValid = false;

    m_cycle_end_date_time_isSet = false;
    m_cycle_end_date_time_isValid = false;

    m_cycle_start_date_time_isSet = false;
    m_cycle_start_date_time_isValid = false;

    m_cycle_type_isSet = false;
    m_cycle_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAITargetCostProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetCostProperties::fromJsonObject(QJsonObject json) {

    m_cost_thresholds_isValid = ::OpenAPI::fromJsonValue(m_cost_thresholds, json[QString("costThresholds")]);
    m_cost_thresholds_isSet = !json[QString("costThresholds")].isNull() && m_cost_thresholds_isValid;

    m_cycle_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_cycle_end_date_time, json[QString("cycleEndDateTime")]);
    m_cycle_end_date_time_isSet = !json[QString("cycleEndDateTime")].isNull() && m_cycle_end_date_time_isValid;

    m_cycle_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_cycle_start_date_time, json[QString("cycleStartDateTime")]);
    m_cycle_start_date_time_isSet = !json[QString("cycleStartDateTime")].isNull() && m_cycle_start_date_time_isValid;

    m_cycle_type_isValid = ::OpenAPI::fromJsonValue(m_cycle_type, json[QString("cycleType")]);
    m_cycle_type_isSet = !json[QString("cycleType")].isNull() && m_cycle_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAITargetCostProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetCostProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_thresholds.size() > 0) {
        obj.insert(QString("costThresholds"), ::OpenAPI::toJsonValue(m_cost_thresholds));
    }
    if (m_cycle_end_date_time_isSet) {
        obj.insert(QString("cycleEndDateTime"), ::OpenAPI::toJsonValue(m_cycle_end_date_time));
    }
    if (m_cycle_start_date_time_isSet) {
        obj.insert(QString("cycleStartDateTime"), ::OpenAPI::toJsonValue(m_cycle_start_date_time));
    }
    if (m_cycle_type_isSet) {
        obj.insert(QString("cycleType"), ::OpenAPI::toJsonValue(m_cycle_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QList<OAICostThresholdProperties> OAITargetCostProperties::getCostThresholds() const {
    return m_cost_thresholds;
}
void OAITargetCostProperties::setCostThresholds(const QList<OAICostThresholdProperties> &cost_thresholds) {
    m_cost_thresholds = cost_thresholds;
    m_cost_thresholds_isSet = true;
}

bool OAITargetCostProperties::is_cost_thresholds_Set() const{
    return m_cost_thresholds_isSet;
}

bool OAITargetCostProperties::is_cost_thresholds_Valid() const{
    return m_cost_thresholds_isValid;
}

QDateTime OAITargetCostProperties::getCycleEndDateTime() const {
    return m_cycle_end_date_time;
}
void OAITargetCostProperties::setCycleEndDateTime(const QDateTime &cycle_end_date_time) {
    m_cycle_end_date_time = cycle_end_date_time;
    m_cycle_end_date_time_isSet = true;
}

bool OAITargetCostProperties::is_cycle_end_date_time_Set() const{
    return m_cycle_end_date_time_isSet;
}

bool OAITargetCostProperties::is_cycle_end_date_time_Valid() const{
    return m_cycle_end_date_time_isValid;
}

QDateTime OAITargetCostProperties::getCycleStartDateTime() const {
    return m_cycle_start_date_time;
}
void OAITargetCostProperties::setCycleStartDateTime(const QDateTime &cycle_start_date_time) {
    m_cycle_start_date_time = cycle_start_date_time;
    m_cycle_start_date_time_isSet = true;
}

bool OAITargetCostProperties::is_cycle_start_date_time_Set() const{
    return m_cycle_start_date_time_isSet;
}

bool OAITargetCostProperties::is_cycle_start_date_time_Valid() const{
    return m_cycle_start_date_time_isValid;
}

QString OAITargetCostProperties::getCycleType() const {
    return m_cycle_type;
}
void OAITargetCostProperties::setCycleType(const QString &cycle_type) {
    m_cycle_type = cycle_type;
    m_cycle_type_isSet = true;
}

bool OAITargetCostProperties::is_cycle_type_Set() const{
    return m_cycle_type_isSet;
}

bool OAITargetCostProperties::is_cycle_type_Valid() const{
    return m_cycle_type_isValid;
}

QString OAITargetCostProperties::getStatus() const {
    return m_status;
}
void OAITargetCostProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITargetCostProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAITargetCostProperties::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAITargetCostProperties::getTarget() const {
    return m_target;
}
void OAITargetCostProperties::setTarget(const qint32 &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAITargetCostProperties::is_target_Set() const{
    return m_target_isSet;
}

bool OAITargetCostProperties::is_target_Valid() const{
    return m_target_isValid;
}

bool OAITargetCostProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_thresholds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetCostProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
