/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkPropertiesFragment::OAIVirtualNetworkPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkPropertiesFragment::OAIVirtualNetworkPropertiesFragment() {
    this->initializeModel();
}

OAIVirtualNetworkPropertiesFragment::~OAIVirtualNetworkPropertiesFragment() {}

void OAIVirtualNetworkPropertiesFragment::initializeModel() {

    m_allowed_subnets_isSet = false;
    m_allowed_subnets_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_provider_resource_id_isSet = false;
    m_external_provider_resource_id_isValid = false;

    m_external_subnets_isSet = false;
    m_external_subnets_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_subnet_overrides_isSet = false;
    m_subnet_overrides_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAIVirtualNetworkPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_allowed_subnets_isValid = ::OpenAPI::fromJsonValue(m_allowed_subnets, json[QString("allowedSubnets")]);
    m_allowed_subnets_isSet = !json[QString("allowedSubnets")].isNull() && m_allowed_subnets_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_provider_resource_id_isValid = ::OpenAPI::fromJsonValue(m_external_provider_resource_id, json[QString("externalProviderResourceId")]);
    m_external_provider_resource_id_isSet = !json[QString("externalProviderResourceId")].isNull() && m_external_provider_resource_id_isValid;

    m_external_subnets_isValid = ::OpenAPI::fromJsonValue(m_external_subnets, json[QString("externalSubnets")]);
    m_external_subnets_isSet = !json[QString("externalSubnets")].isNull() && m_external_subnets_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_subnet_overrides_isValid = ::OpenAPI::fromJsonValue(m_subnet_overrides, json[QString("subnetOverrides")]);
    m_subnet_overrides_isSet = !json[QString("subnetOverrides")].isNull() && m_subnet_overrides_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAIVirtualNetworkPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_subnets.size() > 0) {
        obj.insert(QString("allowedSubnets"), ::OpenAPI::toJsonValue(m_allowed_subnets));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_provider_resource_id_isSet) {
        obj.insert(QString("externalProviderResourceId"), ::OpenAPI::toJsonValue(m_external_provider_resource_id));
    }
    if (m_external_subnets.size() > 0) {
        obj.insert(QString("externalSubnets"), ::OpenAPI::toJsonValue(m_external_subnets));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_subnet_overrides.size() > 0) {
        obj.insert(QString("subnetOverrides"), ::OpenAPI::toJsonValue(m_subnet_overrides));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QList<OAISubnetFragment> OAIVirtualNetworkPropertiesFragment::getAllowedSubnets() const {
    return m_allowed_subnets;
}
void OAIVirtualNetworkPropertiesFragment::setAllowedSubnets(const QList<OAISubnetFragment> &allowed_subnets) {
    m_allowed_subnets = allowed_subnets;
    m_allowed_subnets_isSet = true;
}

bool OAIVirtualNetworkPropertiesFragment::is_allowed_subnets_Set() const{
    return m_allowed_subnets_isSet;
}

bool OAIVirtualNetworkPropertiesFragment::is_allowed_subnets_Valid() const{
    return m_allowed_subnets_isValid;
}

QString OAIVirtualNetworkPropertiesFragment::getDescription() const {
    return m_description;
}
void OAIVirtualNetworkPropertiesFragment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVirtualNetworkPropertiesFragment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVirtualNetworkPropertiesFragment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVirtualNetworkPropertiesFragment::getExternalProviderResourceId() const {
    return m_external_provider_resource_id;
}
void OAIVirtualNetworkPropertiesFragment::setExternalProviderResourceId(const QString &external_provider_resource_id) {
    m_external_provider_resource_id = external_provider_resource_id;
    m_external_provider_resource_id_isSet = true;
}

bool OAIVirtualNetworkPropertiesFragment::is_external_provider_resource_id_Set() const{
    return m_external_provider_resource_id_isSet;
}

bool OAIVirtualNetworkPropertiesFragment::is_external_provider_resource_id_Valid() const{
    return m_external_provider_resource_id_isValid;
}

QList<OAIExternalSubnetFragment> OAIVirtualNetworkPropertiesFragment::getExternalSubnets() const {
    return m_external_subnets;
}
void OAIVirtualNetworkPropertiesFragment::setExternalSubnets(const QList<OAIExternalSubnetFragment> &external_subnets) {
    m_external_subnets = external_subnets;
    m_external_subnets_isSet = true;
}

bool OAIVirtualNetworkPropertiesFragment::is_external_subnets_Set() const{
    return m_external_subnets_isSet;
}

bool OAIVirtualNetworkPropertiesFragment::is_external_subnets_Valid() const{
    return m_external_subnets_isValid;
}

QString OAIVirtualNetworkPropertiesFragment::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualNetworkPropertiesFragment::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualNetworkPropertiesFragment::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualNetworkPropertiesFragment::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAISubnetOverrideFragment> OAIVirtualNetworkPropertiesFragment::getSubnetOverrides() const {
    return m_subnet_overrides;
}
void OAIVirtualNetworkPropertiesFragment::setSubnetOverrides(const QList<OAISubnetOverrideFragment> &subnet_overrides) {
    m_subnet_overrides = subnet_overrides;
    m_subnet_overrides_isSet = true;
}

bool OAIVirtualNetworkPropertiesFragment::is_subnet_overrides_Set() const{
    return m_subnet_overrides_isSet;
}

bool OAIVirtualNetworkPropertiesFragment::is_subnet_overrides_Valid() const{
    return m_subnet_overrides_isValid;
}

QString OAIVirtualNetworkPropertiesFragment::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIVirtualNetworkPropertiesFragment::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIVirtualNetworkPropertiesFragment::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIVirtualNetworkPropertiesFragment::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAIVirtualNetworkPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_provider_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
