/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataDiskProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataDiskProperties::OAIDataDiskProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataDiskProperties::OAIDataDiskProperties() {
    this->initializeModel();
}

OAIDataDiskProperties::~OAIDataDiskProperties() {}

void OAIDataDiskProperties::initializeModel() {

    m_attach_new_data_disk_options_isSet = false;
    m_attach_new_data_disk_options_isValid = false;

    m_existing_lab_disk_id_isSet = false;
    m_existing_lab_disk_id_isValid = false;

    m_host_caching_isSet = false;
    m_host_caching_isValid = false;
}

void OAIDataDiskProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataDiskProperties::fromJsonObject(QJsonObject json) {

    m_attach_new_data_disk_options_isValid = ::OpenAPI::fromJsonValue(m_attach_new_data_disk_options, json[QString("attachNewDataDiskOptions")]);
    m_attach_new_data_disk_options_isSet = !json[QString("attachNewDataDiskOptions")].isNull() && m_attach_new_data_disk_options_isValid;

    m_existing_lab_disk_id_isValid = ::OpenAPI::fromJsonValue(m_existing_lab_disk_id, json[QString("existingLabDiskId")]);
    m_existing_lab_disk_id_isSet = !json[QString("existingLabDiskId")].isNull() && m_existing_lab_disk_id_isValid;

    m_host_caching_isValid = ::OpenAPI::fromJsonValue(m_host_caching, json[QString("hostCaching")]);
    m_host_caching_isSet = !json[QString("hostCaching")].isNull() && m_host_caching_isValid;
}

QString OAIDataDiskProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataDiskProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_attach_new_data_disk_options.isSet()) {
        obj.insert(QString("attachNewDataDiskOptions"), ::OpenAPI::toJsonValue(m_attach_new_data_disk_options));
    }
    if (m_existing_lab_disk_id_isSet) {
        obj.insert(QString("existingLabDiskId"), ::OpenAPI::toJsonValue(m_existing_lab_disk_id));
    }
    if (m_host_caching_isSet) {
        obj.insert(QString("hostCaching"), ::OpenAPI::toJsonValue(m_host_caching));
    }
    return obj;
}

OAIAttachNewDataDiskOptions OAIDataDiskProperties::getAttachNewDataDiskOptions() const {
    return m_attach_new_data_disk_options;
}
void OAIDataDiskProperties::setAttachNewDataDiskOptions(const OAIAttachNewDataDiskOptions &attach_new_data_disk_options) {
    m_attach_new_data_disk_options = attach_new_data_disk_options;
    m_attach_new_data_disk_options_isSet = true;
}

bool OAIDataDiskProperties::is_attach_new_data_disk_options_Set() const{
    return m_attach_new_data_disk_options_isSet;
}

bool OAIDataDiskProperties::is_attach_new_data_disk_options_Valid() const{
    return m_attach_new_data_disk_options_isValid;
}

QString OAIDataDiskProperties::getExistingLabDiskId() const {
    return m_existing_lab_disk_id;
}
void OAIDataDiskProperties::setExistingLabDiskId(const QString &existing_lab_disk_id) {
    m_existing_lab_disk_id = existing_lab_disk_id;
    m_existing_lab_disk_id_isSet = true;
}

bool OAIDataDiskProperties::is_existing_lab_disk_id_Set() const{
    return m_existing_lab_disk_id_isSet;
}

bool OAIDataDiskProperties::is_existing_lab_disk_id_Valid() const{
    return m_existing_lab_disk_id_isValid;
}

QString OAIDataDiskProperties::getHostCaching() const {
    return m_host_caching;
}
void OAIDataDiskProperties::setHostCaching(const QString &host_caching) {
    m_host_caching = host_caching;
    m_host_caching_isSet = true;
}

bool OAIDataDiskProperties::is_host_caching_Set() const{
    return m_host_caching_isSet;
}

bool OAIDataDiskProperties::is_host_caching_Valid() const{
    return m_host_caching_isValid;
}

bool OAIDataDiskProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attach_new_data_disk_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_existing_lab_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_caching_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataDiskProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
