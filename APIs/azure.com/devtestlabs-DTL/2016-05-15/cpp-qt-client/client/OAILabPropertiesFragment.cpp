/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabPropertiesFragment::OAILabPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabPropertiesFragment::OAILabPropertiesFragment() {
    this->initializeModel();
}

OAILabPropertiesFragment::~OAILabPropertiesFragment() {}

void OAILabPropertiesFragment::initializeModel() {

    m_lab_storage_type_isSet = false;
    m_lab_storage_type_isValid = false;

    m_premium_data_disks_isSet = false;
    m_premium_data_disks_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAILabPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_lab_storage_type_isValid = ::OpenAPI::fromJsonValue(m_lab_storage_type, json[QString("labStorageType")]);
    m_lab_storage_type_isSet = !json[QString("labStorageType")].isNull() && m_lab_storage_type_isValid;

    m_premium_data_disks_isValid = ::OpenAPI::fromJsonValue(m_premium_data_disks, json[QString("premiumDataDisks")]);
    m_premium_data_disks_isSet = !json[QString("premiumDataDisks")].isNull() && m_premium_data_disks_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAILabPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_lab_storage_type_isSet) {
        obj.insert(QString("labStorageType"), ::OpenAPI::toJsonValue(m_lab_storage_type));
    }
    if (m_premium_data_disks_isSet) {
        obj.insert(QString("premiumDataDisks"), ::OpenAPI::toJsonValue(m_premium_data_disks));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QString OAILabPropertiesFragment::getLabStorageType() const {
    return m_lab_storage_type;
}
void OAILabPropertiesFragment::setLabStorageType(const QString &lab_storage_type) {
    m_lab_storage_type = lab_storage_type;
    m_lab_storage_type_isSet = true;
}

bool OAILabPropertiesFragment::is_lab_storage_type_Set() const{
    return m_lab_storage_type_isSet;
}

bool OAILabPropertiesFragment::is_lab_storage_type_Valid() const{
    return m_lab_storage_type_isValid;
}

QString OAILabPropertiesFragment::getPremiumDataDisks() const {
    return m_premium_data_disks;
}
void OAILabPropertiesFragment::setPremiumDataDisks(const QString &premium_data_disks) {
    m_premium_data_disks = premium_data_disks;
    m_premium_data_disks_isSet = true;
}

bool OAILabPropertiesFragment::is_premium_data_disks_Set() const{
    return m_premium_data_disks_isSet;
}

bool OAILabPropertiesFragment::is_premium_data_disks_Valid() const{
    return m_premium_data_disks_isValid;
}

QString OAILabPropertiesFragment::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILabPropertiesFragment::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILabPropertiesFragment::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILabPropertiesFragment::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAILabPropertiesFragment::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAILabPropertiesFragment::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAILabPropertiesFragment::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAILabPropertiesFragment::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAILabPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lab_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_data_disks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
