/**
 * DevTestLabsClient
 * The DevTest Labs Client.
 *
 * The version of the OpenAPI document: 2016-05-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShutdownNotificationContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShutdownNotificationContent::OAIShutdownNotificationContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShutdownNotificationContent::OAIShutdownNotificationContent() {
    this->initializeModel();
}

OAIShutdownNotificationContent::~OAIShutdownNotificationContent() {}

void OAIShutdownNotificationContent::initializeModel() {

    m_delay_url120_isSet = false;
    m_delay_url120_isValid = false;

    m_delay_url60_isSet = false;
    m_delay_url60_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_lab_name_isSet = false;
    m_lab_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_skip_url_isSet = false;
    m_skip_url_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_vm_name_isSet = false;
    m_vm_name_isValid = false;
}

void OAIShutdownNotificationContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShutdownNotificationContent::fromJsonObject(QJsonObject json) {

    m_delay_url120_isValid = ::OpenAPI::fromJsonValue(m_delay_url120, json[QString("delayUrl120")]);
    m_delay_url120_isSet = !json[QString("delayUrl120")].isNull() && m_delay_url120_isValid;

    m_delay_url60_isValid = ::OpenAPI::fromJsonValue(m_delay_url60, json[QString("delayUrl60")]);
    m_delay_url60_isSet = !json[QString("delayUrl60")].isNull() && m_delay_url60_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_lab_name_isValid = ::OpenAPI::fromJsonValue(m_lab_name, json[QString("labName")]);
    m_lab_name_isSet = !json[QString("labName")].isNull() && m_lab_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_skip_url_isValid = ::OpenAPI::fromJsonValue(m_skip_url, json[QString("skipUrl")]);
    m_skip_url_isSet = !json[QString("skipUrl")].isNull() && m_skip_url_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_vm_name_isValid = ::OpenAPI::fromJsonValue(m_vm_name, json[QString("vmName")]);
    m_vm_name_isSet = !json[QString("vmName")].isNull() && m_vm_name_isValid;
}

QString OAIShutdownNotificationContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShutdownNotificationContent::asJsonObject() const {
    QJsonObject obj;
    if (m_delay_url120_isSet) {
        obj.insert(QString("delayUrl120"), ::OpenAPI::toJsonValue(m_delay_url120));
    }
    if (m_delay_url60_isSet) {
        obj.insert(QString("delayUrl60"), ::OpenAPI::toJsonValue(m_delay_url60));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_lab_name_isSet) {
        obj.insert(QString("labName"), ::OpenAPI::toJsonValue(m_lab_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_skip_url_isSet) {
        obj.insert(QString("skipUrl"), ::OpenAPI::toJsonValue(m_skip_url));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_vm_name_isSet) {
        obj.insert(QString("vmName"), ::OpenAPI::toJsonValue(m_vm_name));
    }
    return obj;
}

QString OAIShutdownNotificationContent::getDelayUrl120() const {
    return m_delay_url120;
}
void OAIShutdownNotificationContent::setDelayUrl120(const QString &delay_url120) {
    m_delay_url120 = delay_url120;
    m_delay_url120_isSet = true;
}

bool OAIShutdownNotificationContent::is_delay_url120_Set() const{
    return m_delay_url120_isSet;
}

bool OAIShutdownNotificationContent::is_delay_url120_Valid() const{
    return m_delay_url120_isValid;
}

QString OAIShutdownNotificationContent::getDelayUrl60() const {
    return m_delay_url60;
}
void OAIShutdownNotificationContent::setDelayUrl60(const QString &delay_url60) {
    m_delay_url60 = delay_url60;
    m_delay_url60_isSet = true;
}

bool OAIShutdownNotificationContent::is_delay_url60_Set() const{
    return m_delay_url60_isSet;
}

bool OAIShutdownNotificationContent::is_delay_url60_Valid() const{
    return m_delay_url60_isValid;
}

QString OAIShutdownNotificationContent::getEventType() const {
    return m_event_type;
}
void OAIShutdownNotificationContent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIShutdownNotificationContent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIShutdownNotificationContent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIShutdownNotificationContent::getGuid() const {
    return m_guid;
}
void OAIShutdownNotificationContent::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIShutdownNotificationContent::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIShutdownNotificationContent::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIShutdownNotificationContent::getLabName() const {
    return m_lab_name;
}
void OAIShutdownNotificationContent::setLabName(const QString &lab_name) {
    m_lab_name = lab_name;
    m_lab_name_isSet = true;
}

bool OAIShutdownNotificationContent::is_lab_name_Set() const{
    return m_lab_name_isSet;
}

bool OAIShutdownNotificationContent::is_lab_name_Valid() const{
    return m_lab_name_isValid;
}

QString OAIShutdownNotificationContent::getOwner() const {
    return m_owner;
}
void OAIShutdownNotificationContent::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIShutdownNotificationContent::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIShutdownNotificationContent::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIShutdownNotificationContent::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAIShutdownNotificationContent::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAIShutdownNotificationContent::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAIShutdownNotificationContent::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAIShutdownNotificationContent::getSkipUrl() const {
    return m_skip_url;
}
void OAIShutdownNotificationContent::setSkipUrl(const QString &skip_url) {
    m_skip_url = skip_url;
    m_skip_url_isSet = true;
}

bool OAIShutdownNotificationContent::is_skip_url_Set() const{
    return m_skip_url_isSet;
}

bool OAIShutdownNotificationContent::is_skip_url_Valid() const{
    return m_skip_url_isValid;
}

QString OAIShutdownNotificationContent::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIShutdownNotificationContent::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIShutdownNotificationContent::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIShutdownNotificationContent::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIShutdownNotificationContent::getText() const {
    return m_text;
}
void OAIShutdownNotificationContent::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIShutdownNotificationContent::is_text_Set() const{
    return m_text_isSet;
}

bool OAIShutdownNotificationContent::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIShutdownNotificationContent::getVmName() const {
    return m_vm_name;
}
void OAIShutdownNotificationContent::setVmName(const QString &vm_name) {
    m_vm_name = vm_name;
    m_vm_name_isSet = true;
}

bool OAIShutdownNotificationContent::is_vm_name_Set() const{
    return m_vm_name_isSet;
}

bool OAIShutdownNotificationContent::is_vm_name_Valid() const{
    return m_vm_name_isValid;
}

bool OAIShutdownNotificationContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delay_url120_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_url60_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShutdownNotificationContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
