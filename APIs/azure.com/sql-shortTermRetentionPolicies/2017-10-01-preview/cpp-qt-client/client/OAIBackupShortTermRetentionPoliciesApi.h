/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBackupShortTermRetentionPoliciesApi_H
#define OAI_OAIBackupShortTermRetentionPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupShortTermRetentionPolicy.h"
#include "OAIBackupShortTermRetentionPolicyListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBackupShortTermRetentionPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIBackupShortTermRetentionPoliciesApi(const int timeOut = 0);
    ~OAIBackupShortTermRetentionPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIBackupShortTermRetentionPolicy [required]
    */
    virtual void backupShortTermRetentionPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &policy_name, const QString &subscription_id, const QString &api_version, const OAIBackupShortTermRetentionPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupShortTermRetentionPoliciesGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &policy_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupShortTermRetentionPoliciesListByDatabase(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIBackupShortTermRetentionPolicy [required]
    */
    virtual void backupShortTermRetentionPoliciesUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &policy_name, const QString &subscription_id, const QString &api_version, const OAIBackupShortTermRetentionPolicy &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupShortTermRetentionPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void backupShortTermRetentionPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void backupShortTermRetentionPoliciesListByDatabaseCallback(OAIHttpRequestWorker *worker);
    void backupShortTermRetentionPoliciesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupShortTermRetentionPoliciesCreateOrUpdateSignal(OAIBackupShortTermRetentionPolicy summary);
    void backupShortTermRetentionPoliciesGetSignal(OAIBackupShortTermRetentionPolicy summary);
    void backupShortTermRetentionPoliciesListByDatabaseSignal(OAIBackupShortTermRetentionPolicyListResult summary);
    void backupShortTermRetentionPoliciesUpdateSignal(OAIBackupShortTermRetentionPolicy summary);


    void backupShortTermRetentionPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBackupShortTermRetentionPolicy summary);
    void backupShortTermRetentionPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIBackupShortTermRetentionPolicy summary);
    void backupShortTermRetentionPoliciesListByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIBackupShortTermRetentionPolicyListResult summary);
    void backupShortTermRetentionPoliciesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBackupShortTermRetentionPolicy summary);

    Q_DECL_DEPRECATED_X("Use backupShortTermRetentionPoliciesCreateOrUpdateSignalError() instead")
    void backupShortTermRetentionPoliciesCreateOrUpdateSignalE(OAIBackupShortTermRetentionPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupShortTermRetentionPoliciesCreateOrUpdateSignalError(OAIBackupShortTermRetentionPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupShortTermRetentionPoliciesGetSignalError() instead")
    void backupShortTermRetentionPoliciesGetSignalE(OAIBackupShortTermRetentionPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupShortTermRetentionPoliciesGetSignalError(OAIBackupShortTermRetentionPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupShortTermRetentionPoliciesListByDatabaseSignalError() instead")
    void backupShortTermRetentionPoliciesListByDatabaseSignalE(OAIBackupShortTermRetentionPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupShortTermRetentionPoliciesListByDatabaseSignalError(OAIBackupShortTermRetentionPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupShortTermRetentionPoliciesUpdateSignalError() instead")
    void backupShortTermRetentionPoliciesUpdateSignalE(OAIBackupShortTermRetentionPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupShortTermRetentionPoliciesUpdateSignalError(OAIBackupShortTermRetentionPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupShortTermRetentionPoliciesCreateOrUpdateSignalErrorFull() instead")
    void backupShortTermRetentionPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupShortTermRetentionPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupShortTermRetentionPoliciesGetSignalErrorFull() instead")
    void backupShortTermRetentionPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupShortTermRetentionPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupShortTermRetentionPoliciesListByDatabaseSignalErrorFull() instead")
    void backupShortTermRetentionPoliciesListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupShortTermRetentionPoliciesListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupShortTermRetentionPoliciesUpdateSignalErrorFull() instead")
    void backupShortTermRetentionPoliciesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupShortTermRetentionPoliciesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
