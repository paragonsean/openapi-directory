# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnvironmentImageAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, mime_type: str=None, unpack: bool=None, url: str=None):
        """EnvironmentImageAsset - a model defined in OpenAPI

        :param id: The id of this EnvironmentImageAsset.
        :param mime_type: The mime_type of this EnvironmentImageAsset.
        :param unpack: The unpack of this EnvironmentImageAsset.
        :param url: The url of this EnvironmentImageAsset.
        """
        self.openapi_types = {
            'id': str,
            'mime_type': str,
            'unpack': bool,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'mime_type': 'mimeType',
            'unpack': 'unpack',
            'url': 'url'
        }

        self._id = id
        self._mime_type = mime_type
        self._unpack = unpack
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentImageAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentImageAsset of this EnvironmentImageAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EnvironmentImageAsset.

        The Asset Id.

        :return: The id of this EnvironmentImageAsset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvironmentImageAsset.

        The Asset Id.

        :param id: The id of this EnvironmentImageAsset.
        :type id: str
        """

        self._id = id

    @property
    def mime_type(self):
        """Gets the mime_type of this EnvironmentImageAsset.

        The mime type.

        :return: The mime_type of this EnvironmentImageAsset.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this EnvironmentImageAsset.

        The mime type.

        :param mime_type: The mime_type of this EnvironmentImageAsset.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def unpack(self):
        """Gets the unpack of this EnvironmentImageAsset.

        Whether the Asset is unpacked.

        :return: The unpack of this EnvironmentImageAsset.
        :rtype: bool
        """
        return self._unpack

    @unpack.setter
    def unpack(self, unpack):
        """Sets the unpack of this EnvironmentImageAsset.

        Whether the Asset is unpacked.

        :param unpack: The unpack of this EnvironmentImageAsset.
        :type unpack: bool
        """

        self._unpack = unpack

    @property
    def url(self):
        """Gets the url of this EnvironmentImageAsset.

        The Url of the Asset.

        :return: The url of this EnvironmentImageAsset.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EnvironmentImageAsset.

        The Url of the Asset.

        :param url: The url of this EnvironmentImageAsset.
        :type url: str
        """

        self._url = url
