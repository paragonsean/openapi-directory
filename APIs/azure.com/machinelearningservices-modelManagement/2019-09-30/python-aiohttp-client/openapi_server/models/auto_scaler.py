# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoScaler(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoscale_enabled: bool=None, max_replicas: int=None, min_replicas: int=None, refresh_period_in_seconds: int=None, target_utilization: int=None):
        """AutoScaler - a model defined in OpenAPI

        :param autoscale_enabled: The autoscale_enabled of this AutoScaler.
        :param max_replicas: The max_replicas of this AutoScaler.
        :param min_replicas: The min_replicas of this AutoScaler.
        :param refresh_period_in_seconds: The refresh_period_in_seconds of this AutoScaler.
        :param target_utilization: The target_utilization of this AutoScaler.
        """
        self.openapi_types = {
            'autoscale_enabled': bool,
            'max_replicas': int,
            'min_replicas': int,
            'refresh_period_in_seconds': int,
            'target_utilization': int
        }

        self.attribute_map = {
            'autoscale_enabled': 'autoscaleEnabled',
            'max_replicas': 'maxReplicas',
            'min_replicas': 'minReplicas',
            'refresh_period_in_seconds': 'refreshPeriodInSeconds',
            'target_utilization': 'targetUtilization'
        }

        self._autoscale_enabled = autoscale_enabled
        self._max_replicas = max_replicas
        self._min_replicas = min_replicas
        self._refresh_period_in_seconds = refresh_period_in_seconds
        self._target_utilization = target_utilization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoScaler':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoScaler of this AutoScaler.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoscale_enabled(self):
        """Gets the autoscale_enabled of this AutoScaler.

        Option to enable/disable auto scaling.

        :return: The autoscale_enabled of this AutoScaler.
        :rtype: bool
        """
        return self._autoscale_enabled

    @autoscale_enabled.setter
    def autoscale_enabled(self, autoscale_enabled):
        """Sets the autoscale_enabled of this AutoScaler.

        Option to enable/disable auto scaling.

        :param autoscale_enabled: The autoscale_enabled of this AutoScaler.
        :type autoscale_enabled: bool
        """

        self._autoscale_enabled = autoscale_enabled

    @property
    def max_replicas(self):
        """Gets the max_replicas of this AutoScaler.

        The maximum number of replicas in the cluster.

        :return: The max_replicas of this AutoScaler.
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas):
        """Sets the max_replicas of this AutoScaler.

        The maximum number of replicas in the cluster.

        :param max_replicas: The max_replicas of this AutoScaler.
        :type max_replicas: int
        """

        self._max_replicas = max_replicas

    @property
    def min_replicas(self):
        """Gets the min_replicas of this AutoScaler.

        The minimum number of replicas to scale down to.

        :return: The min_replicas of this AutoScaler.
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas):
        """Sets the min_replicas of this AutoScaler.

        The minimum number of replicas to scale down to.

        :param min_replicas: The min_replicas of this AutoScaler.
        :type min_replicas: int
        """

        self._min_replicas = min_replicas

    @property
    def refresh_period_in_seconds(self):
        """Gets the refresh_period_in_seconds of this AutoScaler.

        The amount of seconds to wait between auto scale updates.

        :return: The refresh_period_in_seconds of this AutoScaler.
        :rtype: int
        """
        return self._refresh_period_in_seconds

    @refresh_period_in_seconds.setter
    def refresh_period_in_seconds(self, refresh_period_in_seconds):
        """Sets the refresh_period_in_seconds of this AutoScaler.

        The amount of seconds to wait between auto scale updates.

        :param refresh_period_in_seconds: The refresh_period_in_seconds of this AutoScaler.
        :type refresh_period_in_seconds: int
        """

        self._refresh_period_in_seconds = refresh_period_in_seconds

    @property
    def target_utilization(self):
        """Gets the target_utilization of this AutoScaler.

        The target utilization percentage to use for determining whether to scale the cluster.

        :return: The target_utilization of this AutoScaler.
        :rtype: int
        """
        return self._target_utilization

    @target_utilization.setter
    def target_utilization(self, target_utilization):
        """Sets the target_utilization of this AutoScaler.

        The target utilization percentage to use for determining whether to scale the cluster.

        :param target_utilization: The target_utilization of this AutoScaler.
        :type target_utilization: int
        """

        self._target_utilization = target_utilization
