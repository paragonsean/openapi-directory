# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerResourceRequirements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu: float=None, fpga: int=None, gpu: int=None, memory_in_gb: float=None):
        """ContainerResourceRequirements - a model defined in OpenAPI

        :param cpu: The cpu of this ContainerResourceRequirements.
        :param fpga: The fpga of this ContainerResourceRequirements.
        :param gpu: The gpu of this ContainerResourceRequirements.
        :param memory_in_gb: The memory_in_gb of this ContainerResourceRequirements.
        """
        self.openapi_types = {
            'cpu': float,
            'fpga': int,
            'gpu': int,
            'memory_in_gb': float
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'fpga': 'fpga',
            'gpu': 'gpu',
            'memory_in_gb': 'memoryInGB'
        }

        self._cpu = cpu
        self._fpga = fpga
        self._gpu = gpu
        self._memory_in_gb = memory_in_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerResourceRequirements':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerResourceRequirements of this ContainerResourceRequirements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this ContainerResourceRequirements.

        The number of CPU cores on the container.

        :return: The cpu of this ContainerResourceRequirements.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ContainerResourceRequirements.

        The number of CPU cores on the container.

        :param cpu: The cpu of this ContainerResourceRequirements.
        :type cpu: float
        """

        self._cpu = cpu

    @property
    def fpga(self):
        """Gets the fpga of this ContainerResourceRequirements.

        The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.

        :return: The fpga of this ContainerResourceRequirements.
        :rtype: int
        """
        return self._fpga

    @fpga.setter
    def fpga(self, fpga):
        """Sets the fpga of this ContainerResourceRequirements.

        The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.

        :param fpga: The fpga of this ContainerResourceRequirements.
        :type fpga: int
        """

        self._fpga = fpga

    @property
    def gpu(self):
        """Gets the gpu of this ContainerResourceRequirements.

        The number of GPU cores in the container.

        :return: The gpu of this ContainerResourceRequirements.
        :rtype: int
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this ContainerResourceRequirements.

        The number of GPU cores in the container.

        :param gpu: The gpu of this ContainerResourceRequirements.
        :type gpu: int
        """

        self._gpu = gpu

    @property
    def memory_in_gb(self):
        """Gets the memory_in_gb of this ContainerResourceRequirements.

        The amount of memory on the container in GB.

        :return: The memory_in_gb of this ContainerResourceRequirements.
        :rtype: float
        """
        return self._memory_in_gb

    @memory_in_gb.setter
    def memory_in_gb(self, memory_in_gb):
        """Sets the memory_in_gb of this ContainerResourceRequirements.

        The amount of memory on the container in GB.

        :param memory_in_gb: The memory_in_gb of this ContainerResourceRequirements.
        :type memory_in_gb: float
        """

        self._memory_in_gb = memory_in_gb
