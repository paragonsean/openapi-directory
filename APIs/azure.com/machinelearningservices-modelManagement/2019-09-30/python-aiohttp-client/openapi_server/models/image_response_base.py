# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model import Model
from openapi_server.models.model_error_response import ModelErrorResponse
from openapi_server import util


class ImageResponseBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_delete: bool=None, created_time: datetime=None, creation_state: str=None, description: str=None, error: ModelErrorResponse=None, id: str=None, image_build_log_uri: str=None, image_flavor: str=None, image_location: str=None, image_type: str=None, kv_tags: Dict[str, str]=None, model_details: List[Model]=None, model_ids: List[str]=None, modified_time: datetime=None, name: str=None, operation_id: str=None, properties: Dict[str, str]=None, version: int=None):
        """ImageResponseBase - a model defined in OpenAPI

        :param auto_delete: The auto_delete of this ImageResponseBase.
        :param created_time: The created_time of this ImageResponseBase.
        :param creation_state: The creation_state of this ImageResponseBase.
        :param description: The description of this ImageResponseBase.
        :param error: The error of this ImageResponseBase.
        :param id: The id of this ImageResponseBase.
        :param image_build_log_uri: The image_build_log_uri of this ImageResponseBase.
        :param image_flavor: The image_flavor of this ImageResponseBase.
        :param image_location: The image_location of this ImageResponseBase.
        :param image_type: The image_type of this ImageResponseBase.
        :param kv_tags: The kv_tags of this ImageResponseBase.
        :param model_details: The model_details of this ImageResponseBase.
        :param model_ids: The model_ids of this ImageResponseBase.
        :param modified_time: The modified_time of this ImageResponseBase.
        :param name: The name of this ImageResponseBase.
        :param operation_id: The operation_id of this ImageResponseBase.
        :param properties: The properties of this ImageResponseBase.
        :param version: The version of this ImageResponseBase.
        """
        self.openapi_types = {
            'auto_delete': bool,
            'created_time': datetime,
            'creation_state': str,
            'description': str,
            'error': ModelErrorResponse,
            'id': str,
            'image_build_log_uri': str,
            'image_flavor': str,
            'image_location': str,
            'image_type': str,
            'kv_tags': Dict[str, str],
            'model_details': List[Model],
            'model_ids': List[str],
            'modified_time': datetime,
            'name': str,
            'operation_id': str,
            'properties': Dict[str, str],
            'version': int
        }

        self.attribute_map = {
            'auto_delete': 'autoDelete',
            'created_time': 'createdTime',
            'creation_state': 'creationState',
            'description': 'description',
            'error': 'error',
            'id': 'id',
            'image_build_log_uri': 'imageBuildLogUri',
            'image_flavor': 'imageFlavor',
            'image_location': 'imageLocation',
            'image_type': 'imageType',
            'kv_tags': 'kvTags',
            'model_details': 'modelDetails',
            'model_ids': 'modelIds',
            'modified_time': 'modifiedTime',
            'name': 'name',
            'operation_id': 'operationId',
            'properties': 'properties',
            'version': 'version'
        }

        self._auto_delete = auto_delete
        self._created_time = created_time
        self._creation_state = creation_state
        self._description = description
        self._error = error
        self._id = id
        self._image_build_log_uri = image_build_log_uri
        self._image_flavor = image_flavor
        self._image_location = image_location
        self._image_type = image_type
        self._kv_tags = kv_tags
        self._model_details = model_details
        self._model_ids = model_ids
        self._modified_time = modified_time
        self._name = name
        self._operation_id = operation_id
        self._properties = properties
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageResponseBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageResponseBase of this ImageResponseBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_delete(self):
        """Gets the auto_delete of this ImageResponseBase.

        Whether the image will be automatically deleted with the last service using it.

        :return: The auto_delete of this ImageResponseBase.
        :rtype: bool
        """
        return self._auto_delete

    @auto_delete.setter
    def auto_delete(self, auto_delete):
        """Sets the auto_delete of this ImageResponseBase.

        Whether the image will be automatically deleted with the last service using it.

        :param auto_delete: The auto_delete of this ImageResponseBase.
        :type auto_delete: bool
        """

        self._auto_delete = auto_delete

    @property
    def created_time(self):
        """Gets the created_time of this ImageResponseBase.

        The time the image was created.

        :return: The created_time of this ImageResponseBase.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ImageResponseBase.

        The time the image was created.

        :param created_time: The created_time of this ImageResponseBase.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def creation_state(self):
        """Gets the creation_state of this ImageResponseBase.

        The state of the operation.

        :return: The creation_state of this ImageResponseBase.
        :rtype: str
        """
        return self._creation_state

    @creation_state.setter
    def creation_state(self, creation_state):
        """Sets the creation_state of this ImageResponseBase.

        The state of the operation.

        :param creation_state: The creation_state of this ImageResponseBase.
        :type creation_state: str
        """
        allowed_values = ["NotStarted", "Running", "Cancelled", "Succeeded", "Failed", "TimedOut"]  # noqa: E501
        if creation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `creation_state` ({0}), must be one of {1}"
                .format(creation_state, allowed_values)
            )

        self._creation_state = creation_state

    @property
    def description(self):
        """Gets the description of this ImageResponseBase.

        The image description.

        :return: The description of this ImageResponseBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImageResponseBase.

        The image description.

        :param description: The description of this ImageResponseBase.
        :type description: str
        """

        self._description = description

    @property
    def error(self):
        """Gets the error of this ImageResponseBase.


        :return: The error of this ImageResponseBase.
        :rtype: ModelErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ImageResponseBase.


        :param error: The error of this ImageResponseBase.
        :type error: ModelErrorResponse
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this ImageResponseBase.

        The image Id.

        :return: The id of this ImageResponseBase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageResponseBase.

        The image Id.

        :param id: The id of this ImageResponseBase.
        :type id: str
        """

        self._id = id

    @property
    def image_build_log_uri(self):
        """Gets the image_build_log_uri of this ImageResponseBase.

        The Uri to the image build logs.

        :return: The image_build_log_uri of this ImageResponseBase.
        :rtype: str
        """
        return self._image_build_log_uri

    @image_build_log_uri.setter
    def image_build_log_uri(self, image_build_log_uri):
        """Sets the image_build_log_uri of this ImageResponseBase.

        The Uri to the image build logs.

        :param image_build_log_uri: The image_build_log_uri of this ImageResponseBase.
        :type image_build_log_uri: str
        """

        self._image_build_log_uri = image_build_log_uri

    @property
    def image_flavor(self):
        """Gets the image_flavor of this ImageResponseBase.

        The flavor of the image.

        :return: The image_flavor of this ImageResponseBase.
        :rtype: str
        """
        return self._image_flavor

    @image_flavor.setter
    def image_flavor(self, image_flavor):
        """Sets the image_flavor of this ImageResponseBase.

        The flavor of the image.

        :param image_flavor: The image_flavor of this ImageResponseBase.
        :type image_flavor: str
        """
        allowed_values = ["WebApiContainer", "BatchContainer", "IoTContainer", "AccelContainer", "UserProvidedContainer"]  # noqa: E501
        if image_flavor not in allowed_values:
            raise ValueError(
                "Invalid value for `image_flavor` ({0}), must be one of {1}"
                .format(image_flavor, allowed_values)
            )

        self._image_flavor = image_flavor

    @property
    def image_location(self):
        """Gets the image_location of this ImageResponseBase.

        The Image location string.

        :return: The image_location of this ImageResponseBase.
        :rtype: str
        """
        return self._image_location

    @image_location.setter
    def image_location(self, image_location):
        """Sets the image_location of this ImageResponseBase.

        The Image location string.

        :param image_location: The image_location of this ImageResponseBase.
        :type image_location: str
        """

        self._image_location = image_location

    @property
    def image_type(self):
        """Gets the image_type of this ImageResponseBase.

        The type of the image.

        :return: The image_type of this ImageResponseBase.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this ImageResponseBase.

        The type of the image.

        :param image_type: The image_type of this ImageResponseBase.
        :type image_type: str
        """
        allowed_values = ["Docker"]  # noqa: E501
        if image_type not in allowed_values:
            raise ValueError(
                "Invalid value for `image_type` ({0}), must be one of {1}"
                .format(image_type, allowed_values)
            )

        self._image_type = image_type

    @property
    def kv_tags(self):
        """Gets the kv_tags of this ImageResponseBase.

        The image tag dictionary. Tags are mutable.

        :return: The kv_tags of this ImageResponseBase.
        :rtype: Dict[str, str]
        """
        return self._kv_tags

    @kv_tags.setter
    def kv_tags(self, kv_tags):
        """Sets the kv_tags of this ImageResponseBase.

        The image tag dictionary. Tags are mutable.

        :param kv_tags: The kv_tags of this ImageResponseBase.
        :type kv_tags: Dict[str, str]
        """

        self._kv_tags = kv_tags

    @property
    def model_details(self):
        """Gets the model_details of this ImageResponseBase.

        The list of models.

        :return: The model_details of this ImageResponseBase.
        :rtype: List[Model]
        """
        return self._model_details

    @model_details.setter
    def model_details(self, model_details):
        """Sets the model_details of this ImageResponseBase.

        The list of models.

        :param model_details: The model_details of this ImageResponseBase.
        :type model_details: List[Model]
        """

        self._model_details = model_details

    @property
    def model_ids(self):
        """Gets the model_ids of this ImageResponseBase.

        The list of model Ids.

        :return: The model_ids of this ImageResponseBase.
        :rtype: List[str]
        """
        return self._model_ids

    @model_ids.setter
    def model_ids(self, model_ids):
        """Sets the model_ids of this ImageResponseBase.

        The list of model Ids.

        :param model_ids: The model_ids of this ImageResponseBase.
        :type model_ids: List[str]
        """

        self._model_ids = model_ids

    @property
    def modified_time(self):
        """Gets the modified_time of this ImageResponseBase.

        The time the image was last modified.

        :return: The modified_time of this ImageResponseBase.
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this ImageResponseBase.

        The time the image was last modified.

        :param modified_time: The modified_time of this ImageResponseBase.
        :type modified_time: datetime
        """

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this ImageResponseBase.

        The image name.

        :return: The name of this ImageResponseBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageResponseBase.

        The image name.

        :param name: The name of this ImageResponseBase.
        :type name: str
        """

        self._name = name

    @property
    def operation_id(self):
        """Gets the operation_id of this ImageResponseBase.

        The ID of the asynchronous operation for this image.

        :return: The operation_id of this ImageResponseBase.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this ImageResponseBase.

        The ID of the asynchronous operation for this image.

        :param operation_id: The operation_id of this ImageResponseBase.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def properties(self):
        """Gets the properties of this ImageResponseBase.

        The image properties dictionary. Properties are immutable.

        :return: The properties of this ImageResponseBase.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ImageResponseBase.

        The image properties dictionary. Properties are immutable.

        :param properties: The properties of this ImageResponseBase.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def version(self):
        """Gets the version of this ImageResponseBase.

        The image version.

        :return: The version of this ImageResponseBase.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ImageResponseBase.

        The image version.

        :param version: The version of this ImageResponseBase.
        :type version: int
        """

        self._version = version
