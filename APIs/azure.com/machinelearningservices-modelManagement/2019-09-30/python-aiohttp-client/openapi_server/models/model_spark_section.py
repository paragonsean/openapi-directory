# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.spark_maven_package import SparkMavenPackage
from openapi_server import util


class ModelSparkSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, packages: List[SparkMavenPackage]=None, precache_packages: bool=None, repositories: List[str]=None):
        """ModelSparkSection - a model defined in OpenAPI

        :param packages: The packages of this ModelSparkSection.
        :param precache_packages: The precache_packages of this ModelSparkSection.
        :param repositories: The repositories of this ModelSparkSection.
        """
        self.openapi_types = {
            'packages': List[SparkMavenPackage],
            'precache_packages': bool,
            'repositories': List[str]
        }

        self.attribute_map = {
            'packages': 'packages',
            'precache_packages': 'precachePackages',
            'repositories': 'repositories'
        }

        self._packages = packages
        self._precache_packages = precache_packages
        self._repositories = repositories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelSparkSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelSparkSection of this ModelSparkSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def packages(self):
        """Gets the packages of this ModelSparkSection.

        The Spark packages to use.

        :return: The packages of this ModelSparkSection.
        :rtype: List[SparkMavenPackage]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this ModelSparkSection.

        The Spark packages to use.

        :param packages: The packages of this ModelSparkSection.
        :type packages: List[SparkMavenPackage]
        """

        self._packages = packages

    @property
    def precache_packages(self):
        """Gets the precache_packages of this ModelSparkSection.

        Whether to precache the packages.

        :return: The precache_packages of this ModelSparkSection.
        :rtype: bool
        """
        return self._precache_packages

    @precache_packages.setter
    def precache_packages(self, precache_packages):
        """Sets the precache_packages of this ModelSparkSection.

        Whether to precache the packages.

        :param precache_packages: The precache_packages of this ModelSparkSection.
        :type precache_packages: bool
        """

        self._precache_packages = precache_packages

    @property
    def repositories(self):
        """Gets the repositories of this ModelSparkSection.

        The list of spark repositories.

        :return: The repositories of this ModelSparkSection.
        :rtype: List[str]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this ModelSparkSection.

        The list of spark repositories.

        :param repositories: The repositories of this ModelSparkSection.
        :type repositories: List[str]
        """

        self._repositories = repositories
