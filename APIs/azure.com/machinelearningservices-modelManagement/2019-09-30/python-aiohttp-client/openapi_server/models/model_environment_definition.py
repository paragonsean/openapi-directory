# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_docker_section import ModelDockerSection
from openapi_server.models.model_python_section import ModelPythonSection
from openapi_server.models.model_spark_section import ModelSparkSection
from openapi_server import util


class ModelEnvironmentDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, docker: ModelDockerSection=None, environment_variables: Dict[str, str]=None, inferencing_stack_version: str=None, name: str=None, python: ModelPythonSection=None, spark: ModelSparkSection=None, version: str=None):
        """ModelEnvironmentDefinition - a model defined in OpenAPI

        :param docker: The docker of this ModelEnvironmentDefinition.
        :param environment_variables: The environment_variables of this ModelEnvironmentDefinition.
        :param inferencing_stack_version: The inferencing_stack_version of this ModelEnvironmentDefinition.
        :param name: The name of this ModelEnvironmentDefinition.
        :param python: The python of this ModelEnvironmentDefinition.
        :param spark: The spark of this ModelEnvironmentDefinition.
        :param version: The version of this ModelEnvironmentDefinition.
        """
        self.openapi_types = {
            'docker': ModelDockerSection,
            'environment_variables': Dict[str, str],
            'inferencing_stack_version': str,
            'name': str,
            'python': ModelPythonSection,
            'spark': ModelSparkSection,
            'version': str
        }

        self.attribute_map = {
            'docker': 'docker',
            'environment_variables': 'environmentVariables',
            'inferencing_stack_version': 'inferencingStackVersion',
            'name': 'name',
            'python': 'python',
            'spark': 'spark',
            'version': 'version'
        }

        self._docker = docker
        self._environment_variables = environment_variables
        self._inferencing_stack_version = inferencing_stack_version
        self._name = name
        self._python = python
        self._spark = spark
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelEnvironmentDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelEnvironmentDefinition of this ModelEnvironmentDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def docker(self):
        """Gets the docker of this ModelEnvironmentDefinition.


        :return: The docker of this ModelEnvironmentDefinition.
        :rtype: ModelDockerSection
        """
        return self._docker

    @docker.setter
    def docker(self, docker):
        """Sets the docker of this ModelEnvironmentDefinition.


        :param docker: The docker of this ModelEnvironmentDefinition.
        :type docker: ModelDockerSection
        """

        self._docker = docker

    @property
    def environment_variables(self):
        """Gets the environment_variables of this ModelEnvironmentDefinition.

        Definition of environment variables to be defined in the environment.

        :return: The environment_variables of this ModelEnvironmentDefinition.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this ModelEnvironmentDefinition.

        Definition of environment variables to be defined in the environment.

        :param environment_variables: The environment_variables of this ModelEnvironmentDefinition.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def inferencing_stack_version(self):
        """Gets the inferencing_stack_version of this ModelEnvironmentDefinition.

        The Inferencing stack version.

        :return: The inferencing_stack_version of this ModelEnvironmentDefinition.
        :rtype: str
        """
        return self._inferencing_stack_version

    @inferencing_stack_version.setter
    def inferencing_stack_version(self, inferencing_stack_version):
        """Sets the inferencing_stack_version of this ModelEnvironmentDefinition.

        The Inferencing stack version.

        :param inferencing_stack_version: The inferencing_stack_version of this ModelEnvironmentDefinition.
        :type inferencing_stack_version: str
        """

        self._inferencing_stack_version = inferencing_stack_version

    @property
    def name(self):
        """Gets the name of this ModelEnvironmentDefinition.

        The name of the environment.

        :return: The name of this ModelEnvironmentDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelEnvironmentDefinition.

        The name of the environment.

        :param name: The name of this ModelEnvironmentDefinition.
        :type name: str
        """

        self._name = name

    @property
    def python(self):
        """Gets the python of this ModelEnvironmentDefinition.


        :return: The python of this ModelEnvironmentDefinition.
        :rtype: ModelPythonSection
        """
        return self._python

    @python.setter
    def python(self, python):
        """Sets the python of this ModelEnvironmentDefinition.


        :param python: The python of this ModelEnvironmentDefinition.
        :type python: ModelPythonSection
        """

        self._python = python

    @property
    def spark(self):
        """Gets the spark of this ModelEnvironmentDefinition.


        :return: The spark of this ModelEnvironmentDefinition.
        :rtype: ModelSparkSection
        """
        return self._spark

    @spark.setter
    def spark(self, spark):
        """Sets the spark of this ModelEnvironmentDefinition.


        :param spark: The spark of this ModelEnvironmentDefinition.
        :type spark: ModelSparkSection
        """

        self._spark = spark

    @property
    def version(self):
        """Gets the version of this ModelEnvironmentDefinition.

        The environment version.

        :return: The version of this ModelEnvironmentDefinition.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelEnvironmentDefinition.

        The environment version.

        :param version: The version of this ModelEnvironmentDefinition.
        :type version: str
        """

        self._version = version
