# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.async_operation_details import AsyncOperationDetails
from openapi_server.models.model_error_response import ModelErrorResponse
from openapi_server import util


class AsyncOperationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, end_time: datetime=None, error: ModelErrorResponse=None, id: str=None, operation_details: AsyncOperationDetails=None, operation_log: str=None, operation_type: str=None, parent_request_id: str=None, resource_location: str=None, state: str=None):
        """AsyncOperationStatus - a model defined in OpenAPI

        :param created_time: The created_time of this AsyncOperationStatus.
        :param end_time: The end_time of this AsyncOperationStatus.
        :param error: The error of this AsyncOperationStatus.
        :param id: The id of this AsyncOperationStatus.
        :param operation_details: The operation_details of this AsyncOperationStatus.
        :param operation_log: The operation_log of this AsyncOperationStatus.
        :param operation_type: The operation_type of this AsyncOperationStatus.
        :param parent_request_id: The parent_request_id of this AsyncOperationStatus.
        :param resource_location: The resource_location of this AsyncOperationStatus.
        :param state: The state of this AsyncOperationStatus.
        """
        self.openapi_types = {
            'created_time': datetime,
            'end_time': datetime,
            'error': ModelErrorResponse,
            'id': str,
            'operation_details': AsyncOperationDetails,
            'operation_log': str,
            'operation_type': str,
            'parent_request_id': str,
            'resource_location': str,
            'state': str
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'end_time': 'endTime',
            'error': 'error',
            'id': 'id',
            'operation_details': 'operationDetails',
            'operation_log': 'operationLog',
            'operation_type': 'operationType',
            'parent_request_id': 'parentRequestId',
            'resource_location': 'resourceLocation',
            'state': 'state'
        }

        self._created_time = created_time
        self._end_time = end_time
        self._error = error
        self._id = id
        self._operation_details = operation_details
        self._operation_log = operation_log
        self._operation_type = operation_type
        self._parent_request_id = parent_request_id
        self._resource_location = resource_location
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsyncOperationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsyncOperationStatus of this AsyncOperationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this AsyncOperationStatus.

        The async operation creation time (UTC).

        :return: The created_time of this AsyncOperationStatus.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AsyncOperationStatus.

        The async operation creation time (UTC).

        :param created_time: The created_time of this AsyncOperationStatus.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def end_time(self):
        """Gets the end_time of this AsyncOperationStatus.

        The async operation end time (UTC)l

        :return: The end_time of this AsyncOperationStatus.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AsyncOperationStatus.

        The async operation end time (UTC)l

        :param end_time: The end_time of this AsyncOperationStatus.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this AsyncOperationStatus.


        :return: The error of this AsyncOperationStatus.
        :rtype: ModelErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AsyncOperationStatus.


        :param error: The error of this AsyncOperationStatus.
        :type error: ModelErrorResponse
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this AsyncOperationStatus.

        The async operation id.

        :return: The id of this AsyncOperationStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AsyncOperationStatus.

        The async operation id.

        :param id: The id of this AsyncOperationStatus.
        :type id: str
        """

        self._id = id

    @property
    def operation_details(self):
        """Gets the operation_details of this AsyncOperationStatus.


        :return: The operation_details of this AsyncOperationStatus.
        :rtype: AsyncOperationDetails
        """
        return self._operation_details

    @operation_details.setter
    def operation_details(self, operation_details):
        """Sets the operation_details of this AsyncOperationStatus.


        :param operation_details: The operation_details of this AsyncOperationStatus.
        :type operation_details: AsyncOperationDetails
        """

        self._operation_details = operation_details

    @property
    def operation_log(self):
        """Gets the operation_log of this AsyncOperationStatus.

        The async operation log.

        :return: The operation_log of this AsyncOperationStatus.
        :rtype: str
        """
        return self._operation_log

    @operation_log.setter
    def operation_log(self, operation_log):
        """Sets the operation_log of this AsyncOperationStatus.

        The async operation log.

        :param operation_log: The operation_log of this AsyncOperationStatus.
        :type operation_log: str
        """

        self._operation_log = operation_log

    @property
    def operation_type(self):
        """Gets the operation_type of this AsyncOperationStatus.

        The async operation type.

        :return: The operation_type of this AsyncOperationStatus.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this AsyncOperationStatus.

        The async operation type.

        :param operation_type: The operation_type of this AsyncOperationStatus.
        :type operation_type: str
        """

        self._operation_type = operation_type

    @property
    def parent_request_id(self):
        """Gets the parent_request_id of this AsyncOperationStatus.

        The request id that created this operation

        :return: The parent_request_id of this AsyncOperationStatus.
        :rtype: str
        """
        return self._parent_request_id

    @parent_request_id.setter
    def parent_request_id(self, parent_request_id):
        """Sets the parent_request_id of this AsyncOperationStatus.

        The request id that created this operation

        :param parent_request_id: The parent_request_id of this AsyncOperationStatus.
        :type parent_request_id: str
        """

        self._parent_request_id = parent_request_id

    @property
    def resource_location(self):
        """Gets the resource_location of this AsyncOperationStatus.

        The resource created/updated by the async operation.

        :return: The resource_location of this AsyncOperationStatus.
        :rtype: str
        """
        return self._resource_location

    @resource_location.setter
    def resource_location(self, resource_location):
        """Sets the resource_location of this AsyncOperationStatus.

        The resource created/updated by the async operation.

        :param resource_location: The resource_location of this AsyncOperationStatus.
        :type resource_location: str
        """

        self._resource_location = resource_location

    @property
    def state(self):
        """Gets the state of this AsyncOperationStatus.

        The async operation state.

        :return: The state of this AsyncOperationStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AsyncOperationStatus.

        The async operation state.

        :param state: The state of this AsyncOperationStatus.
        :type state: str
        """
        allowed_values = ["NotStarted", "Running", "Cancelled", "Succeeded", "Failed", "TimedOut"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
