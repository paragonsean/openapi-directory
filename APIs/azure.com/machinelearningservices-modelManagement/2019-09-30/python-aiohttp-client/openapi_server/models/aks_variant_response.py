# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_error_response import ModelErrorResponse
from openapi_server.models.service_response_base import ServiceResponseBase
from openapi_server import util


class AKSVariantResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_type: str=None, created_time: datetime=None, deployment_type: str=None, description: str=None, error: ModelErrorResponse=None, id: str=None, kv_tags: Dict[str, str]=None, name: str=None, operation_id: str=None, properties: Dict[str, str]=None, state: str=None, updated_time: datetime=None, is_default: bool=None, traffic_percentile: float=None, type: str=None):
        """AKSVariantResponse - a model defined in OpenAPI

        :param compute_type: The compute_type of this AKSVariantResponse.
        :param created_time: The created_time of this AKSVariantResponse.
        :param deployment_type: The deployment_type of this AKSVariantResponse.
        :param description: The description of this AKSVariantResponse.
        :param error: The error of this AKSVariantResponse.
        :param id: The id of this AKSVariantResponse.
        :param kv_tags: The kv_tags of this AKSVariantResponse.
        :param name: The name of this AKSVariantResponse.
        :param operation_id: The operation_id of this AKSVariantResponse.
        :param properties: The properties of this AKSVariantResponse.
        :param state: The state of this AKSVariantResponse.
        :param updated_time: The updated_time of this AKSVariantResponse.
        :param is_default: The is_default of this AKSVariantResponse.
        :param traffic_percentile: The traffic_percentile of this AKSVariantResponse.
        :param type: The type of this AKSVariantResponse.
        """
        self.openapi_types = {
            'compute_type': str,
            'created_time': datetime,
            'deployment_type': str,
            'description': str,
            'error': ModelErrorResponse,
            'id': str,
            'kv_tags': Dict[str, str],
            'name': str,
            'operation_id': str,
            'properties': Dict[str, str],
            'state': str,
            'updated_time': datetime,
            'is_default': bool,
            'traffic_percentile': float,
            'type': str
        }

        self.attribute_map = {
            'compute_type': 'computeType',
            'created_time': 'createdTime',
            'deployment_type': 'deploymentType',
            'description': 'description',
            'error': 'error',
            'id': 'id',
            'kv_tags': 'kvTags',
            'name': 'name',
            'operation_id': 'operationId',
            'properties': 'properties',
            'state': 'state',
            'updated_time': 'updatedTime',
            'is_default': 'isDefault',
            'traffic_percentile': 'trafficPercentile',
            'type': 'type'
        }

        self._compute_type = compute_type
        self._created_time = created_time
        self._deployment_type = deployment_type
        self._description = description
        self._error = error
        self._id = id
        self._kv_tags = kv_tags
        self._name = name
        self._operation_id = operation_id
        self._properties = properties
        self._state = state
        self._updated_time = updated_time
        self._is_default = is_default
        self._traffic_percentile = traffic_percentile
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AKSVariantResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AKSVariantResponse of this AKSVariantResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_type(self):
        """Gets the compute_type of this AKSVariantResponse.

        The compute environment type for the service.

        :return: The compute_type of this AKSVariantResponse.
        :rtype: str
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this AKSVariantResponse.

        The compute environment type for the service.

        :param compute_type: The compute_type of this AKSVariantResponse.
        :type compute_type: str
        """
        allowed_values = ["ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT", "UNKNOWN"]  # noqa: E501
        if compute_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compute_type` ({0}), must be one of {1}"
                .format(compute_type, allowed_values)
            )

        self._compute_type = compute_type

    @property
    def created_time(self):
        """Gets the created_time of this AKSVariantResponse.

        The time the service was created.

        :return: The created_time of this AKSVariantResponse.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AKSVariantResponse.

        The time the service was created.

        :param created_time: The created_time of this AKSVariantResponse.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def deployment_type(self):
        """Gets the deployment_type of this AKSVariantResponse.

        The deployment type for the service.

        :return: The deployment_type of this AKSVariantResponse.
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this AKSVariantResponse.

        The deployment type for the service.

        :param deployment_type: The deployment_type of this AKSVariantResponse.
        :type deployment_type: str
        """
        allowed_values = ["GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch"]  # noqa: E501
        if deployment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    @property
    def description(self):
        """Gets the description of this AKSVariantResponse.

        The service description.

        :return: The description of this AKSVariantResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AKSVariantResponse.

        The service description.

        :param description: The description of this AKSVariantResponse.
        :type description: str
        """

        self._description = description

    @property
    def error(self):
        """Gets the error of this AKSVariantResponse.


        :return: The error of this AKSVariantResponse.
        :rtype: ModelErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AKSVariantResponse.


        :param error: The error of this AKSVariantResponse.
        :type error: ModelErrorResponse
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this AKSVariantResponse.

        The service Id.

        :return: The id of this AKSVariantResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AKSVariantResponse.

        The service Id.

        :param id: The id of this AKSVariantResponse.
        :type id: str
        """

        self._id = id

    @property
    def kv_tags(self):
        """Gets the kv_tags of this AKSVariantResponse.

        The service tag dictionary. Tags are mutable.

        :return: The kv_tags of this AKSVariantResponse.
        :rtype: Dict[str, str]
        """
        return self._kv_tags

    @kv_tags.setter
    def kv_tags(self, kv_tags):
        """Sets the kv_tags of this AKSVariantResponse.

        The service tag dictionary. Tags are mutable.

        :param kv_tags: The kv_tags of this AKSVariantResponse.
        :type kv_tags: Dict[str, str]
        """

        self._kv_tags = kv_tags

    @property
    def name(self):
        """Gets the name of this AKSVariantResponse.

        The service name.

        :return: The name of this AKSVariantResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AKSVariantResponse.

        The service name.

        :param name: The name of this AKSVariantResponse.
        :type name: str
        """

        self._name = name

    @property
    def operation_id(self):
        """Gets the operation_id of this AKSVariantResponse.

        The ID of the latest asynchronous operation for this service.

        :return: The operation_id of this AKSVariantResponse.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this AKSVariantResponse.

        The ID of the latest asynchronous operation for this service.

        :param operation_id: The operation_id of this AKSVariantResponse.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def properties(self):
        """Gets the properties of this AKSVariantResponse.

        The service property dictionary. Properties are immutable.

        :return: The properties of this AKSVariantResponse.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AKSVariantResponse.

        The service property dictionary. Properties are immutable.

        :param properties: The properties of this AKSVariantResponse.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def state(self):
        """Gets the state of this AKSVariantResponse.

        The current state of the service.

        :return: The state of this AKSVariantResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AKSVariantResponse.

        The current state of the service.

        :param state: The state of this AKSVariantResponse.
        :type state: str
        """
        allowed_values = ["Transitioning", "Healthy", "Unhealthy", "Failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated_time(self):
        """Gets the updated_time of this AKSVariantResponse.

        The time the service was updated.

        :return: The updated_time of this AKSVariantResponse.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this AKSVariantResponse.

        The time the service was updated.

        :param updated_time: The updated_time of this AKSVariantResponse.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def is_default(self):
        """Gets the is_default of this AKSVariantResponse.

        Is this the default variant.

        :return: The is_default of this AKSVariantResponse.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this AKSVariantResponse.

        Is this the default variant.

        :param is_default: The is_default of this AKSVariantResponse.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def traffic_percentile(self):
        """Gets the traffic_percentile of this AKSVariantResponse.

        The amount of traffic variant receives.

        :return: The traffic_percentile of this AKSVariantResponse.
        :rtype: float
        """
        return self._traffic_percentile

    @traffic_percentile.setter
    def traffic_percentile(self, traffic_percentile):
        """Sets the traffic_percentile of this AKSVariantResponse.

        The amount of traffic variant receives.

        :param traffic_percentile: The traffic_percentile of this AKSVariantResponse.
        :type traffic_percentile: float
        """

        self._traffic_percentile = traffic_percentile

    @property
    def type(self):
        """Gets the type of this AKSVariantResponse.

        The type of the variant.

        :return: The type of this AKSVariantResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AKSVariantResponse.

        The type of the variant.

        :param type: The type of this AKSVariantResponse.
        :type type: str
        """
        allowed_values = ["Control", "Treatment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
