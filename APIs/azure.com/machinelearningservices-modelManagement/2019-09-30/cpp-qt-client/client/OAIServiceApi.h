/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceApi_H
#define OAI_OAIServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthKeys.h"
#include "OAIAuthToken.h"
#include "OAICreateServiceRequest.h"
#include "OAIJsonPatchOperation.h"
#include "OAIModelErrorResponse.h"
#include "OAIPaginatedServiceList.h"
#include "OAIRegenerateServiceKeysRequest.h"
#include "OAIServiceResponseBase.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceApi : public QObject {
    Q_OBJECT

public:
    OAIServiceApi(const int timeOut = 0);
    ~OAIServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  request OAICreateServiceRequest [required]
    */
    virtual void servicesCreate(const QString &subscription_id, const QString &resource_group, const QString &workspace, const OAICreateServiceRequest &request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void servicesDelete(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void servicesGetServiceToken(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  image_id QString [optional]
    * @param[in]  image_name QString [optional]
    * @param[in]  model_id QString [optional]
    * @param[in]  model_name QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  compute_type QString [optional]
    * @param[in]  skip_token QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  properties QString [optional]
    * @param[in]  expand bool [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void servicesListQuery(const QString &subscription_id, const QString &resource_group, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &image_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &image_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &compute_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &properties = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void servicesListServiceKeys(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  patch QList<OAIJsonPatchOperation> [required]
    */
    virtual void servicesPatch(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id, const QList<OAIJsonPatchOperation> &patch);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  expand bool [optional]
    */
    virtual void servicesQueryById(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id, const ::OpenAPI::OptionalParam<bool> &expand = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  request OAIRegenerateServiceKeysRequest [required]
    */
    virtual void servicesRegenerateServiceKeys(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id, const OAIRegenerateServiceKeysRequest &request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void servicesCreateCallback(OAIHttpRequestWorker *worker);
    void servicesDeleteCallback(OAIHttpRequestWorker *worker);
    void servicesGetServiceTokenCallback(OAIHttpRequestWorker *worker);
    void servicesListQueryCallback(OAIHttpRequestWorker *worker);
    void servicesListServiceKeysCallback(OAIHttpRequestWorker *worker);
    void servicesPatchCallback(OAIHttpRequestWorker *worker);
    void servicesQueryByIdCallback(OAIHttpRequestWorker *worker);
    void servicesRegenerateServiceKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void servicesCreateSignal();
    void servicesDeleteSignal();
    void servicesGetServiceTokenSignal(OAIAuthToken summary);
    void servicesListQuerySignal(OAIPaginatedServiceList summary);
    void servicesListServiceKeysSignal(OAIAuthKeys summary);
    void servicesPatchSignal();
    void servicesQueryByIdSignal(OAIServiceResponseBase summary);
    void servicesRegenerateServiceKeysSignal(OAIAuthKeys summary);


    void servicesCreateSignalFull(OAIHttpRequestWorker *worker);
    void servicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void servicesGetServiceTokenSignalFull(OAIHttpRequestWorker *worker, OAIAuthToken summary);
    void servicesListQuerySignalFull(OAIHttpRequestWorker *worker, OAIPaginatedServiceList summary);
    void servicesListServiceKeysSignalFull(OAIHttpRequestWorker *worker, OAIAuthKeys summary);
    void servicesPatchSignalFull(OAIHttpRequestWorker *worker);
    void servicesQueryByIdSignalFull(OAIHttpRequestWorker *worker, OAIServiceResponseBase summary);
    void servicesRegenerateServiceKeysSignalFull(OAIHttpRequestWorker *worker, OAIAuthKeys summary);

    Q_DECL_DEPRECATED_X("Use servicesCreateSignalError() instead")
    void servicesCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDeleteSignalError() instead")
    void servicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetServiceTokenSignalError() instead")
    void servicesGetServiceTokenSignalE(OAIAuthToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetServiceTokenSignalError(OAIAuthToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListQuerySignalError() instead")
    void servicesListQuerySignalE(OAIPaginatedServiceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListQuerySignalError(OAIPaginatedServiceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListServiceKeysSignalError() instead")
    void servicesListServiceKeysSignalE(OAIAuthKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListServiceKeysSignalError(OAIAuthKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesPatchSignalError() instead")
    void servicesPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueryByIdSignalError() instead")
    void servicesQueryByIdSignalE(OAIServiceResponseBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueryByIdSignalError(OAIServiceResponseBase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesRegenerateServiceKeysSignalError() instead")
    void servicesRegenerateServiceKeysSignalE(OAIAuthKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesRegenerateServiceKeysSignalError(OAIAuthKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use servicesCreateSignalErrorFull() instead")
    void servicesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDeleteSignalErrorFull() instead")
    void servicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetServiceTokenSignalErrorFull() instead")
    void servicesGetServiceTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetServiceTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListQuerySignalErrorFull() instead")
    void servicesListQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListServiceKeysSignalErrorFull() instead")
    void servicesListServiceKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListServiceKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesPatchSignalErrorFull() instead")
    void servicesPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueryByIdSignalErrorFull() instead")
    void servicesQueryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesRegenerateServiceKeysSignalErrorFull() instead")
    void servicesRegenerateServiceKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesRegenerateServiceKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
