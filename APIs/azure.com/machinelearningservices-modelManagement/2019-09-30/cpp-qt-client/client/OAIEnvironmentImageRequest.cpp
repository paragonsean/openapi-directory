/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentImageRequest::OAIEnvironmentImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentImageRequest::OAIEnvironmentImageRequest() {
    this->initializeModel();
}

OAIEnvironmentImageRequest::~OAIEnvironmentImageRequest() {}

void OAIEnvironmentImageRequest::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_driver_program_isSet = false;
    m_driver_program_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_model_ids_isSet = false;
    m_model_ids_isValid = false;
}

void OAIEnvironmentImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentImageRequest::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_driver_program_isValid = ::OpenAPI::fromJsonValue(m_driver_program, json[QString("driverProgram")]);
    m_driver_program_isSet = !json[QString("driverProgram")].isNull() && m_driver_program_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_model_ids_isValid = ::OpenAPI::fromJsonValue(m_model_ids, json[QString("modelIds")]);
    m_model_ids_isSet = !json[QString("modelIds")].isNull() && m_model_ids_isValid;
}

QString OAIEnvironmentImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_driver_program_isSet) {
        obj.insert(QString("driverProgram"), ::OpenAPI::toJsonValue(m_driver_program));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_model_ids.size() > 0) {
        obj.insert(QString("modelIds"), ::OpenAPI::toJsonValue(m_model_ids));
    }
    return obj;
}

QList<OAIEnvironmentImageAsset> OAIEnvironmentImageRequest::getAssets() const {
    return m_assets;
}
void OAIEnvironmentImageRequest::setAssets(const QList<OAIEnvironmentImageAsset> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIEnvironmentImageRequest::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIEnvironmentImageRequest::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAIEnvironmentImageRequest::getDriverProgram() const {
    return m_driver_program;
}
void OAIEnvironmentImageRequest::setDriverProgram(const QString &driver_program) {
    m_driver_program = driver_program;
    m_driver_program_isSet = true;
}

bool OAIEnvironmentImageRequest::is_driver_program_Set() const{
    return m_driver_program_isSet;
}

bool OAIEnvironmentImageRequest::is_driver_program_Valid() const{
    return m_driver_program_isValid;
}

OAIModelEnvironmentDefinition OAIEnvironmentImageRequest::getEnvironment() const {
    return m_environment;
}
void OAIEnvironmentImageRequest::setEnvironment(const OAIModelEnvironmentDefinition &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIEnvironmentImageRequest::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIEnvironmentImageRequest::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<QString> OAIEnvironmentImageRequest::getModelIds() const {
    return m_model_ids;
}
void OAIEnvironmentImageRequest::setModelIds(const QList<QString> &model_ids) {
    m_model_ids = model_ids;
    m_model_ids_isSet = true;
}

bool OAIEnvironmentImageRequest::is_model_ids_Set() const{
    return m_model_ids_isSet;
}

bool OAIEnvironmentImageRequest::is_model_ids_Valid() const{
    return m_model_ids_isValid;
}

bool OAIEnvironmentImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
