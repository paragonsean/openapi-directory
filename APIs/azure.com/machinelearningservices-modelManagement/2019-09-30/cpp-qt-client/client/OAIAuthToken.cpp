/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthToken::OAIAuthToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthToken::OAIAuthToken() {
    this->initializeModel();
}

OAIAuthToken::~OAIAuthToken() {}

void OAIAuthToken::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_expiry_on_isSet = false;
    m_expiry_on_isValid = false;

    m_refresh_after_isSet = false;
    m_refresh_after_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;
}

void OAIAuthToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthToken::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_expiry_on_isValid = ::OpenAPI::fromJsonValue(m_expiry_on, json[QString("expiryOn")]);
    m_expiry_on_isSet = !json[QString("expiryOn")].isNull() && m_expiry_on_isValid;

    m_refresh_after_isValid = ::OpenAPI::fromJsonValue(m_refresh_after, json[QString("refreshAfter")]);
    m_refresh_after_isSet = !json[QString("refreshAfter")].isNull() && m_refresh_after_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("tokenType")]);
    m_token_type_isSet = !json[QString("tokenType")].isNull() && m_token_type_isValid;
}

QString OAIAuthToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthToken::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_expiry_on_isSet) {
        obj.insert(QString("expiryOn"), ::OpenAPI::toJsonValue(m_expiry_on));
    }
    if (m_refresh_after_isSet) {
        obj.insert(QString("refreshAfter"), ::OpenAPI::toJsonValue(m_refresh_after));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("tokenType"), ::OpenAPI::toJsonValue(m_token_type));
    }
    return obj;
}

QString OAIAuthToken::getAccessToken() const {
    return m_access_token;
}
void OAIAuthToken::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAuthToken::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAuthToken::is_access_token_Valid() const{
    return m_access_token_isValid;
}

qint64 OAIAuthToken::getExpiryOn() const {
    return m_expiry_on;
}
void OAIAuthToken::setExpiryOn(const qint64 &expiry_on) {
    m_expiry_on = expiry_on;
    m_expiry_on_isSet = true;
}

bool OAIAuthToken::is_expiry_on_Set() const{
    return m_expiry_on_isSet;
}

bool OAIAuthToken::is_expiry_on_Valid() const{
    return m_expiry_on_isValid;
}

qint64 OAIAuthToken::getRefreshAfter() const {
    return m_refresh_after;
}
void OAIAuthToken::setRefreshAfter(const qint64 &refresh_after) {
    m_refresh_after = refresh_after;
    m_refresh_after_isSet = true;
}

bool OAIAuthToken::is_refresh_after_Set() const{
    return m_refresh_after_isSet;
}

bool OAIAuthToken::is_refresh_after_Valid() const{
    return m_refresh_after_isValid;
}

QString OAIAuthToken::getTokenType() const {
    return m_token_type;
}
void OAIAuthToken::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIAuthToken::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIAuthToken::is_token_type_Valid() const{
    return m_token_type_isValid;
}

bool OAIAuthToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
