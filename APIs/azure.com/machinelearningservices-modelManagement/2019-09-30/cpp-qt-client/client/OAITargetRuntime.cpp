/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetRuntime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetRuntime::OAITargetRuntime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetRuntime::OAITargetRuntime() {
    this->initializeModel();
}

OAITargetRuntime::~OAITargetRuntime() {}

void OAITargetRuntime::initializeModel() {

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_runtime_type_isSet = false;
    m_runtime_type_isValid = false;

    m_target_architecture_isSet = false;
    m_target_architecture_isValid = false;
}

void OAITargetRuntime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetRuntime::fromJsonObject(QJsonObject json) {

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_runtime_type_isValid = ::OpenAPI::fromJsonValue(m_runtime_type, json[QString("runtimeType")]);
    m_runtime_type_isSet = !json[QString("runtimeType")].isNull() && m_runtime_type_isValid;

    m_target_architecture_isValid = ::OpenAPI::fromJsonValue(m_target_architecture, json[QString("targetArchitecture")]);
    m_target_architecture_isSet = !json[QString("targetArchitecture")].isNull() && m_target_architecture_isValid;
}

QString OAITargetRuntime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetRuntime::asJsonObject() const {
    QJsonObject obj;
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_runtime_type_isSet) {
        obj.insert(QString("runtimeType"), ::OpenAPI::toJsonValue(m_runtime_type));
    }
    if (m_target_architecture_isSet) {
        obj.insert(QString("targetArchitecture"), ::OpenAPI::toJsonValue(m_target_architecture));
    }
    return obj;
}

QString OAITargetRuntime::getOsType() const {
    return m_os_type;
}
void OAITargetRuntime::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAITargetRuntime::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAITargetRuntime::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QMap<QString, QString> OAITargetRuntime::getProperties() const {
    return m_properties;
}
void OAITargetRuntime::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAITargetRuntime::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAITargetRuntime::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAITargetRuntime::getRuntimeType() const {
    return m_runtime_type;
}
void OAITargetRuntime::setRuntimeType(const QString &runtime_type) {
    m_runtime_type = runtime_type;
    m_runtime_type_isSet = true;
}

bool OAITargetRuntime::is_runtime_type_Set() const{
    return m_runtime_type_isSet;
}

bool OAITargetRuntime::is_runtime_type_Valid() const{
    return m_runtime_type_isValid;
}

QString OAITargetRuntime::getTargetArchitecture() const {
    return m_target_architecture;
}
void OAITargetRuntime::setTargetArchitecture(const QString &target_architecture) {
    m_target_architecture = target_architecture;
    m_target_architecture_isSet = true;
}

bool OAITargetRuntime::is_target_architecture_Set() const{
    return m_target_architecture_isSet;
}

bool OAITargetRuntime::is_target_architecture_Valid() const{
    return m_target_architecture_isValid;
}

bool OAITargetRuntime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetRuntime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
