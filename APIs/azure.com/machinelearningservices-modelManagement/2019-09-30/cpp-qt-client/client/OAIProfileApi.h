/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfileApi_H
#define OAI_OAIProfileApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIModelErrorResponse.h"
#include "OAIPaginatedProfileResponseList.h"
#include "OAIProfileRequestBase.h"
#include "OAIProfileResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfileApi : public QObject {
    Q_OBJECT

public:
    OAIProfileApi(const int timeOut = 0);
    ~OAIProfileApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  image_id QString [required]
    * @param[in]  input_request OAIProfileRequestBase [required]
    */
    virtual void profilesCreate(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &image_id, const OAIProfileRequestBase &input_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  image_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  properties QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  skip_token QString [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void profilesListQuery(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &image_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &properties = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  image_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void profilesQueryById(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &image_id, const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void profilesCreateCallback(OAIHttpRequestWorker *worker);
    void profilesListQueryCallback(OAIHttpRequestWorker *worker);
    void profilesQueryByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void profilesCreateSignal();
    void profilesListQuerySignal(OAIPaginatedProfileResponseList summary);
    void profilesQueryByIdSignal(OAIProfileResponse summary);


    void profilesCreateSignalFull(OAIHttpRequestWorker *worker);
    void profilesListQuerySignalFull(OAIHttpRequestWorker *worker, OAIPaginatedProfileResponseList summary);
    void profilesQueryByIdSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);

    Q_DECL_DEPRECATED_X("Use profilesCreateSignalError() instead")
    void profilesCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListQuerySignalError() instead")
    void profilesListQuerySignalE(OAIPaginatedProfileResponseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListQuerySignalError(OAIPaginatedProfileResponseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesQueryByIdSignalError() instead")
    void profilesQueryByIdSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesQueryByIdSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use profilesCreateSignalErrorFull() instead")
    void profilesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListQuerySignalErrorFull() instead")
    void profilesListQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesQueryByIdSignalErrorFull() instead")
    void profilesQueryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesQueryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
