/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelDockerSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelDockerSection::OAIModelDockerSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelDockerSection::OAIModelDockerSection() {
    this->initializeModel();
}

OAIModelDockerSection::~OAIModelDockerSection() {}

void OAIModelDockerSection::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_base_dockerfile_isSet = false;
    m_base_dockerfile_isValid = false;

    m_base_image_isSet = false;
    m_base_image_isValid = false;

    m_base_image_registry_isSet = false;
    m_base_image_registry_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_gpu_support_isSet = false;
    m_gpu_support_isValid = false;

    m_shared_volumes_isSet = false;
    m_shared_volumes_isValid = false;

    m_shm_size_isSet = false;
    m_shm_size_isValid = false;
}

void OAIModelDockerSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelDockerSection::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_base_dockerfile_isValid = ::OpenAPI::fromJsonValue(m_base_dockerfile, json[QString("baseDockerfile")]);
    m_base_dockerfile_isSet = !json[QString("baseDockerfile")].isNull() && m_base_dockerfile_isValid;

    m_base_image_isValid = ::OpenAPI::fromJsonValue(m_base_image, json[QString("baseImage")]);
    m_base_image_isSet = !json[QString("baseImage")].isNull() && m_base_image_isValid;

    m_base_image_registry_isValid = ::OpenAPI::fromJsonValue(m_base_image_registry, json[QString("baseImageRegistry")]);
    m_base_image_registry_isSet = !json[QString("baseImageRegistry")].isNull() && m_base_image_registry_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_gpu_support_isValid = ::OpenAPI::fromJsonValue(m_gpu_support, json[QString("gpuSupport")]);
    m_gpu_support_isSet = !json[QString("gpuSupport")].isNull() && m_gpu_support_isValid;

    m_shared_volumes_isValid = ::OpenAPI::fromJsonValue(m_shared_volumes, json[QString("sharedVolumes")]);
    m_shared_volumes_isSet = !json[QString("sharedVolumes")].isNull() && m_shared_volumes_isValid;

    m_shm_size_isValid = ::OpenAPI::fromJsonValue(m_shm_size, json[QString("shmSize")]);
    m_shm_size_isSet = !json[QString("shmSize")].isNull() && m_shm_size_isValid;
}

QString OAIModelDockerSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelDockerSection::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_base_dockerfile_isSet) {
        obj.insert(QString("baseDockerfile"), ::OpenAPI::toJsonValue(m_base_dockerfile));
    }
    if (m_base_image_isSet) {
        obj.insert(QString("baseImage"), ::OpenAPI::toJsonValue(m_base_image));
    }
    if (m_base_image_registry.isSet()) {
        obj.insert(QString("baseImageRegistry"), ::OpenAPI::toJsonValue(m_base_image_registry));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_gpu_support_isSet) {
        obj.insert(QString("gpuSupport"), ::OpenAPI::toJsonValue(m_gpu_support));
    }
    if (m_shared_volumes_isSet) {
        obj.insert(QString("sharedVolumes"), ::OpenAPI::toJsonValue(m_shared_volumes));
    }
    if (m_shm_size_isSet) {
        obj.insert(QString("shmSize"), ::OpenAPI::toJsonValue(m_shm_size));
    }
    return obj;
}

QList<QString> OAIModelDockerSection::getArguments() const {
    return m_arguments;
}
void OAIModelDockerSection::setArguments(const QList<QString> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIModelDockerSection::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIModelDockerSection::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIModelDockerSection::getBaseDockerfile() const {
    return m_base_dockerfile;
}
void OAIModelDockerSection::setBaseDockerfile(const QString &base_dockerfile) {
    m_base_dockerfile = base_dockerfile;
    m_base_dockerfile_isSet = true;
}

bool OAIModelDockerSection::is_base_dockerfile_Set() const{
    return m_base_dockerfile_isSet;
}

bool OAIModelDockerSection::is_base_dockerfile_Valid() const{
    return m_base_dockerfile_isValid;
}

QString OAIModelDockerSection::getBaseImage() const {
    return m_base_image;
}
void OAIModelDockerSection::setBaseImage(const QString &base_image) {
    m_base_image = base_image;
    m_base_image_isSet = true;
}

bool OAIModelDockerSection::is_base_image_Set() const{
    return m_base_image_isSet;
}

bool OAIModelDockerSection::is_base_image_Valid() const{
    return m_base_image_isValid;
}

OAIContainerRegistry OAIModelDockerSection::getBaseImageRegistry() const {
    return m_base_image_registry;
}
void OAIModelDockerSection::setBaseImageRegistry(const OAIContainerRegistry &base_image_registry) {
    m_base_image_registry = base_image_registry;
    m_base_image_registry_isSet = true;
}

bool OAIModelDockerSection::is_base_image_registry_Set() const{
    return m_base_image_registry_isSet;
}

bool OAIModelDockerSection::is_base_image_registry_Valid() const{
    return m_base_image_registry_isValid;
}

bool OAIModelDockerSection::isEnabled() const {
    return m_enabled;
}
void OAIModelDockerSection::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIModelDockerSection::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIModelDockerSection::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIModelDockerSection::isGpuSupport() const {
    return m_gpu_support;
}
void OAIModelDockerSection::setGpuSupport(const bool &gpu_support) {
    m_gpu_support = gpu_support;
    m_gpu_support_isSet = true;
}

bool OAIModelDockerSection::is_gpu_support_Set() const{
    return m_gpu_support_isSet;
}

bool OAIModelDockerSection::is_gpu_support_Valid() const{
    return m_gpu_support_isValid;
}

bool OAIModelDockerSection::isSharedVolumes() const {
    return m_shared_volumes;
}
void OAIModelDockerSection::setSharedVolumes(const bool &shared_volumes) {
    m_shared_volumes = shared_volumes;
    m_shared_volumes_isSet = true;
}

bool OAIModelDockerSection::is_shared_volumes_Set() const{
    return m_shared_volumes_isSet;
}

bool OAIModelDockerSection::is_shared_volumes_Valid() const{
    return m_shared_volumes_isValid;
}

QString OAIModelDockerSection::getShmSize() const {
    return m_shm_size;
}
void OAIModelDockerSection::setShmSize(const QString &shm_size) {
    m_shm_size = shm_size;
    m_shm_size_isSet = true;
}

bool OAIModelDockerSection::is_shm_size_Set() const{
    return m_shm_size_isSet;
}

bool OAIModelDockerSection::is_shm_size_Valid() const{
    return m_shm_size_isValid;
}

bool OAIModelDockerSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_dockerfile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_image_registry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_volumes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelDockerSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
