/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAKSReplicaStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAKSReplicaStatus::OAIAKSReplicaStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAKSReplicaStatus::OAIAKSReplicaStatus() {
    this->initializeModel();
}

OAIAKSReplicaStatus::~OAIAKSReplicaStatus() {}

void OAIAKSReplicaStatus::initializeModel() {

    m_available_replicas_isSet = false;
    m_available_replicas_isValid = false;

    m_desired_replicas_isSet = false;
    m_desired_replicas_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_updated_replicas_isSet = false;
    m_updated_replicas_isValid = false;
}

void OAIAKSReplicaStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAKSReplicaStatus::fromJsonObject(QJsonObject json) {

    m_available_replicas_isValid = ::OpenAPI::fromJsonValue(m_available_replicas, json[QString("availableReplicas")]);
    m_available_replicas_isSet = !json[QString("availableReplicas")].isNull() && m_available_replicas_isValid;

    m_desired_replicas_isValid = ::OpenAPI::fromJsonValue(m_desired_replicas, json[QString("desiredReplicas")]);
    m_desired_replicas_isSet = !json[QString("desiredReplicas")].isNull() && m_desired_replicas_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_updated_replicas_isValid = ::OpenAPI::fromJsonValue(m_updated_replicas, json[QString("updatedReplicas")]);
    m_updated_replicas_isSet = !json[QString("updatedReplicas")].isNull() && m_updated_replicas_isValid;
}

QString OAIAKSReplicaStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAKSReplicaStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_available_replicas_isSet) {
        obj.insert(QString("availableReplicas"), ::OpenAPI::toJsonValue(m_available_replicas));
    }
    if (m_desired_replicas_isSet) {
        obj.insert(QString("desiredReplicas"), ::OpenAPI::toJsonValue(m_desired_replicas));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_updated_replicas_isSet) {
        obj.insert(QString("updatedReplicas"), ::OpenAPI::toJsonValue(m_updated_replicas));
    }
    return obj;
}

qint32 OAIAKSReplicaStatus::getAvailableReplicas() const {
    return m_available_replicas;
}
void OAIAKSReplicaStatus::setAvailableReplicas(const qint32 &available_replicas) {
    m_available_replicas = available_replicas;
    m_available_replicas_isSet = true;
}

bool OAIAKSReplicaStatus::is_available_replicas_Set() const{
    return m_available_replicas_isSet;
}

bool OAIAKSReplicaStatus::is_available_replicas_Valid() const{
    return m_available_replicas_isValid;
}

qint32 OAIAKSReplicaStatus::getDesiredReplicas() const {
    return m_desired_replicas;
}
void OAIAKSReplicaStatus::setDesiredReplicas(const qint32 &desired_replicas) {
    m_desired_replicas = desired_replicas;
    m_desired_replicas_isSet = true;
}

bool OAIAKSReplicaStatus::is_desired_replicas_Set() const{
    return m_desired_replicas_isSet;
}

bool OAIAKSReplicaStatus::is_desired_replicas_Valid() const{
    return m_desired_replicas_isValid;
}

OAIModelErrorResponse OAIAKSReplicaStatus::getError() const {
    return m_error;
}
void OAIAKSReplicaStatus::setError(const OAIModelErrorResponse &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIAKSReplicaStatus::is_error_Set() const{
    return m_error_isSet;
}

bool OAIAKSReplicaStatus::is_error_Valid() const{
    return m_error_isValid;
}

qint32 OAIAKSReplicaStatus::getUpdatedReplicas() const {
    return m_updated_replicas;
}
void OAIAKSReplicaStatus::setUpdatedReplicas(const qint32 &updated_replicas) {
    m_updated_replicas = updated_replicas;
    m_updated_replicas_isSet = true;
}

bool OAIAKSReplicaStatus::is_updated_replicas_Set() const{
    return m_updated_replicas_isSet;
}

bool OAIAKSReplicaStatus::is_updated_replicas_Valid() const{
    return m_updated_replicas_isValid;
}

bool OAIAKSReplicaStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAKSReplicaStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
