/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistryInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistryInfo::OAIRegistryInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistryInfo::OAIRegistryInfo() {
    this->initializeModel();
}

OAIRegistryInfo::~OAIRegistryInfo() {}

void OAIRegistryInfo::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRegistryInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistryInfo::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRegistryInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistryInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIRegistryInfo::getLocation() const {
    return m_location;
}
void OAIRegistryInfo::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIRegistryInfo::is_location_Set() const{
    return m_location_isSet;
}

bool OAIRegistryInfo::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIRegistryInfo::getPassword() const {
    return m_password;
}
void OAIRegistryInfo::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIRegistryInfo::is_password_Set() const{
    return m_password_isSet;
}

bool OAIRegistryInfo::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIRegistryInfo::getUser() const {
    return m_user;
}
void OAIRegistryInfo::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRegistryInfo::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRegistryInfo::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRegistryInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistryInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_password_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
