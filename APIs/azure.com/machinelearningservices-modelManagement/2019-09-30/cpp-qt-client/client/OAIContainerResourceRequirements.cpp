/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerResourceRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerResourceRequirements::OAIContainerResourceRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerResourceRequirements::OAIContainerResourceRequirements() {
    this->initializeModel();
}

OAIContainerResourceRequirements::~OAIContainerResourceRequirements() {}

void OAIContainerResourceRequirements::initializeModel() {

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_fpga_isSet = false;
    m_fpga_isValid = false;

    m_gpu_isSet = false;
    m_gpu_isValid = false;

    m_memory_in_gb_isSet = false;
    m_memory_in_gb_isValid = false;
}

void OAIContainerResourceRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerResourceRequirements::fromJsonObject(QJsonObject json) {

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_fpga_isValid = ::OpenAPI::fromJsonValue(m_fpga, json[QString("fpga")]);
    m_fpga_isSet = !json[QString("fpga")].isNull() && m_fpga_isValid;

    m_gpu_isValid = ::OpenAPI::fromJsonValue(m_gpu, json[QString("gpu")]);
    m_gpu_isSet = !json[QString("gpu")].isNull() && m_gpu_isValid;

    m_memory_in_gb_isValid = ::OpenAPI::fromJsonValue(m_memory_in_gb, json[QString("memoryInGB")]);
    m_memory_in_gb_isSet = !json[QString("memoryInGB")].isNull() && m_memory_in_gb_isValid;
}

QString OAIContainerResourceRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerResourceRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_fpga_isSet) {
        obj.insert(QString("fpga"), ::OpenAPI::toJsonValue(m_fpga));
    }
    if (m_gpu_isSet) {
        obj.insert(QString("gpu"), ::OpenAPI::toJsonValue(m_gpu));
    }
    if (m_memory_in_gb_isSet) {
        obj.insert(QString("memoryInGB"), ::OpenAPI::toJsonValue(m_memory_in_gb));
    }
    return obj;
}

double OAIContainerResourceRequirements::getCpu() const {
    return m_cpu;
}
void OAIContainerResourceRequirements::setCpu(const double &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIContainerResourceRequirements::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIContainerResourceRequirements::is_cpu_Valid() const{
    return m_cpu_isValid;
}

qint32 OAIContainerResourceRequirements::getFpga() const {
    return m_fpga;
}
void OAIContainerResourceRequirements::setFpga(const qint32 &fpga) {
    m_fpga = fpga;
    m_fpga_isSet = true;
}

bool OAIContainerResourceRequirements::is_fpga_Set() const{
    return m_fpga_isSet;
}

bool OAIContainerResourceRequirements::is_fpga_Valid() const{
    return m_fpga_isValid;
}

qint32 OAIContainerResourceRequirements::getGpu() const {
    return m_gpu;
}
void OAIContainerResourceRequirements::setGpu(const qint32 &gpu) {
    m_gpu = gpu;
    m_gpu_isSet = true;
}

bool OAIContainerResourceRequirements::is_gpu_Set() const{
    return m_gpu_isSet;
}

bool OAIContainerResourceRequirements::is_gpu_Valid() const{
    return m_gpu_isValid;
}

double OAIContainerResourceRequirements::getMemoryInGb() const {
    return m_memory_in_gb;
}
void OAIContainerResourceRequirements::setMemoryInGb(const double &memory_in_gb) {
    m_memory_in_gb = memory_in_gb;
    m_memory_in_gb_isSet = true;
}

bool OAIContainerResourceRequirements::is_memory_in_gb_Set() const{
    return m_memory_in_gb_isSet;
}

bool OAIContainerResourceRequirements::is_memory_in_gb_Valid() const{
    return m_memory_in_gb_isValid;
}

bool OAIContainerResourceRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fpga_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerResourceRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
