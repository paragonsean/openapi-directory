/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Model from './Model';
import ModelErrorResponse from './ModelErrorResponse';

/**
 * The ImageResponseBase model module.
 * @module model/ImageResponseBase
 * @version 2019-09-30
 */
class ImageResponseBase {
    /**
     * Constructs a new <code>ImageResponseBase</code>.
     * @alias module:model/ImageResponseBase
     * @param imageFlavor {module:model/ImageResponseBase.ImageFlavorEnum} The flavor of the image.
     */
    constructor(imageFlavor) { 
        
        ImageResponseBase.initialize(this, imageFlavor);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageFlavor) { 
        obj['imageFlavor'] = imageFlavor;
    }

    /**
     * Constructs a <code>ImageResponseBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageResponseBase} obj Optional instance to populate.
     * @return {module:model/ImageResponseBase} The populated <code>ImageResponseBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageResponseBase();

            if (data.hasOwnProperty('autoDelete')) {
                obj['autoDelete'] = ApiClient.convertToType(data['autoDelete'], 'Boolean');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('creationState')) {
                obj['creationState'] = ApiClient.convertToType(data['creationState'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ModelErrorResponse.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageBuildLogUri')) {
                obj['imageBuildLogUri'] = ApiClient.convertToType(data['imageBuildLogUri'], 'String');
            }
            if (data.hasOwnProperty('imageFlavor')) {
                obj['imageFlavor'] = ApiClient.convertToType(data['imageFlavor'], 'String');
            }
            if (data.hasOwnProperty('imageLocation')) {
                obj['imageLocation'] = ApiClient.convertToType(data['imageLocation'], 'String');
            }
            if (data.hasOwnProperty('imageType')) {
                obj['imageType'] = ApiClient.convertToType(data['imageType'], 'String');
            }
            if (data.hasOwnProperty('kvTags')) {
                obj['kvTags'] = ApiClient.convertToType(data['kvTags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('modelDetails')) {
                obj['modelDetails'] = ApiClient.convertToType(data['modelDetails'], [Model]);
            }
            if (data.hasOwnProperty('modelIds')) {
                obj['modelIds'] = ApiClient.convertToType(data['modelIds'], ['String']);
            }
            if (data.hasOwnProperty('modifiedTime')) {
                obj['modifiedTime'] = ApiClient.convertToType(data['modifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageResponseBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageResponseBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageResponseBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creationState'] && !(typeof data['creationState'] === 'string' || data['creationState'] instanceof String)) {
            throw new Error("Expected the field `creationState` to be a primitive type in the JSON string but got " + data['creationState']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          ModelErrorResponse.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['imageBuildLogUri'] && !(typeof data['imageBuildLogUri'] === 'string' || data['imageBuildLogUri'] instanceof String)) {
            throw new Error("Expected the field `imageBuildLogUri` to be a primitive type in the JSON string but got " + data['imageBuildLogUri']);
        }
        // ensure the json data is a string
        if (data['imageFlavor'] && !(typeof data['imageFlavor'] === 'string' || data['imageFlavor'] instanceof String)) {
            throw new Error("Expected the field `imageFlavor` to be a primitive type in the JSON string but got " + data['imageFlavor']);
        }
        // ensure the json data is a string
        if (data['imageLocation'] && !(typeof data['imageLocation'] === 'string' || data['imageLocation'] instanceof String)) {
            throw new Error("Expected the field `imageLocation` to be a primitive type in the JSON string but got " + data['imageLocation']);
        }
        // ensure the json data is a string
        if (data['imageType'] && !(typeof data['imageType'] === 'string' || data['imageType'] instanceof String)) {
            throw new Error("Expected the field `imageType` to be a primitive type in the JSON string but got " + data['imageType']);
        }
        if (data['modelDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['modelDetails'])) {
                throw new Error("Expected the field `modelDetails` to be an array in the JSON data but got " + data['modelDetails']);
            }
            // validate the optional field `modelDetails` (array)
            for (const item of data['modelDetails']) {
                Model.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['modelIds'])) {
            throw new Error("Expected the field `modelIds` to be an array in the JSON data but got " + data['modelIds']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }

        return true;
    }


}

ImageResponseBase.RequiredProperties = ["imageFlavor"];

/**
 * Whether the image will be automatically deleted with the last service using it.
 * @member {Boolean} autoDelete
 */
ImageResponseBase.prototype['autoDelete'] = undefined;

/**
 * The time the image was created.
 * @member {Date} createdTime
 */
ImageResponseBase.prototype['createdTime'] = undefined;

/**
 * The state of the operation.
 * @member {module:model/ImageResponseBase.CreationStateEnum} creationState
 */
ImageResponseBase.prototype['creationState'] = undefined;

/**
 * The image description.
 * @member {String} description
 */
ImageResponseBase.prototype['description'] = undefined;

/**
 * @member {module:model/ModelErrorResponse} error
 */
ImageResponseBase.prototype['error'] = undefined;

/**
 * The image Id.
 * @member {String} id
 */
ImageResponseBase.prototype['id'] = undefined;

/**
 * The Uri to the image build logs.
 * @member {String} imageBuildLogUri
 */
ImageResponseBase.prototype['imageBuildLogUri'] = undefined;

/**
 * The flavor of the image.
 * @member {module:model/ImageResponseBase.ImageFlavorEnum} imageFlavor
 */
ImageResponseBase.prototype['imageFlavor'] = undefined;

/**
 * The Image location string.
 * @member {String} imageLocation
 */
ImageResponseBase.prototype['imageLocation'] = undefined;

/**
 * The type of the image.
 * @member {module:model/ImageResponseBase.ImageTypeEnum} imageType
 */
ImageResponseBase.prototype['imageType'] = undefined;

/**
 * The image tag dictionary. Tags are mutable.
 * @member {Object.<String, String>} kvTags
 */
ImageResponseBase.prototype['kvTags'] = undefined;

/**
 * The list of models.
 * @member {Array.<module:model/Model>} modelDetails
 */
ImageResponseBase.prototype['modelDetails'] = undefined;

/**
 * The list of model Ids.
 * @member {Array.<String>} modelIds
 */
ImageResponseBase.prototype['modelIds'] = undefined;

/**
 * The time the image was last modified.
 * @member {Date} modifiedTime
 */
ImageResponseBase.prototype['modifiedTime'] = undefined;

/**
 * The image name.
 * @member {String} name
 */
ImageResponseBase.prototype['name'] = undefined;

/**
 * The ID of the asynchronous operation for this image.
 * @member {String} operationId
 */
ImageResponseBase.prototype['operationId'] = undefined;

/**
 * The image properties dictionary. Properties are immutable.
 * @member {Object.<String, String>} properties
 */
ImageResponseBase.prototype['properties'] = undefined;

/**
 * The image version.
 * @member {Number} version
 */
ImageResponseBase.prototype['version'] = undefined;





/**
 * Allowed values for the <code>creationState</code> property.
 * @enum {String}
 * @readonly
 */
ImageResponseBase['CreationStateEnum'] = {

    /**
     * value: "NotStarted"
     * @const
     */
    "NotStarted": "NotStarted",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "TimedOut"
     * @const
     */
    "TimedOut": "TimedOut"
};


/**
 * Allowed values for the <code>imageFlavor</code> property.
 * @enum {String}
 * @readonly
 */
ImageResponseBase['ImageFlavorEnum'] = {

    /**
     * value: "WebApiContainer"
     * @const
     */
    "WebApiContainer": "WebApiContainer",

    /**
     * value: "BatchContainer"
     * @const
     */
    "BatchContainer": "BatchContainer",

    /**
     * value: "IoTContainer"
     * @const
     */
    "IoTContainer": "IoTContainer",

    /**
     * value: "AccelContainer"
     * @const
     */
    "AccelContainer": "AccelContainer",

    /**
     * value: "UserProvidedContainer"
     * @const
     */
    "UserProvidedContainer": "UserProvidedContainer"
};


/**
 * Allowed values for the <code>imageType</code> property.
 * @enum {String}
 * @readonly
 */
ImageResponseBase['ImageTypeEnum'] = {

    /**
     * value: "Docker"
     * @const
     */
    "Docker": "Docker"
};



export default ImageResponseBase;

