/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArtifactDetails from './ArtifactDetails';

/**
 * The Asset model module.
 * @module model/Asset
 * @version 2019-09-30
 */
class Asset {
    /**
     * Constructs a new <code>Asset</code>.
     * The Asset definition.
     * @alias module:model/Asset
     * @param name {String} The name of the Asset.
     */
    constructor(name) { 
        
        Asset.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Asset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Asset} obj Optional instance to populate.
     * @return {module:model/Asset} The populated <code>Asset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Asset();

            if (data.hasOwnProperty('artifacts')) {
                obj['artifacts'] = ApiClient.convertToType(data['artifacts'], [ArtifactDetails]);
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kvTags')) {
                obj['kvTags'] = ApiClient.convertToType(data['kvTags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('runid')) {
                obj['runid'] = ApiClient.convertToType(data['runid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Asset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Asset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Asset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['artifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artifacts'])) {
                throw new Error("Expected the field `artifacts` to be an array in the JSON data but got " + data['artifacts']);
            }
            // validate the optional field `artifacts` (array)
            for (const item of data['artifacts']) {
                ArtifactDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['runid'] && !(typeof data['runid'] === 'string' || data['runid'] instanceof String)) {
            throw new Error("Expected the field `runid` to be a primitive type in the JSON string but got " + data['runid']);
        }

        return true;
    }


}

Asset.RequiredProperties = ["name"];

/**
 * A list of child artifacts.
 * @member {Array.<module:model/ArtifactDetails>} artifacts
 */
Asset.prototype['artifacts'] = undefined;

/**
 * The time the Asset was created in UTC.
 * @member {Date} createdTime
 */
Asset.prototype['createdTime'] = undefined;

/**
 * The Asset description.
 * @member {String} description
 */
Asset.prototype['description'] = undefined;

/**
 * The Asset Id.
 * @member {String} id
 */
Asset.prototype['id'] = undefined;

/**
 * The Asset tag dictionary. Tags are mutable.
 * @member {Object.<String, String>} kvTags
 */
Asset.prototype['kvTags'] = undefined;

/**
 * A dictionary containing metadata about the Asset.
 * @member {Object.<String, String>} meta
 */
Asset.prototype['meta'] = undefined;

/**
 * The name of the Asset.
 * @member {String} name
 */
Asset.prototype['name'] = undefined;

/**
 * The Asset property dictionary. Properties are immutable.
 * @member {Object.<String, String>} properties
 */
Asset.prototype['properties'] = undefined;

/**
 * The RunId associated with this Asset.
 * @member {String} runid
 */
Asset.prototype['runid'] = undefined;






export default Asset;

