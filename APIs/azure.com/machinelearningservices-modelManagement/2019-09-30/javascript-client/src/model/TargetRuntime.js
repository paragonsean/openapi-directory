/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TargetRuntime model module.
 * @module model/TargetRuntime
 * @version 2019-09-30
 */
class TargetRuntime {
    /**
     * Constructs a new <code>TargetRuntime</code>.
     * The target runtime.
     * @alias module:model/TargetRuntime
     */
    constructor() { 
        
        TargetRuntime.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TargetRuntime</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetRuntime} obj Optional instance to populate.
     * @return {module:model/TargetRuntime} The populated <code>TargetRuntime</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TargetRuntime();

            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('runtimeType')) {
                obj['runtimeType'] = ApiClient.convertToType(data['runtimeType'], 'String');
            }
            if (data.hasOwnProperty('targetArchitecture')) {
                obj['targetArchitecture'] = ApiClient.convertToType(data['targetArchitecture'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TargetRuntime</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TargetRuntime</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['runtimeType'] && !(typeof data['runtimeType'] === 'string' || data['runtimeType'] instanceof String)) {
            throw new Error("Expected the field `runtimeType` to be a primitive type in the JSON string but got " + data['runtimeType']);
        }
        // ensure the json data is a string
        if (data['targetArchitecture'] && !(typeof data['targetArchitecture'] === 'string' || data['targetArchitecture'] instanceof String)) {
            throw new Error("Expected the field `targetArchitecture` to be a primitive type in the JSON string but got " + data['targetArchitecture']);
        }

        return true;
    }


}



/**
 * The target operating system.
 * @member {module:model/TargetRuntime.OsTypeEnum} osType
 */
TargetRuntime.prototype['osType'] = undefined;

/**
 * The properties dictionary.
 * @member {Object.<String, String>} properties
 */
TargetRuntime.prototype['properties'] = undefined;

/**
 * The target runtime type.
 * @member {module:model/TargetRuntime.RuntimeTypeEnum} runtimeType
 */
TargetRuntime.prototype['runtimeType'] = undefined;

/**
 * The target architecture.
 * @member {module:model/TargetRuntime.TargetArchitectureEnum} targetArchitecture
 */
TargetRuntime.prototype['targetArchitecture'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
TargetRuntime['OsTypeEnum'] = {

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux",

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows"
};


/**
 * Allowed values for the <code>runtimeType</code> property.
 * @enum {String}
 * @readonly
 */
TargetRuntime['RuntimeTypeEnum'] = {

    /**
     * value: "SparkPython"
     * @const
     */
    "SparkPython": "SparkPython",

    /**
     * value: "Tlc37"
     * @const
     */
    "Tlc37": "Tlc37",

    /**
     * value: "Tlc38"
     * @const
     */
    "Tlc38": "Tlc38",

    /**
     * value: "Tlc310"
     * @const
     */
    "Tlc310": "Tlc310",

    /**
     * value: "Python"
     * @const
     */
    "Python": "Python",

    /**
     * value: "PythonSlim"
     * @const
     */
    "PythonSlim": "PythonSlim",

    /**
     * value: "PythonCustom"
     * @const
     */
    "PythonCustom": "PythonCustom"
};


/**
 * Allowed values for the <code>targetArchitecture</code> property.
 * @enum {String}
 * @readonly
 */
TargetRuntime['TargetArchitectureEnum'] = {

    /**
     * value: "Amd64"
     * @const
     */
    "Amd64": "Amd64",

    /**
     * value: "Arm32v7"
     * @const
     */
    "Arm32v7": "Arm32v7"
};



export default TargetRuntime;

