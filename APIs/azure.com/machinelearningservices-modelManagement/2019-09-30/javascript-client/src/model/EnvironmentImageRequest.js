/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentImageAsset from './EnvironmentImageAsset';
import ModelEnvironmentDefinition from './ModelEnvironmentDefinition';

/**
 * The EnvironmentImageRequest model module.
 * @module model/EnvironmentImageRequest
 * @version 2019-09-30
 */
class EnvironmentImageRequest {
    /**
     * Constructs a new <code>EnvironmentImageRequest</code>.
     * Request to create a Docker image based on Environment.
     * @alias module:model/EnvironmentImageRequest
     */
    constructor() { 
        
        EnvironmentImageRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnvironmentImageRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnvironmentImageRequest} obj Optional instance to populate.
     * @return {module:model/EnvironmentImageRequest} The populated <code>EnvironmentImageRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnvironmentImageRequest();

            if (data.hasOwnProperty('assets')) {
                obj['assets'] = ApiClient.convertToType(data['assets'], [EnvironmentImageAsset]);
            }
            if (data.hasOwnProperty('driverProgram')) {
                obj['driverProgram'] = ApiClient.convertToType(data['driverProgram'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ModelEnvironmentDefinition.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('modelIds')) {
                obj['modelIds'] = ApiClient.convertToType(data['modelIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnvironmentImageRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnvironmentImageRequest</code>.
     */
    static validateJSON(data) {
        if (data['assets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assets'])) {
                throw new Error("Expected the field `assets` to be an array in the JSON data but got " + data['assets']);
            }
            // validate the optional field `assets` (array)
            for (const item of data['assets']) {
                EnvironmentImageAsset.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['driverProgram'] && !(typeof data['driverProgram'] === 'string' || data['driverProgram'] instanceof String)) {
            throw new Error("Expected the field `driverProgram` to be a primitive type in the JSON string but got " + data['driverProgram']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          ModelEnvironmentDefinition.validateJSON(data['environment']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['modelIds'])) {
            throw new Error("Expected the field `modelIds` to be an array in the JSON data but got " + data['modelIds']);
        }

        return true;
    }


}



/**
 * The list of assets.
 * @member {Array.<module:model/EnvironmentImageAsset>} assets
 */
EnvironmentImageRequest.prototype['assets'] = undefined;

/**
 * The name of the driver file.
 * @member {String} driverProgram
 */
EnvironmentImageRequest.prototype['driverProgram'] = undefined;

/**
 * @member {module:model/ModelEnvironmentDefinition} environment
 */
EnvironmentImageRequest.prototype['environment'] = undefined;

/**
 * The list of model Ids.
 * @member {Array.<String>} modelIds
 */
EnvironmentImageRequest.prototype['modelIds'] = undefined;






export default EnvironmentImageRequest;

