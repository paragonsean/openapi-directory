/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageResponseBase from './ImageResponseBase';
import Model from './Model';
import ModelErrorResponse from './ModelErrorResponse';

/**
 * The FPGADockerImageResponse model module.
 * @module model/FPGADockerImageResponse
 * @version 2019-09-30
 */
class FPGADockerImageResponse {
    /**
     * Constructs a new <code>FPGADockerImageResponse</code>.
     * The FPGA Docker Image response.
     * @alias module:model/FPGADockerImageResponse
     * @extends module:model/ImageResponseBase
     * @implements module:model/ImageResponseBase
     * @param imageFlavor {module:model/FPGADockerImageResponse.ImageFlavorEnum} The flavor of the image.
     */
    constructor(imageFlavor) { 
        ImageResponseBase.initialize(this, imageFlavor);
        FPGADockerImageResponse.initialize(this, imageFlavor);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageFlavor) { 
    }

    /**
     * Constructs a <code>FPGADockerImageResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FPGADockerImageResponse} obj Optional instance to populate.
     * @return {module:model/FPGADockerImageResponse} The populated <code>FPGADockerImageResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FPGADockerImageResponse();
            ImageResponseBase.constructFromObject(data, obj);
            ImageResponseBase.constructFromObject(data, obj);

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FPGADockerImageResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FPGADockerImageResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FPGADockerImageResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

FPGADockerImageResponse.RequiredProperties = ["imageFlavor"];


// Implement ImageResponseBase interface:
/**
 * Whether the image will be automatically deleted with the last service using it.
 * @member {Boolean} autoDelete
 */
ImageResponseBase.prototype['autoDelete'] = undefined;
/**
 * The time the image was created.
 * @member {Date} createdTime
 */
ImageResponseBase.prototype['createdTime'] = undefined;
/**
 * The state of the operation.
 * @member {module:model/ImageResponseBase.CreationStateEnum} creationState
 */
ImageResponseBase.prototype['creationState'] = undefined;
/**
 * The image description.
 * @member {String} description
 */
ImageResponseBase.prototype['description'] = undefined;
/**
 * @member {module:model/ModelErrorResponse} error
 */
ImageResponseBase.prototype['error'] = undefined;
/**
 * The image Id.
 * @member {String} id
 */
ImageResponseBase.prototype['id'] = undefined;
/**
 * The Uri to the image build logs.
 * @member {String} imageBuildLogUri
 */
ImageResponseBase.prototype['imageBuildLogUri'] = undefined;
/**
 * The flavor of the image.
 * @member {module:model/ImageResponseBase.ImageFlavorEnum} imageFlavor
 */
ImageResponseBase.prototype['imageFlavor'] = undefined;
/**
 * The Image location string.
 * @member {String} imageLocation
 */
ImageResponseBase.prototype['imageLocation'] = undefined;
/**
 * The type of the image.
 * @member {module:model/ImageResponseBase.ImageTypeEnum} imageType
 */
ImageResponseBase.prototype['imageType'] = undefined;
/**
 * The image tag dictionary. Tags are mutable.
 * @member {Object.<String, String>} kvTags
 */
ImageResponseBase.prototype['kvTags'] = undefined;
/**
 * The list of models.
 * @member {Array.<module:model/Model>} modelDetails
 */
ImageResponseBase.prototype['modelDetails'] = undefined;
/**
 * The list of model Ids.
 * @member {Array.<String>} modelIds
 */
ImageResponseBase.prototype['modelIds'] = undefined;
/**
 * The time the image was last modified.
 * @member {Date} modifiedTime
 */
ImageResponseBase.prototype['modifiedTime'] = undefined;
/**
 * The image name.
 * @member {String} name
 */
ImageResponseBase.prototype['name'] = undefined;
/**
 * The ID of the asynchronous operation for this image.
 * @member {String} operationId
 */
ImageResponseBase.prototype['operationId'] = undefined;
/**
 * The image properties dictionary. Properties are immutable.
 * @member {Object.<String, String>} properties
 */
ImageResponseBase.prototype['properties'] = undefined;
/**
 * The image version.
 * @member {Number} version
 */
ImageResponseBase.prototype['version'] = undefined;




export default FPGADockerImageResponse;

