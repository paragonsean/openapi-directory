/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.JsonPatchOperation;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.ModelErrorResponse;
import org.openapitools.client.model.ModelOperationalState;
import org.openapitools.client.model.PaginatedModelList;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModelApi
 */
@Disabled
public class ModelApiTest {

    private final ModelApi api = new ModelApi();

    /**
     * Delete the specified Model.
     *
     * Deletes a model if it exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mLModelsDeleteTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String id = null;
        api.mLModelsDelete(subscriptionId, resourceGroup, workspace, id);
        // TODO: test validations
    }

    /**
     * Retrieve the metrics for a Model.
     *
     * The operational events collected for the Model are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mLModelsGetMetricsTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String id = null;
        String startDate = null;
        String endDate = null;
        ModelOperationalState response = api.mLModelsGetMetrics(subscriptionId, resourceGroup, workspace, id, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Query the list of Models in a workspace.
     *
     * The result list can be filtered using tag and name. If no filter is passed, the query lists all the Models in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mLModelsListQueryTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String name = null;
        String framework = null;
        String description = null;
        Integer count = null;
        String $skipToken = null;
        String tags = null;
        String properties = null;
        String runId = null;
        String orderBy = null;
        PaginatedModelList response = api.mLModelsListQuery(subscriptionId, resourceGroup, workspace, name, framework, description, count, $skipToken, tags, properties, runId, orderBy);
        // TODO: test validations
    }

    /**
     * Patch a specific model.
     *
     * Updates an existing model with the specified patch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mLModelsPatchTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String id = null;
        List<JsonPatchOperation> patch = null;
        Model response = api.mLModelsPatch(subscriptionId, resourceGroup, workspace, id, patch);
        // TODO: test validations
    }

    /**
     * Gets a model.
     *
     * Gets a model by model id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mLModelsQueryByIdTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String id = null;
        Model response = api.mLModelsQueryById(subscriptionId, resourceGroup, workspace, id);
        // TODO: test validations
    }

    /**
     * Register a model.
     *
     * Register the model provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mLModelsRegisterTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        Model model = null;
        Model response = api.mLModelsRegister(subscriptionId, resourceGroup, workspace, model);
        // TODO: test validations
    }

}
