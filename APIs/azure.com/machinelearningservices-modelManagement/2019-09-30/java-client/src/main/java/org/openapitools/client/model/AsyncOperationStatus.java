/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AsyncOperationDetails;
import org.openapitools.client.model.ModelErrorResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The async operation status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:06.363531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AsyncOperationStatus {
  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ModelErrorResponse error;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OPERATION_DETAILS = "operationDetails";
  @SerializedName(SERIALIZED_NAME_OPERATION_DETAILS)
  private AsyncOperationDetails operationDetails;

  public static final String SERIALIZED_NAME_OPERATION_LOG = "operationLog";
  @SerializedName(SERIALIZED_NAME_OPERATION_LOG)
  private String operationLog;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private String operationType;

  public static final String SERIALIZED_NAME_PARENT_REQUEST_ID = "parentRequestId";
  @SerializedName(SERIALIZED_NAME_PARENT_REQUEST_ID)
  private String parentRequestId;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATION = "resourceLocation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATION)
  private String resourceLocation;

  /**
   * The async operation state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    NOT_STARTED("NotStarted"),
    
    RUNNING("Running"),
    
    CANCELLED("Cancelled"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    TIMED_OUT("TimedOut");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public AsyncOperationStatus() {
  }

  public AsyncOperationStatus createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The async operation creation time (UTC).
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public AsyncOperationStatus endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The async operation end time (UTC)l
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public AsyncOperationStatus error(ModelErrorResponse error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ModelErrorResponse getError() {
    return error;
  }

  public void setError(ModelErrorResponse error) {
    this.error = error;
  }


  public AsyncOperationStatus id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The async operation id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AsyncOperationStatus operationDetails(AsyncOperationDetails operationDetails) {
    this.operationDetails = operationDetails;
    return this;
  }

  /**
   * Get operationDetails
   * @return operationDetails
   */
  @javax.annotation.Nullable
  public AsyncOperationDetails getOperationDetails() {
    return operationDetails;
  }

  public void setOperationDetails(AsyncOperationDetails operationDetails) {
    this.operationDetails = operationDetails;
  }


  public AsyncOperationStatus operationLog(String operationLog) {
    this.operationLog = operationLog;
    return this;
  }

  /**
   * The async operation log.
   * @return operationLog
   */
  @javax.annotation.Nullable
  public String getOperationLog() {
    return operationLog;
  }

  public void setOperationLog(String operationLog) {
    this.operationLog = operationLog;
  }


  public AsyncOperationStatus operationType(String operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * The async operation type.
   * @return operationType
   */
  @javax.annotation.Nullable
  public String getOperationType() {
    return operationType;
  }

  public void setOperationType(String operationType) {
    this.operationType = operationType;
  }


  public AsyncOperationStatus parentRequestId(String parentRequestId) {
    this.parentRequestId = parentRequestId;
    return this;
  }

  /**
   * The request id that created this operation
   * @return parentRequestId
   */
  @javax.annotation.Nullable
  public String getParentRequestId() {
    return parentRequestId;
  }

  public void setParentRequestId(String parentRequestId) {
    this.parentRequestId = parentRequestId;
  }


  public AsyncOperationStatus resourceLocation(String resourceLocation) {
    this.resourceLocation = resourceLocation;
    return this;
  }

  /**
   * The resource created/updated by the async operation.
   * @return resourceLocation
   */
  @javax.annotation.Nullable
  public String getResourceLocation() {
    return resourceLocation;
  }

  public void setResourceLocation(String resourceLocation) {
    this.resourceLocation = resourceLocation;
  }


  public AsyncOperationStatus state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The async operation state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncOperationStatus asyncOperationStatus = (AsyncOperationStatus) o;
    return Objects.equals(this.createdTime, asyncOperationStatus.createdTime) &&
        Objects.equals(this.endTime, asyncOperationStatus.endTime) &&
        Objects.equals(this.error, asyncOperationStatus.error) &&
        Objects.equals(this.id, asyncOperationStatus.id) &&
        Objects.equals(this.operationDetails, asyncOperationStatus.operationDetails) &&
        Objects.equals(this.operationLog, asyncOperationStatus.operationLog) &&
        Objects.equals(this.operationType, asyncOperationStatus.operationType) &&
        Objects.equals(this.parentRequestId, asyncOperationStatus.parentRequestId) &&
        Objects.equals(this.resourceLocation, asyncOperationStatus.resourceLocation) &&
        Objects.equals(this.state, asyncOperationStatus.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTime, endTime, error, id, operationDetails, operationLog, operationType, parentRequestId, resourceLocation, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncOperationStatus {\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    operationDetails: ").append(toIndentedString(operationDetails)).append("\n");
    sb.append("    operationLog: ").append(toIndentedString(operationLog)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    parentRequestId: ").append(toIndentedString(parentRequestId)).append("\n");
    sb.append("    resourceLocation: ").append(toIndentedString(resourceLocation)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdTime");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("id");
    openapiFields.add("operationDetails");
    openapiFields.add("operationLog");
    openapiFields.add("operationType");
    openapiFields.add("parentRequestId");
    openapiFields.add("resourceLocation");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AsyncOperationStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AsyncOperationStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AsyncOperationStatus is not found in the empty JSON string", AsyncOperationStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AsyncOperationStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AsyncOperationStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ModelErrorResponse.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `operationDetails`
      if (jsonObj.get("operationDetails") != null && !jsonObj.get("operationDetails").isJsonNull()) {
        AsyncOperationDetails.validateJsonElement(jsonObj.get("operationDetails"));
      }
      if ((jsonObj.get("operationLog") != null && !jsonObj.get("operationLog").isJsonNull()) && !jsonObj.get("operationLog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationLog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationLog").toString()));
      }
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      if ((jsonObj.get("parentRequestId") != null && !jsonObj.get("parentRequestId").isJsonNull()) && !jsonObj.get("parentRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentRequestId").toString()));
      }
      if ((jsonObj.get("resourceLocation") != null && !jsonObj.get("resourceLocation").isJsonNull()) && !jsonObj.get("resourceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceLocation").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsyncOperationStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsyncOperationStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsyncOperationStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsyncOperationStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<AsyncOperationStatus>() {
           @Override
           public void write(JsonWriter out, AsyncOperationStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AsyncOperationStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AsyncOperationStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AsyncOperationStatus
   * @throws IOException if the JSON string is invalid with respect to AsyncOperationStatus
   */
  public static AsyncOperationStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsyncOperationStatus.class);
  }

  /**
   * Convert an instance of AsyncOperationStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

