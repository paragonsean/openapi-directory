/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AuthKeys;
import org.openapitools.client.model.AutoScaler;
import org.openapitools.client.model.ContainerResourceRequirements;
import org.openapitools.client.model.CreateEndpointVariantRequest;
import org.openapitools.client.model.EnvironmentImageRequest;
import org.openapitools.client.model.LivenessProbeRequirements;
import org.openapitools.client.model.ModelDataCollection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request to create an AKS service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:06.363531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AKSServiceCreateRequest extends CreateEndpointVariantRequest {
  public static final String SERIALIZED_NAME_AAD_AUTH_ENABLED = "aadAuthEnabled";
  @SerializedName(SERIALIZED_NAME_AAD_AUTH_ENABLED)
  private Boolean aadAuthEnabled;

  public static final String SERIALIZED_NAME_APP_INSIGHTS_ENABLED = "appInsightsEnabled";
  @SerializedName(SERIALIZED_NAME_APP_INSIGHTS_ENABLED)
  private Boolean appInsightsEnabled;

  public static final String SERIALIZED_NAME_AUTH_ENABLED = "authEnabled";
  @SerializedName(SERIALIZED_NAME_AUTH_ENABLED)
  private Boolean authEnabled;

  public static final String SERIALIZED_NAME_AUTO_SCALER = "autoScaler";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALER)
  private AutoScaler autoScaler;

  public static final String SERIALIZED_NAME_COMPUTE_NAME = "computeName";
  @SerializedName(SERIALIZED_NAME_COMPUTE_NAME)
  private String computeName;

  public static final String SERIALIZED_NAME_CONTAINER_RESOURCE_REQUIREMENTS = "containerResourceRequirements";
  @SerializedName(SERIALIZED_NAME_CONTAINER_RESOURCE_REQUIREMENTS)
  private ContainerResourceRequirements containerResourceRequirements;

  public static final String SERIALIZED_NAME_DATA_COLLECTION = "dataCollection";
  @SerializedName(SERIALIZED_NAME_DATA_COLLECTION)
  private ModelDataCollection dataCollection;

  public static final String SERIALIZED_NAME_LIVENESS_PROBE_REQUIREMENTS = "livenessProbeRequirements";
  @SerializedName(SERIALIZED_NAME_LIVENESS_PROBE_REQUIREMENTS)
  private LivenessProbeRequirements livenessProbeRequirements;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_REQUESTS_PER_CONTAINER = "maxConcurrentRequestsPerContainer";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_REQUESTS_PER_CONTAINER)
  private Integer maxConcurrentRequestsPerContainer;

  public static final String SERIALIZED_NAME_MAX_QUEUE_WAIT_MS = "maxQueueWaitMs";
  @SerializedName(SERIALIZED_NAME_MAX_QUEUE_WAIT_MS)
  private Integer maxQueueWaitMs;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_NUM_REPLICAS = "numReplicas";
  @SerializedName(SERIALIZED_NAME_NUM_REPLICAS)
  private Integer numReplicas;

  public static final String SERIALIZED_NAME_SCORING_TIMEOUT_MS = "scoringTimeoutMs";
  @SerializedName(SERIALIZED_NAME_SCORING_TIMEOUT_MS)
  private Integer scoringTimeoutMs;

  public AKSServiceCreateRequest() {
    this.computeType = this.getClass().getSimpleName();
  }

  public AKSServiceCreateRequest aadAuthEnabled(Boolean aadAuthEnabled) {
    this.aadAuthEnabled = aadAuthEnabled;
    return this;
  }

  /**
   * Whether or not AAD authentication is enabled.
   * @return aadAuthEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAadAuthEnabled() {
    return aadAuthEnabled;
  }

  public void setAadAuthEnabled(Boolean aadAuthEnabled) {
    this.aadAuthEnabled = aadAuthEnabled;
  }


  public AKSServiceCreateRequest appInsightsEnabled(Boolean appInsightsEnabled) {
    this.appInsightsEnabled = appInsightsEnabled;
    return this;
  }

  /**
   * Whether or not Application Insights is enabled.
   * @return appInsightsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAppInsightsEnabled() {
    return appInsightsEnabled;
  }

  public void setAppInsightsEnabled(Boolean appInsightsEnabled) {
    this.appInsightsEnabled = appInsightsEnabled;
  }


  public AKSServiceCreateRequest authEnabled(Boolean authEnabled) {
    this.authEnabled = authEnabled;
    return this;
  }

  /**
   * Whether or not authentication is enabled.
   * @return authEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAuthEnabled() {
    return authEnabled;
  }

  public void setAuthEnabled(Boolean authEnabled) {
    this.authEnabled = authEnabled;
  }


  public AKSServiceCreateRequest autoScaler(AutoScaler autoScaler) {
    this.autoScaler = autoScaler;
    return this;
  }

  /**
   * Get autoScaler
   * @return autoScaler
   */
  @javax.annotation.Nullable
  public AutoScaler getAutoScaler() {
    return autoScaler;
  }

  public void setAutoScaler(AutoScaler autoScaler) {
    this.autoScaler = autoScaler;
  }


  public AKSServiceCreateRequest computeName(String computeName) {
    this.computeName = computeName;
    return this;
  }

  /**
   * The name of the compute resource.
   * @return computeName
   */
  @javax.annotation.Nullable
  public String getComputeName() {
    return computeName;
  }

  public void setComputeName(String computeName) {
    this.computeName = computeName;
  }


  public AKSServiceCreateRequest containerResourceRequirements(ContainerResourceRequirements containerResourceRequirements) {
    this.containerResourceRequirements = containerResourceRequirements;
    return this;
  }

  /**
   * Get containerResourceRequirements
   * @return containerResourceRequirements
   */
  @javax.annotation.Nullable
  public ContainerResourceRequirements getContainerResourceRequirements() {
    return containerResourceRequirements;
  }

  public void setContainerResourceRequirements(ContainerResourceRequirements containerResourceRequirements) {
    this.containerResourceRequirements = containerResourceRequirements;
  }


  public AKSServiceCreateRequest dataCollection(ModelDataCollection dataCollection) {
    this.dataCollection = dataCollection;
    return this;
  }

  /**
   * Get dataCollection
   * @return dataCollection
   */
  @javax.annotation.Nullable
  public ModelDataCollection getDataCollection() {
    return dataCollection;
  }

  public void setDataCollection(ModelDataCollection dataCollection) {
    this.dataCollection = dataCollection;
  }


  public AKSServiceCreateRequest livenessProbeRequirements(LivenessProbeRequirements livenessProbeRequirements) {
    this.livenessProbeRequirements = livenessProbeRequirements;
    return this;
  }

  /**
   * Get livenessProbeRequirements
   * @return livenessProbeRequirements
   */
  @javax.annotation.Nullable
  public LivenessProbeRequirements getLivenessProbeRequirements() {
    return livenessProbeRequirements;
  }

  public void setLivenessProbeRequirements(LivenessProbeRequirements livenessProbeRequirements) {
    this.livenessProbeRequirements = livenessProbeRequirements;
  }


  public AKSServiceCreateRequest maxConcurrentRequestsPerContainer(Integer maxConcurrentRequestsPerContainer) {
    this.maxConcurrentRequestsPerContainer = maxConcurrentRequestsPerContainer;
    return this;
  }

  /**
   * The maximum number of concurrent requests per container.
   * @return maxConcurrentRequestsPerContainer
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentRequestsPerContainer() {
    return maxConcurrentRequestsPerContainer;
  }

  public void setMaxConcurrentRequestsPerContainer(Integer maxConcurrentRequestsPerContainer) {
    this.maxConcurrentRequestsPerContainer = maxConcurrentRequestsPerContainer;
  }


  public AKSServiceCreateRequest maxQueueWaitMs(Integer maxQueueWaitMs) {
    this.maxQueueWaitMs = maxQueueWaitMs;
    return this;
  }

  /**
   * Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)
   * @return maxQueueWaitMs
   */
  @javax.annotation.Nullable
  public Integer getMaxQueueWaitMs() {
    return maxQueueWaitMs;
  }

  public void setMaxQueueWaitMs(Integer maxQueueWaitMs) {
    this.maxQueueWaitMs = maxQueueWaitMs;
  }


  public AKSServiceCreateRequest namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Kubernetes namespace for the service.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public AKSServiceCreateRequest numReplicas(Integer numReplicas) {
    this.numReplicas = numReplicas;
    return this;
  }

  /**
   * The number of replicas on the cluster.
   * @return numReplicas
   */
  @javax.annotation.Nullable
  public Integer getNumReplicas() {
    return numReplicas;
  }

  public void setNumReplicas(Integer numReplicas) {
    this.numReplicas = numReplicas;
  }


  public AKSServiceCreateRequest scoringTimeoutMs(Integer scoringTimeoutMs) {
    this.scoringTimeoutMs = scoringTimeoutMs;
    return this;
  }

  /**
   * The scoring timeout in milliseconds.
   * @return scoringTimeoutMs
   */
  @javax.annotation.Nullable
  public Integer getScoringTimeoutMs() {
    return scoringTimeoutMs;
  }

  public void setScoringTimeoutMs(Integer scoringTimeoutMs) {
    this.scoringTimeoutMs = scoringTimeoutMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AKSServiceCreateRequest akSServiceCreateRequest = (AKSServiceCreateRequest) o;
    return Objects.equals(this.aadAuthEnabled, akSServiceCreateRequest.aadAuthEnabled) &&
        Objects.equals(this.appInsightsEnabled, akSServiceCreateRequest.appInsightsEnabled) &&
        Objects.equals(this.authEnabled, akSServiceCreateRequest.authEnabled) &&
        Objects.equals(this.autoScaler, akSServiceCreateRequest.autoScaler) &&
        Objects.equals(this.computeName, akSServiceCreateRequest.computeName) &&
        Objects.equals(this.containerResourceRequirements, akSServiceCreateRequest.containerResourceRequirements) &&
        Objects.equals(this.dataCollection, akSServiceCreateRequest.dataCollection) &&
        Objects.equals(this.livenessProbeRequirements, akSServiceCreateRequest.livenessProbeRequirements) &&
        Objects.equals(this.maxConcurrentRequestsPerContainer, akSServiceCreateRequest.maxConcurrentRequestsPerContainer) &&
        Objects.equals(this.maxQueueWaitMs, akSServiceCreateRequest.maxQueueWaitMs) &&
        Objects.equals(this.namespace, akSServiceCreateRequest.namespace) &&
        Objects.equals(this.numReplicas, akSServiceCreateRequest.numReplicas) &&
        Objects.equals(this.scoringTimeoutMs, akSServiceCreateRequest.scoringTimeoutMs) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aadAuthEnabled, appInsightsEnabled, authEnabled, autoScaler, computeName, containerResourceRequirements, dataCollection, livenessProbeRequirements, maxConcurrentRequestsPerContainer, maxQueueWaitMs, namespace, numReplicas, scoringTimeoutMs, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AKSServiceCreateRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    aadAuthEnabled: ").append(toIndentedString(aadAuthEnabled)).append("\n");
    sb.append("    appInsightsEnabled: ").append(toIndentedString(appInsightsEnabled)).append("\n");
    sb.append("    authEnabled: ").append(toIndentedString(authEnabled)).append("\n");
    sb.append("    autoScaler: ").append(toIndentedString(autoScaler)).append("\n");
    sb.append("    computeName: ").append(toIndentedString(computeName)).append("\n");
    sb.append("    containerResourceRequirements: ").append(toIndentedString(containerResourceRequirements)).append("\n");
    sb.append("    dataCollection: ").append(toIndentedString(dataCollection)).append("\n");
    sb.append("    livenessProbeRequirements: ").append(toIndentedString(livenessProbeRequirements)).append("\n");
    sb.append("    maxConcurrentRequestsPerContainer: ").append(toIndentedString(maxConcurrentRequestsPerContainer)).append("\n");
    sb.append("    maxQueueWaitMs: ").append(toIndentedString(maxQueueWaitMs)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    numReplicas: ").append(toIndentedString(numReplicas)).append("\n");
    sb.append("    scoringTimeoutMs: ").append(toIndentedString(scoringTimeoutMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeType");
    openapiFields.add("deploymentType");
    openapiFields.add("description");
    openapiFields.add("environmentImageRequest");
    openapiFields.add("imageId");
    openapiFields.add("keys");
    openapiFields.add("kvTags");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("properties");
    openapiFields.add("isDefault");
    openapiFields.add("trafficPercentile");
    openapiFields.add("type");
    openapiFields.add("aadAuthEnabled");
    openapiFields.add("appInsightsEnabled");
    openapiFields.add("authEnabled");
    openapiFields.add("autoScaler");
    openapiFields.add("computeName");
    openapiFields.add("containerResourceRequirements");
    openapiFields.add("dataCollection");
    openapiFields.add("livenessProbeRequirements");
    openapiFields.add("maxConcurrentRequestsPerContainer");
    openapiFields.add("maxQueueWaitMs");
    openapiFields.add("namespace");
    openapiFields.add("numReplicas");
    openapiFields.add("scoringTimeoutMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("computeType");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AKSServiceCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AKSServiceCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AKSServiceCreateRequest is not found in the empty JSON string", AKSServiceCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AKSServiceCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AKSServiceCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AKSServiceCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AKSServiceCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AKSServiceCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AKSServiceCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AKSServiceCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AKSServiceCreateRequest>() {
           @Override
           public void write(JsonWriter out, AKSServiceCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AKSServiceCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AKSServiceCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AKSServiceCreateRequest
   * @throws IOException if the JSON string is invalid with respect to AKSServiceCreateRequest
   */
  public static AKSServiceCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AKSServiceCreateRequest.class);
  }

  /**
   * Convert an instance of AKSServiceCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

