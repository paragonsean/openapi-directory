/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DatasetReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Azure Machine Learning Model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:06.363531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Model {
  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DATASETS = "datasets";
  @SerializedName(SERIALIZED_NAME_DATASETS)
  private List<DatasetReference> datasets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPERIMENT_NAME = "experimentName";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_NAME)
  private String experimentName;

  public static final String SERIALIZED_NAME_FRAMEWORK = "framework";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK)
  private String framework;

  public static final String SERIALIZED_NAME_FRAMEWORK_VERSION = "frameworkVersion";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK_VERSION)
  private String frameworkVersion;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KV_TAGS = "kvTags";
  @SerializedName(SERIALIZED_NAME_KV_TAGS)
  private Map<String, String> kvTags = new HashMap<>();

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modifiedTime";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private OffsetDateTime modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_MODEL_ID = "parentModelId";
  @SerializedName(SERIALIZED_NAME_PARENT_MODEL_ID)
  private String parentModelId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_RUN_ID = "runId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_UNPACK = "unpack";
  @SerializedName(SERIALIZED_NAME_UNPACK)
  private Boolean unpack;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public Model() {
  }

  public Model(
     OffsetDateTime createdTime, 
     OffsetDateTime modifiedTime
  ) {
    this();
    this.createdTime = createdTime;
    this.modifiedTime = modifiedTime;
  }

  /**
   * The Model creation time (UTC).
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }



  public Model datasets(List<DatasetReference> datasets) {
    this.datasets = datasets;
    return this;
  }

  public Model addDatasetsItem(DatasetReference datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new ArrayList<>();
    }
    this.datasets.add(datasetsItem);
    return this;
  }

  /**
   * The list of datasets associated with the model.
   * @return datasets
   */
  @javax.annotation.Nullable
  public List<DatasetReference> getDatasets() {
    return datasets;
  }

  public void setDatasets(List<DatasetReference> datasets) {
    this.datasets = datasets;
  }


  public Model description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The Model description text.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Model experimentName(String experimentName) {
    this.experimentName = experimentName;
    return this;
  }

  /**
   * The name of the experiment where this model was created.
   * @return experimentName
   */
  @javax.annotation.Nullable
  public String getExperimentName() {
    return experimentName;
  }

  public void setExperimentName(String experimentName) {
    this.experimentName = experimentName;
  }


  public Model framework(String framework) {
    this.framework = framework;
    return this;
  }

  /**
   * The Model framework.
   * @return framework
   */
  @javax.annotation.Nullable
  public String getFramework() {
    return framework;
  }

  public void setFramework(String framework) {
    this.framework = framework;
  }


  public Model frameworkVersion(String frameworkVersion) {
    this.frameworkVersion = frameworkVersion;
    return this;
  }

  /**
   * The Model framework version.
   * @return frameworkVersion
   */
  @javax.annotation.Nullable
  public String getFrameworkVersion() {
    return frameworkVersion;
  }

  public void setFrameworkVersion(String frameworkVersion) {
    this.frameworkVersion = frameworkVersion;
  }


  public Model id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Model Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Model kvTags(Map<String, String> kvTags) {
    this.kvTags = kvTags;
    return this;
  }

  public Model putKvTagsItem(String key, String kvTagsItem) {
    if (this.kvTags == null) {
      this.kvTags = new HashMap<>();
    }
    this.kvTags.put(key, kvTagsItem);
    return this;
  }

  /**
   * The Model tag dictionary. Items are mutable.
   * @return kvTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getKvTags() {
    return kvTags;
  }

  public void setKvTags(Map<String, String> kvTags) {
    this.kvTags = kvTags;
  }


  public Model mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
   * @return mimeType
   */
  @javax.annotation.Nonnull
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  /**
   * The Model last modified time (UTC).
   * @return modifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedTime() {
    return modifiedTime;
  }



  public Model name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The Model name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Model parentModelId(String parentModelId) {
    this.parentModelId = parentModelId;
    return this;
  }

  /**
   * The Parent Model Id.
   * @return parentModelId
   */
  @javax.annotation.Nullable
  public String getParentModelId() {
    return parentModelId;
  }

  public void setParentModelId(String parentModelId) {
    this.parentModelId = parentModelId;
  }


  public Model properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public Model putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * The Model property dictionary. Properties are immutable.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public Model runId(String runId) {
    this.runId = runId;
    return this;
  }

  /**
   * The RunId that created this model.
   * @return runId
   */
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }

  public void setRunId(String runId) {
    this.runId = runId;
  }


  public Model unpack(Boolean unpack) {
    this.unpack = unpack;
    return this;
  }

  /**
   * Indicates whether we need to unpack the Model during docker Image creation.
   * @return unpack
   */
  @javax.annotation.Nullable
  public Boolean getUnpack() {
    return unpack;
  }

  public void setUnpack(Boolean unpack) {
    this.unpack = unpack;
  }


  public Model url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of the Model. Usually a SAS URL.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Model version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The Model version assigned by Model Management Service.
   * @return version
   */
  @javax.annotation.Nullable
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model model = (Model) o;
    return Objects.equals(this.createdTime, model.createdTime) &&
        Objects.equals(this.datasets, model.datasets) &&
        Objects.equals(this.description, model.description) &&
        Objects.equals(this.experimentName, model.experimentName) &&
        Objects.equals(this.framework, model.framework) &&
        Objects.equals(this.frameworkVersion, model.frameworkVersion) &&
        Objects.equals(this.id, model.id) &&
        Objects.equals(this.kvTags, model.kvTags) &&
        Objects.equals(this.mimeType, model.mimeType) &&
        Objects.equals(this.modifiedTime, model.modifiedTime) &&
        Objects.equals(this.name, model.name) &&
        Objects.equals(this.parentModelId, model.parentModelId) &&
        Objects.equals(this.properties, model.properties) &&
        Objects.equals(this.runId, model.runId) &&
        Objects.equals(this.unpack, model.unpack) &&
        Objects.equals(this.url, model.url) &&
        Objects.equals(this.version, model.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTime, datasets, description, experimentName, framework, frameworkVersion, id, kvTags, mimeType, modifiedTime, name, parentModelId, properties, runId, unpack, url, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model {\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    experimentName: ").append(toIndentedString(experimentName)).append("\n");
    sb.append("    framework: ").append(toIndentedString(framework)).append("\n");
    sb.append("    frameworkVersion: ").append(toIndentedString(frameworkVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kvTags: ").append(toIndentedString(kvTags)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentModelId: ").append(toIndentedString(parentModelId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    unpack: ").append(toIndentedString(unpack)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdTime");
    openapiFields.add("datasets");
    openapiFields.add("description");
    openapiFields.add("experimentName");
    openapiFields.add("framework");
    openapiFields.add("frameworkVersion");
    openapiFields.add("id");
    openapiFields.add("kvTags");
    openapiFields.add("mimeType");
    openapiFields.add("modifiedTime");
    openapiFields.add("name");
    openapiFields.add("parentModelId");
    openapiFields.add("properties");
    openapiFields.add("runId");
    openapiFields.add("unpack");
    openapiFields.add("url");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mimeType");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Model
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Model.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model is not found in the empty JSON string", Model.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Model.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Model.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("datasets") != null && !jsonObj.get("datasets").isJsonNull()) {
        JsonArray jsonArraydatasets = jsonObj.getAsJsonArray("datasets");
        if (jsonArraydatasets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datasets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datasets` to be an array in the JSON string but got `%s`", jsonObj.get("datasets").toString()));
          }

          // validate the optional field `datasets` (array)
          for (int i = 0; i < jsonArraydatasets.size(); i++) {
            DatasetReference.validateJsonElement(jsonArraydatasets.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("experimentName") != null && !jsonObj.get("experimentName").isJsonNull()) && !jsonObj.get("experimentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experimentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experimentName").toString()));
      }
      if ((jsonObj.get("framework") != null && !jsonObj.get("framework").isJsonNull()) && !jsonObj.get("framework").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `framework` to be a primitive type in the JSON string but got `%s`", jsonObj.get("framework").toString()));
      }
      if ((jsonObj.get("frameworkVersion") != null && !jsonObj.get("frameworkVersion").isJsonNull()) && !jsonObj.get("frameworkVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frameworkVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frameworkVersion").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parentModelId") != null && !jsonObj.get("parentModelId").isJsonNull()) && !jsonObj.get("parentModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentModelId").toString()));
      }
      if ((jsonObj.get("runId") != null && !jsonObj.get("runId").isJsonNull()) && !jsonObj.get("runId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runId").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model.class));

       return (TypeAdapter<T>) new TypeAdapter<Model>() {
           @Override
           public void write(JsonWriter out, Model value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Model given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Model
   * @throws IOException if the JSON string is invalid with respect to Model
   */
  public static Model fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model.class);
  }

  /**
   * Convert an instance of Model to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

