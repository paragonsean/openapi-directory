/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthKeys;
import org.openapitools.client.model.AuthToken;
import org.openapitools.client.model.CreateServiceRequest;
import org.openapitools.client.model.JsonPatchOperation;
import org.openapitools.client.model.ModelErrorResponse;
import org.openapitools.client.model.PaginatedServiceList;
import org.openapitools.client.model.RegenerateServiceKeysRequest;
import org.openapitools.client.model.ServiceResponseBase;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for servicesCreate
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param request The payload that is used to create the Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted.  The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateCall(UUID subscriptionId, String resourceGroup, String workspace, CreateServiceRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCreateValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, CreateServiceRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesCreate(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling servicesCreate(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling servicesCreate(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling servicesCreate(Async)");
        }

        return servicesCreateCall(subscriptionId, resourceGroup, workspace, request, _callback);

    }

    /**
     * Create a Service.
     * Create a Service with the specified payload.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param request The payload that is used to create the Service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted.  The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void servicesCreate(UUID subscriptionId, String resourceGroup, String workspace, CreateServiceRequest request) throws ApiException {
        servicesCreateWithHttpInfo(subscriptionId, resourceGroup, workspace, request);
    }

    /**
     * Create a Service.
     * Create a Service with the specified payload.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param request The payload that is used to create the Service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted.  The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesCreateWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, CreateServiceRequest request) throws ApiException {
        okhttp3.Call localVarCall = servicesCreateValidateBeforeCall(subscriptionId, resourceGroup, workspace, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a Service. (asynchronously)
     * Create a Service with the specified payload.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param request The payload that is used to create the Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted.  The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateAsync(UUID subscriptionId, String resourceGroup, String workspace, CreateServiceRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCreateValidateBeforeCall(subscriptionId, resourceGroup, workspace, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesDelete
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource exists and was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The resource does not exist and the request was well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDeleteCall(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesDeleteValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesDelete(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling servicesDelete(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling servicesDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servicesDelete(Async)");
        }

        return servicesDeleteCall(subscriptionId, resourceGroup, workspace, id, _callback);

    }

    /**
     * Delete a Service.
     * Delete a specific Service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource exists and was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The resource does not exist and the request was well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void servicesDelete(UUID subscriptionId, String resourceGroup, String workspace, String id) throws ApiException {
        servicesDeleteWithHttpInfo(subscriptionId, resourceGroup, workspace, id);
    }

    /**
     * Delete a Service.
     * Delete a specific Service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource exists and was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The resource does not exist and the request was well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesDeleteWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String id) throws ApiException {
        okhttp3.Call localVarCall = servicesDeleteValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Service. (asynchronously)
     * Delete a specific Service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource exists and was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The resource does not exist and the request was well formed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDeleteAsync(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesDeleteValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGetServiceToken
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetServiceTokenCall(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/token"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetServiceTokenValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesGetServiceToken(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling servicesGetServiceToken(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling servicesGetServiceToken(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servicesGetServiceToken(Async)");
        }

        return servicesGetServiceTokenCall(subscriptionId, resourceGroup, workspace, id, _callback);

    }

    /**
     * Generate Service Access Token.
     * Gets access token that can be used for calling service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @return AuthToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthToken servicesGetServiceToken(UUID subscriptionId, String resourceGroup, String workspace, String id) throws ApiException {
        ApiResponse<AuthToken> localVarResp = servicesGetServiceTokenWithHttpInfo(subscriptionId, resourceGroup, workspace, id);
        return localVarResp.getData();
    }

    /**
     * Generate Service Access Token.
     * Gets access token that can be used for calling service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @return ApiResponse&lt;AuthToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthToken> servicesGetServiceTokenWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String id) throws ApiException {
        okhttp3.Call localVarCall = servicesGetServiceTokenValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, null);
        Type localVarReturnType = new TypeToken<AuthToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Service Access Token. (asynchronously)
     * Gets access token that can be used for calling service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetServiceTokenAsync(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback<AuthToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetServiceTokenValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, _callback);
        Type localVarReturnType = new TypeToken<AuthToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListQuery
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (optional)
     * @param imageName The Image name. (optional)
     * @param modelId The Model Id. (optional)
     * @param modelName The Model name. (optional)
     * @param name The object name. (optional)
     * @param count The number of items to retrieve in a page. (optional)
     * @param computeType The compute environment type. (optional)
     * @param $skipToken The continuation token to retrieve the next page. (optional)
     * @param tags A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key&#x3D;value              Example: tagKey1,tagKey2,tagKey3&#x3D;value3 (optional)
     * @param properties A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key&#x3D;value              Example: propKey1,propKey2,propKey3&#x3D;value3 (optional)
     * @param expand Set to True to include Model details. (optional, default to false)
     * @param orderby The option to order the response. (optional, default to UpdatedAtDesc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListQueryCall(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String imageName, String modelId, String modelName, String name, Integer count, String computeType, String $skipToken, String tags, String properties, Boolean expand, String orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageId", imageId));
        }

        if (imageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageName", imageName));
        }

        if (modelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelId", modelId));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (computeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("computeType", computeType));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (properties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("properties", properties));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListQueryValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String imageName, String modelId, String modelName, String name, Integer count, String computeType, String $skipToken, String tags, String properties, Boolean expand, String orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesListQuery(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling servicesListQuery(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling servicesListQuery(Async)");
        }

        return servicesListQueryCall(subscriptionId, resourceGroup, workspace, imageId, imageName, modelId, modelName, name, count, computeType, $skipToken, tags, properties, expand, orderby, _callback);

    }

    /**
     * Query the list of Services in a Workspace.
     * If no filter is passed, the query lists all Services in the Workspace. The returned list is paginated and the count of item in each page is an optional parameter.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (optional)
     * @param imageName The Image name. (optional)
     * @param modelId The Model Id. (optional)
     * @param modelName The Model name. (optional)
     * @param name The object name. (optional)
     * @param count The number of items to retrieve in a page. (optional)
     * @param computeType The compute environment type. (optional)
     * @param $skipToken The continuation token to retrieve the next page. (optional)
     * @param tags A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key&#x3D;value              Example: tagKey1,tagKey2,tagKey3&#x3D;value3 (optional)
     * @param properties A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key&#x3D;value              Example: propKey1,propKey2,propKey3&#x3D;value3 (optional)
     * @param expand Set to True to include Model details. (optional, default to false)
     * @param orderby The option to order the response. (optional, default to UpdatedAtDesc)
     * @return PaginatedServiceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedServiceList servicesListQuery(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String imageName, String modelId, String modelName, String name, Integer count, String computeType, String $skipToken, String tags, String properties, Boolean expand, String orderby) throws ApiException {
        ApiResponse<PaginatedServiceList> localVarResp = servicesListQueryWithHttpInfo(subscriptionId, resourceGroup, workspace, imageId, imageName, modelId, modelName, name, count, computeType, $skipToken, tags, properties, expand, orderby);
        return localVarResp.getData();
    }

    /**
     * Query the list of Services in a Workspace.
     * If no filter is passed, the query lists all Services in the Workspace. The returned list is paginated and the count of item in each page is an optional parameter.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (optional)
     * @param imageName The Image name. (optional)
     * @param modelId The Model Id. (optional)
     * @param modelName The Model name. (optional)
     * @param name The object name. (optional)
     * @param count The number of items to retrieve in a page. (optional)
     * @param computeType The compute environment type. (optional)
     * @param $skipToken The continuation token to retrieve the next page. (optional)
     * @param tags A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key&#x3D;value              Example: tagKey1,tagKey2,tagKey3&#x3D;value3 (optional)
     * @param properties A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key&#x3D;value              Example: propKey1,propKey2,propKey3&#x3D;value3 (optional)
     * @param expand Set to True to include Model details. (optional, default to false)
     * @param orderby The option to order the response. (optional, default to UpdatedAtDesc)
     * @return ApiResponse&lt;PaginatedServiceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedServiceList> servicesListQueryWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String imageName, String modelId, String modelName, String name, Integer count, String computeType, String $skipToken, String tags, String properties, Boolean expand, String orderby) throws ApiException {
        okhttp3.Call localVarCall = servicesListQueryValidateBeforeCall(subscriptionId, resourceGroup, workspace, imageId, imageName, modelId, modelName, name, count, computeType, $skipToken, tags, properties, expand, orderby, null);
        Type localVarReturnType = new TypeToken<PaginatedServiceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query the list of Services in a Workspace. (asynchronously)
     * If no filter is passed, the query lists all Services in the Workspace. The returned list is paginated and the count of item in each page is an optional parameter.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (optional)
     * @param imageName The Image name. (optional)
     * @param modelId The Model Id. (optional)
     * @param modelName The Model name. (optional)
     * @param name The object name. (optional)
     * @param count The number of items to retrieve in a page. (optional)
     * @param computeType The compute environment type. (optional)
     * @param $skipToken The continuation token to retrieve the next page. (optional)
     * @param tags A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key&#x3D;value              Example: tagKey1,tagKey2,tagKey3&#x3D;value3 (optional)
     * @param properties A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key&#x3D;value              Example: propKey1,propKey2,propKey3&#x3D;value3 (optional)
     * @param expand Set to True to include Model details. (optional, default to false)
     * @param orderby The option to order the response. (optional, default to UpdatedAtDesc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListQueryAsync(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String imageName, String modelId, String modelName, String name, Integer count, String computeType, String $skipToken, String tags, String properties, Boolean expand, String orderby, final ApiCallback<PaginatedServiceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListQueryValidateBeforeCall(subscriptionId, resourceGroup, workspace, imageId, imageName, modelId, modelName, name, count, computeType, $skipToken, tags, properties, expand, orderby, _callback);
        Type localVarReturnType = new TypeToken<PaginatedServiceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListServiceKeys
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListServiceKeysCall(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/listkeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListServiceKeysValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesListServiceKeys(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling servicesListServiceKeys(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling servicesListServiceKeys(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servicesListServiceKeys(Async)");
        }

        return servicesListServiceKeysCall(subscriptionId, resourceGroup, workspace, id, _callback);

    }

    /**
     * Lists Service keys.
     * Gets a list of Service keys.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @return AuthKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthKeys servicesListServiceKeys(UUID subscriptionId, String resourceGroup, String workspace, String id) throws ApiException {
        ApiResponse<AuthKeys> localVarResp = servicesListServiceKeysWithHttpInfo(subscriptionId, resourceGroup, workspace, id);
        return localVarResp.getData();
    }

    /**
     * Lists Service keys.
     * Gets a list of Service keys.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @return ApiResponse&lt;AuthKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthKeys> servicesListServiceKeysWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String id) throws ApiException {
        okhttp3.Call localVarCall = servicesListServiceKeysValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, null);
        Type localVarReturnType = new TypeToken<AuthKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists Service keys. (asynchronously)
     * Gets a list of Service keys.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListServiceKeysAsync(UUID subscriptionId, String resourceGroup, String workspace, String id, final ApiCallback<AuthKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListServiceKeysValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, _callback);
        Type localVarReturnType = new TypeToken<AuthKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesPatch
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param patch The payload that is used to patch the Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was accepted.  The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesPatchCall(UUID subscriptionId, String resourceGroup, String workspace, String id, List<JsonPatchOperation> patch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patch;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesPatchValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String id, List<JsonPatchOperation> patch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesPatch(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling servicesPatch(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling servicesPatch(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servicesPatch(Async)");
        }

        // verify the required parameter 'patch' is set
        if (patch == null) {
            throw new ApiException("Missing the required parameter 'patch' when calling servicesPatch(Async)");
        }

        return servicesPatchCall(subscriptionId, resourceGroup, workspace, id, patch, _callback);

    }

    /**
     * Patch a Service.
     * Patch a specific Service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param patch The payload that is used to patch the Service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was accepted.  The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void servicesPatch(UUID subscriptionId, String resourceGroup, String workspace, String id, List<JsonPatchOperation> patch) throws ApiException {
        servicesPatchWithHttpInfo(subscriptionId, resourceGroup, workspace, id, patch);
    }

    /**
     * Patch a Service.
     * Patch a specific Service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param patch The payload that is used to patch the Service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was accepted.  The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesPatchWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String id, List<JsonPatchOperation> patch) throws ApiException {
        okhttp3.Call localVarCall = servicesPatchValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, patch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Patch a Service. (asynchronously)
     * Patch a specific Service.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param patch The payload that is used to patch the Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was accepted.  The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesPatchAsync(UUID subscriptionId, String resourceGroup, String workspace, String id, List<JsonPatchOperation> patch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesPatchValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, patch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesQueryById
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param expand Set to True to include Model details. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueryByIdCall(UUID subscriptionId, String resourceGroup, String workspace, String id, Boolean expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesQueryByIdValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String id, Boolean expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesQueryById(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling servicesQueryById(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling servicesQueryById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servicesQueryById(Async)");
        }

        return servicesQueryByIdCall(subscriptionId, resourceGroup, workspace, id, expand, _callback);

    }

    /**
     * Get a Service.
     * Get a Service by Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param expand Set to True to include Model details. (optional, default to false)
     * @return ServiceResponseBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceResponseBase servicesQueryById(UUID subscriptionId, String resourceGroup, String workspace, String id, Boolean expand) throws ApiException {
        ApiResponse<ServiceResponseBase> localVarResp = servicesQueryByIdWithHttpInfo(subscriptionId, resourceGroup, workspace, id, expand);
        return localVarResp.getData();
    }

    /**
     * Get a Service.
     * Get a Service by Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param expand Set to True to include Model details. (optional, default to false)
     * @return ApiResponse&lt;ServiceResponseBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceResponseBase> servicesQueryByIdWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String id, Boolean expand) throws ApiException {
        okhttp3.Call localVarCall = servicesQueryByIdValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, expand, null);
        Type localVarReturnType = new TypeToken<ServiceResponseBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Service. (asynchronously)
     * Get a Service by Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param expand Set to True to include Model details. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueryByIdAsync(UUID subscriptionId, String resourceGroup, String workspace, String id, Boolean expand, final ApiCallback<ServiceResponseBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesQueryByIdValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, expand, _callback);
        Type localVarReturnType = new TypeToken<ServiceResponseBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesRegenerateServiceKeys
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param request The payload that is used to regenerate keys. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was accepted. The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesRegenerateServiceKeysCall(UUID subscriptionId, String resourceGroup, String workspace, String id, RegenerateServiceKeysRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/regenerateKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesRegenerateServiceKeysValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String id, RegenerateServiceKeysRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesRegenerateServiceKeys(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling servicesRegenerateServiceKeys(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling servicesRegenerateServiceKeys(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servicesRegenerateServiceKeys(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling servicesRegenerateServiceKeys(Async)");
        }

        return servicesRegenerateServiceKeysCall(subscriptionId, resourceGroup, workspace, id, request, _callback);

    }

    /**
     * Regenerate Service Keys.
     * Regenerate and return the Service keys.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param request The payload that is used to regenerate keys. (required)
     * @return AuthKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was accepted. The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthKeys servicesRegenerateServiceKeys(UUID subscriptionId, String resourceGroup, String workspace, String id, RegenerateServiceKeysRequest request) throws ApiException {
        ApiResponse<AuthKeys> localVarResp = servicesRegenerateServiceKeysWithHttpInfo(subscriptionId, resourceGroup, workspace, id, request);
        return localVarResp.getData();
    }

    /**
     * Regenerate Service Keys.
     * Regenerate and return the Service keys.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param request The payload that is used to regenerate keys. (required)
     * @return ApiResponse&lt;AuthKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was accepted. The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthKeys> servicesRegenerateServiceKeysWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String id, RegenerateServiceKeysRequest request) throws ApiException {
        okhttp3.Call localVarCall = servicesRegenerateServiceKeysValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, request, null);
        Type localVarReturnType = new TypeToken<AuthKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate Service Keys. (asynchronously)
     * Regenerate and return the Service keys.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param id The Service Id. (required)
     * @param request The payload that is used to regenerate keys. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was accepted. The header &#39;Operation-Location&#39; contains the async operation location URL.  Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesRegenerateServiceKeysAsync(UUID subscriptionId, String resourceGroup, String workspace, String id, RegenerateServiceKeysRequest request, final ApiCallback<AuthKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesRegenerateServiceKeysValidateBeforeCall(subscriptionId, resourceGroup, workspace, id, request, _callback);
        Type localVarReturnType = new TypeToken<AuthKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
