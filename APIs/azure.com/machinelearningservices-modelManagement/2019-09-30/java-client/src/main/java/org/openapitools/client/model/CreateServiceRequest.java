/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AuthKeys;
import org.openapitools.client.model.EnvironmentImageRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The base class for creating a service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:06.363531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateServiceRequest {
  /**
   * The compute environment type for the service.
   */
  @JsonAdapter(ComputeTypeEnum.Adapter.class)
  public enum ComputeTypeEnum {
    ACI("ACI"),
    
    AKS("AKS"),
    
    AMLCOMPUTE("AMLCOMPUTE"),
    
    IOT("IOT"),
    
    AKSENDPOINT("AKSENDPOINT"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ComputeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComputeTypeEnum fromValue(String value) {
      for (ComputeTypeEnum b : ComputeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComputeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComputeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComputeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComputeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComputeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPUTE_TYPE = "computeType";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TYPE)
  protected ComputeTypeEnum computeType;

  /**
   * The deployment type for the service.
   */
  @JsonAdapter(DeploymentTypeEnum.Adapter.class)
  public enum DeploymentTypeEnum {
    GRPC_REALTIME_ENDPOINT("GRPCRealtimeEndpoint"),
    
    HTTP_REALTIME_ENDPOINT("HttpRealtimeEndpoint"),
    
    BATCH("Batch");

    private String value;

    DeploymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeploymentTypeEnum fromValue(String value) {
      for (DeploymentTypeEnum b : DeploymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeploymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeploymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeploymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPLOYMENT_TYPE = "deploymentType";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_TYPE)
  private DeploymentTypeEnum deploymentType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENVIRONMENT_IMAGE_REQUEST = "environmentImageRequest";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_IMAGE_REQUEST)
  private EnvironmentImageRequest environmentImageRequest;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_KEYS = "keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private AuthKeys keys;

  public static final String SERIALIZED_NAME_KV_TAGS = "kvTags";
  @SerializedName(SERIALIZED_NAME_KV_TAGS)
  private Map<String, String> kvTags = new HashMap<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public CreateServiceRequest() {
  }

  public CreateServiceRequest computeType(ComputeTypeEnum computeType) {
    this.computeType = computeType;
    return this;
  }

  /**
   * The compute environment type for the service.
   * @return computeType
   */
  @javax.annotation.Nonnull
  public ComputeTypeEnum getComputeType() {
    return computeType;
  }

  public void setComputeType(ComputeTypeEnum computeType) {
    this.computeType = computeType;
  }


  public CreateServiceRequest deploymentType(DeploymentTypeEnum deploymentType) {
    this.deploymentType = deploymentType;
    return this;
  }

  /**
   * The deployment type for the service.
   * @return deploymentType
   */
  @javax.annotation.Nullable
  public DeploymentTypeEnum getDeploymentType() {
    return deploymentType;
  }

  public void setDeploymentType(DeploymentTypeEnum deploymentType) {
    this.deploymentType = deploymentType;
  }


  public CreateServiceRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the service.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateServiceRequest environmentImageRequest(EnvironmentImageRequest environmentImageRequest) {
    this.environmentImageRequest = environmentImageRequest;
    return this;
  }

  /**
   * Get environmentImageRequest
   * @return environmentImageRequest
   */
  @javax.annotation.Nullable
  public EnvironmentImageRequest getEnvironmentImageRequest() {
    return environmentImageRequest;
  }

  public void setEnvironmentImageRequest(EnvironmentImageRequest environmentImageRequest) {
    this.environmentImageRequest = environmentImageRequest;
  }


  public CreateServiceRequest imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * The Image Id.
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public CreateServiceRequest keys(AuthKeys keys) {
    this.keys = keys;
    return this;
  }

  /**
   * Get keys
   * @return keys
   */
  @javax.annotation.Nullable
  public AuthKeys getKeys() {
    return keys;
  }

  public void setKeys(AuthKeys keys) {
    this.keys = keys;
  }


  public CreateServiceRequest kvTags(Map<String, String> kvTags) {
    this.kvTags = kvTags;
    return this;
  }

  public CreateServiceRequest putKvTagsItem(String key, String kvTagsItem) {
    if (this.kvTags == null) {
      this.kvTags = new HashMap<>();
    }
    this.kvTags.put(key, kvTagsItem);
    return this;
  }

  /**
   * The service tag dictionary. Tags are mutable.
   * @return kvTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getKvTags() {
    return kvTags;
  }

  public void setKvTags(Map<String, String> kvTags) {
    this.kvTags = kvTags;
  }


  public CreateServiceRequest location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location of the service.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public CreateServiceRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The service name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateServiceRequest properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public CreateServiceRequest putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * The service properties dictionary. Properties are immutable.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceRequest createServiceRequest = (CreateServiceRequest) o;
    return Objects.equals(this.computeType, createServiceRequest.computeType) &&
        Objects.equals(this.deploymentType, createServiceRequest.deploymentType) &&
        Objects.equals(this.description, createServiceRequest.description) &&
        Objects.equals(this.environmentImageRequest, createServiceRequest.environmentImageRequest) &&
        Objects.equals(this.imageId, createServiceRequest.imageId) &&
        Objects.equals(this.keys, createServiceRequest.keys) &&
        Objects.equals(this.kvTags, createServiceRequest.kvTags) &&
        Objects.equals(this.location, createServiceRequest.location) &&
        Objects.equals(this.name, createServiceRequest.name) &&
        Objects.equals(this.properties, createServiceRequest.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeType, deploymentType, description, environmentImageRequest, imageId, keys, kvTags, location, name, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceRequest {\n");
    sb.append("    computeType: ").append(toIndentedString(computeType)).append("\n");
    sb.append("    deploymentType: ").append(toIndentedString(deploymentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environmentImageRequest: ").append(toIndentedString(environmentImageRequest)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    kvTags: ").append(toIndentedString(kvTags)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeType");
    openapiFields.add("deploymentType");
    openapiFields.add("description");
    openapiFields.add("environmentImageRequest");
    openapiFields.add("imageId");
    openapiFields.add("keys");
    openapiFields.add("kvTags");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("computeType");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateServiceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateServiceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateServiceRequest is not found in the empty JSON string", CreateServiceRequest.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("computeType").getAsString();
      switch (discriminatorValue) {
        case "ACIServiceCreateRequest":
          ACIServiceCreateRequest.validateJsonElement(jsonElement);
          break;
        case "AKSServiceCreateRequest":
          AKSServiceCreateRequest.validateJsonElement(jsonElement);
          break;
        case "CreateEndpointRequest":
          CreateEndpointRequest.validateJsonElement(jsonElement);
          break;
        case "CreateEndpointVariantRequest":
          CreateEndpointVariantRequest.validateJsonElement(jsonElement);
          break;
        case "CreateIotServiceRequest":
          CreateIotServiceRequest.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `computeType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of CreateServiceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateServiceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateServiceRequest
   */
  public static CreateServiceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateServiceRequest.class);
  }

  /**
   * Convert an instance of CreateServiceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

