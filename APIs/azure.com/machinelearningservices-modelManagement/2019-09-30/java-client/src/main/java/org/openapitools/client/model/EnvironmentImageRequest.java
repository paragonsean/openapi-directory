/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentImageAsset;
import org.openapitools.client.model.ModelEnvironmentDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to create a Docker image based on Environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:06.363531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentImageRequest {
  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private List<EnvironmentImageAsset> assets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DRIVER_PROGRAM = "driverProgram";
  @SerializedName(SERIALIZED_NAME_DRIVER_PROGRAM)
  private String driverProgram;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private ModelEnvironmentDefinition environment;

  public static final String SERIALIZED_NAME_MODEL_IDS = "modelIds";
  @SerializedName(SERIALIZED_NAME_MODEL_IDS)
  private List<String> modelIds = new ArrayList<>();

  public EnvironmentImageRequest() {
  }

  public EnvironmentImageRequest assets(List<EnvironmentImageAsset> assets) {
    this.assets = assets;
    return this;
  }

  public EnvironmentImageRequest addAssetsItem(EnvironmentImageAsset assetsItem) {
    if (this.assets == null) {
      this.assets = new ArrayList<>();
    }
    this.assets.add(assetsItem);
    return this;
  }

  /**
   * The list of assets.
   * @return assets
   */
  @javax.annotation.Nullable
  public List<EnvironmentImageAsset> getAssets() {
    return assets;
  }

  public void setAssets(List<EnvironmentImageAsset> assets) {
    this.assets = assets;
  }


  public EnvironmentImageRequest driverProgram(String driverProgram) {
    this.driverProgram = driverProgram;
    return this;
  }

  /**
   * The name of the driver file.
   * @return driverProgram
   */
  @javax.annotation.Nullable
  public String getDriverProgram() {
    return driverProgram;
  }

  public void setDriverProgram(String driverProgram) {
    this.driverProgram = driverProgram;
  }


  public EnvironmentImageRequest environment(ModelEnvironmentDefinition environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public ModelEnvironmentDefinition getEnvironment() {
    return environment;
  }

  public void setEnvironment(ModelEnvironmentDefinition environment) {
    this.environment = environment;
  }


  public EnvironmentImageRequest modelIds(List<String> modelIds) {
    this.modelIds = modelIds;
    return this;
  }

  public EnvironmentImageRequest addModelIdsItem(String modelIdsItem) {
    if (this.modelIds == null) {
      this.modelIds = new ArrayList<>();
    }
    this.modelIds.add(modelIdsItem);
    return this;
  }

  /**
   * The list of model Ids.
   * @return modelIds
   */
  @javax.annotation.Nullable
  public List<String> getModelIds() {
    return modelIds;
  }

  public void setModelIds(List<String> modelIds) {
    this.modelIds = modelIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentImageRequest environmentImageRequest = (EnvironmentImageRequest) o;
    return Objects.equals(this.assets, environmentImageRequest.assets) &&
        Objects.equals(this.driverProgram, environmentImageRequest.driverProgram) &&
        Objects.equals(this.environment, environmentImageRequest.environment) &&
        Objects.equals(this.modelIds, environmentImageRequest.modelIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assets, driverProgram, environment, modelIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentImageRequest {\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    driverProgram: ").append(toIndentedString(driverProgram)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    modelIds: ").append(toIndentedString(modelIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assets");
    openapiFields.add("driverProgram");
    openapiFields.add("environment");
    openapiFields.add("modelIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentImageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentImageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentImageRequest is not found in the empty JSON string", EnvironmentImageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentImageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentImageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
        if (jsonArrayassets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assets` to be an array in the JSON string but got `%s`", jsonObj.get("assets").toString()));
          }

          // validate the optional field `assets` (array)
          for (int i = 0; i < jsonArrayassets.size(); i++) {
            EnvironmentImageAsset.validateJsonElement(jsonArrayassets.get(i));
          };
        }
      }
      if ((jsonObj.get("driverProgram") != null && !jsonObj.get("driverProgram").isJsonNull()) && !jsonObj.get("driverProgram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `driverProgram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("driverProgram").toString()));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        ModelEnvironmentDefinition.validateJsonElement(jsonObj.get("environment"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modelIds") != null && !jsonObj.get("modelIds").isJsonNull() && !jsonObj.get("modelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelIds` to be an array in the JSON string but got `%s`", jsonObj.get("modelIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentImageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentImageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentImageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentImageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentImageRequest>() {
           @Override
           public void write(JsonWriter out, EnvironmentImageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentImageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentImageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentImageRequest
   * @throws IOException if the JSON string is invalid with respect to EnvironmentImageRequest
   */
  public static EnvironmentImageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentImageRequest.class);
  }

  /**
   * Convert an instance of EnvironmentImageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

