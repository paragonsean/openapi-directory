/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelPythonSection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:06.363531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelPythonSection {
  public static final String SERIALIZED_NAME_BASE_CONDA_ENVIRONMENT = "baseCondaEnvironment";
  @SerializedName(SERIALIZED_NAME_BASE_CONDA_ENVIRONMENT)
  private String baseCondaEnvironment;

  public static final String SERIALIZED_NAME_CONDA_DEPENDENCIES = "condaDependencies";
  @SerializedName(SERIALIZED_NAME_CONDA_DEPENDENCIES)
  private Object condaDependencies;

  public static final String SERIALIZED_NAME_INTERPRETER_PATH = "interpreterPath";
  @SerializedName(SERIALIZED_NAME_INTERPRETER_PATH)
  private String interpreterPath;

  public static final String SERIALIZED_NAME_USER_MANAGED_DEPENDENCIES = "userManagedDependencies";
  @SerializedName(SERIALIZED_NAME_USER_MANAGED_DEPENDENCIES)
  private Boolean userManagedDependencies;

  public ModelPythonSection() {
  }

  public ModelPythonSection baseCondaEnvironment(String baseCondaEnvironment) {
    this.baseCondaEnvironment = baseCondaEnvironment;
    return this;
  }

  /**
   * Get baseCondaEnvironment
   * @return baseCondaEnvironment
   */
  @javax.annotation.Nullable
  public String getBaseCondaEnvironment() {
    return baseCondaEnvironment;
  }

  public void setBaseCondaEnvironment(String baseCondaEnvironment) {
    this.baseCondaEnvironment = baseCondaEnvironment;
  }


  public ModelPythonSection condaDependencies(Object condaDependencies) {
    this.condaDependencies = condaDependencies;
    return this;
  }

  /**
   * Get condaDependencies
   * @return condaDependencies
   */
  @javax.annotation.Nullable
  public Object getCondaDependencies() {
    return condaDependencies;
  }

  public void setCondaDependencies(Object condaDependencies) {
    this.condaDependencies = condaDependencies;
  }


  public ModelPythonSection interpreterPath(String interpreterPath) {
    this.interpreterPath = interpreterPath;
    return this;
  }

  /**
   * The python interpreter path. This is only used when user_managed_dependencies&#x3D;True.
   * @return interpreterPath
   */
  @javax.annotation.Nullable
  public String getInterpreterPath() {
    return interpreterPath;
  }

  public void setInterpreterPath(String interpreterPath) {
    this.interpreterPath = interpreterPath;
  }


  public ModelPythonSection userManagedDependencies(Boolean userManagedDependencies) {
    this.userManagedDependencies = userManagedDependencies;
    return this;
  }

  /**
   * True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.
   * @return userManagedDependencies
   */
  @javax.annotation.Nullable
  public Boolean getUserManagedDependencies() {
    return userManagedDependencies;
  }

  public void setUserManagedDependencies(Boolean userManagedDependencies) {
    this.userManagedDependencies = userManagedDependencies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelPythonSection modelPythonSection = (ModelPythonSection) o;
    return Objects.equals(this.baseCondaEnvironment, modelPythonSection.baseCondaEnvironment) &&
        Objects.equals(this.condaDependencies, modelPythonSection.condaDependencies) &&
        Objects.equals(this.interpreterPath, modelPythonSection.interpreterPath) &&
        Objects.equals(this.userManagedDependencies, modelPythonSection.userManagedDependencies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCondaEnvironment, condaDependencies, interpreterPath, userManagedDependencies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelPythonSection {\n");
    sb.append("    baseCondaEnvironment: ").append(toIndentedString(baseCondaEnvironment)).append("\n");
    sb.append("    condaDependencies: ").append(toIndentedString(condaDependencies)).append("\n");
    sb.append("    interpreterPath: ").append(toIndentedString(interpreterPath)).append("\n");
    sb.append("    userManagedDependencies: ").append(toIndentedString(userManagedDependencies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseCondaEnvironment");
    openapiFields.add("condaDependencies");
    openapiFields.add("interpreterPath");
    openapiFields.add("userManagedDependencies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelPythonSection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelPythonSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelPythonSection is not found in the empty JSON string", ModelPythonSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelPythonSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelPythonSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseCondaEnvironment") != null && !jsonObj.get("baseCondaEnvironment").isJsonNull()) && !jsonObj.get("baseCondaEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCondaEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCondaEnvironment").toString()));
      }
      if ((jsonObj.get("interpreterPath") != null && !jsonObj.get("interpreterPath").isJsonNull()) && !jsonObj.get("interpreterPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interpreterPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interpreterPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelPythonSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelPythonSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelPythonSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelPythonSection.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelPythonSection>() {
           @Override
           public void write(JsonWriter out, ModelPythonSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelPythonSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelPythonSection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelPythonSection
   * @throws IOException if the JSON string is invalid with respect to ModelPythonSection
   */
  public static ModelPythonSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelPythonSection.class);
  }

  /**
   * Convert an instance of ModelPythonSection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

