# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IotModuleSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_options: str=None, environment_variables: Dict[str, str]=None, image_location: str=None, module_name: str=None, properties_desired: Dict[str, str]=None):
        """IotModuleSettings - a model defined in OpenAPI

        :param create_options: The create_options of this IotModuleSettings.
        :param environment_variables: The environment_variables of this IotModuleSettings.
        :param image_location: The image_location of this IotModuleSettings.
        :param module_name: The module_name of this IotModuleSettings.
        :param properties_desired: The properties_desired of this IotModuleSettings.
        """
        self.openapi_types = {
            'create_options': str,
            'environment_variables': Dict[str, str],
            'image_location': str,
            'module_name': str,
            'properties_desired': Dict[str, str]
        }

        self.attribute_map = {
            'create_options': 'createOptions',
            'environment_variables': 'environmentVariables',
            'image_location': 'imageLocation',
            'module_name': 'moduleName',
            'properties_desired': 'propertiesDesired'
        }

        self._create_options = create_options
        self._environment_variables = environment_variables
        self._image_location = image_location
        self._module_name = module_name
        self._properties_desired = properties_desired

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IotModuleSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IotModuleSettings of this IotModuleSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_options(self):
        """Gets the create_options of this IotModuleSettings.


        :return: The create_options of this IotModuleSettings.
        :rtype: str
        """
        return self._create_options

    @create_options.setter
    def create_options(self, create_options):
        """Sets the create_options of this IotModuleSettings.


        :param create_options: The create_options of this IotModuleSettings.
        :type create_options: str
        """

        self._create_options = create_options

    @property
    def environment_variables(self):
        """Gets the environment_variables of this IotModuleSettings.


        :return: The environment_variables of this IotModuleSettings.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this IotModuleSettings.


        :param environment_variables: The environment_variables of this IotModuleSettings.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def image_location(self):
        """Gets the image_location of this IotModuleSettings.


        :return: The image_location of this IotModuleSettings.
        :rtype: str
        """
        return self._image_location

    @image_location.setter
    def image_location(self, image_location):
        """Sets the image_location of this IotModuleSettings.


        :param image_location: The image_location of this IotModuleSettings.
        :type image_location: str
        """

        self._image_location = image_location

    @property
    def module_name(self):
        """Gets the module_name of this IotModuleSettings.


        :return: The module_name of this IotModuleSettings.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this IotModuleSettings.


        :param module_name: The module_name of this IotModuleSettings.
        :type module_name: str
        """

        self._module_name = module_name

    @property
    def properties_desired(self):
        """Gets the properties_desired of this IotModuleSettings.


        :return: The properties_desired of this IotModuleSettings.
        :rtype: Dict[str, str]
        """
        return self._properties_desired

    @properties_desired.setter
    def properties_desired(self, properties_desired):
        """Sets the properties_desired of this IotModuleSettings.


        :param properties_desired: The properties_desired of this IotModuleSettings.
        :type properties_desired: Dict[str, str]
        """

        self._properties_desired = properties_desired
