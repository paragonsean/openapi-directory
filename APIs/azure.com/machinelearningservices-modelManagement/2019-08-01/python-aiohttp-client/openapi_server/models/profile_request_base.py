# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileRequestBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, input_data: str=None, kv_tags: Dict[str, str]=None, name: str=None, properties: Dict[str, str]=None):
        """ProfileRequestBase - a model defined in OpenAPI

        :param description: The description of this ProfileRequestBase.
        :param input_data: The input_data of this ProfileRequestBase.
        :param kv_tags: The kv_tags of this ProfileRequestBase.
        :param name: The name of this ProfileRequestBase.
        :param properties: The properties of this ProfileRequestBase.
        """
        self.openapi_types = {
            'description': str,
            'input_data': str,
            'kv_tags': Dict[str, str],
            'name': str,
            'properties': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'description',
            'input_data': 'inputData',
            'kv_tags': 'kvTags',
            'name': 'name',
            'properties': 'properties'
        }

        self._description = description
        self._input_data = input_data
        self._kv_tags = kv_tags
        self._name = name
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileRequestBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileRequestBase of this ProfileRequestBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ProfileRequestBase.

        The profile description.

        :return: The description of this ProfileRequestBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProfileRequestBase.

        The profile description.

        :param description: The description of this ProfileRequestBase.
        :type description: str
        """

        self._description = description

    @property
    def input_data(self):
        """Gets the input_data of this ProfileRequestBase.

        The profile input data.

        :return: The input_data of this ProfileRequestBase.
        :rtype: str
        """
        return self._input_data

    @input_data.setter
    def input_data(self, input_data):
        """Sets the input_data of this ProfileRequestBase.

        The profile input data.

        :param input_data: The input_data of this ProfileRequestBase.
        :type input_data: str
        """

        self._input_data = input_data

    @property
    def kv_tags(self):
        """Gets the kv_tags of this ProfileRequestBase.

        The tags dictionary.

        :return: The kv_tags of this ProfileRequestBase.
        :rtype: Dict[str, str]
        """
        return self._kv_tags

    @kv_tags.setter
    def kv_tags(self, kv_tags):
        """Sets the kv_tags of this ProfileRequestBase.

        The tags dictionary.

        :param kv_tags: The kv_tags of this ProfileRequestBase.
        :type kv_tags: Dict[str, str]
        """

        self._kv_tags = kv_tags

    @property
    def name(self):
        """Gets the name of this ProfileRequestBase.

        The profile name.

        :return: The name of this ProfileRequestBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProfileRequestBase.

        The profile name.

        :param name: The name of this ProfileRequestBase.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this ProfileRequestBase.

        The properties dictionary.

        :return: The properties of this ProfileRequestBase.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ProfileRequestBase.

        The properties dictionary.

        :param properties: The properties of this ProfileRequestBase.
        :type properties: Dict[str, str]
        """

        self._properties = properties
