# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_keys import AuthKeys
from openapi_server.models.create_service_request import CreateServiceRequest
from openapi_server.models.environment_image_request import EnvironmentImageRequest
from openapi_server import util


class CreateEndpointVariantRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_type: str=None, deployment_type: str=None, description: str=None, environment_image_request: EnvironmentImageRequest=None, image_id: str=None, keys: AuthKeys=None, kv_tags: Dict[str, str]=None, location: str=None, name: str=None, properties: Dict[str, str]=None, is_default: bool=None, traffic_percentile: float=None, type: str=None):
        """CreateEndpointVariantRequest - a model defined in OpenAPI

        :param compute_type: The compute_type of this CreateEndpointVariantRequest.
        :param deployment_type: The deployment_type of this CreateEndpointVariantRequest.
        :param description: The description of this CreateEndpointVariantRequest.
        :param environment_image_request: The environment_image_request of this CreateEndpointVariantRequest.
        :param image_id: The image_id of this CreateEndpointVariantRequest.
        :param keys: The keys of this CreateEndpointVariantRequest.
        :param kv_tags: The kv_tags of this CreateEndpointVariantRequest.
        :param location: The location of this CreateEndpointVariantRequest.
        :param name: The name of this CreateEndpointVariantRequest.
        :param properties: The properties of this CreateEndpointVariantRequest.
        :param is_default: The is_default of this CreateEndpointVariantRequest.
        :param traffic_percentile: The traffic_percentile of this CreateEndpointVariantRequest.
        :param type: The type of this CreateEndpointVariantRequest.
        """
        self.openapi_types = {
            'compute_type': str,
            'deployment_type': str,
            'description': str,
            'environment_image_request': EnvironmentImageRequest,
            'image_id': str,
            'keys': AuthKeys,
            'kv_tags': Dict[str, str],
            'location': str,
            'name': str,
            'properties': Dict[str, str],
            'is_default': bool,
            'traffic_percentile': float,
            'type': str
        }

        self.attribute_map = {
            'compute_type': 'computeType',
            'deployment_type': 'deploymentType',
            'description': 'description',
            'environment_image_request': 'environmentImageRequest',
            'image_id': 'imageId',
            'keys': 'keys',
            'kv_tags': 'kvTags',
            'location': 'location',
            'name': 'name',
            'properties': 'properties',
            'is_default': 'isDefault',
            'traffic_percentile': 'trafficPercentile',
            'type': 'type'
        }

        self._compute_type = compute_type
        self._deployment_type = deployment_type
        self._description = description
        self._environment_image_request = environment_image_request
        self._image_id = image_id
        self._keys = keys
        self._kv_tags = kv_tags
        self._location = location
        self._name = name
        self._properties = properties
        self._is_default = is_default
        self._traffic_percentile = traffic_percentile
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEndpointVariantRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEndpointVariantRequest of this CreateEndpointVariantRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_type(self):
        """Gets the compute_type of this CreateEndpointVariantRequest.

        The compute environment type for the service.

        :return: The compute_type of this CreateEndpointVariantRequest.
        :rtype: str
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this CreateEndpointVariantRequest.

        The compute environment type for the service.

        :param compute_type: The compute_type of this CreateEndpointVariantRequest.
        :type compute_type: str
        """
        allowed_values = ["ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT", "UNKNOWN"]  # noqa: E501
        if compute_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compute_type` ({0}), must be one of {1}"
                .format(compute_type, allowed_values)
            )

        self._compute_type = compute_type

    @property
    def deployment_type(self):
        """Gets the deployment_type of this CreateEndpointVariantRequest.

        The deployment type for the service.

        :return: The deployment_type of this CreateEndpointVariantRequest.
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this CreateEndpointVariantRequest.

        The deployment type for the service.

        :param deployment_type: The deployment_type of this CreateEndpointVariantRequest.
        :type deployment_type: str
        """
        allowed_values = ["GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch"]  # noqa: E501
        if deployment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    @property
    def description(self):
        """Gets the description of this CreateEndpointVariantRequest.

        The description of the service.

        :return: The description of this CreateEndpointVariantRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEndpointVariantRequest.

        The description of the service.

        :param description: The description of this CreateEndpointVariantRequest.
        :type description: str
        """

        self._description = description

    @property
    def environment_image_request(self):
        """Gets the environment_image_request of this CreateEndpointVariantRequest.


        :return: The environment_image_request of this CreateEndpointVariantRequest.
        :rtype: EnvironmentImageRequest
        """
        return self._environment_image_request

    @environment_image_request.setter
    def environment_image_request(self, environment_image_request):
        """Sets the environment_image_request of this CreateEndpointVariantRequest.


        :param environment_image_request: The environment_image_request of this CreateEndpointVariantRequest.
        :type environment_image_request: EnvironmentImageRequest
        """

        self._environment_image_request = environment_image_request

    @property
    def image_id(self):
        """Gets the image_id of this CreateEndpointVariantRequest.

        The Image Id.

        :return: The image_id of this CreateEndpointVariantRequest.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this CreateEndpointVariantRequest.

        The Image Id.

        :param image_id: The image_id of this CreateEndpointVariantRequest.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def keys(self):
        """Gets the keys of this CreateEndpointVariantRequest.


        :return: The keys of this CreateEndpointVariantRequest.
        :rtype: AuthKeys
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this CreateEndpointVariantRequest.


        :param keys: The keys of this CreateEndpointVariantRequest.
        :type keys: AuthKeys
        """

        self._keys = keys

    @property
    def kv_tags(self):
        """Gets the kv_tags of this CreateEndpointVariantRequest.

        The service tag dictionary. Tags are mutable.

        :return: The kv_tags of this CreateEndpointVariantRequest.
        :rtype: Dict[str, str]
        """
        return self._kv_tags

    @kv_tags.setter
    def kv_tags(self, kv_tags):
        """Sets the kv_tags of this CreateEndpointVariantRequest.

        The service tag dictionary. Tags are mutable.

        :param kv_tags: The kv_tags of this CreateEndpointVariantRequest.
        :type kv_tags: Dict[str, str]
        """

        self._kv_tags = kv_tags

    @property
    def location(self):
        """Gets the location of this CreateEndpointVariantRequest.

        The location of the service.

        :return: The location of this CreateEndpointVariantRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateEndpointVariantRequest.

        The location of the service.

        :param location: The location of this CreateEndpointVariantRequest.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this CreateEndpointVariantRequest.

        The service name.

        :return: The name of this CreateEndpointVariantRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEndpointVariantRequest.

        The service name.

        :param name: The name of this CreateEndpointVariantRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this CreateEndpointVariantRequest.

        The service properties dictionary. Properties are immutable.

        :return: The properties of this CreateEndpointVariantRequest.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateEndpointVariantRequest.

        The service properties dictionary. Properties are immutable.

        :param properties: The properties of this CreateEndpointVariantRequest.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def is_default(self):
        """Gets the is_default of this CreateEndpointVariantRequest.

        Is this the default variant.

        :return: The is_default of this CreateEndpointVariantRequest.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this CreateEndpointVariantRequest.

        Is this the default variant.

        :param is_default: The is_default of this CreateEndpointVariantRequest.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def traffic_percentile(self):
        """Gets the traffic_percentile of this CreateEndpointVariantRequest.

        The amount of traffic variant receives.

        :return: The traffic_percentile of this CreateEndpointVariantRequest.
        :rtype: float
        """
        return self._traffic_percentile

    @traffic_percentile.setter
    def traffic_percentile(self, traffic_percentile):
        """Sets the traffic_percentile of this CreateEndpointVariantRequest.

        The amount of traffic variant receives.

        :param traffic_percentile: The traffic_percentile of this CreateEndpointVariantRequest.
        :type traffic_percentile: float
        """

        self._traffic_percentile = traffic_percentile

    @property
    def type(self):
        """Gets the type of this CreateEndpointVariantRequest.

        The type of the variant.

        :return: The type of this CreateEndpointVariantRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateEndpointVariantRequest.

        The type of the variant.

        :param type: The type of this CreateEndpointVariantRequest.
        :type type: str
        """
        allowed_values = ["Control", "Treatment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
