# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expiry_on: int=None, refresh_after: int=None, token_type: str=None):
        """AuthToken - a model defined in OpenAPI

        :param access_token: The access_token of this AuthToken.
        :param expiry_on: The expiry_on of this AuthToken.
        :param refresh_after: The refresh_after of this AuthToken.
        :param token_type: The token_type of this AuthToken.
        """
        self.openapi_types = {
            'access_token': str,
            'expiry_on': int,
            'refresh_after': int,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'expiry_on': 'expiryOn',
            'refresh_after': 'refreshAfter',
            'token_type': 'tokenType'
        }

        self._access_token = access_token
        self._expiry_on = expiry_on
        self._refresh_after = refresh_after
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthToken of this AuthToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AuthToken.

        Access token.

        :return: The access_token of this AuthToken.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AuthToken.

        Access token.

        :param access_token: The access_token of this AuthToken.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def expiry_on(self):
        """Gets the expiry_on of this AuthToken.

        Access token expiry time (UTC).

        :return: The expiry_on of this AuthToken.
        :rtype: int
        """
        return self._expiry_on

    @expiry_on.setter
    def expiry_on(self, expiry_on):
        """Sets the expiry_on of this AuthToken.

        Access token expiry time (UTC).

        :param expiry_on: The expiry_on of this AuthToken.
        :type expiry_on: int
        """

        self._expiry_on = expiry_on

    @property
    def refresh_after(self):
        """Gets the refresh_after of this AuthToken.

        Refresh access token after time (UTC).

        :return: The refresh_after of this AuthToken.
        :rtype: int
        """
        return self._refresh_after

    @refresh_after.setter
    def refresh_after(self, refresh_after):
        """Sets the refresh_after of this AuthToken.

        Refresh access token after time (UTC).

        :param refresh_after: The refresh_after of this AuthToken.
        :type refresh_after: int
        """

        self._refresh_after = refresh_after

    @property
    def token_type(self):
        """Gets the token_type of this AuthToken.

        Access token type.

        :return: The token_type of this AuthToken.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AuthToken.

        Access token type.

        :param token_type: The token_type of this AuthToken.
        :type token_type: str
        """

        self._token_type = token_type
