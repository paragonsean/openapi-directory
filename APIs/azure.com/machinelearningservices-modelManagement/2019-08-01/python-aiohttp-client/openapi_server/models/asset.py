# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_details import ArtifactDetails
from openapi_server import util


class Asset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts: List[ArtifactDetails]=None, created_time: datetime=None, description: str=None, id: str=None, kv_tags: Dict[str, str]=None, meta: Dict[str, str]=None, name: str=None, properties: Dict[str, str]=None, runid: str=None):
        """Asset - a model defined in OpenAPI

        :param artifacts: The artifacts of this Asset.
        :param created_time: The created_time of this Asset.
        :param description: The description of this Asset.
        :param id: The id of this Asset.
        :param kv_tags: The kv_tags of this Asset.
        :param meta: The meta of this Asset.
        :param name: The name of this Asset.
        :param properties: The properties of this Asset.
        :param runid: The runid of this Asset.
        """
        self.openapi_types = {
            'artifacts': List[ArtifactDetails],
            'created_time': datetime,
            'description': str,
            'id': str,
            'kv_tags': Dict[str, str],
            'meta': Dict[str, str],
            'name': str,
            'properties': Dict[str, str],
            'runid': str
        }

        self.attribute_map = {
            'artifacts': 'artifacts',
            'created_time': 'createdTime',
            'description': 'description',
            'id': 'id',
            'kv_tags': 'kvTags',
            'meta': 'meta',
            'name': 'name',
            'properties': 'properties',
            'runid': 'runid'
        }

        self._artifacts = artifacts
        self._created_time = created_time
        self._description = description
        self._id = id
        self._kv_tags = kv_tags
        self._meta = meta
        self._name = name
        self._properties = properties
        self._runid = runid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset of this Asset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts(self):
        """Gets the artifacts of this Asset.

        A list of child artifacts.

        :return: The artifacts of this Asset.
        :rtype: List[ArtifactDetails]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this Asset.

        A list of child artifacts.

        :param artifacts: The artifacts of this Asset.
        :type artifacts: List[ArtifactDetails]
        """

        self._artifacts = artifacts

    @property
    def created_time(self):
        """Gets the created_time of this Asset.

        The time the Asset was created in UTC.

        :return: The created_time of this Asset.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Asset.

        The time the Asset was created in UTC.

        :param created_time: The created_time of this Asset.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Asset.

        The Asset description.

        :return: The description of this Asset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Asset.

        The Asset description.

        :param description: The description of this Asset.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Asset.

        The Asset Id.

        :return: The id of this Asset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.

        The Asset Id.

        :param id: The id of this Asset.
        :type id: str
        """

        self._id = id

    @property
    def kv_tags(self):
        """Gets the kv_tags of this Asset.

        The Asset tag dictionary. Tags are mutable.

        :return: The kv_tags of this Asset.
        :rtype: Dict[str, str]
        """
        return self._kv_tags

    @kv_tags.setter
    def kv_tags(self, kv_tags):
        """Sets the kv_tags of this Asset.

        The Asset tag dictionary. Tags are mutable.

        :param kv_tags: The kv_tags of this Asset.
        :type kv_tags: Dict[str, str]
        """

        self._kv_tags = kv_tags

    @property
    def meta(self):
        """Gets the meta of this Asset.

        A dictionary containing metadata about the Asset.

        :return: The meta of this Asset.
        :rtype: Dict[str, str]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Asset.

        A dictionary containing metadata about the Asset.

        :param meta: The meta of this Asset.
        :type meta: Dict[str, str]
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this Asset.

        The name of the Asset.

        :return: The name of this Asset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Asset.

        The name of the Asset.

        :param name: The name of this Asset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this Asset.

        The Asset property dictionary. Properties are immutable.

        :return: The properties of this Asset.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Asset.

        The Asset property dictionary. Properties are immutable.

        :param properties: The properties of this Asset.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def runid(self):
        """Gets the runid of this Asset.

        The RunId associated with this Asset.

        :return: The runid of this Asset.
        :rtype: str
        """
        return self._runid

    @runid.setter
    def runid(self, runid):
        """Sets the runid of this Asset.

        The RunId associated with this Asset.

        :param runid: The runid of this Asset.
        :type runid: str
        """

        self._runid = runid
