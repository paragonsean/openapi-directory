# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelPythonSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_conda_environment: str=None, conda_dependencies: object=None, interpreter_path: str=None, user_managed_dependencies: bool=None):
        """ModelPythonSection - a model defined in OpenAPI

        :param base_conda_environment: The base_conda_environment of this ModelPythonSection.
        :param conda_dependencies: The conda_dependencies of this ModelPythonSection.
        :param interpreter_path: The interpreter_path of this ModelPythonSection.
        :param user_managed_dependencies: The user_managed_dependencies of this ModelPythonSection.
        """
        self.openapi_types = {
            'base_conda_environment': str,
            'conda_dependencies': object,
            'interpreter_path': str,
            'user_managed_dependencies': bool
        }

        self.attribute_map = {
            'base_conda_environment': 'baseCondaEnvironment',
            'conda_dependencies': 'condaDependencies',
            'interpreter_path': 'interpreterPath',
            'user_managed_dependencies': 'userManagedDependencies'
        }

        self._base_conda_environment = base_conda_environment
        self._conda_dependencies = conda_dependencies
        self._interpreter_path = interpreter_path
        self._user_managed_dependencies = user_managed_dependencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelPythonSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelPythonSection of this ModelPythonSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_conda_environment(self):
        """Gets the base_conda_environment of this ModelPythonSection.


        :return: The base_conda_environment of this ModelPythonSection.
        :rtype: str
        """
        return self._base_conda_environment

    @base_conda_environment.setter
    def base_conda_environment(self, base_conda_environment):
        """Sets the base_conda_environment of this ModelPythonSection.


        :param base_conda_environment: The base_conda_environment of this ModelPythonSection.
        :type base_conda_environment: str
        """

        self._base_conda_environment = base_conda_environment

    @property
    def conda_dependencies(self):
        """Gets the conda_dependencies of this ModelPythonSection.


        :return: The conda_dependencies of this ModelPythonSection.
        :rtype: object
        """
        return self._conda_dependencies

    @conda_dependencies.setter
    def conda_dependencies(self, conda_dependencies):
        """Sets the conda_dependencies of this ModelPythonSection.


        :param conda_dependencies: The conda_dependencies of this ModelPythonSection.
        :type conda_dependencies: object
        """

        self._conda_dependencies = conda_dependencies

    @property
    def interpreter_path(self):
        """Gets the interpreter_path of this ModelPythonSection.

        The python interpreter path. This is only used when user_managed_dependencies=True.

        :return: The interpreter_path of this ModelPythonSection.
        :rtype: str
        """
        return self._interpreter_path

    @interpreter_path.setter
    def interpreter_path(self, interpreter_path):
        """Sets the interpreter_path of this ModelPythonSection.

        The python interpreter path. This is only used when user_managed_dependencies=True.

        :param interpreter_path: The interpreter_path of this ModelPythonSection.
        :type interpreter_path: str
        """

        self._interpreter_path = interpreter_path

    @property
    def user_managed_dependencies(self):
        """Gets the user_managed_dependencies of this ModelPythonSection.

        True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.

        :return: The user_managed_dependencies of this ModelPythonSection.
        :rtype: bool
        """
        return self._user_managed_dependencies

    @user_managed_dependencies.setter
    def user_managed_dependencies(self, user_managed_dependencies):
        """Sets the user_managed_dependencies of this ModelPythonSection.

        True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.

        :param user_managed_dependencies: The user_managed_dependencies of this ModelPythonSection.
        :type user_managed_dependencies: bool
        """

        self._user_managed_dependencies = user_managed_dependencies
