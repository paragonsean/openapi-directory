# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelDataCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_hub_enabled: bool=None, storage_enabled: bool=None):
        """ModelDataCollection - a model defined in OpenAPI

        :param event_hub_enabled: The event_hub_enabled of this ModelDataCollection.
        :param storage_enabled: The storage_enabled of this ModelDataCollection.
        """
        self.openapi_types = {
            'event_hub_enabled': bool,
            'storage_enabled': bool
        }

        self.attribute_map = {
            'event_hub_enabled': 'eventHubEnabled',
            'storage_enabled': 'storageEnabled'
        }

        self._event_hub_enabled = event_hub_enabled
        self._storage_enabled = storage_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelDataCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelDataCollection of this ModelDataCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_hub_enabled(self):
        """Gets the event_hub_enabled of this ModelDataCollection.

        Option for enabling/disabling Event Hub.

        :return: The event_hub_enabled of this ModelDataCollection.
        :rtype: bool
        """
        return self._event_hub_enabled

    @event_hub_enabled.setter
    def event_hub_enabled(self, event_hub_enabled):
        """Sets the event_hub_enabled of this ModelDataCollection.

        Option for enabling/disabling Event Hub.

        :param event_hub_enabled: The event_hub_enabled of this ModelDataCollection.
        :type event_hub_enabled: bool
        """

        self._event_hub_enabled = event_hub_enabled

    @property
    def storage_enabled(self):
        """Gets the storage_enabled of this ModelDataCollection.

        Option for enabling/disabling storage.

        :return: The storage_enabled of this ModelDataCollection.
        :rtype: bool
        """
        return self._storage_enabled

    @storage_enabled.setter
    def storage_enabled(self, storage_enabled):
        """Sets the storage_enabled of this ModelDataCollection.

        Option for enabling/disabling storage.

        :param storage_enabled: The storage_enabled of this ModelDataCollection.
        :type storage_enabled: bool
        """

        self._storage_enabled = storage_enabled
