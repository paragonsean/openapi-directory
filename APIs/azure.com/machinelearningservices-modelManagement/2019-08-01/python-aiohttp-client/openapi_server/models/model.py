# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset_reference import DatasetReference
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, datasets: List[DatasetReference]=None, description: str=None, experiment_name: str=None, framework: str=None, framework_version: str=None, id: str=None, kv_tags: Dict[str, str]=None, mime_type: str=None, modified_time: datetime=None, name: str=None, parent_model_id: str=None, properties: Dict[str, str]=None, run_id: str=None, unpack: bool=None, url: str=None, version: int=None):
        """Model - a model defined in OpenAPI

        :param created_time: The created_time of this Model.
        :param datasets: The datasets of this Model.
        :param description: The description of this Model.
        :param experiment_name: The experiment_name of this Model.
        :param framework: The framework of this Model.
        :param framework_version: The framework_version of this Model.
        :param id: The id of this Model.
        :param kv_tags: The kv_tags of this Model.
        :param mime_type: The mime_type of this Model.
        :param modified_time: The modified_time of this Model.
        :param name: The name of this Model.
        :param parent_model_id: The parent_model_id of this Model.
        :param properties: The properties of this Model.
        :param run_id: The run_id of this Model.
        :param unpack: The unpack of this Model.
        :param url: The url of this Model.
        :param version: The version of this Model.
        """
        self.openapi_types = {
            'created_time': datetime,
            'datasets': List[DatasetReference],
            'description': str,
            'experiment_name': str,
            'framework': str,
            'framework_version': str,
            'id': str,
            'kv_tags': Dict[str, str],
            'mime_type': str,
            'modified_time': datetime,
            'name': str,
            'parent_model_id': str,
            'properties': Dict[str, str],
            'run_id': str,
            'unpack': bool,
            'url': str,
            'version': int
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'datasets': 'datasets',
            'description': 'description',
            'experiment_name': 'experimentName',
            'framework': 'framework',
            'framework_version': 'frameworkVersion',
            'id': 'id',
            'kv_tags': 'kvTags',
            'mime_type': 'mimeType',
            'modified_time': 'modifiedTime',
            'name': 'name',
            'parent_model_id': 'parentModelId',
            'properties': 'properties',
            'run_id': 'runId',
            'unpack': 'unpack',
            'url': 'url',
            'version': 'version'
        }

        self._created_time = created_time
        self._datasets = datasets
        self._description = description
        self._experiment_name = experiment_name
        self._framework = framework
        self._framework_version = framework_version
        self._id = id
        self._kv_tags = kv_tags
        self._mime_type = mime_type
        self._modified_time = modified_time
        self._name = name
        self._parent_model_id = parent_model_id
        self._properties = properties
        self._run_id = run_id
        self._unpack = unpack
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model of this Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this Model.

        The Model creation time (UTC).

        :return: The created_time of this Model.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Model.

        The Model creation time (UTC).

        :param created_time: The created_time of this Model.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def datasets(self):
        """Gets the datasets of this Model.

        The list of datasets associated with the model.

        :return: The datasets of this Model.
        :rtype: List[DatasetReference]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this Model.

        The list of datasets associated with the model.

        :param datasets: The datasets of this Model.
        :type datasets: List[DatasetReference]
        """

        self._datasets = datasets

    @property
    def description(self):
        """Gets the description of this Model.

        The Model description text.

        :return: The description of this Model.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Model.

        The Model description text.

        :param description: The description of this Model.
        :type description: str
        """

        self._description = description

    @property
    def experiment_name(self):
        """Gets the experiment_name of this Model.

        The name of the experiment where this model was created.

        :return: The experiment_name of this Model.
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """Sets the experiment_name of this Model.

        The name of the experiment where this model was created.

        :param experiment_name: The experiment_name of this Model.
        :type experiment_name: str
        """

        self._experiment_name = experiment_name

    @property
    def framework(self):
        """Gets the framework of this Model.

        The Model framework.

        :return: The framework of this Model.
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this Model.

        The Model framework.

        :param framework: The framework of this Model.
        :type framework: str
        """

        self._framework = framework

    @property
    def framework_version(self):
        """Gets the framework_version of this Model.

        The Model framework version.

        :return: The framework_version of this Model.
        :rtype: str
        """
        return self._framework_version

    @framework_version.setter
    def framework_version(self, framework_version):
        """Sets the framework_version of this Model.

        The Model framework version.

        :param framework_version: The framework_version of this Model.
        :type framework_version: str
        """

        self._framework_version = framework_version

    @property
    def id(self):
        """Gets the id of this Model.

        The Model Id.

        :return: The id of this Model.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Model.

        The Model Id.

        :param id: The id of this Model.
        :type id: str
        """

        self._id = id

    @property
    def kv_tags(self):
        """Gets the kv_tags of this Model.

        The Model tag dictionary. Items are mutable.

        :return: The kv_tags of this Model.
        :rtype: Dict[str, str]
        """
        return self._kv_tags

    @kv_tags.setter
    def kv_tags(self, kv_tags):
        """Sets the kv_tags of this Model.

        The Model tag dictionary. Items are mutable.

        :param kv_tags: The kv_tags of this Model.
        :type kv_tags: Dict[str, str]
        """

        self._kv_tags = kv_tags

    @property
    def mime_type(self):
        """Gets the mime_type of this Model.

        The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml

        :return: The mime_type of this Model.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Model.

        The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml

        :param mime_type: The mime_type of this Model.
        :type mime_type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")

        self._mime_type = mime_type

    @property
    def modified_time(self):
        """Gets the modified_time of this Model.

        The Model last modified time (UTC).

        :return: The modified_time of this Model.
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Model.

        The Model last modified time (UTC).

        :param modified_time: The modified_time of this Model.
        :type modified_time: datetime
        """

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this Model.

        The Model name.

        :return: The name of this Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Model.

        The Model name.

        :param name: The name of this Model.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_model_id(self):
        """Gets the parent_model_id of this Model.

        The Parent Model Id.

        :return: The parent_model_id of this Model.
        :rtype: str
        """
        return self._parent_model_id

    @parent_model_id.setter
    def parent_model_id(self, parent_model_id):
        """Sets the parent_model_id of this Model.

        The Parent Model Id.

        :param parent_model_id: The parent_model_id of this Model.
        :type parent_model_id: str
        """

        self._parent_model_id = parent_model_id

    @property
    def properties(self):
        """Gets the properties of this Model.

        The Model property dictionary. Properties are immutable.

        :return: The properties of this Model.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Model.

        The Model property dictionary. Properties are immutable.

        :param properties: The properties of this Model.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def run_id(self):
        """Gets the run_id of this Model.

        The RunId that created this model.

        :return: The run_id of this Model.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this Model.

        The RunId that created this model.

        :param run_id: The run_id of this Model.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def unpack(self):
        """Gets the unpack of this Model.

        Indicates whether we need to unpack the Model during docker Image creation.

        :return: The unpack of this Model.
        :rtype: bool
        """
        return self._unpack

    @unpack.setter
    def unpack(self, unpack):
        """Sets the unpack of this Model.

        Indicates whether we need to unpack the Model during docker Image creation.

        :param unpack: The unpack of this Model.
        :type unpack: bool
        """

        self._unpack = unpack

    @property
    def url(self):
        """Gets the url of this Model.

        The URL of the Model. Usually a SAS URL.

        :return: The url of this Model.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Model.

        The URL of the Model. Usually a SAS URL.

        :param url: The url of this Model.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this Model.

        The Model version assigned by Model Management Service.

        :return: The version of this Model.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Model.

        The Model version assigned by Model Management Service.

        :param version: The version of this Model.
        :type version: int
        """

        self._version = version
