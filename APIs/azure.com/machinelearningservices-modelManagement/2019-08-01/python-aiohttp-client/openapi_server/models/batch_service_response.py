# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_data_collection import ModelDataCollection
from openapi_server.models.model_error_response import ModelErrorResponse
from openapi_server.models.service_response_base import ServiceResponseBase
from openapi_server import util


class BatchServiceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_type: str=None, created_time: datetime=None, deployment_type: str=None, description: str=None, error: ModelErrorResponse=None, id: str=None, kv_tags: Dict[str, str]=None, name: str=None, operation_id: str=None, properties: Dict[str, str]=None, state: str=None, updated_time: datetime=None, app_insights_enabled: bool=None, compute_name: str=None, entry_script: str=None, environment_name: str=None, environment_version: str=None, error_threshold: float=None, input_format: str=None, mini_batch_size: int=None, model_data_collection: ModelDataCollection=None, model_ids: List[str]=None, node_count: int=None, output_action: str=None, process_count_per_node: int=None, scoring_uri: str=None):
        """BatchServiceResponse - a model defined in OpenAPI

        :param compute_type: The compute_type of this BatchServiceResponse.
        :param created_time: The created_time of this BatchServiceResponse.
        :param deployment_type: The deployment_type of this BatchServiceResponse.
        :param description: The description of this BatchServiceResponse.
        :param error: The error of this BatchServiceResponse.
        :param id: The id of this BatchServiceResponse.
        :param kv_tags: The kv_tags of this BatchServiceResponse.
        :param name: The name of this BatchServiceResponse.
        :param operation_id: The operation_id of this BatchServiceResponse.
        :param properties: The properties of this BatchServiceResponse.
        :param state: The state of this BatchServiceResponse.
        :param updated_time: The updated_time of this BatchServiceResponse.
        :param app_insights_enabled: The app_insights_enabled of this BatchServiceResponse.
        :param compute_name: The compute_name of this BatchServiceResponse.
        :param entry_script: The entry_script of this BatchServiceResponse.
        :param environment_name: The environment_name of this BatchServiceResponse.
        :param environment_version: The environment_version of this BatchServiceResponse.
        :param error_threshold: The error_threshold of this BatchServiceResponse.
        :param input_format: The input_format of this BatchServiceResponse.
        :param mini_batch_size: The mini_batch_size of this BatchServiceResponse.
        :param model_data_collection: The model_data_collection of this BatchServiceResponse.
        :param model_ids: The model_ids of this BatchServiceResponse.
        :param node_count: The node_count of this BatchServiceResponse.
        :param output_action: The output_action of this BatchServiceResponse.
        :param process_count_per_node: The process_count_per_node of this BatchServiceResponse.
        :param scoring_uri: The scoring_uri of this BatchServiceResponse.
        """
        self.openapi_types = {
            'compute_type': str,
            'created_time': datetime,
            'deployment_type': str,
            'description': str,
            'error': ModelErrorResponse,
            'id': str,
            'kv_tags': Dict[str, str],
            'name': str,
            'operation_id': str,
            'properties': Dict[str, str],
            'state': str,
            'updated_time': datetime,
            'app_insights_enabled': bool,
            'compute_name': str,
            'entry_script': str,
            'environment_name': str,
            'environment_version': str,
            'error_threshold': float,
            'input_format': str,
            'mini_batch_size': int,
            'model_data_collection': ModelDataCollection,
            'model_ids': List[str],
            'node_count': int,
            'output_action': str,
            'process_count_per_node': int,
            'scoring_uri': str
        }

        self.attribute_map = {
            'compute_type': 'computeType',
            'created_time': 'createdTime',
            'deployment_type': 'deploymentType',
            'description': 'description',
            'error': 'error',
            'id': 'id',
            'kv_tags': 'kvTags',
            'name': 'name',
            'operation_id': 'operationId',
            'properties': 'properties',
            'state': 'state',
            'updated_time': 'updatedTime',
            'app_insights_enabled': 'appInsightsEnabled',
            'compute_name': 'computeName',
            'entry_script': 'entryScript',
            'environment_name': 'environmentName',
            'environment_version': 'environmentVersion',
            'error_threshold': 'errorThreshold',
            'input_format': 'inputFormat',
            'mini_batch_size': 'miniBatchSize',
            'model_data_collection': 'modelDataCollection',
            'model_ids': 'modelIds',
            'node_count': 'nodeCount',
            'output_action': 'outputAction',
            'process_count_per_node': 'processCountPerNode',
            'scoring_uri': 'scoringUri'
        }

        self._compute_type = compute_type
        self._created_time = created_time
        self._deployment_type = deployment_type
        self._description = description
        self._error = error
        self._id = id
        self._kv_tags = kv_tags
        self._name = name
        self._operation_id = operation_id
        self._properties = properties
        self._state = state
        self._updated_time = updated_time
        self._app_insights_enabled = app_insights_enabled
        self._compute_name = compute_name
        self._entry_script = entry_script
        self._environment_name = environment_name
        self._environment_version = environment_version
        self._error_threshold = error_threshold
        self._input_format = input_format
        self._mini_batch_size = mini_batch_size
        self._model_data_collection = model_data_collection
        self._model_ids = model_ids
        self._node_count = node_count
        self._output_action = output_action
        self._process_count_per_node = process_count_per_node
        self._scoring_uri = scoring_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchServiceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchServiceResponse of this BatchServiceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_type(self):
        """Gets the compute_type of this BatchServiceResponse.

        The compute environment type for the service.

        :return: The compute_type of this BatchServiceResponse.
        :rtype: str
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this BatchServiceResponse.

        The compute environment type for the service.

        :param compute_type: The compute_type of this BatchServiceResponse.
        :type compute_type: str
        """
        allowed_values = ["ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT", "UNKNOWN"]  # noqa: E501
        if compute_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compute_type` ({0}), must be one of {1}"
                .format(compute_type, allowed_values)
            )

        self._compute_type = compute_type

    @property
    def created_time(self):
        """Gets the created_time of this BatchServiceResponse.

        The time the service was created.

        :return: The created_time of this BatchServiceResponse.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this BatchServiceResponse.

        The time the service was created.

        :param created_time: The created_time of this BatchServiceResponse.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def deployment_type(self):
        """Gets the deployment_type of this BatchServiceResponse.

        The deployment type for the service.

        :return: The deployment_type of this BatchServiceResponse.
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this BatchServiceResponse.

        The deployment type for the service.

        :param deployment_type: The deployment_type of this BatchServiceResponse.
        :type deployment_type: str
        """
        allowed_values = ["GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch"]  # noqa: E501
        if deployment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    @property
    def description(self):
        """Gets the description of this BatchServiceResponse.

        The service description.

        :return: The description of this BatchServiceResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BatchServiceResponse.

        The service description.

        :param description: The description of this BatchServiceResponse.
        :type description: str
        """

        self._description = description

    @property
    def error(self):
        """Gets the error of this BatchServiceResponse.


        :return: The error of this BatchServiceResponse.
        :rtype: ModelErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BatchServiceResponse.


        :param error: The error of this BatchServiceResponse.
        :type error: ModelErrorResponse
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this BatchServiceResponse.

        The service Id.

        :return: The id of this BatchServiceResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BatchServiceResponse.

        The service Id.

        :param id: The id of this BatchServiceResponse.
        :type id: str
        """

        self._id = id

    @property
    def kv_tags(self):
        """Gets the kv_tags of this BatchServiceResponse.

        The service tag dictionary. Tags are mutable.

        :return: The kv_tags of this BatchServiceResponse.
        :rtype: Dict[str, str]
        """
        return self._kv_tags

    @kv_tags.setter
    def kv_tags(self, kv_tags):
        """Sets the kv_tags of this BatchServiceResponse.

        The service tag dictionary. Tags are mutable.

        :param kv_tags: The kv_tags of this BatchServiceResponse.
        :type kv_tags: Dict[str, str]
        """

        self._kv_tags = kv_tags

    @property
    def name(self):
        """Gets the name of this BatchServiceResponse.

        The service name.

        :return: The name of this BatchServiceResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BatchServiceResponse.

        The service name.

        :param name: The name of this BatchServiceResponse.
        :type name: str
        """

        self._name = name

    @property
    def operation_id(self):
        """Gets the operation_id of this BatchServiceResponse.

        The ID of the latest asynchronous operation for this service.

        :return: The operation_id of this BatchServiceResponse.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this BatchServiceResponse.

        The ID of the latest asynchronous operation for this service.

        :param operation_id: The operation_id of this BatchServiceResponse.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def properties(self):
        """Gets the properties of this BatchServiceResponse.

        The service property dictionary. Properties are immutable.

        :return: The properties of this BatchServiceResponse.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BatchServiceResponse.

        The service property dictionary. Properties are immutable.

        :param properties: The properties of this BatchServiceResponse.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def state(self):
        """Gets the state of this BatchServiceResponse.

        The current state of the service.

        :return: The state of this BatchServiceResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BatchServiceResponse.

        The current state of the service.

        :param state: The state of this BatchServiceResponse.
        :type state: str
        """
        allowed_values = ["Transitioning", "Healthy", "Unhealthy", "Failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated_time(self):
        """Gets the updated_time of this BatchServiceResponse.

        The time the service was updated.

        :return: The updated_time of this BatchServiceResponse.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this BatchServiceResponse.

        The time the service was updated.

        :param updated_time: The updated_time of this BatchServiceResponse.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def app_insights_enabled(self):
        """Gets the app_insights_enabled of this BatchServiceResponse.


        :return: The app_insights_enabled of this BatchServiceResponse.
        :rtype: bool
        """
        return self._app_insights_enabled

    @app_insights_enabled.setter
    def app_insights_enabled(self, app_insights_enabled):
        """Sets the app_insights_enabled of this BatchServiceResponse.


        :param app_insights_enabled: The app_insights_enabled of this BatchServiceResponse.
        :type app_insights_enabled: bool
        """

        self._app_insights_enabled = app_insights_enabled

    @property
    def compute_name(self):
        """Gets the compute_name of this BatchServiceResponse.


        :return: The compute_name of this BatchServiceResponse.
        :rtype: str
        """
        return self._compute_name

    @compute_name.setter
    def compute_name(self, compute_name):
        """Sets the compute_name of this BatchServiceResponse.


        :param compute_name: The compute_name of this BatchServiceResponse.
        :type compute_name: str
        """

        self._compute_name = compute_name

    @property
    def entry_script(self):
        """Gets the entry_script of this BatchServiceResponse.


        :return: The entry_script of this BatchServiceResponse.
        :rtype: str
        """
        return self._entry_script

    @entry_script.setter
    def entry_script(self, entry_script):
        """Sets the entry_script of this BatchServiceResponse.


        :param entry_script: The entry_script of this BatchServiceResponse.
        :type entry_script: str
        """

        self._entry_script = entry_script

    @property
    def environment_name(self):
        """Gets the environment_name of this BatchServiceResponse.


        :return: The environment_name of this BatchServiceResponse.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this BatchServiceResponse.


        :param environment_name: The environment_name of this BatchServiceResponse.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def environment_version(self):
        """Gets the environment_version of this BatchServiceResponse.


        :return: The environment_version of this BatchServiceResponse.
        :rtype: str
        """
        return self._environment_version

    @environment_version.setter
    def environment_version(self, environment_version):
        """Sets the environment_version of this BatchServiceResponse.


        :param environment_version: The environment_version of this BatchServiceResponse.
        :type environment_version: str
        """

        self._environment_version = environment_version

    @property
    def error_threshold(self):
        """Gets the error_threshold of this BatchServiceResponse.


        :return: The error_threshold of this BatchServiceResponse.
        :rtype: float
        """
        return self._error_threshold

    @error_threshold.setter
    def error_threshold(self, error_threshold):
        """Sets the error_threshold of this BatchServiceResponse.


        :param error_threshold: The error_threshold of this BatchServiceResponse.
        :type error_threshold: float
        """

        self._error_threshold = error_threshold

    @property
    def input_format(self):
        """Gets the input_format of this BatchServiceResponse.


        :return: The input_format of this BatchServiceResponse.
        :rtype: str
        """
        return self._input_format

    @input_format.setter
    def input_format(self, input_format):
        """Sets the input_format of this BatchServiceResponse.


        :param input_format: The input_format of this BatchServiceResponse.
        :type input_format: str
        """

        self._input_format = input_format

    @property
    def mini_batch_size(self):
        """Gets the mini_batch_size of this BatchServiceResponse.


        :return: The mini_batch_size of this BatchServiceResponse.
        :rtype: int
        """
        return self._mini_batch_size

    @mini_batch_size.setter
    def mini_batch_size(self, mini_batch_size):
        """Sets the mini_batch_size of this BatchServiceResponse.


        :param mini_batch_size: The mini_batch_size of this BatchServiceResponse.
        :type mini_batch_size: int
        """

        self._mini_batch_size = mini_batch_size

    @property
    def model_data_collection(self):
        """Gets the model_data_collection of this BatchServiceResponse.


        :return: The model_data_collection of this BatchServiceResponse.
        :rtype: ModelDataCollection
        """
        return self._model_data_collection

    @model_data_collection.setter
    def model_data_collection(self, model_data_collection):
        """Sets the model_data_collection of this BatchServiceResponse.


        :param model_data_collection: The model_data_collection of this BatchServiceResponse.
        :type model_data_collection: ModelDataCollection
        """

        self._model_data_collection = model_data_collection

    @property
    def model_ids(self):
        """Gets the model_ids of this BatchServiceResponse.


        :return: The model_ids of this BatchServiceResponse.
        :rtype: List[str]
        """
        return self._model_ids

    @model_ids.setter
    def model_ids(self, model_ids):
        """Sets the model_ids of this BatchServiceResponse.


        :param model_ids: The model_ids of this BatchServiceResponse.
        :type model_ids: List[str]
        """

        self._model_ids = model_ids

    @property
    def node_count(self):
        """Gets the node_count of this BatchServiceResponse.


        :return: The node_count of this BatchServiceResponse.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this BatchServiceResponse.


        :param node_count: The node_count of this BatchServiceResponse.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def output_action(self):
        """Gets the output_action of this BatchServiceResponse.


        :return: The output_action of this BatchServiceResponse.
        :rtype: str
        """
        return self._output_action

    @output_action.setter
    def output_action(self, output_action):
        """Sets the output_action of this BatchServiceResponse.


        :param output_action: The output_action of this BatchServiceResponse.
        :type output_action: str
        """

        self._output_action = output_action

    @property
    def process_count_per_node(self):
        """Gets the process_count_per_node of this BatchServiceResponse.


        :return: The process_count_per_node of this BatchServiceResponse.
        :rtype: int
        """
        return self._process_count_per_node

    @process_count_per_node.setter
    def process_count_per_node(self, process_count_per_node):
        """Sets the process_count_per_node of this BatchServiceResponse.


        :param process_count_per_node: The process_count_per_node of this BatchServiceResponse.
        :type process_count_per_node: int
        """

        self._process_count_per_node = process_count_per_node

    @property
    def scoring_uri(self):
        """Gets the scoring_uri of this BatchServiceResponse.


        :return: The scoring_uri of this BatchServiceResponse.
        :rtype: str
        """
        return self._scoring_uri

    @scoring_uri.setter
    def scoring_uri(self, scoring_uri):
        """Sets the scoring_uri of this BatchServiceResponse.


        :param scoring_uri: The scoring_uri of this BatchServiceResponse.
        :type scoring_uri: str
        """

        self._scoring_uri = scoring_uri
