# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_keys import AuthKeys
from openapi_server.models.auto_scaler import AutoScaler
from openapi_server.models.container_resource_requirements import ContainerResourceRequirements
from openapi_server.models.create_endpoint_variant_request import CreateEndpointVariantRequest
from openapi_server.models.environment_image_request import EnvironmentImageRequest
from openapi_server.models.liveness_probe_requirements import LivenessProbeRequirements
from openapi_server.models.model_data_collection import ModelDataCollection
from openapi_server import util


class AKSServiceCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_type: str=None, deployment_type: str=None, description: str=None, environment_image_request: EnvironmentImageRequest=None, image_id: str=None, keys: AuthKeys=None, kv_tags: Dict[str, str]=None, location: str=None, name: str=None, properties: Dict[str, str]=None, is_default: bool=None, traffic_percentile: float=None, type: str=None, aad_auth_enabled: bool=None, app_insights_enabled: bool=None, auth_enabled: bool=None, auto_scaler: AutoScaler=None, compute_name: str=None, container_resource_requirements: ContainerResourceRequirements=None, data_collection: ModelDataCollection=None, liveness_probe_requirements: LivenessProbeRequirements=None, max_concurrent_requests_per_container: int=None, max_queue_wait_ms: int=None, namespace: str=None, num_replicas: int=None, scoring_timeout_ms: int=None):
        """AKSServiceCreateRequest - a model defined in OpenAPI

        :param compute_type: The compute_type of this AKSServiceCreateRequest.
        :param deployment_type: The deployment_type of this AKSServiceCreateRequest.
        :param description: The description of this AKSServiceCreateRequest.
        :param environment_image_request: The environment_image_request of this AKSServiceCreateRequest.
        :param image_id: The image_id of this AKSServiceCreateRequest.
        :param keys: The keys of this AKSServiceCreateRequest.
        :param kv_tags: The kv_tags of this AKSServiceCreateRequest.
        :param location: The location of this AKSServiceCreateRequest.
        :param name: The name of this AKSServiceCreateRequest.
        :param properties: The properties of this AKSServiceCreateRequest.
        :param is_default: The is_default of this AKSServiceCreateRequest.
        :param traffic_percentile: The traffic_percentile of this AKSServiceCreateRequest.
        :param type: The type of this AKSServiceCreateRequest.
        :param aad_auth_enabled: The aad_auth_enabled of this AKSServiceCreateRequest.
        :param app_insights_enabled: The app_insights_enabled of this AKSServiceCreateRequest.
        :param auth_enabled: The auth_enabled of this AKSServiceCreateRequest.
        :param auto_scaler: The auto_scaler of this AKSServiceCreateRequest.
        :param compute_name: The compute_name of this AKSServiceCreateRequest.
        :param container_resource_requirements: The container_resource_requirements of this AKSServiceCreateRequest.
        :param data_collection: The data_collection of this AKSServiceCreateRequest.
        :param liveness_probe_requirements: The liveness_probe_requirements of this AKSServiceCreateRequest.
        :param max_concurrent_requests_per_container: The max_concurrent_requests_per_container of this AKSServiceCreateRequest.
        :param max_queue_wait_ms: The max_queue_wait_ms of this AKSServiceCreateRequest.
        :param namespace: The namespace of this AKSServiceCreateRequest.
        :param num_replicas: The num_replicas of this AKSServiceCreateRequest.
        :param scoring_timeout_ms: The scoring_timeout_ms of this AKSServiceCreateRequest.
        """
        self.openapi_types = {
            'compute_type': str,
            'deployment_type': str,
            'description': str,
            'environment_image_request': EnvironmentImageRequest,
            'image_id': str,
            'keys': AuthKeys,
            'kv_tags': Dict[str, str],
            'location': str,
            'name': str,
            'properties': Dict[str, str],
            'is_default': bool,
            'traffic_percentile': float,
            'type': str,
            'aad_auth_enabled': bool,
            'app_insights_enabled': bool,
            'auth_enabled': bool,
            'auto_scaler': AutoScaler,
            'compute_name': str,
            'container_resource_requirements': ContainerResourceRequirements,
            'data_collection': ModelDataCollection,
            'liveness_probe_requirements': LivenessProbeRequirements,
            'max_concurrent_requests_per_container': int,
            'max_queue_wait_ms': int,
            'namespace': str,
            'num_replicas': int,
            'scoring_timeout_ms': int
        }

        self.attribute_map = {
            'compute_type': 'computeType',
            'deployment_type': 'deploymentType',
            'description': 'description',
            'environment_image_request': 'environmentImageRequest',
            'image_id': 'imageId',
            'keys': 'keys',
            'kv_tags': 'kvTags',
            'location': 'location',
            'name': 'name',
            'properties': 'properties',
            'is_default': 'isDefault',
            'traffic_percentile': 'trafficPercentile',
            'type': 'type',
            'aad_auth_enabled': 'aadAuthEnabled',
            'app_insights_enabled': 'appInsightsEnabled',
            'auth_enabled': 'authEnabled',
            'auto_scaler': 'autoScaler',
            'compute_name': 'computeName',
            'container_resource_requirements': 'containerResourceRequirements',
            'data_collection': 'dataCollection',
            'liveness_probe_requirements': 'livenessProbeRequirements',
            'max_concurrent_requests_per_container': 'maxConcurrentRequestsPerContainer',
            'max_queue_wait_ms': 'maxQueueWaitMs',
            'namespace': 'namespace',
            'num_replicas': 'numReplicas',
            'scoring_timeout_ms': 'scoringTimeoutMs'
        }

        self._compute_type = compute_type
        self._deployment_type = deployment_type
        self._description = description
        self._environment_image_request = environment_image_request
        self._image_id = image_id
        self._keys = keys
        self._kv_tags = kv_tags
        self._location = location
        self._name = name
        self._properties = properties
        self._is_default = is_default
        self._traffic_percentile = traffic_percentile
        self._type = type
        self._aad_auth_enabled = aad_auth_enabled
        self._app_insights_enabled = app_insights_enabled
        self._auth_enabled = auth_enabled
        self._auto_scaler = auto_scaler
        self._compute_name = compute_name
        self._container_resource_requirements = container_resource_requirements
        self._data_collection = data_collection
        self._liveness_probe_requirements = liveness_probe_requirements
        self._max_concurrent_requests_per_container = max_concurrent_requests_per_container
        self._max_queue_wait_ms = max_queue_wait_ms
        self._namespace = namespace
        self._num_replicas = num_replicas
        self._scoring_timeout_ms = scoring_timeout_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AKSServiceCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AKSServiceCreateRequest of this AKSServiceCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_type(self):
        """Gets the compute_type of this AKSServiceCreateRequest.

        The compute environment type for the service.

        :return: The compute_type of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this AKSServiceCreateRequest.

        The compute environment type for the service.

        :param compute_type: The compute_type of this AKSServiceCreateRequest.
        :type compute_type: str
        """
        allowed_values = ["ACI", "AKS", "AMLCOMPUTE", "IOT", "AKSENDPOINT", "UNKNOWN"]  # noqa: E501
        if compute_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compute_type` ({0}), must be one of {1}"
                .format(compute_type, allowed_values)
            )

        self._compute_type = compute_type

    @property
    def deployment_type(self):
        """Gets the deployment_type of this AKSServiceCreateRequest.

        The deployment type for the service.

        :return: The deployment_type of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this AKSServiceCreateRequest.

        The deployment type for the service.

        :param deployment_type: The deployment_type of this AKSServiceCreateRequest.
        :type deployment_type: str
        """
        allowed_values = ["GRPCRealtimeEndpoint", "HttpRealtimeEndpoint", "Batch"]  # noqa: E501
        if deployment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    @property
    def description(self):
        """Gets the description of this AKSServiceCreateRequest.

        The description of the service.

        :return: The description of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AKSServiceCreateRequest.

        The description of the service.

        :param description: The description of this AKSServiceCreateRequest.
        :type description: str
        """

        self._description = description

    @property
    def environment_image_request(self):
        """Gets the environment_image_request of this AKSServiceCreateRequest.


        :return: The environment_image_request of this AKSServiceCreateRequest.
        :rtype: EnvironmentImageRequest
        """
        return self._environment_image_request

    @environment_image_request.setter
    def environment_image_request(self, environment_image_request):
        """Sets the environment_image_request of this AKSServiceCreateRequest.


        :param environment_image_request: The environment_image_request of this AKSServiceCreateRequest.
        :type environment_image_request: EnvironmentImageRequest
        """

        self._environment_image_request = environment_image_request

    @property
    def image_id(self):
        """Gets the image_id of this AKSServiceCreateRequest.

        The Image Id.

        :return: The image_id of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this AKSServiceCreateRequest.

        The Image Id.

        :param image_id: The image_id of this AKSServiceCreateRequest.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def keys(self):
        """Gets the keys of this AKSServiceCreateRequest.


        :return: The keys of this AKSServiceCreateRequest.
        :rtype: AuthKeys
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this AKSServiceCreateRequest.


        :param keys: The keys of this AKSServiceCreateRequest.
        :type keys: AuthKeys
        """

        self._keys = keys

    @property
    def kv_tags(self):
        """Gets the kv_tags of this AKSServiceCreateRequest.

        The service tag dictionary. Tags are mutable.

        :return: The kv_tags of this AKSServiceCreateRequest.
        :rtype: Dict[str, str]
        """
        return self._kv_tags

    @kv_tags.setter
    def kv_tags(self, kv_tags):
        """Sets the kv_tags of this AKSServiceCreateRequest.

        The service tag dictionary. Tags are mutable.

        :param kv_tags: The kv_tags of this AKSServiceCreateRequest.
        :type kv_tags: Dict[str, str]
        """

        self._kv_tags = kv_tags

    @property
    def location(self):
        """Gets the location of this AKSServiceCreateRequest.

        The location of the service.

        :return: The location of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AKSServiceCreateRequest.

        The location of the service.

        :param location: The location of this AKSServiceCreateRequest.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this AKSServiceCreateRequest.

        The service name.

        :return: The name of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AKSServiceCreateRequest.

        The service name.

        :param name: The name of this AKSServiceCreateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this AKSServiceCreateRequest.

        The service properties dictionary. Properties are immutable.

        :return: The properties of this AKSServiceCreateRequest.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AKSServiceCreateRequest.

        The service properties dictionary. Properties are immutable.

        :param properties: The properties of this AKSServiceCreateRequest.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def is_default(self):
        """Gets the is_default of this AKSServiceCreateRequest.

        Is this the default variant.

        :return: The is_default of this AKSServiceCreateRequest.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this AKSServiceCreateRequest.

        Is this the default variant.

        :param is_default: The is_default of this AKSServiceCreateRequest.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def traffic_percentile(self):
        """Gets the traffic_percentile of this AKSServiceCreateRequest.

        The amount of traffic variant receives.

        :return: The traffic_percentile of this AKSServiceCreateRequest.
        :rtype: float
        """
        return self._traffic_percentile

    @traffic_percentile.setter
    def traffic_percentile(self, traffic_percentile):
        """Sets the traffic_percentile of this AKSServiceCreateRequest.

        The amount of traffic variant receives.

        :param traffic_percentile: The traffic_percentile of this AKSServiceCreateRequest.
        :type traffic_percentile: float
        """

        self._traffic_percentile = traffic_percentile

    @property
    def type(self):
        """Gets the type of this AKSServiceCreateRequest.

        The type of the variant.

        :return: The type of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AKSServiceCreateRequest.

        The type of the variant.

        :param type: The type of this AKSServiceCreateRequest.
        :type type: str
        """
        allowed_values = ["Control", "Treatment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def aad_auth_enabled(self):
        """Gets the aad_auth_enabled of this AKSServiceCreateRequest.

        Whether or not AAD authentication is enabled.

        :return: The aad_auth_enabled of this AKSServiceCreateRequest.
        :rtype: bool
        """
        return self._aad_auth_enabled

    @aad_auth_enabled.setter
    def aad_auth_enabled(self, aad_auth_enabled):
        """Sets the aad_auth_enabled of this AKSServiceCreateRequest.

        Whether or not AAD authentication is enabled.

        :param aad_auth_enabled: The aad_auth_enabled of this AKSServiceCreateRequest.
        :type aad_auth_enabled: bool
        """

        self._aad_auth_enabled = aad_auth_enabled

    @property
    def app_insights_enabled(self):
        """Gets the app_insights_enabled of this AKSServiceCreateRequest.

        Whether or not Application Insights is enabled.

        :return: The app_insights_enabled of this AKSServiceCreateRequest.
        :rtype: bool
        """
        return self._app_insights_enabled

    @app_insights_enabled.setter
    def app_insights_enabled(self, app_insights_enabled):
        """Sets the app_insights_enabled of this AKSServiceCreateRequest.

        Whether or not Application Insights is enabled.

        :param app_insights_enabled: The app_insights_enabled of this AKSServiceCreateRequest.
        :type app_insights_enabled: bool
        """

        self._app_insights_enabled = app_insights_enabled

    @property
    def auth_enabled(self):
        """Gets the auth_enabled of this AKSServiceCreateRequest.

        Whether or not authentication is enabled.

        :return: The auth_enabled of this AKSServiceCreateRequest.
        :rtype: bool
        """
        return self._auth_enabled

    @auth_enabled.setter
    def auth_enabled(self, auth_enabled):
        """Sets the auth_enabled of this AKSServiceCreateRequest.

        Whether or not authentication is enabled.

        :param auth_enabled: The auth_enabled of this AKSServiceCreateRequest.
        :type auth_enabled: bool
        """

        self._auth_enabled = auth_enabled

    @property
    def auto_scaler(self):
        """Gets the auto_scaler of this AKSServiceCreateRequest.


        :return: The auto_scaler of this AKSServiceCreateRequest.
        :rtype: AutoScaler
        """
        return self._auto_scaler

    @auto_scaler.setter
    def auto_scaler(self, auto_scaler):
        """Sets the auto_scaler of this AKSServiceCreateRequest.


        :param auto_scaler: The auto_scaler of this AKSServiceCreateRequest.
        :type auto_scaler: AutoScaler
        """

        self._auto_scaler = auto_scaler

    @property
    def compute_name(self):
        """Gets the compute_name of this AKSServiceCreateRequest.

        The name of the compute resource.

        :return: The compute_name of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._compute_name

    @compute_name.setter
    def compute_name(self, compute_name):
        """Sets the compute_name of this AKSServiceCreateRequest.

        The name of the compute resource.

        :param compute_name: The compute_name of this AKSServiceCreateRequest.
        :type compute_name: str
        """

        self._compute_name = compute_name

    @property
    def container_resource_requirements(self):
        """Gets the container_resource_requirements of this AKSServiceCreateRequest.


        :return: The container_resource_requirements of this AKSServiceCreateRequest.
        :rtype: ContainerResourceRequirements
        """
        return self._container_resource_requirements

    @container_resource_requirements.setter
    def container_resource_requirements(self, container_resource_requirements):
        """Sets the container_resource_requirements of this AKSServiceCreateRequest.


        :param container_resource_requirements: The container_resource_requirements of this AKSServiceCreateRequest.
        :type container_resource_requirements: ContainerResourceRequirements
        """

        self._container_resource_requirements = container_resource_requirements

    @property
    def data_collection(self):
        """Gets the data_collection of this AKSServiceCreateRequest.


        :return: The data_collection of this AKSServiceCreateRequest.
        :rtype: ModelDataCollection
        """
        return self._data_collection

    @data_collection.setter
    def data_collection(self, data_collection):
        """Sets the data_collection of this AKSServiceCreateRequest.


        :param data_collection: The data_collection of this AKSServiceCreateRequest.
        :type data_collection: ModelDataCollection
        """

        self._data_collection = data_collection

    @property
    def liveness_probe_requirements(self):
        """Gets the liveness_probe_requirements of this AKSServiceCreateRequest.


        :return: The liveness_probe_requirements of this AKSServiceCreateRequest.
        :rtype: LivenessProbeRequirements
        """
        return self._liveness_probe_requirements

    @liveness_probe_requirements.setter
    def liveness_probe_requirements(self, liveness_probe_requirements):
        """Sets the liveness_probe_requirements of this AKSServiceCreateRequest.


        :param liveness_probe_requirements: The liveness_probe_requirements of this AKSServiceCreateRequest.
        :type liveness_probe_requirements: LivenessProbeRequirements
        """

        self._liveness_probe_requirements = liveness_probe_requirements

    @property
    def max_concurrent_requests_per_container(self):
        """Gets the max_concurrent_requests_per_container of this AKSServiceCreateRequest.

        The maximum number of concurrent requests per container.

        :return: The max_concurrent_requests_per_container of this AKSServiceCreateRequest.
        :rtype: int
        """
        return self._max_concurrent_requests_per_container

    @max_concurrent_requests_per_container.setter
    def max_concurrent_requests_per_container(self, max_concurrent_requests_per_container):
        """Sets the max_concurrent_requests_per_container of this AKSServiceCreateRequest.

        The maximum number of concurrent requests per container.

        :param max_concurrent_requests_per_container: The max_concurrent_requests_per_container of this AKSServiceCreateRequest.
        :type max_concurrent_requests_per_container: int
        """

        self._max_concurrent_requests_per_container = max_concurrent_requests_per_container

    @property
    def max_queue_wait_ms(self):
        """Gets the max_queue_wait_ms of this AKSServiceCreateRequest.

        Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)

        :return: The max_queue_wait_ms of this AKSServiceCreateRequest.
        :rtype: int
        """
        return self._max_queue_wait_ms

    @max_queue_wait_ms.setter
    def max_queue_wait_ms(self, max_queue_wait_ms):
        """Sets the max_queue_wait_ms of this AKSServiceCreateRequest.

        Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)

        :param max_queue_wait_ms: The max_queue_wait_ms of this AKSServiceCreateRequest.
        :type max_queue_wait_ms: int
        """

        self._max_queue_wait_ms = max_queue_wait_ms

    @property
    def namespace(self):
        """Gets the namespace of this AKSServiceCreateRequest.

        Kubernetes namespace for the service.

        :return: The namespace of this AKSServiceCreateRequest.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AKSServiceCreateRequest.

        Kubernetes namespace for the service.

        :param namespace: The namespace of this AKSServiceCreateRequest.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def num_replicas(self):
        """Gets the num_replicas of this AKSServiceCreateRequest.

        The number of replicas on the cluster.

        :return: The num_replicas of this AKSServiceCreateRequest.
        :rtype: int
        """
        return self._num_replicas

    @num_replicas.setter
    def num_replicas(self, num_replicas):
        """Sets the num_replicas of this AKSServiceCreateRequest.

        The number of replicas on the cluster.

        :param num_replicas: The num_replicas of this AKSServiceCreateRequest.
        :type num_replicas: int
        """

        self._num_replicas = num_replicas

    @property
    def scoring_timeout_ms(self):
        """Gets the scoring_timeout_ms of this AKSServiceCreateRequest.

        The scoring timeout in milliseconds.

        :return: The scoring_timeout_ms of this AKSServiceCreateRequest.
        :rtype: int
        """
        return self._scoring_timeout_ms

    @scoring_timeout_ms.setter
    def scoring_timeout_ms(self, scoring_timeout_ms):
        """Sets the scoring_timeout_ms of this AKSServiceCreateRequest.

        The scoring timeout in milliseconds.

        :param scoring_timeout_ms: The scoring_timeout_ms of this AKSServiceCreateRequest.
        :type scoring_timeout_ms: int
        """

        self._scoring_timeout_ms = scoring_timeout_ms
