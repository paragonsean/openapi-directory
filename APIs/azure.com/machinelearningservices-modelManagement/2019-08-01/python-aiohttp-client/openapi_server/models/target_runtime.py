# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetRuntime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, os_type: str=None, properties: Dict[str, str]=None, runtime_type: str=None, target_architecture: str=None):
        """TargetRuntime - a model defined in OpenAPI

        :param os_type: The os_type of this TargetRuntime.
        :param properties: The properties of this TargetRuntime.
        :param runtime_type: The runtime_type of this TargetRuntime.
        :param target_architecture: The target_architecture of this TargetRuntime.
        """
        self.openapi_types = {
            'os_type': str,
            'properties': Dict[str, str],
            'runtime_type': str,
            'target_architecture': str
        }

        self.attribute_map = {
            'os_type': 'osType',
            'properties': 'properties',
            'runtime_type': 'runtimeType',
            'target_architecture': 'targetArchitecture'
        }

        self._os_type = os_type
        self._properties = properties
        self._runtime_type = runtime_type
        self._target_architecture = target_architecture

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetRuntime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetRuntime of this TargetRuntime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os_type(self):
        """Gets the os_type of this TargetRuntime.

        The target operating system.

        :return: The os_type of this TargetRuntime.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this TargetRuntime.

        The target operating system.

        :param os_type: The os_type of this TargetRuntime.
        :type os_type: str
        """
        allowed_values = ["Linux", "Windows"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def properties(self):
        """Gets the properties of this TargetRuntime.

        The properties dictionary.

        :return: The properties of this TargetRuntime.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TargetRuntime.

        The properties dictionary.

        :param properties: The properties of this TargetRuntime.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def runtime_type(self):
        """Gets the runtime_type of this TargetRuntime.

        The target runtime type.

        :return: The runtime_type of this TargetRuntime.
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """Sets the runtime_type of this TargetRuntime.

        The target runtime type.

        :param runtime_type: The runtime_type of this TargetRuntime.
        :type runtime_type: str
        """
        allowed_values = ["SparkPython", "Tlc37", "Tlc38", "Tlc310", "Python", "PythonSlim", "PythonCustom"]  # noqa: E501
        if runtime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    @property
    def target_architecture(self):
        """Gets the target_architecture of this TargetRuntime.

        The target architecture.

        :return: The target_architecture of this TargetRuntime.
        :rtype: str
        """
        return self._target_architecture

    @target_architecture.setter
    def target_architecture(self, target_architecture):
        """Sets the target_architecture of this TargetRuntime.

        The target architecture.

        :param target_architecture: The target_architecture of this TargetRuntime.
        :type target_architecture: str
        """
        allowed_values = ["Amd64", "Arm32v7"]  # noqa: E501
        if target_architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `target_architecture` ({0}), must be one of {1}"
                .format(target_architecture, allowed_values)
            )

        self._target_architecture = target_architecture
