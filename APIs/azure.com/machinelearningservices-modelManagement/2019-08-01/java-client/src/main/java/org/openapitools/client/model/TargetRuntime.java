/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The target runtime.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:04.030214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetRuntime {
  /**
   * The target operating system.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    LINUX("Linux"),
    
    WINDOWS("Windows");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  /**
   * The target runtime type.
   */
  @JsonAdapter(RuntimeTypeEnum.Adapter.class)
  public enum RuntimeTypeEnum {
    SPARK_PYTHON("SparkPython"),
    
    TLC37("Tlc37"),
    
    TLC38("Tlc38"),
    
    TLC310("Tlc310"),
    
    PYTHON("Python"),
    
    PYTHON_SLIM("PythonSlim"),
    
    PYTHON_CUSTOM("PythonCustom");

    private String value;

    RuntimeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuntimeTypeEnum fromValue(String value) {
      for (RuntimeTypeEnum b : RuntimeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuntimeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuntimeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuntimeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuntimeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuntimeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUNTIME_TYPE = "runtimeType";
  @SerializedName(SERIALIZED_NAME_RUNTIME_TYPE)
  private RuntimeTypeEnum runtimeType;

  /**
   * The target architecture.
   */
  @JsonAdapter(TargetArchitectureEnum.Adapter.class)
  public enum TargetArchitectureEnum {
    AMD64("Amd64"),
    
    ARM32V7("Arm32v7");

    private String value;

    TargetArchitectureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetArchitectureEnum fromValue(String value) {
      for (TargetArchitectureEnum b : TargetArchitectureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetArchitectureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetArchitectureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetArchitectureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetArchitectureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetArchitectureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_ARCHITECTURE = "targetArchitecture";
  @SerializedName(SERIALIZED_NAME_TARGET_ARCHITECTURE)
  private TargetArchitectureEnum targetArchitecture;

  public TargetRuntime() {
  }

  public TargetRuntime(
     Map<String, String> properties
  ) {
    this();
    this.properties = properties;
  }

  public TargetRuntime osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The target operating system.
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  /**
   * The properties dictionary.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }



  public TargetRuntime runtimeType(RuntimeTypeEnum runtimeType) {
    this.runtimeType = runtimeType;
    return this;
  }

  /**
   * The target runtime type.
   * @return runtimeType
   */
  @javax.annotation.Nullable
  public RuntimeTypeEnum getRuntimeType() {
    return runtimeType;
  }

  public void setRuntimeType(RuntimeTypeEnum runtimeType) {
    this.runtimeType = runtimeType;
  }


  public TargetRuntime targetArchitecture(TargetArchitectureEnum targetArchitecture) {
    this.targetArchitecture = targetArchitecture;
    return this;
  }

  /**
   * The target architecture.
   * @return targetArchitecture
   */
  @javax.annotation.Nullable
  public TargetArchitectureEnum getTargetArchitecture() {
    return targetArchitecture;
  }

  public void setTargetArchitecture(TargetArchitectureEnum targetArchitecture) {
    this.targetArchitecture = targetArchitecture;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetRuntime targetRuntime = (TargetRuntime) o;
    return Objects.equals(this.osType, targetRuntime.osType) &&
        Objects.equals(this.properties, targetRuntime.properties) &&
        Objects.equals(this.runtimeType, targetRuntime.runtimeType) &&
        Objects.equals(this.targetArchitecture, targetRuntime.targetArchitecture);
  }

  @Override
  public int hashCode() {
    return Objects.hash(osType, properties, runtimeType, targetArchitecture);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetRuntime {\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    runtimeType: ").append(toIndentedString(runtimeType)).append("\n");
    sb.append("    targetArchitecture: ").append(toIndentedString(targetArchitecture)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("osType");
    openapiFields.add("properties");
    openapiFields.add("runtimeType");
    openapiFields.add("targetArchitecture");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetRuntime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetRuntime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetRuntime is not found in the empty JSON string", TargetRuntime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetRuntime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetRuntime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
      if ((jsonObj.get("runtimeType") != null && !jsonObj.get("runtimeType").isJsonNull()) && !jsonObj.get("runtimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeType").toString()));
      }
      // validate the optional field `runtimeType`
      if (jsonObj.get("runtimeType") != null && !jsonObj.get("runtimeType").isJsonNull()) {
        RuntimeTypeEnum.validateJsonElement(jsonObj.get("runtimeType"));
      }
      if ((jsonObj.get("targetArchitecture") != null && !jsonObj.get("targetArchitecture").isJsonNull()) && !jsonObj.get("targetArchitecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetArchitecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetArchitecture").toString()));
      }
      // validate the optional field `targetArchitecture`
      if (jsonObj.get("targetArchitecture") != null && !jsonObj.get("targetArchitecture").isJsonNull()) {
        TargetArchitectureEnum.validateJsonElement(jsonObj.get("targetArchitecture"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetRuntime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetRuntime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetRuntime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetRuntime.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetRuntime>() {
           @Override
           public void write(JsonWriter out, TargetRuntime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetRuntime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetRuntime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetRuntime
   * @throws IOException if the JSON string is invalid with respect to TargetRuntime
   */
  public static TargetRuntime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetRuntime.class);
  }

  /**
   * Convert an instance of TargetRuntime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

