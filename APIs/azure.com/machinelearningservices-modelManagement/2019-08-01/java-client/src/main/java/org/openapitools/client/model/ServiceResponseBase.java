/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ModelErrorResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The base service response. The correct inherited response based on computeType will be returned (ex. ACIServiceResponse)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:04.030214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceResponseBase {
  /**
   * The compute environment type for the service.
   */
  @JsonAdapter(ComputeTypeEnum.Adapter.class)
  public enum ComputeTypeEnum {
    ACI("ACI"),
    
    AKS("AKS"),
    
    AMLCOMPUTE("AMLCOMPUTE"),
    
    IOT("IOT"),
    
    AKSENDPOINT("AKSENDPOINT"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ComputeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComputeTypeEnum fromValue(String value) {
      for (ComputeTypeEnum b : ComputeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComputeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComputeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComputeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComputeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComputeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPUTE_TYPE = "computeType";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TYPE)
  protected ComputeTypeEnum computeType;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  /**
   * The deployment type for the service.
   */
  @JsonAdapter(DeploymentTypeEnum.Adapter.class)
  public enum DeploymentTypeEnum {
    GRPC_REALTIME_ENDPOINT("GRPCRealtimeEndpoint"),
    
    HTTP_REALTIME_ENDPOINT("HttpRealtimeEndpoint"),
    
    BATCH("Batch");

    private String value;

    DeploymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeploymentTypeEnum fromValue(String value) {
      for (DeploymentTypeEnum b : DeploymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeploymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeploymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeploymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPLOYMENT_TYPE = "deploymentType";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_TYPE)
  private DeploymentTypeEnum deploymentType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ModelErrorResponse error;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KV_TAGS = "kvTags";
  @SerializedName(SERIALIZED_NAME_KV_TAGS)
  private Map<String, String> kvTags = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  /**
   * The current state of the service.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    TRANSITIONING("Transitioning"),
    
    HEALTHY("Healthy"),
    
    UNHEALTHY("Unhealthy"),
    
    FAILED("Failed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updatedTime";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public ServiceResponseBase() {
  }

  public ServiceResponseBase computeType(ComputeTypeEnum computeType) {
    this.computeType = computeType;
    return this;
  }

  /**
   * The compute environment type for the service.
   * @return computeType
   */
  @javax.annotation.Nonnull
  public ComputeTypeEnum getComputeType() {
    return computeType;
  }

  public void setComputeType(ComputeTypeEnum computeType) {
    this.computeType = computeType;
  }


  public ServiceResponseBase createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The time the service was created.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public ServiceResponseBase deploymentType(DeploymentTypeEnum deploymentType) {
    this.deploymentType = deploymentType;
    return this;
  }

  /**
   * The deployment type for the service.
   * @return deploymentType
   */
  @javax.annotation.Nullable
  public DeploymentTypeEnum getDeploymentType() {
    return deploymentType;
  }

  public void setDeploymentType(DeploymentTypeEnum deploymentType) {
    this.deploymentType = deploymentType;
  }


  public ServiceResponseBase description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The service description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ServiceResponseBase error(ModelErrorResponse error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ModelErrorResponse getError() {
    return error;
  }

  public void setError(ModelErrorResponse error) {
    this.error = error;
  }


  public ServiceResponseBase id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The service Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ServiceResponseBase kvTags(Map<String, String> kvTags) {
    this.kvTags = kvTags;
    return this;
  }

  public ServiceResponseBase putKvTagsItem(String key, String kvTagsItem) {
    if (this.kvTags == null) {
      this.kvTags = new HashMap<>();
    }
    this.kvTags.put(key, kvTagsItem);
    return this;
  }

  /**
   * The service tag dictionary. Tags are mutable.
   * @return kvTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getKvTags() {
    return kvTags;
  }

  public void setKvTags(Map<String, String> kvTags) {
    this.kvTags = kvTags;
  }


  public ServiceResponseBase name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The service name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ServiceResponseBase operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * The ID of the latest asynchronous operation for this service.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public ServiceResponseBase properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public ServiceResponseBase putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * The service property dictionary. Properties are immutable.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public ServiceResponseBase state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the service.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ServiceResponseBase updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * The time the service was updated.
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceResponseBase serviceResponseBase = (ServiceResponseBase) o;
    return Objects.equals(this.computeType, serviceResponseBase.computeType) &&
        Objects.equals(this.createdTime, serviceResponseBase.createdTime) &&
        Objects.equals(this.deploymentType, serviceResponseBase.deploymentType) &&
        Objects.equals(this.description, serviceResponseBase.description) &&
        Objects.equals(this.error, serviceResponseBase.error) &&
        Objects.equals(this.id, serviceResponseBase.id) &&
        Objects.equals(this.kvTags, serviceResponseBase.kvTags) &&
        Objects.equals(this.name, serviceResponseBase.name) &&
        Objects.equals(this.operationId, serviceResponseBase.operationId) &&
        Objects.equals(this.properties, serviceResponseBase.properties) &&
        Objects.equals(this.state, serviceResponseBase.state) &&
        Objects.equals(this.updatedTime, serviceResponseBase.updatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeType, createdTime, deploymentType, description, error, id, kvTags, name, operationId, properties, state, updatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceResponseBase {\n");
    sb.append("    computeType: ").append(toIndentedString(computeType)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    deploymentType: ").append(toIndentedString(deploymentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kvTags: ").append(toIndentedString(kvTags)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeType");
    openapiFields.add("createdTime");
    openapiFields.add("deploymentType");
    openapiFields.add("description");
    openapiFields.add("error");
    openapiFields.add("id");
    openapiFields.add("kvTags");
    openapiFields.add("name");
    openapiFields.add("operationId");
    openapiFields.add("properties");
    openapiFields.add("state");
    openapiFields.add("updatedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("computeType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceResponseBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceResponseBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceResponseBase is not found in the empty JSON string", ServiceResponseBase.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("computeType").getAsString();
      switch (discriminatorValue) {
        case "ACIServiceResponse":
          ACIServiceResponse.validateJsonElement(jsonElement);
          break;
        case "AKSEndpointResponse":
          AKSEndpointResponse.validateJsonElement(jsonElement);
          break;
        case "AKSServiceResponse":
          AKSServiceResponse.validateJsonElement(jsonElement);
          break;
        case "AKSVariantResponse":
          AKSVariantResponse.validateJsonElement(jsonElement);
          break;
        case "BatchServiceResponse":
          BatchServiceResponse.validateJsonElement(jsonElement);
          break;
        case "IotServiceResponse":
          IotServiceResponse.validateJsonElement(jsonElement);
          break;
        case "UnknownServiceResponse":
          UnknownServiceResponse.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `computeType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ServiceResponseBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceResponseBase
   * @throws IOException if the JSON string is invalid with respect to ServiceResponseBase
   */
  public static ServiceResponseBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceResponseBase.class);
  }

  /**
   * Convert an instance of ServiceResponseBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

