/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.ModelErrorResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImageResponseBase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:04.030214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageResponseBase {
  public static final String SERIALIZED_NAME_AUTO_DELETE = "autoDelete";
  @SerializedName(SERIALIZED_NAME_AUTO_DELETE)
  private Boolean autoDelete;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  /**
   * The state of the operation.
   */
  @JsonAdapter(CreationStateEnum.Adapter.class)
  public enum CreationStateEnum {
    NOT_STARTED("NotStarted"),
    
    RUNNING("Running"),
    
    CANCELLED("Cancelled"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    TIMED_OUT("TimedOut");

    private String value;

    CreationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreationStateEnum fromValue(String value) {
      for (CreationStateEnum b : CreationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATION_STATE = "creationState";
  @SerializedName(SERIALIZED_NAME_CREATION_STATE)
  private CreationStateEnum creationState;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ModelErrorResponse error;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_BUILD_LOG_URI = "imageBuildLogUri";
  @SerializedName(SERIALIZED_NAME_IMAGE_BUILD_LOG_URI)
  private String imageBuildLogUri;

  /**
   * The flavor of the image.
   */
  @JsonAdapter(ImageFlavorEnum.Adapter.class)
  public enum ImageFlavorEnum {
    WEB_API_CONTAINER("WebApiContainer"),
    
    BATCH_CONTAINER("BatchContainer"),
    
    IO_T_CONTAINER("IoTContainer"),
    
    ACCEL_CONTAINER("AccelContainer"),
    
    USER_PROVIDED_CONTAINER("UserProvidedContainer");

    private String value;

    ImageFlavorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageFlavorEnum fromValue(String value) {
      for (ImageFlavorEnum b : ImageFlavorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageFlavorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageFlavorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageFlavorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageFlavorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImageFlavorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_FLAVOR = "imageFlavor";
  @SerializedName(SERIALIZED_NAME_IMAGE_FLAVOR)
  protected ImageFlavorEnum imageFlavor;

  public static final String SERIALIZED_NAME_IMAGE_LOCATION = "imageLocation";
  @SerializedName(SERIALIZED_NAME_IMAGE_LOCATION)
  private String imageLocation;

  /**
   * The type of the image.
   */
  @JsonAdapter(ImageTypeEnum.Adapter.class)
  public enum ImageTypeEnum {
    DOCKER("Docker");

    private String value;

    ImageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageTypeEnum fromValue(String value) {
      for (ImageTypeEnum b : ImageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "imageType";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private ImageTypeEnum imageType;

  public static final String SERIALIZED_NAME_KV_TAGS = "kvTags";
  @SerializedName(SERIALIZED_NAME_KV_TAGS)
  private Map<String, String> kvTags = new HashMap<>();

  public static final String SERIALIZED_NAME_MODEL_DETAILS = "modelDetails";
  @SerializedName(SERIALIZED_NAME_MODEL_DETAILS)
  private List<Model> modelDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL_IDS = "modelIds";
  @SerializedName(SERIALIZED_NAME_MODEL_IDS)
  private List<String> modelIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modifiedTime";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private OffsetDateTime modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public ImageResponseBase() {
  }

  public ImageResponseBase autoDelete(Boolean autoDelete) {
    this.autoDelete = autoDelete;
    return this;
  }

  /**
   * Whether the image will be automatically deleted with the last service using it.
   * @return autoDelete
   */
  @javax.annotation.Nullable
  public Boolean getAutoDelete() {
    return autoDelete;
  }

  public void setAutoDelete(Boolean autoDelete) {
    this.autoDelete = autoDelete;
  }


  public ImageResponseBase createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The time the image was created.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public ImageResponseBase creationState(CreationStateEnum creationState) {
    this.creationState = creationState;
    return this;
  }

  /**
   * The state of the operation.
   * @return creationState
   */
  @javax.annotation.Nullable
  public CreationStateEnum getCreationState() {
    return creationState;
  }

  public void setCreationState(CreationStateEnum creationState) {
    this.creationState = creationState;
  }


  public ImageResponseBase description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The image description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ImageResponseBase error(ModelErrorResponse error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ModelErrorResponse getError() {
    return error;
  }

  public void setError(ModelErrorResponse error) {
    this.error = error;
  }


  public ImageResponseBase id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The image Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ImageResponseBase imageBuildLogUri(String imageBuildLogUri) {
    this.imageBuildLogUri = imageBuildLogUri;
    return this;
  }

  /**
   * The Uri to the image build logs.
   * @return imageBuildLogUri
   */
  @javax.annotation.Nullable
  public String getImageBuildLogUri() {
    return imageBuildLogUri;
  }

  public void setImageBuildLogUri(String imageBuildLogUri) {
    this.imageBuildLogUri = imageBuildLogUri;
  }


  public ImageResponseBase imageFlavor(ImageFlavorEnum imageFlavor) {
    this.imageFlavor = imageFlavor;
    return this;
  }

  /**
   * The flavor of the image.
   * @return imageFlavor
   */
  @javax.annotation.Nonnull
  public ImageFlavorEnum getImageFlavor() {
    return imageFlavor;
  }

  public void setImageFlavor(ImageFlavorEnum imageFlavor) {
    this.imageFlavor = imageFlavor;
  }


  public ImageResponseBase imageLocation(String imageLocation) {
    this.imageLocation = imageLocation;
    return this;
  }

  /**
   * The Image location string.
   * @return imageLocation
   */
  @javax.annotation.Nullable
  public String getImageLocation() {
    return imageLocation;
  }

  public void setImageLocation(String imageLocation) {
    this.imageLocation = imageLocation;
  }


  public ImageResponseBase imageType(ImageTypeEnum imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * The type of the image.
   * @return imageType
   */
  @javax.annotation.Nullable
  public ImageTypeEnum getImageType() {
    return imageType;
  }

  public void setImageType(ImageTypeEnum imageType) {
    this.imageType = imageType;
  }


  public ImageResponseBase kvTags(Map<String, String> kvTags) {
    this.kvTags = kvTags;
    return this;
  }

  public ImageResponseBase putKvTagsItem(String key, String kvTagsItem) {
    if (this.kvTags == null) {
      this.kvTags = new HashMap<>();
    }
    this.kvTags.put(key, kvTagsItem);
    return this;
  }

  /**
   * The image tag dictionary. Tags are mutable.
   * @return kvTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getKvTags() {
    return kvTags;
  }

  public void setKvTags(Map<String, String> kvTags) {
    this.kvTags = kvTags;
  }


  public ImageResponseBase modelDetails(List<Model> modelDetails) {
    this.modelDetails = modelDetails;
    return this;
  }

  public ImageResponseBase addModelDetailsItem(Model modelDetailsItem) {
    if (this.modelDetails == null) {
      this.modelDetails = new ArrayList<>();
    }
    this.modelDetails.add(modelDetailsItem);
    return this;
  }

  /**
   * The list of models.
   * @return modelDetails
   */
  @javax.annotation.Nullable
  public List<Model> getModelDetails() {
    return modelDetails;
  }

  public void setModelDetails(List<Model> modelDetails) {
    this.modelDetails = modelDetails;
  }


  public ImageResponseBase modelIds(List<String> modelIds) {
    this.modelIds = modelIds;
    return this;
  }

  public ImageResponseBase addModelIdsItem(String modelIdsItem) {
    if (this.modelIds == null) {
      this.modelIds = new ArrayList<>();
    }
    this.modelIds.add(modelIdsItem);
    return this;
  }

  /**
   * The list of model Ids.
   * @return modelIds
   */
  @javax.annotation.Nullable
  public List<String> getModelIds() {
    return modelIds;
  }

  public void setModelIds(List<String> modelIds) {
    this.modelIds = modelIds;
  }


  public ImageResponseBase modifiedTime(OffsetDateTime modifiedTime) {
    this.modifiedTime = modifiedTime;
    return this;
  }

  /**
   * The time the image was last modified.
   * @return modifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedTime() {
    return modifiedTime;
  }

  public void setModifiedTime(OffsetDateTime modifiedTime) {
    this.modifiedTime = modifiedTime;
  }


  public ImageResponseBase name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The image name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ImageResponseBase operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * The ID of the asynchronous operation for this image.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public ImageResponseBase properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public ImageResponseBase putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * The image properties dictionary. Properties are immutable.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public ImageResponseBase version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The image version.
   * @return version
   */
  @javax.annotation.Nullable
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageResponseBase imageResponseBase = (ImageResponseBase) o;
    return Objects.equals(this.autoDelete, imageResponseBase.autoDelete) &&
        Objects.equals(this.createdTime, imageResponseBase.createdTime) &&
        Objects.equals(this.creationState, imageResponseBase.creationState) &&
        Objects.equals(this.description, imageResponseBase.description) &&
        Objects.equals(this.error, imageResponseBase.error) &&
        Objects.equals(this.id, imageResponseBase.id) &&
        Objects.equals(this.imageBuildLogUri, imageResponseBase.imageBuildLogUri) &&
        Objects.equals(this.imageFlavor, imageResponseBase.imageFlavor) &&
        Objects.equals(this.imageLocation, imageResponseBase.imageLocation) &&
        Objects.equals(this.imageType, imageResponseBase.imageType) &&
        Objects.equals(this.kvTags, imageResponseBase.kvTags) &&
        Objects.equals(this.modelDetails, imageResponseBase.modelDetails) &&
        Objects.equals(this.modelIds, imageResponseBase.modelIds) &&
        Objects.equals(this.modifiedTime, imageResponseBase.modifiedTime) &&
        Objects.equals(this.name, imageResponseBase.name) &&
        Objects.equals(this.operationId, imageResponseBase.operationId) &&
        Objects.equals(this.properties, imageResponseBase.properties) &&
        Objects.equals(this.version, imageResponseBase.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoDelete, createdTime, creationState, description, error, id, imageBuildLogUri, imageFlavor, imageLocation, imageType, kvTags, modelDetails, modelIds, modifiedTime, name, operationId, properties, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageResponseBase {\n");
    sb.append("    autoDelete: ").append(toIndentedString(autoDelete)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    creationState: ").append(toIndentedString(creationState)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageBuildLogUri: ").append(toIndentedString(imageBuildLogUri)).append("\n");
    sb.append("    imageFlavor: ").append(toIndentedString(imageFlavor)).append("\n");
    sb.append("    imageLocation: ").append(toIndentedString(imageLocation)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    kvTags: ").append(toIndentedString(kvTags)).append("\n");
    sb.append("    modelDetails: ").append(toIndentedString(modelDetails)).append("\n");
    sb.append("    modelIds: ").append(toIndentedString(modelIds)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoDelete");
    openapiFields.add("createdTime");
    openapiFields.add("creationState");
    openapiFields.add("description");
    openapiFields.add("error");
    openapiFields.add("id");
    openapiFields.add("imageBuildLogUri");
    openapiFields.add("imageFlavor");
    openapiFields.add("imageLocation");
    openapiFields.add("imageType");
    openapiFields.add("kvTags");
    openapiFields.add("modelDetails");
    openapiFields.add("modelIds");
    openapiFields.add("modifiedTime");
    openapiFields.add("name");
    openapiFields.add("operationId");
    openapiFields.add("properties");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("imageFlavor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageResponseBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageResponseBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageResponseBase is not found in the empty JSON string", ImageResponseBase.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("imageFlavor").getAsString();
      switch (discriminatorValue) {
        case "DockerImageResponse":
          DockerImageResponse.validateJsonElement(jsonElement);
          break;
        case "FPGADockerImageResponse":
          FPGADockerImageResponse.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `imageFlavor` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ImageResponseBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageResponseBase
   * @throws IOException if the JSON string is invalid with respect to ImageResponseBase
   */
  public static ImageResponseBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageResponseBase.class);
  }

  /**
   * Convert an instance of ImageResponseBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

