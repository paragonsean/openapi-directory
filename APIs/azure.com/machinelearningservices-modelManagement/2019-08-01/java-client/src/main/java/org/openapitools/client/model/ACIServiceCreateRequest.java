/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AuthKeys;
import org.openapitools.client.model.ContainerResourceRequirements;
import org.openapitools.client.model.CreateServiceRequest;
import org.openapitools.client.model.EnvironmentImageRequest;
import org.openapitools.client.model.ModelDataCollection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ACIServiceCreateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:04.030214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ACIServiceCreateRequest extends CreateServiceRequest {
  public static final String SERIALIZED_NAME_APP_INSIGHTS_ENABLED = "appInsightsEnabled";
  @SerializedName(SERIALIZED_NAME_APP_INSIGHTS_ENABLED)
  private Boolean appInsightsEnabled = false;

  public static final String SERIALIZED_NAME_AUTH_ENABLED = "authEnabled";
  @SerializedName(SERIALIZED_NAME_AUTH_ENABLED)
  private Boolean authEnabled = false;

  public static final String SERIALIZED_NAME_CNAME = "cname";
  @SerializedName(SERIALIZED_NAME_CNAME)
  private String cname;

  public static final String SERIALIZED_NAME_CONTAINER_RESOURCE_REQUIREMENTS = "containerResourceRequirements";
  @SerializedName(SERIALIZED_NAME_CONTAINER_RESOURCE_REQUIREMENTS)
  private ContainerResourceRequirements containerResourceRequirements;

  public static final String SERIALIZED_NAME_DATA_COLLECTION = "dataCollection";
  @SerializedName(SERIALIZED_NAME_DATA_COLLECTION)
  private ModelDataCollection dataCollection;

  public static final String SERIALIZED_NAME_DNS_NAME_LABEL = "dnsNameLabel";
  @SerializedName(SERIALIZED_NAME_DNS_NAME_LABEL)
  private String dnsNameLabel;

  public static final String SERIALIZED_NAME_SSL_CERTIFICATE = "sslCertificate";
  @SerializedName(SERIALIZED_NAME_SSL_CERTIFICATE)
  private String sslCertificate;

  public static final String SERIALIZED_NAME_SSL_ENABLED = "sslEnabled";
  @SerializedName(SERIALIZED_NAME_SSL_ENABLED)
  private Boolean sslEnabled = false;

  public static final String SERIALIZED_NAME_SSL_KEY = "sslKey";
  @SerializedName(SERIALIZED_NAME_SSL_KEY)
  private String sslKey;

  public ACIServiceCreateRequest() {
    this.computeType = this.getClass().getSimpleName();
  }

  public ACIServiceCreateRequest appInsightsEnabled(Boolean appInsightsEnabled) {
    this.appInsightsEnabled = appInsightsEnabled;
    return this;
  }

  /**
   * Whether or not Application Insights is enabled.
   * @return appInsightsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAppInsightsEnabled() {
    return appInsightsEnabled;
  }

  public void setAppInsightsEnabled(Boolean appInsightsEnabled) {
    this.appInsightsEnabled = appInsightsEnabled;
  }


  public ACIServiceCreateRequest authEnabled(Boolean authEnabled) {
    this.authEnabled = authEnabled;
    return this;
  }

  /**
   * Whether or not authentication is enabled on the service.
   * @return authEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAuthEnabled() {
    return authEnabled;
  }

  public void setAuthEnabled(Boolean authEnabled) {
    this.authEnabled = authEnabled;
  }


  public ACIServiceCreateRequest cname(String cname) {
    this.cname = cname;
    return this;
  }

  /**
   * The CName for the service.
   * @return cname
   */
  @javax.annotation.Nullable
  public String getCname() {
    return cname;
  }

  public void setCname(String cname) {
    this.cname = cname;
  }


  public ACIServiceCreateRequest containerResourceRequirements(ContainerResourceRequirements containerResourceRequirements) {
    this.containerResourceRequirements = containerResourceRequirements;
    return this;
  }

  /**
   * Get containerResourceRequirements
   * @return containerResourceRequirements
   */
  @javax.annotation.Nullable
  public ContainerResourceRequirements getContainerResourceRequirements() {
    return containerResourceRequirements;
  }

  public void setContainerResourceRequirements(ContainerResourceRequirements containerResourceRequirements) {
    this.containerResourceRequirements = containerResourceRequirements;
  }


  public ACIServiceCreateRequest dataCollection(ModelDataCollection dataCollection) {
    this.dataCollection = dataCollection;
    return this;
  }

  /**
   * Get dataCollection
   * @return dataCollection
   */
  @javax.annotation.Nullable
  public ModelDataCollection getDataCollection() {
    return dataCollection;
  }

  public void setDataCollection(ModelDataCollection dataCollection) {
    this.dataCollection = dataCollection;
  }


  public ACIServiceCreateRequest dnsNameLabel(String dnsNameLabel) {
    this.dnsNameLabel = dnsNameLabel;
    return this;
  }

  /**
   * The Dns label for the service.
   * @return dnsNameLabel
   */
  @javax.annotation.Nullable
  public String getDnsNameLabel() {
    return dnsNameLabel;
  }

  public void setDnsNameLabel(String dnsNameLabel) {
    this.dnsNameLabel = dnsNameLabel;
  }


  public ACIServiceCreateRequest sslCertificate(String sslCertificate) {
    this.sslCertificate = sslCertificate;
    return this;
  }

  /**
   * The SSL certificate to use if SSL is enabled.
   * @return sslCertificate
   */
  @javax.annotation.Nullable
  public String getSslCertificate() {
    return sslCertificate;
  }

  public void setSslCertificate(String sslCertificate) {
    this.sslCertificate = sslCertificate;
  }


  public ACIServiceCreateRequest sslEnabled(Boolean sslEnabled) {
    this.sslEnabled = sslEnabled;
    return this;
  }

  /**
   * Whether or not SSL is enabled.
   * @return sslEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSslEnabled() {
    return sslEnabled;
  }

  public void setSslEnabled(Boolean sslEnabled) {
    this.sslEnabled = sslEnabled;
  }


  public ACIServiceCreateRequest sslKey(String sslKey) {
    this.sslKey = sslKey;
    return this;
  }

  /**
   * The SSL key for the certificate.
   * @return sslKey
   */
  @javax.annotation.Nullable
  public String getSslKey() {
    return sslKey;
  }

  public void setSslKey(String sslKey) {
    this.sslKey = sslKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ACIServiceCreateRequest acIServiceCreateRequest = (ACIServiceCreateRequest) o;
    return Objects.equals(this.appInsightsEnabled, acIServiceCreateRequest.appInsightsEnabled) &&
        Objects.equals(this.authEnabled, acIServiceCreateRequest.authEnabled) &&
        Objects.equals(this.cname, acIServiceCreateRequest.cname) &&
        Objects.equals(this.containerResourceRequirements, acIServiceCreateRequest.containerResourceRequirements) &&
        Objects.equals(this.dataCollection, acIServiceCreateRequest.dataCollection) &&
        Objects.equals(this.dnsNameLabel, acIServiceCreateRequest.dnsNameLabel) &&
        Objects.equals(this.sslCertificate, acIServiceCreateRequest.sslCertificate) &&
        Objects.equals(this.sslEnabled, acIServiceCreateRequest.sslEnabled) &&
        Objects.equals(this.sslKey, acIServiceCreateRequest.sslKey) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInsightsEnabled, authEnabled, cname, containerResourceRequirements, dataCollection, dnsNameLabel, sslCertificate, sslEnabled, sslKey, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ACIServiceCreateRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    appInsightsEnabled: ").append(toIndentedString(appInsightsEnabled)).append("\n");
    sb.append("    authEnabled: ").append(toIndentedString(authEnabled)).append("\n");
    sb.append("    cname: ").append(toIndentedString(cname)).append("\n");
    sb.append("    containerResourceRequirements: ").append(toIndentedString(containerResourceRequirements)).append("\n");
    sb.append("    dataCollection: ").append(toIndentedString(dataCollection)).append("\n");
    sb.append("    dnsNameLabel: ").append(toIndentedString(dnsNameLabel)).append("\n");
    sb.append("    sslCertificate: ").append(toIndentedString(sslCertificate)).append("\n");
    sb.append("    sslEnabled: ").append(toIndentedString(sslEnabled)).append("\n");
    sb.append("    sslKey: ").append(toIndentedString(sslKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeType");
    openapiFields.add("deploymentType");
    openapiFields.add("description");
    openapiFields.add("environmentImageRequest");
    openapiFields.add("imageId");
    openapiFields.add("keys");
    openapiFields.add("kvTags");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("properties");
    openapiFields.add("appInsightsEnabled");
    openapiFields.add("authEnabled");
    openapiFields.add("cname");
    openapiFields.add("containerResourceRequirements");
    openapiFields.add("dataCollection");
    openapiFields.add("dnsNameLabel");
    openapiFields.add("sslCertificate");
    openapiFields.add("sslEnabled");
    openapiFields.add("sslKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("computeType");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ACIServiceCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ACIServiceCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ACIServiceCreateRequest is not found in the empty JSON string", ACIServiceCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ACIServiceCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ACIServiceCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ACIServiceCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ACIServiceCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ACIServiceCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ACIServiceCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ACIServiceCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ACIServiceCreateRequest>() {
           @Override
           public void write(JsonWriter out, ACIServiceCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ACIServiceCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ACIServiceCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ACIServiceCreateRequest
   * @throws IOException if the JSON string is invalid with respect to ACIServiceCreateRequest
   */
  public static ACIServiceCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ACIServiceCreateRequest.class);
  }

  /**
   * Convert an instance of ACIServiceCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

