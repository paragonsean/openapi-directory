/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelErrorResponse;
import org.openapitools.client.model.PaginatedProfileResponseList;
import org.openapitools.client.model.ProfileRequestBase;
import org.openapitools.client.model.ProfileResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProfileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for profilesCreate
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param inputRequest The payload that is used to create the Profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted. The header &#39;Operation-Location&#39; contains the async operation location URL. Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCreateCall(UUID subscriptionId, String resourceGroup, String workspace, String imageId, ProfileRequestBase inputRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputRequest;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesCreateValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String imageId, ProfileRequestBase inputRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesCreate(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling profilesCreate(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling profilesCreate(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling profilesCreate(Async)");
        }

        // verify the required parameter 'inputRequest' is set
        if (inputRequest == null) {
            throw new ApiException("Missing the required parameter 'inputRequest' when calling profilesCreate(Async)");
        }

        return profilesCreateCall(subscriptionId, resourceGroup, workspace, imageId, inputRequest, _callback);

    }

    /**
     * Create a Profile.
     * Create a Profile for an Image.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param inputRequest The payload that is used to create the Profile. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted. The header &#39;Operation-Location&#39; contains the async operation location URL. Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void profilesCreate(UUID subscriptionId, String resourceGroup, String workspace, String imageId, ProfileRequestBase inputRequest) throws ApiException {
        profilesCreateWithHttpInfo(subscriptionId, resourceGroup, workspace, imageId, inputRequest);
    }

    /**
     * Create a Profile.
     * Create a Profile for an Image.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param inputRequest The payload that is used to create the Profile. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted. The header &#39;Operation-Location&#39; contains the async operation location URL. Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> profilesCreateWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String imageId, ProfileRequestBase inputRequest) throws ApiException {
        okhttp3.Call localVarCall = profilesCreateValidateBeforeCall(subscriptionId, resourceGroup, workspace, imageId, inputRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a Profile. (asynchronously)
     * Create a Profile for an Image.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param inputRequest The payload that is used to create the Profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted. The header &#39;Operation-Location&#39; contains the async operation location URL. Accessing this URL with a GET call will return the status of the background task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCreateAsync(UUID subscriptionId, String resourceGroup, String workspace, String imageId, ProfileRequestBase inputRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesCreateValidateBeforeCall(subscriptionId, resourceGroup, workspace, imageId, inputRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesListQuery
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param name The Profile name. (optional)
     * @param description The Profile description. (optional)
     * @param tags A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key&#x3D;value              Example: tagKey1,tagKey2,tagKey3&#x3D;value3 (optional)
     * @param properties A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key&#x3D;value              Example: propKey1,propKey2,propKey3&#x3D;value3 (optional)
     * @param count The number of items to retrieve in a page. (optional)
     * @param $skipToken The continuation token to retrieve the next page. (optional)
     * @param orderBy The option to order the response. (optional, default to CreatedAtDesc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListQueryCall(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String name, String description, String tags, String properties, Integer count, String $skipToken, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (properties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("properties", properties));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesListQueryValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String name, String description, String tags, String properties, Integer count, String $skipToken, String orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesListQuery(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling profilesListQuery(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling profilesListQuery(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling profilesListQuery(Async)");
        }

        return profilesListQueryCall(subscriptionId, resourceGroup, workspace, imageId, name, description, tags, properties, count, $skipToken, orderBy, _callback);

    }

    /**
     * Get a list of Image Profiles.
     * If no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the count of items in each page is an optional parameter.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param name The Profile name. (optional)
     * @param description The Profile description. (optional)
     * @param tags A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key&#x3D;value              Example: tagKey1,tagKey2,tagKey3&#x3D;value3 (optional)
     * @param properties A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key&#x3D;value              Example: propKey1,propKey2,propKey3&#x3D;value3 (optional)
     * @param count The number of items to retrieve in a page. (optional)
     * @param $skipToken The continuation token to retrieve the next page. (optional)
     * @param orderBy The option to order the response. (optional, default to CreatedAtDesc)
     * @return PaginatedProfileResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedProfileResponseList profilesListQuery(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String name, String description, String tags, String properties, Integer count, String $skipToken, String orderBy) throws ApiException {
        ApiResponse<PaginatedProfileResponseList> localVarResp = profilesListQueryWithHttpInfo(subscriptionId, resourceGroup, workspace, imageId, name, description, tags, properties, count, $skipToken, orderBy);
        return localVarResp.getData();
    }

    /**
     * Get a list of Image Profiles.
     * If no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the count of items in each page is an optional parameter.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param name The Profile name. (optional)
     * @param description The Profile description. (optional)
     * @param tags A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key&#x3D;value              Example: tagKey1,tagKey2,tagKey3&#x3D;value3 (optional)
     * @param properties A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key&#x3D;value              Example: propKey1,propKey2,propKey3&#x3D;value3 (optional)
     * @param count The number of items to retrieve in a page. (optional)
     * @param $skipToken The continuation token to retrieve the next page. (optional)
     * @param orderBy The option to order the response. (optional, default to CreatedAtDesc)
     * @return ApiResponse&lt;PaginatedProfileResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedProfileResponseList> profilesListQueryWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String name, String description, String tags, String properties, Integer count, String $skipToken, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = profilesListQueryValidateBeforeCall(subscriptionId, resourceGroup, workspace, imageId, name, description, tags, properties, count, $skipToken, orderBy, null);
        Type localVarReturnType = new TypeToken<PaginatedProfileResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of Image Profiles. (asynchronously)
     * If no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the count of items in each page is an optional parameter.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param name The Profile name. (optional)
     * @param description The Profile description. (optional)
     * @param tags A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key&#x3D;value              Example: tagKey1,tagKey2,tagKey3&#x3D;value3 (optional)
     * @param properties A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key&#x3D;value              Example: propKey1,propKey2,propKey3&#x3D;value3 (optional)
     * @param count The number of items to retrieve in a page. (optional)
     * @param $skipToken The continuation token to retrieve the next page. (optional)
     * @param orderBy The option to order the response. (optional, default to CreatedAtDesc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListQueryAsync(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String name, String description, String tags, String properties, Integer count, String $skipToken, String orderBy, final ApiCallback<PaginatedProfileResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesListQueryValidateBeforeCall(subscriptionId, resourceGroup, workspace, imageId, name, description, tags, properties, count, $skipToken, orderBy, _callback);
        Type localVarReturnType = new TypeToken<PaginatedProfileResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesQueryById
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param id The Profile Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesQueryByIdCall(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles/{id}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesQueryByIdValidateBeforeCall(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesQueryById(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling profilesQueryById(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling profilesQueryById(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling profilesQueryById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling profilesQueryById(Async)");
        }

        return profilesQueryByIdCall(subscriptionId, resourceGroup, workspace, imageId, id, _callback);

    }

    /**
     * Get a Profile.
     * Get the Profile for an Image.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param id The Profile Id. (required)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesQueryById(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String id) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesQueryByIdWithHttpInfo(subscriptionId, resourceGroup, workspace, imageId, id);
        return localVarResp.getData();
    }

    /**
     * Get a Profile.
     * Get the Profile for an Image.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param id The Profile Id. (required)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesQueryByIdWithHttpInfo(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String id) throws ApiException {
        okhttp3.Call localVarCall = profilesQueryByIdValidateBeforeCall(subscriptionId, resourceGroup, workspace, imageId, id, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Profile. (asynchronously)
     * Get the Profile for an Image.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroup The Name of the resource group in which the workspace is located. (required)
     * @param workspace The name of the workspace. (required)
     * @param imageId The Image Id. (required)
     * @param id The Profile Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesQueryByIdAsync(UUID subscriptionId, String resourceGroup, String workspace, String imageId, String id, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesQueryByIdValidateBeforeCall(subscriptionId, resourceGroup, workspace, imageId, id, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
