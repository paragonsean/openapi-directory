/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerRegistry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelDockerSection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:35:04.030214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelDockerSection {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private List<String> arguments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_DOCKERFILE = "baseDockerfile";
  @SerializedName(SERIALIZED_NAME_BASE_DOCKERFILE)
  private String baseDockerfile;

  public static final String SERIALIZED_NAME_BASE_IMAGE = "baseImage";
  @SerializedName(SERIALIZED_NAME_BASE_IMAGE)
  private String baseImage;

  public static final String SERIALIZED_NAME_BASE_IMAGE_REGISTRY = "baseImageRegistry";
  @SerializedName(SERIALIZED_NAME_BASE_IMAGE_REGISTRY)
  private ContainerRegistry baseImageRegistry;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_GPU_SUPPORT = "gpuSupport";
  @SerializedName(SERIALIZED_NAME_GPU_SUPPORT)
  private Boolean gpuSupport;

  public static final String SERIALIZED_NAME_SHARED_VOLUMES = "sharedVolumes";
  @SerializedName(SERIALIZED_NAME_SHARED_VOLUMES)
  private Boolean sharedVolumes;

  public static final String SERIALIZED_NAME_SHM_SIZE = "shmSize";
  @SerializedName(SERIALIZED_NAME_SHM_SIZE)
  private String shmSize;

  public ModelDockerSection() {
  }

  public ModelDockerSection arguments(List<String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public ModelDockerSection addArgumentsItem(String argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

  /**
   * Extra arguments to the Docker run command.
   * @return arguments
   */
  @javax.annotation.Nullable
  public List<String> getArguments() {
    return arguments;
  }

  public void setArguments(List<String> arguments) {
    this.arguments = arguments;
  }


  public ModelDockerSection baseDockerfile(String baseDockerfile) {
    this.baseDockerfile = baseDockerfile;
    return this;
  }

  /**
   * Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
   * @return baseDockerfile
   */
  @javax.annotation.Nullable
  public String getBaseDockerfile() {
    return baseDockerfile;
  }

  public void setBaseDockerfile(String baseDockerfile) {
    this.baseDockerfile = baseDockerfile;
  }


  public ModelDockerSection baseImage(String baseImage) {
    this.baseImage = baseImage;
    return this;
  }

  /**
   * Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
   * @return baseImage
   */
  @javax.annotation.Nullable
  public String getBaseImage() {
    return baseImage;
  }

  public void setBaseImage(String baseImage) {
    this.baseImage = baseImage;
  }


  public ModelDockerSection baseImageRegistry(ContainerRegistry baseImageRegistry) {
    this.baseImageRegistry = baseImageRegistry;
    return this;
  }

  /**
   * Get baseImageRegistry
   * @return baseImageRegistry
   */
  @javax.annotation.Nullable
  public ContainerRegistry getBaseImageRegistry() {
    return baseImageRegistry;
  }

  public void setBaseImageRegistry(ContainerRegistry baseImageRegistry) {
    this.baseImageRegistry = baseImageRegistry;
  }


  public ModelDockerSection enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Set True to perform this run inside a Docker container.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ModelDockerSection gpuSupport(Boolean gpuSupport) {
    this.gpuSupport = gpuSupport;
    return this;
  }

  /**
   * Run with NVidia Docker extension to support GPUs.
   * @return gpuSupport
   */
  @javax.annotation.Nullable
  public Boolean getGpuSupport() {
    return gpuSupport;
  }

  public void setGpuSupport(Boolean gpuSupport) {
    this.gpuSupport = gpuSupport;
  }


  public ModelDockerSection sharedVolumes(Boolean sharedVolumes) {
    this.sharedVolumes = sharedVolumes;
    return this;
  }

  /**
   * Set False if necessary to work around shared volume bugs on Windows.
   * @return sharedVolumes
   */
  @javax.annotation.Nullable
  public Boolean getSharedVolumes() {
    return sharedVolumes;
  }

  public void setSharedVolumes(Boolean sharedVolumes) {
    this.sharedVolumes = sharedVolumes;
  }


  public ModelDockerSection shmSize(String shmSize) {
    this.shmSize = shmSize;
    return this;
  }

  /**
   * The shared memory size setting for NVidia GPUs.
   * @return shmSize
   */
  @javax.annotation.Nullable
  public String getShmSize() {
    return shmSize;
  }

  public void setShmSize(String shmSize) {
    this.shmSize = shmSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelDockerSection modelDockerSection = (ModelDockerSection) o;
    return Objects.equals(this.arguments, modelDockerSection.arguments) &&
        Objects.equals(this.baseDockerfile, modelDockerSection.baseDockerfile) &&
        Objects.equals(this.baseImage, modelDockerSection.baseImage) &&
        Objects.equals(this.baseImageRegistry, modelDockerSection.baseImageRegistry) &&
        Objects.equals(this.enabled, modelDockerSection.enabled) &&
        Objects.equals(this.gpuSupport, modelDockerSection.gpuSupport) &&
        Objects.equals(this.sharedVolumes, modelDockerSection.sharedVolumes) &&
        Objects.equals(this.shmSize, modelDockerSection.shmSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, baseDockerfile, baseImage, baseImageRegistry, enabled, gpuSupport, sharedVolumes, shmSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelDockerSection {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    baseDockerfile: ").append(toIndentedString(baseDockerfile)).append("\n");
    sb.append("    baseImage: ").append(toIndentedString(baseImage)).append("\n");
    sb.append("    baseImageRegistry: ").append(toIndentedString(baseImageRegistry)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    gpuSupport: ").append(toIndentedString(gpuSupport)).append("\n");
    sb.append("    sharedVolumes: ").append(toIndentedString(sharedVolumes)).append("\n");
    sb.append("    shmSize: ").append(toIndentedString(shmSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("baseDockerfile");
    openapiFields.add("baseImage");
    openapiFields.add("baseImageRegistry");
    openapiFields.add("enabled");
    openapiFields.add("gpuSupport");
    openapiFields.add("sharedVolumes");
    openapiFields.add("shmSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelDockerSection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelDockerSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelDockerSection is not found in the empty JSON string", ModelDockerSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelDockerSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelDockerSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull() && !jsonObj.get("arguments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be an array in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if ((jsonObj.get("baseDockerfile") != null && !jsonObj.get("baseDockerfile").isJsonNull()) && !jsonObj.get("baseDockerfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseDockerfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseDockerfile").toString()));
      }
      if ((jsonObj.get("baseImage") != null && !jsonObj.get("baseImage").isJsonNull()) && !jsonObj.get("baseImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseImage").toString()));
      }
      // validate the optional field `baseImageRegistry`
      if (jsonObj.get("baseImageRegistry") != null && !jsonObj.get("baseImageRegistry").isJsonNull()) {
        ContainerRegistry.validateJsonElement(jsonObj.get("baseImageRegistry"));
      }
      if ((jsonObj.get("shmSize") != null && !jsonObj.get("shmSize").isJsonNull()) && !jsonObj.get("shmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shmSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelDockerSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelDockerSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelDockerSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelDockerSection.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelDockerSection>() {
           @Override
           public void write(JsonWriter out, ModelDockerSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelDockerSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelDockerSection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelDockerSection
   * @throws IOException if the JSON string is invalid with respect to ModelDockerSection
   */
  public static ModelDockerSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelDockerSection.class);
  }

  /**
   * Convert an instance of ModelDockerSection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

