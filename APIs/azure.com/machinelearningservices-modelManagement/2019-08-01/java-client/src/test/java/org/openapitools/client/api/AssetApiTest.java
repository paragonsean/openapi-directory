/*
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Asset;
import org.openapitools.client.model.JsonPatchOperation;
import org.openapitools.client.model.ModelErrorResponse;
import org.openapitools.client.model.PaginatedAssetList;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssetApi
 */
@Disabled
public class AssetApiTest {

    private final AssetApi api = new AssetApi();

    /**
     * Create an Asset.
     *
     * Create an Asset from the provided payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsCreateTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        Asset asset = null;
        Asset response = api.assetsCreate(subscriptionId, resourceGroup, workspace, asset);
        // TODO: test validations
    }

    /**
     * Delete an Asset.
     *
     * Delete the specified Asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsDeleteTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String id = null;
        api.assetsDelete(subscriptionId, resourceGroup, workspace, id);
        // TODO: test validations
    }

    /**
     * Query the list of Assets in a workspace.
     *
     * If no filter is passed, the query lists all the Assets in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsListQueryTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String runId = null;
        String name = null;
        Integer count = null;
        String $skipToken = null;
        String tags = null;
        String properties = null;
        String orderby = null;
        PaginatedAssetList response = api.assetsListQuery(subscriptionId, resourceGroup, workspace, runId, name, count, $skipToken, tags, properties, orderby);
        // TODO: test validations
    }

    /**
     * Update an Asset.
     *
     * Patch a specific Asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsPatchTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String id = null;
        List<JsonPatchOperation> patch = null;
        Asset response = api.assetsPatch(subscriptionId, resourceGroup, workspace, id, patch);
        // TODO: test validations
    }

    /**
     * Get an Asset.
     *
     * Get an Asset by Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsQueryByIdTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroup = null;
        String workspace = null;
        String id = null;
        Asset response = api.assetsQueryById(subscriptionId, resourceGroup, workspace, id);
        // TODO: test validations
    }

}
