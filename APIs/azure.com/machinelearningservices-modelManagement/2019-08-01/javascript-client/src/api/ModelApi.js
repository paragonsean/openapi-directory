/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JsonPatchOperation from '../model/JsonPatchOperation';
import Model from '../model/Model';
import ModelErrorResponse from '../model/ModelErrorResponse';
import ModelOperationalState from '../model/ModelOperationalState';
import PaginatedModelList from '../model/PaginatedModelList';

/**
* Model service.
* @module api/ModelApi
* @version 2019-08-01
*/
export default class ModelApi {

    /**
    * Constructs a new ModelApi. 
    * @alias module:api/ModelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mLModelsDelete operation.
     * @callback module:api/ModelApi~mLModelsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified Model.
     * Deletes a model if it exists.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroup The Name of the resource group in which the workspace is located.
     * @param {String} workspace The name of the workspace.
     * @param {String} id The model id.
     * @param {module:api/ModelApi~mLModelsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mLModelsDelete(subscriptionId, resourceGroup, workspace, id, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mLModelsDelete");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling mLModelsDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling mLModelsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mLModelsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'workspace': workspace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mLModelsGetMetrics operation.
     * @callback module:api/ModelApi~mLModelsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelOperationalState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the metrics for a Model.
     * The operational events collected for the Model are returned.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroup The Name of the resource group in which the workspace is located.
     * @param {String} workspace The name of the workspace.
     * @param {String} id The Model Id.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] The start date from which to retrieve metrics, ISO 8601 literal format.
     * @param {String} [endDate] The end date from which to retrieve metrics, ISO 8601 literal format.
     * @param {module:api/ModelApi~mLModelsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelOperationalState}
     */
    mLModelsGetMetrics(subscriptionId, resourceGroup, workspace, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mLModelsGetMetrics");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling mLModelsGetMetrics");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling mLModelsGetMetrics");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mLModelsGetMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'workspace': workspace,
        'id': id
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelOperationalState;
      return this.apiClient.callApi(
        '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/{id}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mLModelsListQuery operation.
     * @callback module:api/ModelApi~mLModelsListQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedModelList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the list of Models in a workspace.
     * The result list can be filtered using tag and name. If no filter is passed, the query lists all the Models in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroup The Name of the resource group in which the workspace is located.
     * @param {String} workspace The name of the workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The object name.
     * @param {String} [framework] The framework.
     * @param {String} [description] The object description.
     * @param {Number} [count] The number of items to retrieve in a page.
     * @param {String} [skipToken] The continuation token to retrieve the next page.
     * @param {String} [tags] A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3
     * @param {String} [properties] A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3
     * @param {String} [runId] The runId which created the model.
     * @param {module:model/String} [orderBy = 'CreatedAtDesc')] An option to specify how the models are ordered in the response.
     * @param {module:api/ModelApi~mLModelsListQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedModelList}
     */
    mLModelsListQuery(subscriptionId, resourceGroup, workspace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mLModelsListQuery");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling mLModelsListQuery");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling mLModelsListQuery");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'workspace': workspace
      };
      let queryParams = {
        'name': opts['name'],
        'framework': opts['framework'],
        'description': opts['description'],
        'count': opts['count'],
        '$skipToken': opts['skipToken'],
        'tags': opts['tags'],
        'properties': opts['properties'],
        'runId': opts['runId'],
        'orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedModelList;
      return this.apiClient.callApi(
        '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mLModelsPatch operation.
     * @callback module:api/ModelApi~mLModelsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch a specific model.
     * Updates an existing model with the specified patch.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroup The Name of the resource group in which the workspace is located.
     * @param {String} workspace The name of the workspace.
     * @param {String} id The model id.
     * @param {Array.<module:model/JsonPatchOperation>} patch The payload that is used to patch the model.
     * @param {module:api/ModelApi~mLModelsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    mLModelsPatch(subscriptionId, resourceGroup, workspace, id, patch, callback) {
      let postBody = patch;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mLModelsPatch");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling mLModelsPatch");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling mLModelsPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mLModelsPatch");
      }
      // verify the required parameter 'patch' is set
      if (patch === undefined || patch === null) {
        throw new Error("Missing the required parameter 'patch' when calling mLModelsPatch");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'workspace': workspace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json-patch+json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mLModelsQueryById operation.
     * @callback module:api/ModelApi~mLModelsQueryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a model.
     * Gets a model by model id.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroup The Name of the resource group in which the workspace is located.
     * @param {String} workspace The name of the workspace.
     * @param {String} id The model id.
     * @param {module:api/ModelApi~mLModelsQueryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    mLModelsQueryById(subscriptionId, resourceGroup, workspace, id, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mLModelsQueryById");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling mLModelsQueryById");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling mLModelsQueryById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mLModelsQueryById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'workspace': workspace,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mLModelsRegister operation.
     * @callback module:api/ModelApi~mLModelsRegisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a model.
     * Register the model provided.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroup The Name of the resource group in which the workspace is located.
     * @param {String} workspace The name of the workspace.
     * @param {module:model/Model} model The payload that is used to register the model.
     * @param {module:api/ModelApi~mLModelsRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    mLModelsRegister(subscriptionId, resourceGroup, workspace, model, callback) {
      let postBody = model;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mLModelsRegister");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling mLModelsRegister");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling mLModelsRegister");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling mLModelsRegister");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
