/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDockerSection from './ModelDockerSection';
import ModelPythonSection from './ModelPythonSection';
import ModelSparkSection from './ModelSparkSection';

/**
 * The ModelEnvironmentDefinition model module.
 * @module model/ModelEnvironmentDefinition
 * @version 2019-08-01
 */
class ModelEnvironmentDefinition {
    /**
     * Constructs a new <code>ModelEnvironmentDefinition</code>.
     * @alias module:model/ModelEnvironmentDefinition
     */
    constructor() { 
        
        ModelEnvironmentDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelEnvironmentDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelEnvironmentDefinition} obj Optional instance to populate.
     * @return {module:model/ModelEnvironmentDefinition} The populated <code>ModelEnvironmentDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelEnvironmentDefinition();

            if (data.hasOwnProperty('docker')) {
                obj['docker'] = ModelDockerSection.constructFromObject(data['docker']);
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], {'String': 'String'});
            }
            if (data.hasOwnProperty('inferencingStackVersion')) {
                obj['inferencingStackVersion'] = ApiClient.convertToType(data['inferencingStackVersion'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('python')) {
                obj['python'] = ModelPythonSection.constructFromObject(data['python']);
            }
            if (data.hasOwnProperty('spark')) {
                obj['spark'] = ModelSparkSection.constructFromObject(data['spark']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelEnvironmentDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelEnvironmentDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `docker`
        if (data['docker']) { // data not null
          ModelDockerSection.validateJSON(data['docker']);
        }
        // ensure the json data is a string
        if (data['inferencingStackVersion'] && !(typeof data['inferencingStackVersion'] === 'string' || data['inferencingStackVersion'] instanceof String)) {
            throw new Error("Expected the field `inferencingStackVersion` to be a primitive type in the JSON string but got " + data['inferencingStackVersion']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `python`
        if (data['python']) { // data not null
          ModelPythonSection.validateJSON(data['python']);
        }
        // validate the optional field `spark`
        if (data['spark']) { // data not null
          ModelSparkSection.validateJSON(data['spark']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/ModelDockerSection} docker
 */
ModelEnvironmentDefinition.prototype['docker'] = undefined;

/**
 * Definition of environment variables to be defined in the environment.
 * @member {Object.<String, String>} environmentVariables
 */
ModelEnvironmentDefinition.prototype['environmentVariables'] = undefined;

/**
 * The Inferencing stack version.
 * @member {String} inferencingStackVersion
 */
ModelEnvironmentDefinition.prototype['inferencingStackVersion'] = undefined;

/**
 * The name of the environment.
 * @member {String} name
 */
ModelEnvironmentDefinition.prototype['name'] = undefined;

/**
 * @member {module:model/ModelPythonSection} python
 */
ModelEnvironmentDefinition.prototype['python'] = undefined;

/**
 * @member {module:model/ModelSparkSection} spark
 */
ModelEnvironmentDefinition.prototype['spark'] = undefined;

/**
 * The environment version.
 * @member {String} version
 */
ModelEnvironmentDefinition.prototype['version'] = undefined;






export default ModelEnvironmentDefinition;

