/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelErrorResponse from './ModelErrorResponse';

/**
 * The ProfileResponse model module.
 * @module model/ProfileResponse
 * @version 2019-08-01
 */
class ProfileResponse {
    /**
     * Constructs a new <code>ProfileResponse</code>.
     * The profile response.
     * @alias module:model/ProfileResponse
     */
    constructor() { 
        
        ProfileResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProfileResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfileResponse} obj Optional instance to populate.
     * @return {module:model/ProfileResponse} The populated <code>ProfileResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfileResponse();

            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ModelErrorResponse.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('imageId')) {
                obj['imageId'] = ApiClient.convertToType(data['imageId'], 'String');
            }
            if (data.hasOwnProperty('inputData')) {
                obj['inputData'] = ApiClient.convertToType(data['inputData'], 'String');
            }
            if (data.hasOwnProperty('kvTags')) {
                obj['kvTags'] = ApiClient.convertToType(data['kvTags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('profileRunResult')) {
                obj['profileRunResult'] = ApiClient.convertToType(data['profileRunResult'], 'String');
            }
            if (data.hasOwnProperty('profilingErrorLogs')) {
                obj['profilingErrorLogs'] = ApiClient.convertToType(data['profilingErrorLogs'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('recommendationLatencyInMs')) {
                obj['recommendationLatencyInMs'] = ApiClient.convertToType(data['recommendationLatencyInMs'], 'Number');
            }
            if (data.hasOwnProperty('recommendedCpu')) {
                obj['recommendedCpu'] = ApiClient.convertToType(data['recommendedCpu'], 'Number');
            }
            if (data.hasOwnProperty('recommendedMemoryInGB')) {
                obj['recommendedMemoryInGB'] = ApiClient.convertToType(data['recommendedMemoryInGB'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProfileResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProfileResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          ModelErrorResponse.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['imageId'] && !(typeof data['imageId'] === 'string' || data['imageId'] instanceof String)) {
            throw new Error("Expected the field `imageId` to be a primitive type in the JSON string but got " + data['imageId']);
        }
        // ensure the json data is a string
        if (data['inputData'] && !(typeof data['inputData'] === 'string' || data['inputData'] instanceof String)) {
            throw new Error("Expected the field `inputData` to be a primitive type in the JSON string but got " + data['inputData']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['profileRunResult'] && !(typeof data['profileRunResult'] === 'string' || data['profileRunResult'] instanceof String)) {
            throw new Error("Expected the field `profileRunResult` to be a primitive type in the JSON string but got " + data['profileRunResult']);
        }
        // ensure the json data is a string
        if (data['profilingErrorLogs'] && !(typeof data['profilingErrorLogs'] === 'string' || data['profilingErrorLogs'] instanceof String)) {
            throw new Error("Expected the field `profilingErrorLogs` to be a primitive type in the JSON string but got " + data['profilingErrorLogs']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The profile creation time (UTC).
 * @member {Date} createdTime
 */
ProfileResponse.prototype['createdTime'] = undefined;

/**
 * The profile description.
 * @member {String} description
 */
ProfileResponse.prototype['description'] = undefined;

/**
 * @member {module:model/ModelErrorResponse} error
 */
ProfileResponse.prototype['error'] = undefined;

/**
 * The Image Id.
 * @member {String} imageId
 */
ProfileResponse.prototype['imageId'] = undefined;

/**
 * The input data.
 * @member {String} inputData
 */
ProfileResponse.prototype['inputData'] = undefined;

/**
 * The profile tags dictionary. Tags are mutable.
 * @member {Object.<String, String>} kvTags
 */
ProfileResponse.prototype['kvTags'] = undefined;

/**
 * The profile name.
 * @member {String} name
 */
ProfileResponse.prototype['name'] = undefined;

/**
 * The profile run result.
 * @member {String} profileRunResult
 */
ProfileResponse.prototype['profileRunResult'] = undefined;

/**
 * The profiling error logs.
 * @member {String} profilingErrorLogs
 */
ProfileResponse.prototype['profilingErrorLogs'] = undefined;

/**
 * The profile properties dictionary. Properties are immutable.
 * @member {Object.<String, String>} properties
 */
ProfileResponse.prototype['properties'] = undefined;

/**
 * Latency associated with the recommended memory/cpu config
 * @member {Number} recommendationLatencyInMs
 */
ProfileResponse.prototype['recommendationLatencyInMs'] = undefined;

/**
 * The recommended CPU allocation.
 * @member {Number} recommendedCpu
 */
ProfileResponse.prototype['recommendedCpu'] = undefined;

/**
 * The recommended amount of memory to allocate in GB.
 * @member {Number} recommendedMemoryInGB
 */
ProfileResponse.prototype['recommendedMemoryInGB'] = undefined;

/**
 * The state of the profile.
 * @member {String} state
 */
ProfileResponse.prototype['state'] = undefined;






export default ProfileResponse;

