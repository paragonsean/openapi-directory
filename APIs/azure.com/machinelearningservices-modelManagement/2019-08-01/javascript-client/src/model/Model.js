/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatasetReference from './DatasetReference';

/**
 * The Model model module.
 * @module model/Model
 * @version 2019-08-01
 */
class Model {
    /**
     * Constructs a new <code>Model</code>.
     * An Azure Machine Learning Model.
     * @alias module:model/Model
     * @param mimeType {String} The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
     * @param name {String} The Model name.
     * @param url {String} The URL of the Model. Usually a SAS URL.
     */
    constructor(mimeType, name, url) { 
        
        Model.initialize(this, mimeType, name, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mimeType, name, url) { 
        obj['mimeType'] = mimeType;
        obj['name'] = name;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Model} obj Optional instance to populate.
     * @return {module:model/Model} The populated <code>Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Model();

            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('datasets')) {
                obj['datasets'] = ApiClient.convertToType(data['datasets'], [DatasetReference]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('experimentName')) {
                obj['experimentName'] = ApiClient.convertToType(data['experimentName'], 'String');
            }
            if (data.hasOwnProperty('framework')) {
                obj['framework'] = ApiClient.convertToType(data['framework'], 'String');
            }
            if (data.hasOwnProperty('frameworkVersion')) {
                obj['frameworkVersion'] = ApiClient.convertToType(data['frameworkVersion'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kvTags')) {
                obj['kvTags'] = ApiClient.convertToType(data['kvTags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('modifiedTime')) {
                obj['modifiedTime'] = ApiClient.convertToType(data['modifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentModelId')) {
                obj['parentModelId'] = ApiClient.convertToType(data['parentModelId'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('runId')) {
                obj['runId'] = ApiClient.convertToType(data['runId'], 'String');
            }
            if (data.hasOwnProperty('unpack')) {
                obj['unpack'] = ApiClient.convertToType(data['unpack'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Model</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Model.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['datasets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['datasets'])) {
                throw new Error("Expected the field `datasets` to be an array in the JSON data but got " + data['datasets']);
            }
            // validate the optional field `datasets` (array)
            for (const item of data['datasets']) {
                DatasetReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['experimentName'] && !(typeof data['experimentName'] === 'string' || data['experimentName'] instanceof String)) {
            throw new Error("Expected the field `experimentName` to be a primitive type in the JSON string but got " + data['experimentName']);
        }
        // ensure the json data is a string
        if (data['framework'] && !(typeof data['framework'] === 'string' || data['framework'] instanceof String)) {
            throw new Error("Expected the field `framework` to be a primitive type in the JSON string but got " + data['framework']);
        }
        // ensure the json data is a string
        if (data['frameworkVersion'] && !(typeof data['frameworkVersion'] === 'string' || data['frameworkVersion'] instanceof String)) {
            throw new Error("Expected the field `frameworkVersion` to be a primitive type in the JSON string but got " + data['frameworkVersion']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentModelId'] && !(typeof data['parentModelId'] === 'string' || data['parentModelId'] instanceof String)) {
            throw new Error("Expected the field `parentModelId` to be a primitive type in the JSON string but got " + data['parentModelId']);
        }
        // ensure the json data is a string
        if (data['runId'] && !(typeof data['runId'] === 'string' || data['runId'] instanceof String)) {
            throw new Error("Expected the field `runId` to be a primitive type in the JSON string but got " + data['runId']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Model.RequiredProperties = ["mimeType", "name", "url"];

/**
 * The Model creation time (UTC).
 * @member {Date} createdTime
 */
Model.prototype['createdTime'] = undefined;

/**
 * The list of datasets associated with the model.
 * @member {Array.<module:model/DatasetReference>} datasets
 */
Model.prototype['datasets'] = undefined;

/**
 * The Model description text.
 * @member {String} description
 */
Model.prototype['description'] = undefined;

/**
 * The name of the experiment where this model was created.
 * @member {String} experimentName
 */
Model.prototype['experimentName'] = undefined;

/**
 * The Model framework.
 * @member {String} framework
 */
Model.prototype['framework'] = undefined;

/**
 * The Model framework version.
 * @member {String} frameworkVersion
 */
Model.prototype['frameworkVersion'] = undefined;

/**
 * The Model Id.
 * @member {String} id
 */
Model.prototype['id'] = undefined;

/**
 * The Model tag dictionary. Items are mutable.
 * @member {Object.<String, String>} kvTags
 */
Model.prototype['kvTags'] = undefined;

/**
 * The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
 * @member {String} mimeType
 */
Model.prototype['mimeType'] = undefined;

/**
 * The Model last modified time (UTC).
 * @member {Date} modifiedTime
 */
Model.prototype['modifiedTime'] = undefined;

/**
 * The Model name.
 * @member {String} name
 */
Model.prototype['name'] = undefined;

/**
 * The Parent Model Id.
 * @member {String} parentModelId
 */
Model.prototype['parentModelId'] = undefined;

/**
 * The Model property dictionary. Properties are immutable.
 * @member {Object.<String, String>} properties
 */
Model.prototype['properties'] = undefined;

/**
 * The RunId that created this model.
 * @member {String} runId
 */
Model.prototype['runId'] = undefined;

/**
 * Indicates whether we need to unpack the Model during docker Image creation.
 * @member {Boolean} unpack
 */
Model.prototype['unpack'] = undefined;

/**
 * The URL of the Model. Usually a SAS URL.
 * @member {String} url
 */
Model.prototype['url'] = undefined;

/**
 * The Model version assigned by Model Management Service.
 * @member {Number} version
 */
Model.prototype['version'] = undefined;






export default Model;

