/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIACIServiceCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIACIServiceCreateRequest::OAIACIServiceCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIACIServiceCreateRequest::OAIACIServiceCreateRequest() {
    this->initializeModel();
}

OAIACIServiceCreateRequest::~OAIACIServiceCreateRequest() {}

void OAIACIServiceCreateRequest::initializeModel() {

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_deployment_type_isSet = false;
    m_deployment_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_image_request_isSet = false;
    m_environment_image_request_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_kv_tags_isSet = false;
    m_kv_tags_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_app_insights_enabled_isSet = false;
    m_app_insights_enabled_isValid = false;

    m_auth_enabled_isSet = false;
    m_auth_enabled_isValid = false;

    m_cname_isSet = false;
    m_cname_isValid = false;

    m_container_resource_requirements_isSet = false;
    m_container_resource_requirements_isValid = false;

    m_data_collection_isSet = false;
    m_data_collection_isValid = false;

    m_dns_name_label_isSet = false;
    m_dns_name_label_isValid = false;

    m_ssl_certificate_isSet = false;
    m_ssl_certificate_isValid = false;

    m_ssl_enabled_isSet = false;
    m_ssl_enabled_isValid = false;

    m_ssl_key_isSet = false;
    m_ssl_key_isValid = false;
}

void OAIACIServiceCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIACIServiceCreateRequest::fromJsonObject(QJsonObject json) {

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_deployment_type_isValid = ::OpenAPI::fromJsonValue(m_deployment_type, json[QString("deploymentType")]);
    m_deployment_type_isSet = !json[QString("deploymentType")].isNull() && m_deployment_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environment_image_request_isValid = ::OpenAPI::fromJsonValue(m_environment_image_request, json[QString("environmentImageRequest")]);
    m_environment_image_request_isSet = !json[QString("environmentImageRequest")].isNull() && m_environment_image_request_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_kv_tags_isValid = ::OpenAPI::fromJsonValue(m_kv_tags, json[QString("kvTags")]);
    m_kv_tags_isSet = !json[QString("kvTags")].isNull() && m_kv_tags_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_app_insights_enabled_isValid = ::OpenAPI::fromJsonValue(m_app_insights_enabled, json[QString("appInsightsEnabled")]);
    m_app_insights_enabled_isSet = !json[QString("appInsightsEnabled")].isNull() && m_app_insights_enabled_isValid;

    m_auth_enabled_isValid = ::OpenAPI::fromJsonValue(m_auth_enabled, json[QString("authEnabled")]);
    m_auth_enabled_isSet = !json[QString("authEnabled")].isNull() && m_auth_enabled_isValid;

    m_cname_isValid = ::OpenAPI::fromJsonValue(m_cname, json[QString("cname")]);
    m_cname_isSet = !json[QString("cname")].isNull() && m_cname_isValid;

    m_container_resource_requirements_isValid = ::OpenAPI::fromJsonValue(m_container_resource_requirements, json[QString("containerResourceRequirements")]);
    m_container_resource_requirements_isSet = !json[QString("containerResourceRequirements")].isNull() && m_container_resource_requirements_isValid;

    m_data_collection_isValid = ::OpenAPI::fromJsonValue(m_data_collection, json[QString("dataCollection")]);
    m_data_collection_isSet = !json[QString("dataCollection")].isNull() && m_data_collection_isValid;

    m_dns_name_label_isValid = ::OpenAPI::fromJsonValue(m_dns_name_label, json[QString("dnsNameLabel")]);
    m_dns_name_label_isSet = !json[QString("dnsNameLabel")].isNull() && m_dns_name_label_isValid;

    m_ssl_certificate_isValid = ::OpenAPI::fromJsonValue(m_ssl_certificate, json[QString("sslCertificate")]);
    m_ssl_certificate_isSet = !json[QString("sslCertificate")].isNull() && m_ssl_certificate_isValid;

    m_ssl_enabled_isValid = ::OpenAPI::fromJsonValue(m_ssl_enabled, json[QString("sslEnabled")]);
    m_ssl_enabled_isSet = !json[QString("sslEnabled")].isNull() && m_ssl_enabled_isValid;

    m_ssl_key_isValid = ::OpenAPI::fromJsonValue(m_ssl_key, json[QString("sslKey")]);
    m_ssl_key_isSet = !json[QString("sslKey")].isNull() && m_ssl_key_isValid;
}

QString OAIACIServiceCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIACIServiceCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_type_isSet) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_deployment_type_isSet) {
        obj.insert(QString("deploymentType"), ::OpenAPI::toJsonValue(m_deployment_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment_image_request.isSet()) {
        obj.insert(QString("environmentImageRequest"), ::OpenAPI::toJsonValue(m_environment_image_request));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_kv_tags.size() > 0) {
        obj.insert(QString("kvTags"), ::OpenAPI::toJsonValue(m_kv_tags));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_app_insights_enabled_isSet) {
        obj.insert(QString("appInsightsEnabled"), ::OpenAPI::toJsonValue(m_app_insights_enabled));
    }
    if (m_auth_enabled_isSet) {
        obj.insert(QString("authEnabled"), ::OpenAPI::toJsonValue(m_auth_enabled));
    }
    if (m_cname_isSet) {
        obj.insert(QString("cname"), ::OpenAPI::toJsonValue(m_cname));
    }
    if (m_container_resource_requirements.isSet()) {
        obj.insert(QString("containerResourceRequirements"), ::OpenAPI::toJsonValue(m_container_resource_requirements));
    }
    if (m_data_collection.isSet()) {
        obj.insert(QString("dataCollection"), ::OpenAPI::toJsonValue(m_data_collection));
    }
    if (m_dns_name_label_isSet) {
        obj.insert(QString("dnsNameLabel"), ::OpenAPI::toJsonValue(m_dns_name_label));
    }
    if (m_ssl_certificate_isSet) {
        obj.insert(QString("sslCertificate"), ::OpenAPI::toJsonValue(m_ssl_certificate));
    }
    if (m_ssl_enabled_isSet) {
        obj.insert(QString("sslEnabled"), ::OpenAPI::toJsonValue(m_ssl_enabled));
    }
    if (m_ssl_key_isSet) {
        obj.insert(QString("sslKey"), ::OpenAPI::toJsonValue(m_ssl_key));
    }
    return obj;
}

QString OAIACIServiceCreateRequest::getComputeType() const {
    return m_compute_type;
}
void OAIACIServiceCreateRequest::setComputeType(const QString &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAIACIServiceCreateRequest::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAIACIServiceCreateRequest::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

QString OAIACIServiceCreateRequest::getDeploymentType() const {
    return m_deployment_type;
}
void OAIACIServiceCreateRequest::setDeploymentType(const QString &deployment_type) {
    m_deployment_type = deployment_type;
    m_deployment_type_isSet = true;
}

bool OAIACIServiceCreateRequest::is_deployment_type_Set() const{
    return m_deployment_type_isSet;
}

bool OAIACIServiceCreateRequest::is_deployment_type_Valid() const{
    return m_deployment_type_isValid;
}

QString OAIACIServiceCreateRequest::getDescription() const {
    return m_description;
}
void OAIACIServiceCreateRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIACIServiceCreateRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIACIServiceCreateRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIEnvironmentImageRequest OAIACIServiceCreateRequest::getEnvironmentImageRequest() const {
    return m_environment_image_request;
}
void OAIACIServiceCreateRequest::setEnvironmentImageRequest(const OAIEnvironmentImageRequest &environment_image_request) {
    m_environment_image_request = environment_image_request;
    m_environment_image_request_isSet = true;
}

bool OAIACIServiceCreateRequest::is_environment_image_request_Set() const{
    return m_environment_image_request_isSet;
}

bool OAIACIServiceCreateRequest::is_environment_image_request_Valid() const{
    return m_environment_image_request_isValid;
}

QString OAIACIServiceCreateRequest::getImageId() const {
    return m_image_id;
}
void OAIACIServiceCreateRequest::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIACIServiceCreateRequest::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIACIServiceCreateRequest::is_image_id_Valid() const{
    return m_image_id_isValid;
}

OAIAuthKeys OAIACIServiceCreateRequest::getKeys() const {
    return m_keys;
}
void OAIACIServiceCreateRequest::setKeys(const OAIAuthKeys &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIACIServiceCreateRequest::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIACIServiceCreateRequest::is_keys_Valid() const{
    return m_keys_isValid;
}

QMap<QString, QString> OAIACIServiceCreateRequest::getKvTags() const {
    return m_kv_tags;
}
void OAIACIServiceCreateRequest::setKvTags(const QMap<QString, QString> &kv_tags) {
    m_kv_tags = kv_tags;
    m_kv_tags_isSet = true;
}

bool OAIACIServiceCreateRequest::is_kv_tags_Set() const{
    return m_kv_tags_isSet;
}

bool OAIACIServiceCreateRequest::is_kv_tags_Valid() const{
    return m_kv_tags_isValid;
}

QString OAIACIServiceCreateRequest::getLocation() const {
    return m_location;
}
void OAIACIServiceCreateRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIACIServiceCreateRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIACIServiceCreateRequest::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIACIServiceCreateRequest::getName() const {
    return m_name;
}
void OAIACIServiceCreateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIACIServiceCreateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIACIServiceCreateRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAIACIServiceCreateRequest::getProperties() const {
    return m_properties;
}
void OAIACIServiceCreateRequest::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIACIServiceCreateRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIACIServiceCreateRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIACIServiceCreateRequest::isAppInsightsEnabled() const {
    return m_app_insights_enabled;
}
void OAIACIServiceCreateRequest::setAppInsightsEnabled(const bool &app_insights_enabled) {
    m_app_insights_enabled = app_insights_enabled;
    m_app_insights_enabled_isSet = true;
}

bool OAIACIServiceCreateRequest::is_app_insights_enabled_Set() const{
    return m_app_insights_enabled_isSet;
}

bool OAIACIServiceCreateRequest::is_app_insights_enabled_Valid() const{
    return m_app_insights_enabled_isValid;
}

bool OAIACIServiceCreateRequest::isAuthEnabled() const {
    return m_auth_enabled;
}
void OAIACIServiceCreateRequest::setAuthEnabled(const bool &auth_enabled) {
    m_auth_enabled = auth_enabled;
    m_auth_enabled_isSet = true;
}

bool OAIACIServiceCreateRequest::is_auth_enabled_Set() const{
    return m_auth_enabled_isSet;
}

bool OAIACIServiceCreateRequest::is_auth_enabled_Valid() const{
    return m_auth_enabled_isValid;
}

QString OAIACIServiceCreateRequest::getCname() const {
    return m_cname;
}
void OAIACIServiceCreateRequest::setCname(const QString &cname) {
    m_cname = cname;
    m_cname_isSet = true;
}

bool OAIACIServiceCreateRequest::is_cname_Set() const{
    return m_cname_isSet;
}

bool OAIACIServiceCreateRequest::is_cname_Valid() const{
    return m_cname_isValid;
}

OAIContainerResourceRequirements OAIACIServiceCreateRequest::getContainerResourceRequirements() const {
    return m_container_resource_requirements;
}
void OAIACIServiceCreateRequest::setContainerResourceRequirements(const OAIContainerResourceRequirements &container_resource_requirements) {
    m_container_resource_requirements = container_resource_requirements;
    m_container_resource_requirements_isSet = true;
}

bool OAIACIServiceCreateRequest::is_container_resource_requirements_Set() const{
    return m_container_resource_requirements_isSet;
}

bool OAIACIServiceCreateRequest::is_container_resource_requirements_Valid() const{
    return m_container_resource_requirements_isValid;
}

OAIModelDataCollection OAIACIServiceCreateRequest::getDataCollection() const {
    return m_data_collection;
}
void OAIACIServiceCreateRequest::setDataCollection(const OAIModelDataCollection &data_collection) {
    m_data_collection = data_collection;
    m_data_collection_isSet = true;
}

bool OAIACIServiceCreateRequest::is_data_collection_Set() const{
    return m_data_collection_isSet;
}

bool OAIACIServiceCreateRequest::is_data_collection_Valid() const{
    return m_data_collection_isValid;
}

QString OAIACIServiceCreateRequest::getDnsNameLabel() const {
    return m_dns_name_label;
}
void OAIACIServiceCreateRequest::setDnsNameLabel(const QString &dns_name_label) {
    m_dns_name_label = dns_name_label;
    m_dns_name_label_isSet = true;
}

bool OAIACIServiceCreateRequest::is_dns_name_label_Set() const{
    return m_dns_name_label_isSet;
}

bool OAIACIServiceCreateRequest::is_dns_name_label_Valid() const{
    return m_dns_name_label_isValid;
}

QString OAIACIServiceCreateRequest::getSslCertificate() const {
    return m_ssl_certificate;
}
void OAIACIServiceCreateRequest::setSslCertificate(const QString &ssl_certificate) {
    m_ssl_certificate = ssl_certificate;
    m_ssl_certificate_isSet = true;
}

bool OAIACIServiceCreateRequest::is_ssl_certificate_Set() const{
    return m_ssl_certificate_isSet;
}

bool OAIACIServiceCreateRequest::is_ssl_certificate_Valid() const{
    return m_ssl_certificate_isValid;
}

bool OAIACIServiceCreateRequest::isSslEnabled() const {
    return m_ssl_enabled;
}
void OAIACIServiceCreateRequest::setSslEnabled(const bool &ssl_enabled) {
    m_ssl_enabled = ssl_enabled;
    m_ssl_enabled_isSet = true;
}

bool OAIACIServiceCreateRequest::is_ssl_enabled_Set() const{
    return m_ssl_enabled_isSet;
}

bool OAIACIServiceCreateRequest::is_ssl_enabled_Valid() const{
    return m_ssl_enabled_isValid;
}

QString OAIACIServiceCreateRequest::getSslKey() const {
    return m_ssl_key;
}
void OAIACIServiceCreateRequest::setSslKey(const QString &ssl_key) {
    m_ssl_key = ssl_key;
    m_ssl_key_isSet = true;
}

bool OAIACIServiceCreateRequest::is_ssl_key_Set() const{
    return m_ssl_key_isSet;
}

bool OAIACIServiceCreateRequest::is_ssl_key_Valid() const{
    return m_ssl_key_isValid;
}

bool OAIACIServiceCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_image_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kv_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_insights_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_resource_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIACIServiceCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compute_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
