/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageResponseBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageResponseBase::OAIImageResponseBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageResponseBase::OAIImageResponseBase() {
    this->initializeModel();
}

OAIImageResponseBase::~OAIImageResponseBase() {}

void OAIImageResponseBase::initializeModel() {

    m_auto_delete_isSet = false;
    m_auto_delete_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_creation_state_isSet = false;
    m_creation_state_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_build_log_uri_isSet = false;
    m_image_build_log_uri_isValid = false;

    m_image_flavor_isSet = false;
    m_image_flavor_isValid = false;

    m_image_location_isSet = false;
    m_image_location_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_kv_tags_isSet = false;
    m_kv_tags_isValid = false;

    m_model_details_isSet = false;
    m_model_details_isValid = false;

    m_model_ids_isSet = false;
    m_model_ids_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIImageResponseBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageResponseBase::fromJsonObject(QJsonObject json) {

    m_auto_delete_isValid = ::OpenAPI::fromJsonValue(m_auto_delete, json[QString("autoDelete")]);
    m_auto_delete_isSet = !json[QString("autoDelete")].isNull() && m_auto_delete_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_creation_state_isValid = ::OpenAPI::fromJsonValue(m_creation_state, json[QString("creationState")]);
    m_creation_state_isSet = !json[QString("creationState")].isNull() && m_creation_state_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_build_log_uri_isValid = ::OpenAPI::fromJsonValue(m_image_build_log_uri, json[QString("imageBuildLogUri")]);
    m_image_build_log_uri_isSet = !json[QString("imageBuildLogUri")].isNull() && m_image_build_log_uri_isValid;

    m_image_flavor_isValid = ::OpenAPI::fromJsonValue(m_image_flavor, json[QString("imageFlavor")]);
    m_image_flavor_isSet = !json[QString("imageFlavor")].isNull() && m_image_flavor_isValid;

    m_image_location_isValid = ::OpenAPI::fromJsonValue(m_image_location, json[QString("imageLocation")]);
    m_image_location_isSet = !json[QString("imageLocation")].isNull() && m_image_location_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_kv_tags_isValid = ::OpenAPI::fromJsonValue(m_kv_tags, json[QString("kvTags")]);
    m_kv_tags_isSet = !json[QString("kvTags")].isNull() && m_kv_tags_isValid;

    m_model_details_isValid = ::OpenAPI::fromJsonValue(m_model_details, json[QString("modelDetails")]);
    m_model_details_isSet = !json[QString("modelDetails")].isNull() && m_model_details_isValid;

    m_model_ids_isValid = ::OpenAPI::fromJsonValue(m_model_ids, json[QString("modelIds")]);
    m_model_ids_isSet = !json[QString("modelIds")].isNull() && m_model_ids_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modifiedTime")]);
    m_modified_time_isSet = !json[QString("modifiedTime")].isNull() && m_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIImageResponseBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageResponseBase::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_delete_isSet) {
        obj.insert(QString("autoDelete"), ::OpenAPI::toJsonValue(m_auto_delete));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_creation_state_isSet) {
        obj.insert(QString("creationState"), ::OpenAPI::toJsonValue(m_creation_state));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_build_log_uri_isSet) {
        obj.insert(QString("imageBuildLogUri"), ::OpenAPI::toJsonValue(m_image_build_log_uri));
    }
    if (m_image_flavor_isSet) {
        obj.insert(QString("imageFlavor"), ::OpenAPI::toJsonValue(m_image_flavor));
    }
    if (m_image_location_isSet) {
        obj.insert(QString("imageLocation"), ::OpenAPI::toJsonValue(m_image_location));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_kv_tags.size() > 0) {
        obj.insert(QString("kvTags"), ::OpenAPI::toJsonValue(m_kv_tags));
    }
    if (m_model_details.size() > 0) {
        obj.insert(QString("modelDetails"), ::OpenAPI::toJsonValue(m_model_details));
    }
    if (m_model_ids.size() > 0) {
        obj.insert(QString("modelIds"), ::OpenAPI::toJsonValue(m_model_ids));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modifiedTime"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIImageResponseBase::isAutoDelete() const {
    return m_auto_delete;
}
void OAIImageResponseBase::setAutoDelete(const bool &auto_delete) {
    m_auto_delete = auto_delete;
    m_auto_delete_isSet = true;
}

bool OAIImageResponseBase::is_auto_delete_Set() const{
    return m_auto_delete_isSet;
}

bool OAIImageResponseBase::is_auto_delete_Valid() const{
    return m_auto_delete_isValid;
}

QDateTime OAIImageResponseBase::getCreatedTime() const {
    return m_created_time;
}
void OAIImageResponseBase::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIImageResponseBase::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIImageResponseBase::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIImageResponseBase::getCreationState() const {
    return m_creation_state;
}
void OAIImageResponseBase::setCreationState(const QString &creation_state) {
    m_creation_state = creation_state;
    m_creation_state_isSet = true;
}

bool OAIImageResponseBase::is_creation_state_Set() const{
    return m_creation_state_isSet;
}

bool OAIImageResponseBase::is_creation_state_Valid() const{
    return m_creation_state_isValid;
}

QString OAIImageResponseBase::getDescription() const {
    return m_description;
}
void OAIImageResponseBase::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImageResponseBase::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImageResponseBase::is_description_Valid() const{
    return m_description_isValid;
}

OAIModelErrorResponse OAIImageResponseBase::getError() const {
    return m_error;
}
void OAIImageResponseBase::setError(const OAIModelErrorResponse &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIImageResponseBase::is_error_Set() const{
    return m_error_isSet;
}

bool OAIImageResponseBase::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIImageResponseBase::getId() const {
    return m_id;
}
void OAIImageResponseBase::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageResponseBase::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageResponseBase::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImageResponseBase::getImageBuildLogUri() const {
    return m_image_build_log_uri;
}
void OAIImageResponseBase::setImageBuildLogUri(const QString &image_build_log_uri) {
    m_image_build_log_uri = image_build_log_uri;
    m_image_build_log_uri_isSet = true;
}

bool OAIImageResponseBase::is_image_build_log_uri_Set() const{
    return m_image_build_log_uri_isSet;
}

bool OAIImageResponseBase::is_image_build_log_uri_Valid() const{
    return m_image_build_log_uri_isValid;
}

QString OAIImageResponseBase::getImageFlavor() const {
    return m_image_flavor;
}
void OAIImageResponseBase::setImageFlavor(const QString &image_flavor) {
    m_image_flavor = image_flavor;
    m_image_flavor_isSet = true;
}

bool OAIImageResponseBase::is_image_flavor_Set() const{
    return m_image_flavor_isSet;
}

bool OAIImageResponseBase::is_image_flavor_Valid() const{
    return m_image_flavor_isValid;
}

QString OAIImageResponseBase::getImageLocation() const {
    return m_image_location;
}
void OAIImageResponseBase::setImageLocation(const QString &image_location) {
    m_image_location = image_location;
    m_image_location_isSet = true;
}

bool OAIImageResponseBase::is_image_location_Set() const{
    return m_image_location_isSet;
}

bool OAIImageResponseBase::is_image_location_Valid() const{
    return m_image_location_isValid;
}

QString OAIImageResponseBase::getImageType() const {
    return m_image_type;
}
void OAIImageResponseBase::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIImageResponseBase::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIImageResponseBase::is_image_type_Valid() const{
    return m_image_type_isValid;
}

QMap<QString, QString> OAIImageResponseBase::getKvTags() const {
    return m_kv_tags;
}
void OAIImageResponseBase::setKvTags(const QMap<QString, QString> &kv_tags) {
    m_kv_tags = kv_tags;
    m_kv_tags_isSet = true;
}

bool OAIImageResponseBase::is_kv_tags_Set() const{
    return m_kv_tags_isSet;
}

bool OAIImageResponseBase::is_kv_tags_Valid() const{
    return m_kv_tags_isValid;
}

QList<OAIModel> OAIImageResponseBase::getModelDetails() const {
    return m_model_details;
}
void OAIImageResponseBase::setModelDetails(const QList<OAIModel> &model_details) {
    m_model_details = model_details;
    m_model_details_isSet = true;
}

bool OAIImageResponseBase::is_model_details_Set() const{
    return m_model_details_isSet;
}

bool OAIImageResponseBase::is_model_details_Valid() const{
    return m_model_details_isValid;
}

QList<QString> OAIImageResponseBase::getModelIds() const {
    return m_model_ids;
}
void OAIImageResponseBase::setModelIds(const QList<QString> &model_ids) {
    m_model_ids = model_ids;
    m_model_ids_isSet = true;
}

bool OAIImageResponseBase::is_model_ids_Set() const{
    return m_model_ids_isSet;
}

bool OAIImageResponseBase::is_model_ids_Valid() const{
    return m_model_ids_isValid;
}

QDateTime OAIImageResponseBase::getModifiedTime() const {
    return m_modified_time;
}
void OAIImageResponseBase::setModifiedTime(const QDateTime &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIImageResponseBase::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIImageResponseBase::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

QString OAIImageResponseBase::getName() const {
    return m_name;
}
void OAIImageResponseBase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageResponseBase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageResponseBase::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageResponseBase::getOperationId() const {
    return m_operation_id;
}
void OAIImageResponseBase::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIImageResponseBase::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIImageResponseBase::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QMap<QString, QString> OAIImageResponseBase::getProperties() const {
    return m_properties;
}
void OAIImageResponseBase::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIImageResponseBase::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIImageResponseBase::is_properties_Valid() const{
    return m_properties_isValid;
}

qint64 OAIImageResponseBase::getVersion() const {
    return m_version;
}
void OAIImageResponseBase::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIImageResponseBase::is_version_Set() const{
    return m_version_isSet;
}

bool OAIImageResponseBase::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIImageResponseBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_build_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_flavor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kv_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageResponseBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_flavor_isValid && true;
}

} // namespace OpenAPI
