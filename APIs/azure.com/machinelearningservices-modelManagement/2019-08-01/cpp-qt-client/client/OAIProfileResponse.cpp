/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileResponse::OAIProfileResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileResponse::OAIProfileResponse() {
    this->initializeModel();
}

OAIProfileResponse::~OAIProfileResponse() {}

void OAIProfileResponse::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_input_data_isSet = false;
    m_input_data_isValid = false;

    m_kv_tags_isSet = false;
    m_kv_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_profile_run_result_isSet = false;
    m_profile_run_result_isValid = false;

    m_profiling_error_logs_isSet = false;
    m_profiling_error_logs_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_recommendation_latency_in_ms_isSet = false;
    m_recommendation_latency_in_ms_isValid = false;

    m_recommended_cpu_isSet = false;
    m_recommended_cpu_isValid = false;

    m_recommended_memory_in_gb_isSet = false;
    m_recommended_memory_in_gb_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIProfileResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileResponse::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_input_data_isValid = ::OpenAPI::fromJsonValue(m_input_data, json[QString("inputData")]);
    m_input_data_isSet = !json[QString("inputData")].isNull() && m_input_data_isValid;

    m_kv_tags_isValid = ::OpenAPI::fromJsonValue(m_kv_tags, json[QString("kvTags")]);
    m_kv_tags_isSet = !json[QString("kvTags")].isNull() && m_kv_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_profile_run_result_isValid = ::OpenAPI::fromJsonValue(m_profile_run_result, json[QString("profileRunResult")]);
    m_profile_run_result_isSet = !json[QString("profileRunResult")].isNull() && m_profile_run_result_isValid;

    m_profiling_error_logs_isValid = ::OpenAPI::fromJsonValue(m_profiling_error_logs, json[QString("profilingErrorLogs")]);
    m_profiling_error_logs_isSet = !json[QString("profilingErrorLogs")].isNull() && m_profiling_error_logs_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_recommendation_latency_in_ms_isValid = ::OpenAPI::fromJsonValue(m_recommendation_latency_in_ms, json[QString("recommendationLatencyInMs")]);
    m_recommendation_latency_in_ms_isSet = !json[QString("recommendationLatencyInMs")].isNull() && m_recommendation_latency_in_ms_isValid;

    m_recommended_cpu_isValid = ::OpenAPI::fromJsonValue(m_recommended_cpu, json[QString("recommendedCpu")]);
    m_recommended_cpu_isSet = !json[QString("recommendedCpu")].isNull() && m_recommended_cpu_isValid;

    m_recommended_memory_in_gb_isValid = ::OpenAPI::fromJsonValue(m_recommended_memory_in_gb, json[QString("recommendedMemoryInGB")]);
    m_recommended_memory_in_gb_isSet = !json[QString("recommendedMemoryInGB")].isNull() && m_recommended_memory_in_gb_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIProfileResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_input_data_isSet) {
        obj.insert(QString("inputData"), ::OpenAPI::toJsonValue(m_input_data));
    }
    if (m_kv_tags.size() > 0) {
        obj.insert(QString("kvTags"), ::OpenAPI::toJsonValue(m_kv_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_profile_run_result_isSet) {
        obj.insert(QString("profileRunResult"), ::OpenAPI::toJsonValue(m_profile_run_result));
    }
    if (m_profiling_error_logs_isSet) {
        obj.insert(QString("profilingErrorLogs"), ::OpenAPI::toJsonValue(m_profiling_error_logs));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_recommendation_latency_in_ms_isSet) {
        obj.insert(QString("recommendationLatencyInMs"), ::OpenAPI::toJsonValue(m_recommendation_latency_in_ms));
    }
    if (m_recommended_cpu_isSet) {
        obj.insert(QString("recommendedCpu"), ::OpenAPI::toJsonValue(m_recommended_cpu));
    }
    if (m_recommended_memory_in_gb_isSet) {
        obj.insert(QString("recommendedMemoryInGB"), ::OpenAPI::toJsonValue(m_recommended_memory_in_gb));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDateTime OAIProfileResponse::getCreatedTime() const {
    return m_created_time;
}
void OAIProfileResponse::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIProfileResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIProfileResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIProfileResponse::getDescription() const {
    return m_description;
}
void OAIProfileResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProfileResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProfileResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIModelErrorResponse OAIProfileResponse::getError() const {
    return m_error;
}
void OAIProfileResponse::setError(const OAIModelErrorResponse &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIProfileResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIProfileResponse::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIProfileResponse::getImageId() const {
    return m_image_id;
}
void OAIProfileResponse::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIProfileResponse::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIProfileResponse::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIProfileResponse::getInputData() const {
    return m_input_data;
}
void OAIProfileResponse::setInputData(const QString &input_data) {
    m_input_data = input_data;
    m_input_data_isSet = true;
}

bool OAIProfileResponse::is_input_data_Set() const{
    return m_input_data_isSet;
}

bool OAIProfileResponse::is_input_data_Valid() const{
    return m_input_data_isValid;
}

QMap<QString, QString> OAIProfileResponse::getKvTags() const {
    return m_kv_tags;
}
void OAIProfileResponse::setKvTags(const QMap<QString, QString> &kv_tags) {
    m_kv_tags = kv_tags;
    m_kv_tags_isSet = true;
}

bool OAIProfileResponse::is_kv_tags_Set() const{
    return m_kv_tags_isSet;
}

bool OAIProfileResponse::is_kv_tags_Valid() const{
    return m_kv_tags_isValid;
}

QString OAIProfileResponse::getName() const {
    return m_name;
}
void OAIProfileResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfileResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfileResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProfileResponse::getProfileRunResult() const {
    return m_profile_run_result;
}
void OAIProfileResponse::setProfileRunResult(const QString &profile_run_result) {
    m_profile_run_result = profile_run_result;
    m_profile_run_result_isSet = true;
}

bool OAIProfileResponse::is_profile_run_result_Set() const{
    return m_profile_run_result_isSet;
}

bool OAIProfileResponse::is_profile_run_result_Valid() const{
    return m_profile_run_result_isValid;
}

QString OAIProfileResponse::getProfilingErrorLogs() const {
    return m_profiling_error_logs;
}
void OAIProfileResponse::setProfilingErrorLogs(const QString &profiling_error_logs) {
    m_profiling_error_logs = profiling_error_logs;
    m_profiling_error_logs_isSet = true;
}

bool OAIProfileResponse::is_profiling_error_logs_Set() const{
    return m_profiling_error_logs_isSet;
}

bool OAIProfileResponse::is_profiling_error_logs_Valid() const{
    return m_profiling_error_logs_isValid;
}

QMap<QString, QString> OAIProfileResponse::getProperties() const {
    return m_properties;
}
void OAIProfileResponse::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIProfileResponse::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIProfileResponse::is_properties_Valid() const{
    return m_properties_isValid;
}

double OAIProfileResponse::getRecommendationLatencyInMs() const {
    return m_recommendation_latency_in_ms;
}
void OAIProfileResponse::setRecommendationLatencyInMs(const double &recommendation_latency_in_ms) {
    m_recommendation_latency_in_ms = recommendation_latency_in_ms;
    m_recommendation_latency_in_ms_isSet = true;
}

bool OAIProfileResponse::is_recommendation_latency_in_ms_Set() const{
    return m_recommendation_latency_in_ms_isSet;
}

bool OAIProfileResponse::is_recommendation_latency_in_ms_Valid() const{
    return m_recommendation_latency_in_ms_isValid;
}

double OAIProfileResponse::getRecommendedCpu() const {
    return m_recommended_cpu;
}
void OAIProfileResponse::setRecommendedCpu(const double &recommended_cpu) {
    m_recommended_cpu = recommended_cpu;
    m_recommended_cpu_isSet = true;
}

bool OAIProfileResponse::is_recommended_cpu_Set() const{
    return m_recommended_cpu_isSet;
}

bool OAIProfileResponse::is_recommended_cpu_Valid() const{
    return m_recommended_cpu_isValid;
}

double OAIProfileResponse::getRecommendedMemoryInGb() const {
    return m_recommended_memory_in_gb;
}
void OAIProfileResponse::setRecommendedMemoryInGb(const double &recommended_memory_in_gb) {
    m_recommended_memory_in_gb = recommended_memory_in_gb;
    m_recommended_memory_in_gb_isSet = true;
}

bool OAIProfileResponse::is_recommended_memory_in_gb_Set() const{
    return m_recommended_memory_in_gb_isSet;
}

bool OAIProfileResponse::is_recommended_memory_in_gb_Valid() const{
    return m_recommended_memory_in_gb_isValid;
}

QString OAIProfileResponse::getState() const {
    return m_state;
}
void OAIProfileResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIProfileResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIProfileResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIProfileResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kv_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_run_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiling_error_logs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_latency_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_memory_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
