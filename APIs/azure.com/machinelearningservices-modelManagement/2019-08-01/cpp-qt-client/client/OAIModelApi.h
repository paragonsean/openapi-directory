/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIModelApi_H
#define OAI_OAIModelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJsonPatchOperation.h"
#include "OAIModel.h"
#include "OAIModelErrorResponse.h"
#include "OAIModelOperationalState.h"
#include "OAIPaginatedModelList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIModelApi : public QObject {
    Q_OBJECT

public:
    OAIModelApi(const int timeOut = 0);
    ~OAIModelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void mLModelsDelete(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    */
    virtual void mLModelsGetMetrics(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  framework QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  skip_token QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  properties QString [optional]
    * @param[in]  run_id QString [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void mLModelsListQuery(const QString &subscription_id, const QString &resource_group, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &framework = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &properties = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &run_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    * @param[in]  patch QList<OAIJsonPatchOperation> [required]
    */
    virtual void mLModelsPatch(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id, const QList<OAIJsonPatchOperation> &patch);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  id QString [required]
    */
    virtual void mLModelsQueryById(const QString &subscription_id, const QString &resource_group, const QString &workspace, const QString &id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  model OAIModel [required]
    */
    virtual void mLModelsRegister(const QString &subscription_id, const QString &resource_group, const QString &workspace, const OAIModel &model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mLModelsDeleteCallback(OAIHttpRequestWorker *worker);
    void mLModelsGetMetricsCallback(OAIHttpRequestWorker *worker);
    void mLModelsListQueryCallback(OAIHttpRequestWorker *worker);
    void mLModelsPatchCallback(OAIHttpRequestWorker *worker);
    void mLModelsQueryByIdCallback(OAIHttpRequestWorker *worker);
    void mLModelsRegisterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mLModelsDeleteSignal();
    void mLModelsGetMetricsSignal(OAIModelOperationalState summary);
    void mLModelsListQuerySignal(OAIPaginatedModelList summary);
    void mLModelsPatchSignal(OAIModel summary);
    void mLModelsQueryByIdSignal(OAIModel summary);
    void mLModelsRegisterSignal(OAIModel summary);


    void mLModelsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void mLModelsGetMetricsSignalFull(OAIHttpRequestWorker *worker, OAIModelOperationalState summary);
    void mLModelsListQuerySignalFull(OAIHttpRequestWorker *worker, OAIPaginatedModelList summary);
    void mLModelsPatchSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void mLModelsQueryByIdSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void mLModelsRegisterSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);

    Q_DECL_DEPRECATED_X("Use mLModelsDeleteSignalError() instead")
    void mLModelsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsGetMetricsSignalError() instead")
    void mLModelsGetMetricsSignalE(OAIModelOperationalState summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsGetMetricsSignalError(OAIModelOperationalState summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsListQuerySignalError() instead")
    void mLModelsListQuerySignalE(OAIPaginatedModelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsListQuerySignalError(OAIPaginatedModelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsPatchSignalError() instead")
    void mLModelsPatchSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsPatchSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsQueryByIdSignalError() instead")
    void mLModelsQueryByIdSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsQueryByIdSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsRegisterSignalError() instead")
    void mLModelsRegisterSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsRegisterSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mLModelsDeleteSignalErrorFull() instead")
    void mLModelsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsGetMetricsSignalErrorFull() instead")
    void mLModelsGetMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsGetMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsListQuerySignalErrorFull() instead")
    void mLModelsListQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsListQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsPatchSignalErrorFull() instead")
    void mLModelsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsQueryByIdSignalErrorFull() instead")
    void mLModelsQueryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsQueryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mLModelsRegisterSignalErrorFull() instead")
    void mLModelsRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mLModelsRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
