/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentSummary::OAIDeploymentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentSummary::OAIDeploymentSummary() {
    this->initializeModel();
}

OAIDeploymentSummary::~OAIDeploymentSummary() {}

void OAIDeploymentSummary::initializeModel() {

    m_successful_deployments_isSet = false;
    m_successful_deployments_isValid = false;

    m_unsuccessful_deployments_isSet = false;
    m_unsuccessful_deployments_isValid = false;
}

void OAIDeploymentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentSummary::fromJsonObject(QJsonObject json) {

    m_successful_deployments_isValid = ::OpenAPI::fromJsonValue(m_successful_deployments, json[QString("successfulDeployments")]);
    m_successful_deployments_isSet = !json[QString("successfulDeployments")].isNull() && m_successful_deployments_isValid;

    m_unsuccessful_deployments_isValid = ::OpenAPI::fromJsonValue(m_unsuccessful_deployments, json[QString("unsuccessfulDeployments")]);
    m_unsuccessful_deployments_isSet = !json[QString("unsuccessfulDeployments")].isNull() && m_unsuccessful_deployments_isValid;
}

QString OAIDeploymentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_successful_deployments_isSet) {
        obj.insert(QString("successfulDeployments"), ::OpenAPI::toJsonValue(m_successful_deployments));
    }
    if (m_unsuccessful_deployments_isSet) {
        obj.insert(QString("unsuccessfulDeployments"), ::OpenAPI::toJsonValue(m_unsuccessful_deployments));
    }
    return obj;
}

qint32 OAIDeploymentSummary::getSuccessfulDeployments() const {
    return m_successful_deployments;
}
void OAIDeploymentSummary::setSuccessfulDeployments(const qint32 &successful_deployments) {
    m_successful_deployments = successful_deployments;
    m_successful_deployments_isSet = true;
}

bool OAIDeploymentSummary::is_successful_deployments_Set() const{
    return m_successful_deployments_isSet;
}

bool OAIDeploymentSummary::is_successful_deployments_Valid() const{
    return m_successful_deployments_isValid;
}

qint32 OAIDeploymentSummary::getUnsuccessfulDeployments() const {
    return m_unsuccessful_deployments;
}
void OAIDeploymentSummary::setUnsuccessfulDeployments(const qint32 &unsuccessful_deployments) {
    m_unsuccessful_deployments = unsuccessful_deployments;
    m_unsuccessful_deployments_isSet = true;
}

bool OAIDeploymentSummary::is_unsuccessful_deployments_Set() const{
    return m_unsuccessful_deployments_isSet;
}

bool OAIDeploymentSummary::is_unsuccessful_deployments_Valid() const{
    return m_unsuccessful_deployments_isValid;
}

bool OAIDeploymentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_successful_deployments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsuccessful_deployments_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
