/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEndpointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEndpointRequest::OAICreateEndpointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEndpointRequest::OAICreateEndpointRequest() {
    this->initializeModel();
}

OAICreateEndpointRequest::~OAICreateEndpointRequest() {}

void OAICreateEndpointRequest::initializeModel() {

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_deployment_type_isSet = false;
    m_deployment_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_image_request_isSet = false;
    m_environment_image_request_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_kv_tags_isSet = false;
    m_kv_tags_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_aad_auth_enabled_isSet = false;
    m_aad_auth_enabled_isValid = false;

    m_app_insights_enabled_isSet = false;
    m_app_insights_enabled_isValid = false;

    m_auth_enabled_isSet = false;
    m_auth_enabled_isValid = false;

    m_compute_name_isSet = false;
    m_compute_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;
}

void OAICreateEndpointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEndpointRequest::fromJsonObject(QJsonObject json) {

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_deployment_type_isValid = ::OpenAPI::fromJsonValue(m_deployment_type, json[QString("deploymentType")]);
    m_deployment_type_isSet = !json[QString("deploymentType")].isNull() && m_deployment_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environment_image_request_isValid = ::OpenAPI::fromJsonValue(m_environment_image_request, json[QString("environmentImageRequest")]);
    m_environment_image_request_isSet = !json[QString("environmentImageRequest")].isNull() && m_environment_image_request_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_kv_tags_isValid = ::OpenAPI::fromJsonValue(m_kv_tags, json[QString("kvTags")]);
    m_kv_tags_isSet = !json[QString("kvTags")].isNull() && m_kv_tags_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_aad_auth_enabled_isValid = ::OpenAPI::fromJsonValue(m_aad_auth_enabled, json[QString("aadAuthEnabled")]);
    m_aad_auth_enabled_isSet = !json[QString("aadAuthEnabled")].isNull() && m_aad_auth_enabled_isValid;

    m_app_insights_enabled_isValid = ::OpenAPI::fromJsonValue(m_app_insights_enabled, json[QString("appInsightsEnabled")]);
    m_app_insights_enabled_isSet = !json[QString("appInsightsEnabled")].isNull() && m_app_insights_enabled_isValid;

    m_auth_enabled_isValid = ::OpenAPI::fromJsonValue(m_auth_enabled, json[QString("authEnabled")]);
    m_auth_enabled_isSet = !json[QString("authEnabled")].isNull() && m_auth_enabled_isValid;

    m_compute_name_isValid = ::OpenAPI::fromJsonValue(m_compute_name, json[QString("computeName")]);
    m_compute_name_isSet = !json[QString("computeName")].isNull() && m_compute_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;
}

QString OAICreateEndpointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEndpointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_type_isSet) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_deployment_type_isSet) {
        obj.insert(QString("deploymentType"), ::OpenAPI::toJsonValue(m_deployment_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment_image_request.isSet()) {
        obj.insert(QString("environmentImageRequest"), ::OpenAPI::toJsonValue(m_environment_image_request));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_kv_tags.size() > 0) {
        obj.insert(QString("kvTags"), ::OpenAPI::toJsonValue(m_kv_tags));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_aad_auth_enabled_isSet) {
        obj.insert(QString("aadAuthEnabled"), ::OpenAPI::toJsonValue(m_aad_auth_enabled));
    }
    if (m_app_insights_enabled_isSet) {
        obj.insert(QString("appInsightsEnabled"), ::OpenAPI::toJsonValue(m_app_insights_enabled));
    }
    if (m_auth_enabled_isSet) {
        obj.insert(QString("authEnabled"), ::OpenAPI::toJsonValue(m_auth_enabled));
    }
    if (m_compute_name_isSet) {
        obj.insert(QString("computeName"), ::OpenAPI::toJsonValue(m_compute_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_variants.size() > 0) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    return obj;
}

QString OAICreateEndpointRequest::getComputeType() const {
    return m_compute_type;
}
void OAICreateEndpointRequest::setComputeType(const QString &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAICreateEndpointRequest::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAICreateEndpointRequest::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

QString OAICreateEndpointRequest::getDeploymentType() const {
    return m_deployment_type;
}
void OAICreateEndpointRequest::setDeploymentType(const QString &deployment_type) {
    m_deployment_type = deployment_type;
    m_deployment_type_isSet = true;
}

bool OAICreateEndpointRequest::is_deployment_type_Set() const{
    return m_deployment_type_isSet;
}

bool OAICreateEndpointRequest::is_deployment_type_Valid() const{
    return m_deployment_type_isValid;
}

QString OAICreateEndpointRequest::getDescription() const {
    return m_description;
}
void OAICreateEndpointRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateEndpointRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateEndpointRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIEnvironmentImageRequest OAICreateEndpointRequest::getEnvironmentImageRequest() const {
    return m_environment_image_request;
}
void OAICreateEndpointRequest::setEnvironmentImageRequest(const OAIEnvironmentImageRequest &environment_image_request) {
    m_environment_image_request = environment_image_request;
    m_environment_image_request_isSet = true;
}

bool OAICreateEndpointRequest::is_environment_image_request_Set() const{
    return m_environment_image_request_isSet;
}

bool OAICreateEndpointRequest::is_environment_image_request_Valid() const{
    return m_environment_image_request_isValid;
}

QString OAICreateEndpointRequest::getImageId() const {
    return m_image_id;
}
void OAICreateEndpointRequest::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAICreateEndpointRequest::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAICreateEndpointRequest::is_image_id_Valid() const{
    return m_image_id_isValid;
}

OAIAuthKeys OAICreateEndpointRequest::getKeys() const {
    return m_keys;
}
void OAICreateEndpointRequest::setKeys(const OAIAuthKeys &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAICreateEndpointRequest::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAICreateEndpointRequest::is_keys_Valid() const{
    return m_keys_isValid;
}

QMap<QString, QString> OAICreateEndpointRequest::getKvTags() const {
    return m_kv_tags;
}
void OAICreateEndpointRequest::setKvTags(const QMap<QString, QString> &kv_tags) {
    m_kv_tags = kv_tags;
    m_kv_tags_isSet = true;
}

bool OAICreateEndpointRequest::is_kv_tags_Set() const{
    return m_kv_tags_isSet;
}

bool OAICreateEndpointRequest::is_kv_tags_Valid() const{
    return m_kv_tags_isValid;
}

QString OAICreateEndpointRequest::getLocation() const {
    return m_location;
}
void OAICreateEndpointRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICreateEndpointRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAICreateEndpointRequest::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICreateEndpointRequest::getName() const {
    return m_name;
}
void OAICreateEndpointRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateEndpointRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateEndpointRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAICreateEndpointRequest::getProperties() const {
    return m_properties;
}
void OAICreateEndpointRequest::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreateEndpointRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreateEndpointRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAICreateEndpointRequest::isAadAuthEnabled() const {
    return m_aad_auth_enabled;
}
void OAICreateEndpointRequest::setAadAuthEnabled(const bool &aad_auth_enabled) {
    m_aad_auth_enabled = aad_auth_enabled;
    m_aad_auth_enabled_isSet = true;
}

bool OAICreateEndpointRequest::is_aad_auth_enabled_Set() const{
    return m_aad_auth_enabled_isSet;
}

bool OAICreateEndpointRequest::is_aad_auth_enabled_Valid() const{
    return m_aad_auth_enabled_isValid;
}

bool OAICreateEndpointRequest::isAppInsightsEnabled() const {
    return m_app_insights_enabled;
}
void OAICreateEndpointRequest::setAppInsightsEnabled(const bool &app_insights_enabled) {
    m_app_insights_enabled = app_insights_enabled;
    m_app_insights_enabled_isSet = true;
}

bool OAICreateEndpointRequest::is_app_insights_enabled_Set() const{
    return m_app_insights_enabled_isSet;
}

bool OAICreateEndpointRequest::is_app_insights_enabled_Valid() const{
    return m_app_insights_enabled_isValid;
}

bool OAICreateEndpointRequest::isAuthEnabled() const {
    return m_auth_enabled;
}
void OAICreateEndpointRequest::setAuthEnabled(const bool &auth_enabled) {
    m_auth_enabled = auth_enabled;
    m_auth_enabled_isSet = true;
}

bool OAICreateEndpointRequest::is_auth_enabled_Set() const{
    return m_auth_enabled_isSet;
}

bool OAICreateEndpointRequest::is_auth_enabled_Valid() const{
    return m_auth_enabled_isValid;
}

QString OAICreateEndpointRequest::getComputeName() const {
    return m_compute_name;
}
void OAICreateEndpointRequest::setComputeName(const QString &compute_name) {
    m_compute_name = compute_name;
    m_compute_name_isSet = true;
}

bool OAICreateEndpointRequest::is_compute_name_Set() const{
    return m_compute_name_isSet;
}

bool OAICreateEndpointRequest::is_compute_name_Valid() const{
    return m_compute_name_isValid;
}

QString OAICreateEndpointRequest::getRNamespace() const {
    return m_r_namespace;
}
void OAICreateEndpointRequest::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAICreateEndpointRequest::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAICreateEndpointRequest::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList<OAIAKSServiceCreateRequest> OAICreateEndpointRequest::getVariants() const {
    return m_variants;
}
void OAICreateEndpointRequest::setVariants(const QList<OAIAKSServiceCreateRequest> &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAICreateEndpointRequest::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAICreateEndpointRequest::is_variants_Valid() const{
    return m_variants_isValid;
}

bool OAICreateEndpointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_image_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kv_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_auth_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_insights_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEndpointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compute_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
