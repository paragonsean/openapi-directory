/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivenessProbeRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivenessProbeRequirements::OAILivenessProbeRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivenessProbeRequirements::OAILivenessProbeRequirements() {
    this->initializeModel();
}

OAILivenessProbeRequirements::~OAILivenessProbeRequirements() {}

void OAILivenessProbeRequirements::initializeModel() {

    m_failure_threshold_isSet = false;
    m_failure_threshold_isValid = false;

    m_initial_delay_seconds_isSet = false;
    m_initial_delay_seconds_isValid = false;

    m_period_seconds_isSet = false;
    m_period_seconds_isValid = false;

    m_success_threshold_isSet = false;
    m_success_threshold_isValid = false;

    m_timeout_seconds_isSet = false;
    m_timeout_seconds_isValid = false;
}

void OAILivenessProbeRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivenessProbeRequirements::fromJsonObject(QJsonObject json) {

    m_failure_threshold_isValid = ::OpenAPI::fromJsonValue(m_failure_threshold, json[QString("failureThreshold")]);
    m_failure_threshold_isSet = !json[QString("failureThreshold")].isNull() && m_failure_threshold_isValid;

    m_initial_delay_seconds_isValid = ::OpenAPI::fromJsonValue(m_initial_delay_seconds, json[QString("initialDelaySeconds")]);
    m_initial_delay_seconds_isSet = !json[QString("initialDelaySeconds")].isNull() && m_initial_delay_seconds_isValid;

    m_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_period_seconds, json[QString("periodSeconds")]);
    m_period_seconds_isSet = !json[QString("periodSeconds")].isNull() && m_period_seconds_isValid;

    m_success_threshold_isValid = ::OpenAPI::fromJsonValue(m_success_threshold, json[QString("successThreshold")]);
    m_success_threshold_isSet = !json[QString("successThreshold")].isNull() && m_success_threshold_isValid;

    m_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_seconds, json[QString("timeoutSeconds")]);
    m_timeout_seconds_isSet = !json[QString("timeoutSeconds")].isNull() && m_timeout_seconds_isValid;
}

QString OAILivenessProbeRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivenessProbeRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_threshold_isSet) {
        obj.insert(QString("failureThreshold"), ::OpenAPI::toJsonValue(m_failure_threshold));
    }
    if (m_initial_delay_seconds_isSet) {
        obj.insert(QString("initialDelaySeconds"), ::OpenAPI::toJsonValue(m_initial_delay_seconds));
    }
    if (m_period_seconds_isSet) {
        obj.insert(QString("periodSeconds"), ::OpenAPI::toJsonValue(m_period_seconds));
    }
    if (m_success_threshold_isSet) {
        obj.insert(QString("successThreshold"), ::OpenAPI::toJsonValue(m_success_threshold));
    }
    if (m_timeout_seconds_isSet) {
        obj.insert(QString("timeoutSeconds"), ::OpenAPI::toJsonValue(m_timeout_seconds));
    }
    return obj;
}

qint32 OAILivenessProbeRequirements::getFailureThreshold() const {
    return m_failure_threshold;
}
void OAILivenessProbeRequirements::setFailureThreshold(const qint32 &failure_threshold) {
    m_failure_threshold = failure_threshold;
    m_failure_threshold_isSet = true;
}

bool OAILivenessProbeRequirements::is_failure_threshold_Set() const{
    return m_failure_threshold_isSet;
}

bool OAILivenessProbeRequirements::is_failure_threshold_Valid() const{
    return m_failure_threshold_isValid;
}

qint32 OAILivenessProbeRequirements::getInitialDelaySeconds() const {
    return m_initial_delay_seconds;
}
void OAILivenessProbeRequirements::setInitialDelaySeconds(const qint32 &initial_delay_seconds) {
    m_initial_delay_seconds = initial_delay_seconds;
    m_initial_delay_seconds_isSet = true;
}

bool OAILivenessProbeRequirements::is_initial_delay_seconds_Set() const{
    return m_initial_delay_seconds_isSet;
}

bool OAILivenessProbeRequirements::is_initial_delay_seconds_Valid() const{
    return m_initial_delay_seconds_isValid;
}

qint32 OAILivenessProbeRequirements::getPeriodSeconds() const {
    return m_period_seconds;
}
void OAILivenessProbeRequirements::setPeriodSeconds(const qint32 &period_seconds) {
    m_period_seconds = period_seconds;
    m_period_seconds_isSet = true;
}

bool OAILivenessProbeRequirements::is_period_seconds_Set() const{
    return m_period_seconds_isSet;
}

bool OAILivenessProbeRequirements::is_period_seconds_Valid() const{
    return m_period_seconds_isValid;
}

qint32 OAILivenessProbeRequirements::getSuccessThreshold() const {
    return m_success_threshold;
}
void OAILivenessProbeRequirements::setSuccessThreshold(const qint32 &success_threshold) {
    m_success_threshold = success_threshold;
    m_success_threshold_isSet = true;
}

bool OAILivenessProbeRequirements::is_success_threshold_Set() const{
    return m_success_threshold_isSet;
}

bool OAILivenessProbeRequirements::is_success_threshold_Valid() const{
    return m_success_threshold_isValid;
}

qint32 OAILivenessProbeRequirements::getTimeoutSeconds() const {
    return m_timeout_seconds;
}
void OAILivenessProbeRequirements::setTimeoutSeconds(const qint32 &timeout_seconds) {
    m_timeout_seconds = timeout_seconds;
    m_timeout_seconds_isSet = true;
}

bool OAILivenessProbeRequirements::is_timeout_seconds_Set() const{
    return m_timeout_seconds_isSet;
}

bool OAILivenessProbeRequirements::is_timeout_seconds_Valid() const{
    return m_timeout_seconds_isValid;
}

bool OAILivenessProbeRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_delay_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivenessProbeRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
