/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelSparkSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelSparkSection::OAIModelSparkSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelSparkSection::OAIModelSparkSection() {
    this->initializeModel();
}

OAIModelSparkSection::~OAIModelSparkSection() {}

void OAIModelSparkSection::initializeModel() {

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_precache_packages_isSet = false;
    m_precache_packages_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;
}

void OAIModelSparkSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelSparkSection::fromJsonObject(QJsonObject json) {

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_precache_packages_isValid = ::OpenAPI::fromJsonValue(m_precache_packages, json[QString("precachePackages")]);
    m_precache_packages_isSet = !json[QString("precachePackages")].isNull() && m_precache_packages_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;
}

QString OAIModelSparkSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelSparkSection::asJsonObject() const {
    QJsonObject obj;
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_precache_packages_isSet) {
        obj.insert(QString("precachePackages"), ::OpenAPI::toJsonValue(m_precache_packages));
    }
    if (m_repositories.size() > 0) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    return obj;
}

QList<OAISparkMavenPackage> OAIModelSparkSection::getPackages() const {
    return m_packages;
}
void OAIModelSparkSection::setPackages(const QList<OAISparkMavenPackage> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIModelSparkSection::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIModelSparkSection::is_packages_Valid() const{
    return m_packages_isValid;
}

bool OAIModelSparkSection::isPrecachePackages() const {
    return m_precache_packages;
}
void OAIModelSparkSection::setPrecachePackages(const bool &precache_packages) {
    m_precache_packages = precache_packages;
    m_precache_packages_isSet = true;
}

bool OAIModelSparkSection::is_precache_packages_Set() const{
    return m_precache_packages_isSet;
}

bool OAIModelSparkSection::is_precache_packages_Valid() const{
    return m_precache_packages_isValid;
}

QList<QString> OAIModelSparkSection::getRepositories() const {
    return m_repositories;
}
void OAIModelSparkSection::setRepositories(const QList<QString> &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIModelSparkSection::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIModelSparkSection::is_repositories_Valid() const{
    return m_repositories_isValid;
}

bool OAIModelSparkSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_precache_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelSparkSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
