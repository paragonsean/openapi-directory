/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotBaseModuleSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotBaseModuleSettings::OAIIotBaseModuleSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotBaseModuleSettings::OAIIotBaseModuleSettings() {
    this->initializeModel();
}

OAIIotBaseModuleSettings::~OAIIotBaseModuleSettings() {}

void OAIIotBaseModuleSettings::initializeModel() {

    m_create_options_isSet = false;
    m_create_options_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_module_name_isSet = false;
    m_module_name_isValid = false;

    m_properties_desired_isSet = false;
    m_properties_desired_isValid = false;
}

void OAIIotBaseModuleSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotBaseModuleSettings::fromJsonObject(QJsonObject json) {

    m_create_options_isValid = ::OpenAPI::fromJsonValue(m_create_options, json[QString("createOptions")]);
    m_create_options_isSet = !json[QString("createOptions")].isNull() && m_create_options_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_module_name_isValid = ::OpenAPI::fromJsonValue(m_module_name, json[QString("moduleName")]);
    m_module_name_isSet = !json[QString("moduleName")].isNull() && m_module_name_isValid;

    m_properties_desired_isValid = ::OpenAPI::fromJsonValue(m_properties_desired, json[QString("propertiesDesired")]);
    m_properties_desired_isSet = !json[QString("propertiesDesired")].isNull() && m_properties_desired_isValid;
}

QString OAIIotBaseModuleSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotBaseModuleSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_create_options_isSet) {
        obj.insert(QString("createOptions"), ::OpenAPI::toJsonValue(m_create_options));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_module_name_isSet) {
        obj.insert(QString("moduleName"), ::OpenAPI::toJsonValue(m_module_name));
    }
    if (m_properties_desired.size() > 0) {
        obj.insert(QString("propertiesDesired"), ::OpenAPI::toJsonValue(m_properties_desired));
    }
    return obj;
}

QString OAIIotBaseModuleSettings::getCreateOptions() const {
    return m_create_options;
}
void OAIIotBaseModuleSettings::setCreateOptions(const QString &create_options) {
    m_create_options = create_options;
    m_create_options_isSet = true;
}

bool OAIIotBaseModuleSettings::is_create_options_Set() const{
    return m_create_options_isSet;
}

bool OAIIotBaseModuleSettings::is_create_options_Valid() const{
    return m_create_options_isValid;
}

QMap<QString, QString> OAIIotBaseModuleSettings::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIIotBaseModuleSettings::setEnvironmentVariables(const QMap<QString, QString> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIIotBaseModuleSettings::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIIotBaseModuleSettings::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIIotBaseModuleSettings::getModuleName() const {
    return m_module_name;
}
void OAIIotBaseModuleSettings::setModuleName(const QString &module_name) {
    m_module_name = module_name;
    m_module_name_isSet = true;
}

bool OAIIotBaseModuleSettings::is_module_name_Set() const{
    return m_module_name_isSet;
}

bool OAIIotBaseModuleSettings::is_module_name_Valid() const{
    return m_module_name_isValid;
}

QMap<QString, QString> OAIIotBaseModuleSettings::getPropertiesDesired() const {
    return m_properties_desired;
}
void OAIIotBaseModuleSettings::setPropertiesDesired(const QMap<QString, QString> &properties_desired) {
    m_properties_desired = properties_desired;
    m_properties_desired_isSet = true;
}

bool OAIIotBaseModuleSettings::is_properties_desired_Set() const{
    return m_properties_desired_isSet;
}

bool OAIIotBaseModuleSettings::is_properties_desired_Valid() const{
    return m_properties_desired_isValid;
}

bool OAIIotBaseModuleSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_desired.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotBaseModuleSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
