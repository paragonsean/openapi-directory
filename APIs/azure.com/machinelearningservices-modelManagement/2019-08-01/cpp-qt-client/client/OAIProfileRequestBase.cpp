/**
 * Azure Machine Learning Model Management Service
 * These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileRequestBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileRequestBase::OAIProfileRequestBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileRequestBase::OAIProfileRequestBase() {
    this->initializeModel();
}

OAIProfileRequestBase::~OAIProfileRequestBase() {}

void OAIProfileRequestBase::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_input_data_isSet = false;
    m_input_data_isValid = false;

    m_kv_tags_isSet = false;
    m_kv_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIProfileRequestBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileRequestBase::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_input_data_isValid = ::OpenAPI::fromJsonValue(m_input_data, json[QString("inputData")]);
    m_input_data_isSet = !json[QString("inputData")].isNull() && m_input_data_isValid;

    m_kv_tags_isValid = ::OpenAPI::fromJsonValue(m_kv_tags, json[QString("kvTags")]);
    m_kv_tags_isSet = !json[QString("kvTags")].isNull() && m_kv_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIProfileRequestBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileRequestBase::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_input_data_isSet) {
        obj.insert(QString("inputData"), ::OpenAPI::toJsonValue(m_input_data));
    }
    if (m_kv_tags.size() > 0) {
        obj.insert(QString("kvTags"), ::OpenAPI::toJsonValue(m_kv_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIProfileRequestBase::getDescription() const {
    return m_description;
}
void OAIProfileRequestBase::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProfileRequestBase::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProfileRequestBase::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProfileRequestBase::getInputData() const {
    return m_input_data;
}
void OAIProfileRequestBase::setInputData(const QString &input_data) {
    m_input_data = input_data;
    m_input_data_isSet = true;
}

bool OAIProfileRequestBase::is_input_data_Set() const{
    return m_input_data_isSet;
}

bool OAIProfileRequestBase::is_input_data_Valid() const{
    return m_input_data_isValid;
}

QMap<QString, QString> OAIProfileRequestBase::getKvTags() const {
    return m_kv_tags;
}
void OAIProfileRequestBase::setKvTags(const QMap<QString, QString> &kv_tags) {
    m_kv_tags = kv_tags;
    m_kv_tags_isSet = true;
}

bool OAIProfileRequestBase::is_kv_tags_Set() const{
    return m_kv_tags_isSet;
}

bool OAIProfileRequestBase::is_kv_tags_Valid() const{
    return m_kv_tags_isValid;
}

QString OAIProfileRequestBase::getName() const {
    return m_name;
}
void OAIProfileRequestBase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfileRequestBase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfileRequestBase::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAIProfileRequestBase::getProperties() const {
    return m_properties;
}
void OAIProfileRequestBase::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIProfileRequestBase::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIProfileRequestBase::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIProfileRequestBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kv_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileRequestBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
