/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-02-28-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalTimestampTimeZoneOffset from './LocalTimestampTimeZoneOffset';

/**
 * The LocalTimestamp model module.
 * @module model/LocalTimestamp
 * @version 2017-02-28-preview
 */
class LocalTimestamp {
    /**
     * Constructs a new <code>LocalTimestamp</code>.
     * An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn&#39;t specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
     * @alias module:model/LocalTimestamp
     */
    constructor() { 
        
        LocalTimestamp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocalTimestamp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocalTimestamp} obj Optional instance to populate.
     * @return {module:model/LocalTimestamp} The populated <code>LocalTimestamp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocalTimestamp();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('timeZoneOffset')) {
                obj['timeZoneOffset'] = LocalTimestampTimeZoneOffset.constructFromObject(data['timeZoneOffset']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocalTimestamp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocalTimestamp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `timeZoneOffset`
        if (data['timeZoneOffset']) { // data not null
          LocalTimestampTimeZoneOffset.validateJSON(data['timeZoneOffset']);
        }

        return true;
    }


}



/**
 * An enum that represents the format of the local timestamp property that needs to be set.
 * @member {module:model/LocalTimestamp.FormatEnum} format
 */
LocalTimestamp.prototype['format'] = undefined;

/**
 * @member {module:model/LocalTimestampTimeZoneOffset} timeZoneOffset
 */
LocalTimestamp.prototype['timeZoneOffset'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
LocalTimestamp['FormatEnum'] = {

    /**
     * value: "Embedded"
     * @const
     */
    "Embedded": "Embedded",

    /**
     * value: "Iana"
     * @const
     */
    "Iana": "Iana",

    /**
     * value: "TimeSpan"
     * @const
     */
    "TimeSpan": "TimeSpan"
};



export default LocalTimestamp;

