/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-02-28-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IoTHubEventSourceCommonProperties from './IoTHubEventSourceCommonProperties';

/**
 * The IoTHubEventSourceResourceProperties model module.
 * @module model/IoTHubEventSourceResourceProperties
 * @version 2017-02-28-preview
 */
class IoTHubEventSourceResourceProperties {
    /**
     * Constructs a new <code>IoTHubEventSourceResourceProperties</code>.
     * Properties of the IoTHub event source resource.
     * @alias module:model/IoTHubEventSourceResourceProperties
     * @implements module:model/IoTHubEventSourceCommonProperties
     * @param consumerGroupName {String} The name of the iot hub's consumer group that holds the partitions from which events will be read.
     * @param iotHubName {String} The name of the iot hub.
     * @param keyName {String} The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
     * @param eventSourceResourceId {String} The resource id of the event source in Azure Resource Manager.
     */
    constructor(consumerGroupName, iotHubName, keyName, eventSourceResourceId) { 
        IoTHubEventSourceCommonProperties.initialize(this, eventSourceResourceId);
        IoTHubEventSourceResourceProperties.initialize(this, consumerGroupName, iotHubName, keyName, eventSourceResourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consumerGroupName, iotHubName, keyName, eventSourceResourceId) { 
        obj['consumerGroupName'] = consumerGroupName;
        obj['iotHubName'] = iotHubName;
        obj['keyName'] = keyName;
        obj['eventSourceResourceId'] = eventSourceResourceId;
    }

    /**
     * Constructs a <code>IoTHubEventSourceResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoTHubEventSourceResourceProperties} obj Optional instance to populate.
     * @return {module:model/IoTHubEventSourceResourceProperties} The populated <code>IoTHubEventSourceResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoTHubEventSourceResourceProperties();
            IoTHubEventSourceCommonProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('consumerGroupName')) {
                obj['consumerGroupName'] = ApiClient.convertToType(data['consumerGroupName'], 'String');
            }
            if (data.hasOwnProperty('iotHubName')) {
                obj['iotHubName'] = ApiClient.convertToType(data['iotHubName'], 'String');
            }
            if (data.hasOwnProperty('keyName')) {
                obj['keyName'] = ApiClient.convertToType(data['keyName'], 'String');
            }
            if (data.hasOwnProperty('eventSourceResourceId')) {
                obj['eventSourceResourceId'] = ApiClient.convertToType(data['eventSourceResourceId'], 'String');
            }
            if (data.hasOwnProperty('timestampPropertyName')) {
                obj['timestampPropertyName'] = ApiClient.convertToType(data['timestampPropertyName'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoTHubEventSourceResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoTHubEventSourceResourceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoTHubEventSourceResourceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['consumerGroupName'] && !(typeof data['consumerGroupName'] === 'string' || data['consumerGroupName'] instanceof String)) {
            throw new Error("Expected the field `consumerGroupName` to be a primitive type in the JSON string but got " + data['consumerGroupName']);
        }
        // ensure the json data is a string
        if (data['iotHubName'] && !(typeof data['iotHubName'] === 'string' || data['iotHubName'] instanceof String)) {
            throw new Error("Expected the field `iotHubName` to be a primitive type in the JSON string but got " + data['iotHubName']);
        }
        // ensure the json data is a string
        if (data['keyName'] && !(typeof data['keyName'] === 'string' || data['keyName'] instanceof String)) {
            throw new Error("Expected the field `keyName` to be a primitive type in the JSON string but got " + data['keyName']);
        }
        // ensure the json data is a string
        if (data['eventSourceResourceId'] && !(typeof data['eventSourceResourceId'] === 'string' || data['eventSourceResourceId'] instanceof String)) {
            throw new Error("Expected the field `eventSourceResourceId` to be a primitive type in the JSON string but got " + data['eventSourceResourceId']);
        }
        // ensure the json data is a string
        if (data['timestampPropertyName'] && !(typeof data['timestampPropertyName'] === 'string' || data['timestampPropertyName'] instanceof String)) {
            throw new Error("Expected the field `timestampPropertyName` to be a primitive type in the JSON string but got " + data['timestampPropertyName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

IoTHubEventSourceResourceProperties.RequiredProperties = ["consumerGroupName", "iotHubName", "keyName", "eventSourceResourceId"];

/**
 * The name of the iot hub's consumer group that holds the partitions from which events will be read.
 * @member {String} consumerGroupName
 */
IoTHubEventSourceResourceProperties.prototype['consumerGroupName'] = undefined;

/**
 * The name of the iot hub.
 * @member {String} iotHubName
 */
IoTHubEventSourceResourceProperties.prototype['iotHubName'] = undefined;

/**
 * The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
 * @member {String} keyName
 */
IoTHubEventSourceResourceProperties.prototype['keyName'] = undefined;

/**
 * The resource id of the event source in Azure Resource Manager.
 * @member {String} eventSourceResourceId
 */
IoTHubEventSourceResourceProperties.prototype['eventSourceResourceId'] = undefined;

/**
 * The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
 * @member {String} timestampPropertyName
 */
IoTHubEventSourceResourceProperties.prototype['timestampPropertyName'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
IoTHubEventSourceResourceProperties.prototype['creationTime'] = undefined;

/**
 * Provisioning state of the resource.
 * @member {module:model/IoTHubEventSourceResourceProperties.ProvisioningStateEnum} provisioningState
 */
IoTHubEventSourceResourceProperties.prototype['provisioningState'] = undefined;


// Implement IoTHubEventSourceCommonProperties interface:
/**
 * The resource id of the event source in Azure Resource Manager.
 * @member {String} eventSourceResourceId
 */
IoTHubEventSourceCommonProperties.prototype['eventSourceResourceId'] = undefined;
/**
 * The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
 * @member {String} timestampPropertyName
 */
IoTHubEventSourceCommonProperties.prototype['timestampPropertyName'] = undefined;
/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
IoTHubEventSourceCommonProperties.prototype['creationTime'] = undefined;
/**
 * Provisioning state of the resource.
 * @member {module:model/IoTHubEventSourceCommonProperties.ProvisioningStateEnum} provisioningState
 */
IoTHubEventSourceCommonProperties.prototype['provisioningState'] = undefined;



/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
IoTHubEventSourceResourceProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};



export default IoTHubEventSourceResourceProperties;

