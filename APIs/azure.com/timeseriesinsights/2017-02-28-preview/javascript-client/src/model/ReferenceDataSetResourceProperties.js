/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-02-28-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReferenceDataSetCreationProperties from './ReferenceDataSetCreationProperties';
import ReferenceDataSetKeyProperty from './ReferenceDataSetKeyProperty';
import ResourceProperties from './ResourceProperties';

/**
 * The ReferenceDataSetResourceProperties model module.
 * @module model/ReferenceDataSetResourceProperties
 * @version 2017-02-28-preview
 */
class ReferenceDataSetResourceProperties {
    /**
     * Constructs a new <code>ReferenceDataSetResourceProperties</code>.
     * Properties of the reference data set.
     * @alias module:model/ReferenceDataSetResourceProperties
     * @implements module:model/ReferenceDataSetCreationProperties
     * @implements module:model/ResourceProperties
     * @param keyProperties {Array.<module:model/ReferenceDataSetKeyProperty>} The list of key properties for the reference data set.
     */
    constructor(keyProperties) { 
        ReferenceDataSetCreationProperties.initialize(this, keyProperties);ResourceProperties.initialize(this);
        ReferenceDataSetResourceProperties.initialize(this, keyProperties);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyProperties) { 
        obj['keyProperties'] = keyProperties;
    }

    /**
     * Constructs a <code>ReferenceDataSetResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReferenceDataSetResourceProperties} obj Optional instance to populate.
     * @return {module:model/ReferenceDataSetResourceProperties} The populated <code>ReferenceDataSetResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReferenceDataSetResourceProperties();
            ReferenceDataSetCreationProperties.constructFromObject(data, obj);
            ResourceProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('keyProperties')) {
                obj['keyProperties'] = ApiClient.convertToType(data['keyProperties'], [ReferenceDataSetKeyProperty]);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReferenceDataSetResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReferenceDataSetResourceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReferenceDataSetResourceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['keyProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keyProperties'])) {
                throw new Error("Expected the field `keyProperties` to be an array in the JSON data but got " + data['keyProperties']);
            }
            // validate the optional field `keyProperties` (array)
            for (const item of data['keyProperties']) {
                ReferenceDataSetKeyProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

ReferenceDataSetResourceProperties.RequiredProperties = ["keyProperties"];

/**
 * The list of key properties for the reference data set.
 * @member {Array.<module:model/ReferenceDataSetKeyProperty>} keyProperties
 */
ReferenceDataSetResourceProperties.prototype['keyProperties'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
ReferenceDataSetResourceProperties.prototype['creationTime'] = undefined;

/**
 * Provisioning state of the resource.
 * @member {module:model/ReferenceDataSetResourceProperties.ProvisioningStateEnum} provisioningState
 */
ReferenceDataSetResourceProperties.prototype['provisioningState'] = undefined;


// Implement ReferenceDataSetCreationProperties interface:
/**
 * The list of key properties for the reference data set.
 * @member {Array.<module:model/ReferenceDataSetKeyProperty>} keyProperties
 */
ReferenceDataSetCreationProperties.prototype['keyProperties'] = undefined;
// Implement ResourceProperties interface:
/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
ResourceProperties.prototype['creationTime'] = undefined;
/**
 * Provisioning state of the resource.
 * @member {module:model/ResourceProperties.ProvisioningStateEnum} provisioningState
 */
ResourceProperties.prototype['provisioningState'] = undefined;



/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ReferenceDataSetResourceProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};



export default ReferenceDataSetResourceProperties;

