# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnvironmentResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_access_fqdn: str=None, data_access_id: str=None, data_retention_time: str=None, storage_limit_exceeded_behavior: str=None, creation_time: datetime=None, provisioning_state: str=None):
        """EnvironmentResourceProperties - a model defined in OpenAPI

        :param data_access_fqdn: The data_access_fqdn of this EnvironmentResourceProperties.
        :param data_access_id: The data_access_id of this EnvironmentResourceProperties.
        :param data_retention_time: The data_retention_time of this EnvironmentResourceProperties.
        :param storage_limit_exceeded_behavior: The storage_limit_exceeded_behavior of this EnvironmentResourceProperties.
        :param creation_time: The creation_time of this EnvironmentResourceProperties.
        :param provisioning_state: The provisioning_state of this EnvironmentResourceProperties.
        """
        self.openapi_types = {
            'data_access_fqdn': str,
            'data_access_id': str,
            'data_retention_time': str,
            'storage_limit_exceeded_behavior': str,
            'creation_time': datetime,
            'provisioning_state': str
        }

        self.attribute_map = {
            'data_access_fqdn': 'dataAccessFqdn',
            'data_access_id': 'dataAccessId',
            'data_retention_time': 'dataRetentionTime',
            'storage_limit_exceeded_behavior': 'storageLimitExceededBehavior',
            'creation_time': 'creationTime',
            'provisioning_state': 'provisioningState'
        }

        self._data_access_fqdn = data_access_fqdn
        self._data_access_id = data_access_id
        self._data_retention_time = data_retention_time
        self._storage_limit_exceeded_behavior = storage_limit_exceeded_behavior
        self._creation_time = creation_time
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentResourceProperties of this EnvironmentResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_access_fqdn(self):
        """Gets the data_access_fqdn of this EnvironmentResourceProperties.

        The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.

        :return: The data_access_fqdn of this EnvironmentResourceProperties.
        :rtype: str
        """
        return self._data_access_fqdn

    @data_access_fqdn.setter
    def data_access_fqdn(self, data_access_fqdn):
        """Sets the data_access_fqdn of this EnvironmentResourceProperties.

        The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.

        :param data_access_fqdn: The data_access_fqdn of this EnvironmentResourceProperties.
        :type data_access_fqdn: str
        """

        self._data_access_fqdn = data_access_fqdn

    @property
    def data_access_id(self):
        """Gets the data_access_id of this EnvironmentResourceProperties.

        An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.

        :return: The data_access_id of this EnvironmentResourceProperties.
        :rtype: str
        """
        return self._data_access_id

    @data_access_id.setter
    def data_access_id(self, data_access_id):
        """Sets the data_access_id of this EnvironmentResourceProperties.

        An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.

        :param data_access_id: The data_access_id of this EnvironmentResourceProperties.
        :type data_access_id: str
        """

        self._data_access_id = data_access_id

    @property
    def data_retention_time(self):
        """Gets the data_retention_time of this EnvironmentResourceProperties.

        ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.

        :return: The data_retention_time of this EnvironmentResourceProperties.
        :rtype: str
        """
        return self._data_retention_time

    @data_retention_time.setter
    def data_retention_time(self, data_retention_time):
        """Sets the data_retention_time of this EnvironmentResourceProperties.

        ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.

        :param data_retention_time: The data_retention_time of this EnvironmentResourceProperties.
        :type data_retention_time: str
        """
        if data_retention_time is None:
            raise ValueError("Invalid value for `data_retention_time`, must not be `None`")

        self._data_retention_time = data_retention_time

    @property
    def storage_limit_exceeded_behavior(self):
        """Gets the storage_limit_exceeded_behavior of this EnvironmentResourceProperties.

        The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If \"PauseIngress\" is specified, new events will not be read from the event source. If \"PurgeOldData\" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.

        :return: The storage_limit_exceeded_behavior of this EnvironmentResourceProperties.
        :rtype: str
        """
        return self._storage_limit_exceeded_behavior

    @storage_limit_exceeded_behavior.setter
    def storage_limit_exceeded_behavior(self, storage_limit_exceeded_behavior):
        """Sets the storage_limit_exceeded_behavior of this EnvironmentResourceProperties.

        The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If \"PauseIngress\" is specified, new events will not be read from the event source. If \"PurgeOldData\" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.

        :param storage_limit_exceeded_behavior: The storage_limit_exceeded_behavior of this EnvironmentResourceProperties.
        :type storage_limit_exceeded_behavior: str
        """
        allowed_values = ["PurgeOldData", "PauseIngress"]  # noqa: E501
        if storage_limit_exceeded_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_limit_exceeded_behavior` ({0}), must be one of {1}"
                .format(storage_limit_exceeded_behavior, allowed_values)
            )

        self._storage_limit_exceeded_behavior = storage_limit_exceeded_behavior

    @property
    def creation_time(self):
        """Gets the creation_time of this EnvironmentResourceProperties.

        The time the resource was created.

        :return: The creation_time of this EnvironmentResourceProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this EnvironmentResourceProperties.

        The time the resource was created.

        :param creation_time: The creation_time of this EnvironmentResourceProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this EnvironmentResourceProperties.

        Provisioning state of the resource.

        :return: The provisioning_state of this EnvironmentResourceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this EnvironmentResourceProperties.

        Provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this EnvironmentResourceProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Accepted", "Creating", "Updating", "Succeeded", "Failed", "Deleting"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
