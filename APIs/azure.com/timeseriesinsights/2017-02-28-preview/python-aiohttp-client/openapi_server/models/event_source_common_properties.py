# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventSourceCommonProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp_property_name: str=None, creation_time: datetime=None, provisioning_state: str=None):
        """EventSourceCommonProperties - a model defined in OpenAPI

        :param timestamp_property_name: The timestamp_property_name of this EventSourceCommonProperties.
        :param creation_time: The creation_time of this EventSourceCommonProperties.
        :param provisioning_state: The provisioning_state of this EventSourceCommonProperties.
        """
        self.openapi_types = {
            'timestamp_property_name': str,
            'creation_time': datetime,
            'provisioning_state': str
        }

        self.attribute_map = {
            'timestamp_property_name': 'timestampPropertyName',
            'creation_time': 'creationTime',
            'provisioning_state': 'provisioningState'
        }

        self._timestamp_property_name = timestamp_property_name
        self._creation_time = creation_time
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSourceCommonProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSourceCommonProperties of this EventSourceCommonProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp_property_name(self):
        """Gets the timestamp_property_name of this EventSourceCommonProperties.

        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.

        :return: The timestamp_property_name of this EventSourceCommonProperties.
        :rtype: str
        """
        return self._timestamp_property_name

    @timestamp_property_name.setter
    def timestamp_property_name(self, timestamp_property_name):
        """Sets the timestamp_property_name of this EventSourceCommonProperties.

        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.

        :param timestamp_property_name: The timestamp_property_name of this EventSourceCommonProperties.
        :type timestamp_property_name: str
        """

        self._timestamp_property_name = timestamp_property_name

    @property
    def creation_time(self):
        """Gets the creation_time of this EventSourceCommonProperties.

        The time the resource was created.

        :return: The creation_time of this EventSourceCommonProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this EventSourceCommonProperties.

        The time the resource was created.

        :param creation_time: The creation_time of this EventSourceCommonProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this EventSourceCommonProperties.

        Provisioning state of the resource.

        :return: The provisioning_state of this EventSourceCommonProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this EventSourceCommonProperties.

        Provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this EventSourceCommonProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Accepted", "Creating", "Updating", "Succeeded", "Failed", "Deleting"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
