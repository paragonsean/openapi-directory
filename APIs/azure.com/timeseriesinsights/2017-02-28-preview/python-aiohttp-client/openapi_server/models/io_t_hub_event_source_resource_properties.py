# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IoTHubEventSourceResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_group_name: str=None, iot_hub_name: str=None, key_name: str=None, event_source_resource_id: str=None, timestamp_property_name: str=None, creation_time: datetime=None, provisioning_state: str=None):
        """IoTHubEventSourceResourceProperties - a model defined in OpenAPI

        :param consumer_group_name: The consumer_group_name of this IoTHubEventSourceResourceProperties.
        :param iot_hub_name: The iot_hub_name of this IoTHubEventSourceResourceProperties.
        :param key_name: The key_name of this IoTHubEventSourceResourceProperties.
        :param event_source_resource_id: The event_source_resource_id of this IoTHubEventSourceResourceProperties.
        :param timestamp_property_name: The timestamp_property_name of this IoTHubEventSourceResourceProperties.
        :param creation_time: The creation_time of this IoTHubEventSourceResourceProperties.
        :param provisioning_state: The provisioning_state of this IoTHubEventSourceResourceProperties.
        """
        self.openapi_types = {
            'consumer_group_name': str,
            'iot_hub_name': str,
            'key_name': str,
            'event_source_resource_id': str,
            'timestamp_property_name': str,
            'creation_time': datetime,
            'provisioning_state': str
        }

        self.attribute_map = {
            'consumer_group_name': 'consumerGroupName',
            'iot_hub_name': 'iotHubName',
            'key_name': 'keyName',
            'event_source_resource_id': 'eventSourceResourceId',
            'timestamp_property_name': 'timestampPropertyName',
            'creation_time': 'creationTime',
            'provisioning_state': 'provisioningState'
        }

        self._consumer_group_name = consumer_group_name
        self._iot_hub_name = iot_hub_name
        self._key_name = key_name
        self._event_source_resource_id = event_source_resource_id
        self._timestamp_property_name = timestamp_property_name
        self._creation_time = creation_time
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTHubEventSourceResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTHubEventSourceResourceProperties of this IoTHubEventSourceResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_group_name(self):
        """Gets the consumer_group_name of this IoTHubEventSourceResourceProperties.

        The name of the iot hub's consumer group that holds the partitions from which events will be read.

        :return: The consumer_group_name of this IoTHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._consumer_group_name

    @consumer_group_name.setter
    def consumer_group_name(self, consumer_group_name):
        """Sets the consumer_group_name of this IoTHubEventSourceResourceProperties.

        The name of the iot hub's consumer group that holds the partitions from which events will be read.

        :param consumer_group_name: The consumer_group_name of this IoTHubEventSourceResourceProperties.
        :type consumer_group_name: str
        """
        if consumer_group_name is None:
            raise ValueError("Invalid value for `consumer_group_name`, must not be `None`")

        self._consumer_group_name = consumer_group_name

    @property
    def iot_hub_name(self):
        """Gets the iot_hub_name of this IoTHubEventSourceResourceProperties.

        The name of the iot hub.

        :return: The iot_hub_name of this IoTHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._iot_hub_name

    @iot_hub_name.setter
    def iot_hub_name(self, iot_hub_name):
        """Sets the iot_hub_name of this IoTHubEventSourceResourceProperties.

        The name of the iot hub.

        :param iot_hub_name: The iot_hub_name of this IoTHubEventSourceResourceProperties.
        :type iot_hub_name: str
        """
        if iot_hub_name is None:
            raise ValueError("Invalid value for `iot_hub_name`, must not be `None`")

        self._iot_hub_name = iot_hub_name

    @property
    def key_name(self):
        """Gets the key_name of this IoTHubEventSourceResourceProperties.

        The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.

        :return: The key_name of this IoTHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this IoTHubEventSourceResourceProperties.

        The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.

        :param key_name: The key_name of this IoTHubEventSourceResourceProperties.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name

    @property
    def event_source_resource_id(self):
        """Gets the event_source_resource_id of this IoTHubEventSourceResourceProperties.

        The resource id of the event source in Azure Resource Manager.

        :return: The event_source_resource_id of this IoTHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._event_source_resource_id

    @event_source_resource_id.setter
    def event_source_resource_id(self, event_source_resource_id):
        """Sets the event_source_resource_id of this IoTHubEventSourceResourceProperties.

        The resource id of the event source in Azure Resource Manager.

        :param event_source_resource_id: The event_source_resource_id of this IoTHubEventSourceResourceProperties.
        :type event_source_resource_id: str
        """
        if event_source_resource_id is None:
            raise ValueError("Invalid value for `event_source_resource_id`, must not be `None`")

        self._event_source_resource_id = event_source_resource_id

    @property
    def timestamp_property_name(self):
        """Gets the timestamp_property_name of this IoTHubEventSourceResourceProperties.

        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.

        :return: The timestamp_property_name of this IoTHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._timestamp_property_name

    @timestamp_property_name.setter
    def timestamp_property_name(self, timestamp_property_name):
        """Sets the timestamp_property_name of this IoTHubEventSourceResourceProperties.

        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.

        :param timestamp_property_name: The timestamp_property_name of this IoTHubEventSourceResourceProperties.
        :type timestamp_property_name: str
        """

        self._timestamp_property_name = timestamp_property_name

    @property
    def creation_time(self):
        """Gets the creation_time of this IoTHubEventSourceResourceProperties.

        The time the resource was created.

        :return: The creation_time of this IoTHubEventSourceResourceProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this IoTHubEventSourceResourceProperties.

        The time the resource was created.

        :param creation_time: The creation_time of this IoTHubEventSourceResourceProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this IoTHubEventSourceResourceProperties.

        Provisioning state of the resource.

        :return: The provisioning_state of this IoTHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this IoTHubEventSourceResourceProperties.

        Provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this IoTHubEventSourceResourceProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Accepted", "Creating", "Updating", "Succeeded", "Failed", "Deleting"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
