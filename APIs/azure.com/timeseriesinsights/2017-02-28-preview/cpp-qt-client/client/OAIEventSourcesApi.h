/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-02-28-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventSourcesApi_H
#define OAI_OAIEventSourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIEventSourceCreateOrUpdateParameters.h"
#include "OAIEventSourceListResponse.h"
#include "OAIEventSourceResource.h"
#include "OAIEventSourceUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventSourcesApi : public QObject {
    Q_OBJECT

public:
    OAIEventSourcesApi(const int timeOut = 0);
    ~OAIEventSourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  event_source_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIEventSourceCreateOrUpdateParameters [required]
    */
    virtual void eventSourcesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &event_source_name, const QString &api_version, const OAIEventSourceCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  event_source_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSourcesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &event_source_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  event_source_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSourcesGet(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &event_source_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSourcesListByEnvironment(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  event_source_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  event_source_update_parameters OAIEventSourceUpdateParameters [required]
    */
    virtual void eventSourcesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &event_source_name, const QString &api_version, const OAIEventSourceUpdateParameters &event_source_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventSourcesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void eventSourcesDeleteCallback(OAIHttpRequestWorker *worker);
    void eventSourcesGetCallback(OAIHttpRequestWorker *worker);
    void eventSourcesListByEnvironmentCallback(OAIHttpRequestWorker *worker);
    void eventSourcesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventSourcesCreateOrUpdateSignal(OAIEventSourceResource summary);
    void eventSourcesDeleteSignal();
    void eventSourcesGetSignal(OAIEventSourceResource summary);
    void eventSourcesListByEnvironmentSignal(OAIEventSourceListResponse summary);
    void eventSourcesUpdateSignal(OAIEventSourceResource summary);


    void eventSourcesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEventSourceResource summary);
    void eventSourcesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void eventSourcesGetSignalFull(OAIHttpRequestWorker *worker, OAIEventSourceResource summary);
    void eventSourcesListByEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEventSourceListResponse summary);
    void eventSourcesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEventSourceResource summary);

    Q_DECL_DEPRECATED_X("Use eventSourcesCreateOrUpdateSignalError() instead")
    void eventSourcesCreateOrUpdateSignalE(OAIEventSourceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesCreateOrUpdateSignalError(OAIEventSourceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSourcesDeleteSignalError() instead")
    void eventSourcesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSourcesGetSignalError() instead")
    void eventSourcesGetSignalE(OAIEventSourceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesGetSignalError(OAIEventSourceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSourcesListByEnvironmentSignalError() instead")
    void eventSourcesListByEnvironmentSignalE(OAIEventSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesListByEnvironmentSignalError(OAIEventSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSourcesUpdateSignalError() instead")
    void eventSourcesUpdateSignalE(OAIEventSourceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesUpdateSignalError(OAIEventSourceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventSourcesCreateOrUpdateSignalErrorFull() instead")
    void eventSourcesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSourcesDeleteSignalErrorFull() instead")
    void eventSourcesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSourcesGetSignalErrorFull() instead")
    void eventSourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSourcesListByEnvironmentSignalErrorFull() instead")
    void eventSourcesListByEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesListByEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSourcesUpdateSignalErrorFull() instead")
    void eventSourcesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSourcesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
