/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-02-28-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnvironmentsApi_H
#define OAI_OAIEnvironmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIEnvironmentCreateOrUpdateParameters.h"
#include "OAIEnvironmentListResponse.h"
#include "OAIEnvironmentResource.h"
#include "OAIEnvironmentUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnvironmentsApi : public QObject {
    Q_OBJECT

public:
    OAIEnvironmentsApi(const int timeOut = 0);
    ~OAIEnvironmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIEnvironmentCreateOrUpdateParameters [required]
    */
    virtual void environmentsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &api_version, const OAIEnvironmentCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void environmentsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void environmentsGet(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void environmentsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void environmentsListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  environment_update_parameters OAIEnvironmentUpdateParameters [required]
    */
    virtual void environmentsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &api_version, const OAIEnvironmentUpdateParameters &environment_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void environmentsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void environmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void environmentsGetCallback(OAIHttpRequestWorker *worker);
    void environmentsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void environmentsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void environmentsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void environmentsCreateOrUpdateSignal(OAIEnvironmentResource summary);
    void environmentsDeleteSignal();
    void environmentsGetSignal(OAIEnvironmentResource summary);
    void environmentsListByResourceGroupSignal(OAIEnvironmentListResponse summary);
    void environmentsListBySubscriptionSignal(OAIEnvironmentListResponse summary);
    void environmentsUpdateSignal(OAIEnvironmentResource summary);


    void environmentsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentResource summary);
    void environmentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void environmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentResource summary);
    void environmentsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentListResponse summary);
    void environmentsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentListResponse summary);
    void environmentsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentResource summary);

    Q_DECL_DEPRECATED_X("Use environmentsCreateOrUpdateSignalError() instead")
    void environmentsCreateOrUpdateSignalE(OAIEnvironmentResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsCreateOrUpdateSignalError(OAIEnvironmentResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsDeleteSignalError() instead")
    void environmentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsGetSignalError() instead")
    void environmentsGetSignalE(OAIEnvironmentResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsGetSignalError(OAIEnvironmentResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsListByResourceGroupSignalError() instead")
    void environmentsListByResourceGroupSignalE(OAIEnvironmentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsListByResourceGroupSignalError(OAIEnvironmentListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsListBySubscriptionSignalError() instead")
    void environmentsListBySubscriptionSignalE(OAIEnvironmentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsListBySubscriptionSignalError(OAIEnvironmentListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsUpdateSignalError() instead")
    void environmentsUpdateSignalE(OAIEnvironmentResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsUpdateSignalError(OAIEnvironmentResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use environmentsCreateOrUpdateSignalErrorFull() instead")
    void environmentsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsDeleteSignalErrorFull() instead")
    void environmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsGetSignalErrorFull() instead")
    void environmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsListByResourceGroupSignalErrorFull() instead")
    void environmentsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsListBySubscriptionSignalErrorFull() instead")
    void environmentsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentsUpdateSignalErrorFull() instead")
    void environmentsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
