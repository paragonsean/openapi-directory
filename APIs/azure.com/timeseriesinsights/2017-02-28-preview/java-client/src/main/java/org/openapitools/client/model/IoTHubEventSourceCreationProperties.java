/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-02-28-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the IoTHub event source that are required on create or update requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:15.371166-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IoTHubEventSourceCreationProperties {
  public static final String SERIALIZED_NAME_SHARED_ACCESS_KEY = "sharedAccessKey";
  @SerializedName(SERIALIZED_NAME_SHARED_ACCESS_KEY)
  private String sharedAccessKey;

  public static final String SERIALIZED_NAME_CONSUMER_GROUP_NAME = "consumerGroupName";
  @SerializedName(SERIALIZED_NAME_CONSUMER_GROUP_NAME)
  private String consumerGroupName;

  public static final String SERIALIZED_NAME_IOT_HUB_NAME = "iotHubName";
  @SerializedName(SERIALIZED_NAME_IOT_HUB_NAME)
  private String iotHubName;

  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_EVENT_SOURCE_RESOURCE_ID = "eventSourceResourceId";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_RESOURCE_ID)
  private String eventSourceResourceId;

  public static final String SERIALIZED_NAME_TIMESTAMP_PROPERTY_NAME = "timestampPropertyName";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_PROPERTY_NAME)
  private String timestampPropertyName;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  /**
   * Provisioning state of the resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    ACCEPTED("Accepted"),
    
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    DELETING("Deleting");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public IoTHubEventSourceCreationProperties() {
  }

  public IoTHubEventSourceCreationProperties(
     OffsetDateTime creationTime, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.creationTime = creationTime;
    this.provisioningState = provisioningState;
  }

  public IoTHubEventSourceCreationProperties sharedAccessKey(String sharedAccessKey) {
    this.sharedAccessKey = sharedAccessKey;
    return this;
  }

  /**
   * The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses.
   * @return sharedAccessKey
   */
  @javax.annotation.Nonnull
  public String getSharedAccessKey() {
    return sharedAccessKey;
  }

  public void setSharedAccessKey(String sharedAccessKey) {
    this.sharedAccessKey = sharedAccessKey;
  }


  public IoTHubEventSourceCreationProperties consumerGroupName(String consumerGroupName) {
    this.consumerGroupName = consumerGroupName;
    return this;
  }

  /**
   * The name of the iot hub&#39;s consumer group that holds the partitions from which events will be read.
   * @return consumerGroupName
   */
  @javax.annotation.Nonnull
  public String getConsumerGroupName() {
    return consumerGroupName;
  }

  public void setConsumerGroupName(String consumerGroupName) {
    this.consumerGroupName = consumerGroupName;
  }


  public IoTHubEventSourceCreationProperties iotHubName(String iotHubName) {
    this.iotHubName = iotHubName;
    return this;
  }

  /**
   * The name of the iot hub.
   * @return iotHubName
   */
  @javax.annotation.Nonnull
  public String getIotHubName() {
    return iotHubName;
  }

  public void setIotHubName(String iotHubName) {
    this.iotHubName = iotHubName;
  }


  public IoTHubEventSourceCreationProperties keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant &#39;service connect&#39; permissions to the iot hub.
   * @return keyName
   */
  @javax.annotation.Nonnull
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public IoTHubEventSourceCreationProperties eventSourceResourceId(String eventSourceResourceId) {
    this.eventSourceResourceId = eventSourceResourceId;
    return this;
  }

  /**
   * The resource id of the event source in Azure Resource Manager.
   * @return eventSourceResourceId
   */
  @javax.annotation.Nonnull
  public String getEventSourceResourceId() {
    return eventSourceResourceId;
  }

  public void setEventSourceResourceId(String eventSourceResourceId) {
    this.eventSourceResourceId = eventSourceResourceId;
  }


  public IoTHubEventSourceCreationProperties timestampPropertyName(String timestampPropertyName) {
    this.timestampPropertyName = timestampPropertyName;
    return this;
  }

  /**
   * The event property that will be used as the event source&#39;s timestamp. If a value isn&#39;t specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
   * @return timestampPropertyName
   */
  @javax.annotation.Nullable
  public String getTimestampPropertyName() {
    return timestampPropertyName;
  }

  public void setTimestampPropertyName(String timestampPropertyName) {
    this.timestampPropertyName = timestampPropertyName;
  }


  /**
   * The time the resource was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  /**
   * Provisioning state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoTHubEventSourceCreationProperties ioTHubEventSourceCreationProperties = (IoTHubEventSourceCreationProperties) o;
    return Objects.equals(this.sharedAccessKey, ioTHubEventSourceCreationProperties.sharedAccessKey) &&
        Objects.equals(this.consumerGroupName, ioTHubEventSourceCreationProperties.consumerGroupName) &&
        Objects.equals(this.iotHubName, ioTHubEventSourceCreationProperties.iotHubName) &&
        Objects.equals(this.keyName, ioTHubEventSourceCreationProperties.keyName) &&
        Objects.equals(this.eventSourceResourceId, ioTHubEventSourceCreationProperties.eventSourceResourceId) &&
        Objects.equals(this.timestampPropertyName, ioTHubEventSourceCreationProperties.timestampPropertyName) &&
        Objects.equals(this.creationTime, ioTHubEventSourceCreationProperties.creationTime) &&
        Objects.equals(this.provisioningState, ioTHubEventSourceCreationProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharedAccessKey, consumerGroupName, iotHubName, keyName, eventSourceResourceId, timestampPropertyName, creationTime, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoTHubEventSourceCreationProperties {\n");
    sb.append("    sharedAccessKey: ").append(toIndentedString(sharedAccessKey)).append("\n");
    sb.append("    consumerGroupName: ").append(toIndentedString(consumerGroupName)).append("\n");
    sb.append("    iotHubName: ").append(toIndentedString(iotHubName)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    eventSourceResourceId: ").append(toIndentedString(eventSourceResourceId)).append("\n");
    sb.append("    timestampPropertyName: ").append(toIndentedString(timestampPropertyName)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerGroupName");
    openapiFields.add("iotHubName");
    openapiFields.add("keyName");
    openapiFields.add("eventSourceResourceId");
    openapiFields.add("timestampPropertyName");
    openapiFields.add("creationTime");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sharedAccessKey");
    openapiRequiredFields.add("consumerGroupName");
    openapiRequiredFields.add("iotHubName");
    openapiRequiredFields.add("keyName");
    openapiRequiredFields.add("eventSourceResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoTHubEventSourceCreationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoTHubEventSourceCreationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoTHubEventSourceCreationProperties is not found in the empty JSON string", IoTHubEventSourceCreationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoTHubEventSourceCreationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoTHubEventSourceCreationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoTHubEventSourceCreationProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sharedAccessKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedAccessKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedAccessKey").toString()));
      }
      if (!jsonObj.get("consumerGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerGroupName").toString()));
      }
      if (!jsonObj.get("iotHubName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iotHubName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iotHubName").toString()));
      }
      if (!jsonObj.get("keyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyName").toString()));
      }
      if (!jsonObj.get("eventSourceResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventSourceResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventSourceResourceId").toString()));
      }
      if ((jsonObj.get("timestampPropertyName") != null && !jsonObj.get("timestampPropertyName").isJsonNull()) && !jsonObj.get("timestampPropertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampPropertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampPropertyName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoTHubEventSourceCreationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoTHubEventSourceCreationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoTHubEventSourceCreationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoTHubEventSourceCreationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<IoTHubEventSourceCreationProperties>() {
           @Override
           public void write(JsonWriter out, IoTHubEventSourceCreationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoTHubEventSourceCreationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoTHubEventSourceCreationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoTHubEventSourceCreationProperties
   * @throws IOException if the JSON string is invalid with respect to IoTHubEventSourceCreationProperties
   */
  public static IoTHubEventSourceCreationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoTHubEventSourceCreationProperties.class);
  }

  /**
   * Convert an instance of IoTHubEventSourceCreationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

