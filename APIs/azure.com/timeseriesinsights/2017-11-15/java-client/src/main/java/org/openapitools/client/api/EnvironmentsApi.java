/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.EnvironmentCreateOrUpdateParameters;
import org.openapitools.client.model.EnvironmentListResponse;
import org.openapitools.client.model.EnvironmentResource;
import org.openapitools.client.model.EnvironmentUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvironmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvironmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for environmentsCreateOrUpdate
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName Name of the environment (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an environment resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing environment definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The environment create request was accepted. Environment provisioning is an asynchronous operation. You can periodically get your environment definition and monitor progress via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The subscription or resource group could not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given environment request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling environmentsCreateOrUpdate(Async)");
        }

        return environmentsCreateOrUpdateCall(subscriptionId, resourceGroupName, environmentName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Create or update an environment in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName Name of the environment (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an environment resource. (required)
     * @return EnvironmentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing environment definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The environment create request was accepted. Environment provisioning is an asynchronous operation. You can periodically get your environment definition and monitor progress via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The subscription or resource group could not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given environment request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentResource environmentsCreateOrUpdate(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<EnvironmentResource> localVarResp = environmentsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, environmentName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an environment in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName Name of the environment (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an environment resource. (required)
     * @return ApiResponse&lt;EnvironmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing environment definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The environment create request was accepted. Environment provisioning is an asynchronous operation. You can periodically get your environment definition and monitor progress via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The subscription or resource group could not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given environment request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentResource> environmentsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = environmentsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<EnvironmentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an environment in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName Name of the environment (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an environment resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing environment definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The environment create request was accepted. Environment provisioning is an asynchronous operation. You can periodically get your environment definition and monitor progress via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The subscription or resource group could not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given environment request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentCreateOrUpdateParameters parameters, final ApiCallback<EnvironmentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsDelete
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The environment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsDeleteCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsDelete(Async)");
        }

        return environmentsDeleteCall(subscriptionId, resourceGroupName, environmentName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The environment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void environmentsDelete(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion) throws ApiException {
        environmentsDeleteWithHttpInfo(subscriptionId, resourceGroupName, environmentName, apiVersion);
    }

    /**
     * 
     * Deletes the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The environment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The environment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsDeleteAsync(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsGet
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $expand Setting $expand&#x3D;status will include the status of the internal services of the environment in the Time Series Insights service. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment definition was successfully retrieved and is in the response. If you are polling for the completion of a provisioning or scale operation, you can check its status via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsGetCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsGet(Async)");
        }

        return environmentsGetCall(subscriptionId, resourceGroupName, environmentName, apiVersion, $expand, _callback);

    }

    /**
     * 
     * Gets the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $expand Setting $expand&#x3D;status will include the status of the internal services of the environment in the Time Series Insights service. (optional)
     * @return EnvironmentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment definition was successfully retrieved and is in the response. If you are polling for the completion of a provisioning or scale operation, you can check its status via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentResource environmentsGet(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<EnvironmentResource> localVarResp = environmentsGetWithHttpInfo(subscriptionId, resourceGroupName, environmentName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $expand Setting $expand&#x3D;status will include the status of the internal services of the environment in the Time Series Insights service. (optional)
     * @return ApiResponse&lt;EnvironmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment definition was successfully retrieved and is in the response. If you are polling for the completion of a provisioning or scale operation, you can check its status via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentResource> environmentsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = environmentsGetValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<EnvironmentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $expand Setting $expand&#x3D;status will include the status of the internal services of the environment in the Time Series Insights service. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment definition was successfully retrieved and is in the response. If you are polling for the completion of a provisioning or scale operation, you can check its status via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsGetAsync(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, String $expand, final ApiCallback<EnvironmentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsGetValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsListByResourceGroup
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, or resource group could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsListByResourceGroup(Async)");
        }

        return environmentsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the available environments associated with the subscription and within the specified resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EnvironmentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, or resource group could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentListResponse environmentsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<EnvironmentListResponse> localVarResp = environmentsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the available environments associated with the subscription and within the specified resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EnvironmentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, or resource group could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentListResponse> environmentsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EnvironmentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the available environments associated with the subscription and within the specified resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, or resource group could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<EnvironmentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsListBySubscription
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.TimeSeriesInsights/environments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsListBySubscription(Async)");
        }

        return environmentsListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EnvironmentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentListResponse environmentsListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<EnvironmentListResponse> localVarResp = environmentsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EnvironmentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentListResponse> environmentsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<EnvironmentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<EnvironmentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsUpdate
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param environmentUpdateParameters Request object that contains the updated information for the environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment definition was successfully updated and is in the response. If the environment was updated synchronously, the response will include a provisioningState value of \&quot;Succeeded\&quot;. If the environment was updated asynchronously, the response will include a provisioningState value of \&quot;Updating\&quot;.  You can periodically get your environment definition and monitor progress of the update via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsUpdateCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentUpdateParameters environmentUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environmentUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentUpdateParameters environmentUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'environmentUpdateParameters' is set
        if (environmentUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'environmentUpdateParameters' when calling environmentsUpdate(Async)");
        }

        return environmentsUpdateCall(subscriptionId, resourceGroupName, environmentName, apiVersion, environmentUpdateParameters, _callback);

    }

    /**
     * 
     * Updates the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param environmentUpdateParameters Request object that contains the updated information for the environment. (required)
     * @return EnvironmentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment definition was successfully updated and is in the response. If the environment was updated synchronously, the response will include a provisioningState value of \&quot;Succeeded\&quot;. If the environment was updated asynchronously, the response will include a provisioningState value of \&quot;Updating\&quot;.  You can periodically get your environment definition and monitor progress of the update via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentResource environmentsUpdate(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentUpdateParameters environmentUpdateParameters) throws ApiException {
        ApiResponse<EnvironmentResource> localVarResp = environmentsUpdateWithHttpInfo(subscriptionId, resourceGroupName, environmentName, apiVersion, environmentUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param environmentUpdateParameters Request object that contains the updated information for the environment. (required)
     * @return ApiResponse&lt;EnvironmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment definition was successfully updated and is in the response. If the environment was updated synchronously, the response will include a provisioningState value of \&quot;Succeeded\&quot;. If the environment was updated asynchronously, the response will include a provisioningState value of \&quot;Updating\&quot;.  You can periodically get your environment definition and monitor progress of the update via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentResource> environmentsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentUpdateParameters environmentUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = environmentsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, environmentUpdateParameters, null);
        Type localVarReturnType = new TypeToken<EnvironmentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the environment with the specified name in the specified subscription and resource group.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param environmentUpdateParameters Request object that contains the updated information for the environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The environment definition was successfully updated and is in the response. If the environment was updated synchronously, the response will include a provisioningState value of \&quot;Succeeded\&quot;. If the environment was updated asynchronously, the response will include a provisioningState value of \&quot;Updating\&quot;.  You can periodically get your environment definition and monitor progress of the update via the provisioningState property. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsUpdateAsync(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, EnvironmentUpdateParameters environmentUpdateParameters, final ApiCallback<EnvironmentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, environmentUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
