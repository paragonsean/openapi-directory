/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessPolicyCreateOrUpdateParameters;
import org.openapitools.client.model.AccessPolicyListResponse;
import org.openapitools.client.model.AccessPolicyResource;
import org.openapitools.client.model.AccessPolicyUpdateParameters;
import org.openapitools.client.model.CloudError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessPoliciesCreateOrUpdate
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName Name of the access policy. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an access policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing access policy definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The access policy was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given access policy request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "accessPolicyName" + "}", localVarApiClient.escapeString(accessPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling accessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accessPolicyName' is set
        if (accessPolicyName == null) {
            throw new ApiException("Missing the required parameter 'accessPolicyName' when calling accessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling accessPoliciesCreateOrUpdate(Async)");
        }

        return accessPoliciesCreateOrUpdateCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Create or update an access policy in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName Name of the access policy. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an access policy. (required)
     * @return AccessPolicyResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing access policy definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The access policy was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given access policy request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public AccessPolicyResource accessPoliciesCreateOrUpdate(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<AccessPolicyResource> localVarResp = accessPoliciesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an access policy in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName Name of the access policy. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an access policy. (required)
     * @return ApiResponse&lt;AccessPolicyResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing access policy definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The access policy was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given access policy request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPolicyResource> accessPoliciesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<AccessPolicyResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an access policy in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName Name of the access policy. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an access policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing access policy definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The access policy was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given access policy request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyCreateOrUpdateParameters parameters, final ApiCallback<AccessPolicyResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<AccessPolicyResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessPoliciesDelete
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The access policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesDeleteCall(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "accessPolicyName" + "}", localVarApiClient.escapeString(accessPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accessPoliciesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accessPoliciesDelete(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling accessPoliciesDelete(Async)");
        }

        // verify the required parameter 'accessPolicyName' is set
        if (accessPolicyName == null) {
            throw new ApiException("Missing the required parameter 'accessPolicyName' when calling accessPoliciesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accessPoliciesDelete(Async)");
        }

        return accessPoliciesDeleteCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the access policy with the specified name in the specified subscription, resource group, and environment
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The access policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void accessPoliciesDelete(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion) throws ApiException {
        accessPoliciesDeleteWithHttpInfo(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion);
    }

    /**
     * 
     * Deletes the access policy with the specified name in the specified subscription, resource group, and environment
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The access policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accessPoliciesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the access policy with the specified name in the specified subscription, resource group, and environment
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The access policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesDeleteAsync(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessPoliciesGet
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy definition was successfully retrieved and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesGetCall(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "accessPolicyName" + "}", localVarApiClient.escapeString(accessPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accessPoliciesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accessPoliciesGet(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling accessPoliciesGet(Async)");
        }

        // verify the required parameter 'accessPolicyName' is set
        if (accessPolicyName == null) {
            throw new ApiException("Missing the required parameter 'accessPolicyName' when calling accessPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accessPoliciesGet(Async)");
        }

        return accessPoliciesGetCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the access policy with the specified name in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return AccessPolicyResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy definition was successfully retrieved and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public AccessPolicyResource accessPoliciesGet(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion) throws ApiException {
        ApiResponse<AccessPolicyResource> localVarResp = accessPoliciesGetWithHttpInfo(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the access policy with the specified name in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;AccessPolicyResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy definition was successfully retrieved and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPolicyResource> accessPoliciesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesGetValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<AccessPolicyResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the access policy with the specified name in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy definition was successfully retrieved and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesGetAsync(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, final ApiCallback<AccessPolicyResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesGetValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AccessPolicyResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessPoliciesListByEnvironment
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access policies returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesListByEnvironmentCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesListByEnvironmentValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accessPoliciesListByEnvironment(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accessPoliciesListByEnvironment(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling accessPoliciesListByEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accessPoliciesListByEnvironment(Async)");
        }

        return accessPoliciesListByEnvironmentCall(subscriptionId, resourceGroupName, environmentName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the available access policies associated with the environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return AccessPolicyListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access policies returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public AccessPolicyListResponse accessPoliciesListByEnvironment(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion) throws ApiException {
        ApiResponse<AccessPolicyListResponse> localVarResp = accessPoliciesListByEnvironmentWithHttpInfo(subscriptionId, resourceGroupName, environmentName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the available access policies associated with the environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;AccessPolicyListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access policies returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPolicyListResponse> accessPoliciesListByEnvironmentWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesListByEnvironmentValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, null);
        Type localVarReturnType = new TypeToken<AccessPolicyListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the available access policies associated with the environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access policies returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesListByEnvironmentAsync(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback<AccessPolicyListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesListByEnvironmentValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AccessPolicyListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessPoliciesUpdate
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessPolicyUpdateParameters Request object that contains the updated information for the access policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy definition was successfully updated and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesUpdateCall(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyUpdateParameters accessPolicyUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessPolicyUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "accessPolicyName" + "}", localVarApiClient.escapeString(accessPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessPoliciesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyUpdateParameters accessPolicyUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accessPoliciesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accessPoliciesUpdate(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling accessPoliciesUpdate(Async)");
        }

        // verify the required parameter 'accessPolicyName' is set
        if (accessPolicyName == null) {
            throw new ApiException("Missing the required parameter 'accessPolicyName' when calling accessPoliciesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accessPoliciesUpdate(Async)");
        }

        // verify the required parameter 'accessPolicyUpdateParameters' is set
        if (accessPolicyUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'accessPolicyUpdateParameters' when calling accessPoliciesUpdate(Async)");
        }

        return accessPoliciesUpdateCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, accessPolicyUpdateParameters, _callback);

    }

    /**
     * 
     * Updates the access policy with the specified name in the specified subscription, resource group, and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessPolicyUpdateParameters Request object that contains the updated information for the access policy. (required)
     * @return AccessPolicyResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy definition was successfully updated and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public AccessPolicyResource accessPoliciesUpdate(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyUpdateParameters accessPolicyUpdateParameters) throws ApiException {
        ApiResponse<AccessPolicyResource> localVarResp = accessPoliciesUpdateWithHttpInfo(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, accessPolicyUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the access policy with the specified name in the specified subscription, resource group, and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessPolicyUpdateParameters Request object that contains the updated information for the access policy. (required)
     * @return ApiResponse&lt;AccessPolicyResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy definition was successfully updated and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessPolicyResource> accessPoliciesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyUpdateParameters accessPolicyUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = accessPoliciesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, accessPolicyUpdateParameters, null);
        Type localVarReturnType = new TypeToken<AccessPolicyResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the access policy with the specified name in the specified subscription, resource group, and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param accessPolicyName The name of the Time Series Insights access policy associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessPolicyUpdateParameters Request object that contains the updated information for the access policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access policy definition was successfully updated and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or access policy could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessPoliciesUpdateAsync(String subscriptionId, String resourceGroupName, String environmentName, String accessPolicyName, String apiVersion, AccessPolicyUpdateParameters accessPolicyUpdateParameters, final ApiCallback<AccessPolicyResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessPoliciesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, accessPolicyUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<AccessPolicyResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
