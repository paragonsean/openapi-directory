/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.ReferenceDataSetKeyProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the reference data set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:16.849628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReferenceDataSetResourceProperties {
  /**
   * The reference data set key comparison behavior can be set using this property. By default, the value is &#39;Ordinal&#39; - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When &#39;OrdinalIgnoreCase&#39; is set, case insensitive comparison will be used.
   */
  @JsonAdapter(DataStringComparisonBehaviorEnum.Adapter.class)
  public enum DataStringComparisonBehaviorEnum {
    ORDINAL("Ordinal"),
    
    ORDINAL_IGNORE_CASE("OrdinalIgnoreCase");

    private String value;

    DataStringComparisonBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataStringComparisonBehaviorEnum fromValue(String value) {
      for (DataStringComparisonBehaviorEnum b : DataStringComparisonBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataStringComparisonBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataStringComparisonBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataStringComparisonBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataStringComparisonBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataStringComparisonBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_STRING_COMPARISON_BEHAVIOR = "dataStringComparisonBehavior";
  @SerializedName(SERIALIZED_NAME_DATA_STRING_COMPARISON_BEHAVIOR)
  private DataStringComparisonBehaviorEnum dataStringComparisonBehavior;

  public static final String SERIALIZED_NAME_KEY_PROPERTIES = "keyProperties";
  @SerializedName(SERIALIZED_NAME_KEY_PROPERTIES)
  private List<ReferenceDataSetKeyProperty> keyProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public ReferenceDataSetResourceProperties() {
  }

  public ReferenceDataSetResourceProperties(
     OffsetDateTime creationTime
  ) {
    this();
    this.creationTime = creationTime;
  }

  public ReferenceDataSetResourceProperties dataStringComparisonBehavior(DataStringComparisonBehaviorEnum dataStringComparisonBehavior) {
    this.dataStringComparisonBehavior = dataStringComparisonBehavior;
    return this;
  }

  /**
   * The reference data set key comparison behavior can be set using this property. By default, the value is &#39;Ordinal&#39; - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When &#39;OrdinalIgnoreCase&#39; is set, case insensitive comparison will be used.
   * @return dataStringComparisonBehavior
   */
  @javax.annotation.Nullable
  public DataStringComparisonBehaviorEnum getDataStringComparisonBehavior() {
    return dataStringComparisonBehavior;
  }

  public void setDataStringComparisonBehavior(DataStringComparisonBehaviorEnum dataStringComparisonBehavior) {
    this.dataStringComparisonBehavior = dataStringComparisonBehavior;
  }


  public ReferenceDataSetResourceProperties keyProperties(List<ReferenceDataSetKeyProperty> keyProperties) {
    this.keyProperties = keyProperties;
    return this;
  }

  public ReferenceDataSetResourceProperties addKeyPropertiesItem(ReferenceDataSetKeyProperty keyPropertiesItem) {
    if (this.keyProperties == null) {
      this.keyProperties = new ArrayList<>();
    }
    this.keyProperties.add(keyPropertiesItem);
    return this;
  }

  /**
   * The list of key properties for the reference data set.
   * @return keyProperties
   */
  @javax.annotation.Nonnull
  public List<ReferenceDataSetKeyProperty> getKeyProperties() {
    return keyProperties;
  }

  public void setKeyProperties(List<ReferenceDataSetKeyProperty> keyProperties) {
    this.keyProperties = keyProperties;
  }


  /**
   * The time the resource was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  public ReferenceDataSetResourceProperties provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceDataSetResourceProperties referenceDataSetResourceProperties = (ReferenceDataSetResourceProperties) o;
    return Objects.equals(this.dataStringComparisonBehavior, referenceDataSetResourceProperties.dataStringComparisonBehavior) &&
        Objects.equals(this.keyProperties, referenceDataSetResourceProperties.keyProperties) &&
        Objects.equals(this.creationTime, referenceDataSetResourceProperties.creationTime) &&
        Objects.equals(this.provisioningState, referenceDataSetResourceProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataStringComparisonBehavior, keyProperties, creationTime, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceDataSetResourceProperties {\n");
    sb.append("    dataStringComparisonBehavior: ").append(toIndentedString(dataStringComparisonBehavior)).append("\n");
    sb.append("    keyProperties: ").append(toIndentedString(keyProperties)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataStringComparisonBehavior");
    openapiFields.add("keyProperties");
    openapiFields.add("creationTime");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyProperties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReferenceDataSetResourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReferenceDataSetResourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReferenceDataSetResourceProperties is not found in the empty JSON string", ReferenceDataSetResourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReferenceDataSetResourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReferenceDataSetResourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReferenceDataSetResourceProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataStringComparisonBehavior") != null && !jsonObj.get("dataStringComparisonBehavior").isJsonNull()) && !jsonObj.get("dataStringComparisonBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStringComparisonBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStringComparisonBehavior").toString()));
      }
      // validate the optional field `dataStringComparisonBehavior`
      if (jsonObj.get("dataStringComparisonBehavior") != null && !jsonObj.get("dataStringComparisonBehavior").isJsonNull()) {
        DataStringComparisonBehaviorEnum.validateJsonElement(jsonObj.get("dataStringComparisonBehavior"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("keyProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyProperties` to be an array in the JSON string but got `%s`", jsonObj.get("keyProperties").toString()));
      }

      JsonArray jsonArraykeyProperties = jsonObj.getAsJsonArray("keyProperties");
      // validate the required field `keyProperties` (array)
      for (int i = 0; i < jsonArraykeyProperties.size(); i++) {
        ReferenceDataSetKeyProperty.validateJsonElement(jsonArraykeyProperties.get(i));
      };
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReferenceDataSetResourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReferenceDataSetResourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReferenceDataSetResourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReferenceDataSetResourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReferenceDataSetResourceProperties>() {
           @Override
           public void write(JsonWriter out, ReferenceDataSetResourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReferenceDataSetResourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReferenceDataSetResourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReferenceDataSetResourceProperties
   * @throws IOException if the JSON string is invalid with respect to ReferenceDataSetResourceProperties
   */
  public static ReferenceDataSetResourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReferenceDataSetResourceProperties.class);
  }

  /**
   * Convert an instance of ReferenceDataSetResourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

