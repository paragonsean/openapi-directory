/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PartitionKeyProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties used to create an environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:16.849628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentCreationProperties {
  public static final String SERIALIZED_NAME_DATA_RETENTION_TIME = "dataRetentionTime";
  @SerializedName(SERIALIZED_NAME_DATA_RETENTION_TIME)
  private String dataRetentionTime;

  public static final String SERIALIZED_NAME_PARTITION_KEY_PROPERTIES = "partitionKeyProperties";
  @SerializedName(SERIALIZED_NAME_PARTITION_KEY_PROPERTIES)
  private List<PartitionKeyProperty> partitionKeyProperties = new ArrayList<>();

  /**
   * The behavior the Time Series Insights service should take when the environment&#39;s capacity has been exceeded. If \&quot;PauseIngress\&quot; is specified, new events will not be read from the event source. If \&quot;PurgeOldData\&quot; is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
   */
  @JsonAdapter(StorageLimitExceededBehaviorEnum.Adapter.class)
  public enum StorageLimitExceededBehaviorEnum {
    PURGE_OLD_DATA("PurgeOldData"),
    
    PAUSE_INGRESS("PauseIngress");

    private String value;

    StorageLimitExceededBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageLimitExceededBehaviorEnum fromValue(String value) {
      for (StorageLimitExceededBehaviorEnum b : StorageLimitExceededBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageLimitExceededBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageLimitExceededBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageLimitExceededBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageLimitExceededBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageLimitExceededBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_LIMIT_EXCEEDED_BEHAVIOR = "storageLimitExceededBehavior";
  @SerializedName(SERIALIZED_NAME_STORAGE_LIMIT_EXCEEDED_BEHAVIOR)
  private StorageLimitExceededBehaviorEnum storageLimitExceededBehavior;

  public EnvironmentCreationProperties() {
  }

  public EnvironmentCreationProperties dataRetentionTime(String dataRetentionTime) {
    this.dataRetentionTime = dataRetentionTime;
    return this;
  }

  /**
   * ISO8601 timespan specifying the minimum number of days the environment&#39;s events will be available for query.
   * @return dataRetentionTime
   */
  @javax.annotation.Nonnull
  public String getDataRetentionTime() {
    return dataRetentionTime;
  }

  public void setDataRetentionTime(String dataRetentionTime) {
    this.dataRetentionTime = dataRetentionTime;
  }


  public EnvironmentCreationProperties partitionKeyProperties(List<PartitionKeyProperty> partitionKeyProperties) {
    this.partitionKeyProperties = partitionKeyProperties;
    return this;
  }

  public EnvironmentCreationProperties addPartitionKeyPropertiesItem(PartitionKeyProperty partitionKeyPropertiesItem) {
    if (this.partitionKeyProperties == null) {
      this.partitionKeyProperties = new ArrayList<>();
    }
    this.partitionKeyProperties.add(partitionKeyPropertiesItem);
    return this;
  }

  /**
   * The list of partition keys according to which the data in the environment will be ordered.
   * @return partitionKeyProperties
   */
  @javax.annotation.Nullable
  public List<PartitionKeyProperty> getPartitionKeyProperties() {
    return partitionKeyProperties;
  }

  public void setPartitionKeyProperties(List<PartitionKeyProperty> partitionKeyProperties) {
    this.partitionKeyProperties = partitionKeyProperties;
  }


  public EnvironmentCreationProperties storageLimitExceededBehavior(StorageLimitExceededBehaviorEnum storageLimitExceededBehavior) {
    this.storageLimitExceededBehavior = storageLimitExceededBehavior;
    return this;
  }

  /**
   * The behavior the Time Series Insights service should take when the environment&#39;s capacity has been exceeded. If \&quot;PauseIngress\&quot; is specified, new events will not be read from the event source. If \&quot;PurgeOldData\&quot; is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
   * @return storageLimitExceededBehavior
   */
  @javax.annotation.Nullable
  public StorageLimitExceededBehaviorEnum getStorageLimitExceededBehavior() {
    return storageLimitExceededBehavior;
  }

  public void setStorageLimitExceededBehavior(StorageLimitExceededBehaviorEnum storageLimitExceededBehavior) {
    this.storageLimitExceededBehavior = storageLimitExceededBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentCreationProperties environmentCreationProperties = (EnvironmentCreationProperties) o;
    return Objects.equals(this.dataRetentionTime, environmentCreationProperties.dataRetentionTime) &&
        Objects.equals(this.partitionKeyProperties, environmentCreationProperties.partitionKeyProperties) &&
        Objects.equals(this.storageLimitExceededBehavior, environmentCreationProperties.storageLimitExceededBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataRetentionTime, partitionKeyProperties, storageLimitExceededBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentCreationProperties {\n");
    sb.append("    dataRetentionTime: ").append(toIndentedString(dataRetentionTime)).append("\n");
    sb.append("    partitionKeyProperties: ").append(toIndentedString(partitionKeyProperties)).append("\n");
    sb.append("    storageLimitExceededBehavior: ").append(toIndentedString(storageLimitExceededBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataRetentionTime");
    openapiFields.add("partitionKeyProperties");
    openapiFields.add("storageLimitExceededBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataRetentionTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentCreationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentCreationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentCreationProperties is not found in the empty JSON string", EnvironmentCreationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentCreationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentCreationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnvironmentCreationProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataRetentionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataRetentionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataRetentionTime").toString()));
      }
      if (jsonObj.get("partitionKeyProperties") != null && !jsonObj.get("partitionKeyProperties").isJsonNull()) {
        JsonArray jsonArraypartitionKeyProperties = jsonObj.getAsJsonArray("partitionKeyProperties");
        if (jsonArraypartitionKeyProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partitionKeyProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partitionKeyProperties` to be an array in the JSON string but got `%s`", jsonObj.get("partitionKeyProperties").toString()));
          }

          // validate the optional field `partitionKeyProperties` (array)
          for (int i = 0; i < jsonArraypartitionKeyProperties.size(); i++) {
            PartitionKeyProperty.validateJsonElement(jsonArraypartitionKeyProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("storageLimitExceededBehavior") != null && !jsonObj.get("storageLimitExceededBehavior").isJsonNull()) && !jsonObj.get("storageLimitExceededBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageLimitExceededBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageLimitExceededBehavior").toString()));
      }
      // validate the optional field `storageLimitExceededBehavior`
      if (jsonObj.get("storageLimitExceededBehavior") != null && !jsonObj.get("storageLimitExceededBehavior").isJsonNull()) {
        StorageLimitExceededBehaviorEnum.validateJsonElement(jsonObj.get("storageLimitExceededBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentCreationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentCreationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentCreationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentCreationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentCreationProperties>() {
           @Override
           public void write(JsonWriter out, EnvironmentCreationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentCreationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentCreationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentCreationProperties
   * @throws IOException if the JSON string is invalid with respect to EnvironmentCreationProperties
   */
  public static EnvironmentCreationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentCreationProperties.class);
  }

  /**
   * Convert an instance of EnvironmentCreationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

