/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackedResource from './TrackedResource';

/**
 * The EventSourceResource model module.
 * @module model/EventSourceResource
 * @version 2017-11-15
 */
class EventSourceResource {
    /**
     * Constructs a new <code>EventSourceResource</code>.
     * An environment receives data from one or more event sources. Each event source has associated connection info that allows the Time Series Insights ingress pipeline to connect to and pull data from the event source
     * @alias module:model/EventSourceResource
     * @implements module:model/TrackedResource
     * @param location {String} Resource location
     */
    constructor(location) { 
        TrackedResource.initialize(this);
        EventSourceResource.initialize(this, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location) { 
        obj['kind'] = kind;
        obj['location'] = location;
    }

    /**
     * Constructs a <code>EventSourceResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSourceResource} obj Optional instance to populate.
     * @return {module:model/EventSourceResource} The populated <code>EventSourceResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSourceResource();
            TrackedResource.constructFromObject(data, obj);

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSourceResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSourceResource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventSourceResource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

EventSourceResource.RequiredProperties = ["kind", "location"];

/**
 * The kind of the event source.
 * @member {module:model/EventSourceResource.KindEnum} kind
 */
EventSourceResource.prototype['kind'] = undefined;

/**
 * Resource location
 * @member {String} location
 */
EventSourceResource.prototype['location'] = undefined;

/**
 * Resource tags
 * @member {Object.<String, String>} tags
 */
EventSourceResource.prototype['tags'] = undefined;

/**
 * Resource Id
 * @member {String} id
 */
EventSourceResource.prototype['id'] = undefined;

/**
 * Resource name
 * @member {String} name
 */
EventSourceResource.prototype['name'] = undefined;

/**
 * Resource type
 * @member {String} type
 */
EventSourceResource.prototype['type'] = undefined;


// Implement TrackedResource interface:
/**
 * Resource Id
 * @member {String} id
 */
TrackedResource.prototype['id'] = undefined;
/**
 * Resource name
 * @member {String} name
 */
TrackedResource.prototype['name'] = undefined;
/**
 * Resource type
 * @member {String} type
 */
TrackedResource.prototype['type'] = undefined;



/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
EventSourceResource['KindEnum'] = {

    /**
     * value: "Microsoft.EventHub"
     * @const
     */
    "EventHub": "Microsoft.EventHub",

    /**
     * value: "Microsoft.IoTHub"
     * @const
     */
    "IoTHub": "Microsoft.IoTHub"
};



export default EventSourceResource;

