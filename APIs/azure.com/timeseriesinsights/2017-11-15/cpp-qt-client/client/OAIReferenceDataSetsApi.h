/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReferenceDataSetsApi_H
#define OAI_OAIReferenceDataSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIReferenceDataSetCreateOrUpdateParameters.h"
#include "OAIReferenceDataSetListResponse.h"
#include "OAIReferenceDataSetResource.h"
#include "OAIReferenceDataSetUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReferenceDataSetsApi : public QObject {
    Q_OBJECT

public:
    OAIReferenceDataSetsApi(const int timeOut = 0);
    ~OAIReferenceDataSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  reference_data_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIReferenceDataSetCreateOrUpdateParameters [required]
    */
    virtual void referenceDataSetsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &reference_data_set_name, const QString &api_version, const OAIReferenceDataSetCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  reference_data_set_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void referenceDataSetsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &reference_data_set_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  reference_data_set_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void referenceDataSetsGet(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &reference_data_set_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void referenceDataSetsListByEnvironment(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  reference_data_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  reference_data_set_update_parameters OAIReferenceDataSetUpdateParameters [required]
    */
    virtual void referenceDataSetsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &reference_data_set_name, const QString &api_version, const OAIReferenceDataSetUpdateParameters &reference_data_set_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void referenceDataSetsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void referenceDataSetsDeleteCallback(OAIHttpRequestWorker *worker);
    void referenceDataSetsGetCallback(OAIHttpRequestWorker *worker);
    void referenceDataSetsListByEnvironmentCallback(OAIHttpRequestWorker *worker);
    void referenceDataSetsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void referenceDataSetsCreateOrUpdateSignal(OAIReferenceDataSetResource summary);
    void referenceDataSetsDeleteSignal();
    void referenceDataSetsGetSignal(OAIReferenceDataSetResource summary);
    void referenceDataSetsListByEnvironmentSignal(OAIReferenceDataSetListResponse summary);
    void referenceDataSetsUpdateSignal(OAIReferenceDataSetResource summary);


    void referenceDataSetsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIReferenceDataSetResource summary);
    void referenceDataSetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void referenceDataSetsGetSignalFull(OAIHttpRequestWorker *worker, OAIReferenceDataSetResource summary);
    void referenceDataSetsListByEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIReferenceDataSetListResponse summary);
    void referenceDataSetsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIReferenceDataSetResource summary);

    Q_DECL_DEPRECATED_X("Use referenceDataSetsCreateOrUpdateSignalError() instead")
    void referenceDataSetsCreateOrUpdateSignalE(OAIReferenceDataSetResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsCreateOrUpdateSignalError(OAIReferenceDataSetResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referenceDataSetsDeleteSignalError() instead")
    void referenceDataSetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referenceDataSetsGetSignalError() instead")
    void referenceDataSetsGetSignalE(OAIReferenceDataSetResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsGetSignalError(OAIReferenceDataSetResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referenceDataSetsListByEnvironmentSignalError() instead")
    void referenceDataSetsListByEnvironmentSignalE(OAIReferenceDataSetListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsListByEnvironmentSignalError(OAIReferenceDataSetListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referenceDataSetsUpdateSignalError() instead")
    void referenceDataSetsUpdateSignalE(OAIReferenceDataSetResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsUpdateSignalError(OAIReferenceDataSetResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use referenceDataSetsCreateOrUpdateSignalErrorFull() instead")
    void referenceDataSetsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referenceDataSetsDeleteSignalErrorFull() instead")
    void referenceDataSetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referenceDataSetsGetSignalErrorFull() instead")
    void referenceDataSetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referenceDataSetsListByEnvironmentSignalErrorFull() instead")
    void referenceDataSetsListByEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsListByEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referenceDataSetsUpdateSignalErrorFull() instead")
    void referenceDataSetsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referenceDataSetsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
