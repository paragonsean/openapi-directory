/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccessPoliciesApi_H
#define OAI_OAIAccessPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessPolicyCreateOrUpdateParameters.h"
#include "OAIAccessPolicyListResponse.h"
#include "OAIAccessPolicyResource.h"
#include "OAIAccessPolicyUpdateParameters.h"
#include "OAICloudError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccessPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIAccessPoliciesApi(const int timeOut = 0);
    ~OAIAccessPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  access_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAccessPolicyCreateOrUpdateParameters [required]
    */
    virtual void accessPoliciesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &access_policy_name, const QString &api_version, const OAIAccessPolicyCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  access_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accessPoliciesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &access_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  access_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accessPoliciesGet(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &access_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accessPoliciesListByEnvironment(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  access_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  access_policy_update_parameters OAIAccessPolicyUpdateParameters [required]
    */
    virtual void accessPoliciesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &environment_name, const QString &access_policy_name, const QString &api_version, const OAIAccessPolicyUpdateParameters &access_policy_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accessPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void accessPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void accessPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void accessPoliciesListByEnvironmentCallback(OAIHttpRequestWorker *worker);
    void accessPoliciesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accessPoliciesCreateOrUpdateSignal(OAIAccessPolicyResource summary);
    void accessPoliciesDeleteSignal();
    void accessPoliciesGetSignal(OAIAccessPolicyResource summary);
    void accessPoliciesListByEnvironmentSignal(OAIAccessPolicyListResponse summary);
    void accessPoliciesUpdateSignal(OAIAccessPolicyResource summary);


    void accessPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccessPolicyResource summary);
    void accessPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void accessPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIAccessPolicyResource summary);
    void accessPoliciesListByEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIAccessPolicyListResponse summary);
    void accessPoliciesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccessPolicyResource summary);

    Q_DECL_DEPRECATED_X("Use accessPoliciesCreateOrUpdateSignalError() instead")
    void accessPoliciesCreateOrUpdateSignalE(OAIAccessPolicyResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesCreateOrUpdateSignalError(OAIAccessPolicyResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessPoliciesDeleteSignalError() instead")
    void accessPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessPoliciesGetSignalError() instead")
    void accessPoliciesGetSignalE(OAIAccessPolicyResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesGetSignalError(OAIAccessPolicyResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessPoliciesListByEnvironmentSignalError() instead")
    void accessPoliciesListByEnvironmentSignalE(OAIAccessPolicyListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesListByEnvironmentSignalError(OAIAccessPolicyListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessPoliciesUpdateSignalError() instead")
    void accessPoliciesUpdateSignalE(OAIAccessPolicyResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesUpdateSignalError(OAIAccessPolicyResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accessPoliciesCreateOrUpdateSignalErrorFull() instead")
    void accessPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessPoliciesDeleteSignalErrorFull() instead")
    void accessPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessPoliciesGetSignalErrorFull() instead")
    void accessPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessPoliciesListByEnvironmentSignalErrorFull() instead")
    void accessPoliciesListByEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesListByEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessPoliciesUpdateSignalErrorFull() instead")
    void accessPoliciesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessPoliciesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
