/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIoTHubEventSourceMutableProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIoTHubEventSourceMutableProperties::OAIIoTHubEventSourceMutableProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIoTHubEventSourceMutableProperties::OAIIoTHubEventSourceMutableProperties() {
    this->initializeModel();
}

OAIIoTHubEventSourceMutableProperties::~OAIIoTHubEventSourceMutableProperties() {}

void OAIIoTHubEventSourceMutableProperties::initializeModel() {

    m_shared_access_key_isSet = false;
    m_shared_access_key_isValid = false;

    m_local_timestamp_isSet = false;
    m_local_timestamp_isValid = false;

    m_timestamp_property_name_isSet = false;
    m_timestamp_property_name_isValid = false;
}

void OAIIoTHubEventSourceMutableProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIoTHubEventSourceMutableProperties::fromJsonObject(QJsonObject json) {

    m_shared_access_key_isValid = ::OpenAPI::fromJsonValue(m_shared_access_key, json[QString("sharedAccessKey")]);
    m_shared_access_key_isSet = !json[QString("sharedAccessKey")].isNull() && m_shared_access_key_isValid;

    m_local_timestamp_isValid = ::OpenAPI::fromJsonValue(m_local_timestamp, json[QString("localTimestamp")]);
    m_local_timestamp_isSet = !json[QString("localTimestamp")].isNull() && m_local_timestamp_isValid;

    m_timestamp_property_name_isValid = ::OpenAPI::fromJsonValue(m_timestamp_property_name, json[QString("timestampPropertyName")]);
    m_timestamp_property_name_isSet = !json[QString("timestampPropertyName")].isNull() && m_timestamp_property_name_isValid;
}

QString OAIIoTHubEventSourceMutableProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIoTHubEventSourceMutableProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_shared_access_key_isSet) {
        obj.insert(QString("sharedAccessKey"), ::OpenAPI::toJsonValue(m_shared_access_key));
    }
    if (m_local_timestamp.isSet()) {
        obj.insert(QString("localTimestamp"), ::OpenAPI::toJsonValue(m_local_timestamp));
    }
    if (m_timestamp_property_name_isSet) {
        obj.insert(QString("timestampPropertyName"), ::OpenAPI::toJsonValue(m_timestamp_property_name));
    }
    return obj;
}

QString OAIIoTHubEventSourceMutableProperties::getSharedAccessKey() const {
    return m_shared_access_key;
}
void OAIIoTHubEventSourceMutableProperties::setSharedAccessKey(const QString &shared_access_key) {
    m_shared_access_key = shared_access_key;
    m_shared_access_key_isSet = true;
}

bool OAIIoTHubEventSourceMutableProperties::is_shared_access_key_Set() const{
    return m_shared_access_key_isSet;
}

bool OAIIoTHubEventSourceMutableProperties::is_shared_access_key_Valid() const{
    return m_shared_access_key_isValid;
}

OAILocalTimestamp OAIIoTHubEventSourceMutableProperties::getLocalTimestamp() const {
    return m_local_timestamp;
}
void OAIIoTHubEventSourceMutableProperties::setLocalTimestamp(const OAILocalTimestamp &local_timestamp) {
    m_local_timestamp = local_timestamp;
    m_local_timestamp_isSet = true;
}

bool OAIIoTHubEventSourceMutableProperties::is_local_timestamp_Set() const{
    return m_local_timestamp_isSet;
}

bool OAIIoTHubEventSourceMutableProperties::is_local_timestamp_Valid() const{
    return m_local_timestamp_isValid;
}

QString OAIIoTHubEventSourceMutableProperties::getTimestampPropertyName() const {
    return m_timestamp_property_name;
}
void OAIIoTHubEventSourceMutableProperties::setTimestampPropertyName(const QString &timestamp_property_name) {
    m_timestamp_property_name = timestamp_property_name;
    m_timestamp_property_name_isSet = true;
}

bool OAIIoTHubEventSourceMutableProperties::is_timestamp_property_name_Set() const{
    return m_timestamp_property_name_isSet;
}

bool OAIIoTHubEventSourceMutableProperties::is_timestamp_property_name_Valid() const{
    return m_timestamp_property_name_isValid;
}

bool OAIIoTHubEventSourceMutableProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shared_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIoTHubEventSourceMutableProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
