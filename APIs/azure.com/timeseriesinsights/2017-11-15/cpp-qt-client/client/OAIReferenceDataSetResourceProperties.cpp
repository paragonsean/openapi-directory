/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2017-11-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceDataSetResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceDataSetResourceProperties::OAIReferenceDataSetResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceDataSetResourceProperties::OAIReferenceDataSetResourceProperties() {
    this->initializeModel();
}

OAIReferenceDataSetResourceProperties::~OAIReferenceDataSetResourceProperties() {}

void OAIReferenceDataSetResourceProperties::initializeModel() {

    m_data_string_comparison_behavior_isSet = false;
    m_data_string_comparison_behavior_isValid = false;

    m_key_properties_isSet = false;
    m_key_properties_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIReferenceDataSetResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceDataSetResourceProperties::fromJsonObject(QJsonObject json) {

    m_data_string_comparison_behavior_isValid = ::OpenAPI::fromJsonValue(m_data_string_comparison_behavior, json[QString("dataStringComparisonBehavior")]);
    m_data_string_comparison_behavior_isSet = !json[QString("dataStringComparisonBehavior")].isNull() && m_data_string_comparison_behavior_isValid;

    m_key_properties_isValid = ::OpenAPI::fromJsonValue(m_key_properties, json[QString("keyProperties")]);
    m_key_properties_isSet = !json[QString("keyProperties")].isNull() && m_key_properties_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIReferenceDataSetResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceDataSetResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_string_comparison_behavior_isSet) {
        obj.insert(QString("dataStringComparisonBehavior"), ::OpenAPI::toJsonValue(m_data_string_comparison_behavior));
    }
    if (m_key_properties.size() > 0) {
        obj.insert(QString("keyProperties"), ::OpenAPI::toJsonValue(m_key_properties));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIReferenceDataSetResourceProperties::getDataStringComparisonBehavior() const {
    return m_data_string_comparison_behavior;
}
void OAIReferenceDataSetResourceProperties::setDataStringComparisonBehavior(const QString &data_string_comparison_behavior) {
    m_data_string_comparison_behavior = data_string_comparison_behavior;
    m_data_string_comparison_behavior_isSet = true;
}

bool OAIReferenceDataSetResourceProperties::is_data_string_comparison_behavior_Set() const{
    return m_data_string_comparison_behavior_isSet;
}

bool OAIReferenceDataSetResourceProperties::is_data_string_comparison_behavior_Valid() const{
    return m_data_string_comparison_behavior_isValid;
}

QList<OAIReferenceDataSetKeyProperty> OAIReferenceDataSetResourceProperties::getKeyProperties() const {
    return m_key_properties;
}
void OAIReferenceDataSetResourceProperties::setKeyProperties(const QList<OAIReferenceDataSetKeyProperty> &key_properties) {
    m_key_properties = key_properties;
    m_key_properties_isSet = true;
}

bool OAIReferenceDataSetResourceProperties::is_key_properties_Set() const{
    return m_key_properties_isSet;
}

bool OAIReferenceDataSetResourceProperties::is_key_properties_Valid() const{
    return m_key_properties_isValid;
}

QDateTime OAIReferenceDataSetResourceProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIReferenceDataSetResourceProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIReferenceDataSetResourceProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIReferenceDataSetResourceProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIProvisioningState OAIReferenceDataSetResourceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIReferenceDataSetResourceProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIReferenceDataSetResourceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIReferenceDataSetResourceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIReferenceDataSetResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_string_comparison_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceDataSetResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_properties_isValid && true;
}

} // namespace OpenAPI
