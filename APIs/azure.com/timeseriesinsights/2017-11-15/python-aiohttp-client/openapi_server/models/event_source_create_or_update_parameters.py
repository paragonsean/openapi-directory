# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventSourceCreateOrUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, location: str=None, tags: Dict[str, str]=None):
        """EventSourceCreateOrUpdateParameters - a model defined in OpenAPI

        :param kind: The kind of this EventSourceCreateOrUpdateParameters.
        :param location: The location of this EventSourceCreateOrUpdateParameters.
        :param tags: The tags of this EventSourceCreateOrUpdateParameters.
        """
        self.openapi_types = {
            'kind': str,
            'location': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'kind': 'kind',
            'location': 'location',
            'tags': 'tags'
        }

        self._kind = kind
        self._location = location
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSourceCreateOrUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSourceCreateOrUpdateParameters of this EventSourceCreateOrUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this EventSourceCreateOrUpdateParameters.

        The kind of the event source.

        :return: The kind of this EventSourceCreateOrUpdateParameters.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EventSourceCreateOrUpdateParameters.

        The kind of the event source.

        :param kind: The kind of this EventSourceCreateOrUpdateParameters.
        :type kind: str
        """
        allowed_values = ["Microsoft.EventHub", "Microsoft.IoTHub"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def location(self):
        """Gets the location of this EventSourceCreateOrUpdateParameters.

        The location of the resource.

        :return: The location of this EventSourceCreateOrUpdateParameters.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EventSourceCreateOrUpdateParameters.

        The location of the resource.

        :param location: The location of this EventSourceCreateOrUpdateParameters.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def tags(self):
        """Gets the tags of this EventSourceCreateOrUpdateParameters.

        Key-value pairs of additional properties for the resource.

        :return: The tags of this EventSourceCreateOrUpdateParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EventSourceCreateOrUpdateParameters.

        Key-value pairs of additional properties for the resource.

        :param tags: The tags of this EventSourceCreateOrUpdateParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags
