/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandardEnvironmentResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandardEnvironmentResourceProperties::OAIStandardEnvironmentResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandardEnvironmentResourceProperties::OAIStandardEnvironmentResourceProperties() {
    this->initializeModel();
}

OAIStandardEnvironmentResourceProperties::~OAIStandardEnvironmentResourceProperties() {}

void OAIStandardEnvironmentResourceProperties::initializeModel() {

    m_data_retention_time_isSet = false;
    m_data_retention_time_isValid = false;

    m_partition_key_properties_isSet = false;
    m_partition_key_properties_isValid = false;

    m_storage_limit_exceeded_behavior_isSet = false;
    m_storage_limit_exceeded_behavior_isValid = false;

    m_data_access_fqdn_isSet = false;
    m_data_access_fqdn_isValid = false;

    m_data_access_id_isSet = false;
    m_data_access_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIStandardEnvironmentResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandardEnvironmentResourceProperties::fromJsonObject(QJsonObject json) {

    m_data_retention_time_isValid = ::OpenAPI::fromJsonValue(m_data_retention_time, json[QString("dataRetentionTime")]);
    m_data_retention_time_isSet = !json[QString("dataRetentionTime")].isNull() && m_data_retention_time_isValid;

    m_partition_key_properties_isValid = ::OpenAPI::fromJsonValue(m_partition_key_properties, json[QString("partitionKeyProperties")]);
    m_partition_key_properties_isSet = !json[QString("partitionKeyProperties")].isNull() && m_partition_key_properties_isValid;

    m_storage_limit_exceeded_behavior_isValid = ::OpenAPI::fromJsonValue(m_storage_limit_exceeded_behavior, json[QString("storageLimitExceededBehavior")]);
    m_storage_limit_exceeded_behavior_isSet = !json[QString("storageLimitExceededBehavior")].isNull() && m_storage_limit_exceeded_behavior_isValid;

    m_data_access_fqdn_isValid = ::OpenAPI::fromJsonValue(m_data_access_fqdn, json[QString("dataAccessFqdn")]);
    m_data_access_fqdn_isSet = !json[QString("dataAccessFqdn")].isNull() && m_data_access_fqdn_isValid;

    m_data_access_id_isValid = ::OpenAPI::fromJsonValue(m_data_access_id, json[QString("dataAccessId")]);
    m_data_access_id_isSet = !json[QString("dataAccessId")].isNull() && m_data_access_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIStandardEnvironmentResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandardEnvironmentResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_retention_time_isSet) {
        obj.insert(QString("dataRetentionTime"), ::OpenAPI::toJsonValue(m_data_retention_time));
    }
    if (m_partition_key_properties.size() > 0) {
        obj.insert(QString("partitionKeyProperties"), ::OpenAPI::toJsonValue(m_partition_key_properties));
    }
    if (m_storage_limit_exceeded_behavior_isSet) {
        obj.insert(QString("storageLimitExceededBehavior"), ::OpenAPI::toJsonValue(m_storage_limit_exceeded_behavior));
    }
    if (m_data_access_fqdn_isSet) {
        obj.insert(QString("dataAccessFqdn"), ::OpenAPI::toJsonValue(m_data_access_fqdn));
    }
    if (m_data_access_id_isSet) {
        obj.insert(QString("dataAccessId"), ::OpenAPI::toJsonValue(m_data_access_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIStandardEnvironmentResourceProperties::getDataRetentionTime() const {
    return m_data_retention_time;
}
void OAIStandardEnvironmentResourceProperties::setDataRetentionTime(const QString &data_retention_time) {
    m_data_retention_time = data_retention_time;
    m_data_retention_time_isSet = true;
}

bool OAIStandardEnvironmentResourceProperties::is_data_retention_time_Set() const{
    return m_data_retention_time_isSet;
}

bool OAIStandardEnvironmentResourceProperties::is_data_retention_time_Valid() const{
    return m_data_retention_time_isValid;
}

QList<OAITimeSeriesIdProperty> OAIStandardEnvironmentResourceProperties::getPartitionKeyProperties() const {
    return m_partition_key_properties;
}
void OAIStandardEnvironmentResourceProperties::setPartitionKeyProperties(const QList<OAITimeSeriesIdProperty> &partition_key_properties) {
    m_partition_key_properties = partition_key_properties;
    m_partition_key_properties_isSet = true;
}

bool OAIStandardEnvironmentResourceProperties::is_partition_key_properties_Set() const{
    return m_partition_key_properties_isSet;
}

bool OAIStandardEnvironmentResourceProperties::is_partition_key_properties_Valid() const{
    return m_partition_key_properties_isValid;
}

QString OAIStandardEnvironmentResourceProperties::getStorageLimitExceededBehavior() const {
    return m_storage_limit_exceeded_behavior;
}
void OAIStandardEnvironmentResourceProperties::setStorageLimitExceededBehavior(const QString &storage_limit_exceeded_behavior) {
    m_storage_limit_exceeded_behavior = storage_limit_exceeded_behavior;
    m_storage_limit_exceeded_behavior_isSet = true;
}

bool OAIStandardEnvironmentResourceProperties::is_storage_limit_exceeded_behavior_Set() const{
    return m_storage_limit_exceeded_behavior_isSet;
}

bool OAIStandardEnvironmentResourceProperties::is_storage_limit_exceeded_behavior_Valid() const{
    return m_storage_limit_exceeded_behavior_isValid;
}

QString OAIStandardEnvironmentResourceProperties::getDataAccessFqdn() const {
    return m_data_access_fqdn;
}
void OAIStandardEnvironmentResourceProperties::setDataAccessFqdn(const QString &data_access_fqdn) {
    m_data_access_fqdn = data_access_fqdn;
    m_data_access_fqdn_isSet = true;
}

bool OAIStandardEnvironmentResourceProperties::is_data_access_fqdn_Set() const{
    return m_data_access_fqdn_isSet;
}

bool OAIStandardEnvironmentResourceProperties::is_data_access_fqdn_Valid() const{
    return m_data_access_fqdn_isValid;
}

QString OAIStandardEnvironmentResourceProperties::getDataAccessId() const {
    return m_data_access_id;
}
void OAIStandardEnvironmentResourceProperties::setDataAccessId(const QString &data_access_id) {
    m_data_access_id = data_access_id;
    m_data_access_id_isSet = true;
}

bool OAIStandardEnvironmentResourceProperties::is_data_access_id_Set() const{
    return m_data_access_id_isSet;
}

bool OAIStandardEnvironmentResourceProperties::is_data_access_id_Valid() const{
    return m_data_access_id_isValid;
}

OAIEnvironmentStatus OAIStandardEnvironmentResourceProperties::getStatus() const {
    return m_status;
}
void OAIStandardEnvironmentResourceProperties::setStatus(const OAIEnvironmentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStandardEnvironmentResourceProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStandardEnvironmentResourceProperties::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIStandardEnvironmentResourceProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIStandardEnvironmentResourceProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIStandardEnvironmentResourceProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIStandardEnvironmentResourceProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIProvisioningState OAIStandardEnvironmentResourceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIStandardEnvironmentResourceProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIStandardEnvironmentResourceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIStandardEnvironmentResourceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIStandardEnvironmentResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_retention_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_key_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_limit_exceeded_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandardEnvironmentResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_retention_time_isValid && true;
}

} // namespace OpenAPI
