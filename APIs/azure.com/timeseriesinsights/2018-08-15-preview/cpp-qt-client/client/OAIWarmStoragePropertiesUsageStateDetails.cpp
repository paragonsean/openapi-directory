/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarmStoragePropertiesUsageStateDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarmStoragePropertiesUsageStateDetails::OAIWarmStoragePropertiesUsageStateDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarmStoragePropertiesUsageStateDetails::OAIWarmStoragePropertiesUsageStateDetails() {
    this->initializeModel();
}

OAIWarmStoragePropertiesUsageStateDetails::~OAIWarmStoragePropertiesUsageStateDetails() {}

void OAIWarmStoragePropertiesUsageStateDetails::initializeModel() {

    m_current_count_isSet = false;
    m_current_count_isValid = false;

    m_max_count_isSet = false;
    m_max_count_isValid = false;
}

void OAIWarmStoragePropertiesUsageStateDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarmStoragePropertiesUsageStateDetails::fromJsonObject(QJsonObject json) {

    m_current_count_isValid = ::OpenAPI::fromJsonValue(m_current_count, json[QString("currentCount")]);
    m_current_count_isSet = !json[QString("currentCount")].isNull() && m_current_count_isValid;

    m_max_count_isValid = ::OpenAPI::fromJsonValue(m_max_count, json[QString("maxCount")]);
    m_max_count_isSet = !json[QString("maxCount")].isNull() && m_max_count_isValid;
}

QString OAIWarmStoragePropertiesUsageStateDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarmStoragePropertiesUsageStateDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_current_count_isSet) {
        obj.insert(QString("currentCount"), ::OpenAPI::toJsonValue(m_current_count));
    }
    if (m_max_count_isSet) {
        obj.insert(QString("maxCount"), ::OpenAPI::toJsonValue(m_max_count));
    }
    return obj;
}

qint32 OAIWarmStoragePropertiesUsageStateDetails::getCurrentCount() const {
    return m_current_count;
}
void OAIWarmStoragePropertiesUsageStateDetails::setCurrentCount(const qint32 &current_count) {
    m_current_count = current_count;
    m_current_count_isSet = true;
}

bool OAIWarmStoragePropertiesUsageStateDetails::is_current_count_Set() const{
    return m_current_count_isSet;
}

bool OAIWarmStoragePropertiesUsageStateDetails::is_current_count_Valid() const{
    return m_current_count_isValid;
}

qint32 OAIWarmStoragePropertiesUsageStateDetails::getMaxCount() const {
    return m_max_count;
}
void OAIWarmStoragePropertiesUsageStateDetails::setMaxCount(const qint32 &max_count) {
    m_max_count = max_count;
    m_max_count_isSet = true;
}

bool OAIWarmStoragePropertiesUsageStateDetails::is_max_count_Set() const{
    return m_max_count_isSet;
}

bool OAIWarmStoragePropertiesUsageStateDetails::is_max_count_Valid() const{
    return m_max_count_isValid;
}

bool OAIWarmStoragePropertiesUsageStateDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarmStoragePropertiesUsageStateDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
