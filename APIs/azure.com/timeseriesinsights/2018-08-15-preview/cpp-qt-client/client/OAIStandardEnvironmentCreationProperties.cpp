/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandardEnvironmentCreationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandardEnvironmentCreationProperties::OAIStandardEnvironmentCreationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandardEnvironmentCreationProperties::OAIStandardEnvironmentCreationProperties() {
    this->initializeModel();
}

OAIStandardEnvironmentCreationProperties::~OAIStandardEnvironmentCreationProperties() {}

void OAIStandardEnvironmentCreationProperties::initializeModel() {

    m_data_retention_time_isSet = false;
    m_data_retention_time_isValid = false;

    m_partition_key_properties_isSet = false;
    m_partition_key_properties_isValid = false;

    m_storage_limit_exceeded_behavior_isSet = false;
    m_storage_limit_exceeded_behavior_isValid = false;
}

void OAIStandardEnvironmentCreationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandardEnvironmentCreationProperties::fromJsonObject(QJsonObject json) {

    m_data_retention_time_isValid = ::OpenAPI::fromJsonValue(m_data_retention_time, json[QString("dataRetentionTime")]);
    m_data_retention_time_isSet = !json[QString("dataRetentionTime")].isNull() && m_data_retention_time_isValid;

    m_partition_key_properties_isValid = ::OpenAPI::fromJsonValue(m_partition_key_properties, json[QString("partitionKeyProperties")]);
    m_partition_key_properties_isSet = !json[QString("partitionKeyProperties")].isNull() && m_partition_key_properties_isValid;

    m_storage_limit_exceeded_behavior_isValid = ::OpenAPI::fromJsonValue(m_storage_limit_exceeded_behavior, json[QString("storageLimitExceededBehavior")]);
    m_storage_limit_exceeded_behavior_isSet = !json[QString("storageLimitExceededBehavior")].isNull() && m_storage_limit_exceeded_behavior_isValid;
}

QString OAIStandardEnvironmentCreationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandardEnvironmentCreationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_retention_time_isSet) {
        obj.insert(QString("dataRetentionTime"), ::OpenAPI::toJsonValue(m_data_retention_time));
    }
    if (m_partition_key_properties.size() > 0) {
        obj.insert(QString("partitionKeyProperties"), ::OpenAPI::toJsonValue(m_partition_key_properties));
    }
    if (m_storage_limit_exceeded_behavior_isSet) {
        obj.insert(QString("storageLimitExceededBehavior"), ::OpenAPI::toJsonValue(m_storage_limit_exceeded_behavior));
    }
    return obj;
}

QString OAIStandardEnvironmentCreationProperties::getDataRetentionTime() const {
    return m_data_retention_time;
}
void OAIStandardEnvironmentCreationProperties::setDataRetentionTime(const QString &data_retention_time) {
    m_data_retention_time = data_retention_time;
    m_data_retention_time_isSet = true;
}

bool OAIStandardEnvironmentCreationProperties::is_data_retention_time_Set() const{
    return m_data_retention_time_isSet;
}

bool OAIStandardEnvironmentCreationProperties::is_data_retention_time_Valid() const{
    return m_data_retention_time_isValid;
}

QList<OAITimeSeriesIdProperty> OAIStandardEnvironmentCreationProperties::getPartitionKeyProperties() const {
    return m_partition_key_properties;
}
void OAIStandardEnvironmentCreationProperties::setPartitionKeyProperties(const QList<OAITimeSeriesIdProperty> &partition_key_properties) {
    m_partition_key_properties = partition_key_properties;
    m_partition_key_properties_isSet = true;
}

bool OAIStandardEnvironmentCreationProperties::is_partition_key_properties_Set() const{
    return m_partition_key_properties_isSet;
}

bool OAIStandardEnvironmentCreationProperties::is_partition_key_properties_Valid() const{
    return m_partition_key_properties_isValid;
}

QString OAIStandardEnvironmentCreationProperties::getStorageLimitExceededBehavior() const {
    return m_storage_limit_exceeded_behavior;
}
void OAIStandardEnvironmentCreationProperties::setStorageLimitExceededBehavior(const QString &storage_limit_exceeded_behavior) {
    m_storage_limit_exceeded_behavior = storage_limit_exceeded_behavior;
    m_storage_limit_exceeded_behavior_isSet = true;
}

bool OAIStandardEnvironmentCreationProperties::is_storage_limit_exceeded_behavior_Set() const{
    return m_storage_limit_exceeded_behavior_isSet;
}

bool OAIStandardEnvironmentCreationProperties::is_storage_limit_exceeded_behavior_Valid() const{
    return m_storage_limit_exceeded_behavior_isValid;
}

bool OAIStandardEnvironmentCreationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_retention_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_key_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_limit_exceeded_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandardEnvironmentCreationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_retention_time_isValid && true;
}

} // namespace OpenAPI
