/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarmStorageEnvironmentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarmStorageEnvironmentStatus::OAIWarmStorageEnvironmentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarmStorageEnvironmentStatus::OAIWarmStorageEnvironmentStatus() {
    this->initializeModel();
}

OAIWarmStorageEnvironmentStatus::~OAIWarmStorageEnvironmentStatus() {}

void OAIWarmStorageEnvironmentStatus::initializeModel() {

    m_properties_usage_isSet = false;
    m_properties_usage_isValid = false;
}

void OAIWarmStorageEnvironmentStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarmStorageEnvironmentStatus::fromJsonObject(QJsonObject json) {

    m_properties_usage_isValid = ::OpenAPI::fromJsonValue(m_properties_usage, json[QString("propertiesUsage")]);
    m_properties_usage_isSet = !json[QString("propertiesUsage")].isNull() && m_properties_usage_isValid;
}

QString OAIWarmStorageEnvironmentStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarmStorageEnvironmentStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_properties_usage.isSet()) {
        obj.insert(QString("propertiesUsage"), ::OpenAPI::toJsonValue(m_properties_usage));
    }
    return obj;
}

OAIWarmStoragePropertiesUsage OAIWarmStorageEnvironmentStatus::getPropertiesUsage() const {
    return m_properties_usage;
}
void OAIWarmStorageEnvironmentStatus::setPropertiesUsage(const OAIWarmStoragePropertiesUsage &properties_usage) {
    m_properties_usage = properties_usage;
    m_properties_usage_isSet = true;
}

bool OAIWarmStorageEnvironmentStatus::is_properties_usage_Set() const{
    return m_properties_usage_isSet;
}

bool OAIWarmStorageEnvironmentStatus::is_properties_usage_Valid() const{
    return m_properties_usage_isValid;
}

bool OAIWarmStorageEnvironmentStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarmStorageEnvironmentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
