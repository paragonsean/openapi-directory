/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentStatus::OAIEnvironmentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentStatus::OAIEnvironmentStatus() {
    this->initializeModel();
}

OAIEnvironmentStatus::~OAIEnvironmentStatus() {}

void OAIEnvironmentStatus::initializeModel() {

    m_ingress_isSet = false;
    m_ingress_isValid = false;

    m_warm_storage_isSet = false;
    m_warm_storage_isValid = false;
}

void OAIEnvironmentStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentStatus::fromJsonObject(QJsonObject json) {

    m_ingress_isValid = ::OpenAPI::fromJsonValue(m_ingress, json[QString("ingress")]);
    m_ingress_isSet = !json[QString("ingress")].isNull() && m_ingress_isValid;

    m_warm_storage_isValid = ::OpenAPI::fromJsonValue(m_warm_storage, json[QString("warmStorage")]);
    m_warm_storage_isSet = !json[QString("warmStorage")].isNull() && m_warm_storage_isValid;
}

QString OAIEnvironmentStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_ingress.isSet()) {
        obj.insert(QString("ingress"), ::OpenAPI::toJsonValue(m_ingress));
    }
    if (m_warm_storage.isSet()) {
        obj.insert(QString("warmStorage"), ::OpenAPI::toJsonValue(m_warm_storage));
    }
    return obj;
}

OAIIngressEnvironmentStatus OAIEnvironmentStatus::getIngress() const {
    return m_ingress;
}
void OAIEnvironmentStatus::setIngress(const OAIIngressEnvironmentStatus &ingress) {
    m_ingress = ingress;
    m_ingress_isSet = true;
}

bool OAIEnvironmentStatus::is_ingress_Set() const{
    return m_ingress_isSet;
}

bool OAIEnvironmentStatus::is_ingress_Valid() const{
    return m_ingress_isValid;
}

OAIWarmStorageEnvironmentStatus OAIEnvironmentStatus::getWarmStorage() const {
    return m_warm_storage;
}
void OAIEnvironmentStatus::setWarmStorage(const OAIWarmStorageEnvironmentStatus &warm_storage) {
    m_warm_storage = warm_storage;
    m_warm_storage_isSet = true;
}

bool OAIEnvironmentStatus::is_warm_storage_Set() const{
    return m_warm_storage_isSet;
}

bool OAIEnvironmentStatus::is_warm_storage_Valid() const{
    return m_warm_storage_isValid;
}

bool OAIEnvironmentStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
