/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import EventSourceCreateOrUpdateParameters from '../model/EventSourceCreateOrUpdateParameters';
import EventSourceListResponse from '../model/EventSourceListResponse';
import EventSourceResource from '../model/EventSourceResource';
import EventSourceUpdateParameters from '../model/EventSourceUpdateParameters';

/**
* EventSources service.
* @module api/EventSourcesApi
* @version 2018-08-15-preview
*/
export default class EventSourcesApi {

    /**
    * Constructs a new EventSourcesApi. 
    * @alias module:api/EventSourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventSourcesCreateOrUpdate operation.
     * @callback module:api/EventSourcesApi~eventSourcesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSourceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an event source under the specified environment.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} eventSourceName Name of the event source.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/EventSourceCreateOrUpdateParameters} parameters Parameters for creating an event source resource.
     * @param {module:api/EventSourcesApi~eventSourcesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSourceResource}
     */
    eventSourcesCreateOrUpdate(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSourcesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSourcesCreateOrUpdate");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling eventSourcesCreateOrUpdate");
      }
      // verify the required parameter 'eventSourceName' is set
      if (eventSourceName === undefined || eventSourceName === null) {
        throw new Error("Missing the required parameter 'eventSourceName' when calling eventSourcesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSourcesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling eventSourcesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName,
        'eventSourceName': eventSourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSourceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSourcesDelete operation.
     * @callback module:api/EventSourcesApi~eventSourcesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the event source with the specified name in the specified subscription, resource group, and environment
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} eventSourceName The name of the Time Series Insights event source associated with the specified environment.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSourcesApi~eventSourcesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventSourcesDelete(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSourcesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSourcesDelete");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling eventSourcesDelete");
      }
      // verify the required parameter 'eventSourceName' is set
      if (eventSourceName === undefined || eventSourceName === null) {
        throw new Error("Missing the required parameter 'eventSourceName' when calling eventSourcesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSourcesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName,
        'eventSourceName': eventSourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSourcesGet operation.
     * @callback module:api/EventSourcesApi~eventSourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSourceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the event source with the specified name in the specified environment.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} eventSourceName The name of the Time Series Insights event source associated with the specified environment.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSourcesApi~eventSourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSourceResource}
     */
    eventSourcesGet(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSourcesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSourcesGet");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling eventSourcesGet");
      }
      // verify the required parameter 'eventSourceName' is set
      if (eventSourceName === undefined || eventSourceName === null) {
        throw new Error("Missing the required parameter 'eventSourceName' when calling eventSourcesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSourcesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName,
        'eventSourceName': eventSourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSourceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSourcesListByEnvironment operation.
     * @callback module:api/EventSourcesApi~eventSourcesListByEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the available event sources associated with the subscription and within the specified resource group and environment.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSourcesApi~eventSourcesListByEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSourceListResponse}
     */
    eventSourcesListByEnvironment(subscriptionId, resourceGroupName, environmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSourcesListByEnvironment");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSourcesListByEnvironment");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling eventSourcesListByEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSourcesListByEnvironment");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSourceListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSourcesUpdate operation.
     * @callback module:api/EventSourcesApi~eventSourcesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSourceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the event source with the specified name in the specified subscription, resource group, and environment.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} eventSourceName The name of the Time Series Insights event source associated with the specified environment.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/EventSourceUpdateParameters} eventSourceUpdateParameters Request object that contains the updated information for the event source.
     * @param {module:api/EventSourcesApi~eventSourcesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSourceResource}
     */
    eventSourcesUpdate(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, eventSourceUpdateParameters, callback) {
      let postBody = eventSourceUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSourcesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSourcesUpdate");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling eventSourcesUpdate");
      }
      // verify the required parameter 'eventSourceName' is set
      if (eventSourceName === undefined || eventSourceName === null) {
        throw new Error("Missing the required parameter 'eventSourceName' when calling eventSourcesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSourcesUpdate");
      }
      // verify the required parameter 'eventSourceUpdateParameters' is set
      if (eventSourceUpdateParameters === undefined || eventSourceUpdateParameters === null) {
        throw new Error("Missing the required parameter 'eventSourceUpdateParameters' when calling eventSourcesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName,
        'eventSourceName': eventSourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSourceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
