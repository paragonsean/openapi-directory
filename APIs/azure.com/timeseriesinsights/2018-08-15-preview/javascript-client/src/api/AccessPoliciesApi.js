/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessPolicyCreateOrUpdateParameters from '../model/AccessPolicyCreateOrUpdateParameters';
import AccessPolicyListResponse from '../model/AccessPolicyListResponse';
import AccessPolicyResource from '../model/AccessPolicyResource';
import AccessPolicyUpdateParameters from '../model/AccessPolicyUpdateParameters';
import CloudError from '../model/CloudError';

/**
* AccessPolicies service.
* @module api/AccessPoliciesApi
* @version 2018-08-15-preview
*/
export default class AccessPoliciesApi {

    /**
    * Constructs a new AccessPoliciesApi. 
    * @alias module:api/AccessPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accessPoliciesCreateOrUpdate operation.
     * @callback module:api/AccessPoliciesApi~accessPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessPolicyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an access policy in the specified environment.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} accessPolicyName Name of the access policy.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/AccessPolicyCreateOrUpdateParameters} parameters Parameters for creating an access policy.
     * @param {module:api/AccessPoliciesApi~accessPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessPolicyResource}
     */
    accessPoliciesCreateOrUpdate(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling accessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling accessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling accessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'accessPolicyName' is set
      if (accessPolicyName === undefined || accessPolicyName === null) {
        throw new Error("Missing the required parameter 'accessPolicyName' when calling accessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling accessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling accessPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName,
        'accessPolicyName': accessPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessPolicyResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessPoliciesDelete operation.
     * @callback module:api/AccessPoliciesApi~accessPoliciesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the access policy with the specified name in the specified subscription, resource group, and environment
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} accessPolicyName The name of the Time Series Insights access policy associated with the specified environment.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/AccessPoliciesApi~accessPoliciesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accessPoliciesDelete(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling accessPoliciesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling accessPoliciesDelete");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling accessPoliciesDelete");
      }
      // verify the required parameter 'accessPolicyName' is set
      if (accessPolicyName === undefined || accessPolicyName === null) {
        throw new Error("Missing the required parameter 'accessPolicyName' when calling accessPoliciesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling accessPoliciesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName,
        'accessPolicyName': accessPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessPoliciesGet operation.
     * @callback module:api/AccessPoliciesApi~accessPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessPolicyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the access policy with the specified name in the specified environment.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} accessPolicyName The name of the Time Series Insights access policy associated with the specified environment.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/AccessPoliciesApi~accessPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessPolicyResource}
     */
    accessPoliciesGet(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling accessPoliciesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling accessPoliciesGet");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling accessPoliciesGet");
      }
      // verify the required parameter 'accessPolicyName' is set
      if (accessPolicyName === undefined || accessPolicyName === null) {
        throw new Error("Missing the required parameter 'accessPolicyName' when calling accessPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling accessPoliciesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName,
        'accessPolicyName': accessPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessPolicyResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessPoliciesListByEnvironment operation.
     * @callback module:api/AccessPoliciesApi~accessPoliciesListByEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessPolicyListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the available access policies associated with the environment.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/AccessPoliciesApi~accessPoliciesListByEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessPolicyListResponse}
     */
    accessPoliciesListByEnvironment(subscriptionId, resourceGroupName, environmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling accessPoliciesListByEnvironment");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling accessPoliciesListByEnvironment");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling accessPoliciesListByEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling accessPoliciesListByEnvironment");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessPolicyListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessPoliciesUpdate operation.
     * @callback module:api/AccessPoliciesApi~accessPoliciesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessPolicyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the access policy with the specified name in the specified subscription, resource group, and environment.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param {String} accessPolicyName The name of the Time Series Insights access policy associated with the specified environment.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/AccessPolicyUpdateParameters} accessPolicyUpdateParameters Request object that contains the updated information for the access policy.
     * @param {module:api/AccessPoliciesApi~accessPoliciesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessPolicyResource}
     */
    accessPoliciesUpdate(subscriptionId, resourceGroupName, environmentName, accessPolicyName, apiVersion, accessPolicyUpdateParameters, callback) {
      let postBody = accessPolicyUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling accessPoliciesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling accessPoliciesUpdate");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling accessPoliciesUpdate");
      }
      // verify the required parameter 'accessPolicyName' is set
      if (accessPolicyName === undefined || accessPolicyName === null) {
        throw new Error("Missing the required parameter 'accessPolicyName' when calling accessPoliciesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling accessPoliciesUpdate");
      }
      // verify the required parameter 'accessPolicyUpdateParameters' is set
      if (accessPolicyUpdateParameters === undefined || accessPolicyUpdateParameters === null) {
        throw new Error("Missing the required parameter 'accessPolicyUpdateParameters' when calling accessPoliciesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'environmentName': environmentName,
        'accessPolicyName': accessPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessPolicyResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
