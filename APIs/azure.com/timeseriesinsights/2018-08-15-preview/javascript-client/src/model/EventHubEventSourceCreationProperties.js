/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventHubEventSourceCommonProperties from './EventHubEventSourceCommonProperties';
import ProvisioningState from './ProvisioningState';

/**
 * The EventHubEventSourceCreationProperties model module.
 * @module model/EventHubEventSourceCreationProperties
 * @version 2018-08-15-preview
 */
class EventHubEventSourceCreationProperties {
    /**
     * Constructs a new <code>EventHubEventSourceCreationProperties</code>.
     * Properties of the EventHub event source that are required on create or update requests.
     * @alias module:model/EventHubEventSourceCreationProperties
     * @implements module:model/EventHubEventSourceCommonProperties
     * @param consumerGroupName {String} The name of the event hub's consumer group that holds the partitions from which events will be read.
     * @param eventHubName {String} The name of the event hub.
     * @param keyName {String} The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
     * @param serviceBusNamespace {String} The name of the service bus that contains the event hub.
     * @param eventSourceResourceId {String} The resource id of the event source in Azure Resource Manager.
     */
    constructor(consumerGroupName, eventHubName, keyName, serviceBusNamespace, eventSourceResourceId) { 
        EventHubEventSourceCommonProperties.initialize(this, eventSourceResourceId);
        EventHubEventSourceCreationProperties.initialize(this, consumerGroupName, eventHubName, keyName, serviceBusNamespace, eventSourceResourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consumerGroupName, eventHubName, keyName, serviceBusNamespace, eventSourceResourceId) { 
        obj['sharedAccessKey'] = sharedAccessKey;
        obj['consumerGroupName'] = consumerGroupName;
        obj['eventHubName'] = eventHubName;
        obj['keyName'] = keyName;
        obj['serviceBusNamespace'] = serviceBusNamespace;
        obj['eventSourceResourceId'] = eventSourceResourceId;
    }

    /**
     * Constructs a <code>EventHubEventSourceCreationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventHubEventSourceCreationProperties} obj Optional instance to populate.
     * @return {module:model/EventHubEventSourceCreationProperties} The populated <code>EventHubEventSourceCreationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventHubEventSourceCreationProperties();
            EventHubEventSourceCommonProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('sharedAccessKey')) {
                obj['sharedAccessKey'] = ApiClient.convertToType(data['sharedAccessKey'], 'String');
            }
            if (data.hasOwnProperty('consumerGroupName')) {
                obj['consumerGroupName'] = ApiClient.convertToType(data['consumerGroupName'], 'String');
            }
            if (data.hasOwnProperty('eventHubName')) {
                obj['eventHubName'] = ApiClient.convertToType(data['eventHubName'], 'String');
            }
            if (data.hasOwnProperty('keyName')) {
                obj['keyName'] = ApiClient.convertToType(data['keyName'], 'String');
            }
            if (data.hasOwnProperty('serviceBusNamespace')) {
                obj['serviceBusNamespace'] = ApiClient.convertToType(data['serviceBusNamespace'], 'String');
            }
            if (data.hasOwnProperty('eventSourceResourceId')) {
                obj['eventSourceResourceId'] = ApiClient.convertToType(data['eventSourceResourceId'], 'String');
            }
            if (data.hasOwnProperty('timestampPropertyName')) {
                obj['timestampPropertyName'] = ApiClient.convertToType(data['timestampPropertyName'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventHubEventSourceCreationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventHubEventSourceCreationProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventHubEventSourceCreationProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sharedAccessKey'] && !(typeof data['sharedAccessKey'] === 'string' || data['sharedAccessKey'] instanceof String)) {
            throw new Error("Expected the field `sharedAccessKey` to be a primitive type in the JSON string but got " + data['sharedAccessKey']);
        }
        // ensure the json data is a string
        if (data['consumerGroupName'] && !(typeof data['consumerGroupName'] === 'string' || data['consumerGroupName'] instanceof String)) {
            throw new Error("Expected the field `consumerGroupName` to be a primitive type in the JSON string but got " + data['consumerGroupName']);
        }
        // ensure the json data is a string
        if (data['eventHubName'] && !(typeof data['eventHubName'] === 'string' || data['eventHubName'] instanceof String)) {
            throw new Error("Expected the field `eventHubName` to be a primitive type in the JSON string but got " + data['eventHubName']);
        }
        // ensure the json data is a string
        if (data['keyName'] && !(typeof data['keyName'] === 'string' || data['keyName'] instanceof String)) {
            throw new Error("Expected the field `keyName` to be a primitive type in the JSON string but got " + data['keyName']);
        }
        // ensure the json data is a string
        if (data['serviceBusNamespace'] && !(typeof data['serviceBusNamespace'] === 'string' || data['serviceBusNamespace'] instanceof String)) {
            throw new Error("Expected the field `serviceBusNamespace` to be a primitive type in the JSON string but got " + data['serviceBusNamespace']);
        }
        // ensure the json data is a string
        if (data['eventSourceResourceId'] && !(typeof data['eventSourceResourceId'] === 'string' || data['eventSourceResourceId'] instanceof String)) {
            throw new Error("Expected the field `eventSourceResourceId` to be a primitive type in the JSON string but got " + data['eventSourceResourceId']);
        }
        // ensure the json data is a string
        if (data['timestampPropertyName'] && !(typeof data['timestampPropertyName'] === 'string' || data['timestampPropertyName'] instanceof String)) {
            throw new Error("Expected the field `timestampPropertyName` to be a primitive type in the JSON string but got " + data['timestampPropertyName']);
        }

        return true;
    }


}

EventHubEventSourceCreationProperties.RequiredProperties = ["sharedAccessKey", "consumerGroupName", "eventHubName", "keyName", "serviceBusNamespace", "eventSourceResourceId"];

/**
 * The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses.
 * @member {String} sharedAccessKey
 */
EventHubEventSourceCreationProperties.prototype['sharedAccessKey'] = undefined;

/**
 * The name of the event hub's consumer group that holds the partitions from which events will be read.
 * @member {String} consumerGroupName
 */
EventHubEventSourceCreationProperties.prototype['consumerGroupName'] = undefined;

/**
 * The name of the event hub.
 * @member {String} eventHubName
 */
EventHubEventSourceCreationProperties.prototype['eventHubName'] = undefined;

/**
 * The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
 * @member {String} keyName
 */
EventHubEventSourceCreationProperties.prototype['keyName'] = undefined;

/**
 * The name of the service bus that contains the event hub.
 * @member {String} serviceBusNamespace
 */
EventHubEventSourceCreationProperties.prototype['serviceBusNamespace'] = undefined;

/**
 * The resource id of the event source in Azure Resource Manager.
 * @member {String} eventSourceResourceId
 */
EventHubEventSourceCreationProperties.prototype['eventSourceResourceId'] = undefined;

/**
 * The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
 * @member {String} timestampPropertyName
 */
EventHubEventSourceCreationProperties.prototype['timestampPropertyName'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
EventHubEventSourceCreationProperties.prototype['creationTime'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
EventHubEventSourceCreationProperties.prototype['provisioningState'] = undefined;


// Implement EventHubEventSourceCommonProperties interface:
/**
 * The resource id of the event source in Azure Resource Manager.
 * @member {String} eventSourceResourceId
 */
EventHubEventSourceCommonProperties.prototype['eventSourceResourceId'] = undefined;
/**
 * The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
 * @member {String} timestampPropertyName
 */
EventHubEventSourceCommonProperties.prototype['timestampPropertyName'] = undefined;
/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
EventHubEventSourceCommonProperties.prototype['creationTime'] = undefined;
/**
 * @member {module:model/ProvisioningState} provisioningState
 */
EventHubEventSourceCommonProperties.prototype['provisioningState'] = undefined;




export default EventHubEventSourceCreationProperties;

