/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentResourceProperties from './EnvironmentResourceProperties';
import EnvironmentStatus from './EnvironmentStatus';
import LongTermStorageConfigurationOutput from './LongTermStorageConfigurationOutput';
import ProvisioningState from './ProvisioningState';
import ResourceProperties from './ResourceProperties';
import TimeSeriesIdProperty from './TimeSeriesIdProperty';
import WarmStoreConfigurationProperties from './WarmStoreConfigurationProperties';

/**
 * The LongTermEnvironmentResourceProperties model module.
 * @module model/LongTermEnvironmentResourceProperties
 * @version 2018-08-15-preview
 */
class LongTermEnvironmentResourceProperties {
    /**
     * Constructs a new <code>LongTermEnvironmentResourceProperties</code>.
     * Properties of the long-term environment.
     * @alias module:model/LongTermEnvironmentResourceProperties
     * @implements module:model/EnvironmentResourceProperties
     * @implements module:model/ResourceProperties
     */
    constructor() { 
        EnvironmentResourceProperties.initialize(this);ResourceProperties.initialize(this);
        LongTermEnvironmentResourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['storageConfiguration'] = storageConfiguration;
        obj['timeSeriesIdProperties'] = timeSeriesIdProperties;
    }

    /**
     * Constructs a <code>LongTermEnvironmentResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LongTermEnvironmentResourceProperties} obj Optional instance to populate.
     * @return {module:model/LongTermEnvironmentResourceProperties} The populated <code>LongTermEnvironmentResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LongTermEnvironmentResourceProperties();
            EnvironmentResourceProperties.constructFromObject(data, obj);
            ResourceProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('storageConfiguration')) {
                obj['storageConfiguration'] = LongTermStorageConfigurationOutput.constructFromObject(data['storageConfiguration']);
            }
            if (data.hasOwnProperty('timeSeriesIdProperties')) {
                obj['timeSeriesIdProperties'] = ApiClient.convertToType(data['timeSeriesIdProperties'], [TimeSeriesIdProperty]);
            }
            if (data.hasOwnProperty('warmStoreConfiguration')) {
                obj['warmStoreConfiguration'] = WarmStoreConfigurationProperties.constructFromObject(data['warmStoreConfiguration']);
            }
            if (data.hasOwnProperty('dataAccessFqdn')) {
                obj['dataAccessFqdn'] = ApiClient.convertToType(data['dataAccessFqdn'], 'String');
            }
            if (data.hasOwnProperty('dataAccessId')) {
                obj['dataAccessId'] = ApiClient.convertToType(data['dataAccessId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EnvironmentStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LongTermEnvironmentResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LongTermEnvironmentResourceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LongTermEnvironmentResourceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `storageConfiguration`
        if (data['storageConfiguration']) { // data not null
          LongTermStorageConfigurationOutput.validateJSON(data['storageConfiguration']);
        }
        if (data['timeSeriesIdProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timeSeriesIdProperties'])) {
                throw new Error("Expected the field `timeSeriesIdProperties` to be an array in the JSON data but got " + data['timeSeriesIdProperties']);
            }
            // validate the optional field `timeSeriesIdProperties` (array)
            for (const item of data['timeSeriesIdProperties']) {
                TimeSeriesIdProperty.validateJSON(item);
            };
        }
        // validate the optional field `warmStoreConfiguration`
        if (data['warmStoreConfiguration']) { // data not null
          WarmStoreConfigurationProperties.validateJSON(data['warmStoreConfiguration']);
        }
        // ensure the json data is a string
        if (data['dataAccessFqdn'] && !(typeof data['dataAccessFqdn'] === 'string' || data['dataAccessFqdn'] instanceof String)) {
            throw new Error("Expected the field `dataAccessFqdn` to be a primitive type in the JSON string but got " + data['dataAccessFqdn']);
        }
        // ensure the json data is a string
        if (data['dataAccessId'] && !(typeof data['dataAccessId'] === 'string' || data['dataAccessId'] instanceof String)) {
            throw new Error("Expected the field `dataAccessId` to be a primitive type in the JSON string but got " + data['dataAccessId']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          EnvironmentStatus.validateJSON(data['status']);
        }

        return true;
    }


}

LongTermEnvironmentResourceProperties.RequiredProperties = ["storageConfiguration", "timeSeriesIdProperties"];

/**
 * @member {module:model/LongTermStorageConfigurationOutput} storageConfiguration
 */
LongTermEnvironmentResourceProperties.prototype['storageConfiguration'] = undefined;

/**
 * The list of event properties which will be used to define the environment's time series id.
 * @member {Array.<module:model/TimeSeriesIdProperty>} timeSeriesIdProperties
 */
LongTermEnvironmentResourceProperties.prototype['timeSeriesIdProperties'] = undefined;

/**
 * @member {module:model/WarmStoreConfigurationProperties} warmStoreConfiguration
 */
LongTermEnvironmentResourceProperties.prototype['warmStoreConfiguration'] = undefined;

/**
 * The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
 * @member {String} dataAccessFqdn
 */
LongTermEnvironmentResourceProperties.prototype['dataAccessFqdn'] = undefined;

/**
 * An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
 * @member {String} dataAccessId
 */
LongTermEnvironmentResourceProperties.prototype['dataAccessId'] = undefined;

/**
 * @member {module:model/EnvironmentStatus} status
 */
LongTermEnvironmentResourceProperties.prototype['status'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
LongTermEnvironmentResourceProperties.prototype['creationTime'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
LongTermEnvironmentResourceProperties.prototype['provisioningState'] = undefined;


// Implement EnvironmentResourceProperties interface:
/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
EnvironmentResourceProperties.prototype['creationTime'] = undefined;
/**
 * @member {module:model/ProvisioningState} provisioningState
 */
EnvironmentResourceProperties.prototype['provisioningState'] = undefined;
// Implement ResourceProperties interface:
/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
ResourceProperties.prototype['creationTime'] = undefined;
/**
 * @member {module:model/ProvisioningState} provisioningState
 */
ResourceProperties.prototype['provisioningState'] = undefined;




export default LongTermEnvironmentResourceProperties;

