/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WarmStoragePropertiesUsageStateDetails from './WarmStoragePropertiesUsageStateDetails';

/**
 * The WarmStoragePropertiesUsage model module.
 * @module model/WarmStoragePropertiesUsage
 * @version 2018-08-15-preview
 */
class WarmStoragePropertiesUsage {
    /**
     * Constructs a new <code>WarmStoragePropertiesUsage</code>.
     * An object that contains the status of warm storage properties usage.
     * @alias module:model/WarmStoragePropertiesUsage
     */
    constructor() { 
        
        WarmStoragePropertiesUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WarmStoragePropertiesUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WarmStoragePropertiesUsage} obj Optional instance to populate.
     * @return {module:model/WarmStoragePropertiesUsage} The populated <code>WarmStoragePropertiesUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WarmStoragePropertiesUsage();

            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateDetails')) {
                obj['stateDetails'] = WarmStoragePropertiesUsageStateDetails.constructFromObject(data['stateDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WarmStoragePropertiesUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WarmStoragePropertiesUsage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stateDetails`
        if (data['stateDetails']) { // data not null
          WarmStoragePropertiesUsageStateDetails.validateJSON(data['stateDetails']);
        }

        return true;
    }


}



/**
 * This string represents the state of warm storage properties usage. It can be \"Ok\", \"Error\", \"Unknown\".
 * @member {module:model/WarmStoragePropertiesUsage.StateEnum} state
 */
WarmStoragePropertiesUsage.prototype['state'] = undefined;

/**
 * @member {module:model/WarmStoragePropertiesUsageStateDetails} stateDetails
 */
WarmStoragePropertiesUsage.prototype['stateDetails'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WarmStoragePropertiesUsage['StateEnum'] = {

    /**
     * value: "Ok"
     * @const
     */
    "Ok": "Ok",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default WarmStoragePropertiesUsage;

