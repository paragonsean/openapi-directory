/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventSourceCommonProperties from './EventSourceCommonProperties';
import ProvisioningState from './ProvisioningState';

/**
 * The AzureEventSourceProperties model module.
 * @module model/AzureEventSourceProperties
 * @version 2018-08-15-preview
 */
class AzureEventSourceProperties {
    /**
     * Constructs a new <code>AzureEventSourceProperties</code>.
     * Properties of an event source that reads events from an event broker in Azure.
     * @alias module:model/AzureEventSourceProperties
     * @implements module:model/EventSourceCommonProperties
     */
    constructor() { 
        EventSourceCommonProperties.initialize(this);
        AzureEventSourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['eventSourceResourceId'] = eventSourceResourceId;
    }

    /**
     * Constructs a <code>AzureEventSourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureEventSourceProperties} obj Optional instance to populate.
     * @return {module:model/AzureEventSourceProperties} The populated <code>AzureEventSourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureEventSourceProperties();
            EventSourceCommonProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('eventSourceResourceId')) {
                obj['eventSourceResourceId'] = ApiClient.convertToType(data['eventSourceResourceId'], 'String');
            }
            if (data.hasOwnProperty('timestampPropertyName')) {
                obj['timestampPropertyName'] = ApiClient.convertToType(data['timestampPropertyName'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureEventSourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureEventSourceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AzureEventSourceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventSourceResourceId'] && !(typeof data['eventSourceResourceId'] === 'string' || data['eventSourceResourceId'] instanceof String)) {
            throw new Error("Expected the field `eventSourceResourceId` to be a primitive type in the JSON string but got " + data['eventSourceResourceId']);
        }
        // ensure the json data is a string
        if (data['timestampPropertyName'] && !(typeof data['timestampPropertyName'] === 'string' || data['timestampPropertyName'] instanceof String)) {
            throw new Error("Expected the field `timestampPropertyName` to be a primitive type in the JSON string but got " + data['timestampPropertyName']);
        }

        return true;
    }


}

AzureEventSourceProperties.RequiredProperties = ["eventSourceResourceId"];

/**
 * The resource id of the event source in Azure Resource Manager.
 * @member {String} eventSourceResourceId
 */
AzureEventSourceProperties.prototype['eventSourceResourceId'] = undefined;

/**
 * The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
 * @member {String} timestampPropertyName
 */
AzureEventSourceProperties.prototype['timestampPropertyName'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
AzureEventSourceProperties.prototype['creationTime'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
AzureEventSourceProperties.prototype['provisioningState'] = undefined;


// Implement EventSourceCommonProperties interface:
/**
 * The time the resource was created.
 * @member {Date} creationTime
 */
EventSourceCommonProperties.prototype['creationTime'] = undefined;
/**
 * @member {module:model/ProvisioningState} provisioningState
 */
EventSourceCommonProperties.prototype['provisioningState'] = undefined;




export default AzureEventSourceProperties;

