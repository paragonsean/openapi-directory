/**
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LongTermStorageConfigurationInput from './LongTermStorageConfigurationInput';
import TimeSeriesIdProperty from './TimeSeriesIdProperty';
import WarmStoreConfigurationProperties from './WarmStoreConfigurationProperties';

/**
 * The LongTermEnvironmentCreationProperties model module.
 * @module model/LongTermEnvironmentCreationProperties
 * @version 2018-08-15-preview
 */
class LongTermEnvironmentCreationProperties {
    /**
     * Constructs a new <code>LongTermEnvironmentCreationProperties</code>.
     * Properties used to create a long-term environment.
     * @alias module:model/LongTermEnvironmentCreationProperties
     * @param storageConfiguration {module:model/LongTermStorageConfigurationInput} 
     * @param timeSeriesIdProperties {Array.<module:model/TimeSeriesIdProperty>} The list of event properties which will be used to define the environment's time series id.
     */
    constructor(storageConfiguration, timeSeriesIdProperties) { 
        
        LongTermEnvironmentCreationProperties.initialize(this, storageConfiguration, timeSeriesIdProperties);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, storageConfiguration, timeSeriesIdProperties) { 
        obj['storageConfiguration'] = storageConfiguration;
        obj['timeSeriesIdProperties'] = timeSeriesIdProperties;
    }

    /**
     * Constructs a <code>LongTermEnvironmentCreationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LongTermEnvironmentCreationProperties} obj Optional instance to populate.
     * @return {module:model/LongTermEnvironmentCreationProperties} The populated <code>LongTermEnvironmentCreationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LongTermEnvironmentCreationProperties();

            if (data.hasOwnProperty('storageConfiguration')) {
                obj['storageConfiguration'] = LongTermStorageConfigurationInput.constructFromObject(data['storageConfiguration']);
            }
            if (data.hasOwnProperty('timeSeriesIdProperties')) {
                obj['timeSeriesIdProperties'] = ApiClient.convertToType(data['timeSeriesIdProperties'], [TimeSeriesIdProperty]);
            }
            if (data.hasOwnProperty('warmStoreConfiguration')) {
                obj['warmStoreConfiguration'] = WarmStoreConfigurationProperties.constructFromObject(data['warmStoreConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LongTermEnvironmentCreationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LongTermEnvironmentCreationProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LongTermEnvironmentCreationProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `storageConfiguration`
        if (data['storageConfiguration']) { // data not null
          LongTermStorageConfigurationInput.validateJSON(data['storageConfiguration']);
        }
        if (data['timeSeriesIdProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timeSeriesIdProperties'])) {
                throw new Error("Expected the field `timeSeriesIdProperties` to be an array in the JSON data but got " + data['timeSeriesIdProperties']);
            }
            // validate the optional field `timeSeriesIdProperties` (array)
            for (const item of data['timeSeriesIdProperties']) {
                TimeSeriesIdProperty.validateJSON(item);
            };
        }
        // validate the optional field `warmStoreConfiguration`
        if (data['warmStoreConfiguration']) { // data not null
          WarmStoreConfigurationProperties.validateJSON(data['warmStoreConfiguration']);
        }

        return true;
    }


}

LongTermEnvironmentCreationProperties.RequiredProperties = ["storageConfiguration", "timeSeriesIdProperties"];

/**
 * @member {module:model/LongTermStorageConfigurationInput} storageConfiguration
 */
LongTermEnvironmentCreationProperties.prototype['storageConfiguration'] = undefined;

/**
 * The list of event properties which will be used to define the environment's time series id.
 * @member {Array.<module:model/TimeSeriesIdProperty>} timeSeriesIdProperties
 */
LongTermEnvironmentCreationProperties.prototype['timeSeriesIdProperties'] = undefined;

/**
 * @member {module:model/WarmStoreConfigurationProperties} warmStoreConfiguration
 */
LongTermEnvironmentCreationProperties.prototype['warmStoreConfiguration'] = undefined;






export default LongTermEnvironmentCreationProperties;

