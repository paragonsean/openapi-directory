# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_status import EnvironmentStatus
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server.models.time_series_id_property import TimeSeriesIdProperty
from openapi_server import util


class StandardEnvironmentResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_retention_time: str=None, partition_key_properties: List[TimeSeriesIdProperty]=None, storage_limit_exceeded_behavior: str=None, data_access_fqdn: str=None, data_access_id: str=None, status: EnvironmentStatus=None, creation_time: datetime=None, provisioning_state: ProvisioningState=None):
        """StandardEnvironmentResourceProperties - a model defined in OpenAPI

        :param data_retention_time: The data_retention_time of this StandardEnvironmentResourceProperties.
        :param partition_key_properties: The partition_key_properties of this StandardEnvironmentResourceProperties.
        :param storage_limit_exceeded_behavior: The storage_limit_exceeded_behavior of this StandardEnvironmentResourceProperties.
        :param data_access_fqdn: The data_access_fqdn of this StandardEnvironmentResourceProperties.
        :param data_access_id: The data_access_id of this StandardEnvironmentResourceProperties.
        :param status: The status of this StandardEnvironmentResourceProperties.
        :param creation_time: The creation_time of this StandardEnvironmentResourceProperties.
        :param provisioning_state: The provisioning_state of this StandardEnvironmentResourceProperties.
        """
        self.openapi_types = {
            'data_retention_time': str,
            'partition_key_properties': List[TimeSeriesIdProperty],
            'storage_limit_exceeded_behavior': str,
            'data_access_fqdn': str,
            'data_access_id': str,
            'status': EnvironmentStatus,
            'creation_time': datetime,
            'provisioning_state': ProvisioningState
        }

        self.attribute_map = {
            'data_retention_time': 'dataRetentionTime',
            'partition_key_properties': 'partitionKeyProperties',
            'storage_limit_exceeded_behavior': 'storageLimitExceededBehavior',
            'data_access_fqdn': 'dataAccessFqdn',
            'data_access_id': 'dataAccessId',
            'status': 'status',
            'creation_time': 'creationTime',
            'provisioning_state': 'provisioningState'
        }

        self._data_retention_time = data_retention_time
        self._partition_key_properties = partition_key_properties
        self._storage_limit_exceeded_behavior = storage_limit_exceeded_behavior
        self._data_access_fqdn = data_access_fqdn
        self._data_access_id = data_access_id
        self._status = status
        self._creation_time = creation_time
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardEnvironmentResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardEnvironmentResourceProperties of this StandardEnvironmentResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_retention_time(self):
        """Gets the data_retention_time of this StandardEnvironmentResourceProperties.

        ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.

        :return: The data_retention_time of this StandardEnvironmentResourceProperties.
        :rtype: str
        """
        return self._data_retention_time

    @data_retention_time.setter
    def data_retention_time(self, data_retention_time):
        """Sets the data_retention_time of this StandardEnvironmentResourceProperties.

        ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.

        :param data_retention_time: The data_retention_time of this StandardEnvironmentResourceProperties.
        :type data_retention_time: str
        """
        if data_retention_time is None:
            raise ValueError("Invalid value for `data_retention_time`, must not be `None`")

        self._data_retention_time = data_retention_time

    @property
    def partition_key_properties(self):
        """Gets the partition_key_properties of this StandardEnvironmentResourceProperties.

        The list of event properties which will be used to partition data in the environment.

        :return: The partition_key_properties of this StandardEnvironmentResourceProperties.
        :rtype: List[TimeSeriesIdProperty]
        """
        return self._partition_key_properties

    @partition_key_properties.setter
    def partition_key_properties(self, partition_key_properties):
        """Sets the partition_key_properties of this StandardEnvironmentResourceProperties.

        The list of event properties which will be used to partition data in the environment.

        :param partition_key_properties: The partition_key_properties of this StandardEnvironmentResourceProperties.
        :type partition_key_properties: List[TimeSeriesIdProperty]
        """

        self._partition_key_properties = partition_key_properties

    @property
    def storage_limit_exceeded_behavior(self):
        """Gets the storage_limit_exceeded_behavior of this StandardEnvironmentResourceProperties.

        The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If \"PauseIngress\" is specified, new events will not be read from the event source. If \"PurgeOldData\" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.

        :return: The storage_limit_exceeded_behavior of this StandardEnvironmentResourceProperties.
        :rtype: str
        """
        return self._storage_limit_exceeded_behavior

    @storage_limit_exceeded_behavior.setter
    def storage_limit_exceeded_behavior(self, storage_limit_exceeded_behavior):
        """Sets the storage_limit_exceeded_behavior of this StandardEnvironmentResourceProperties.

        The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If \"PauseIngress\" is specified, new events will not be read from the event source. If \"PurgeOldData\" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.

        :param storage_limit_exceeded_behavior: The storage_limit_exceeded_behavior of this StandardEnvironmentResourceProperties.
        :type storage_limit_exceeded_behavior: str
        """
        allowed_values = ["PurgeOldData", "PauseIngress"]  # noqa: E501
        if storage_limit_exceeded_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_limit_exceeded_behavior` ({0}), must be one of {1}"
                .format(storage_limit_exceeded_behavior, allowed_values)
            )

        self._storage_limit_exceeded_behavior = storage_limit_exceeded_behavior

    @property
    def data_access_fqdn(self):
        """Gets the data_access_fqdn of this StandardEnvironmentResourceProperties.

        The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.

        :return: The data_access_fqdn of this StandardEnvironmentResourceProperties.
        :rtype: str
        """
        return self._data_access_fqdn

    @data_access_fqdn.setter
    def data_access_fqdn(self, data_access_fqdn):
        """Sets the data_access_fqdn of this StandardEnvironmentResourceProperties.

        The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.

        :param data_access_fqdn: The data_access_fqdn of this StandardEnvironmentResourceProperties.
        :type data_access_fqdn: str
        """

        self._data_access_fqdn = data_access_fqdn

    @property
    def data_access_id(self):
        """Gets the data_access_id of this StandardEnvironmentResourceProperties.

        An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.

        :return: The data_access_id of this StandardEnvironmentResourceProperties.
        :rtype: str
        """
        return self._data_access_id

    @data_access_id.setter
    def data_access_id(self, data_access_id):
        """Sets the data_access_id of this StandardEnvironmentResourceProperties.

        An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.

        :param data_access_id: The data_access_id of this StandardEnvironmentResourceProperties.
        :type data_access_id: str
        """

        self._data_access_id = data_access_id

    @property
    def status(self):
        """Gets the status of this StandardEnvironmentResourceProperties.


        :return: The status of this StandardEnvironmentResourceProperties.
        :rtype: EnvironmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StandardEnvironmentResourceProperties.


        :param status: The status of this StandardEnvironmentResourceProperties.
        :type status: EnvironmentStatus
        """

        self._status = status

    @property
    def creation_time(self):
        """Gets the creation_time of this StandardEnvironmentResourceProperties.

        The time the resource was created.

        :return: The creation_time of this StandardEnvironmentResourceProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this StandardEnvironmentResourceProperties.

        The time the resource was created.

        :param creation_time: The creation_time of this StandardEnvironmentResourceProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this StandardEnvironmentResourceProperties.


        :return: The provisioning_state of this StandardEnvironmentResourceProperties.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this StandardEnvironmentResourceProperties.


        :param provisioning_state: The provisioning_state of this StandardEnvironmentResourceProperties.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state
