# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.warm_storage_properties_usage_state_details import WarmStoragePropertiesUsageStateDetails
from openapi_server import util


class WarmStoragePropertiesUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: str=None, state_details: WarmStoragePropertiesUsageStateDetails=None):
        """WarmStoragePropertiesUsage - a model defined in OpenAPI

        :param state: The state of this WarmStoragePropertiesUsage.
        :param state_details: The state_details of this WarmStoragePropertiesUsage.
        """
        self.openapi_types = {
            'state': str,
            'state_details': WarmStoragePropertiesUsageStateDetails
        }

        self.attribute_map = {
            'state': 'state',
            'state_details': 'stateDetails'
        }

        self._state = state
        self._state_details = state_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarmStoragePropertiesUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarmStoragePropertiesUsage of this WarmStoragePropertiesUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this WarmStoragePropertiesUsage.

        This string represents the state of warm storage properties usage. It can be \"Ok\", \"Error\", \"Unknown\".

        :return: The state of this WarmStoragePropertiesUsage.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WarmStoragePropertiesUsage.

        This string represents the state of warm storage properties usage. It can be \"Ok\", \"Error\", \"Unknown\".

        :param state: The state of this WarmStoragePropertiesUsage.
        :type state: str
        """
        allowed_values = ["Ok", "Error", "Unknown"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_details(self):
        """Gets the state_details of this WarmStoragePropertiesUsage.


        :return: The state_details of this WarmStoragePropertiesUsage.
        :rtype: WarmStoragePropertiesUsageStateDetails
        """
        return self._state_details

    @state_details.setter
    def state_details(self, state_details):
        """Sets the state_details of this WarmStoragePropertiesUsage.


        :param state_details: The state_details of this WarmStoragePropertiesUsage.
        :type state_details: WarmStoragePropertiesUsageStateDetails
        """

        self._state_details = state_details
