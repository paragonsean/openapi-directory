# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LongTermStorageConfigurationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, management_key: str=None):
        """LongTermStorageConfigurationInput - a model defined in OpenAPI

        :param account_name: The account_name of this LongTermStorageConfigurationInput.
        :param management_key: The management_key of this LongTermStorageConfigurationInput.
        """
        self.openapi_types = {
            'account_name': str,
            'management_key': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'management_key': 'managementKey'
        }

        self._account_name = account_name
        self._management_key = management_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LongTermStorageConfigurationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LongTermStorageConfigurationInput of this LongTermStorageConfigurationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this LongTermStorageConfigurationInput.

        The name of the storage account that will hold the environment's long term data.

        :return: The account_name of this LongTermStorageConfigurationInput.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this LongTermStorageConfigurationInput.

        The name of the storage account that will hold the environment's long term data.

        :param account_name: The account_name of this LongTermStorageConfigurationInput.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def management_key(self):
        """Gets the management_key of this LongTermStorageConfigurationInput.

        The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses.

        :return: The management_key of this LongTermStorageConfigurationInput.
        :rtype: str
        """
        return self._management_key

    @management_key.setter
    def management_key(self, management_key):
        """Sets the management_key of this LongTermStorageConfigurationInput.

        The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses.

        :param management_key: The management_key of this LongTermStorageConfigurationInput.
        :type management_key: str
        """
        if management_key is None:
            raise ValueError("Invalid value for `management_key`, must not be `None`")

        self._management_key = management_key
