# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LongTermStorageConfigurationOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None):
        """LongTermStorageConfigurationOutput - a model defined in OpenAPI

        :param account_name: The account_name of this LongTermStorageConfigurationOutput.
        """
        self.openapi_types = {
            'account_name': str
        }

        self.attribute_map = {
            'account_name': 'accountName'
        }

        self._account_name = account_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LongTermStorageConfigurationOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LongTermStorageConfigurationOutput of this LongTermStorageConfigurationOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this LongTermStorageConfigurationOutput.

        The name of the storage account that will hold the environment's long term data.

        :return: The account_name of this LongTermStorageConfigurationOutput.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this LongTermStorageConfigurationOutput.

        The name of the storage account that will hold the environment's long term data.

        :param account_name: The account_name of this LongTermStorageConfigurationOutput.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name
