# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_series_id_property import TimeSeriesIdProperty
from openapi_server import util


class StandardEnvironmentCreationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_retention_time: str=None, partition_key_properties: List[TimeSeriesIdProperty]=None, storage_limit_exceeded_behavior: str=None):
        """StandardEnvironmentCreationProperties - a model defined in OpenAPI

        :param data_retention_time: The data_retention_time of this StandardEnvironmentCreationProperties.
        :param partition_key_properties: The partition_key_properties of this StandardEnvironmentCreationProperties.
        :param storage_limit_exceeded_behavior: The storage_limit_exceeded_behavior of this StandardEnvironmentCreationProperties.
        """
        self.openapi_types = {
            'data_retention_time': str,
            'partition_key_properties': List[TimeSeriesIdProperty],
            'storage_limit_exceeded_behavior': str
        }

        self.attribute_map = {
            'data_retention_time': 'dataRetentionTime',
            'partition_key_properties': 'partitionKeyProperties',
            'storage_limit_exceeded_behavior': 'storageLimitExceededBehavior'
        }

        self._data_retention_time = data_retention_time
        self._partition_key_properties = partition_key_properties
        self._storage_limit_exceeded_behavior = storage_limit_exceeded_behavior

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardEnvironmentCreationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardEnvironmentCreationProperties of this StandardEnvironmentCreationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_retention_time(self):
        """Gets the data_retention_time of this StandardEnvironmentCreationProperties.

        ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.

        :return: The data_retention_time of this StandardEnvironmentCreationProperties.
        :rtype: str
        """
        return self._data_retention_time

    @data_retention_time.setter
    def data_retention_time(self, data_retention_time):
        """Sets the data_retention_time of this StandardEnvironmentCreationProperties.

        ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.

        :param data_retention_time: The data_retention_time of this StandardEnvironmentCreationProperties.
        :type data_retention_time: str
        """
        if data_retention_time is None:
            raise ValueError("Invalid value for `data_retention_time`, must not be `None`")

        self._data_retention_time = data_retention_time

    @property
    def partition_key_properties(self):
        """Gets the partition_key_properties of this StandardEnvironmentCreationProperties.

        The list of event properties which will be used to partition data in the environment.

        :return: The partition_key_properties of this StandardEnvironmentCreationProperties.
        :rtype: List[TimeSeriesIdProperty]
        """
        return self._partition_key_properties

    @partition_key_properties.setter
    def partition_key_properties(self, partition_key_properties):
        """Sets the partition_key_properties of this StandardEnvironmentCreationProperties.

        The list of event properties which will be used to partition data in the environment.

        :param partition_key_properties: The partition_key_properties of this StandardEnvironmentCreationProperties.
        :type partition_key_properties: List[TimeSeriesIdProperty]
        """

        self._partition_key_properties = partition_key_properties

    @property
    def storage_limit_exceeded_behavior(self):
        """Gets the storage_limit_exceeded_behavior of this StandardEnvironmentCreationProperties.

        The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If \"PauseIngress\" is specified, new events will not be read from the event source. If \"PurgeOldData\" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.

        :return: The storage_limit_exceeded_behavior of this StandardEnvironmentCreationProperties.
        :rtype: str
        """
        return self._storage_limit_exceeded_behavior

    @storage_limit_exceeded_behavior.setter
    def storage_limit_exceeded_behavior(self, storage_limit_exceeded_behavior):
        """Sets the storage_limit_exceeded_behavior of this StandardEnvironmentCreationProperties.

        The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If \"PauseIngress\" is specified, new events will not be read from the event source. If \"PurgeOldData\" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.

        :param storage_limit_exceeded_behavior: The storage_limit_exceeded_behavior of this StandardEnvironmentCreationProperties.
        :type storage_limit_exceeded_behavior: str
        """
        allowed_values = ["PurgeOldData", "PauseIngress"]  # noqa: E501
        if storage_limit_exceeded_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_limit_exceeded_behavior` ({0}), must be one of {1}"
                .format(storage_limit_exceeded_behavior, allowed_values)
            )

        self._storage_limit_exceeded_behavior = storage_limit_exceeded_behavior
