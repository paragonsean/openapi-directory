# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessPolicyMutableProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, roles: List[str]=None):
        """AccessPolicyMutableProperties - a model defined in OpenAPI

        :param description: The description of this AccessPolicyMutableProperties.
        :param roles: The roles of this AccessPolicyMutableProperties.
        """
        self.openapi_types = {
            'description': str,
            'roles': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'roles': 'roles'
        }

        self._description = description
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessPolicyMutableProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessPolicyMutableProperties of this AccessPolicyMutableProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AccessPolicyMutableProperties.

        An description of the access policy.

        :return: The description of this AccessPolicyMutableProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccessPolicyMutableProperties.

        An description of the access policy.

        :param description: The description of this AccessPolicyMutableProperties.
        :type description: str
        """

        self._description = description

    @property
    def roles(self):
        """Gets the roles of this AccessPolicyMutableProperties.

        The list of roles the principal is assigned on the environment.

        :return: The roles of this AccessPolicyMutableProperties.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this AccessPolicyMutableProperties.

        The list of roles the principal is assigned on the environment.

        :param roles: The roles of this AccessPolicyMutableProperties.
        :type roles: List[str]
        """
        allowed_values = ["Reader", "Contributor"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles
