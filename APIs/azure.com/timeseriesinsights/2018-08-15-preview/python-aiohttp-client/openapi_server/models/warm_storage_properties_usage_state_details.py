# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WarmStoragePropertiesUsageStateDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_count: int=None, max_count: int=None):
        """WarmStoragePropertiesUsageStateDetails - a model defined in OpenAPI

        :param current_count: The current_count of this WarmStoragePropertiesUsageStateDetails.
        :param max_count: The max_count of this WarmStoragePropertiesUsageStateDetails.
        """
        self.openapi_types = {
            'current_count': int,
            'max_count': int
        }

        self.attribute_map = {
            'current_count': 'currentCount',
            'max_count': 'maxCount'
        }

        self._current_count = current_count
        self._max_count = max_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarmStoragePropertiesUsageStateDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarmStoragePropertiesUsageStateDetails of this WarmStoragePropertiesUsageStateDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_count(self):
        """Gets the current_count of this WarmStoragePropertiesUsageStateDetails.

        A value that represents the number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU

        :return: The current_count of this WarmStoragePropertiesUsageStateDetails.
        :rtype: int
        """
        return self._current_count

    @current_count.setter
    def current_count(self, current_count):
        """Sets the current_count of this WarmStoragePropertiesUsageStateDetails.

        A value that represents the number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU

        :param current_count: The current_count of this WarmStoragePropertiesUsageStateDetails.
        :type current_count: int
        """
        if current_count is not None and current_count > 10:
            raise ValueError("Invalid value for `current_count`, must be a value less than or equal to `10`")
        if current_count is not None and current_count < 1:
            raise ValueError("Invalid value for `current_count`, must be a value greater than or equal to `1`")

        self._current_count = current_count

    @property
    def max_count(self):
        """Gets the max_count of this WarmStoragePropertiesUsageStateDetails.

        A value that represents the maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU.

        :return: The max_count of this WarmStoragePropertiesUsageStateDetails.
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this WarmStoragePropertiesUsageStateDetails.

        A value that represents the maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU.

        :param max_count: The max_count of this WarmStoragePropertiesUsageStateDetails.
        :type max_count: int
        """
        if max_count is not None and max_count > 10:
            raise ValueError("Invalid value for `max_count`, must be a value less than or equal to `10`")
        if max_count is not None and max_count < 1:
            raise ValueError("Invalid value for `max_count`, must be a value greater than or equal to `1`")

        self._max_count = max_count
