# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server import util


class EventHubEventSourceResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_group_name: str=None, event_hub_name: str=None, key_name: str=None, service_bus_namespace: str=None, event_source_resource_id: str=None, timestamp_property_name: str=None, creation_time: datetime=None, provisioning_state: ProvisioningState=None):
        """EventHubEventSourceResourceProperties - a model defined in OpenAPI

        :param consumer_group_name: The consumer_group_name of this EventHubEventSourceResourceProperties.
        :param event_hub_name: The event_hub_name of this EventHubEventSourceResourceProperties.
        :param key_name: The key_name of this EventHubEventSourceResourceProperties.
        :param service_bus_namespace: The service_bus_namespace of this EventHubEventSourceResourceProperties.
        :param event_source_resource_id: The event_source_resource_id of this EventHubEventSourceResourceProperties.
        :param timestamp_property_name: The timestamp_property_name of this EventHubEventSourceResourceProperties.
        :param creation_time: The creation_time of this EventHubEventSourceResourceProperties.
        :param provisioning_state: The provisioning_state of this EventHubEventSourceResourceProperties.
        """
        self.openapi_types = {
            'consumer_group_name': str,
            'event_hub_name': str,
            'key_name': str,
            'service_bus_namespace': str,
            'event_source_resource_id': str,
            'timestamp_property_name': str,
            'creation_time': datetime,
            'provisioning_state': ProvisioningState
        }

        self.attribute_map = {
            'consumer_group_name': 'consumerGroupName',
            'event_hub_name': 'eventHubName',
            'key_name': 'keyName',
            'service_bus_namespace': 'serviceBusNamespace',
            'event_source_resource_id': 'eventSourceResourceId',
            'timestamp_property_name': 'timestampPropertyName',
            'creation_time': 'creationTime',
            'provisioning_state': 'provisioningState'
        }

        self._consumer_group_name = consumer_group_name
        self._event_hub_name = event_hub_name
        self._key_name = key_name
        self._service_bus_namespace = service_bus_namespace
        self._event_source_resource_id = event_source_resource_id
        self._timestamp_property_name = timestamp_property_name
        self._creation_time = creation_time
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventHubEventSourceResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventHubEventSourceResourceProperties of this EventHubEventSourceResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_group_name(self):
        """Gets the consumer_group_name of this EventHubEventSourceResourceProperties.

        The name of the event hub's consumer group that holds the partitions from which events will be read.

        :return: The consumer_group_name of this EventHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._consumer_group_name

    @consumer_group_name.setter
    def consumer_group_name(self, consumer_group_name):
        """Sets the consumer_group_name of this EventHubEventSourceResourceProperties.

        The name of the event hub's consumer group that holds the partitions from which events will be read.

        :param consumer_group_name: The consumer_group_name of this EventHubEventSourceResourceProperties.
        :type consumer_group_name: str
        """
        if consumer_group_name is None:
            raise ValueError("Invalid value for `consumer_group_name`, must not be `None`")

        self._consumer_group_name = consumer_group_name

    @property
    def event_hub_name(self):
        """Gets the event_hub_name of this EventHubEventSourceResourceProperties.

        The name of the event hub.

        :return: The event_hub_name of this EventHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._event_hub_name

    @event_hub_name.setter
    def event_hub_name(self, event_hub_name):
        """Sets the event_hub_name of this EventHubEventSourceResourceProperties.

        The name of the event hub.

        :param event_hub_name: The event_hub_name of this EventHubEventSourceResourceProperties.
        :type event_hub_name: str
        """
        if event_hub_name is None:
            raise ValueError("Invalid value for `event_hub_name`, must not be `None`")

        self._event_hub_name = event_hub_name

    @property
    def key_name(self):
        """Gets the key_name of this EventHubEventSourceResourceProperties.

        The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.

        :return: The key_name of this EventHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this EventHubEventSourceResourceProperties.

        The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.

        :param key_name: The key_name of this EventHubEventSourceResourceProperties.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name

    @property
    def service_bus_namespace(self):
        """Gets the service_bus_namespace of this EventHubEventSourceResourceProperties.

        The name of the service bus that contains the event hub.

        :return: The service_bus_namespace of this EventHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._service_bus_namespace

    @service_bus_namespace.setter
    def service_bus_namespace(self, service_bus_namespace):
        """Sets the service_bus_namespace of this EventHubEventSourceResourceProperties.

        The name of the service bus that contains the event hub.

        :param service_bus_namespace: The service_bus_namespace of this EventHubEventSourceResourceProperties.
        :type service_bus_namespace: str
        """
        if service_bus_namespace is None:
            raise ValueError("Invalid value for `service_bus_namespace`, must not be `None`")

        self._service_bus_namespace = service_bus_namespace

    @property
    def event_source_resource_id(self):
        """Gets the event_source_resource_id of this EventHubEventSourceResourceProperties.

        The resource id of the event source in Azure Resource Manager.

        :return: The event_source_resource_id of this EventHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._event_source_resource_id

    @event_source_resource_id.setter
    def event_source_resource_id(self, event_source_resource_id):
        """Sets the event_source_resource_id of this EventHubEventSourceResourceProperties.

        The resource id of the event source in Azure Resource Manager.

        :param event_source_resource_id: The event_source_resource_id of this EventHubEventSourceResourceProperties.
        :type event_source_resource_id: str
        """
        if event_source_resource_id is None:
            raise ValueError("Invalid value for `event_source_resource_id`, must not be `None`")

        self._event_source_resource_id = event_source_resource_id

    @property
    def timestamp_property_name(self):
        """Gets the timestamp_property_name of this EventHubEventSourceResourceProperties.

        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.

        :return: The timestamp_property_name of this EventHubEventSourceResourceProperties.
        :rtype: str
        """
        return self._timestamp_property_name

    @timestamp_property_name.setter
    def timestamp_property_name(self, timestamp_property_name):
        """Sets the timestamp_property_name of this EventHubEventSourceResourceProperties.

        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.

        :param timestamp_property_name: The timestamp_property_name of this EventHubEventSourceResourceProperties.
        :type timestamp_property_name: str
        """

        self._timestamp_property_name = timestamp_property_name

    @property
    def creation_time(self):
        """Gets the creation_time of this EventHubEventSourceResourceProperties.

        The time the resource was created.

        :return: The creation_time of this EventHubEventSourceResourceProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this EventHubEventSourceResourceProperties.

        The time the resource was created.

        :param creation_time: The creation_time of this EventHubEventSourceResourceProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this EventHubEventSourceResourceProperties.


        :return: The provisioning_state of this EventHubEventSourceResourceProperties.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this EventHubEventSourceResourceProperties.


        :param provisioning_state: The provisioning_state of this EventHubEventSourceResourceProperties.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state
