/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LongTermStorageConfigurationInput;
import org.openapitools.client.model.TimeSeriesIdProperty;
import org.openapitools.client.model.WarmStoreConfigurationProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties used to create a long-term environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:18.833592-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LongTermEnvironmentCreationProperties {
  public static final String SERIALIZED_NAME_STORAGE_CONFIGURATION = "storageConfiguration";
  @SerializedName(SERIALIZED_NAME_STORAGE_CONFIGURATION)
  private LongTermStorageConfigurationInput storageConfiguration;

  public static final String SERIALIZED_NAME_TIME_SERIES_ID_PROPERTIES = "timeSeriesIdProperties";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID_PROPERTIES)
  private List<TimeSeriesIdProperty> timeSeriesIdProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARM_STORE_CONFIGURATION = "warmStoreConfiguration";
  @SerializedName(SERIALIZED_NAME_WARM_STORE_CONFIGURATION)
  private WarmStoreConfigurationProperties warmStoreConfiguration;

  public LongTermEnvironmentCreationProperties() {
  }

  public LongTermEnvironmentCreationProperties storageConfiguration(LongTermStorageConfigurationInput storageConfiguration) {
    this.storageConfiguration = storageConfiguration;
    return this;
  }

  /**
   * Get storageConfiguration
   * @return storageConfiguration
   */
  @javax.annotation.Nonnull
  public LongTermStorageConfigurationInput getStorageConfiguration() {
    return storageConfiguration;
  }

  public void setStorageConfiguration(LongTermStorageConfigurationInput storageConfiguration) {
    this.storageConfiguration = storageConfiguration;
  }


  public LongTermEnvironmentCreationProperties timeSeriesIdProperties(List<TimeSeriesIdProperty> timeSeriesIdProperties) {
    this.timeSeriesIdProperties = timeSeriesIdProperties;
    return this;
  }

  public LongTermEnvironmentCreationProperties addTimeSeriesIdPropertiesItem(TimeSeriesIdProperty timeSeriesIdPropertiesItem) {
    if (this.timeSeriesIdProperties == null) {
      this.timeSeriesIdProperties = new ArrayList<>();
    }
    this.timeSeriesIdProperties.add(timeSeriesIdPropertiesItem);
    return this;
  }

  /**
   * The list of event properties which will be used to define the environment&#39;s time series id.
   * @return timeSeriesIdProperties
   */
  @javax.annotation.Nonnull
  public List<TimeSeriesIdProperty> getTimeSeriesIdProperties() {
    return timeSeriesIdProperties;
  }

  public void setTimeSeriesIdProperties(List<TimeSeriesIdProperty> timeSeriesIdProperties) {
    this.timeSeriesIdProperties = timeSeriesIdProperties;
  }


  public LongTermEnvironmentCreationProperties warmStoreConfiguration(WarmStoreConfigurationProperties warmStoreConfiguration) {
    this.warmStoreConfiguration = warmStoreConfiguration;
    return this;
  }

  /**
   * Get warmStoreConfiguration
   * @return warmStoreConfiguration
   */
  @javax.annotation.Nullable
  public WarmStoreConfigurationProperties getWarmStoreConfiguration() {
    return warmStoreConfiguration;
  }

  public void setWarmStoreConfiguration(WarmStoreConfigurationProperties warmStoreConfiguration) {
    this.warmStoreConfiguration = warmStoreConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LongTermEnvironmentCreationProperties longTermEnvironmentCreationProperties = (LongTermEnvironmentCreationProperties) o;
    return Objects.equals(this.storageConfiguration, longTermEnvironmentCreationProperties.storageConfiguration) &&
        Objects.equals(this.timeSeriesIdProperties, longTermEnvironmentCreationProperties.timeSeriesIdProperties) &&
        Objects.equals(this.warmStoreConfiguration, longTermEnvironmentCreationProperties.warmStoreConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageConfiguration, timeSeriesIdProperties, warmStoreConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LongTermEnvironmentCreationProperties {\n");
    sb.append("    storageConfiguration: ").append(toIndentedString(storageConfiguration)).append("\n");
    sb.append("    timeSeriesIdProperties: ").append(toIndentedString(timeSeriesIdProperties)).append("\n");
    sb.append("    warmStoreConfiguration: ").append(toIndentedString(warmStoreConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("storageConfiguration");
    openapiFields.add("timeSeriesIdProperties");
    openapiFields.add("warmStoreConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("storageConfiguration");
    openapiRequiredFields.add("timeSeriesIdProperties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LongTermEnvironmentCreationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LongTermEnvironmentCreationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LongTermEnvironmentCreationProperties is not found in the empty JSON string", LongTermEnvironmentCreationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LongTermEnvironmentCreationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LongTermEnvironmentCreationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LongTermEnvironmentCreationProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `storageConfiguration`
      LongTermStorageConfigurationInput.validateJsonElement(jsonObj.get("storageConfiguration"));
      // ensure the json data is an array
      if (!jsonObj.get("timeSeriesIdProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesIdProperties` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeriesIdProperties").toString()));
      }

      JsonArray jsonArraytimeSeriesIdProperties = jsonObj.getAsJsonArray("timeSeriesIdProperties");
      // validate the required field `timeSeriesIdProperties` (array)
      for (int i = 0; i < jsonArraytimeSeriesIdProperties.size(); i++) {
        TimeSeriesIdProperty.validateJsonElement(jsonArraytimeSeriesIdProperties.get(i));
      };
      // validate the optional field `warmStoreConfiguration`
      if (jsonObj.get("warmStoreConfiguration") != null && !jsonObj.get("warmStoreConfiguration").isJsonNull()) {
        WarmStoreConfigurationProperties.validateJsonElement(jsonObj.get("warmStoreConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LongTermEnvironmentCreationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LongTermEnvironmentCreationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LongTermEnvironmentCreationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LongTermEnvironmentCreationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LongTermEnvironmentCreationProperties>() {
           @Override
           public void write(JsonWriter out, LongTermEnvironmentCreationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LongTermEnvironmentCreationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LongTermEnvironmentCreationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LongTermEnvironmentCreationProperties
   * @throws IOException if the JSON string is invalid with respect to LongTermEnvironmentCreationProperties
   */
  public static LongTermEnvironmentCreationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LongTermEnvironmentCreationProperties.class);
  }

  /**
   * Convert an instance of LongTermEnvironmentCreationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

