/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.EnvironmentStatus;
import org.openapitools.client.model.ProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:18.833592-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentResourceProperties {
  public static final String SERIALIZED_NAME_DATA_ACCESS_FQDN = "dataAccessFqdn";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_FQDN)
  private String dataAccessFqdn;

  public static final String SERIALIZED_NAME_DATA_ACCESS_ID = "dataAccessId";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_ID)
  private UUID dataAccessId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EnvironmentStatus status;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public EnvironmentResourceProperties() {
  }

  public EnvironmentResourceProperties(
     String dataAccessFqdn, 
     UUID dataAccessId, 
     OffsetDateTime creationTime
  ) {
    this();
    this.dataAccessFqdn = dataAccessFqdn;
    this.dataAccessId = dataAccessId;
    this.creationTime = creationTime;
  }

  /**
   * The fully qualified domain name used to access the environment data, e.g. to query the environment&#39;s events or upload reference data for the environment.
   * @return dataAccessFqdn
   */
  @javax.annotation.Nullable
  public String getDataAccessFqdn() {
    return dataAccessFqdn;
  }



  /**
   * An id used to access the environment data, e.g. to query the environment&#39;s events or upload reference data for the environment.
   * @return dataAccessId
   */
  @javax.annotation.Nullable
  public UUID getDataAccessId() {
    return dataAccessId;
  }



  public EnvironmentResourceProperties status(EnvironmentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EnvironmentStatus getStatus() {
    return status;
  }

  public void setStatus(EnvironmentStatus status) {
    this.status = status;
  }


  /**
   * The time the resource was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  public EnvironmentResourceProperties provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentResourceProperties environmentResourceProperties = (EnvironmentResourceProperties) o;
    return Objects.equals(this.dataAccessFqdn, environmentResourceProperties.dataAccessFqdn) &&
        Objects.equals(this.dataAccessId, environmentResourceProperties.dataAccessId) &&
        Objects.equals(this.status, environmentResourceProperties.status) &&
        Objects.equals(this.creationTime, environmentResourceProperties.creationTime) &&
        Objects.equals(this.provisioningState, environmentResourceProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataAccessFqdn, dataAccessId, status, creationTime, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentResourceProperties {\n");
    sb.append("    dataAccessFqdn: ").append(toIndentedString(dataAccessFqdn)).append("\n");
    sb.append("    dataAccessId: ").append(toIndentedString(dataAccessId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentResourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentResourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentResourceProperties is not found in the empty JSON string", EnvironmentResourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentResourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentResourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataAccessFqdn") != null && !jsonObj.get("dataAccessFqdn").isJsonNull()) && !jsonObj.get("dataAccessFqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataAccessFqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataAccessFqdn").toString()));
      }
      if ((jsonObj.get("dataAccessId") != null && !jsonObj.get("dataAccessId").isJsonNull()) && !jsonObj.get("dataAccessId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataAccessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataAccessId").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EnvironmentStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentResourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentResourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentResourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentResourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentResourceProperties>() {
           @Override
           public void write(JsonWriter out, EnvironmentResourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentResourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentResourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentResourceProperties
   * @throws IOException if the JSON string is invalid with respect to EnvironmentResourceProperties
   */
  public static EnvironmentResourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentResourceProperties.class);
  }

  /**
   * Convert an instance of EnvironmentResourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

