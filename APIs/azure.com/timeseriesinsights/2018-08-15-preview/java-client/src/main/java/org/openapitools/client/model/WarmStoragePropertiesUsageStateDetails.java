/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains the details about warm storage properties usage state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:18.833592-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WarmStoragePropertiesUsageStateDetails {
  public static final String SERIALIZED_NAME_CURRENT_COUNT = "currentCount";
  @SerializedName(SERIALIZED_NAME_CURRENT_COUNT)
  private Integer currentCount;

  public static final String SERIALIZED_NAME_MAX_COUNT = "maxCount";
  @SerializedName(SERIALIZED_NAME_MAX_COUNT)
  private Integer maxCount;

  public WarmStoragePropertiesUsageStateDetails() {
  }

  public WarmStoragePropertiesUsageStateDetails currentCount(Integer currentCount) {
    this.currentCount = currentCount;
    return this;
  }

  /**
   * A value that represents the number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU
   * minimum: 1
   * maximum: 10
   * @return currentCount
   */
  @javax.annotation.Nullable
  public Integer getCurrentCount() {
    return currentCount;
  }

  public void setCurrentCount(Integer currentCount) {
    this.currentCount = currentCount;
  }


  public WarmStoragePropertiesUsageStateDetails maxCount(Integer maxCount) {
    this.maxCount = maxCount;
    return this;
  }

  /**
   * A value that represents the maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU.
   * minimum: 1
   * maximum: 10
   * @return maxCount
   */
  @javax.annotation.Nullable
  public Integer getMaxCount() {
    return maxCount;
  }

  public void setMaxCount(Integer maxCount) {
    this.maxCount = maxCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WarmStoragePropertiesUsageStateDetails warmStoragePropertiesUsageStateDetails = (WarmStoragePropertiesUsageStateDetails) o;
    return Objects.equals(this.currentCount, warmStoragePropertiesUsageStateDetails.currentCount) &&
        Objects.equals(this.maxCount, warmStoragePropertiesUsageStateDetails.maxCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentCount, maxCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WarmStoragePropertiesUsageStateDetails {\n");
    sb.append("    currentCount: ").append(toIndentedString(currentCount)).append("\n");
    sb.append("    maxCount: ").append(toIndentedString(maxCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentCount");
    openapiFields.add("maxCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WarmStoragePropertiesUsageStateDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WarmStoragePropertiesUsageStateDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WarmStoragePropertiesUsageStateDetails is not found in the empty JSON string", WarmStoragePropertiesUsageStateDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WarmStoragePropertiesUsageStateDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WarmStoragePropertiesUsageStateDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WarmStoragePropertiesUsageStateDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WarmStoragePropertiesUsageStateDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WarmStoragePropertiesUsageStateDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WarmStoragePropertiesUsageStateDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<WarmStoragePropertiesUsageStateDetails>() {
           @Override
           public void write(JsonWriter out, WarmStoragePropertiesUsageStateDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WarmStoragePropertiesUsageStateDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WarmStoragePropertiesUsageStateDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WarmStoragePropertiesUsageStateDetails
   * @throws IOException if the JSON string is invalid with respect to WarmStoragePropertiesUsageStateDetails
   */
  public static WarmStoragePropertiesUsageStateDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WarmStoragePropertiesUsageStateDetails.class);
  }

  /**
   * Convert an instance of WarmStoragePropertiesUsageStateDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

