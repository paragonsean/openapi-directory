/*
 * TimeSeriesInsightsClient
 * Time Series Insights client
 *
 * The version of the OpenAPI document: 2018-08-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.EventSourceCreateOrUpdateParameters;
import org.openapitools.client.model.EventSourceListResponse;
import org.openapitools.client.model.EventSourceResource;
import org.openapitools.client.model.EventSourceUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventSourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventSourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventSourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventSourcesCreateOrUpdate
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName Name of the event source. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an event source resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing event source definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The event source was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given event source request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "eventSourceName" + "}", localVarApiClient.escapeString(eventSourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSourcesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling eventSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'eventSourceName' is set
        if (eventSourceName == null) {
            throw new ApiException("Missing the required parameter 'eventSourceName' when calling eventSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling eventSourcesCreateOrUpdate(Async)");
        }

        return eventSourcesCreateOrUpdateCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Create or update an event source under the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName Name of the event source. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an event source resource. (required)
     * @return EventSourceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing event source definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The event source was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given event source request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public EventSourceResource eventSourcesCreateOrUpdate(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<EventSourceResource> localVarResp = eventSourcesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an event source under the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName Name of the event source. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an event source resource. (required)
     * @return ApiResponse&lt;EventSourceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing event source definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The event source was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given event source request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSourceResource> eventSourcesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = eventSourcesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<EventSourceResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an event source under the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName Name of the event source. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters for creating an event source resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The existing event source definition was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The event source was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 400 (Bad Request): The given event source request body is invalid; See the error code and message in the response for details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceCreateOrUpdateParameters parameters, final ApiCallback<EventSourceResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSourcesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<EventSourceResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSourcesDelete
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The event source was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesDeleteCall(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "eventSourceName" + "}", localVarApiClient.escapeString(eventSourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSourcesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSourcesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSourcesDelete(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling eventSourcesDelete(Async)");
        }

        // verify the required parameter 'eventSourceName' is set
        if (eventSourceName == null) {
            throw new ApiException("Missing the required parameter 'eventSourceName' when calling eventSourcesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSourcesDelete(Async)");
        }

        return eventSourcesDeleteCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the event source with the specified name in the specified subscription, resource group, and environment
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The event source was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public void eventSourcesDelete(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion) throws ApiException {
        eventSourcesDeleteWithHttpInfo(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion);
    }

    /**
     * 
     * Deletes the event source with the specified name in the specified subscription, resource group, and environment
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The event source was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventSourcesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSourcesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the event source with the specified name in the specified subscription, resource group, and environment
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The event source was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesDeleteAsync(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSourcesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSourcesGet
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source definition was successfully retrieved and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesGetCall(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "eventSourceName" + "}", localVarApiClient.escapeString(eventSourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSourcesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSourcesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSourcesGet(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling eventSourcesGet(Async)");
        }

        // verify the required parameter 'eventSourceName' is set
        if (eventSourceName == null) {
            throw new ApiException("Missing the required parameter 'eventSourceName' when calling eventSourcesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSourcesGet(Async)");
        }

        return eventSourcesGetCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the event source with the specified name in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSourceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source definition was successfully retrieved and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public EventSourceResource eventSourcesGet(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion) throws ApiException {
        ApiResponse<EventSourceResource> localVarResp = eventSourcesGetWithHttpInfo(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the event source with the specified name in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSourceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source definition was successfully retrieved and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSourceResource> eventSourcesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSourcesGetValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSourceResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the event source with the specified name in the specified environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source definition was successfully retrieved and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesGetAsync(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, final ApiCallback<EventSourceResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSourcesGetValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSourceResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSourcesListByEnvironment
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesListByEnvironmentCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSourcesListByEnvironmentValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSourcesListByEnvironment(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSourcesListByEnvironment(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling eventSourcesListByEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSourcesListByEnvironment(Async)");
        }

        return eventSourcesListByEnvironmentCall(subscriptionId, resourceGroupName, environmentName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the available event sources associated with the subscription and within the specified resource group and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSourceListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public EventSourceListResponse eventSourcesListByEnvironment(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion) throws ApiException {
        ApiResponse<EventSourceListResponse> localVarResp = eventSourcesListByEnvironmentWithHttpInfo(subscriptionId, resourceGroupName, environmentName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the available event sources associated with the subscription and within the specified resource group and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSourceListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSourceListResponse> eventSourcesListByEnvironmentWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSourcesListByEnvironmentValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSourceListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the available event sources associated with the subscription and within the specified resource group and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Environments returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, or environment could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesListByEnvironmentAsync(String subscriptionId, String resourceGroupName, String environmentName, String apiVersion, final ApiCallback<EventSourceListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSourcesListByEnvironmentValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSourceListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSourcesUpdate
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSourceUpdateParameters Request object that contains the updated information for the event source. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source definition was successfully updated and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesUpdateCall(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceUpdateParameters eventSourceUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventSourceUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "eventSourceName" + "}", localVarApiClient.escapeString(eventSourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSourcesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceUpdateParameters eventSourceUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSourcesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSourcesUpdate(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling eventSourcesUpdate(Async)");
        }

        // verify the required parameter 'eventSourceName' is set
        if (eventSourceName == null) {
            throw new ApiException("Missing the required parameter 'eventSourceName' when calling eventSourcesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSourcesUpdate(Async)");
        }

        // verify the required parameter 'eventSourceUpdateParameters' is set
        if (eventSourceUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'eventSourceUpdateParameters' when calling eventSourcesUpdate(Async)");
        }

        return eventSourcesUpdateCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, eventSourceUpdateParameters, _callback);

    }

    /**
     * 
     * Updates the event source with the specified name in the specified subscription, resource group, and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSourceUpdateParameters Request object that contains the updated information for the event source. (required)
     * @return EventSourceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source definition was successfully updated and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public EventSourceResource eventSourcesUpdate(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceUpdateParameters eventSourceUpdateParameters) throws ApiException {
        ApiResponse<EventSourceResource> localVarResp = eventSourcesUpdateWithHttpInfo(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, eventSourceUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the event source with the specified name in the specified subscription, resource group, and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSourceUpdateParameters Request object that contains the updated information for the event source. (required)
     * @return ApiResponse&lt;EventSourceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source definition was successfully updated and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSourceResource> eventSourcesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceUpdateParameters eventSourceUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = eventSourcesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, eventSourceUpdateParameters, null);
        Type localVarReturnType = new TypeToken<EventSourceResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the event source with the specified name in the specified subscription, resource group, and environment.
     * @param subscriptionId Azure Subscription ID. (required)
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group. (required)
     * @param eventSourceName The name of the Time Series Insights event source associated with the specified environment. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSourceUpdateParameters Request object that contains the updated information for the event source. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event source definition was successfully updated and is in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> HTTP 404 (Not Found): The subscription, resource group, environment, or event source could not be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSourcesUpdateAsync(String subscriptionId, String resourceGroupName, String environmentName, String eventSourceName, String apiVersion, EventSourceUpdateParameters eventSourceUpdateParameters, final ApiCallback<EventSourceResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSourcesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, environmentName, eventSourceName, apiVersion, eventSourceUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<EventSourceResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
