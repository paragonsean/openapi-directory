# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server.models.tsx import Tsx
from openapi_server.models.variable import Variable
from openapi_server import util


class AggregateSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Tsx=None, inline_variables: Dict[str, Variable]=None, interval: str=None, projected_variables: List[str]=None, search_span: DateTimeRange=None, time_series_id: List[object]=None):
        """AggregateSeries - a model defined in OpenAPI

        :param filter: The filter of this AggregateSeries.
        :param inline_variables: The inline_variables of this AggregateSeries.
        :param interval: The interval of this AggregateSeries.
        :param projected_variables: The projected_variables of this AggregateSeries.
        :param search_span: The search_span of this AggregateSeries.
        :param time_series_id: The time_series_id of this AggregateSeries.
        """
        self.openapi_types = {
            'filter': Tsx,
            'inline_variables': Dict[str, Variable],
            'interval': str,
            'projected_variables': List[str],
            'search_span': DateTimeRange,
            'time_series_id': List[object]
        }

        self.attribute_map = {
            'filter': 'filter',
            'inline_variables': 'inlineVariables',
            'interval': 'interval',
            'projected_variables': 'projectedVariables',
            'search_span': 'searchSpan',
            'time_series_id': 'timeSeriesId'
        }

        self._filter = filter
        self._inline_variables = inline_variables
        self._interval = interval
        self._projected_variables = projected_variables
        self._search_span = search_span
        self._time_series_id = time_series_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateSeries of this AggregateSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this AggregateSeries.


        :return: The filter of this AggregateSeries.
        :rtype: Tsx
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this AggregateSeries.


        :param filter: The filter of this AggregateSeries.
        :type filter: Tsx
        """

        self._filter = filter

    @property
    def inline_variables(self):
        """Gets the inline_variables of this AggregateSeries.

        This allows the user the optionally define inline-variables apart from the ones already defined in the model. When the inline variable names have the same name as the model, the inline variable definition takes precedence. Can be null.

        :return: The inline_variables of this AggregateSeries.
        :rtype: Dict[str, Variable]
        """
        return self._inline_variables

    @inline_variables.setter
    def inline_variables(self, inline_variables):
        """Sets the inline_variables of this AggregateSeries.

        This allows the user the optionally define inline-variables apart from the ones already defined in the model. When the inline variable names have the same name as the model, the inline variable definition takes precedence. Can be null.

        :param inline_variables: The inline_variables of this AggregateSeries.
        :type inline_variables: Dict[str, Variable]
        """

        self._inline_variables = inline_variables

    @property
    def interval(self):
        """Gets the interval of this AggregateSeries.

        Interval size is specified in ISO-8601 duration format. All intervals are the same size. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \"PT1M\", 1 millisecond is \"PT0.001S\". For more information, see https://www.w3.org/TR/xmlschema-2/#duration

        :return: The interval of this AggregateSeries.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this AggregateSeries.

        Interval size is specified in ISO-8601 duration format. All intervals are the same size. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \"PT1M\", 1 millisecond is \"PT0.001S\". For more information, see https://www.w3.org/TR/xmlschema-2/#duration

        :param interval: The interval of this AggregateSeries.
        :type interval: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def projected_variables(self):
        """Gets the projected_variables of this AggregateSeries.

        This allows the user to optionally select the variables that needs to be projected. When it is null or not set, all the variables from inlineVariables and model are returned. Can be null.

        :return: The projected_variables of this AggregateSeries.
        :rtype: List[str]
        """
        return self._projected_variables

    @projected_variables.setter
    def projected_variables(self, projected_variables):
        """Sets the projected_variables of this AggregateSeries.

        This allows the user to optionally select the variables that needs to be projected. When it is null or not set, all the variables from inlineVariables and model are returned. Can be null.

        :param projected_variables: The projected_variables of this AggregateSeries.
        :type projected_variables: List[str]
        """

        self._projected_variables = projected_variables

    @property
    def search_span(self):
        """Gets the search_span of this AggregateSeries.


        :return: The search_span of this AggregateSeries.
        :rtype: DateTimeRange
        """
        return self._search_span

    @search_span.setter
    def search_span(self, search_span):
        """Sets the search_span of this AggregateSeries.


        :param search_span: The search_span of this AggregateSeries.
        :type search_span: DateTimeRange
        """
        if search_span is None:
            raise ValueError("Invalid value for `search_span`, must not be `None`")

        self._search_span = search_span

    @property
    def time_series_id(self):
        """Gets the time_series_id of this AggregateSeries.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :return: The time_series_id of this AggregateSeries.
        :rtype: List[object]
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this AggregateSeries.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :param time_series_id: The time_series_id of this AggregateSeries.
        :type time_series_id: List[object]
        """
        if time_series_id is None:
            raise ValueError("Invalid value for `time_series_id`, must not be `None`")
        if time_series_id is not None and len(time_series_id) < 1:
            raise ValueError("Invalid value for `time_series_id`, number of items must be greater than or equal to `1`")

        self._time_series_id = time_series_id
