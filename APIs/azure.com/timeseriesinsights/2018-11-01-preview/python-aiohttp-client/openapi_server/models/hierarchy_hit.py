# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_hierarchy_nodes_response import SearchHierarchyNodesResponse
from openapi_server import util


class HierarchyHit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cumulative_instance_count: int=None, hierarchy_nodes: SearchHierarchyNodesResponse=None, name: str=None):
        """HierarchyHit - a model defined in OpenAPI

        :param cumulative_instance_count: The cumulative_instance_count of this HierarchyHit.
        :param hierarchy_nodes: The hierarchy_nodes of this HierarchyHit.
        :param name: The name of this HierarchyHit.
        """
        self.openapi_types = {
            'cumulative_instance_count': int,
            'hierarchy_nodes': SearchHierarchyNodesResponse,
            'name': str
        }

        self.attribute_map = {
            'cumulative_instance_count': 'cumulativeInstanceCount',
            'hierarchy_nodes': 'hierarchyNodes',
            'name': 'name'
        }

        self._cumulative_instance_count = cumulative_instance_count
        self._hierarchy_nodes = hierarchy_nodes
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HierarchyHit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HierarchyHit of this HierarchyHit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cumulative_instance_count(self):
        """Gets the cumulative_instance_count of this HierarchyHit.

        Total number of instances that belong to this node and it's subtrees matching the query.

        :return: The cumulative_instance_count of this HierarchyHit.
        :rtype: int
        """
        return self._cumulative_instance_count

    @cumulative_instance_count.setter
    def cumulative_instance_count(self, cumulative_instance_count):
        """Sets the cumulative_instance_count of this HierarchyHit.

        Total number of instances that belong to this node and it's subtrees matching the query.

        :param cumulative_instance_count: The cumulative_instance_count of this HierarchyHit.
        :type cumulative_instance_count: int
        """

        self._cumulative_instance_count = cumulative_instance_count

    @property
    def hierarchy_nodes(self):
        """Gets the hierarchy_nodes of this HierarchyHit.


        :return: The hierarchy_nodes of this HierarchyHit.
        :rtype: SearchHierarchyNodesResponse
        """
        return self._hierarchy_nodes

    @hierarchy_nodes.setter
    def hierarchy_nodes(self, hierarchy_nodes):
        """Sets the hierarchy_nodes of this HierarchyHit.


        :param hierarchy_nodes: The hierarchy_nodes of this HierarchyHit.
        :type hierarchy_nodes: SearchHierarchyNodesResponse
        """

        self._hierarchy_nodes = hierarchy_nodes

    @property
    def name(self):
        """Gets the name of this HierarchyHit.

        Name of the hierarchy node. May be empty, cannot be null.

        :return: The name of this HierarchyHit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HierarchyHit.

        Name of the hierarchy node. May be empty, cannot be null.

        :param name: The name of this HierarchyHit.
        :type name: str
        """

        self._name = name
