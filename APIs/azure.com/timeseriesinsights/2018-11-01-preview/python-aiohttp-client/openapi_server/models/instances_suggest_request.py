# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstancesSuggestRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_string: str=None, take: int=None):
        """InstancesSuggestRequest - a model defined in OpenAPI

        :param search_string: The search_string of this InstancesSuggestRequest.
        :param take: The take of this InstancesSuggestRequest.
        """
        self.openapi_types = {
            'search_string': str,
            'take': int
        }

        self.attribute_map = {
            'search_string': 'searchString',
            'take': 'take'
        }

        self._search_string = search_string
        self._take = take

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancesSuggestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancesSuggestRequest of this InstancesSuggestRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_string(self):
        """Gets the search_string of this InstancesSuggestRequest.

        Search string for which suggestions are required. Empty is allowed, but not null.

        :return: The search_string of this InstancesSuggestRequest.
        :rtype: str
        """
        return self._search_string

    @search_string.setter
    def search_string(self, search_string):
        """Sets the search_string of this InstancesSuggestRequest.

        Search string for which suggestions are required. Empty is allowed, but not null.

        :param search_string: The search_string of this InstancesSuggestRequest.
        :type search_string: str
        """
        if search_string is None:
            raise ValueError("Invalid value for `search_string`, must not be `None`")

        self._search_string = search_string

    @property
    def take(self):
        """Gets the take of this InstancesSuggestRequest.

        Maximum number of suggestions expected in the result. Defaults to 10 when not set.

        :return: The take of this InstancesSuggestRequest.
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this InstancesSuggestRequest.

        Maximum number of suggestions expected in the result. Defaults to 10 when not set.

        :param take: The take of this InstancesSuggestRequest.
        :type take: int
        """

        self._take = take
