# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tsx(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tsx: str=None):
        """Tsx - a model defined in OpenAPI

        :param tsx: The tsx of this Tsx.
        """
        self.openapi_types = {
            'tsx': str
        }

        self.attribute_map = {
            'tsx': 'tsx'
        }

        self._tsx = tsx

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tsx':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tsx of this Tsx.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tsx(self):
        """Gets the tsx of this Tsx.

        Time series expression (TSX) written as a single string. Examples: \"$event.Status.String='Good'\", \"avg($event.Temperature)\". Refer to the documentation on how to write time series expressions.

        :return: The tsx of this Tsx.
        :rtype: str
        """
        return self._tsx

    @tsx.setter
    def tsx(self, tsx):
        """Sets the tsx of this Tsx.

        Time series expression (TSX) written as a single string. Examples: \"$event.Status.String='Good'\", \"avg($event.Temperature)\". Refer to the documentation on how to write time series expressions.

        :param tsx: The tsx of this Tsx.
        :type tsx: str
        """
        if tsx is None:
            raise ValueError("Invalid value for `tsx`, must not be `None`")

        self._tsx = tsx
