# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HierarchiesSortParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, by: str=None):
        """HierarchiesSortParameter - a model defined in OpenAPI

        :param by: The by of this HierarchiesSortParameter.
        """
        self.openapi_types = {
            'by': str
        }

        self.attribute_map = {
            'by': 'by'
        }

        self._by = by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HierarchiesSortParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HierarchiesSortParameter of this HierarchiesSortParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def by(self):
        """Gets the by of this HierarchiesSortParameter.

        Value to use for hierarchy node sorting. When it is set to 'CumulativeInstanceCount', the returned hierarchies are sorted based on the total instances belonging to the hierarchy node and its child hierarchy nodes. When it is set to 'Name', the returned hierarchies are sorted based on the hierarchy name. Optional, default is 'CumulativeInstanceCount'.

        :return: The by of this HierarchiesSortParameter.
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this HierarchiesSortParameter.

        Value to use for hierarchy node sorting. When it is set to 'CumulativeInstanceCount', the returned hierarchies are sorted based on the total instances belonging to the hierarchy node and its child hierarchy nodes. When it is set to 'Name', the returned hierarchies are sorted based on the hierarchy name. Optional, default is 'CumulativeInstanceCount'.

        :param by: The by of this HierarchiesSortParameter.
        :type by: str
        """
        allowed_values = ["CumulativeInstanceCount", "Name"]  # noqa: E501
        if by not in allowed_values:
            raise ValueError(
                "Invalid value for `by` ({0}), must be one of {1}"
                .format(by, allowed_values)
            )

        self._by = by
