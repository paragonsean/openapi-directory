# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tsx import Tsx
from openapi_server import util


class Variable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Tsx=None, kind: str=None):
        """Variable - a model defined in OpenAPI

        :param filter: The filter of this Variable.
        :param kind: The kind of this Variable.
        """
        self.openapi_types = {
            'filter': Tsx,
            'kind': str
        }

        self.attribute_map = {
            'filter': 'filter',
            'kind': 'kind'
        }

        self._filter = filter
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Variable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Variable of this Variable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this Variable.


        :return: The filter of this Variable.
        :rtype: Tsx
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Variable.


        :param filter: The filter of this Variable.
        :type filter: Tsx
        """

        self._filter = filter

    @property
    def kind(self):
        """Gets the kind of this Variable.

        Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.

        :return: The kind of this Variable.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Variable.

        Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.

        :param kind: The kind of this Variable.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
