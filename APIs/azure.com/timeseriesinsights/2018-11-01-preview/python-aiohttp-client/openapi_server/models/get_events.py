# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server.models.event_property import EventProperty
from openapi_server.models.tsx import Tsx
from openapi_server import util


class GetEvents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Tsx=None, projected_properties: List[EventProperty]=None, search_span: DateTimeRange=None, take: int=None, time_series_id: List[object]=None):
        """GetEvents - a model defined in OpenAPI

        :param filter: The filter of this GetEvents.
        :param projected_properties: The projected_properties of this GetEvents.
        :param search_span: The search_span of this GetEvents.
        :param take: The take of this GetEvents.
        :param time_series_id: The time_series_id of this GetEvents.
        """
        self.openapi_types = {
            'filter': Tsx,
            'projected_properties': List[EventProperty],
            'search_span': DateTimeRange,
            'take': int,
            'time_series_id': List[object]
        }

        self.attribute_map = {
            'filter': 'filter',
            'projected_properties': 'projectedProperties',
            'search_span': 'searchSpan',
            'take': 'take',
            'time_series_id': 'timeSeriesId'
        }

        self._filter = filter
        self._projected_properties = projected_properties
        self._search_span = search_span
        self._take = take
        self._time_series_id = time_series_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEvents':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetEvents of this GetEvents.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GetEvents.


        :return: The filter of this GetEvents.
        :rtype: Tsx
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GetEvents.


        :param filter: The filter of this GetEvents.
        :type filter: Tsx
        """

        self._filter = filter

    @property
    def projected_properties(self):
        """Gets the projected_properties of this GetEvents.

        Projected properties is an array of properties which you want to project. These properties must appear in the events; otherwise, they are not returned.

        :return: The projected_properties of this GetEvents.
        :rtype: List[EventProperty]
        """
        return self._projected_properties

    @projected_properties.setter
    def projected_properties(self, projected_properties):
        """Sets the projected_properties of this GetEvents.

        Projected properties is an array of properties which you want to project. These properties must appear in the events; otherwise, they are not returned.

        :param projected_properties: The projected_properties of this GetEvents.
        :type projected_properties: List[EventProperty]
        """

        self._projected_properties = projected_properties

    @property
    def search_span(self):
        """Gets the search_span of this GetEvents.


        :return: The search_span of this GetEvents.
        :rtype: DateTimeRange
        """
        return self._search_span

    @search_span.setter
    def search_span(self, search_span):
        """Sets the search_span of this GetEvents.


        :param search_span: The search_span of this GetEvents.
        :type search_span: DateTimeRange
        """
        if search_span is None:
            raise ValueError("Invalid value for `search_span`, must not be `None`")

        self._search_span = search_span

    @property
    def take(self):
        """Gets the take of this GetEvents.

        Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.

        :return: The take of this GetEvents.
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this GetEvents.

        Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.

        :param take: The take of this GetEvents.
        :type take: int
        """

        self._take = take

    @property
    def time_series_id(self):
        """Gets the time_series_id of this GetEvents.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :return: The time_series_id of this GetEvents.
        :rtype: List[object]
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this GetEvents.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :param time_series_id: The time_series_id of this GetEvents.
        :type time_series_id: List[object]
        """
        if time_series_id is None:
            raise ValueError("Invalid value for `time_series_id`, must not be `None`")
        if time_series_id is not None and len(time_series_id) < 1:
            raise ValueError("Invalid value for `time_series_id`, number of items must be greater than or equal to `1`")

        self._time_series_id = time_series_id
