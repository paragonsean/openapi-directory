# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HierarchiesExpandParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None):
        """HierarchiesExpandParameter - a model defined in OpenAPI

        :param kind: The kind of this HierarchiesExpandParameter.
        """
        self.openapi_types = {
            'kind': str
        }

        self.attribute_map = {
            'kind': 'kind'
        }

        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HierarchiesExpandParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HierarchiesExpandParameter of this HierarchiesExpandParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this HierarchiesExpandParameter.

        Kind of the expansion of hierarchy nodes. When it is set to 'UntilChildren', the hierarchy nodes are expanded recursively until there is more than one child. When it is set to 'OneLevel', the hierarchies are expanded only at the single level matching path search instances parameter. Optional, default is 'UntilChildren'.

        :return: The kind of this HierarchiesExpandParameter.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this HierarchiesExpandParameter.

        Kind of the expansion of hierarchy nodes. When it is set to 'UntilChildren', the hierarchy nodes are expanded recursively until there is more than one child. When it is set to 'OneLevel', the hierarchies are expanded only at the single level matching path search instances parameter. Optional, default is 'UntilChildren'.

        :param kind: The kind of this HierarchiesExpandParameter.
        :type kind: str
        """
        allowed_values = ["UntilChildren", "OneLevel"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind
