# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeSeriesType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, name: str=None, variables: object=None):
        """TimeSeriesType - a model defined in OpenAPI

        :param description: The description of this TimeSeriesType.
        :param id: The id of this TimeSeriesType.
        :param name: The name of this TimeSeriesType.
        :param variables: The variables of this TimeSeriesType.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'name': str,
            'variables': object
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'variables': 'variables'
        }

        self._description = description
        self._id = id
        self._name = name
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesType of this TimeSeriesType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TimeSeriesType.

        Description of the type. May be null.

        :return: The description of this TimeSeriesType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeSeriesType.

        Description of the type. May be null.

        :param description: The description of this TimeSeriesType.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this TimeSeriesType.

        Unique type identifier that is immutable. Can be null on create or update requests, and then server generates the ID. Not null on get and delete operations.

        :return: The id of this TimeSeriesType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeSeriesType.

        Unique type identifier that is immutable. Can be null on create or update requests, and then server generates the ID. Not null on get and delete operations.

        :param id: The id of this TimeSeriesType.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TimeSeriesType.

        User-given unique name for the type. Mutable, not null.

        :return: The name of this TimeSeriesType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeSeriesType.

        User-given unique name for the type. Mutable, not null.

        :param name: The name of this TimeSeriesType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def variables(self):
        """Gets the variables of this TimeSeriesType.

        Different variables associated with the type. Not empty, not null.

        :return: The variables of this TimeSeriesType.
        :rtype: object
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this TimeSeriesType.

        Different variables associated with the type. Not empty, not null.

        :param variables: The variables of this TimeSeriesType.
        :type variables: object
        """
        if variables is None:
            raise ValueError("Invalid value for `variables`, must not be `None`")

        self._variables = variables
