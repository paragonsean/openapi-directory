# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server.models.tsx import Tsx
from openapi_server.models.variable import Variable
from openapi_server import util


class GetSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Tsx=None, inline_variables: Dict[str, Variable]=None, projected_variables: List[str]=None, search_span: DateTimeRange=None, take: int=None, time_series_id: List[object]=None):
        """GetSeries - a model defined in OpenAPI

        :param filter: The filter of this GetSeries.
        :param inline_variables: The inline_variables of this GetSeries.
        :param projected_variables: The projected_variables of this GetSeries.
        :param search_span: The search_span of this GetSeries.
        :param take: The take of this GetSeries.
        :param time_series_id: The time_series_id of this GetSeries.
        """
        self.openapi_types = {
            'filter': Tsx,
            'inline_variables': Dict[str, Variable],
            'projected_variables': List[str],
            'search_span': DateTimeRange,
            'take': int,
            'time_series_id': List[object]
        }

        self.attribute_map = {
            'filter': 'filter',
            'inline_variables': 'inlineVariables',
            'projected_variables': 'projectedVariables',
            'search_span': 'searchSpan',
            'take': 'take',
            'time_series_id': 'timeSeriesId'
        }

        self._filter = filter
        self._inline_variables = inline_variables
        self._projected_variables = projected_variables
        self._search_span = search_span
        self._take = take
        self._time_series_id = time_series_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSeries of this GetSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GetSeries.


        :return: The filter of this GetSeries.
        :rtype: Tsx
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GetSeries.


        :param filter: The filter of this GetSeries.
        :type filter: Tsx
        """

        self._filter = filter

    @property
    def inline_variables(self):
        """Gets the inline_variables of this GetSeries.

        Optional inline variables apart from the ones already defined in the time series type in the model. When the inline variable name is the same name as in the model, the inline variable definition takes precedence. Can be null.

        :return: The inline_variables of this GetSeries.
        :rtype: Dict[str, Variable]
        """
        return self._inline_variables

    @inline_variables.setter
    def inline_variables(self, inline_variables):
        """Sets the inline_variables of this GetSeries.

        Optional inline variables apart from the ones already defined in the time series type in the model. When the inline variable name is the same name as in the model, the inline variable definition takes precedence. Can be null.

        :param inline_variables: The inline_variables of this GetSeries.
        :type inline_variables: Dict[str, Variable]
        """

        self._inline_variables = inline_variables

    @property
    def projected_variables(self):
        """Gets the projected_variables of this GetSeries.

        Selected variables that needs to be projected in the query result. When it is null or not set, all the variables from inlineVariables and time series type in the model are returned. Can be null.

        :return: The projected_variables of this GetSeries.
        :rtype: List[str]
        """
        return self._projected_variables

    @projected_variables.setter
    def projected_variables(self, projected_variables):
        """Sets the projected_variables of this GetSeries.

        Selected variables that needs to be projected in the query result. When it is null or not set, all the variables from inlineVariables and time series type in the model are returned. Can be null.

        :param projected_variables: The projected_variables of this GetSeries.
        :type projected_variables: List[str]
        """

        self._projected_variables = projected_variables

    @property
    def search_span(self):
        """Gets the search_span of this GetSeries.


        :return: The search_span of this GetSeries.
        :rtype: DateTimeRange
        """
        return self._search_span

    @search_span.setter
    def search_span(self, search_span):
        """Sets the search_span of this GetSeries.


        :param search_span: The search_span of this GetSeries.
        :type search_span: DateTimeRange
        """
        if search_span is None:
            raise ValueError("Invalid value for `search_span`, must not be `None`")

        self._search_span = search_span

    @property
    def take(self):
        """Gets the take of this GetSeries.

        Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.

        :return: The take of this GetSeries.
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this GetSeries.

        Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.

        :param take: The take of this GetSeries.
        :type take: int
        """

        self._take = take

    @property
    def time_series_id(self):
        """Gets the time_series_id of this GetSeries.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :return: The time_series_id of this GetSeries.
        :rtype: List[object]
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this GetSeries.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :param time_series_id: The time_series_id of this GetSeries.
        :type time_series_id: List[object]
        """
        if time_series_id is None:
            raise ValueError("Invalid value for `time_series_id`, must not be `None`")
        if time_series_id is not None and len(time_series_id) < 1:
            raise ValueError("Invalid value for `time_series_id`, number of items must be greater than or equal to `1`")

        self._time_series_id = time_series_id
