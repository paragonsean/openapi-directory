# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instances_request_batch_get_or_delete import InstancesRequestBatchGetOrDelete
from openapi_server.models.time_series_instance import TimeSeriesInstance
from openapi_server import util


class InstancesBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete: InstancesRequestBatchGetOrDelete=None, get: InstancesRequestBatchGetOrDelete=None, put: List[TimeSeriesInstance]=None, update: List[TimeSeriesInstance]=None):
        """InstancesBatchRequest - a model defined in OpenAPI

        :param delete: The delete of this InstancesBatchRequest.
        :param get: The get of this InstancesBatchRequest.
        :param put: The put of this InstancesBatchRequest.
        :param update: The update of this InstancesBatchRequest.
        """
        self.openapi_types = {
            'delete': InstancesRequestBatchGetOrDelete,
            'get': InstancesRequestBatchGetOrDelete,
            'put': List[TimeSeriesInstance],
            'update': List[TimeSeriesInstance]
        }

        self.attribute_map = {
            'delete': 'delete',
            'get': 'get',
            'put': 'put',
            'update': 'update'
        }

        self._delete = delete
        self._get = get
        self._put = put
        self._update = update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancesBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancesBatchRequest of this InstancesBatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete(self):
        """Gets the delete of this InstancesBatchRequest.


        :return: The delete of this InstancesBatchRequest.
        :rtype: InstancesRequestBatchGetOrDelete
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this InstancesBatchRequest.


        :param delete: The delete of this InstancesBatchRequest.
        :type delete: InstancesRequestBatchGetOrDelete
        """

        self._delete = delete

    @property
    def get(self):
        """Gets the get of this InstancesBatchRequest.


        :return: The get of this InstancesBatchRequest.
        :rtype: InstancesRequestBatchGetOrDelete
        """
        return self._get

    @get.setter
    def get(self, get):
        """Sets the get of this InstancesBatchRequest.


        :param get: The get of this InstancesBatchRequest.
        :type get: InstancesRequestBatchGetOrDelete
        """

        self._get = get

    @property
    def put(self):
        """Gets the put of this InstancesBatchRequest.

        Time series instances to be created or updated.

        :return: The put of this InstancesBatchRequest.
        :rtype: List[TimeSeriesInstance]
        """
        return self._put

    @put.setter
    def put(self, put):
        """Sets the put of this InstancesBatchRequest.

        Time series instances to be created or updated.

        :param put: The put of this InstancesBatchRequest.
        :type put: List[TimeSeriesInstance]
        """

        self._put = put

    @property
    def update(self):
        """Gets the update of this InstancesBatchRequest.

        Time series instances to be updated onlRequest to perform a single operation on a batch of instances. y. If instance does not exist, an error is returned.

        :return: The update of this InstancesBatchRequest.
        :rtype: List[TimeSeriesInstance]
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this InstancesBatchRequest.

        Time series instances to be updated onlRequest to perform a single operation on a batch of instances. y. If instance does not exist, an error is returned.

        :param update: The update of this InstancesBatchRequest.
        :type update: List[TimeSeriesInstance]
        """

        self._update = update
