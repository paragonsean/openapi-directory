# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interpolation import Interpolation
from openapi_server.models.time_series_aggregate_category import TimeSeriesAggregateCategory
from openapi_server.models.time_series_default_category import TimeSeriesDefaultCategory
from openapi_server.models.tsx import Tsx
from openapi_server.models.variable import Variable
from openapi_server import util


class CategoricalVariable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Tsx=None, kind: str=None, categories: List[TimeSeriesAggregateCategory]=None, default_category: TimeSeriesDefaultCategory=None, interpolation: Interpolation=None, value: Tsx=None):
        """CategoricalVariable - a model defined in OpenAPI

        :param filter: The filter of this CategoricalVariable.
        :param kind: The kind of this CategoricalVariable.
        :param categories: The categories of this CategoricalVariable.
        :param default_category: The default_category of this CategoricalVariable.
        :param interpolation: The interpolation of this CategoricalVariable.
        :param value: The value of this CategoricalVariable.
        """
        self.openapi_types = {
            'filter': Tsx,
            'kind': str,
            'categories': List[TimeSeriesAggregateCategory],
            'default_category': TimeSeriesDefaultCategory,
            'interpolation': Interpolation,
            'value': Tsx
        }

        self.attribute_map = {
            'filter': 'filter',
            'kind': 'kind',
            'categories': 'categories',
            'default_category': 'defaultCategory',
            'interpolation': 'interpolation',
            'value': 'value'
        }

        self._filter = filter
        self._kind = kind
        self._categories = categories
        self._default_category = default_category
        self._interpolation = interpolation
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoricalVariable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoricalVariable of this CategoricalVariable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this CategoricalVariable.


        :return: The filter of this CategoricalVariable.
        :rtype: Tsx
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CategoricalVariable.


        :param filter: The filter of this CategoricalVariable.
        :type filter: Tsx
        """

        self._filter = filter

    @property
    def kind(self):
        """Gets the kind of this CategoricalVariable.

        Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.

        :return: The kind of this CategoricalVariable.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CategoricalVariable.

        Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.

        :param kind: The kind of this CategoricalVariable.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def categories(self):
        """Gets the categories of this CategoricalVariable.


        :return: The categories of this CategoricalVariable.
        :rtype: List[TimeSeriesAggregateCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CategoricalVariable.


        :param categories: The categories of this CategoricalVariable.
        :type categories: List[TimeSeriesAggregateCategory]
        """

        self._categories = categories

    @property
    def default_category(self):
        """Gets the default_category of this CategoricalVariable.


        :return: The default_category of this CategoricalVariable.
        :rtype: TimeSeriesDefaultCategory
        """
        return self._default_category

    @default_category.setter
    def default_category(self, default_category):
        """Sets the default_category of this CategoricalVariable.


        :param default_category: The default_category of this CategoricalVariable.
        :type default_category: TimeSeriesDefaultCategory
        """

        self._default_category = default_category

    @property
    def interpolation(self):
        """Gets the interpolation of this CategoricalVariable.


        :return: The interpolation of this CategoricalVariable.
        :rtype: Interpolation
        """
        return self._interpolation

    @interpolation.setter
    def interpolation(self, interpolation):
        """Sets the interpolation of this CategoricalVariable.


        :param interpolation: The interpolation of this CategoricalVariable.
        :type interpolation: Interpolation
        """

        self._interpolation = interpolation

    @property
    def value(self):
        """Gets the value of this CategoricalVariable.


        :return: The value of this CategoricalVariable.
        :rtype: Tsx
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CategoricalVariable.


        :param value: The value of this CategoricalVariable.
        :type value: Tsx
        """

        self._value = value
