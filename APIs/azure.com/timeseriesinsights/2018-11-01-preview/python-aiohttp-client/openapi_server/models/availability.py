# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server import util


class Availability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distribution: object=None, interval_size: str=None, range: DateTimeRange=None):
        """Availability - a model defined in OpenAPI

        :param distribution: The distribution of this Availability.
        :param interval_size: The interval_size of this Availability.
        :param range: The range of this Availability.
        """
        self.openapi_types = {
            'distribution': object,
            'interval_size': str,
            'range': DateTimeRange
        }

        self.attribute_map = {
            'distribution': 'distribution',
            'interval_size': 'intervalSize',
            'range': 'range'
        }

        self._distribution = distribution
        self._interval_size = interval_size
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Availability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Availability of this Availability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distribution(self):
        """Gets the distribution of this Availability.


        :return: The distribution of this Availability.
        :rtype: object
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this Availability.


        :param distribution: The distribution of this Availability.
        :type distribution: object
        """

        self._distribution = distribution

    @property
    def interval_size(self):
        """Gets the interval_size of this Availability.

        Interval size for the returned distribution of the events. Returned interval is selected to return a reasonable number of points. All intervals are the same size. On the wire interval is specified in ISO-8601 duration format. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \"PT1M\", 1 millisecond is \"PT0.001S\". For more information, see https://www.w3.org/TR/xmlschema-2/#duration

        :return: The interval_size of this Availability.
        :rtype: str
        """
        return self._interval_size

    @interval_size.setter
    def interval_size(self, interval_size):
        """Sets the interval_size of this Availability.

        Interval size for the returned distribution of the events. Returned interval is selected to return a reasonable number of points. All intervals are the same size. On the wire interval is specified in ISO-8601 duration format. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \"PT1M\", 1 millisecond is \"PT0.001S\". For more information, see https://www.w3.org/TR/xmlschema-2/#duration

        :param interval_size: The interval_size of this Availability.
        :type interval_size: str
        """

        self._interval_size = interval_size

    @property
    def range(self):
        """Gets the range of this Availability.


        :return: The range of this Availability.
        :rtype: DateTimeRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this Availability.


        :param range: The range of this Availability.
        :type range: DateTimeRange
        """

        self._range = range
