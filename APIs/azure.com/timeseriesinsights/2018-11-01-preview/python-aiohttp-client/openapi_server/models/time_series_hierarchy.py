# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_series_hierarchy_source import TimeSeriesHierarchySource
from openapi_server import util


class TimeSeriesHierarchy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, source: TimeSeriesHierarchySource=None):
        """TimeSeriesHierarchy - a model defined in OpenAPI

        :param id: The id of this TimeSeriesHierarchy.
        :param name: The name of this TimeSeriesHierarchy.
        :param source: The source of this TimeSeriesHierarchy.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'source': TimeSeriesHierarchySource
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'source': 'source'
        }

        self._id = id
        self._name = name
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesHierarchy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesHierarchy of this TimeSeriesHierarchy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TimeSeriesHierarchy.

        Unique hierarchy identifier that is a immutable GUID. Can be null while creating hierarchy objects and then server generates the id, not null on get and delete operations.

        :return: The id of this TimeSeriesHierarchy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeSeriesHierarchy.

        Unique hierarchy identifier that is a immutable GUID. Can be null while creating hierarchy objects and then server generates the id, not null on get and delete operations.

        :param id: The id of this TimeSeriesHierarchy.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TimeSeriesHierarchy.

        User-given unique name for the type. It is mutable and not null.

        :return: The name of this TimeSeriesHierarchy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeSeriesHierarchy.

        User-given unique name for the type. It is mutable and not null.

        :param name: The name of this TimeSeriesHierarchy.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source(self):
        """Gets the source of this TimeSeriesHierarchy.


        :return: The source of this TimeSeriesHierarchy.
        :rtype: TimeSeriesHierarchySource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TimeSeriesHierarchy.


        :param source: The source of this TimeSeriesHierarchy.
        :type source: TimeSeriesHierarchySource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
