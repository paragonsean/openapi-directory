# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_hit_highlights import InstanceHitHighlights
from openapi_server import util


class InstanceHit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hierarchy_ids: List[str]=None, highlights: InstanceHitHighlights=None, name: str=None, time_series_id: List[object]=None, type_id: str=None):
        """InstanceHit - a model defined in OpenAPI

        :param hierarchy_ids: The hierarchy_ids of this InstanceHit.
        :param highlights: The highlights of this InstanceHit.
        :param name: The name of this InstanceHit.
        :param time_series_id: The time_series_id of this InstanceHit.
        :param type_id: The type_id of this InstanceHit.
        """
        self.openapi_types = {
            'hierarchy_ids': List[str],
            'highlights': InstanceHitHighlights,
            'name': str,
            'time_series_id': List[object],
            'type_id': str
        }

        self.attribute_map = {
            'hierarchy_ids': 'hierarchyIds',
            'highlights': 'highlights',
            'name': 'name',
            'time_series_id': 'timeSeriesId',
            'type_id': 'typeId'
        }

        self._hierarchy_ids = hierarchy_ids
        self._highlights = highlights
        self._name = name
        self._time_series_id = time_series_id
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceHit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceHit of this InstanceHit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hierarchy_ids(self):
        """Gets the hierarchy_ids of this InstanceHit.

        List of time series hierarchy IDs that time series instance which matched the search request belongs to. Cannot be used to lookup hierarchies. May be null.

        :return: The hierarchy_ids of this InstanceHit.
        :rtype: List[str]
        """
        return self._hierarchy_ids

    @hierarchy_ids.setter
    def hierarchy_ids(self, hierarchy_ids):
        """Sets the hierarchy_ids of this InstanceHit.

        List of time series hierarchy IDs that time series instance which matched the search request belongs to. Cannot be used to lookup hierarchies. May be null.

        :param hierarchy_ids: The hierarchy_ids of this InstanceHit.
        :type hierarchy_ids: List[str]
        """

        self._hierarchy_ids = hierarchy_ids

    @property
    def highlights(self):
        """Gets the highlights of this InstanceHit.


        :return: The highlights of this InstanceHit.
        :rtype: InstanceHitHighlights
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this InstanceHit.


        :param highlights: The highlights of this InstanceHit.
        :type highlights: InstanceHitHighlights
        """

        self._highlights = highlights

    @property
    def name(self):
        """Gets the name of this InstanceHit.

        Name of the time series instance that matched the search request. May be null.

        :return: The name of this InstanceHit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstanceHit.

        Name of the time series instance that matched the search request. May be null.

        :param name: The name of this InstanceHit.
        :type name: str
        """

        self._name = name

    @property
    def time_series_id(self):
        """Gets the time_series_id of this InstanceHit.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :return: The time_series_id of this InstanceHit.
        :rtype: List[object]
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this InstanceHit.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :param time_series_id: The time_series_id of this InstanceHit.
        :type time_series_id: List[object]
        """
        if time_series_id is not None and len(time_series_id) < 1:
            raise ValueError("Invalid value for `time_series_id`, number of items must be greater than or equal to `1`")

        self._time_series_id = time_series_id

    @property
    def type_id(self):
        """Gets the type_id of this InstanceHit.

        Represents the type that time series instance which matched the search request belongs to. Never null.

        :return: The type_id of this InstanceHit.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this InstanceHit.

        Represents the type that time series instance which matched the search request belongs to. Never null.

        :param type_id: The type_id of this InstanceHit.
        :type type_id: str
        """

        self._type_id = type_id
