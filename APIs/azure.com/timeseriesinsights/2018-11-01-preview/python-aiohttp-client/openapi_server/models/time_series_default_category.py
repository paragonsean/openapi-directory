# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeSeriesDefaultCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None):
        """TimeSeriesDefaultCategory - a model defined in OpenAPI

        :param label: The label of this TimeSeriesDefaultCategory.
        """
        self.openapi_types = {
            'label': str
        }

        self.attribute_map = {
            'label': 'label'
        }

        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesDefaultCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesDefaultCategory of this TimeSeriesDefaultCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this TimeSeriesDefaultCategory.

        The name of the default category which will be assigned to the values that does not match any of those that are defined in the 'categories'.

        :return: The label of this TimeSeriesDefaultCategory.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TimeSeriesDefaultCategory.

        The name of the default category which will be assigned to the values that does not match any of those that are defined in the 'categories'.

        :param label: The label of this TimeSeriesDefaultCategory.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label
