# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interpolation import Interpolation
from openapi_server.models.tsx import Tsx
from openapi_server.models.variable import Variable
from openapi_server import util


class NumericVariable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Tsx=None, kind: str=None, aggregation: Tsx=None, interpolation: Interpolation=None, value: Tsx=None):
        """NumericVariable - a model defined in OpenAPI

        :param filter: The filter of this NumericVariable.
        :param kind: The kind of this NumericVariable.
        :param aggregation: The aggregation of this NumericVariable.
        :param interpolation: The interpolation of this NumericVariable.
        :param value: The value of this NumericVariable.
        """
        self.openapi_types = {
            'filter': Tsx,
            'kind': str,
            'aggregation': Tsx,
            'interpolation': Interpolation,
            'value': Tsx
        }

        self.attribute_map = {
            'filter': 'filter',
            'kind': 'kind',
            'aggregation': 'aggregation',
            'interpolation': 'interpolation',
            'value': 'value'
        }

        self._filter = filter
        self._kind = kind
        self._aggregation = aggregation
        self._interpolation = interpolation
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumericVariable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumericVariable of this NumericVariable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this NumericVariable.


        :return: The filter of this NumericVariable.
        :rtype: Tsx
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this NumericVariable.


        :param filter: The filter of this NumericVariable.
        :type filter: Tsx
        """

        self._filter = filter

    @property
    def kind(self):
        """Gets the kind of this NumericVariable.

        Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.

        :return: The kind of this NumericVariable.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NumericVariable.

        Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.

        :param kind: The kind of this NumericVariable.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def aggregation(self):
        """Gets the aggregation of this NumericVariable.


        :return: The aggregation of this NumericVariable.
        :rtype: Tsx
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this NumericVariable.


        :param aggregation: The aggregation of this NumericVariable.
        :type aggregation: Tsx
        """

        self._aggregation = aggregation

    @property
    def interpolation(self):
        """Gets the interpolation of this NumericVariable.


        :return: The interpolation of this NumericVariable.
        :rtype: Interpolation
        """
        return self._interpolation

    @interpolation.setter
    def interpolation(self, interpolation):
        """Sets the interpolation of this NumericVariable.


        :param interpolation: The interpolation of this NumericVariable.
        :type interpolation: Interpolation
        """

        self._interpolation = interpolation

    @property
    def value(self):
        """Gets the value of this NumericVariable.


        :return: The value of this NumericVariable.
        :rtype: Tsx
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NumericVariable.


        :param value: The value of this NumericVariable.
        :type value: Tsx
        """

        self._value = value
