# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instances_sort_parameter import InstancesSortParameter
from openapi_server import util


class SearchInstancesParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, highlights: bool=None, page_size: int=None, recursive: bool=None, sort: InstancesSortParameter=None):
        """SearchInstancesParameters - a model defined in OpenAPI

        :param highlights: The highlights of this SearchInstancesParameters.
        :param page_size: The page_size of this SearchInstancesParameters.
        :param recursive: The recursive of this SearchInstancesParameters.
        :param sort: The sort of this SearchInstancesParameters.
        """
        self.openapi_types = {
            'highlights': bool,
            'page_size': int,
            'recursive': bool,
            'sort': InstancesSortParameter
        }

        self.attribute_map = {
            'highlights': 'highlights',
            'page_size': 'pageSize',
            'recursive': 'recursive',
            'sort': 'sort'
        }

        self._highlights = highlights
        self._page_size = page_size
        self._recursive = recursive
        self._sort = sort

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchInstancesParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchInstancesParameters of this SearchInstancesParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def highlights(self):
        """Gets the highlights of this SearchInstancesParameters.

        Definition of highlighted search results or not. When it is set to 'true', the highlighted search results are returned. When it is set to 'false', the highlighted search results are not returned. Default is 'true'.

        :return: The highlights of this SearchInstancesParameters.
        :rtype: bool
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this SearchInstancesParameters.

        Definition of highlighted search results or not. When it is set to 'true', the highlighted search results are returned. When it is set to 'false', the highlighted search results are not returned. Default is 'true'.

        :param highlights: The highlights of this SearchInstancesParameters.
        :type highlights: bool
        """

        self._highlights = highlights

    @property
    def page_size(self):
        """Gets the page_size of this SearchInstancesParameters.

        Maximum number of instances expected in each page of the result. Defaults to 10 when not set. Ranges from 1 to 100. If there are results beyond the page size, the user can use the continuation token to fetch the next page.

        :return: The page_size of this SearchInstancesParameters.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchInstancesParameters.

        Maximum number of instances expected in each page of the result. Defaults to 10 when not set. Ranges from 1 to 100. If there are results beyond the page size, the user can use the continuation token to fetch the next page.

        :param page_size: The page_size of this SearchInstancesParameters.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def recursive(self):
        """Gets the recursive of this SearchInstancesParameters.

        Definition of which instances are returned. When recursive is set to 'true', all instances that have the path that starts with path the path parameter are returned. When recursive is set to 'false', only instances that have the path that exactly matches the path parameter are returned. Using recursive search allows to implement search user experience, while using non-recursive search allows to implement navigation experience. Optional, default is 'true'.

        :return: The recursive of this SearchInstancesParameters.
        :rtype: bool
        """
        return self._recursive

    @recursive.setter
    def recursive(self, recursive):
        """Sets the recursive of this SearchInstancesParameters.

        Definition of which instances are returned. When recursive is set to 'true', all instances that have the path that starts with path the path parameter are returned. When recursive is set to 'false', only instances that have the path that exactly matches the path parameter are returned. Using recursive search allows to implement search user experience, while using non-recursive search allows to implement navigation experience. Optional, default is 'true'.

        :param recursive: The recursive of this SearchInstancesParameters.
        :type recursive: bool
        """

        self._recursive = recursive

    @property
    def sort(self):
        """Gets the sort of this SearchInstancesParameters.


        :return: The sort of this SearchInstancesParameters.
        :rtype: InstancesSortParameter
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchInstancesParameters.


        :param sort: The sort of this SearchInstancesParameters.
        :type sort: InstancesSortParameter
        """

        self._sort = sort
