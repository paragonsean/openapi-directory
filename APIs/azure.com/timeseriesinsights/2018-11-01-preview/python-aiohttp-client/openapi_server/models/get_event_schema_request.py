# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_range import DateTimeRange
from openapi_server import util


class GetEventSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_span: DateTimeRange=None):
        """GetEventSchemaRequest - a model defined in OpenAPI

        :param search_span: The search_span of this GetEventSchemaRequest.
        """
        self.openapi_types = {
            'search_span': DateTimeRange
        }

        self.attribute_map = {
            'search_span': 'searchSpan'
        }

        self._search_span = search_span

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEventSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetEventSchemaRequest of this GetEventSchemaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_span(self):
        """Gets the search_span of this GetEventSchemaRequest.


        :return: The search_span of this GetEventSchemaRequest.
        :rtype: DateTimeRange
        """
        return self._search_span

    @search_span.setter
    def search_span(self, search_span):
        """Sets the search_span of this GetEventSchemaRequest.


        :param search_span: The search_span of this GetEventSchemaRequest.
        :type search_span: DateTimeRange
        """
        if search_span is None:
            raise ValueError("Invalid value for `search_span`, must not be `None`")

        self._search_span = search_span
