# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interpolation_boundary import InterpolationBoundary
from openapi_server import util


class Interpolation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boundary: InterpolationBoundary=None, kind: str=None):
        """Interpolation - a model defined in OpenAPI

        :param boundary: The boundary of this Interpolation.
        :param kind: The kind of this Interpolation.
        """
        self.openapi_types = {
            'boundary': InterpolationBoundary,
            'kind': str
        }

        self.attribute_map = {
            'boundary': 'boundary',
            'kind': 'kind'
        }

        self._boundary = boundary
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interpolation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Interpolation of this Interpolation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boundary(self):
        """Gets the boundary of this Interpolation.


        :return: The boundary of this Interpolation.
        :rtype: InterpolationBoundary
        """
        return self._boundary

    @boundary.setter
    def boundary(self, boundary):
        """Sets the boundary of this Interpolation.


        :param boundary: The boundary of this Interpolation.
        :type boundary: InterpolationBoundary
        """

        self._boundary = boundary

    @property
    def kind(self):
        """Gets the kind of this Interpolation.

        The type of interpolation technique : \"Linear\" or \"Step\".

        :return: The kind of this Interpolation.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Interpolation.

        The type of interpolation technique : \"Linear\" or \"Step\".

        :param kind: The kind of this Interpolation.
        :type kind: str
        """
        allowed_values = ["Linear", "Step"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind
