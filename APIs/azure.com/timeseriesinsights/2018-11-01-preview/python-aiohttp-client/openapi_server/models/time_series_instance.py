# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeSeriesInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, hierarchy_ids: List[str]=None, instance_fields: Dict[str, object]=None, name: str=None, time_series_id: List[object]=None, type_id: str=None):
        """TimeSeriesInstance - a model defined in OpenAPI

        :param description: The description of this TimeSeriesInstance.
        :param hierarchy_ids: The hierarchy_ids of this TimeSeriesInstance.
        :param instance_fields: The instance_fields of this TimeSeriesInstance.
        :param name: The name of this TimeSeriesInstance.
        :param time_series_id: The time_series_id of this TimeSeriesInstance.
        :param type_id: The type_id of this TimeSeriesInstance.
        """
        self.openapi_types = {
            'description': str,
            'hierarchy_ids': List[str],
            'instance_fields': Dict[str, object],
            'name': str,
            'time_series_id': List[object],
            'type_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'hierarchy_ids': 'hierarchyIds',
            'instance_fields': 'instanceFields',
            'name': 'name',
            'time_series_id': 'timeSeriesId',
            'type_id': 'typeId'
        }

        self._description = description
        self._hierarchy_ids = hierarchy_ids
        self._instance_fields = instance_fields
        self._name = name
        self._time_series_id = time_series_id
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesInstance of this TimeSeriesInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TimeSeriesInstance.

        This optional field contains description about the instance.

        :return: The description of this TimeSeriesInstance.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeSeriesInstance.

        This optional field contains description about the instance.

        :param description: The description of this TimeSeriesInstance.
        :type description: str
        """

        self._description = description

    @property
    def hierarchy_ids(self):
        """Gets the hierarchy_ids of this TimeSeriesInstance.

        Set of time series hierarchy IDs that the instance belong to. May be null.

        :return: The hierarchy_ids of this TimeSeriesInstance.
        :rtype: List[str]
        """
        return self._hierarchy_ids

    @hierarchy_ids.setter
    def hierarchy_ids(self, hierarchy_ids):
        """Sets the hierarchy_ids of this TimeSeriesInstance.

        Set of time series hierarchy IDs that the instance belong to. May be null.

        :param hierarchy_ids: The hierarchy_ids of this TimeSeriesInstance.
        :type hierarchy_ids: List[str]
        """

        self._hierarchy_ids = hierarchy_ids

    @property
    def instance_fields(self):
        """Gets the instance_fields of this TimeSeriesInstance.

        Set of key-value pairs that contain user-defined instance properties. May be null.

        :return: The instance_fields of this TimeSeriesInstance.
        :rtype: Dict[str, object]
        """
        return self._instance_fields

    @instance_fields.setter
    def instance_fields(self, instance_fields):
        """Sets the instance_fields of this TimeSeriesInstance.

        Set of key-value pairs that contain user-defined instance properties. May be null.

        :param instance_fields: The instance_fields of this TimeSeriesInstance.
        :type instance_fields: Dict[str, object]
        """

        self._instance_fields = instance_fields

    @property
    def name(self):
        """Gets the name of this TimeSeriesInstance.

        Optional name of the instance which is unique in an environment. Names acts as a mutable alias or display name of the time series instance. Mutable, may be null.

        :return: The name of this TimeSeriesInstance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeSeriesInstance.

        Optional name of the instance which is unique in an environment. Names acts as a mutable alias or display name of the time series instance. Mutable, may be null.

        :param name: The name of this TimeSeriesInstance.
        :type name: str
        """

        self._name = name

    @property
    def time_series_id(self):
        """Gets the time_series_id of this TimeSeriesInstance.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :return: The time_series_id of this TimeSeriesInstance.
        :rtype: List[object]
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this TimeSeriesInstance.

        A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.

        :param time_series_id: The time_series_id of this TimeSeriesInstance.
        :type time_series_id: List[object]
        """
        if time_series_id is None:
            raise ValueError("Invalid value for `time_series_id`, must not be `None`")
        if time_series_id is not None and len(time_series_id) < 1:
            raise ValueError("Invalid value for `time_series_id`, number of items must be greater than or equal to `1`")

        self._time_series_id = time_series_id

    @property
    def type_id(self):
        """Gets the type_id of this TimeSeriesInstance.

        This represents the type that this instance belongs to. Never null.

        :return: The type_id of this TimeSeriesInstance.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this TimeSeriesInstance.

        This represents the type that this instance belongs to. Never null.

        :param type_id: The type_id of this TimeSeriesInstance.
        :type type_id: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
