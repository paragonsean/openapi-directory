# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tsx import Tsx
from openapi_server.models.variable import Variable
from openapi_server import util


class AggregateVariable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Tsx=None, kind: str=None, aggregation: Tsx=None):
        """AggregateVariable - a model defined in OpenAPI

        :param filter: The filter of this AggregateVariable.
        :param kind: The kind of this AggregateVariable.
        :param aggregation: The aggregation of this AggregateVariable.
        """
        self.openapi_types = {
            'filter': Tsx,
            'kind': str,
            'aggregation': Tsx
        }

        self.attribute_map = {
            'filter': 'filter',
            'kind': 'kind',
            'aggregation': 'aggregation'
        }

        self._filter = filter
        self._kind = kind
        self._aggregation = aggregation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateVariable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateVariable of this AggregateVariable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this AggregateVariable.


        :return: The filter of this AggregateVariable.
        :rtype: Tsx
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this AggregateVariable.


        :param filter: The filter of this AggregateVariable.
        :type filter: Tsx
        """

        self._filter = filter

    @property
    def kind(self):
        """Gets the kind of this AggregateVariable.

        Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.

        :return: The kind of this AggregateVariable.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AggregateVariable.

        Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.

        :param kind: The kind of this AggregateVariable.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def aggregation(self):
        """Gets the aggregation of this AggregateVariable.


        :return: The aggregation of this AggregateVariable.
        :rtype: Tsx
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this AggregateVariable.


        :param aggregation: The aggregation of this AggregateVariable.
        :type aggregation: Tsx
        """

        self._aggregation = aggregation
