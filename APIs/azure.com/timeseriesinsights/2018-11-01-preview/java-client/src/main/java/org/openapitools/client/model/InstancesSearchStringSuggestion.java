/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Suggested search string to be used for further search for time series instances.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstancesSearchStringSuggestion {
  public static final String SERIALIZED_NAME_HIGHLIGHTED_SEARCH_STRING = "highlightedSearchString";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTED_SEARCH_STRING)
  private String highlightedSearchString;

  public static final String SERIALIZED_NAME_SEARCH_STRING = "searchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public InstancesSearchStringSuggestion() {
  }

  public InstancesSearchStringSuggestion(
     String highlightedSearchString, 
     String searchString
  ) {
    this();
    this.highlightedSearchString = highlightedSearchString;
    this.searchString = searchString;
  }

  /**
   * Highlighted suggested search string to be displayed to the user. Highlighting inserts &lt;hit&gt; and &lt;/hit&gt; tags in the portions of text that matched the search string. Do not use highlighted search string to do further search calls.
   * @return highlightedSearchString
   */
  @javax.annotation.Nullable
  public String getHighlightedSearchString() {
    return highlightedSearchString;
  }



  /**
   * Suggested search string. Can be used for further search for time series instances.
   * @return searchString
   */
  @javax.annotation.Nullable
  public String getSearchString() {
    return searchString;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancesSearchStringSuggestion instancesSearchStringSuggestion = (InstancesSearchStringSuggestion) o;
    return Objects.equals(this.highlightedSearchString, instancesSearchStringSuggestion.highlightedSearchString) &&
        Objects.equals(this.searchString, instancesSearchStringSuggestion.searchString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(highlightedSearchString, searchString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancesSearchStringSuggestion {\n");
    sb.append("    highlightedSearchString: ").append(toIndentedString(highlightedSearchString)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("highlightedSearchString");
    openapiFields.add("searchString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstancesSearchStringSuggestion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstancesSearchStringSuggestion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancesSearchStringSuggestion is not found in the empty JSON string", InstancesSearchStringSuggestion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstancesSearchStringSuggestion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstancesSearchStringSuggestion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("highlightedSearchString") != null && !jsonObj.get("highlightedSearchString").isJsonNull()) && !jsonObj.get("highlightedSearchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlightedSearchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highlightedSearchString").toString()));
      }
      if ((jsonObj.get("searchString") != null && !jsonObj.get("searchString").isJsonNull()) && !jsonObj.get("searchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancesSearchStringSuggestion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancesSearchStringSuggestion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancesSearchStringSuggestion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancesSearchStringSuggestion.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancesSearchStringSuggestion>() {
           @Override
           public void write(JsonWriter out, InstancesSearchStringSuggestion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancesSearchStringSuggestion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstancesSearchStringSuggestion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstancesSearchStringSuggestion
   * @throws IOException if the JSON string is invalid with respect to InstancesSearchStringSuggestion
   */
  public static InstancesSearchStringSuggestion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancesSearchStringSuggestion.class);
  }

  /**
   * Convert an instance of InstancesSearchStringSuggestion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

