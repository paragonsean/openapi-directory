/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AggregateSeries;
import org.openapitools.client.model.GetEvents;
import org.openapitools.client.model.GetSeries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to execute a time series query over events. Exactly one of \&quot;getEvents\&quot;, \&quot;getSeries\&quot; or \&quot;aggregateSeries\&quot; must be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryRequest {
  public static final String SERIALIZED_NAME_AGGREGATE_SERIES = "aggregateSeries";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_SERIES)
  private AggregateSeries aggregateSeries;

  public static final String SERIALIZED_NAME_GET_EVENTS = "getEvents";
  @SerializedName(SERIALIZED_NAME_GET_EVENTS)
  private GetEvents getEvents;

  public static final String SERIALIZED_NAME_GET_SERIES = "getSeries";
  @SerializedName(SERIALIZED_NAME_GET_SERIES)
  private GetSeries getSeries;

  public QueryRequest() {
  }

  public QueryRequest aggregateSeries(AggregateSeries aggregateSeries) {
    this.aggregateSeries = aggregateSeries;
    return this;
  }

  /**
   * Get aggregateSeries
   * @return aggregateSeries
   */
  @javax.annotation.Nullable
  public AggregateSeries getAggregateSeries() {
    return aggregateSeries;
  }

  public void setAggregateSeries(AggregateSeries aggregateSeries) {
    this.aggregateSeries = aggregateSeries;
  }


  public QueryRequest getEvents(GetEvents getEvents) {
    this.getEvents = getEvents;
    return this;
  }

  /**
   * Get getEvents
   * @return getEvents
   */
  @javax.annotation.Nullable
  public GetEvents getGetEvents() {
    return getEvents;
  }

  public void setGetEvents(GetEvents getEvents) {
    this.getEvents = getEvents;
  }


  public QueryRequest getSeries(GetSeries getSeries) {
    this.getSeries = getSeries;
    return this;
  }

  /**
   * Get getSeries
   * @return getSeries
   */
  @javax.annotation.Nullable
  public GetSeries getGetSeries() {
    return getSeries;
  }

  public void setGetSeries(GetSeries getSeries) {
    this.getSeries = getSeries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRequest queryRequest = (QueryRequest) o;
    return Objects.equals(this.aggregateSeries, queryRequest.aggregateSeries) &&
        Objects.equals(this.getEvents, queryRequest.getEvents) &&
        Objects.equals(this.getSeries, queryRequest.getSeries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateSeries, getEvents, getSeries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRequest {\n");
    sb.append("    aggregateSeries: ").append(toIndentedString(aggregateSeries)).append("\n");
    sb.append("    getEvents: ").append(toIndentedString(getEvents)).append("\n");
    sb.append("    getSeries: ").append(toIndentedString(getSeries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateSeries");
    openapiFields.add("getEvents");
    openapiFields.add("getSeries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryRequest is not found in the empty JSON string", QueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregateSeries`
      if (jsonObj.get("aggregateSeries") != null && !jsonObj.get("aggregateSeries").isJsonNull()) {
        AggregateSeries.validateJsonElement(jsonObj.get("aggregateSeries"));
      }
      // validate the optional field `getEvents`
      if (jsonObj.get("getEvents") != null && !jsonObj.get("getEvents").isJsonNull()) {
        GetEvents.validateJsonElement(jsonObj.get("getEvents"));
      }
      // validate the optional field `getSeries`
      if (jsonObj.get("getSeries") != null && !jsonObj.get("getSeries").isJsonNull()) {
        GetSeries.validateJsonElement(jsonObj.get("getSeries"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryRequest>() {
           @Override
           public void write(JsonWriter out, QueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryRequest
   * @throws IOException if the JSON string is invalid with respect to QueryRequest
   */
  public static QueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryRequest.class);
  }

  /**
   * Convert an instance of QueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

