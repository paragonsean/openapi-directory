/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DateTimeRange;
import org.openapitools.client.model.Tsx;
import org.openapitools.client.model.Variable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Aggregate Series query. Allows to calculate an aggregated time series from events for a given Time Series ID and search span.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AggregateSeries {
  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Tsx filter;

  public static final String SERIALIZED_NAME_INLINE_VARIABLES = "inlineVariables";
  @SerializedName(SERIALIZED_NAME_INLINE_VARIABLES)
  private Map<String, Variable> inlineVariables = new HashMap<>();

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_PROJECTED_VARIABLES = "projectedVariables";
  @SerializedName(SERIALIZED_NAME_PROJECTED_VARIABLES)
  private List<String> projectedVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_SPAN = "searchSpan";
  @SerializedName(SERIALIZED_NAME_SEARCH_SPAN)
  private DateTimeRange searchSpan;

  public static final String SERIALIZED_NAME_TIME_SERIES_ID = "timeSeriesId";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID)
  private List<Object> timeSeriesId = new ArrayList<>();

  public AggregateSeries() {
  }

  public AggregateSeries filter(Tsx filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public Tsx getFilter() {
    return filter;
  }

  public void setFilter(Tsx filter) {
    this.filter = filter;
  }


  public AggregateSeries inlineVariables(Map<String, Variable> inlineVariables) {
    this.inlineVariables = inlineVariables;
    return this;
  }

  public AggregateSeries putInlineVariablesItem(String key, Variable inlineVariablesItem) {
    if (this.inlineVariables == null) {
      this.inlineVariables = new HashMap<>();
    }
    this.inlineVariables.put(key, inlineVariablesItem);
    return this;
  }

  /**
   * This allows the user the optionally define inline-variables apart from the ones already defined in the model. When the inline variable names have the same name as the model, the inline variable definition takes precedence. Can be null.
   * @return inlineVariables
   */
  @javax.annotation.Nullable
  public Map<String, Variable> getInlineVariables() {
    return inlineVariables;
  }

  public void setInlineVariables(Map<String, Variable> inlineVariables) {
    this.inlineVariables = inlineVariables;
  }


  public AggregateSeries interval(String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Interval size is specified in ISO-8601 duration format. All intervals are the same size. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \&quot;PT1M\&quot;, 1 millisecond is \&quot;PT0.001S\&quot;. For more information, see https://www.w3.org/TR/xmlschema-2/#duration
   * @return interval
   */
  @javax.annotation.Nonnull
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public AggregateSeries projectedVariables(List<String> projectedVariables) {
    this.projectedVariables = projectedVariables;
    return this;
  }

  public AggregateSeries addProjectedVariablesItem(String projectedVariablesItem) {
    if (this.projectedVariables == null) {
      this.projectedVariables = new ArrayList<>();
    }
    this.projectedVariables.add(projectedVariablesItem);
    return this;
  }

  /**
   * This allows the user to optionally select the variables that needs to be projected. When it is null or not set, all the variables from inlineVariables and model are returned. Can be null.
   * @return projectedVariables
   */
  @javax.annotation.Nullable
  public List<String> getProjectedVariables() {
    return projectedVariables;
  }

  public void setProjectedVariables(List<String> projectedVariables) {
    this.projectedVariables = projectedVariables;
  }


  public AggregateSeries searchSpan(DateTimeRange searchSpan) {
    this.searchSpan = searchSpan;
    return this;
  }

  /**
   * Get searchSpan
   * @return searchSpan
   */
  @javax.annotation.Nonnull
  public DateTimeRange getSearchSpan() {
    return searchSpan;
  }

  public void setSearchSpan(DateTimeRange searchSpan) {
    this.searchSpan = searchSpan;
  }


  public AggregateSeries timeSeriesId(List<Object> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
    return this;
  }

  public AggregateSeries addTimeSeriesIdItem(Object timeSeriesIdItem) {
    if (this.timeSeriesId == null) {
      this.timeSeriesId = new ArrayList<>();
    }
    this.timeSeriesId.add(timeSeriesIdItem);
    return this;
  }

  /**
   * A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
   * @return timeSeriesId
   */
  @javax.annotation.Nonnull
  public List<Object> getTimeSeriesId() {
    return timeSeriesId;
  }

  public void setTimeSeriesId(List<Object> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregateSeries aggregateSeries = (AggregateSeries) o;
    return Objects.equals(this.filter, aggregateSeries.filter) &&
        Objects.equals(this.inlineVariables, aggregateSeries.inlineVariables) &&
        Objects.equals(this.interval, aggregateSeries.interval) &&
        Objects.equals(this.projectedVariables, aggregateSeries.projectedVariables) &&
        Objects.equals(this.searchSpan, aggregateSeries.searchSpan) &&
        Objects.equals(this.timeSeriesId, aggregateSeries.timeSeriesId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, inlineVariables, interval, projectedVariables, searchSpan, timeSeriesId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregateSeries {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    inlineVariables: ").append(toIndentedString(inlineVariables)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    projectedVariables: ").append(toIndentedString(projectedVariables)).append("\n");
    sb.append("    searchSpan: ").append(toIndentedString(searchSpan)).append("\n");
    sb.append("    timeSeriesId: ").append(toIndentedString(timeSeriesId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter");
    openapiFields.add("inlineVariables");
    openapiFields.add("interval");
    openapiFields.add("projectedVariables");
    openapiFields.add("searchSpan");
    openapiFields.add("timeSeriesId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("searchSpan");
    openapiRequiredFields.add("timeSeriesId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AggregateSeries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregateSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregateSeries is not found in the empty JSON string", AggregateSeries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregateSeries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregateSeries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AggregateSeries.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        Tsx.validateJsonElement(jsonObj.get("filter"));
      }
      if (!jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectedVariables") != null && !jsonObj.get("projectedVariables").isJsonNull() && !jsonObj.get("projectedVariables").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectedVariables` to be an array in the JSON string but got `%s`", jsonObj.get("projectedVariables").toString()));
      }
      // validate the required field `searchSpan`
      DateTimeRange.validateJsonElement(jsonObj.get("searchSpan"));
      // ensure the required json array is present
      if (jsonObj.get("timeSeriesId") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("timeSeriesId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesId` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeriesId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregateSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregateSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregateSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregateSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregateSeries>() {
           @Override
           public void write(JsonWriter out, AggregateSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregateSeries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AggregateSeries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AggregateSeries
   * @throws IOException if the JSON string is invalid with respect to AggregateSeries
   */
  public static AggregateSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregateSeries.class);
  }

  /**
   * Convert an instance of AggregateSeries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

