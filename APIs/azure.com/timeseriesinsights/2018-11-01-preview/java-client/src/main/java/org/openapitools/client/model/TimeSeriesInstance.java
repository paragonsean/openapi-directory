/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Time series instances are the time series themselves. In most cases, the deviceId or assetId is the unique identifier of the asset in the environment. Instances have descriptive information associated with them called instance fields. At a minimum, instance fields include hierarchy information. They can also include useful, descriptive data like the manufacturer, operator, or the last service date.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesInstance {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HIERARCHY_IDS = "hierarchyIds";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_IDS)
  private List<UUID> hierarchyIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCE_FIELDS = "instanceFields";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FIELDS)
  private Map<String, Object> instanceFields = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME_SERIES_ID = "timeSeriesId";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID)
  private List<Object> timeSeriesId = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE_ID = "typeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private UUID typeId;

  public TimeSeriesInstance() {
  }

  public TimeSeriesInstance description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This optional field contains description about the instance.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TimeSeriesInstance hierarchyIds(List<UUID> hierarchyIds) {
    this.hierarchyIds = hierarchyIds;
    return this;
  }

  public TimeSeriesInstance addHierarchyIdsItem(UUID hierarchyIdsItem) {
    if (this.hierarchyIds == null) {
      this.hierarchyIds = new ArrayList<>();
    }
    this.hierarchyIds.add(hierarchyIdsItem);
    return this;
  }

  /**
   * Set of time series hierarchy IDs that the instance belong to. May be null.
   * @return hierarchyIds
   */
  @javax.annotation.Nullable
  public List<UUID> getHierarchyIds() {
    return hierarchyIds;
  }

  public void setHierarchyIds(List<UUID> hierarchyIds) {
    this.hierarchyIds = hierarchyIds;
  }


  public TimeSeriesInstance instanceFields(Map<String, Object> instanceFields) {
    this.instanceFields = instanceFields;
    return this;
  }

  public TimeSeriesInstance putInstanceFieldsItem(String key, Object instanceFieldsItem) {
    if (this.instanceFields == null) {
      this.instanceFields = new HashMap<>();
    }
    this.instanceFields.put(key, instanceFieldsItem);
    return this;
  }

  /**
   * Set of key-value pairs that contain user-defined instance properties. May be null.
   * @return instanceFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getInstanceFields() {
    return instanceFields;
  }

  public void setInstanceFields(Map<String, Object> instanceFields) {
    this.instanceFields = instanceFields;
  }


  public TimeSeriesInstance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional name of the instance which is unique in an environment. Names acts as a mutable alias or display name of the time series instance. Mutable, may be null.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TimeSeriesInstance timeSeriesId(List<Object> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
    return this;
  }

  public TimeSeriesInstance addTimeSeriesIdItem(Object timeSeriesIdItem) {
    if (this.timeSeriesId == null) {
      this.timeSeriesId = new ArrayList<>();
    }
    this.timeSeriesId.add(timeSeriesIdItem);
    return this;
  }

  /**
   * A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
   * @return timeSeriesId
   */
  @javax.annotation.Nonnull
  public List<Object> getTimeSeriesId() {
    return timeSeriesId;
  }

  public void setTimeSeriesId(List<Object> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
  }


  public TimeSeriesInstance typeId(UUID typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * This represents the type that this instance belongs to. Never null.
   * @return typeId
   */
  @javax.annotation.Nonnull
  public UUID getTypeId() {
    return typeId;
  }

  public void setTypeId(UUID typeId) {
    this.typeId = typeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesInstance timeSeriesInstance = (TimeSeriesInstance) o;
    return Objects.equals(this.description, timeSeriesInstance.description) &&
        Objects.equals(this.hierarchyIds, timeSeriesInstance.hierarchyIds) &&
        Objects.equals(this.instanceFields, timeSeriesInstance.instanceFields) &&
        Objects.equals(this.name, timeSeriesInstance.name) &&
        Objects.equals(this.timeSeriesId, timeSeriesInstance.timeSeriesId) &&
        Objects.equals(this.typeId, timeSeriesInstance.typeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, hierarchyIds, instanceFields, name, timeSeriesId, typeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesInstance {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hierarchyIds: ").append(toIndentedString(hierarchyIds)).append("\n");
    sb.append("    instanceFields: ").append(toIndentedString(instanceFields)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timeSeriesId: ").append(toIndentedString(timeSeriesId)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("hierarchyIds");
    openapiFields.add("instanceFields");
    openapiFields.add("name");
    openapiFields.add("timeSeriesId");
    openapiFields.add("typeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timeSeriesId");
    openapiRequiredFields.add("typeId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesInstance is not found in the empty JSON string", TimeSeriesInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeSeriesInstance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hierarchyIds") != null && !jsonObj.get("hierarchyIds").isJsonNull() && !jsonObj.get("hierarchyIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchyIds` to be an array in the JSON string but got `%s`", jsonObj.get("hierarchyIds").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("timeSeriesId") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("timeSeriesId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesId` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeriesId").toString()));
      }
      if (!jsonObj.get("typeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesInstance>() {
           @Override
           public void write(JsonWriter out, TimeSeriesInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesInstance
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesInstance
   */
  public static TimeSeriesInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesInstance.class);
  }

  /**
   * Convert an instance of TimeSeriesInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

