/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of how time series hierarchy tree levels are created.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesHierarchySource {
  public static final String SERIALIZED_NAME_INSTANCE_FIELD_NAMES = "instanceFieldNames";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FIELD_NAMES)
  private List<String> instanceFieldNames = new ArrayList<>();

  public TimeSeriesHierarchySource() {
  }

  public TimeSeriesHierarchySource instanceFieldNames(List<String> instanceFieldNames) {
    this.instanceFieldNames = instanceFieldNames;
    return this;
  }

  public TimeSeriesHierarchySource addInstanceFieldNamesItem(String instanceFieldNamesItem) {
    if (this.instanceFieldNames == null) {
      this.instanceFieldNames = new ArrayList<>();
    }
    this.instanceFieldNames.add(instanceFieldNamesItem);
    return this;
  }

  /**
   * List of instance field names that must be set in all time series instances that belong to this hierarchy. The order of the instance fields defines the levels in the hierarchy.
   * @return instanceFieldNames
   */
  @javax.annotation.Nullable
  public List<String> getInstanceFieldNames() {
    return instanceFieldNames;
  }

  public void setInstanceFieldNames(List<String> instanceFieldNames) {
    this.instanceFieldNames = instanceFieldNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesHierarchySource timeSeriesHierarchySource = (TimeSeriesHierarchySource) o;
    return Objects.equals(this.instanceFieldNames, timeSeriesHierarchySource.instanceFieldNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceFieldNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesHierarchySource {\n");
    sb.append("    instanceFieldNames: ").append(toIndentedString(instanceFieldNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceFieldNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesHierarchySource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesHierarchySource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesHierarchySource is not found in the empty JSON string", TimeSeriesHierarchySource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesHierarchySource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesHierarchySource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("instanceFieldNames") != null && !jsonObj.get("instanceFieldNames").isJsonNull() && !jsonObj.get("instanceFieldNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceFieldNames` to be an array in the JSON string but got `%s`", jsonObj.get("instanceFieldNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesHierarchySource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesHierarchySource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesHierarchySource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesHierarchySource.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesHierarchySource>() {
           @Override
           public void write(JsonWriter out, TimeSeriesHierarchySource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesHierarchySource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesHierarchySource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesHierarchySource
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesHierarchySource
   */
  public static TimeSeriesHierarchySource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesHierarchySource.class);
  }

  /**
   * Convert an instance of TimeSeriesHierarchySource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

