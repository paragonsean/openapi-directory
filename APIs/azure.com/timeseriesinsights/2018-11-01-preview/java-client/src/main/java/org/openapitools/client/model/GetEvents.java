/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateTimeRange;
import org.openapitools.client.model.EventProperty;
import org.openapitools.client.model.Tsx;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Get Events query. Allows to retrieve raw events for a given Time Series ID and search span.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetEvents {
  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Tsx filter;

  public static final String SERIALIZED_NAME_PROJECTED_PROPERTIES = "projectedProperties";
  @SerializedName(SERIALIZED_NAME_PROJECTED_PROPERTIES)
  private List<EventProperty> projectedProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_SPAN = "searchSpan";
  @SerializedName(SERIALIZED_NAME_SEARCH_SPAN)
  private DateTimeRange searchSpan;

  public static final String SERIALIZED_NAME_TAKE = "take";
  @SerializedName(SERIALIZED_NAME_TAKE)
  private Integer take;

  public static final String SERIALIZED_NAME_TIME_SERIES_ID = "timeSeriesId";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID)
  private List<Object> timeSeriesId = new ArrayList<>();

  public GetEvents() {
  }

  public GetEvents filter(Tsx filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public Tsx getFilter() {
    return filter;
  }

  public void setFilter(Tsx filter) {
    this.filter = filter;
  }


  public GetEvents projectedProperties(List<EventProperty> projectedProperties) {
    this.projectedProperties = projectedProperties;
    return this;
  }

  public GetEvents addProjectedPropertiesItem(EventProperty projectedPropertiesItem) {
    if (this.projectedProperties == null) {
      this.projectedProperties = new ArrayList<>();
    }
    this.projectedProperties.add(projectedPropertiesItem);
    return this;
  }

  /**
   * Projected properties is an array of properties which you want to project. These properties must appear in the events; otherwise, they are not returned.
   * @return projectedProperties
   */
  @javax.annotation.Nullable
  public List<EventProperty> getProjectedProperties() {
    return projectedProperties;
  }

  public void setProjectedProperties(List<EventProperty> projectedProperties) {
    this.projectedProperties = projectedProperties;
  }


  public GetEvents searchSpan(DateTimeRange searchSpan) {
    this.searchSpan = searchSpan;
    return this;
  }

  /**
   * Get searchSpan
   * @return searchSpan
   */
  @javax.annotation.Nonnull
  public DateTimeRange getSearchSpan() {
    return searchSpan;
  }

  public void setSearchSpan(DateTimeRange searchSpan) {
    this.searchSpan = searchSpan;
  }


  public GetEvents take(Integer take) {
    this.take = take;
    return this;
  }

  /**
   * Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.
   * @return take
   */
  @javax.annotation.Nullable
  public Integer getTake() {
    return take;
  }

  public void setTake(Integer take) {
    this.take = take;
  }


  public GetEvents timeSeriesId(List<Object> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
    return this;
  }

  public GetEvents addTimeSeriesIdItem(Object timeSeriesIdItem) {
    if (this.timeSeriesId == null) {
      this.timeSeriesId = new ArrayList<>();
    }
    this.timeSeriesId.add(timeSeriesIdItem);
    return this;
  }

  /**
   * A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
   * @return timeSeriesId
   */
  @javax.annotation.Nonnull
  public List<Object> getTimeSeriesId() {
    return timeSeriesId;
  }

  public void setTimeSeriesId(List<Object> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEvents getEvents = (GetEvents) o;
    return Objects.equals(this.filter, getEvents.filter) &&
        Objects.equals(this.projectedProperties, getEvents.projectedProperties) &&
        Objects.equals(this.searchSpan, getEvents.searchSpan) &&
        Objects.equals(this.take, getEvents.take) &&
        Objects.equals(this.timeSeriesId, getEvents.timeSeriesId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, projectedProperties, searchSpan, take, timeSeriesId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEvents {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    projectedProperties: ").append(toIndentedString(projectedProperties)).append("\n");
    sb.append("    searchSpan: ").append(toIndentedString(searchSpan)).append("\n");
    sb.append("    take: ").append(toIndentedString(take)).append("\n");
    sb.append("    timeSeriesId: ").append(toIndentedString(timeSeriesId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter");
    openapiFields.add("projectedProperties");
    openapiFields.add("searchSpan");
    openapiFields.add("take");
    openapiFields.add("timeSeriesId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("searchSpan");
    openapiRequiredFields.add("timeSeriesId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetEvents
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEvents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEvents is not found in the empty JSON string", GetEvents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEvents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEvents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetEvents.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        Tsx.validateJsonElement(jsonObj.get("filter"));
      }
      if (jsonObj.get("projectedProperties") != null && !jsonObj.get("projectedProperties").isJsonNull()) {
        JsonArray jsonArrayprojectedProperties = jsonObj.getAsJsonArray("projectedProperties");
        if (jsonArrayprojectedProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("projectedProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `projectedProperties` to be an array in the JSON string but got `%s`", jsonObj.get("projectedProperties").toString()));
          }

          // validate the optional field `projectedProperties` (array)
          for (int i = 0; i < jsonArrayprojectedProperties.size(); i++) {
            EventProperty.validateJsonElement(jsonArrayprojectedProperties.get(i));
          };
        }
      }
      // validate the required field `searchSpan`
      DateTimeRange.validateJsonElement(jsonObj.get("searchSpan"));
      // ensure the required json array is present
      if (jsonObj.get("timeSeriesId") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("timeSeriesId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesId` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeriesId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEvents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEvents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEvents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEvents.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEvents>() {
           @Override
           public void write(JsonWriter out, GetEvents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEvents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetEvents given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetEvents
   * @throws IOException if the JSON string is invalid with respect to GetEvents
   */
  public static GetEvents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEvents.class);
  }

  /**
   * Convert an instance of GetEvents to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

