/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SearchInstancesHierarchiesParameters;
import org.openapitools.client.model.SearchInstancesParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to execute a search query against time series instances and return matching time series instances.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchInstancesRequest {
  public static final String SERIALIZED_NAME_HIERARCHIES = "hierarchies";
  @SerializedName(SERIALIZED_NAME_HIERARCHIES)
  private SearchInstancesHierarchiesParameters hierarchies;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private SearchInstancesParameters instances;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private List<String> path = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_STRING = "searchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public SearchInstancesRequest() {
  }

  public SearchInstancesRequest hierarchies(SearchInstancesHierarchiesParameters hierarchies) {
    this.hierarchies = hierarchies;
    return this;
  }

  /**
   * Get hierarchies
   * @return hierarchies
   */
  @javax.annotation.Nullable
  public SearchInstancesHierarchiesParameters getHierarchies() {
    return hierarchies;
  }

  public void setHierarchies(SearchInstancesHierarchiesParameters hierarchies) {
    this.hierarchies = hierarchies;
  }


  public SearchInstancesRequest instances(SearchInstancesParameters instances) {
    this.instances = instances;
    return this;
  }

  /**
   * Get instances
   * @return instances
   */
  @javax.annotation.Nullable
  public SearchInstancesParameters getInstances() {
    return instances;
  }

  public void setInstances(SearchInstancesParameters instances) {
    this.instances = instances;
  }


  public SearchInstancesRequest path(List<String> path) {
    this.path = path;
    return this;
  }

  public SearchInstancesRequest addPathItem(String pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<>();
    }
    this.path.add(pathItem);
    return this;
  }

  /**
   * Filter on hierarchy path of time series instances. Path is represented as array of string path segments. First element should be hierarchy name. Example: [\&quot;Location\&quot;, \&quot;California\&quot;]. Optional, case sensitive, never empty and can be null.
   * @return path
   */
  @javax.annotation.Nullable
  public List<String> getPath() {
    return path;
  }

  public void setPath(List<String> path) {
    this.path = path;
  }


  public SearchInstancesRequest searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

  /**
   * Query search string that will be matched to the attributes of time series instances. Example: \&quot;floor 100\&quot;. Case-insensitive, must be present, but can be empty string.
   * @return searchString
   */
  @javax.annotation.Nonnull
  public String getSearchString() {
    return searchString;
  }

  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchInstancesRequest searchInstancesRequest = (SearchInstancesRequest) o;
    return Objects.equals(this.hierarchies, searchInstancesRequest.hierarchies) &&
        Objects.equals(this.instances, searchInstancesRequest.instances) &&
        Objects.equals(this.path, searchInstancesRequest.path) &&
        Objects.equals(this.searchString, searchInstancesRequest.searchString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hierarchies, instances, path, searchString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchInstancesRequest {\n");
    sb.append("    hierarchies: ").append(toIndentedString(hierarchies)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hierarchies");
    openapiFields.add("instances");
    openapiFields.add("path");
    openapiFields.add("searchString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("searchString");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchInstancesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchInstancesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchInstancesRequest is not found in the empty JSON string", SearchInstancesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchInstancesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchInstancesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchInstancesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `hierarchies`
      if (jsonObj.get("hierarchies") != null && !jsonObj.get("hierarchies").isJsonNull()) {
        SearchInstancesHierarchiesParameters.validateJsonElement(jsonObj.get("hierarchies"));
      }
      // validate the optional field `instances`
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull()) {
        SearchInstancesParameters.validateJsonElement(jsonObj.get("instances"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull() && !jsonObj.get("path").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be an array in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("searchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchInstancesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchInstancesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchInstancesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchInstancesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchInstancesRequest>() {
           @Override
           public void write(JsonWriter out, SearchInstancesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchInstancesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchInstancesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchInstancesRequest
   * @throws IOException if the JSON string is invalid with respect to SearchInstancesRequest
   */
  public static SearchInstancesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchInstancesRequest.class);
  }

  /**
   * Convert an instance of SearchInstancesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

