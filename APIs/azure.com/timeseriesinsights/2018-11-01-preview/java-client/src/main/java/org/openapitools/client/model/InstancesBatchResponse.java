/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstanceOrError;
import org.openapitools.client.model.TsiErrorBody;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response of a single operation on a batch of instances. Only one of \&quot;get\&quot;, \&quot;put\&quot;, \&quot;update\&quot; or \&quot;delete\&quot; will be set based on the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstancesBatchResponse {
  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private List<TsiErrorBody> delete = new ArrayList<>();

  public static final String SERIALIZED_NAME_GET = "get";
  @SerializedName(SERIALIZED_NAME_GET)
  private List<InstanceOrError> get = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUT = "put";
  @SerializedName(SERIALIZED_NAME_PUT)
  private List<InstanceOrError> put = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private List<InstanceOrError> update = new ArrayList<>();

  public InstancesBatchResponse() {
  }

  public InstancesBatchResponse(
     List<TsiErrorBody> delete, 
     List<InstanceOrError> get, 
     List<InstanceOrError> put, 
     List<InstanceOrError> update
  ) {
    this();
    this.delete = delete;
    this.get = get;
    this.put = put;
    this.update = update;
  }

  /**
   * List of error objects corresponding by position to the \&quot;delete\&quot; array in the request. Null means the instance has been deleted, or did not exist. Error object is set when operation is unsuccessful (e.g. when there are events associated with this time series instance).
   * @return delete
   */
  @javax.annotation.Nullable
  public List<TsiErrorBody> getDelete() {
    return delete;
  }



  /**
   * List of instance or error objects corresponding by position to the \&quot;get\&quot; array in the request. Instance object is set when operation is successful and error object is set when operation is unsuccessful.
   * @return get
   */
  @javax.annotation.Nullable
  public List<InstanceOrError> getGet() {
    return get;
  }



  /**
   * List of error objects corresponding by position to the \&quot;put\&quot; array in the request. Error object is set when operation is unsuccessful.
   * @return put
   */
  @javax.annotation.Nullable
  public List<InstanceOrError> getPut() {
    return put;
  }



  /**
   * List of error objects corresponding by position to the \&quot;update\&quot; array in the request. Instance object is set when operation is successful and error object is set when operation is unsuccessful.
   * @return update
   */
  @javax.annotation.Nullable
  public List<InstanceOrError> getUpdate() {
    return update;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancesBatchResponse instancesBatchResponse = (InstancesBatchResponse) o;
    return Objects.equals(this.delete, instancesBatchResponse.delete) &&
        Objects.equals(this.get, instancesBatchResponse.get) &&
        Objects.equals(this.put, instancesBatchResponse.put) &&
        Objects.equals(this.update, instancesBatchResponse.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delete, get, put, update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancesBatchResponse {\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    get: ").append(toIndentedString(get)).append("\n");
    sb.append("    put: ").append(toIndentedString(put)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delete");
    openapiFields.add("get");
    openapiFields.add("put");
    openapiFields.add("update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstancesBatchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstancesBatchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancesBatchResponse is not found in the empty JSON string", InstancesBatchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstancesBatchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstancesBatchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull() && !jsonObj.get("delete").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete` to be an array in the JSON string but got `%s`", jsonObj.get("delete").toString()));
      }
      if (jsonObj.get("get") != null && !jsonObj.get("get").isJsonNull()) {
        JsonArray jsonArrayget = jsonObj.getAsJsonArray("get");
        if (jsonArrayget != null) {
          // ensure the json data is an array
          if (!jsonObj.get("get").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `get` to be an array in the JSON string but got `%s`", jsonObj.get("get").toString()));
          }

          // validate the optional field `get` (array)
          for (int i = 0; i < jsonArrayget.size(); i++) {
            InstanceOrError.validateJsonElement(jsonArrayget.get(i));
          };
        }
      }
      if (jsonObj.get("put") != null && !jsonObj.get("put").isJsonNull()) {
        JsonArray jsonArrayput = jsonObj.getAsJsonArray("put");
        if (jsonArrayput != null) {
          // ensure the json data is an array
          if (!jsonObj.get("put").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `put` to be an array in the JSON string but got `%s`", jsonObj.get("put").toString()));
          }

          // validate the optional field `put` (array)
          for (int i = 0; i < jsonArrayput.size(); i++) {
            InstanceOrError.validateJsonElement(jsonArrayput.get(i));
          };
        }
      }
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        JsonArray jsonArrayupdate = jsonObj.getAsJsonArray("update");
        if (jsonArrayupdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("update").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `update` to be an array in the JSON string but got `%s`", jsonObj.get("update").toString()));
          }

          // validate the optional field `update` (array)
          for (int i = 0; i < jsonArrayupdate.size(); i++) {
            InstanceOrError.validateJsonElement(jsonArrayupdate.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancesBatchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancesBatchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancesBatchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancesBatchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancesBatchResponse>() {
           @Override
           public void write(JsonWriter out, InstancesBatchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancesBatchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstancesBatchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstancesBatchResponse
   * @throws IOException if the JSON string is invalid with respect to InstancesBatchResponse
   */
  public static InstancesBatchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancesBatchResponse.class);
  }

  /**
   * Convert an instance of InstancesBatchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

