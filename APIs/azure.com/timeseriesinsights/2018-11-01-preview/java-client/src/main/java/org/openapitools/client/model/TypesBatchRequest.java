/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeSeriesType;
import org.openapitools.client.model.TypesRequestBatchGetOrDelete;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to perform a single operation on a batch of time series types. Exactly one of \&quot;get\&quot;, \&quot;put\&quot; or \&quot;delete\&quot; must be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TypesBatchRequest {
  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private TypesRequestBatchGetOrDelete delete;

  public static final String SERIALIZED_NAME_GET = "get";
  @SerializedName(SERIALIZED_NAME_GET)
  private TypesRequestBatchGetOrDelete get;

  public static final String SERIALIZED_NAME_PUT = "put";
  @SerializedName(SERIALIZED_NAME_PUT)
  private List<TimeSeriesType> put = new ArrayList<>();

  public TypesBatchRequest() {
  }

  public TypesBatchRequest delete(TypesRequestBatchGetOrDelete delete) {
    this.delete = delete;
    return this;
  }

  /**
   * Get delete
   * @return delete
   */
  @javax.annotation.Nullable
  public TypesRequestBatchGetOrDelete getDelete() {
    return delete;
  }

  public void setDelete(TypesRequestBatchGetOrDelete delete) {
    this.delete = delete;
  }


  public TypesBatchRequest get(TypesRequestBatchGetOrDelete get) {
    this.get = get;
    return this;
  }

  /**
   * Get get
   * @return get
   */
  @javax.annotation.Nullable
  public TypesRequestBatchGetOrDelete getGet() {
    return get;
  }

  public void setGet(TypesRequestBatchGetOrDelete get) {
    this.get = get;
  }


  public TypesBatchRequest put(List<TimeSeriesType> put) {
    this.put = put;
    return this;
  }

  public TypesBatchRequest addPutItem(TimeSeriesType putItem) {
    if (this.put == null) {
      this.put = new ArrayList<>();
    }
    this.put.add(putItem);
    return this;
  }

  /**
   * Definition of what time series types to update or create.
   * @return put
   */
  @javax.annotation.Nullable
  public List<TimeSeriesType> getPut() {
    return put;
  }

  public void setPut(List<TimeSeriesType> put) {
    this.put = put;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypesBatchRequest typesBatchRequest = (TypesBatchRequest) o;
    return Objects.equals(this.delete, typesBatchRequest.delete) &&
        Objects.equals(this.get, typesBatchRequest.get) &&
        Objects.equals(this.put, typesBatchRequest.put);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delete, get, put);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypesBatchRequest {\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    get: ").append(toIndentedString(get)).append("\n");
    sb.append("    put: ").append(toIndentedString(put)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delete");
    openapiFields.add("get");
    openapiFields.add("put");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypesBatchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypesBatchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypesBatchRequest is not found in the empty JSON string", TypesBatchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypesBatchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypesBatchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `delete`
      if (jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) {
        TypesRequestBatchGetOrDelete.validateJsonElement(jsonObj.get("delete"));
      }
      // validate the optional field `get`
      if (jsonObj.get("get") != null && !jsonObj.get("get").isJsonNull()) {
        TypesRequestBatchGetOrDelete.validateJsonElement(jsonObj.get("get"));
      }
      if (jsonObj.get("put") != null && !jsonObj.get("put").isJsonNull()) {
        JsonArray jsonArrayput = jsonObj.getAsJsonArray("put");
        if (jsonArrayput != null) {
          // ensure the json data is an array
          if (!jsonObj.get("put").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `put` to be an array in the JSON string but got `%s`", jsonObj.get("put").toString()));
          }

          // validate the optional field `put` (array)
          for (int i = 0; i < jsonArrayput.size(); i++) {
            TimeSeriesType.validateJsonElement(jsonArrayput.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypesBatchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypesBatchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypesBatchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypesBatchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TypesBatchRequest>() {
           @Override
           public void write(JsonWriter out, TypesBatchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypesBatchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypesBatchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypesBatchRequest
   * @throws IOException if the JSON string is invalid with respect to TypesBatchRequest
   */
  public static TypesBatchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypesBatchRequest.class);
  }

  /**
   * Convert an instance of TypesBatchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

