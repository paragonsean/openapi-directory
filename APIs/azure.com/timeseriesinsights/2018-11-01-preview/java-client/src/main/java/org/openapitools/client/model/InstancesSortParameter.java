/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of how time series instances are sorted before being returned by search instances call.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstancesSortParameter {
  /**
   * Value to use for sorting of the time series instances before being returned by search instances call. When it is set to &#39;Rank&#39;, the returned instances are sorted based on the relevance. When it is set to &#39;DisplayName&#39;, the returned results are sorted based on the display name. Display name is the name of the instance if it exists, otherwise, display name is the time series ID. Default is &#39;Rank&#39;.
   */
  @JsonAdapter(ByEnum.Adapter.class)
  public enum ByEnum {
    RANK("Rank"),
    
    DISPLAY_NAME("DisplayName");

    private String value;

    ByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ByEnum fromValue(String value) {
      for (ByEnum b : ByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BY = "by";
  @SerializedName(SERIALIZED_NAME_BY)
  private ByEnum by;

  public InstancesSortParameter() {
  }

  public InstancesSortParameter by(ByEnum by) {
    this.by = by;
    return this;
  }

  /**
   * Value to use for sorting of the time series instances before being returned by search instances call. When it is set to &#39;Rank&#39;, the returned instances are sorted based on the relevance. When it is set to &#39;DisplayName&#39;, the returned results are sorted based on the display name. Display name is the name of the instance if it exists, otherwise, display name is the time series ID. Default is &#39;Rank&#39;.
   * @return by
   */
  @javax.annotation.Nullable
  public ByEnum getBy() {
    return by;
  }

  public void setBy(ByEnum by) {
    this.by = by;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancesSortParameter instancesSortParameter = (InstancesSortParameter) o;
    return Objects.equals(this.by, instancesSortParameter.by);
  }

  @Override
  public int hashCode() {
    return Objects.hash(by);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancesSortParameter {\n");
    sb.append("    by: ").append(toIndentedString(by)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("by");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstancesSortParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstancesSortParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancesSortParameter is not found in the empty JSON string", InstancesSortParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstancesSortParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstancesSortParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("by") != null && !jsonObj.get("by").isJsonNull()) && !jsonObj.get("by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("by").toString()));
      }
      // validate the optional field `by`
      if (jsonObj.get("by") != null && !jsonObj.get("by").isJsonNull()) {
        ByEnum.validateJsonElement(jsonObj.get("by"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancesSortParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancesSortParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancesSortParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancesSortParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancesSortParameter>() {
           @Override
           public void write(JsonWriter out, InstancesSortParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancesSortParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstancesSortParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstancesSortParameter
   * @throws IOException if the JSON string is invalid with respect to InstancesSortParameter
   */
  public static InstancesSortParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancesSortParameter.class);
  }

  /**
   * Convert an instance of InstancesSortParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

