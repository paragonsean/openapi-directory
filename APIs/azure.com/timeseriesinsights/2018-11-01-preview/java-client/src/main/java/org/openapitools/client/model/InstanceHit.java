/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.InstanceHitHighlights;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Time series instance that is returned by instances search call. Returned instance matched the search request and contains highlighted text to be displayed to the user if it is set to &#39;true&#39;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceHit {
  public static final String SERIALIZED_NAME_HIERARCHY_IDS = "hierarchyIds";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_IDS)
  private List<UUID> hierarchyIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIGHLIGHTS = "highlights";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTS)
  private InstanceHitHighlights highlights;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME_SERIES_ID = "timeSeriesId";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID)
  private List<Object> timeSeriesId = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE_ID = "typeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private UUID typeId;

  public InstanceHit() {
  }

  public InstanceHit(
     List<UUID> hierarchyIds, 
     String name, 
     UUID typeId
  ) {
    this();
    this.hierarchyIds = hierarchyIds;
    this.name = name;
    this.typeId = typeId;
  }

  /**
   * List of time series hierarchy IDs that time series instance which matched the search request belongs to. Cannot be used to lookup hierarchies. May be null.
   * @return hierarchyIds
   */
  @javax.annotation.Nullable
  public List<UUID> getHierarchyIds() {
    return hierarchyIds;
  }



  public InstanceHit highlights(InstanceHitHighlights highlights) {
    this.highlights = highlights;
    return this;
  }

  /**
   * Get highlights
   * @return highlights
   */
  @javax.annotation.Nullable
  public InstanceHitHighlights getHighlights() {
    return highlights;
  }

  public void setHighlights(InstanceHitHighlights highlights) {
    this.highlights = highlights;
  }


  /**
   * Name of the time series instance that matched the search request. May be null.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public InstanceHit timeSeriesId(List<Object> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
    return this;
  }

  public InstanceHit addTimeSeriesIdItem(Object timeSeriesIdItem) {
    if (this.timeSeriesId == null) {
      this.timeSeriesId = new ArrayList<>();
    }
    this.timeSeriesId.add(timeSeriesIdItem);
    return this;
  }

  /**
   * A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
   * @return timeSeriesId
   */
  @javax.annotation.Nullable
  public List<Object> getTimeSeriesId() {
    return timeSeriesId;
  }

  public void setTimeSeriesId(List<Object> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
  }


  /**
   * Represents the type that time series instance which matched the search request belongs to. Never null.
   * @return typeId
   */
  @javax.annotation.Nullable
  public UUID getTypeId() {
    return typeId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceHit instanceHit = (InstanceHit) o;
    return Objects.equals(this.hierarchyIds, instanceHit.hierarchyIds) &&
        Objects.equals(this.highlights, instanceHit.highlights) &&
        Objects.equals(this.name, instanceHit.name) &&
        Objects.equals(this.timeSeriesId, instanceHit.timeSeriesId) &&
        Objects.equals(this.typeId, instanceHit.typeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hierarchyIds, highlights, name, timeSeriesId, typeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceHit {\n");
    sb.append("    hierarchyIds: ").append(toIndentedString(hierarchyIds)).append("\n");
    sb.append("    highlights: ").append(toIndentedString(highlights)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timeSeriesId: ").append(toIndentedString(timeSeriesId)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hierarchyIds");
    openapiFields.add("highlights");
    openapiFields.add("name");
    openapiFields.add("timeSeriesId");
    openapiFields.add("typeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceHit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceHit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceHit is not found in the empty JSON string", InstanceHit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceHit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceHit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("hierarchyIds") != null && !jsonObj.get("hierarchyIds").isJsonNull() && !jsonObj.get("hierarchyIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchyIds` to be an array in the JSON string but got `%s`", jsonObj.get("hierarchyIds").toString()));
      }
      // validate the optional field `highlights`
      if (jsonObj.get("highlights") != null && !jsonObj.get("highlights").isJsonNull()) {
        InstanceHitHighlights.validateJsonElement(jsonObj.get("highlights"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("timeSeriesId") != null && !jsonObj.get("timeSeriesId").isJsonNull() && !jsonObj.get("timeSeriesId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesId` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeriesId").toString()));
      }
      if ((jsonObj.get("typeId") != null && !jsonObj.get("typeId").isJsonNull()) && !jsonObj.get("typeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceHit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceHit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceHit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceHit.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceHit>() {
           @Override
           public void write(JsonWriter out, InstanceHit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceHit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceHit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceHit
   * @throws IOException if the JSON string is invalid with respect to InstanceHit
   */
  public static InstanceHit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceHit.class);
  }

  /**
   * Convert an instance of InstanceHit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

