/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AvailabilityResponse;
import org.openapitools.client.model.EventSchema;
import org.openapitools.client.model.GetEventSchemaRequest;
import org.openapitools.client.model.QueryRequest;
import org.openapitools.client.model.QueryResultPage;
import org.openapitools.client.model.TsiError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queryExecute
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param parameters Time series query request body. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsContinuation Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryExecuteCall(String apiVersion, QueryRequest parameters, String storeType, String xMsContinuation, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/timeseries/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (storeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeType", storeType));
        }

        if (xMsContinuation != null) {
            localVarHeaderParams.put("x-ms-continuation", localVarApiClient.parameterToString(xMsContinuation));
        }

        if (xMsClientRequestId != null) {
            localVarHeaderParams.put("x-ms-client-request-id", localVarApiClient.parameterToString(xMsClientRequestId));
        }

        if (xMsClientSessionId != null) {
            localVarHeaderParams.put("x-ms-client-session-id", localVarApiClient.parameterToString(xMsClientSessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryExecuteValidateBeforeCall(String apiVersion, QueryRequest parameters, String storeType, String xMsContinuation, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryExecute(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling queryExecute(Async)");
        }

        return queryExecuteCall(apiVersion, parameters, storeType, xMsContinuation, xMsClientRequestId, xMsClientSessionId, _callback);

    }

    /**
     * 
     * Executes Time Series Query in pages of results - Get Events, Get Series or Aggregate Series.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param parameters Time series query request body. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsContinuation Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @return QueryResultPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public QueryResultPage queryExecute(String apiVersion, QueryRequest parameters, String storeType, String xMsContinuation, String xMsClientRequestId, String xMsClientSessionId) throws ApiException {
        ApiResponse<QueryResultPage> localVarResp = queryExecuteWithHttpInfo(apiVersion, parameters, storeType, xMsContinuation, xMsClientRequestId, xMsClientSessionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Executes Time Series Query in pages of results - Get Events, Get Series or Aggregate Series.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param parameters Time series query request body. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsContinuation Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @return ApiResponse&lt;QueryResultPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public ApiResponse<QueryResultPage> queryExecuteWithHttpInfo(String apiVersion, QueryRequest parameters, String storeType, String xMsContinuation, String xMsClientRequestId, String xMsClientSessionId) throws ApiException {
        okhttp3.Call localVarCall = queryExecuteValidateBeforeCall(apiVersion, parameters, storeType, xMsContinuation, xMsClientRequestId, xMsClientSessionId, null);
        Type localVarReturnType = new TypeToken<QueryResultPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Executes Time Series Query in pages of results - Get Events, Get Series or Aggregate Series.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param parameters Time series query request body. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsContinuation Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryExecuteAsync(String apiVersion, QueryRequest parameters, String storeType, String xMsContinuation, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback<QueryResultPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryExecuteValidateBeforeCall(apiVersion, parameters, storeType, xMsContinuation, xMsClientRequestId, xMsClientSessionId, _callback);
        Type localVarReturnType = new TypeToken<QueryResultPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryGetAvailability
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetAvailabilityCall(String apiVersion, String storeType, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/availability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (storeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeType", storeType));
        }

        if (xMsClientRequestId != null) {
            localVarHeaderParams.put("x-ms-client-request-id", localVarApiClient.parameterToString(xMsClientRequestId));
        }

        if (xMsClientSessionId != null) {
            localVarHeaderParams.put("x-ms-client-session-id", localVarApiClient.parameterToString(xMsClientSessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryGetAvailabilityValidateBeforeCall(String apiVersion, String storeType, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryGetAvailability(Async)");
        }

        return queryGetAvailabilityCall(apiVersion, storeType, xMsClientRequestId, xMsClientSessionId, _callback);

    }

    /**
     * 
     * Returns the time range and distribution of event count over the event timestamp ($ts). This API can be used to provide landing experience of navigating to the environment.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @return AvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public AvailabilityResponse queryGetAvailability(String apiVersion, String storeType, String xMsClientRequestId, String xMsClientSessionId) throws ApiException {
        ApiResponse<AvailabilityResponse> localVarResp = queryGetAvailabilityWithHttpInfo(apiVersion, storeType, xMsClientRequestId, xMsClientSessionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the time range and distribution of event count over the event timestamp ($ts). This API can be used to provide landing experience of navigating to the environment.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @return ApiResponse&lt;AvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public ApiResponse<AvailabilityResponse> queryGetAvailabilityWithHttpInfo(String apiVersion, String storeType, String xMsClientRequestId, String xMsClientSessionId) throws ApiException {
        okhttp3.Call localVarCall = queryGetAvailabilityValidateBeforeCall(apiVersion, storeType, xMsClientRequestId, xMsClientSessionId, null);
        Type localVarReturnType = new TypeToken<AvailabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the time range and distribution of event count over the event timestamp ($ts). This API can be used to provide landing experience of navigating to the environment.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetAvailabilityAsync(String apiVersion, String storeType, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback<AvailabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryGetAvailabilityValidateBeforeCall(apiVersion, storeType, xMsClientRequestId, xMsClientSessionId, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryGetEventSchema
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param parameters Parameters to get event schema. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetEventSchemaCall(String apiVersion, GetEventSchemaRequest parameters, String storeType, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/eventSchema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (storeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeType", storeType));
        }

        if (xMsClientRequestId != null) {
            localVarHeaderParams.put("x-ms-client-request-id", localVarApiClient.parameterToString(xMsClientRequestId));
        }

        if (xMsClientSessionId != null) {
            localVarHeaderParams.put("x-ms-client-session-id", localVarApiClient.parameterToString(xMsClientSessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryGetEventSchemaValidateBeforeCall(String apiVersion, GetEventSchemaRequest parameters, String storeType, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryGetEventSchema(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling queryGetEventSchema(Async)");
        }

        return queryGetEventSchemaCall(apiVersion, parameters, storeType, xMsClientRequestId, xMsClientSessionId, _callback);

    }

    /**
     * 
     * Returns environment event schema for a given search span. Event schema is a set of property definitions. Event schema may not be contain all persisted properties when there are too many properties.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param parameters Parameters to get event schema. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @return EventSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public EventSchema queryGetEventSchema(String apiVersion, GetEventSchemaRequest parameters, String storeType, String xMsClientRequestId, String xMsClientSessionId) throws ApiException {
        ApiResponse<EventSchema> localVarResp = queryGetEventSchemaWithHttpInfo(apiVersion, parameters, storeType, xMsClientRequestId, xMsClientSessionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns environment event schema for a given search span. Event schema is a set of property definitions. Event schema may not be contain all persisted properties when there are too many properties.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param parameters Parameters to get event schema. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @return ApiResponse&lt;EventSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public ApiResponse<EventSchema> queryGetEventSchemaWithHttpInfo(String apiVersion, GetEventSchemaRequest parameters, String storeType, String xMsClientRequestId, String xMsClientSessionId) throws ApiException {
        okhttp3.Call localVarCall = queryGetEventSchemaValidateBeforeCall(apiVersion, parameters, storeType, xMsClientRequestId, xMsClientSessionId, null);
        Type localVarReturnType = new TypeToken<EventSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns environment event schema for a given search span. Event schema is a set of property definitions. Event schema may not be contain all persisted properties when there are too many properties.
     * @param apiVersion Version of the API to be used with the client request. Currently supported version is \&quot;2018-11-01-preview\&quot;. (required)
     * @param parameters Parameters to get event schema. (required)
     * @param storeType For the environments with warm store enabled, the query can be executed either on the &#39;WarmStore&#39; or &#39;ColdStore&#39;. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store. (optional)
     * @param xMsClientRequestId Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request. (optional)
     * @param xMsClientSessionId Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  * x-ms-request-id - Server-generated request ID. Can be used to contact support to investigate a request. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetEventSchemaAsync(String apiVersion, GetEventSchemaRequest parameters, String storeType, String xMsClientRequestId, String xMsClientSessionId, final ApiCallback<EventSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryGetEventSchemaValidateBeforeCall(apiVersion, parameters, storeType, xMsClientRequestId, xMsClientSessionId, _callback);
        Type localVarReturnType = new TypeToken<EventSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
