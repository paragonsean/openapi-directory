/*
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Highlighted text of time series instance to be displayed to the user. Highlighting inserts &lt;hit&gt; and &lt;/hit&gt; tags in the portions of text that matched the search string. Do not use any of the highlighted properties to do further API calls.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:22.763910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceHitHighlights {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HIERARCHY_IDS = "hierarchyIds";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_IDS)
  private List<UUID> hierarchyIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIERARCHY_NAMES = "hierarchyNames";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_NAMES)
  private List<String> hierarchyNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCE_FIELD_NAMES = "instanceFieldNames";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FIELD_NAMES)
  private List<String> instanceFieldNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCE_FIELD_VALUES = "instanceFieldValues";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FIELD_VALUES)
  private List<String> instanceFieldValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME_SERIES_ID = "timeSeriesId";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID)
  private List<String> timeSeriesId = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public InstanceHitHighlights() {
  }

  public InstanceHitHighlights(
     String description, 
     List<UUID> hierarchyIds, 
     List<String> hierarchyNames, 
     List<String> instanceFieldNames, 
     List<String> instanceFieldValues, 
     String name, 
     List<String> timeSeriesId, 
     String typeName
  ) {
    this();
    this.description = description;
    this.hierarchyIds = hierarchyIds;
    this.hierarchyNames = hierarchyNames;
    this.instanceFieldNames = instanceFieldNames;
    this.instanceFieldValues = instanceFieldValues;
    this.name = name;
    this.timeSeriesId = timeSeriesId;
    this.typeName = typeName;
  }

  /**
   * Highlighted description of time series instance. May be null.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * List of highlighted time series hierarchy IDs that time series instance belongs to. Cannot be used to lookup hierarchies. May be null.
   * @return hierarchyIds
   */
  @javax.annotation.Nullable
  public List<UUID> getHierarchyIds() {
    return hierarchyIds;
  }



  /**
   * List of highlighted time series hierarchy names that time series instance belongs to. Cannot be used to lookup hierarchies. May be null.
   * @return hierarchyNames
   */
  @javax.annotation.Nullable
  public List<String> getHierarchyNames() {
    return hierarchyNames;
  }



  /**
   * List of highlighted time series instance field names. May be null.
   * @return instanceFieldNames
   */
  @javax.annotation.Nullable
  public List<String> getInstanceFieldNames() {
    return instanceFieldNames;
  }



  /**
   * List of highlighted time series instance field values. May be null.
   * @return instanceFieldValues
   */
  @javax.annotation.Nullable
  public List<String> getInstanceFieldValues() {
    return instanceFieldValues;
  }



  /**
   * Highlighted name of time series instance. May be null.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * List of highlighted string values of Time Series ID for displaying. Cannot be used to lookup instance.
   * @return timeSeriesId
   */
  @javax.annotation.Nullable
  public List<String> getTimeSeriesId() {
    return timeSeriesId;
  }



  /**
   * Highlighted time series type name that this instance belongs to.
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceHitHighlights instanceHitHighlights = (InstanceHitHighlights) o;
    return Objects.equals(this.description, instanceHitHighlights.description) &&
        Objects.equals(this.hierarchyIds, instanceHitHighlights.hierarchyIds) &&
        Objects.equals(this.hierarchyNames, instanceHitHighlights.hierarchyNames) &&
        Objects.equals(this.instanceFieldNames, instanceHitHighlights.instanceFieldNames) &&
        Objects.equals(this.instanceFieldValues, instanceHitHighlights.instanceFieldValues) &&
        Objects.equals(this.name, instanceHitHighlights.name) &&
        Objects.equals(this.timeSeriesId, instanceHitHighlights.timeSeriesId) &&
        Objects.equals(this.typeName, instanceHitHighlights.typeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, hierarchyIds, hierarchyNames, instanceFieldNames, instanceFieldValues, name, timeSeriesId, typeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceHitHighlights {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hierarchyIds: ").append(toIndentedString(hierarchyIds)).append("\n");
    sb.append("    hierarchyNames: ").append(toIndentedString(hierarchyNames)).append("\n");
    sb.append("    instanceFieldNames: ").append(toIndentedString(instanceFieldNames)).append("\n");
    sb.append("    instanceFieldValues: ").append(toIndentedString(instanceFieldValues)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timeSeriesId: ").append(toIndentedString(timeSeriesId)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("hierarchyIds");
    openapiFields.add("hierarchyNames");
    openapiFields.add("instanceFieldNames");
    openapiFields.add("instanceFieldValues");
    openapiFields.add("name");
    openapiFields.add("timeSeriesId");
    openapiFields.add("typeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceHitHighlights
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceHitHighlights.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceHitHighlights is not found in the empty JSON string", InstanceHitHighlights.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceHitHighlights.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceHitHighlights` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hierarchyIds") != null && !jsonObj.get("hierarchyIds").isJsonNull() && !jsonObj.get("hierarchyIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchyIds` to be an array in the JSON string but got `%s`", jsonObj.get("hierarchyIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hierarchyNames") != null && !jsonObj.get("hierarchyNames").isJsonNull() && !jsonObj.get("hierarchyNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchyNames` to be an array in the JSON string but got `%s`", jsonObj.get("hierarchyNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instanceFieldNames") != null && !jsonObj.get("instanceFieldNames").isJsonNull() && !jsonObj.get("instanceFieldNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceFieldNames` to be an array in the JSON string but got `%s`", jsonObj.get("instanceFieldNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instanceFieldValues") != null && !jsonObj.get("instanceFieldValues").isJsonNull() && !jsonObj.get("instanceFieldValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceFieldValues` to be an array in the JSON string but got `%s`", jsonObj.get("instanceFieldValues").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("timeSeriesId") != null && !jsonObj.get("timeSeriesId").isJsonNull() && !jsonObj.get("timeSeriesId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesId` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeriesId").toString()));
      }
      if ((jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonNull()) && !jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceHitHighlights.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceHitHighlights' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceHitHighlights> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceHitHighlights.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceHitHighlights>() {
           @Override
           public void write(JsonWriter out, InstanceHitHighlights value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceHitHighlights read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceHitHighlights given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceHitHighlights
   * @throws IOException if the JSON string is invalid with respect to InstanceHitHighlights
   */
  public static InstanceHitHighlights fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceHitHighlights.class);
  }

  /**
   * Convert an instance of InstanceHitHighlights to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

