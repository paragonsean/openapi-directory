/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryResultPage.h
 *
 * A single page of query results. If query has not finished yet, a page will have continuation token set. In this case, to get the next page of results, send the same request again with continuation token parameter. If query has completed, the continuation token is null. It is also possible to get an empty page with only continuation token set when no query results have been computed yet. If paging has completed (continuation token is null), then timestamps and properties may be empty if there is no data to return.
 */

#ifndef OAIQueryResultPage_H
#define OAIQueryResultPage_H

#include <QJsonObject>

#include "OAIPropertyValues.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPropertyValues;

class OAIQueryResultPage : public OAIObject {
public:
    OAIQueryResultPage();
    OAIQueryResultPage(QString json);
    ~OAIQueryResultPage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContinuationToken() const;
    void setContinuationToken(const QString &continuation_token);
    bool is_continuation_token_Set() const;
    bool is_continuation_token_Valid() const;

    double getProgress() const;
    void setProgress(const double &progress);
    bool is_progress_Set() const;
    bool is_progress_Valid() const;

    QList<OAIPropertyValues> getProperties() const;
    void setProperties(const QList<OAIPropertyValues> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    QList<QDateTime> getTimestamps() const;
    void setTimestamps(const QList<QDateTime> &timestamps);
    bool is_timestamps_Set() const;
    bool is_timestamps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_continuation_token;
    bool m_continuation_token_isSet;
    bool m_continuation_token_isValid;

    double m_progress;
    bool m_progress_isSet;
    bool m_progress_isValid;

    QList<OAIPropertyValues> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    QList<QDateTime> m_timestamps;
    bool m_timestamps_isSet;
    bool m_timestamps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryResultPage)

#endif // OAIQueryResultPage_H
