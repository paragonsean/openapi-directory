/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstancesSuggestRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstancesSuggestRequest::OAIInstancesSuggestRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstancesSuggestRequest::OAIInstancesSuggestRequest() {
    this->initializeModel();
}

OAIInstancesSuggestRequest::~OAIInstancesSuggestRequest() {}

void OAIInstancesSuggestRequest::initializeModel() {

    m_search_string_isSet = false;
    m_search_string_isValid = false;

    m_take_isSet = false;
    m_take_isValid = false;
}

void OAIInstancesSuggestRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstancesSuggestRequest::fromJsonObject(QJsonObject json) {

    m_search_string_isValid = ::OpenAPI::fromJsonValue(m_search_string, json[QString("searchString")]);
    m_search_string_isSet = !json[QString("searchString")].isNull() && m_search_string_isValid;

    m_take_isValid = ::OpenAPI::fromJsonValue(m_take, json[QString("take")]);
    m_take_isSet = !json[QString("take")].isNull() && m_take_isValid;
}

QString OAIInstancesSuggestRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstancesSuggestRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_search_string_isSet) {
        obj.insert(QString("searchString"), ::OpenAPI::toJsonValue(m_search_string));
    }
    if (m_take_isSet) {
        obj.insert(QString("take"), ::OpenAPI::toJsonValue(m_take));
    }
    return obj;
}

QString OAIInstancesSuggestRequest::getSearchString() const {
    return m_search_string;
}
void OAIInstancesSuggestRequest::setSearchString(const QString &search_string) {
    m_search_string = search_string;
    m_search_string_isSet = true;
}

bool OAIInstancesSuggestRequest::is_search_string_Set() const{
    return m_search_string_isSet;
}

bool OAIInstancesSuggestRequest::is_search_string_Valid() const{
    return m_search_string_isValid;
}

qint32 OAIInstancesSuggestRequest::getTake() const {
    return m_take;
}
void OAIInstancesSuggestRequest::setTake(const qint32 &take) {
    m_take = take;
    m_take_isSet = true;
}

bool OAIInstancesSuggestRequest::is_take_Set() const{
    return m_take_isSet;
}

bool OAIInstancesSuggestRequest::is_take_Valid() const{
    return m_take_isValid;
}

bool OAIInstancesSuggestRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstancesSuggestRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_search_string_isValid && true;
}

} // namespace OpenAPI
