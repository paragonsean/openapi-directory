/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstancesRequestBatchGetOrDelete.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstancesRequestBatchGetOrDelete::OAIInstancesRequestBatchGetOrDelete(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstancesRequestBatchGetOrDelete::OAIInstancesRequestBatchGetOrDelete() {
    this->initializeModel();
}

OAIInstancesRequestBatchGetOrDelete::~OAIInstancesRequestBatchGetOrDelete() {}

void OAIInstancesRequestBatchGetOrDelete::initializeModel() {

    m_names_isSet = false;
    m_names_isValid = false;

    m_time_series_ids_isSet = false;
    m_time_series_ids_isValid = false;
}

void OAIInstancesRequestBatchGetOrDelete::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstancesRequestBatchGetOrDelete::fromJsonObject(QJsonObject json) {

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    if(json["timeSeriesIds"].isArray()){
        auto arr = json["timeSeriesIds"].toArray();
        m_time_series_ids_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIObject> item;
                m_time_series_ids_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_time_series_ids_isSet = !jval.isNull() && m_time_series_ids_isValid;
                m_time_series_ids.push_back(item);
            }
        }
    }
}

QString OAIInstancesRequestBatchGetOrDelete::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstancesRequestBatchGetOrDelete::asJsonObject() const {
    QJsonObject obj;
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_time_series_ids.size() > 0) {
        
        obj.insert(QString("timeSeriesIds"), toJsonValue(m_time_series_ids));
    }
    return obj;
}

QList<QString> OAIInstancesRequestBatchGetOrDelete::getNames() const {
    return m_names;
}
void OAIInstancesRequestBatchGetOrDelete::setNames(const QList<QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIInstancesRequestBatchGetOrDelete::is_names_Set() const{
    return m_names_isSet;
}

bool OAIInstancesRequestBatchGetOrDelete::is_names_Valid() const{
    return m_names_isValid;
}

QList<QList> OAIInstancesRequestBatchGetOrDelete::getTimeSeriesIds() const {
    return m_time_series_ids;
}
void OAIInstancesRequestBatchGetOrDelete::setTimeSeriesIds(const QList<QList> &time_series_ids) {
    m_time_series_ids = time_series_ids;
    m_time_series_ids_isSet = true;
}

bool OAIInstancesRequestBatchGetOrDelete::is_time_series_ids_Set() const{
    return m_time_series_ids_isSet;
}

bool OAIInstancesRequestBatchGetOrDelete::is_time_series_ids_Valid() const{
    return m_time_series_ids_isValid;
}

bool OAIInstancesRequestBatchGetOrDelete::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstancesRequestBatchGetOrDelete::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
