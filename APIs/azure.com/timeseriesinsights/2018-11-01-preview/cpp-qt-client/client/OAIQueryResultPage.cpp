/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResultPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResultPage::OAIQueryResultPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResultPage::OAIQueryResultPage() {
    this->initializeModel();
}

OAIQueryResultPage::~OAIQueryResultPage() {}

void OAIQueryResultPage::initializeModel() {

    m_continuation_token_isSet = false;
    m_continuation_token_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_timestamps_isSet = false;
    m_timestamps_isValid = false;
}

void OAIQueryResultPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResultPage::fromJsonObject(QJsonObject json) {

    m_continuation_token_isValid = ::OpenAPI::fromJsonValue(m_continuation_token, json[QString("continuationToken")]);
    m_continuation_token_isSet = !json[QString("continuationToken")].isNull() && m_continuation_token_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_timestamps_isValid = ::OpenAPI::fromJsonValue(m_timestamps, json[QString("timestamps")]);
    m_timestamps_isSet = !json[QString("timestamps")].isNull() && m_timestamps_isValid;
}

QString OAIQueryResultPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResultPage::asJsonObject() const {
    QJsonObject obj;
    if (m_continuation_token_isSet) {
        obj.insert(QString("continuationToken"), ::OpenAPI::toJsonValue(m_continuation_token));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_timestamps.size() > 0) {
        obj.insert(QString("timestamps"), ::OpenAPI::toJsonValue(m_timestamps));
    }
    return obj;
}

QString OAIQueryResultPage::getContinuationToken() const {
    return m_continuation_token;
}
void OAIQueryResultPage::setContinuationToken(const QString &continuation_token) {
    m_continuation_token = continuation_token;
    m_continuation_token_isSet = true;
}

bool OAIQueryResultPage::is_continuation_token_Set() const{
    return m_continuation_token_isSet;
}

bool OAIQueryResultPage::is_continuation_token_Valid() const{
    return m_continuation_token_isValid;
}

double OAIQueryResultPage::getProgress() const {
    return m_progress;
}
void OAIQueryResultPage::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIQueryResultPage::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIQueryResultPage::is_progress_Valid() const{
    return m_progress_isValid;
}

QList<OAIPropertyValues> OAIQueryResultPage::getProperties() const {
    return m_properties;
}
void OAIQueryResultPage::setProperties(const QList<OAIPropertyValues> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIQueryResultPage::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIQueryResultPage::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<QDateTime> OAIQueryResultPage::getTimestamps() const {
    return m_timestamps;
}
void OAIQueryResultPage::setTimestamps(const QList<QDateTime> &timestamps) {
    m_timestamps = timestamps;
    m_timestamps_isSet = true;
}

bool OAIQueryResultPage::is_timestamps_Set() const{
    return m_timestamps_isSet;
}

bool OAIQueryResultPage::is_timestamps_Valid() const{
    return m_timestamps_isValid;
}

bool OAIQueryResultPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_continuation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResultPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
