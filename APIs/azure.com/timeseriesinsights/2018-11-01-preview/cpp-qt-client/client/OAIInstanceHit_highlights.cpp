/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceHit_highlights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceHit_highlights::OAIInstanceHit_highlights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceHit_highlights::OAIInstanceHit_highlights() {
    this->initializeModel();
}

OAIInstanceHit_highlights::~OAIInstanceHit_highlights() {}

void OAIInstanceHit_highlights::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_hierarchy_ids_isSet = false;
    m_hierarchy_ids_isValid = false;

    m_hierarchy_names_isSet = false;
    m_hierarchy_names_isValid = false;

    m_instance_field_names_isSet = false;
    m_instance_field_names_isValid = false;

    m_instance_field_values_isSet = false;
    m_instance_field_values_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_series_id_isSet = false;
    m_time_series_id_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;
}

void OAIInstanceHit_highlights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceHit_highlights::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hierarchy_ids_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_ids, json[QString("hierarchyIds")]);
    m_hierarchy_ids_isSet = !json[QString("hierarchyIds")].isNull() && m_hierarchy_ids_isValid;

    m_hierarchy_names_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_names, json[QString("hierarchyNames")]);
    m_hierarchy_names_isSet = !json[QString("hierarchyNames")].isNull() && m_hierarchy_names_isValid;

    m_instance_field_names_isValid = ::OpenAPI::fromJsonValue(m_instance_field_names, json[QString("instanceFieldNames")]);
    m_instance_field_names_isSet = !json[QString("instanceFieldNames")].isNull() && m_instance_field_names_isValid;

    m_instance_field_values_isValid = ::OpenAPI::fromJsonValue(m_instance_field_values, json[QString("instanceFieldValues")]);
    m_instance_field_values_isSet = !json[QString("instanceFieldValues")].isNull() && m_instance_field_values_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_series_id_isValid = ::OpenAPI::fromJsonValue(m_time_series_id, json[QString("timeSeriesId")]);
    m_time_series_id_isSet = !json[QString("timeSeriesId")].isNull() && m_time_series_id_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;
}

QString OAIInstanceHit_highlights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceHit_highlights::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hierarchy_ids.size() > 0) {
        obj.insert(QString("hierarchyIds"), ::OpenAPI::toJsonValue(m_hierarchy_ids));
    }
    if (m_hierarchy_names.size() > 0) {
        obj.insert(QString("hierarchyNames"), ::OpenAPI::toJsonValue(m_hierarchy_names));
    }
    if (m_instance_field_names.size() > 0) {
        obj.insert(QString("instanceFieldNames"), ::OpenAPI::toJsonValue(m_instance_field_names));
    }
    if (m_instance_field_values.size() > 0) {
        obj.insert(QString("instanceFieldValues"), ::OpenAPI::toJsonValue(m_instance_field_values));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_series_id.size() > 0) {
        obj.insert(QString("timeSeriesId"), ::OpenAPI::toJsonValue(m_time_series_id));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    return obj;
}

QString OAIInstanceHit_highlights::getDescription() const {
    return m_description;
}
void OAIInstanceHit_highlights::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInstanceHit_highlights::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInstanceHit_highlights::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIInstanceHit_highlights::getHierarchyIds() const {
    return m_hierarchy_ids;
}
void OAIInstanceHit_highlights::setHierarchyIds(const QList<QString> &hierarchy_ids) {
    m_hierarchy_ids = hierarchy_ids;
    m_hierarchy_ids_isSet = true;
}

bool OAIInstanceHit_highlights::is_hierarchy_ids_Set() const{
    return m_hierarchy_ids_isSet;
}

bool OAIInstanceHit_highlights::is_hierarchy_ids_Valid() const{
    return m_hierarchy_ids_isValid;
}

QList<QString> OAIInstanceHit_highlights::getHierarchyNames() const {
    return m_hierarchy_names;
}
void OAIInstanceHit_highlights::setHierarchyNames(const QList<QString> &hierarchy_names) {
    m_hierarchy_names = hierarchy_names;
    m_hierarchy_names_isSet = true;
}

bool OAIInstanceHit_highlights::is_hierarchy_names_Set() const{
    return m_hierarchy_names_isSet;
}

bool OAIInstanceHit_highlights::is_hierarchy_names_Valid() const{
    return m_hierarchy_names_isValid;
}

QList<QString> OAIInstanceHit_highlights::getInstanceFieldNames() const {
    return m_instance_field_names;
}
void OAIInstanceHit_highlights::setInstanceFieldNames(const QList<QString> &instance_field_names) {
    m_instance_field_names = instance_field_names;
    m_instance_field_names_isSet = true;
}

bool OAIInstanceHit_highlights::is_instance_field_names_Set() const{
    return m_instance_field_names_isSet;
}

bool OAIInstanceHit_highlights::is_instance_field_names_Valid() const{
    return m_instance_field_names_isValid;
}

QList<QString> OAIInstanceHit_highlights::getInstanceFieldValues() const {
    return m_instance_field_values;
}
void OAIInstanceHit_highlights::setInstanceFieldValues(const QList<QString> &instance_field_values) {
    m_instance_field_values = instance_field_values;
    m_instance_field_values_isSet = true;
}

bool OAIInstanceHit_highlights::is_instance_field_values_Set() const{
    return m_instance_field_values_isSet;
}

bool OAIInstanceHit_highlights::is_instance_field_values_Valid() const{
    return m_instance_field_values_isValid;
}

QString OAIInstanceHit_highlights::getName() const {
    return m_name;
}
void OAIInstanceHit_highlights::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstanceHit_highlights::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstanceHit_highlights::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIInstanceHit_highlights::getTimeSeriesId() const {
    return m_time_series_id;
}
void OAIInstanceHit_highlights::setTimeSeriesId(const QList<QString> &time_series_id) {
    m_time_series_id = time_series_id;
    m_time_series_id_isSet = true;
}

bool OAIInstanceHit_highlights::is_time_series_id_Set() const{
    return m_time_series_id_isSet;
}

bool OAIInstanceHit_highlights::is_time_series_id_Valid() const{
    return m_time_series_id_isValid;
}

QString OAIInstanceHit_highlights::getTypeName() const {
    return m_type_name;
}
void OAIInstanceHit_highlights::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIInstanceHit_highlights::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIInstanceHit_highlights::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAIInstanceHit_highlights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_field_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_field_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceHit_highlights::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
