/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregateSeries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregateSeries::OAIAggregateSeries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregateSeries::OAIAggregateSeries() {
    this->initializeModel();
}

OAIAggregateSeries::~OAIAggregateSeries() {}

void OAIAggregateSeries::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_inline_variables_isSet = false;
    m_inline_variables_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_projected_variables_isSet = false;
    m_projected_variables_isValid = false;

    m_search_span_isSet = false;
    m_search_span_isValid = false;

    m_time_series_id_isSet = false;
    m_time_series_id_isValid = false;
}

void OAIAggregateSeries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregateSeries::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_inline_variables_isValid = ::OpenAPI::fromJsonValue(m_inline_variables, json[QString("inlineVariables")]);
    m_inline_variables_isSet = !json[QString("inlineVariables")].isNull() && m_inline_variables_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_projected_variables_isValid = ::OpenAPI::fromJsonValue(m_projected_variables, json[QString("projectedVariables")]);
    m_projected_variables_isSet = !json[QString("projectedVariables")].isNull() && m_projected_variables_isValid;

    m_search_span_isValid = ::OpenAPI::fromJsonValue(m_search_span, json[QString("searchSpan")]);
    m_search_span_isSet = !json[QString("searchSpan")].isNull() && m_search_span_isValid;

    m_time_series_id_isValid = ::OpenAPI::fromJsonValue(m_time_series_id, json[QString("timeSeriesId")]);
    m_time_series_id_isSet = !json[QString("timeSeriesId")].isNull() && m_time_series_id_isValid;
}

QString OAIAggregateSeries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregateSeries::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_inline_variables.size() > 0) {
        obj.insert(QString("inlineVariables"), ::OpenAPI::toJsonValue(m_inline_variables));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_projected_variables.size() > 0) {
        obj.insert(QString("projectedVariables"), ::OpenAPI::toJsonValue(m_projected_variables));
    }
    if (m_search_span.isSet()) {
        obj.insert(QString("searchSpan"), ::OpenAPI::toJsonValue(m_search_span));
    }
    if (m_time_series_id.size() > 0) {
        obj.insert(QString("timeSeriesId"), ::OpenAPI::toJsonValue(m_time_series_id));
    }
    return obj;
}

OAITsx OAIAggregateSeries::getFilter() const {
    return m_filter;
}
void OAIAggregateSeries::setFilter(const OAITsx &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIAggregateSeries::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIAggregateSeries::is_filter_Valid() const{
    return m_filter_isValid;
}

QMap<QString, OAIVariable> OAIAggregateSeries::getInlineVariables() const {
    return m_inline_variables;
}
void OAIAggregateSeries::setInlineVariables(const QMap<QString, OAIVariable> &inline_variables) {
    m_inline_variables = inline_variables;
    m_inline_variables_isSet = true;
}

bool OAIAggregateSeries::is_inline_variables_Set() const{
    return m_inline_variables_isSet;
}

bool OAIAggregateSeries::is_inline_variables_Valid() const{
    return m_inline_variables_isValid;
}

QString OAIAggregateSeries::getInterval() const {
    return m_interval;
}
void OAIAggregateSeries::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIAggregateSeries::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIAggregateSeries::is_interval_Valid() const{
    return m_interval_isValid;
}

QList<QString> OAIAggregateSeries::getProjectedVariables() const {
    return m_projected_variables;
}
void OAIAggregateSeries::setProjectedVariables(const QList<QString> &projected_variables) {
    m_projected_variables = projected_variables;
    m_projected_variables_isSet = true;
}

bool OAIAggregateSeries::is_projected_variables_Set() const{
    return m_projected_variables_isSet;
}

bool OAIAggregateSeries::is_projected_variables_Valid() const{
    return m_projected_variables_isValid;
}

OAIDateTimeRange OAIAggregateSeries::getSearchSpan() const {
    return m_search_span;
}
void OAIAggregateSeries::setSearchSpan(const OAIDateTimeRange &search_span) {
    m_search_span = search_span;
    m_search_span_isSet = true;
}

bool OAIAggregateSeries::is_search_span_Set() const{
    return m_search_span_isSet;
}

bool OAIAggregateSeries::is_search_span_Valid() const{
    return m_search_span_isValid;
}

QList<OAIObject> OAIAggregateSeries::getTimeSeriesId() const {
    return m_time_series_id;
}
void OAIAggregateSeries::setTimeSeriesId(const QList<OAIObject> &time_series_id) {
    m_time_series_id = time_series_id;
    m_time_series_id_isSet = true;
}

bool OAIAggregateSeries::is_time_series_id_Set() const{
    return m_time_series_id_isSet;
}

bool OAIAggregateSeries::is_time_series_id_Valid() const{
    return m_time_series_id_isValid;
}

bool OAIAggregateSeries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_span.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregateSeries::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interval_isValid && m_search_span_isValid && m_time_series_id_isValid && true;
}

} // namespace OpenAPI
