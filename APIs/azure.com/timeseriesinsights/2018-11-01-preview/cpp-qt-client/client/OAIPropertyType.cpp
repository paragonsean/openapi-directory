/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyType::OAIPropertyType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyType::OAIPropertyType() {
    this->initializeModel();
}

OAIPropertyType::~OAIPropertyType() {}

void OAIPropertyType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPropertyType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPropertyType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Bool", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyType::BOOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DateTime", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyType::DATETIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Double", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyType::DOUBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("String", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TimeSpan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyType::TIMESPAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Long", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyType::LONG;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPropertyType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPropertyType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPropertyType::BOOL:
            val = "Bool";
            break;
        case eOAIPropertyType::DATETIME:
            val = "DateTime";
            break;
        case eOAIPropertyType::DOUBLE:
            val = "Double";
            break;
        case eOAIPropertyType::STRING:
            val = "String";
            break;
        case eOAIPropertyType::TIMESPAN:
            val = "TimeSpan";
            break;
        case eOAIPropertyType::LONG:
            val = "Long";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPropertyType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPropertyType::eOAIPropertyType OAIPropertyType::getValue() const {
    return m_value;
}

void OAIPropertyType::setValue(const OAIPropertyType::eOAIPropertyType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPropertyType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPropertyType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
