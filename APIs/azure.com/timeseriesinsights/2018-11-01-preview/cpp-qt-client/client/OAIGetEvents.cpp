/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEvents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEvents::OAIGetEvents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEvents::OAIGetEvents() {
    this->initializeModel();
}

OAIGetEvents::~OAIGetEvents() {}

void OAIGetEvents::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_projected_properties_isSet = false;
    m_projected_properties_isValid = false;

    m_search_span_isSet = false;
    m_search_span_isValid = false;

    m_take_isSet = false;
    m_take_isValid = false;

    m_time_series_id_isSet = false;
    m_time_series_id_isValid = false;
}

void OAIGetEvents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEvents::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_projected_properties_isValid = ::OpenAPI::fromJsonValue(m_projected_properties, json[QString("projectedProperties")]);
    m_projected_properties_isSet = !json[QString("projectedProperties")].isNull() && m_projected_properties_isValid;

    m_search_span_isValid = ::OpenAPI::fromJsonValue(m_search_span, json[QString("searchSpan")]);
    m_search_span_isSet = !json[QString("searchSpan")].isNull() && m_search_span_isValid;

    m_take_isValid = ::OpenAPI::fromJsonValue(m_take, json[QString("take")]);
    m_take_isSet = !json[QString("take")].isNull() && m_take_isValid;

    m_time_series_id_isValid = ::OpenAPI::fromJsonValue(m_time_series_id, json[QString("timeSeriesId")]);
    m_time_series_id_isSet = !json[QString("timeSeriesId")].isNull() && m_time_series_id_isValid;
}

QString OAIGetEvents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEvents::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_projected_properties.size() > 0) {
        obj.insert(QString("projectedProperties"), ::OpenAPI::toJsonValue(m_projected_properties));
    }
    if (m_search_span.isSet()) {
        obj.insert(QString("searchSpan"), ::OpenAPI::toJsonValue(m_search_span));
    }
    if (m_take_isSet) {
        obj.insert(QString("take"), ::OpenAPI::toJsonValue(m_take));
    }
    if (m_time_series_id.size() > 0) {
        obj.insert(QString("timeSeriesId"), ::OpenAPI::toJsonValue(m_time_series_id));
    }
    return obj;
}

OAITsx OAIGetEvents::getFilter() const {
    return m_filter;
}
void OAIGetEvents::setFilter(const OAITsx &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetEvents::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetEvents::is_filter_Valid() const{
    return m_filter_isValid;
}

QList<OAIEventProperty> OAIGetEvents::getProjectedProperties() const {
    return m_projected_properties;
}
void OAIGetEvents::setProjectedProperties(const QList<OAIEventProperty> &projected_properties) {
    m_projected_properties = projected_properties;
    m_projected_properties_isSet = true;
}

bool OAIGetEvents::is_projected_properties_Set() const{
    return m_projected_properties_isSet;
}

bool OAIGetEvents::is_projected_properties_Valid() const{
    return m_projected_properties_isValid;
}

OAIDateTimeRange OAIGetEvents::getSearchSpan() const {
    return m_search_span;
}
void OAIGetEvents::setSearchSpan(const OAIDateTimeRange &search_span) {
    m_search_span = search_span;
    m_search_span_isSet = true;
}

bool OAIGetEvents::is_search_span_Set() const{
    return m_search_span_isSet;
}

bool OAIGetEvents::is_search_span_Valid() const{
    return m_search_span_isValid;
}

qint32 OAIGetEvents::getTake() const {
    return m_take;
}
void OAIGetEvents::setTake(const qint32 &take) {
    m_take = take;
    m_take_isSet = true;
}

bool OAIGetEvents::is_take_Set() const{
    return m_take_isSet;
}

bool OAIGetEvents::is_take_Valid() const{
    return m_take_isValid;
}

QList<OAIObject> OAIGetEvents::getTimeSeriesId() const {
    return m_time_series_id;
}
void OAIGetEvents::setTimeSeriesId(const QList<OAIObject> &time_series_id) {
    m_time_series_id = time_series_id;
    m_time_series_id_isSet = true;
}

bool OAIGetEvents::is_time_series_id_Set() const{
    return m_time_series_id_isSet;
}

bool OAIGetEvents::is_time_series_id_Valid() const{
    return m_time_series_id_isValid;
}

bool OAIGetEvents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_span.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEvents::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_search_span_isValid && m_time_series_id_isValid && true;
}

} // namespace OpenAPI
