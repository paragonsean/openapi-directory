/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesTypeOrError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesTypeOrError::OAITimeSeriesTypeOrError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesTypeOrError::OAITimeSeriesTypeOrError() {
    this->initializeModel();
}

OAITimeSeriesTypeOrError::~OAITimeSeriesTypeOrError() {}

void OAITimeSeriesTypeOrError::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_time_series_type_isSet = false;
    m_time_series_type_isValid = false;
}

void OAITimeSeriesTypeOrError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesTypeOrError::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_time_series_type_isValid = ::OpenAPI::fromJsonValue(m_time_series_type, json[QString("timeSeriesType")]);
    m_time_series_type_isSet = !json[QString("timeSeriesType")].isNull() && m_time_series_type_isValid;
}

QString OAITimeSeriesTypeOrError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesTypeOrError::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_time_series_type.isSet()) {
        obj.insert(QString("timeSeriesType"), ::OpenAPI::toJsonValue(m_time_series_type));
    }
    return obj;
}

OAITsiErrorBody OAITimeSeriesTypeOrError::getError() const {
    return m_error;
}
void OAITimeSeriesTypeOrError::setError(const OAITsiErrorBody &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAITimeSeriesTypeOrError::is_error_Set() const{
    return m_error_isSet;
}

bool OAITimeSeriesTypeOrError::is_error_Valid() const{
    return m_error_isValid;
}

OAITimeSeriesType OAITimeSeriesTypeOrError::getTimeSeriesType() const {
    return m_time_series_type;
}
void OAITimeSeriesTypeOrError::setTimeSeriesType(const OAITimeSeriesType &time_series_type) {
    m_time_series_type = time_series_type;
    m_time_series_type_isSet = true;
}

bool OAITimeSeriesTypeOrError::is_time_series_type_Set() const{
    return m_time_series_type_isSet;
}

bool OAITimeSeriesTypeOrError::is_time_series_type_Valid() const{
    return m_time_series_type_isValid;
}

bool OAITimeSeriesTypeOrError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesTypeOrError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
