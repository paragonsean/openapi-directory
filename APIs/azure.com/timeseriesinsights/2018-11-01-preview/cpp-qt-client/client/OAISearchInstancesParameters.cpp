/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchInstancesParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchInstancesParameters::OAISearchInstancesParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchInstancesParameters::OAISearchInstancesParameters() {
    this->initializeModel();
}

OAISearchInstancesParameters::~OAISearchInstancesParameters() {}

void OAISearchInstancesParameters::initializeModel() {

    m_highlights_isSet = false;
    m_highlights_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_recursive_isSet = false;
    m_recursive_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void OAISearchInstancesParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchInstancesParameters::fromJsonObject(QJsonObject json) {

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("highlights")]);
    m_highlights_isSet = !json[QString("highlights")].isNull() && m_highlights_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_recursive_isValid = ::OpenAPI::fromJsonValue(m_recursive, json[QString("recursive")]);
    m_recursive_isSet = !json[QString("recursive")].isNull() && m_recursive_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString OAISearchInstancesParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchInstancesParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_highlights_isSet) {
        obj.insert(QString("highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_recursive_isSet) {
        obj.insert(QString("recursive"), ::OpenAPI::toJsonValue(m_recursive));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    return obj;
}

bool OAISearchInstancesParameters::isHighlights() const {
    return m_highlights;
}
void OAISearchInstancesParameters::setHighlights(const bool &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAISearchInstancesParameters::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAISearchInstancesParameters::is_highlights_Valid() const{
    return m_highlights_isValid;
}

qint32 OAISearchInstancesParameters::getPageSize() const {
    return m_page_size;
}
void OAISearchInstancesParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISearchInstancesParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISearchInstancesParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAISearchInstancesParameters::isRecursive() const {
    return m_recursive;
}
void OAISearchInstancesParameters::setRecursive(const bool &recursive) {
    m_recursive = recursive;
    m_recursive_isSet = true;
}

bool OAISearchInstancesParameters::is_recursive_Set() const{
    return m_recursive_isSet;
}

bool OAISearchInstancesParameters::is_recursive_Valid() const{
    return m_recursive_isValid;
}

OAIInstancesSortParameter OAISearchInstancesParameters::getSort() const {
    return m_sort;
}
void OAISearchInstancesParameters::setSort(const OAIInstancesSortParameter &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAISearchInstancesParameters::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAISearchInstancesParameters::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAISearchInstancesParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_highlights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchInstancesParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
