/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoricalVariable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoricalVariable::OAICategoricalVariable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoricalVariable::OAICategoricalVariable() {
    this->initializeModel();
}

OAICategoricalVariable::~OAICategoricalVariable() {}

void OAICategoricalVariable::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_default_category_isSet = false;
    m_default_category_isValid = false;

    m_interpolation_isSet = false;
    m_interpolation_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICategoricalVariable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoricalVariable::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_default_category_isValid = ::OpenAPI::fromJsonValue(m_default_category, json[QString("defaultCategory")]);
    m_default_category_isSet = !json[QString("defaultCategory")].isNull() && m_default_category_isValid;

    m_interpolation_isValid = ::OpenAPI::fromJsonValue(m_interpolation, json[QString("interpolation")]);
    m_interpolation_isSet = !json[QString("interpolation")].isNull() && m_interpolation_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICategoricalVariable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoricalVariable::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_default_category.isSet()) {
        obj.insert(QString("defaultCategory"), ::OpenAPI::toJsonValue(m_default_category));
    }
    if (m_interpolation.isSet()) {
        obj.insert(QString("interpolation"), ::OpenAPI::toJsonValue(m_interpolation));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAITsx OAICategoricalVariable::getFilter() const {
    return m_filter;
}
void OAICategoricalVariable::setFilter(const OAITsx &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAICategoricalVariable::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAICategoricalVariable::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAICategoricalVariable::getKind() const {
    return m_kind;
}
void OAICategoricalVariable::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICategoricalVariable::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICategoricalVariable::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAITimeSeriesAggregateCategory> OAICategoricalVariable::getCategories() const {
    return m_categories;
}
void OAICategoricalVariable::setCategories(const QList<OAITimeSeriesAggregateCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAICategoricalVariable::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAICategoricalVariable::is_categories_Valid() const{
    return m_categories_isValid;
}

OAITimeSeriesDefaultCategory OAICategoricalVariable::getDefaultCategory() const {
    return m_default_category;
}
void OAICategoricalVariable::setDefaultCategory(const OAITimeSeriesDefaultCategory &default_category) {
    m_default_category = default_category;
    m_default_category_isSet = true;
}

bool OAICategoricalVariable::is_default_category_Set() const{
    return m_default_category_isSet;
}

bool OAICategoricalVariable::is_default_category_Valid() const{
    return m_default_category_isValid;
}

OAIInterpolation OAICategoricalVariable::getInterpolation() const {
    return m_interpolation;
}
void OAICategoricalVariable::setInterpolation(const OAIInterpolation &interpolation) {
    m_interpolation = interpolation;
    m_interpolation_isSet = true;
}

bool OAICategoricalVariable::is_interpolation_Set() const{
    return m_interpolation_isSet;
}

bool OAICategoricalVariable::is_interpolation_Valid() const{
    return m_interpolation_isValid;
}

OAITsx OAICategoricalVariable::getValue() const {
    return m_value;
}
void OAICategoricalVariable::setValue(const OAITsx &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICategoricalVariable::is_value_Set() const{
    return m_value_isSet;
}

bool OAICategoricalVariable::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICategoricalVariable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpolation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoricalVariable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
