/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AvailabilityResponse from '../model/AvailabilityResponse';
import EventSchema from '../model/EventSchema';
import GetEventSchemaRequest from '../model/GetEventSchemaRequest';
import QueryRequest from '../model/QueryRequest';
import QueryResultPage from '../model/QueryResultPage';
import TsiError from '../model/TsiError';

/**
* Query service.
* @module api/QueryApi
* @version 2018-11-01-preview
*/
export default class QueryApi {

    /**
    * Constructs a new QueryApi. 
    * @alias module:api/QueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryExecute operation.
     * @callback module:api/QueryApi~queryExecuteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryResultPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes Time Series Query in pages of results - Get Events, Get Series or Aggregate Series.
     * @param {String} apiVersion Version of the API to be used with the client request. Currently supported version is \"2018-11-01-preview\".
     * @param {module:model/QueryRequest} parameters Time series query request body.
     * @param {Object} opts Optional parameters
     * @param {String} [storeType] For the environments with warm store enabled, the query can be executed either on the 'WarmStore' or 'ColdStore'. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store.
     * @param {String} [xMsContinuation] Continuation token from previous page of results to retrieve the next page of the results in calls that support pagination. To get the first page results, specify null continuation token as parameter value. Returned continuation token is null if all results have been returned, and there is no next page of results.
     * @param {String} [xMsClientRequestId] Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
     * @param {String} [xMsClientSessionId] Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
     * @param {module:api/QueryApi~queryExecuteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryResultPage}
     */
    queryExecute(apiVersion, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryExecute");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling queryExecute");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'storeType': opts['storeType']
      };
      let headerParams = {
        'x-ms-continuation': opts['xMsContinuation'],
        'x-ms-client-request-id': opts['xMsClientRequestId'],
        'x-ms-client-session-id': opts['xMsClientSessionId']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryResultPage;
      return this.apiClient.callApi(
        '/timeseries/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryGetAvailability operation.
     * @callback module:api/QueryApi~queryGetAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the time range and distribution of event count over the event timestamp ($ts). This API can be used to provide landing experience of navigating to the environment.
     * @param {String} apiVersion Version of the API to be used with the client request. Currently supported version is \"2018-11-01-preview\".
     * @param {Object} opts Optional parameters
     * @param {String} [storeType] For the environments with warm store enabled, the query can be executed either on the 'WarmStore' or 'ColdStore'. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store.
     * @param {String} [xMsClientRequestId] Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
     * @param {String} [xMsClientSessionId] Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
     * @param {module:api/QueryApi~queryGetAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailabilityResponse}
     */
    queryGetAvailability(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryGetAvailability");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'storeType': opts['storeType']
      };
      let headerParams = {
        'x-ms-client-request-id': opts['xMsClientRequestId'],
        'x-ms-client-session-id': opts['xMsClientSessionId']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AvailabilityResponse;
      return this.apiClient.callApi(
        '/availability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryGetEventSchema operation.
     * @callback module:api/QueryApi~queryGetEventSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns environment event schema for a given search span. Event schema is a set of property definitions. Event schema may not be contain all persisted properties when there are too many properties.
     * @param {String} apiVersion Version of the API to be used with the client request. Currently supported version is \"2018-11-01-preview\".
     * @param {module:model/GetEventSchemaRequest} parameters Parameters to get event schema.
     * @param {Object} opts Optional parameters
     * @param {String} [storeType] For the environments with warm store enabled, the query can be executed either on the 'WarmStore' or 'ColdStore'. This parameter in the query defines which store the query should be executed on. If not defined, the query will be executed on the cold store.
     * @param {String} [xMsClientRequestId] Optional client request ID. Service records this value. Allows the service to trace operation across services, and allows the customer to contact support regarding a particular request.
     * @param {String} [xMsClientSessionId] Optional client session ID. Service records this value. Allows the service to trace a group of related operations across services, and allows the customer to contact support regarding a particular group of requests.
     * @param {module:api/QueryApi~queryGetEventSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSchema}
     */
    queryGetEventSchema(apiVersion, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryGetEventSchema");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling queryGetEventSchema");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'storeType': opts['storeType']
      };
      let headerParams = {
        'x-ms-client-request-id': opts['xMsClientRequestId'],
        'x-ms-client-session-id': opts['xMsClientSessionId']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSchema;
      return this.apiClient.callApi(
        '/eventSchema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
