/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tsx from './Tsx';
import Variable from './Variable';

/**
 * The AggregateVariable model module.
 * @module model/AggregateVariable
 * @version 2018-11-01-preview
 */
class AggregateVariable {
    /**
     * Constructs a new <code>AggregateVariable</code>.
     * Aggregate variable represents any aggregation calculation. Aggregate Variables does not support interpolation.
     * @alias module:model/AggregateVariable
     * @extends module:model/Variable
     * @implements module:model/Variable
     * @param kind {String} Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.
     */
    constructor(kind) { 
        Variable.initialize(this, kind);
        AggregateVariable.initialize(this, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind) { 
    }

    /**
     * Constructs a <code>AggregateVariable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggregateVariable} obj Optional instance to populate.
     * @return {module:model/AggregateVariable} The populated <code>AggregateVariable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggregateVariable();
            Variable.constructFromObject(data, obj);
            Variable.constructFromObject(data, obj);

            if (data.hasOwnProperty('aggregation')) {
                obj['aggregation'] = Tsx.constructFromObject(data['aggregation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggregateVariable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggregateVariable</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AggregateVariable.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `aggregation`
        if (data['aggregation']) { // data not null
          Tsx.validateJSON(data['aggregation']);
        }

        return true;
    }


}

AggregateVariable.RequiredProperties = ["kind"];

/**
 * @member {module:model/Tsx} aggregation
 */
AggregateVariable.prototype['aggregation'] = undefined;


// Implement Variable interface:
/**
 * @member {module:model/Tsx} filter
 */
Variable.prototype['filter'] = undefined;
/**
 * Allowed \"kind\" values are - \"numeric\" or \"aggregate\". While \"numeric\" allows you to specify value of the reconstructed signal and the expression to aggregate them, the \"aggregate\" kind lets you directly aggregate on the event properties without specifying value.
 * @member {String} kind
 */
Variable.prototype['kind'] = undefined;




export default AggregateVariable;

