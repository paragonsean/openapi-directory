/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateTimeRange from './DateTimeRange';
import Tsx from './Tsx';
import Variable from './Variable';

/**
 * The AggregateSeries model module.
 * @module model/AggregateSeries
 * @version 2018-11-01-preview
 */
class AggregateSeries {
    /**
     * Constructs a new <code>AggregateSeries</code>.
     * Aggregate Series query. Allows to calculate an aggregated time series from events for a given Time Series ID and search span.
     * @alias module:model/AggregateSeries
     * @param interval {String} Interval size is specified in ISO-8601 duration format. All intervals are the same size. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \"PT1M\", 1 millisecond is \"PT0.001S\". For more information, see https://www.w3.org/TR/xmlschema-2/#duration
     * @param searchSpan {module:model/DateTimeRange} 
     * @param timeSeriesId {Array.<Object>} A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
     */
    constructor(interval, searchSpan, timeSeriesId) { 
        
        AggregateSeries.initialize(this, interval, searchSpan, timeSeriesId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, interval, searchSpan, timeSeriesId) { 
        obj['interval'] = interval;
        obj['searchSpan'] = searchSpan;
        obj['timeSeriesId'] = timeSeriesId;
    }

    /**
     * Constructs a <code>AggregateSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggregateSeries} obj Optional instance to populate.
     * @return {module:model/AggregateSeries} The populated <code>AggregateSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggregateSeries();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = Tsx.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('inlineVariables')) {
                obj['inlineVariables'] = ApiClient.convertToType(data['inlineVariables'], {'String': Variable});
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('projectedVariables')) {
                obj['projectedVariables'] = ApiClient.convertToType(data['projectedVariables'], ['String']);
            }
            if (data.hasOwnProperty('searchSpan')) {
                obj['searchSpan'] = DateTimeRange.constructFromObject(data['searchSpan']);
            }
            if (data.hasOwnProperty('timeSeriesId')) {
                obj['timeSeriesId'] = ApiClient.convertToType(data['timeSeriesId'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggregateSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggregateSeries</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AggregateSeries.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          Tsx.validateJSON(data['filter']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectedVariables'])) {
            throw new Error("Expected the field `projectedVariables` to be an array in the JSON data but got " + data['projectedVariables']);
        }
        // validate the optional field `searchSpan`
        if (data['searchSpan']) { // data not null
          DateTimeRange.validateJSON(data['searchSpan']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['timeSeriesId'])) {
            throw new Error("Expected the field `timeSeriesId` to be an array in the JSON data but got " + data['timeSeriesId']);
        }

        return true;
    }


}

AggregateSeries.RequiredProperties = ["interval", "searchSpan", "timeSeriesId"];

/**
 * @member {module:model/Tsx} filter
 */
AggregateSeries.prototype['filter'] = undefined;

/**
 * This allows the user the optionally define inline-variables apart from the ones already defined in the model. When the inline variable names have the same name as the model, the inline variable definition takes precedence. Can be null.
 * @member {Object.<String, module:model/Variable>} inlineVariables
 */
AggregateSeries.prototype['inlineVariables'] = undefined;

/**
 * Interval size is specified in ISO-8601 duration format. All intervals are the same size. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \"PT1M\", 1 millisecond is \"PT0.001S\". For more information, see https://www.w3.org/TR/xmlschema-2/#duration
 * @member {String} interval
 */
AggregateSeries.prototype['interval'] = undefined;

/**
 * This allows the user to optionally select the variables that needs to be projected. When it is null or not set, all the variables from inlineVariables and model are returned. Can be null.
 * @member {Array.<String>} projectedVariables
 */
AggregateSeries.prototype['projectedVariables'] = undefined;

/**
 * @member {module:model/DateTimeRange} searchSpan
 */
AggregateSeries.prototype['searchSpan'] = undefined;

/**
 * A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
 * @member {Array.<Object>} timeSeriesId
 */
AggregateSeries.prototype['timeSeriesId'] = undefined;






export default AggregateSeries;

