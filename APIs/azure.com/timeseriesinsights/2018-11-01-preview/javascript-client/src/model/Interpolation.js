/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InterpolationBoundary from './InterpolationBoundary';

/**
 * The Interpolation model module.
 * @module model/Interpolation
 * @version 2018-11-01-preview
 */
class Interpolation {
    /**
     * Constructs a new <code>Interpolation</code>.
     * The interpolation operation to be performed on the raw data points. Currently, only sampling of interpolated time series is allowed. Allowed aggregate function - eg: left($value). Can be null if no interpolation needs to be applied.
     * @alias module:model/Interpolation
     */
    constructor() { 
        
        Interpolation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Interpolation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Interpolation} obj Optional instance to populate.
     * @return {module:model/Interpolation} The populated <code>Interpolation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Interpolation();

            if (data.hasOwnProperty('boundary')) {
                obj['boundary'] = InterpolationBoundary.constructFromObject(data['boundary']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Interpolation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Interpolation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `boundary`
        if (data['boundary']) { // data not null
          InterpolationBoundary.validateJSON(data['boundary']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * @member {module:model/InterpolationBoundary} boundary
 */
Interpolation.prototype['boundary'] = undefined;

/**
 * The type of interpolation technique : \"Linear\" or \"Step\".
 * @member {module:model/Interpolation.KindEnum} kind
 */
Interpolation.prototype['kind'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Interpolation['KindEnum'] = {

    /**
     * value: "Linear"
     * @const
     */
    "Linear": "Linear",

    /**
     * value: "Step"
     * @const
     */
    "Step": "Step"
};



export default Interpolation;

