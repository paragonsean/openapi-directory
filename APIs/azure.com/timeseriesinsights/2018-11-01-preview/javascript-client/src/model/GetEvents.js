/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateTimeRange from './DateTimeRange';
import EventProperty from './EventProperty';
import Tsx from './Tsx';

/**
 * The GetEvents model module.
 * @module model/GetEvents
 * @version 2018-11-01-preview
 */
class GetEvents {
    /**
     * Constructs a new <code>GetEvents</code>.
     * Get Events query. Allows to retrieve raw events for a given Time Series ID and search span.
     * @alias module:model/GetEvents
     * @param searchSpan {module:model/DateTimeRange} 
     * @param timeSeriesId {Array.<Object>} A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
     */
    constructor(searchSpan, timeSeriesId) { 
        
        GetEvents.initialize(this, searchSpan, timeSeriesId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, searchSpan, timeSeriesId) { 
        obj['searchSpan'] = searchSpan;
        obj['timeSeriesId'] = timeSeriesId;
    }

    /**
     * Constructs a <code>GetEvents</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetEvents} obj Optional instance to populate.
     * @return {module:model/GetEvents} The populated <code>GetEvents</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetEvents();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = Tsx.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('projectedProperties')) {
                obj['projectedProperties'] = ApiClient.convertToType(data['projectedProperties'], [EventProperty]);
            }
            if (data.hasOwnProperty('searchSpan')) {
                obj['searchSpan'] = DateTimeRange.constructFromObject(data['searchSpan']);
            }
            if (data.hasOwnProperty('take')) {
                obj['take'] = ApiClient.convertToType(data['take'], 'Number');
            }
            if (data.hasOwnProperty('timeSeriesId')) {
                obj['timeSeriesId'] = ApiClient.convertToType(data['timeSeriesId'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetEvents</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetEvents</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetEvents.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          Tsx.validateJSON(data['filter']);
        }
        if (data['projectedProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['projectedProperties'])) {
                throw new Error("Expected the field `projectedProperties` to be an array in the JSON data but got " + data['projectedProperties']);
            }
            // validate the optional field `projectedProperties` (array)
            for (const item of data['projectedProperties']) {
                EventProperty.validateJSON(item);
            };
        }
        // validate the optional field `searchSpan`
        if (data['searchSpan']) { // data not null
          DateTimeRange.validateJSON(data['searchSpan']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['timeSeriesId'])) {
            throw new Error("Expected the field `timeSeriesId` to be an array in the JSON data but got " + data['timeSeriesId']);
        }

        return true;
    }


}

GetEvents.RequiredProperties = ["searchSpan", "timeSeriesId"];

/**
 * @member {module:model/Tsx} filter
 */
GetEvents.prototype['filter'] = undefined;

/**
 * Projected properties is an array of properties which you want to project. These properties must appear in the events; otherwise, they are not returned.
 * @member {Array.<module:model/EventProperty>} projectedProperties
 */
GetEvents.prototype['projectedProperties'] = undefined;

/**
 * @member {module:model/DateTimeRange} searchSpan
 */
GetEvents.prototype['searchSpan'] = undefined;

/**
 * Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.
 * @member {Number} take
 */
GetEvents.prototype['take'] = undefined;

/**
 * A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
 * @member {Array.<Object>} timeSeriesId
 */
GetEvents.prototype['timeSeriesId'] = undefined;






export default GetEvents;

