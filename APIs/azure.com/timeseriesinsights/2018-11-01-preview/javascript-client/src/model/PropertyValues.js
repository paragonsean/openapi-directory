/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventProperty from './EventProperty';
import PropertyType from './PropertyType';

/**
 * The PropertyValues model module.
 * @module model/PropertyValues
 * @version 2018-11-01-preview
 */
class PropertyValues {
    /**
     * Constructs a new <code>PropertyValues</code>.
     * Values of a single property corresponding to the timestamps. May contain nulls. Type of values matches the type of property.
     * @alias module:model/PropertyValues
     * @implements module:model/EventProperty
     */
    constructor() { 
        EventProperty.initialize(this);
        PropertyValues.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropertyValues</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyValues} obj Optional instance to populate.
     * @return {module:model/PropertyValues} The populated <code>PropertyValues</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyValues();
            EventProperty.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = PropertyType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyValues</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyValues</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * The name of the property.
 * @member {String} name
 */
PropertyValues.prototype['name'] = undefined;

/**
 * @member {module:model/PropertyType} type
 */
PropertyValues.prototype['type'] = undefined;

/**
 * Values of a single property corresponding to the timestamps. May contain nulls. Type of values matches the type of property.
 * @member {Array.<Object>} values
 */
PropertyValues.prototype['values'] = undefined;


// Implement EventProperty interface:
/**
 * The name of the property.
 * @member {String} name
 */
EventProperty.prototype['name'] = undefined;
/**
 * @member {module:model/PropertyType} type
 */
EventProperty.prototype['type'] = undefined;




export default PropertyValues;

