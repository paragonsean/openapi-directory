/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstancesSortParameter from './InstancesSortParameter';

/**
 * The SearchInstancesParameters model module.
 * @module model/SearchInstancesParameters
 * @version 2018-11-01-preview
 */
class SearchInstancesParameters {
    /**
     * Constructs a new <code>SearchInstancesParameters</code>.
     * Parameters of how to return time series instances by search instances call.
     * @alias module:model/SearchInstancesParameters
     */
    constructor() { 
        
        SearchInstancesParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchInstancesParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchInstancesParameters} obj Optional instance to populate.
     * @return {module:model/SearchInstancesParameters} The populated <code>SearchInstancesParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchInstancesParameters();

            if (data.hasOwnProperty('highlights')) {
                obj['highlights'] = ApiClient.convertToType(data['highlights'], 'Boolean');
            }
            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'Number');
            }
            if (data.hasOwnProperty('recursive')) {
                obj['recursive'] = ApiClient.convertToType(data['recursive'], 'Boolean');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = InstancesSortParameter.constructFromObject(data['sort']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchInstancesParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchInstancesParameters</code>.
     */
    static validateJSON(data) {
        // validate the optional field `sort`
        if (data['sort']) { // data not null
          InstancesSortParameter.validateJSON(data['sort']);
        }

        return true;
    }


}



/**
 * Definition of highlighted search results or not. When it is set to 'true', the highlighted search results are returned. When it is set to 'false', the highlighted search results are not returned. Default is 'true'.
 * @member {Boolean} highlights
 */
SearchInstancesParameters.prototype['highlights'] = undefined;

/**
 * Maximum number of instances expected in each page of the result. Defaults to 10 when not set. Ranges from 1 to 100. If there are results beyond the page size, the user can use the continuation token to fetch the next page.
 * @member {Number} pageSize
 */
SearchInstancesParameters.prototype['pageSize'] = undefined;

/**
 * Definition of which instances are returned. When recursive is set to 'true', all instances that have the path that starts with path the path parameter are returned. When recursive is set to 'false', only instances that have the path that exactly matches the path parameter are returned. Using recursive search allows to implement search user experience, while using non-recursive search allows to implement navigation experience. Optional, default is 'true'.
 * @member {Boolean} recursive
 */
SearchInstancesParameters.prototype['recursive'] = undefined;

/**
 * @member {module:model/InstancesSortParameter} sort
 */
SearchInstancesParameters.prototype['sort'] = undefined;






export default SearchInstancesParameters;

