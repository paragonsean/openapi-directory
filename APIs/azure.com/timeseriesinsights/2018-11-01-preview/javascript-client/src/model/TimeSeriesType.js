/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeSeriesType model module.
 * @module model/TimeSeriesType
 * @version 2018-11-01-preview
 */
class TimeSeriesType {
    /**
     * Constructs a new <code>TimeSeriesType</code>.
     * Time series type defines variables or formulas for doing computation on events associated with time series instances. Each time series instance is associated with exactly one type. A type can have one or more variables. For example, a time series instance might be of type Temperature Sensor, which consists of the variables avg temperature, min temperature, and max temperature.
     * @alias module:model/TimeSeriesType
     * @param name {String} User-given unique name for the type. Mutable, not null.
     * @param variables {Object} Different variables associated with the type. Not empty, not null.
     */
    constructor(name, variables) { 
        
        TimeSeriesType.initialize(this, name, variables);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, variables) { 
        obj['name'] = name;
        obj['variables'] = variables;
    }

    /**
     * Constructs a <code>TimeSeriesType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesType} obj Optional instance to populate.
     * @return {module:model/TimeSeriesType} The populated <code>TimeSeriesType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesType();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeSeriesType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

TimeSeriesType.RequiredProperties = ["name", "variables"];

/**
 * Description of the type. May be null.
 * @member {String} description
 */
TimeSeriesType.prototype['description'] = undefined;

/**
 * Unique type identifier that is immutable. Can be null on create or update requests, and then server generates the ID. Not null on get and delete operations.
 * @member {String} id
 */
TimeSeriesType.prototype['id'] = undefined;

/**
 * User-given unique name for the type. Mutable, not null.
 * @member {String} name
 */
TimeSeriesType.prototype['name'] = undefined;

/**
 * Different variables associated with the type. Not empty, not null.
 * @member {Object} variables
 */
TimeSeriesType.prototype['variables'] = undefined;






export default TimeSeriesType;

