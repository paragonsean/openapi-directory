/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeSeriesInstance model module.
 * @module model/TimeSeriesInstance
 * @version 2018-11-01-preview
 */
class TimeSeriesInstance {
    /**
     * Constructs a new <code>TimeSeriesInstance</code>.
     * Time series instances are the time series themselves. In most cases, the deviceId or assetId is the unique identifier of the asset in the environment. Instances have descriptive information associated with them called instance fields. At a minimum, instance fields include hierarchy information. They can also include useful, descriptive data like the manufacturer, operator, or the last service date.
     * @alias module:model/TimeSeriesInstance
     * @param timeSeriesId {Array.<Object>} A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
     * @param typeId {String} This represents the type that this instance belongs to. Never null.
     */
    constructor(timeSeriesId, typeId) { 
        
        TimeSeriesInstance.initialize(this, timeSeriesId, typeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timeSeriesId, typeId) { 
        obj['timeSeriesId'] = timeSeriesId;
        obj['typeId'] = typeId;
    }

    /**
     * Constructs a <code>TimeSeriesInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesInstance} obj Optional instance to populate.
     * @return {module:model/TimeSeriesInstance} The populated <code>TimeSeriesInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesInstance();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hierarchyIds')) {
                obj['hierarchyIds'] = ApiClient.convertToType(data['hierarchyIds'], ['String']);
            }
            if (data.hasOwnProperty('instanceFields')) {
                obj['instanceFields'] = ApiClient.convertToType(data['instanceFields'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('timeSeriesId')) {
                obj['timeSeriesId'] = ApiClient.convertToType(data['timeSeriesId'], [Object]);
            }
            if (data.hasOwnProperty('typeId')) {
                obj['typeId'] = ApiClient.convertToType(data['typeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeSeriesInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hierarchyIds'])) {
            throw new Error("Expected the field `hierarchyIds` to be an array in the JSON data but got " + data['hierarchyIds']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['timeSeriesId'])) {
            throw new Error("Expected the field `timeSeriesId` to be an array in the JSON data but got " + data['timeSeriesId']);
        }
        // ensure the json data is a string
        if (data['typeId'] && !(typeof data['typeId'] === 'string' || data['typeId'] instanceof String)) {
            throw new Error("Expected the field `typeId` to be a primitive type in the JSON string but got " + data['typeId']);
        }

        return true;
    }


}

TimeSeriesInstance.RequiredProperties = ["timeSeriesId", "typeId"];

/**
 * This optional field contains description about the instance.
 * @member {String} description
 */
TimeSeriesInstance.prototype['description'] = undefined;

/**
 * Set of time series hierarchy IDs that the instance belong to. May be null.
 * @member {Array.<String>} hierarchyIds
 */
TimeSeriesInstance.prototype['hierarchyIds'] = undefined;

/**
 * Set of key-value pairs that contain user-defined instance properties. May be null.
 * @member {Object.<String, Object>} instanceFields
 */
TimeSeriesInstance.prototype['instanceFields'] = undefined;

/**
 * Optional name of the instance which is unique in an environment. Names acts as a mutable alias or display name of the time series instance. Mutable, may be null.
 * @member {String} name
 */
TimeSeriesInstance.prototype['name'] = undefined;

/**
 * A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.
 * @member {Array.<Object>} timeSeriesId
 */
TimeSeriesInstance.prototype['timeSeriesId'] = undefined;

/**
 * This represents the type that this instance belongs to. Never null.
 * @member {String} typeId
 */
TimeSeriesInstance.prototype['typeId'] = undefined;






export default TimeSeriesInstance;

