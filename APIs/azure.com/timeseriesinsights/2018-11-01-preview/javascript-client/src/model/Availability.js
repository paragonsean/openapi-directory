/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateTimeRange from './DateTimeRange';

/**
 * The Availability model module.
 * @module model/Availability
 * @version 2018-11-01-preview
 */
class Availability {
    /**
     * Constructs a new <code>Availability</code>.
     * Event availability information when environment contains events. Contains time range of events and approximate distribution of events over time.
     * @alias module:model/Availability
     */
    constructor() { 
        
        Availability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Availability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Availability} obj Optional instance to populate.
     * @return {module:model/Availability} The populated <code>Availability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Availability();

            if (data.hasOwnProperty('distribution')) {
                obj['distribution'] = ApiClient.convertToType(data['distribution'], Object);
            }
            if (data.hasOwnProperty('intervalSize')) {
                obj['intervalSize'] = ApiClient.convertToType(data['intervalSize'], 'String');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = DateTimeRange.constructFromObject(data['range']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Availability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Availability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['intervalSize'] && !(typeof data['intervalSize'] === 'string' || data['intervalSize'] instanceof String)) {
            throw new Error("Expected the field `intervalSize` to be a primitive type in the JSON string but got " + data['intervalSize']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          DateTimeRange.validateJSON(data['range']);
        }

        return true;
    }


}



/**
 * @member {Object} distribution
 */
Availability.prototype['distribution'] = undefined;

/**
 * Interval size for the returned distribution of the events. Returned interval is selected to return a reasonable number of points. All intervals are the same size. On the wire interval is specified in ISO-8601 duration format. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \"PT1M\", 1 millisecond is \"PT0.001S\". For more information, see https://www.w3.org/TR/xmlschema-2/#duration
 * @member {String} intervalSize
 */
Availability.prototype['intervalSize'] = undefined;

/**
 * @member {module:model/DateTimeRange} range
 */
Availability.prototype['range'] = undefined;






export default Availability;

