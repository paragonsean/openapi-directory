/**
 * TimeSeriesInsightsClient
 * Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventProperty from './EventProperty';

/**
 * The EventSchema model module.
 * @module model/EventSchema
 * @version 2018-11-01-preview
 */
class EventSchema {
    /**
     * Constructs a new <code>EventSchema</code>.
     * Event schema of all events within a given search span. Event schema is a set of property definitions. Properties are identified by both name and type. Different events can have properties with same name, but different type. Event schema may not be contain all persisted properties when there are too many properties.
     * @alias module:model/EventSchema
     */
    constructor() { 
        
        EventSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSchema} obj Optional instance to populate.
     * @return {module:model/EventSchema} The populated <code>EventSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSchema();

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [EventProperty]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSchema</code>.
     */
    static validateJSON(data) {
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                EventProperty.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A set of property definitions. When environment has no data, the returned array is empty.
 * @member {Array.<module:model/EventProperty>} properties
 */
EventSchema.prototype['properties'] = undefined;






export default EventSchema;

