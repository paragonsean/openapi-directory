/**
 * FabricAdminClient
 * Drive operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDriveModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDriveModel::OAIDriveModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDriveModel::OAIDriveModel() {
    this->initializeModel();
}

OAIDriveModel::~OAIDriveModel() {}

void OAIDriveModel::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_can_pool_isSet = false;
    m_can_pool_isValid = false;

    m_cannot_pool_reason_isSet = false;
    m_cannot_pool_reason_isValid = false;

    m_capacity_gb_isSet = false;
    m_capacity_gb_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_operational_status_isSet = false;
    m_operational_status_isValid = false;

    m_physical_location_isSet = false;
    m_physical_location_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_storage_node_isSet = false;
    m_storage_node_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIDriveModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDriveModel::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_can_pool_isValid = ::OpenAPI::fromJsonValue(m_can_pool, json[QString("canPool")]);
    m_can_pool_isSet = !json[QString("canPool")].isNull() && m_can_pool_isValid;

    m_cannot_pool_reason_isValid = ::OpenAPI::fromJsonValue(m_cannot_pool_reason, json[QString("cannotPoolReason")]);
    m_cannot_pool_reason_isSet = !json[QString("cannotPoolReason")].isNull() && m_cannot_pool_reason_isValid;

    m_capacity_gb_isValid = ::OpenAPI::fromJsonValue(m_capacity_gb, json[QString("capacityGB")]);
    m_capacity_gb_isSet = !json[QString("capacityGB")].isNull() && m_capacity_gb_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_operational_status_isValid = ::OpenAPI::fromJsonValue(m_operational_status, json[QString("operationalStatus")]);
    m_operational_status_isSet = !json[QString("operationalStatus")].isNull() && m_operational_status_isValid;

    m_physical_location_isValid = ::OpenAPI::fromJsonValue(m_physical_location, json[QString("physicalLocation")]);
    m_physical_location_isSet = !json[QString("physicalLocation")].isNull() && m_physical_location_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_storage_node_isValid = ::OpenAPI::fromJsonValue(m_storage_node, json[QString("storageNode")]);
    m_storage_node_isSet = !json[QString("storageNode")].isNull() && m_storage_node_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIDriveModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDriveModel::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_can_pool_isSet) {
        obj.insert(QString("canPool"), ::OpenAPI::toJsonValue(m_can_pool));
    }
    if (m_cannot_pool_reason_isSet) {
        obj.insert(QString("cannotPoolReason"), ::OpenAPI::toJsonValue(m_cannot_pool_reason));
    }
    if (m_capacity_gb_isSet) {
        obj.insert(QString("capacityGB"), ::OpenAPI::toJsonValue(m_capacity_gb));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_operational_status_isSet) {
        obj.insert(QString("operationalStatus"), ::OpenAPI::toJsonValue(m_operational_status));
    }
    if (m_physical_location_isSet) {
        obj.insert(QString("physicalLocation"), ::OpenAPI::toJsonValue(m_physical_location));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_storage_node_isSet) {
        obj.insert(QString("storageNode"), ::OpenAPI::toJsonValue(m_storage_node));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAIDriveModel::getAction() const {
    return m_action;
}
void OAIDriveModel::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIDriveModel::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDriveModel::is_action_Valid() const{
    return m_action_isValid;
}

bool OAIDriveModel::isCanPool() const {
    return m_can_pool;
}
void OAIDriveModel::setCanPool(const bool &can_pool) {
    m_can_pool = can_pool;
    m_can_pool_isSet = true;
}

bool OAIDriveModel::is_can_pool_Set() const{
    return m_can_pool_isSet;
}

bool OAIDriveModel::is_can_pool_Valid() const{
    return m_can_pool_isValid;
}

QString OAIDriveModel::getCannotPoolReason() const {
    return m_cannot_pool_reason;
}
void OAIDriveModel::setCannotPoolReason(const QString &cannot_pool_reason) {
    m_cannot_pool_reason = cannot_pool_reason;
    m_cannot_pool_reason_isSet = true;
}

bool OAIDriveModel::is_cannot_pool_reason_Set() const{
    return m_cannot_pool_reason_isSet;
}

bool OAIDriveModel::is_cannot_pool_reason_Valid() const{
    return m_cannot_pool_reason_isValid;
}

qint32 OAIDriveModel::getCapacityGb() const {
    return m_capacity_gb;
}
void OAIDriveModel::setCapacityGb(const qint32 &capacity_gb) {
    m_capacity_gb = capacity_gb;
    m_capacity_gb_isSet = true;
}

bool OAIDriveModel::is_capacity_gb_Set() const{
    return m_capacity_gb_isSet;
}

bool OAIDriveModel::is_capacity_gb_Valid() const{
    return m_capacity_gb_isValid;
}

QString OAIDriveModel::getDescription() const {
    return m_description;
}
void OAIDriveModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDriveModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDriveModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDriveModel::getHealthStatus() const {
    return m_health_status;
}
void OAIDriveModel::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIDriveModel::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIDriveModel::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIDriveModel::getMediaType() const {
    return m_media_type;
}
void OAIDriveModel::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIDriveModel::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIDriveModel::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIDriveModel::getModel() const {
    return m_model;
}
void OAIDriveModel::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDriveModel::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDriveModel::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIDriveModel::getOperationalStatus() const {
    return m_operational_status;
}
void OAIDriveModel::setOperationalStatus(const QString &operational_status) {
    m_operational_status = operational_status;
    m_operational_status_isSet = true;
}

bool OAIDriveModel::is_operational_status_Set() const{
    return m_operational_status_isSet;
}

bool OAIDriveModel::is_operational_status_Valid() const{
    return m_operational_status_isValid;
}

QString OAIDriveModel::getPhysicalLocation() const {
    return m_physical_location;
}
void OAIDriveModel::setPhysicalLocation(const QString &physical_location) {
    m_physical_location = physical_location;
    m_physical_location_isSet = true;
}

bool OAIDriveModel::is_physical_location_Set() const{
    return m_physical_location_isSet;
}

bool OAIDriveModel::is_physical_location_Valid() const{
    return m_physical_location_isValid;
}

QString OAIDriveModel::getSerialNumber() const {
    return m_serial_number;
}
void OAIDriveModel::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDriveModel::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDriveModel::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIDriveModel::getStorageNode() const {
    return m_storage_node;
}
void OAIDriveModel::setStorageNode(const QString &storage_node) {
    m_storage_node = storage_node;
    m_storage_node_isSet = true;
}

bool OAIDriveModel::is_storage_node_Set() const{
    return m_storage_node_isSet;
}

bool OAIDriveModel::is_storage_node_Valid() const{
    return m_storage_node_isValid;
}

QString OAIDriveModel::getUsage() const {
    return m_usage;
}
void OAIDriveModel::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIDriveModel::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIDriveModel::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIDriveModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cannot_pool_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDriveModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
