# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriveModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, can_pool: bool=None, cannot_pool_reason: str=None, capacity_gb: int=None, description: str=None, health_status: str=None, media_type: str=None, model: str=None, operational_status: str=None, physical_location: str=None, serial_number: str=None, storage_node: str=None, usage: str=None):
        """DriveModel - a model defined in OpenAPI

        :param action: The action of this DriveModel.
        :param can_pool: The can_pool of this DriveModel.
        :param cannot_pool_reason: The cannot_pool_reason of this DriveModel.
        :param capacity_gb: The capacity_gb of this DriveModel.
        :param description: The description of this DriveModel.
        :param health_status: The health_status of this DriveModel.
        :param media_type: The media_type of this DriveModel.
        :param model: The model of this DriveModel.
        :param operational_status: The operational_status of this DriveModel.
        :param physical_location: The physical_location of this DriveModel.
        :param serial_number: The serial_number of this DriveModel.
        :param storage_node: The storage_node of this DriveModel.
        :param usage: The usage of this DriveModel.
        """
        self.openapi_types = {
            'action': str,
            'can_pool': bool,
            'cannot_pool_reason': str,
            'capacity_gb': int,
            'description': str,
            'health_status': str,
            'media_type': str,
            'model': str,
            'operational_status': str,
            'physical_location': str,
            'serial_number': str,
            'storage_node': str,
            'usage': str
        }

        self.attribute_map = {
            'action': 'action',
            'can_pool': 'canPool',
            'cannot_pool_reason': 'cannotPoolReason',
            'capacity_gb': 'capacityGB',
            'description': 'description',
            'health_status': 'healthStatus',
            'media_type': 'mediaType',
            'model': 'model',
            'operational_status': 'operationalStatus',
            'physical_location': 'physicalLocation',
            'serial_number': 'serialNumber',
            'storage_node': 'storageNode',
            'usage': 'usage'
        }

        self._action = action
        self._can_pool = can_pool
        self._cannot_pool_reason = cannot_pool_reason
        self._capacity_gb = capacity_gb
        self._description = description
        self._health_status = health_status
        self._media_type = media_type
        self._model = model
        self._operational_status = operational_status
        self._physical_location = physical_location
        self._serial_number = serial_number
        self._storage_node = storage_node
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriveModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriveModel of this DriveModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DriveModel.

        Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.

        :return: The action of this DriveModel.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DriveModel.

        Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.

        :param action: The action of this DriveModel.
        :type action: str
        """

        self._action = action

    @property
    def can_pool(self):
        """Gets the can_pool of this DriveModel.

        Indicate whether the drive can be added to the pool.

        :return: The can_pool of this DriveModel.
        :rtype: bool
        """
        return self._can_pool

    @can_pool.setter
    def can_pool(self, can_pool):
        """Sets the can_pool of this DriveModel.

        Indicate whether the drive can be added to the pool.

        :param can_pool: The can_pool of this DriveModel.
        :type can_pool: bool
        """

        self._can_pool = can_pool

    @property
    def cannot_pool_reason(self):
        """Gets the cannot_pool_reason of this DriveModel.

        Specify the reasons why the drive cannot be added to the pool.

        :return: The cannot_pool_reason of this DriveModel.
        :rtype: str
        """
        return self._cannot_pool_reason

    @cannot_pool_reason.setter
    def cannot_pool_reason(self, cannot_pool_reason):
        """Sets the cannot_pool_reason of this DriveModel.

        Specify the reasons why the drive cannot be added to the pool.

        :param cannot_pool_reason: The cannot_pool_reason of this DriveModel.
        :type cannot_pool_reason: str
        """

        self._cannot_pool_reason = cannot_pool_reason

    @property
    def capacity_gb(self):
        """Gets the capacity_gb of this DriveModel.

        Total capacity in GB of the drive.

        :return: The capacity_gb of this DriveModel.
        :rtype: int
        """
        return self._capacity_gb

    @capacity_gb.setter
    def capacity_gb(self, capacity_gb):
        """Sets the capacity_gb of this DriveModel.

        Total capacity in GB of the drive.

        :param capacity_gb: The capacity_gb of this DriveModel.
        :type capacity_gb: int
        """

        self._capacity_gb = capacity_gb

    @property
    def description(self):
        """Gets the description of this DriveModel.

        Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.

        :return: The description of this DriveModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DriveModel.

        Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.

        :param description: The description of this DriveModel.
        :type description: str
        """

        self._description = description

    @property
    def health_status(self):
        """Gets the health_status of this DriveModel.

        Health status of the drive.

        :return: The health_status of this DriveModel.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this DriveModel.

        Health status of the drive.

        :param health_status: The health_status of this DriveModel.
        :type health_status: str
        """

        self._health_status = health_status

    @property
    def media_type(self):
        """Gets the media_type of this DriveModel.

        Media type of the drive.

        :return: The media_type of this DriveModel.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this DriveModel.

        Media type of the drive.

        :param media_type: The media_type of this DriveModel.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def model(self):
        """Gets the model of this DriveModel.

        Model of the drive.

        :return: The model of this DriveModel.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DriveModel.

        Model of the drive.

        :param model: The model of this DriveModel.
        :type model: str
        """

        self._model = model

    @property
    def operational_status(self):
        """Gets the operational_status of this DriveModel.

        Operational status of the drive.

        :return: The operational_status of this DriveModel.
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this DriveModel.

        Operational status of the drive.

        :param operational_status: The operational_status of this DriveModel.
        :type operational_status: str
        """

        self._operational_status = operational_status

    @property
    def physical_location(self):
        """Gets the physical_location of this DriveModel.

        Indicate where the hardware is located.

        :return: The physical_location of this DriveModel.
        :rtype: str
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """Sets the physical_location of this DriveModel.

        Indicate where the hardware is located.

        :param physical_location: The physical_location of this DriveModel.
        :type physical_location: str
        """

        self._physical_location = physical_location

    @property
    def serial_number(self):
        """Gets the serial_number of this DriveModel.

        Serial number of the drive.

        :return: The serial_number of this DriveModel.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DriveModel.

        Serial number of the drive.

        :param serial_number: The serial_number of this DriveModel.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def storage_node(self):
        """Gets the storage_node of this DriveModel.

        Node that the drive is physically connected.

        :return: The storage_node of this DriveModel.
        :rtype: str
        """
        return self._storage_node

    @storage_node.setter
    def storage_node(self, storage_node):
        """Sets the storage_node of this DriveModel.

        Node that the drive is physically connected.

        :param storage_node: The storage_node of this DriveModel.
        :type storage_node: str
        """

        self._storage_node = storage_node

    @property
    def usage(self):
        """Gets the usage of this DriveModel.

        Intended usage of the drive.

        :return: The usage of this DriveModel.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this DriveModel.

        Intended usage of the drive.

        :param usage: The usage of this DriveModel.
        :type usage: str
        """

        self._usage = usage
