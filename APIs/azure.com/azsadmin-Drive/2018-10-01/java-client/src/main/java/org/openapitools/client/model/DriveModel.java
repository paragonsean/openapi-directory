/*
 * FabricAdminClient
 * Drive operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a drive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:07.896289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DriveModel {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_CAN_POOL = "canPool";
  @SerializedName(SERIALIZED_NAME_CAN_POOL)
  private Boolean canPool;

  public static final String SERIALIZED_NAME_CANNOT_POOL_REASON = "cannotPoolReason";
  @SerializedName(SERIALIZED_NAME_CANNOT_POOL_REASON)
  private String cannotPoolReason;

  public static final String SERIALIZED_NAME_CAPACITY_G_B = "capacityGB";
  @SerializedName(SERIALIZED_NAME_CAPACITY_G_B)
  private Integer capacityGB;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private String healthStatus;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_OPERATIONAL_STATUS = "operationalStatus";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_STATUS)
  private String operationalStatus;

  public static final String SERIALIZED_NAME_PHYSICAL_LOCATION = "physicalLocation";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_LOCATION)
  private String physicalLocation;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_STORAGE_NODE = "storageNode";
  @SerializedName(SERIALIZED_NAME_STORAGE_NODE)
  private String storageNode;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private String usage;

  public DriveModel() {
  }

  public DriveModel action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public DriveModel canPool(Boolean canPool) {
    this.canPool = canPool;
    return this;
  }

  /**
   * Indicate whether the drive can be added to the pool.
   * @return canPool
   */
  @javax.annotation.Nullable
  public Boolean getCanPool() {
    return canPool;
  }

  public void setCanPool(Boolean canPool) {
    this.canPool = canPool;
  }


  public DriveModel cannotPoolReason(String cannotPoolReason) {
    this.cannotPoolReason = cannotPoolReason;
    return this;
  }

  /**
   * Specify the reasons why the drive cannot be added to the pool.
   * @return cannotPoolReason
   */
  @javax.annotation.Nullable
  public String getCannotPoolReason() {
    return cannotPoolReason;
  }

  public void setCannotPoolReason(String cannotPoolReason) {
    this.cannotPoolReason = cannotPoolReason;
  }


  public DriveModel capacityGB(Integer capacityGB) {
    this.capacityGB = capacityGB;
    return this;
  }

  /**
   * Total capacity in GB of the drive.
   * @return capacityGB
   */
  @javax.annotation.Nullable
  public Integer getCapacityGB() {
    return capacityGB;
  }

  public void setCapacityGB(Integer capacityGB) {
    this.capacityGB = capacityGB;
  }


  public DriveModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DriveModel healthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Health status of the drive.
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public String getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
  }


  public DriveModel mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Media type of the drive.
   * @return mediaType
   */
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public DriveModel model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Model of the drive.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public DriveModel operationalStatus(String operationalStatus) {
    this.operationalStatus = operationalStatus;
    return this;
  }

  /**
   * Operational status of the drive.
   * @return operationalStatus
   */
  @javax.annotation.Nullable
  public String getOperationalStatus() {
    return operationalStatus;
  }

  public void setOperationalStatus(String operationalStatus) {
    this.operationalStatus = operationalStatus;
  }


  public DriveModel physicalLocation(String physicalLocation) {
    this.physicalLocation = physicalLocation;
    return this;
  }

  /**
   * Indicate where the hardware is located.
   * @return physicalLocation
   */
  @javax.annotation.Nullable
  public String getPhysicalLocation() {
    return physicalLocation;
  }

  public void setPhysicalLocation(String physicalLocation) {
    this.physicalLocation = physicalLocation;
  }


  public DriveModel serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Serial number of the drive.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public DriveModel storageNode(String storageNode) {
    this.storageNode = storageNode;
    return this;
  }

  /**
   * Node that the drive is physically connected.
   * @return storageNode
   */
  @javax.annotation.Nullable
  public String getStorageNode() {
    return storageNode;
  }

  public void setStorageNode(String storageNode) {
    this.storageNode = storageNode;
  }


  public DriveModel usage(String usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Intended usage of the drive.
   * @return usage
   */
  @javax.annotation.Nullable
  public String getUsage() {
    return usage;
  }

  public void setUsage(String usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveModel driveModel = (DriveModel) o;
    return Objects.equals(this.action, driveModel.action) &&
        Objects.equals(this.canPool, driveModel.canPool) &&
        Objects.equals(this.cannotPoolReason, driveModel.cannotPoolReason) &&
        Objects.equals(this.capacityGB, driveModel.capacityGB) &&
        Objects.equals(this.description, driveModel.description) &&
        Objects.equals(this.healthStatus, driveModel.healthStatus) &&
        Objects.equals(this.mediaType, driveModel.mediaType) &&
        Objects.equals(this.model, driveModel.model) &&
        Objects.equals(this.operationalStatus, driveModel.operationalStatus) &&
        Objects.equals(this.physicalLocation, driveModel.physicalLocation) &&
        Objects.equals(this.serialNumber, driveModel.serialNumber) &&
        Objects.equals(this.storageNode, driveModel.storageNode) &&
        Objects.equals(this.usage, driveModel.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, canPool, cannotPoolReason, capacityGB, description, healthStatus, mediaType, model, operationalStatus, physicalLocation, serialNumber, storageNode, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveModel {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    canPool: ").append(toIndentedString(canPool)).append("\n");
    sb.append("    cannotPoolReason: ").append(toIndentedString(cannotPoolReason)).append("\n");
    sb.append("    capacityGB: ").append(toIndentedString(capacityGB)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    operationalStatus: ").append(toIndentedString(operationalStatus)).append("\n");
    sb.append("    physicalLocation: ").append(toIndentedString(physicalLocation)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    storageNode: ").append(toIndentedString(storageNode)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("canPool");
    openapiFields.add("cannotPoolReason");
    openapiFields.add("capacityGB");
    openapiFields.add("description");
    openapiFields.add("healthStatus");
    openapiFields.add("mediaType");
    openapiFields.add("model");
    openapiFields.add("operationalStatus");
    openapiFields.add("physicalLocation");
    openapiFields.add("serialNumber");
    openapiFields.add("storageNode");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DriveModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DriveModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DriveModel is not found in the empty JSON string", DriveModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DriveModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DriveModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("cannotPoolReason") != null && !jsonObj.get("cannotPoolReason").isJsonNull()) && !jsonObj.get("cannotPoolReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cannotPoolReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cannotPoolReason").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) && !jsonObj.get("healthStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthStatus").toString()));
      }
      if ((jsonObj.get("mediaType") != null && !jsonObj.get("mediaType").isJsonNull()) && !jsonObj.get("mediaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaType").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("operationalStatus") != null && !jsonObj.get("operationalStatus").isJsonNull()) && !jsonObj.get("operationalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationalStatus").toString()));
      }
      if ((jsonObj.get("physicalLocation") != null && !jsonObj.get("physicalLocation").isJsonNull()) && !jsonObj.get("physicalLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physicalLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physicalLocation").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("storageNode") != null && !jsonObj.get("storageNode").isJsonNull()) && !jsonObj.get("storageNode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageNode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageNode").toString()));
      }
      if ((jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) && !jsonObj.get("usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DriveModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DriveModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DriveModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DriveModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DriveModel>() {
           @Override
           public void write(JsonWriter out, DriveModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DriveModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DriveModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DriveModel
   * @throws IOException if the JSON string is invalid with respect to DriveModel
   */
  public static DriveModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DriveModel.class);
  }

  /**
   * Convert an instance of DriveModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

