/**
 * FabricAdminClient
 * Drive operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DriveModel model module.
 * @module model/DriveModel
 * @version 2019-05-01
 */
class DriveModel {
    /**
     * Constructs a new <code>DriveModel</code>.
     * Properties of a drive.
     * @alias module:model/DriveModel
     */
    constructor() { 
        
        DriveModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DriveModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DriveModel} obj Optional instance to populate.
     * @return {module:model/DriveModel} The populated <code>DriveModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DriveModel();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('capacityGB')) {
                obj['capacityGB'] = ApiClient.convertToType(data['capacityGB'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('firmwareVersion')) {
                obj['firmwareVersion'] = ApiClient.convertToType(data['firmwareVersion'], 'String');
            }
            if (data.hasOwnProperty('healthStatus')) {
                obj['healthStatus'] = ApiClient.convertToType(data['healthStatus'], 'String');
            }
            if (data.hasOwnProperty('isIndicationEnabled')) {
                obj['isIndicationEnabled'] = ApiClient.convertToType(data['isIndicationEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('operationalStatus')) {
                obj['operationalStatus'] = ApiClient.convertToType(data['operationalStatus'], 'String');
            }
            if (data.hasOwnProperty('physicalLocation')) {
                obj['physicalLocation'] = ApiClient.convertToType(data['physicalLocation'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('storageNode')) {
                obj['storageNode'] = ApiClient.convertToType(data['storageNode'], 'String');
            }
            if (data.hasOwnProperty('storagePool')) {
                obj['storagePool'] = ApiClient.convertToType(data['storagePool'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = ApiClient.convertToType(data['usage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DriveModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DriveModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['firmwareVersion'] && !(typeof data['firmwareVersion'] === 'string' || data['firmwareVersion'] instanceof String)) {
            throw new Error("Expected the field `firmwareVersion` to be a primitive type in the JSON string but got " + data['firmwareVersion']);
        }
        // ensure the json data is a string
        if (data['healthStatus'] && !(typeof data['healthStatus'] === 'string' || data['healthStatus'] instanceof String)) {
            throw new Error("Expected the field `healthStatus` to be a primitive type in the JSON string but got " + data['healthStatus']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['mediaType'] && !(typeof data['mediaType'] === 'string' || data['mediaType'] instanceof String)) {
            throw new Error("Expected the field `mediaType` to be a primitive type in the JSON string but got " + data['mediaType']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['operationalStatus'] && !(typeof data['operationalStatus'] === 'string' || data['operationalStatus'] instanceof String)) {
            throw new Error("Expected the field `operationalStatus` to be a primitive type in the JSON string but got " + data['operationalStatus']);
        }
        // ensure the json data is a string
        if (data['physicalLocation'] && !(typeof data['physicalLocation'] === 'string' || data['physicalLocation'] instanceof String)) {
            throw new Error("Expected the field `physicalLocation` to be a primitive type in the JSON string but got " + data['physicalLocation']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['storageNode'] && !(typeof data['storageNode'] === 'string' || data['storageNode'] instanceof String)) {
            throw new Error("Expected the field `storageNode` to be a primitive type in the JSON string but got " + data['storageNode']);
        }
        // ensure the json data is a string
        if (data['storagePool'] && !(typeof data['storagePool'] === 'string' || data['storagePool'] instanceof String)) {
            throw new Error("Expected the field `storagePool` to be a primitive type in the JSON string but got " + data['storagePool']);
        }
        // ensure the json data is a string
        if (data['usage'] && !(typeof data['usage'] === 'string' || data['usage'] instanceof String)) {
            throw new Error("Expected the field `usage` to be a primitive type in the JSON string but got " + data['usage']);
        }

        return true;
    }


}



/**
 * Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
 * @member {String} action
 */
DriveModel.prototype['action'] = undefined;

/**
 * Total capacity in GB of the drive.
 * @member {Number} capacityGB
 */
DriveModel.prototype['capacityGB'] = undefined;

/**
 * Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
 * @member {String} description
 */
DriveModel.prototype['description'] = undefined;

/**
 * The firmware version of the drive.
 * @member {String} firmwareVersion
 */
DriveModel.prototype['firmwareVersion'] = undefined;

/**
 * Health status of the drive.
 * @member {String} healthStatus
 */
DriveModel.prototype['healthStatus'] = undefined;

/**
 * Indicate whether the drive's identification LEDs are active or not.
 * @member {Boolean} isIndicationEnabled
 */
DriveModel.prototype['isIndicationEnabled'] = undefined;

/**
 * The name of the drive's manufacturer.
 * @member {String} manufacturer
 */
DriveModel.prototype['manufacturer'] = undefined;

/**
 * Media type of the drive.
 * @member {String} mediaType
 */
DriveModel.prototype['mediaType'] = undefined;

/**
 * Model of the drive.
 * @member {String} model
 */
DriveModel.prototype['model'] = undefined;

/**
 * Operational status of the drive.
 * @member {String} operationalStatus
 */
DriveModel.prototype['operationalStatus'] = undefined;

/**
 * Indicate where the hardware is located.
 * @member {String} physicalLocation
 */
DriveModel.prototype['physicalLocation'] = undefined;

/**
 * Serial number of the drive.
 * @member {String} serialNumber
 */
DriveModel.prototype['serialNumber'] = undefined;

/**
 * Node that the drive is physically connected.
 * @member {String} storageNode
 */
DriveModel.prototype['storageNode'] = undefined;

/**
 * The storage pool where the drive is located.
 * @member {String} storagePool
 */
DriveModel.prototype['storagePool'] = undefined;

/**
 * Intended usage of the drive.
 * @member {String} usage
 */
DriveModel.prototype['usage'] = undefined;






export default DriveModel;

