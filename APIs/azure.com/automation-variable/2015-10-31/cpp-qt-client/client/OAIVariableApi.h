/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVariableApi_H
#define OAI_OAIVariableApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVariable.h"
#include "OAIVariableCreateOrUpdateParameters.h"
#include "OAIVariableListResult.h"
#include "OAIVariableUpdateParameters.h"
#include "OAIVariable_ListByAutomationAccount_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVariableApi : public QObject {
    Q_OBJECT

public:
    OAIVariableApi(const int timeOut = 0);
    ~OAIVariableApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  variable_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIVariableCreateOrUpdateParameters [required]
    */
    virtual void variableCreateOrUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &variable_name, const QString &subscription_id, const QString &api_version, const OAIVariableCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  variable_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void variableDelete(const QString &resource_group_name, const QString &automation_account_name, const QString &variable_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  variable_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void variableGet(const QString &resource_group_name, const QString &automation_account_name, const QString &variable_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void variableListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  variable_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIVariableUpdateParameters [required]
    */
    virtual void variableUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &variable_name, const QString &subscription_id, const QString &api_version, const OAIVariableUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void variableCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void variableDeleteCallback(OAIHttpRequestWorker *worker);
    void variableGetCallback(OAIHttpRequestWorker *worker);
    void variableListByAutomationAccountCallback(OAIHttpRequestWorker *worker);
    void variableUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void variableCreateOrUpdateSignal(OAIVariable summary);
    void variableDeleteSignal();
    void variableGetSignal(OAIVariable summary);
    void variableListByAutomationAccountSignal(OAIVariableListResult summary);
    void variableUpdateSignal(OAIVariable summary);


    void variableCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void variableDeleteSignalFull(OAIHttpRequestWorker *worker);
    void variableGetSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void variableListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAIVariableListResult summary);
    void variableUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);

    Q_DECL_DEPRECATED_X("Use variableCreateOrUpdateSignalError() instead")
    void variableCreateOrUpdateSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void variableCreateOrUpdateSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variableDeleteSignalError() instead")
    void variableDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void variableDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variableGetSignalError() instead")
    void variableGetSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void variableGetSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variableListByAutomationAccountSignalError() instead")
    void variableListByAutomationAccountSignalE(OAIVariableListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void variableListByAutomationAccountSignalError(OAIVariableListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variableUpdateSignalError() instead")
    void variableUpdateSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void variableUpdateSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use variableCreateOrUpdateSignalErrorFull() instead")
    void variableCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void variableCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variableDeleteSignalErrorFull() instead")
    void variableDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void variableDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variableGetSignalErrorFull() instead")
    void variableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void variableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variableListByAutomationAccountSignalErrorFull() instead")
    void variableListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void variableListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use variableUpdateSignalErrorFull() instead")
    void variableUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void variableUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
