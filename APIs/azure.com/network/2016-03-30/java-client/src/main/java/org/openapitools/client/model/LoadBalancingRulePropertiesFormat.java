/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the load balancer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:21.906013-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoadBalancingRulePropertiesFormat {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOL = "backendAddressPool";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOL)
  private SubResource backendAddressPool;

  public static final String SERIALIZED_NAME_BACKEND_PORT = "backendPort";
  @SerializedName(SERIALIZED_NAME_BACKEND_PORT)
  private Integer backendPort;

  public static final String SERIALIZED_NAME_ENABLE_FLOATING_I_P = "enableFloatingIP";
  @SerializedName(SERIALIZED_NAME_ENABLE_FLOATING_I_P)
  private Boolean enableFloatingIP;

  public static final String SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATION = "frontendIPConfiguration";
  @SerializedName(SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATION)
  private SubResource frontendIPConfiguration;

  public static final String SERIALIZED_NAME_FRONTEND_PORT = "frontendPort";
  @SerializedName(SERIALIZED_NAME_FRONTEND_PORT)
  private Integer frontendPort;

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES = "idleTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES)
  private Integer idleTimeoutInMinutes;

  /**
   * Gets or sets the load distribution policy for this rule
   */
  @JsonAdapter(LoadDistributionEnum.Adapter.class)
  public enum LoadDistributionEnum {
    DEFAULT("Default"),
    
    SOURCE_IP("SourceIP"),
    
    SOURCE_IP_PROTOCOL("SourceIPProtocol");

    private String value;

    LoadDistributionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadDistributionEnum fromValue(String value) {
      for (LoadDistributionEnum b : LoadDistributionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoadDistributionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadDistributionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadDistributionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoadDistributionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoadDistributionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOAD_DISTRIBUTION = "loadDistribution";
  @SerializedName(SERIALIZED_NAME_LOAD_DISTRIBUTION)
  private LoadDistributionEnum loadDistribution;

  public static final String SERIALIZED_NAME_PROBE = "probe";
  @SerializedName(SERIALIZED_NAME_PROBE)
  private SubResource probe;

  /**
   * Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    UDP("Udp"),
    
    TCP("Tcp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public LoadBalancingRulePropertiesFormat() {
  }

  public LoadBalancingRulePropertiesFormat backendAddressPool(SubResource backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
    return this;
  }

  /**
   * Get backendAddressPool
   * @return backendAddressPool
   */
  @javax.annotation.Nullable
  public SubResource getBackendAddressPool() {
    return backendAddressPool;
  }

  public void setBackendAddressPool(SubResource backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
  }


  public LoadBalancingRulePropertiesFormat backendPort(Integer backendPort) {
    this.backendPort = backendPort;
    return this;
  }

  /**
   * Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to &#39;*&#39; to automatically assign an unallocated port that is discoverable using the runtime API
   * @return backendPort
   */
  @javax.annotation.Nullable
  public Integer getBackendPort() {
    return backendPort;
  }

  public void setBackendPort(Integer backendPort) {
    this.backendPort = backendPort;
  }


  public LoadBalancingRulePropertiesFormat enableFloatingIP(Boolean enableFloatingIP) {
    this.enableFloatingIP = enableFloatingIP;
    return this;
  }

  /**
   * Configures a virtual machine&#39;s endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can&#39;t be changed after you create the endpoint
   * @return enableFloatingIP
   */
  @javax.annotation.Nullable
  public Boolean getEnableFloatingIP() {
    return enableFloatingIP;
  }

  public void setEnableFloatingIP(Boolean enableFloatingIP) {
    this.enableFloatingIP = enableFloatingIP;
  }


  public LoadBalancingRulePropertiesFormat frontendIPConfiguration(SubResource frontendIPConfiguration) {
    this.frontendIPConfiguration = frontendIPConfiguration;
    return this;
  }

  /**
   * Get frontendIPConfiguration
   * @return frontendIPConfiguration
   */
  @javax.annotation.Nullable
  public SubResource getFrontendIPConfiguration() {
    return frontendIPConfiguration;
  }

  public void setFrontendIPConfiguration(SubResource frontendIPConfiguration) {
    this.frontendIPConfiguration = frontendIPConfiguration;
  }


  public LoadBalancingRulePropertiesFormat frontendPort(Integer frontendPort) {
    this.frontendPort = frontendPort;
    return this;
  }

  /**
   * Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
   * @return frontendPort
   */
  @javax.annotation.Nonnull
  public Integer getFrontendPort() {
    return frontendPort;
  }

  public void setFrontendPort(Integer frontendPort) {
    this.frontendPort = frontendPort;
  }


  public LoadBalancingRulePropertiesFormat idleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
    return this;
  }

  /**
   * Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp
   * @return idleTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getIdleTimeoutInMinutes() {
    return idleTimeoutInMinutes;
  }

  public void setIdleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
  }


  public LoadBalancingRulePropertiesFormat loadDistribution(LoadDistributionEnum loadDistribution) {
    this.loadDistribution = loadDistribution;
    return this;
  }

  /**
   * Gets or sets the load distribution policy for this rule
   * @return loadDistribution
   */
  @javax.annotation.Nullable
  public LoadDistributionEnum getLoadDistribution() {
    return loadDistribution;
  }

  public void setLoadDistribution(LoadDistributionEnum loadDistribution) {
    this.loadDistribution = loadDistribution;
  }


  public LoadBalancingRulePropertiesFormat probe(SubResource probe) {
    this.probe = probe;
    return this;
  }

  /**
   * Get probe
   * @return probe
   */
  @javax.annotation.Nullable
  public SubResource getProbe() {
    return probe;
  }

  public void setProbe(SubResource probe) {
    this.probe = probe;
  }


  public LoadBalancingRulePropertiesFormat protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public LoadBalancingRulePropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancingRulePropertiesFormat loadBalancingRulePropertiesFormat = (LoadBalancingRulePropertiesFormat) o;
    return Objects.equals(this.backendAddressPool, loadBalancingRulePropertiesFormat.backendAddressPool) &&
        Objects.equals(this.backendPort, loadBalancingRulePropertiesFormat.backendPort) &&
        Objects.equals(this.enableFloatingIP, loadBalancingRulePropertiesFormat.enableFloatingIP) &&
        Objects.equals(this.frontendIPConfiguration, loadBalancingRulePropertiesFormat.frontendIPConfiguration) &&
        Objects.equals(this.frontendPort, loadBalancingRulePropertiesFormat.frontendPort) &&
        Objects.equals(this.idleTimeoutInMinutes, loadBalancingRulePropertiesFormat.idleTimeoutInMinutes) &&
        Objects.equals(this.loadDistribution, loadBalancingRulePropertiesFormat.loadDistribution) &&
        Objects.equals(this.probe, loadBalancingRulePropertiesFormat.probe) &&
        Objects.equals(this.protocol, loadBalancingRulePropertiesFormat.protocol) &&
        Objects.equals(this.provisioningState, loadBalancingRulePropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddressPool, backendPort, enableFloatingIP, frontendIPConfiguration, frontendPort, idleTimeoutInMinutes, loadDistribution, probe, protocol, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancingRulePropertiesFormat {\n");
    sb.append("    backendAddressPool: ").append(toIndentedString(backendAddressPool)).append("\n");
    sb.append("    backendPort: ").append(toIndentedString(backendPort)).append("\n");
    sb.append("    enableFloatingIP: ").append(toIndentedString(enableFloatingIP)).append("\n");
    sb.append("    frontendIPConfiguration: ").append(toIndentedString(frontendIPConfiguration)).append("\n");
    sb.append("    frontendPort: ").append(toIndentedString(frontendPort)).append("\n");
    sb.append("    idleTimeoutInMinutes: ").append(toIndentedString(idleTimeoutInMinutes)).append("\n");
    sb.append("    loadDistribution: ").append(toIndentedString(loadDistribution)).append("\n");
    sb.append("    probe: ").append(toIndentedString(probe)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddressPool");
    openapiFields.add("backendPort");
    openapiFields.add("enableFloatingIP");
    openapiFields.add("frontendIPConfiguration");
    openapiFields.add("frontendPort");
    openapiFields.add("idleTimeoutInMinutes");
    openapiFields.add("loadDistribution");
    openapiFields.add("probe");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("frontendPort");
    openapiRequiredFields.add("protocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoadBalancingRulePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancingRulePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancingRulePropertiesFormat is not found in the empty JSON string", LoadBalancingRulePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancingRulePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancingRulePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoadBalancingRulePropertiesFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendAddressPool`
      if (jsonObj.get("backendAddressPool") != null && !jsonObj.get("backendAddressPool").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("backendAddressPool"));
      }
      // validate the optional field `frontendIPConfiguration`
      if (jsonObj.get("frontendIPConfiguration") != null && !jsonObj.get("frontendIPConfiguration").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("frontendIPConfiguration"));
      }
      if ((jsonObj.get("loadDistribution") != null && !jsonObj.get("loadDistribution").isJsonNull()) && !jsonObj.get("loadDistribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadDistribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loadDistribution").toString()));
      }
      // validate the optional field `loadDistribution`
      if (jsonObj.get("loadDistribution") != null && !jsonObj.get("loadDistribution").isJsonNull()) {
        LoadDistributionEnum.validateJsonElement(jsonObj.get("loadDistribution"));
      }
      // validate the optional field `probe`
      if (jsonObj.get("probe") != null && !jsonObj.get("probe").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("probe"));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancingRulePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancingRulePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancingRulePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancingRulePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancingRulePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, LoadBalancingRulePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancingRulePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoadBalancingRulePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoadBalancingRulePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to LoadBalancingRulePropertiesFormat
   */
  public static LoadBalancingRulePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancingRulePropertiesFormat.class);
  }

  /**
   * Convert an instance of LoadBalancingRulePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

