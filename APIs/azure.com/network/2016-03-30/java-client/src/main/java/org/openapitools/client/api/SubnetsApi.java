/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Subnet;
import org.openapitools.client.model.SubnetListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubnetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubnetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubnetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for subnetsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param subnetParameters Parameters supplied to the create/update Subnet operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subnetsCreateOrUpdateCall(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, Subnet subnetParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subnetParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "subnetName" + "}", localVarApiClient.escapeString(subnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subnetsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, Subnet subnetParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subnetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling subnetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subnetName' is set
        if (subnetName == null) {
            throw new ApiException("Missing the required parameter 'subnetName' when calling subnetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subnetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subnetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subnetParameters' is set
        if (subnetParameters == null) {
            throw new ApiException("Missing the required parameter 'subnetParameters' when calling subnetsCreateOrUpdate(Async)");
        }

        return subnetsCreateOrUpdateCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, subnetParameters, _callback);

    }

    /**
     * 
     * The Put Subnet operation creates/updates a subnet in the specified virtual network
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param subnetParameters Parameters supplied to the create/update Subnet operation (required)
     * @return Subnet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Subnet subnetsCreateOrUpdate(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, Subnet subnetParameters) throws ApiException {
        ApiResponse<Subnet> localVarResp = subnetsCreateOrUpdateWithHttpInfo(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, subnetParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The Put Subnet operation creates/updates a subnet in the specified virtual network
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param subnetParameters Parameters supplied to the create/update Subnet operation (required)
     * @return ApiResponse&lt;Subnet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subnet> subnetsCreateOrUpdateWithHttpInfo(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, Subnet subnetParameters) throws ApiException {
        okhttp3.Call localVarCall = subnetsCreateOrUpdateValidateBeforeCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, subnetParameters, null);
        Type localVarReturnType = new TypeToken<Subnet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Put Subnet operation creates/updates a subnet in the specified virtual network
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param subnetParameters Parameters supplied to the create/update Subnet operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subnetsCreateOrUpdateAsync(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, Subnet subnetParameters, final ApiCallback<Subnet> _callback) throws ApiException {

        okhttp3.Call localVarCall = subnetsCreateOrUpdateValidateBeforeCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, subnetParameters, _callback);
        Type localVarReturnType = new TypeToken<Subnet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subnetsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subnetsDeleteCall(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "subnetName" + "}", localVarApiClient.escapeString(subnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subnetsDeleteValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subnetsDelete(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling subnetsDelete(Async)");
        }

        // verify the required parameter 'subnetName' is set
        if (subnetName == null) {
            throw new ApiException("Missing the required parameter 'subnetName' when calling subnetsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subnetsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subnetsDelete(Async)");
        }

        return subnetsDeleteCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The delete subnet operation deletes the specified subnet.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subnetsDelete(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId) throws ApiException {
        subnetsDeleteWithHttpInfo(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId);
    }

    /**
     * 
     * The delete subnet operation deletes the specified subnet.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subnetsDeleteWithHttpInfo(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = subnetsDeleteValidateBeforeCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The delete subnet operation deletes the specified subnet.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subnetsDeleteAsync(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subnetsDeleteValidateBeforeCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subnetsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand expand references resources. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subnetsGetCall(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "subnetName" + "}", localVarApiClient.escapeString(subnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subnetsGetValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subnetsGet(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling subnetsGet(Async)");
        }

        // verify the required parameter 'subnetName' is set
        if (subnetName == null) {
            throw new ApiException("Missing the required parameter 'subnetName' when calling subnetsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subnetsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subnetsGet(Async)");
        }

        return subnetsGetCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, $expand, _callback);

    }

    /**
     * 
     * The Get subnet operation retrieves information about the specified subnet.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand expand references resources. (optional)
     * @return Subnet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Subnet subnetsGet(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        ApiResponse<Subnet> localVarResp = subnetsGetWithHttpInfo(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * The Get subnet operation retrieves information about the specified subnet.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand expand references resources. (optional)
     * @return ApiResponse&lt;Subnet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subnet> subnetsGetWithHttpInfo(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        okhttp3.Call localVarCall = subnetsGetValidateBeforeCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, $expand, null);
        Type localVarReturnType = new TypeToken<Subnet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Get subnet operation retrieves information about the specified subnet.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param subnetName The name of the subnet. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand expand references resources. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subnetsGetAsync(String resourceGroupName, String virtualNetworkName, String subnetName, String apiVersion, String subscriptionId, String $expand, final ApiCallback<Subnet> _callback) throws ApiException {

        okhttp3.Call localVarCall = subnetsGetValidateBeforeCall(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, $expand, _callback);
        Type localVarReturnType = new TypeToken<Subnet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subnetsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subnetsListCall(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subnetsListValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subnetsList(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling subnetsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subnetsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subnetsList(Async)");
        }

        return subnetsListCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The List subnets operation retrieves all the subnets in a virtual network.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SubnetListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SubnetListResult subnetsList(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SubnetListResult> localVarResp = subnetsListWithHttpInfo(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * The List subnets operation retrieves all the subnets in a virtual network.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SubnetListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubnetListResult> subnetsListWithHttpInfo(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = subnetsListValidateBeforeCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SubnetListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The List subnets operation retrieves all the subnets in a virtual network.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subnetsListAsync(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, final ApiCallback<SubnetListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = subnetsListValidateBeforeCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SubnetListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
