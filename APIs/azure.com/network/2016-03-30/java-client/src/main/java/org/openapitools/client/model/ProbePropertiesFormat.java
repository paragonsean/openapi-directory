/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProbePropertiesFormat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:21.906013-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProbePropertiesFormat {
  public static final String SERIALIZED_NAME_INTERVAL_IN_SECONDS = "intervalInSeconds";
  @SerializedName(SERIALIZED_NAME_INTERVAL_IN_SECONDS)
  private Integer intervalInSeconds;

  public static final String SERIALIZED_NAME_LOAD_BALANCING_RULES = "loadBalancingRules";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCING_RULES)
  private List<SubResource> loadBalancingRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_PROBES = "numberOfProbes";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PROBES)
  private Integer numberOfProbes;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  /**
   * Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    HTTP("Http"),
    
    TCP("Tcp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_REQUEST_PATH = "requestPath";
  @SerializedName(SERIALIZED_NAME_REQUEST_PATH)
  private String requestPath;

  public ProbePropertiesFormat() {
  }

  public ProbePropertiesFormat intervalInSeconds(Integer intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
    return this;
  }

  /**
   * Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5
   * @return intervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getIntervalInSeconds() {
    return intervalInSeconds;
  }

  public void setIntervalInSeconds(Integer intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
  }


  public ProbePropertiesFormat loadBalancingRules(List<SubResource> loadBalancingRules) {
    this.loadBalancingRules = loadBalancingRules;
    return this;
  }

  public ProbePropertiesFormat addLoadBalancingRulesItem(SubResource loadBalancingRulesItem) {
    if (this.loadBalancingRules == null) {
      this.loadBalancingRules = new ArrayList<>();
    }
    this.loadBalancingRules.add(loadBalancingRulesItem);
    return this;
  }

  /**
   * Gets Load balancer rules that use this probe
   * @return loadBalancingRules
   */
  @javax.annotation.Nullable
  public List<SubResource> getLoadBalancingRules() {
    return loadBalancingRules;
  }

  public void setLoadBalancingRules(List<SubResource> loadBalancingRules) {
    this.loadBalancingRules = loadBalancingRules;
  }


  public ProbePropertiesFormat numberOfProbes(Integer numberOfProbes) {
    this.numberOfProbes = numberOfProbes;
    return this;
  }

  /**
   * Gets or sets the number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure. 
   * @return numberOfProbes
   */
  @javax.annotation.Nullable
  public Integer getNumberOfProbes() {
    return numberOfProbes;
  }

  public void setNumberOfProbes(Integer numberOfProbes) {
    this.numberOfProbes = numberOfProbes;
  }


  public ProbePropertiesFormat port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.
   * @return port
   */
  @javax.annotation.Nonnull
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ProbePropertiesFormat protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public ProbePropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ProbePropertiesFormat requestPath(String requestPath) {
    this.requestPath = requestPath;
    return this;
  }

  /**
   * Gets or sets the URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value
   * @return requestPath
   */
  @javax.annotation.Nullable
  public String getRequestPath() {
    return requestPath;
  }

  public void setRequestPath(String requestPath) {
    this.requestPath = requestPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProbePropertiesFormat probePropertiesFormat = (ProbePropertiesFormat) o;
    return Objects.equals(this.intervalInSeconds, probePropertiesFormat.intervalInSeconds) &&
        Objects.equals(this.loadBalancingRules, probePropertiesFormat.loadBalancingRules) &&
        Objects.equals(this.numberOfProbes, probePropertiesFormat.numberOfProbes) &&
        Objects.equals(this.port, probePropertiesFormat.port) &&
        Objects.equals(this.protocol, probePropertiesFormat.protocol) &&
        Objects.equals(this.provisioningState, probePropertiesFormat.provisioningState) &&
        Objects.equals(this.requestPath, probePropertiesFormat.requestPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intervalInSeconds, loadBalancingRules, numberOfProbes, port, protocol, provisioningState, requestPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProbePropertiesFormat {\n");
    sb.append("    intervalInSeconds: ").append(toIndentedString(intervalInSeconds)).append("\n");
    sb.append("    loadBalancingRules: ").append(toIndentedString(loadBalancingRules)).append("\n");
    sb.append("    numberOfProbes: ").append(toIndentedString(numberOfProbes)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    requestPath: ").append(toIndentedString(requestPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intervalInSeconds");
    openapiFields.add("loadBalancingRules");
    openapiFields.add("numberOfProbes");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");
    openapiFields.add("requestPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("protocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProbePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProbePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProbePropertiesFormat is not found in the empty JSON string", ProbePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProbePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProbePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProbePropertiesFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("loadBalancingRules") != null && !jsonObj.get("loadBalancingRules").isJsonNull()) {
        JsonArray jsonArrayloadBalancingRules = jsonObj.getAsJsonArray("loadBalancingRules");
        if (jsonArrayloadBalancingRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loadBalancingRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loadBalancingRules` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancingRules").toString()));
          }

          // validate the optional field `loadBalancingRules` (array)
          for (int i = 0; i < jsonArrayloadBalancingRules.size(); i++) {
            SubResource.validateJsonElement(jsonArrayloadBalancingRules.get(i));
          };
        }
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("requestPath") != null && !jsonObj.get("requestPath").isJsonNull()) && !jsonObj.get("requestPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProbePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProbePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProbePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProbePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ProbePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ProbePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProbePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProbePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProbePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ProbePropertiesFormat
   */
  public static ProbePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProbePropertiesFormat.class);
  }

  /**
   * Convert an instance of ProbePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

