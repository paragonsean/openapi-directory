/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IPConfiguration;
import org.openapitools.client.model.NetworkSecurityGroup;
import org.openapitools.client.model.RouteTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubnetPropertiesFormat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:21.906013-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubnetPropertiesFormat {
  public static final String SERIALIZED_NAME_ADDRESS_PREFIX = "addressPrefix";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PREFIX)
  private String addressPrefix;

  public static final String SERIALIZED_NAME_IP_CONFIGURATIONS = "ipConfigurations";
  @SerializedName(SERIALIZED_NAME_IP_CONFIGURATIONS)
  private List<IPConfiguration> ipConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_SECURITY_GROUP = "networkSecurityGroup";
  @SerializedName(SERIALIZED_NAME_NETWORK_SECURITY_GROUP)
  private NetworkSecurityGroup networkSecurityGroup;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_ROUTE_TABLE = "routeTable";
  @SerializedName(SERIALIZED_NAME_ROUTE_TABLE)
  private RouteTable routeTable;

  public SubnetPropertiesFormat() {
  }

  public SubnetPropertiesFormat addressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
    return this;
  }

  /**
   * Gets or sets Address prefix for the subnet.
   * @return addressPrefix
   */
  @javax.annotation.Nullable
  public String getAddressPrefix() {
    return addressPrefix;
  }

  public void setAddressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
  }


  public SubnetPropertiesFormat ipConfigurations(List<IPConfiguration> ipConfigurations) {
    this.ipConfigurations = ipConfigurations;
    return this;
  }

  public SubnetPropertiesFormat addIpConfigurationsItem(IPConfiguration ipConfigurationsItem) {
    if (this.ipConfigurations == null) {
      this.ipConfigurations = new ArrayList<>();
    }
    this.ipConfigurations.add(ipConfigurationsItem);
    return this;
  }

  /**
   * Gets array of references to the network interface IP configurations using subnet
   * @return ipConfigurations
   */
  @javax.annotation.Nullable
  public List<IPConfiguration> getIpConfigurations() {
    return ipConfigurations;
  }

  public void setIpConfigurations(List<IPConfiguration> ipConfigurations) {
    this.ipConfigurations = ipConfigurations;
  }


  public SubnetPropertiesFormat networkSecurityGroup(NetworkSecurityGroup networkSecurityGroup) {
    this.networkSecurityGroup = networkSecurityGroup;
    return this;
  }

  /**
   * Get networkSecurityGroup
   * @return networkSecurityGroup
   */
  @javax.annotation.Nullable
  public NetworkSecurityGroup getNetworkSecurityGroup() {
    return networkSecurityGroup;
  }

  public void setNetworkSecurityGroup(NetworkSecurityGroup networkSecurityGroup) {
    this.networkSecurityGroup = networkSecurityGroup;
  }


  public SubnetPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public SubnetPropertiesFormat routeTable(RouteTable routeTable) {
    this.routeTable = routeTable;
    return this;
  }

  /**
   * Get routeTable
   * @return routeTable
   */
  @javax.annotation.Nullable
  public RouteTable getRouteTable() {
    return routeTable;
  }

  public void setRouteTable(RouteTable routeTable) {
    this.routeTable = routeTable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubnetPropertiesFormat subnetPropertiesFormat = (SubnetPropertiesFormat) o;
    return Objects.equals(this.addressPrefix, subnetPropertiesFormat.addressPrefix) &&
        Objects.equals(this.ipConfigurations, subnetPropertiesFormat.ipConfigurations) &&
        Objects.equals(this.networkSecurityGroup, subnetPropertiesFormat.networkSecurityGroup) &&
        Objects.equals(this.provisioningState, subnetPropertiesFormat.provisioningState) &&
        Objects.equals(this.routeTable, subnetPropertiesFormat.routeTable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPrefix, ipConfigurations, networkSecurityGroup, provisioningState, routeTable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubnetPropertiesFormat {\n");
    sb.append("    addressPrefix: ").append(toIndentedString(addressPrefix)).append("\n");
    sb.append("    ipConfigurations: ").append(toIndentedString(ipConfigurations)).append("\n");
    sb.append("    networkSecurityGroup: ").append(toIndentedString(networkSecurityGroup)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    routeTable: ").append(toIndentedString(routeTable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressPrefix");
    openapiFields.add("ipConfigurations");
    openapiFields.add("networkSecurityGroup");
    openapiFields.add("provisioningState");
    openapiFields.add("routeTable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubnetPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubnetPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubnetPropertiesFormat is not found in the empty JSON string", SubnetPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubnetPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubnetPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressPrefix") != null && !jsonObj.get("addressPrefix").isJsonNull()) && !jsonObj.get("addressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressPrefix").toString()));
      }
      if (jsonObj.get("ipConfigurations") != null && !jsonObj.get("ipConfigurations").isJsonNull()) {
        JsonArray jsonArrayipConfigurations = jsonObj.getAsJsonArray("ipConfigurations");
        if (jsonArrayipConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("ipConfigurations").toString()));
          }

          // validate the optional field `ipConfigurations` (array)
          for (int i = 0; i < jsonArrayipConfigurations.size(); i++) {
            IPConfiguration.validateJsonElement(jsonArrayipConfigurations.get(i));
          };
        }
      }
      // validate the optional field `networkSecurityGroup`
      if (jsonObj.get("networkSecurityGroup") != null && !jsonObj.get("networkSecurityGroup").isJsonNull()) {
        NetworkSecurityGroup.validateJsonElement(jsonObj.get("networkSecurityGroup"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `routeTable`
      if (jsonObj.get("routeTable") != null && !jsonObj.get("routeTable").isJsonNull()) {
        RouteTable.validateJsonElement(jsonObj.get("routeTable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubnetPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubnetPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubnetPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubnetPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<SubnetPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, SubnetPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubnetPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubnetPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubnetPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to SubnetPropertiesFormat
   */
  public static SubnetPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubnetPropertiesFormat.class);
  }

  /**
   * Convert an instance of SubnetPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

