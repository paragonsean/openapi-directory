/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoutesApi_H
#define OAI_OAIRoutesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRoute.h"
#include "OAIRouteListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoutesApi : public QObject {
    Q_OBJECT

public:
    OAIRoutesApi(const int timeOut = 0);
    ~OAIRoutesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_table_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  route_parameters OAIRoute [required]
    */
    virtual void routesCreateOrUpdate(const QString &resource_group_name, const QString &route_table_name, const QString &route_name, const QString &api_version, const QString &subscription_id, const OAIRoute &route_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_table_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routesDelete(const QString &resource_group_name, const QString &route_table_name, const QString &route_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_table_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routesGet(const QString &resource_group_name, const QString &route_table_name, const QString &route_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routesList(const QString &resource_group_name, const QString &route_table_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void routesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void routesDeleteCallback(OAIHttpRequestWorker *worker);
    void routesGetCallback(OAIHttpRequestWorker *worker);
    void routesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void routesCreateOrUpdateSignal(OAIRoute summary);
    void routesDeleteSignal();
    void routesGetSignal(OAIRoute summary);
    void routesListSignal(OAIRouteListResult summary);


    void routesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRoute summary);
    void routesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void routesGetSignalFull(OAIHttpRequestWorker *worker, OAIRoute summary);
    void routesListSignalFull(OAIHttpRequestWorker *worker, OAIRouteListResult summary);

    Q_DECL_DEPRECATED_X("Use routesCreateOrUpdateSignalError() instead")
    void routesCreateOrUpdateSignalE(OAIRoute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routesCreateOrUpdateSignalError(OAIRoute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routesDeleteSignalError() instead")
    void routesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void routesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routesGetSignalError() instead")
    void routesGetSignalE(OAIRoute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routesGetSignalError(OAIRoute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routesListSignalError() instead")
    void routesListSignalE(OAIRouteListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routesListSignalError(OAIRouteListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use routesCreateOrUpdateSignalErrorFull() instead")
    void routesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routesDeleteSignalErrorFull() instead")
    void routesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routesGetSignalErrorFull() instead")
    void routesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routesListSignalErrorFull() instead")
    void routesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
