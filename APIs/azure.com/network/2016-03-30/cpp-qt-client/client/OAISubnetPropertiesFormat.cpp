/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubnetPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubnetPropertiesFormat::OAISubnetPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubnetPropertiesFormat::OAISubnetPropertiesFormat() {
    this->initializeModel();
}

OAISubnetPropertiesFormat::~OAISubnetPropertiesFormat() {}

void OAISubnetPropertiesFormat::initializeModel() {

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_ip_configurations_isSet = false;
    m_ip_configurations_isValid = false;

    m_network_security_group_isSet = false;
    m_network_security_group_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_route_table_isSet = false;
    m_route_table_isValid = false;
}

void OAISubnetPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubnetPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_ip_configurations, json[QString("ipConfigurations")]);
    m_ip_configurations_isSet = !json[QString("ipConfigurations")].isNull() && m_ip_configurations_isValid;

    m_network_security_group_isValid = ::OpenAPI::fromJsonValue(m_network_security_group, json[QString("networkSecurityGroup")]);
    m_network_security_group_isSet = !json[QString("networkSecurityGroup")].isNull() && m_network_security_group_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_route_table_isValid = ::OpenAPI::fromJsonValue(m_route_table, json[QString("routeTable")]);
    m_route_table_isSet = !json[QString("routeTable")].isNull() && m_route_table_isValid;
}

QString OAISubnetPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubnetPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_address_prefix_isSet) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_ip_configurations.size() > 0) {
        obj.insert(QString("ipConfigurations"), ::OpenAPI::toJsonValue(m_ip_configurations));
    }
    if (m_network_security_group.isSet()) {
        obj.insert(QString("networkSecurityGroup"), ::OpenAPI::toJsonValue(m_network_security_group));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_route_table.isSet()) {
        obj.insert(QString("routeTable"), ::OpenAPI::toJsonValue(m_route_table));
    }
    return obj;
}

QString OAISubnetPropertiesFormat::getAddressPrefix() const {
    return m_address_prefix;
}
void OAISubnetPropertiesFormat::setAddressPrefix(const QString &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAISubnetPropertiesFormat::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAISubnetPropertiesFormat::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QList<OAIIPConfiguration> OAISubnetPropertiesFormat::getIpConfigurations() const {
    return m_ip_configurations;
}
void OAISubnetPropertiesFormat::setIpConfigurations(const QList<OAIIPConfiguration> &ip_configurations) {
    m_ip_configurations = ip_configurations;
    m_ip_configurations_isSet = true;
}

bool OAISubnetPropertiesFormat::is_ip_configurations_Set() const{
    return m_ip_configurations_isSet;
}

bool OAISubnetPropertiesFormat::is_ip_configurations_Valid() const{
    return m_ip_configurations_isValid;
}

OAINetworkSecurityGroup OAISubnetPropertiesFormat::getNetworkSecurityGroup() const {
    return m_network_security_group;
}
void OAISubnetPropertiesFormat::setNetworkSecurityGroup(const OAINetworkSecurityGroup &network_security_group) {
    m_network_security_group = network_security_group;
    m_network_security_group_isSet = true;
}

bool OAISubnetPropertiesFormat::is_network_security_group_Set() const{
    return m_network_security_group_isSet;
}

bool OAISubnetPropertiesFormat::is_network_security_group_Valid() const{
    return m_network_security_group_isValid;
}

QString OAISubnetPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAISubnetPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAISubnetPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAISubnetPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIRouteTable OAISubnetPropertiesFormat::getRouteTable() const {
    return m_route_table;
}
void OAISubnetPropertiesFormat::setRouteTable(const OAIRouteTable &route_table) {
    m_route_table = route_table;
    m_route_table_isSet = true;
}

bool OAISubnetPropertiesFormat::is_route_table_Set() const{
    return m_route_table_isSet;
}

bool OAISubnetPropertiesFormat::is_route_table_Valid() const{
    return m_route_table_isValid;
}

bool OAISubnetPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_security_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubnetPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
