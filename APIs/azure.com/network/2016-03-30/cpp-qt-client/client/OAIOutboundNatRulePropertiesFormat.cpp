/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutboundNatRulePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutboundNatRulePropertiesFormat::OAIOutboundNatRulePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutboundNatRulePropertiesFormat::OAIOutboundNatRulePropertiesFormat() {
    this->initializeModel();
}

OAIOutboundNatRulePropertiesFormat::~OAIOutboundNatRulePropertiesFormat() {}

void OAIOutboundNatRulePropertiesFormat::initializeModel() {

    m_allocated_outbound_ports_isSet = false;
    m_allocated_outbound_ports_isValid = false;

    m_backend_address_pool_isSet = false;
    m_backend_address_pool_isValid = false;

    m_frontend_ip_configurations_isSet = false;
    m_frontend_ip_configurations_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIOutboundNatRulePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutboundNatRulePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_allocated_outbound_ports_isValid = ::OpenAPI::fromJsonValue(m_allocated_outbound_ports, json[QString("allocatedOutboundPorts")]);
    m_allocated_outbound_ports_isSet = !json[QString("allocatedOutboundPorts")].isNull() && m_allocated_outbound_ports_isValid;

    m_backend_address_pool_isValid = ::OpenAPI::fromJsonValue(m_backend_address_pool, json[QString("backendAddressPool")]);
    m_backend_address_pool_isSet = !json[QString("backendAddressPool")].isNull() && m_backend_address_pool_isValid;

    m_frontend_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_frontend_ip_configurations, json[QString("frontendIPConfigurations")]);
    m_frontend_ip_configurations_isSet = !json[QString("frontendIPConfigurations")].isNull() && m_frontend_ip_configurations_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIOutboundNatRulePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutboundNatRulePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_outbound_ports_isSet) {
        obj.insert(QString("allocatedOutboundPorts"), ::OpenAPI::toJsonValue(m_allocated_outbound_ports));
    }
    if (m_backend_address_pool.isSet()) {
        obj.insert(QString("backendAddressPool"), ::OpenAPI::toJsonValue(m_backend_address_pool));
    }
    if (m_frontend_ip_configurations.size() > 0) {
        obj.insert(QString("frontendIPConfigurations"), ::OpenAPI::toJsonValue(m_frontend_ip_configurations));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

qint32 OAIOutboundNatRulePropertiesFormat::getAllocatedOutboundPorts() const {
    return m_allocated_outbound_ports;
}
void OAIOutboundNatRulePropertiesFormat::setAllocatedOutboundPorts(const qint32 &allocated_outbound_ports) {
    m_allocated_outbound_ports = allocated_outbound_ports;
    m_allocated_outbound_ports_isSet = true;
}

bool OAIOutboundNatRulePropertiesFormat::is_allocated_outbound_ports_Set() const{
    return m_allocated_outbound_ports_isSet;
}

bool OAIOutboundNatRulePropertiesFormat::is_allocated_outbound_ports_Valid() const{
    return m_allocated_outbound_ports_isValid;
}

OAISubResource OAIOutboundNatRulePropertiesFormat::getBackendAddressPool() const {
    return m_backend_address_pool;
}
void OAIOutboundNatRulePropertiesFormat::setBackendAddressPool(const OAISubResource &backend_address_pool) {
    m_backend_address_pool = backend_address_pool;
    m_backend_address_pool_isSet = true;
}

bool OAIOutboundNatRulePropertiesFormat::is_backend_address_pool_Set() const{
    return m_backend_address_pool_isSet;
}

bool OAIOutboundNatRulePropertiesFormat::is_backend_address_pool_Valid() const{
    return m_backend_address_pool_isValid;
}

QList<OAISubResource> OAIOutboundNatRulePropertiesFormat::getFrontendIpConfigurations() const {
    return m_frontend_ip_configurations;
}
void OAIOutboundNatRulePropertiesFormat::setFrontendIpConfigurations(const QList<OAISubResource> &frontend_ip_configurations) {
    m_frontend_ip_configurations = frontend_ip_configurations;
    m_frontend_ip_configurations_isSet = true;
}

bool OAIOutboundNatRulePropertiesFormat::is_frontend_ip_configurations_Set() const{
    return m_frontend_ip_configurations_isSet;
}

bool OAIOutboundNatRulePropertiesFormat::is_frontend_ip_configurations_Valid() const{
    return m_frontend_ip_configurations_isValid;
}

QString OAIOutboundNatRulePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIOutboundNatRulePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIOutboundNatRulePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIOutboundNatRulePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIOutboundNatRulePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_outbound_ports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_address_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutboundNatRulePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backend_address_pool_isValid && true;
}

} // namespace OpenAPI
