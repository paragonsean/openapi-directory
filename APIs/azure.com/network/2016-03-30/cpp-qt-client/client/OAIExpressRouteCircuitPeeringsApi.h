/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpressRouteCircuitPeeringsApi_H
#define OAI_OAIExpressRouteCircuitPeeringsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExpressRouteCircuitPeering.h"
#include "OAIExpressRouteCircuitPeeringListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpressRouteCircuitPeeringsApi : public QObject {
    Q_OBJECT

public:
    OAIExpressRouteCircuitPeeringsApi(const int timeOut = 0);
    ~OAIExpressRouteCircuitPeeringsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  peering_parameters OAIExpressRouteCircuitPeering [required]
    */
    virtual void expressRouteCircuitPeeringsCreateOrUpdate(const QString &resource_group_name, const QString &circuit_name, const QString &peering_name, const QString &api_version, const QString &subscription_id, const OAIExpressRouteCircuitPeering &peering_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitPeeringsDelete(const QString &resource_group_name, const QString &circuit_name, const QString &peering_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitPeeringsGet(const QString &resource_group_name, const QString &circuit_name, const QString &peering_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitPeeringsList(const QString &resource_group_name, const QString &circuit_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expressRouteCircuitPeeringsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitPeeringsDeleteCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitPeeringsGetCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitPeeringsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expressRouteCircuitPeeringsCreateOrUpdateSignal(OAIExpressRouteCircuitPeering summary);
    void expressRouteCircuitPeeringsDeleteSignal();
    void expressRouteCircuitPeeringsGetSignal(OAIExpressRouteCircuitPeering summary);
    void expressRouteCircuitPeeringsListSignal(OAIExpressRouteCircuitPeeringListResult summary);


    void expressRouteCircuitPeeringsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuitPeering summary);
    void expressRouteCircuitPeeringsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void expressRouteCircuitPeeringsGetSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuitPeering summary);
    void expressRouteCircuitPeeringsListSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuitPeeringListResult summary);

    Q_DECL_DEPRECATED_X("Use expressRouteCircuitPeeringsCreateOrUpdateSignalError() instead")
    void expressRouteCircuitPeeringsCreateOrUpdateSignalE(OAIExpressRouteCircuitPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitPeeringsCreateOrUpdateSignalError(OAIExpressRouteCircuitPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitPeeringsDeleteSignalError() instead")
    void expressRouteCircuitPeeringsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitPeeringsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitPeeringsGetSignalError() instead")
    void expressRouteCircuitPeeringsGetSignalE(OAIExpressRouteCircuitPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitPeeringsGetSignalError(OAIExpressRouteCircuitPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitPeeringsListSignalError() instead")
    void expressRouteCircuitPeeringsListSignalE(OAIExpressRouteCircuitPeeringListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitPeeringsListSignalError(OAIExpressRouteCircuitPeeringListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expressRouteCircuitPeeringsCreateOrUpdateSignalErrorFull() instead")
    void expressRouteCircuitPeeringsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitPeeringsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitPeeringsDeleteSignalErrorFull() instead")
    void expressRouteCircuitPeeringsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitPeeringsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitPeeringsGetSignalErrorFull() instead")
    void expressRouteCircuitPeeringsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitPeeringsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitPeeringsListSignalErrorFull() instead")
    void expressRouteCircuitPeeringsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitPeeringsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
