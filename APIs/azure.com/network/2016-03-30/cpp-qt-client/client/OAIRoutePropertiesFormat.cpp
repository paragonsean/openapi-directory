/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutePropertiesFormat::OAIRoutePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutePropertiesFormat::OAIRoutePropertiesFormat() {
    this->initializeModel();
}

OAIRoutePropertiesFormat::~OAIRoutePropertiesFormat() {}

void OAIRoutePropertiesFormat::initializeModel() {

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_next_hop_ip_address_isSet = false;
    m_next_hop_ip_address_isValid = false;

    m_next_hop_type_isSet = false;
    m_next_hop_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIRoutePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_next_hop_ip_address_isValid = ::OpenAPI::fromJsonValue(m_next_hop_ip_address, json[QString("nextHopIpAddress")]);
    m_next_hop_ip_address_isSet = !json[QString("nextHopIpAddress")].isNull() && m_next_hop_ip_address_isValid;

    m_next_hop_type_isValid = ::OpenAPI::fromJsonValue(m_next_hop_type, json[QString("nextHopType")]);
    m_next_hop_type_isSet = !json[QString("nextHopType")].isNull() && m_next_hop_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIRoutePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_address_prefix_isSet) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_next_hop_ip_address_isSet) {
        obj.insert(QString("nextHopIpAddress"), ::OpenAPI::toJsonValue(m_next_hop_ip_address));
    }
    if (m_next_hop_type_isSet) {
        obj.insert(QString("nextHopType"), ::OpenAPI::toJsonValue(m_next_hop_type));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIRoutePropertiesFormat::getAddressPrefix() const {
    return m_address_prefix;
}
void OAIRoutePropertiesFormat::setAddressPrefix(const QString &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAIRoutePropertiesFormat::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAIRoutePropertiesFormat::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QString OAIRoutePropertiesFormat::getNextHopIpAddress() const {
    return m_next_hop_ip_address;
}
void OAIRoutePropertiesFormat::setNextHopIpAddress(const QString &next_hop_ip_address) {
    m_next_hop_ip_address = next_hop_ip_address;
    m_next_hop_ip_address_isSet = true;
}

bool OAIRoutePropertiesFormat::is_next_hop_ip_address_Set() const{
    return m_next_hop_ip_address_isSet;
}

bool OAIRoutePropertiesFormat::is_next_hop_ip_address_Valid() const{
    return m_next_hop_ip_address_isValid;
}

QString OAIRoutePropertiesFormat::getNextHopType() const {
    return m_next_hop_type;
}
void OAIRoutePropertiesFormat::setNextHopType(const QString &next_hop_type) {
    m_next_hop_type = next_hop_type;
    m_next_hop_type_isSet = true;
}

bool OAIRoutePropertiesFormat::is_next_hop_type_Set() const{
    return m_next_hop_type_isSet;
}

bool OAIRoutePropertiesFormat::is_next_hop_type_Valid() const{
    return m_next_hop_type_isValid;
}

QString OAIRoutePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRoutePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRoutePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRoutePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIRoutePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_next_hop_type_isValid && true;
}

} // namespace OpenAPI
