/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayBackendHttpSettingsPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::OAIApplicationGatewayBackendHttpSettingsPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::OAIApplicationGatewayBackendHttpSettingsPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::~OAIApplicationGatewayBackendHttpSettingsPropertiesFormat() {}

void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::initializeModel() {

    m_cookie_based_affinity_isSet = false;
    m_cookie_based_affinity_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_probe_isSet = false;
    m_probe_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_request_timeout_isSet = false;
    m_request_timeout_isValid = false;
}

void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_cookie_based_affinity_isValid = ::OpenAPI::fromJsonValue(m_cookie_based_affinity, json[QString("cookieBasedAffinity")]);
    m_cookie_based_affinity_isSet = !json[QString("cookieBasedAffinity")].isNull() && m_cookie_based_affinity_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_probe_isValid = ::OpenAPI::fromJsonValue(m_probe, json[QString("probe")]);
    m_probe_isSet = !json[QString("probe")].isNull() && m_probe_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_request_timeout_isValid = ::OpenAPI::fromJsonValue(m_request_timeout, json[QString("requestTimeout")]);
    m_request_timeout_isSet = !json[QString("requestTimeout")].isNull() && m_request_timeout_isValid;
}

QString OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_cookie_based_affinity_isSet) {
        obj.insert(QString("cookieBasedAffinity"), ::OpenAPI::toJsonValue(m_cookie_based_affinity));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_probe.isSet()) {
        obj.insert(QString("probe"), ::OpenAPI::toJsonValue(m_probe));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_request_timeout_isSet) {
        obj.insert(QString("requestTimeout"), ::OpenAPI::toJsonValue(m_request_timeout));
    }
    return obj;
}

QString OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::getCookieBasedAffinity() const {
    return m_cookie_based_affinity;
}
void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::setCookieBasedAffinity(const QString &cookie_based_affinity) {
    m_cookie_based_affinity = cookie_based_affinity;
    m_cookie_based_affinity_isSet = true;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_cookie_based_affinity_Set() const{
    return m_cookie_based_affinity_isSet;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_cookie_based_affinity_Valid() const{
    return m_cookie_based_affinity_isValid;
}

qint32 OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::getPort() const {
    return m_port;
}
void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_port_Set() const{
    return m_port_isSet;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_port_Valid() const{
    return m_port_isValid;
}

OAISubResource OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::getProbe() const {
    return m_probe;
}
void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::setProbe(const OAISubResource &probe) {
    m_probe = probe;
    m_probe_isSet = true;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_probe_Set() const{
    return m_probe_isSet;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_probe_Valid() const{
    return m_probe_isValid;
}

QString OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::getProtocol() const {
    return m_protocol;
}
void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint32 OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::getRequestTimeout() const {
    return m_request_timeout;
}
void OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::setRequestTimeout(const qint32 &request_timeout) {
    m_request_timeout = request_timeout;
    m_request_timeout_isSet = true;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_request_timeout_Set() const{
    return m_request_timeout_isSet;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::is_request_timeout_Valid() const{
    return m_request_timeout_isValid;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cookie_based_affinity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayBackendHttpSettingsPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
