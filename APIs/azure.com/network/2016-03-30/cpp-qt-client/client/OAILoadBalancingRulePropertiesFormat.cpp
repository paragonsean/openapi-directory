/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancingRulePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancingRulePropertiesFormat::OAILoadBalancingRulePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancingRulePropertiesFormat::OAILoadBalancingRulePropertiesFormat() {
    this->initializeModel();
}

OAILoadBalancingRulePropertiesFormat::~OAILoadBalancingRulePropertiesFormat() {}

void OAILoadBalancingRulePropertiesFormat::initializeModel() {

    m_backend_address_pool_isSet = false;
    m_backend_address_pool_isValid = false;

    m_backend_port_isSet = false;
    m_backend_port_isValid = false;

    m_enable_floating_ip_isSet = false;
    m_enable_floating_ip_isValid = false;

    m_frontend_ip_configuration_isSet = false;
    m_frontend_ip_configuration_isValid = false;

    m_frontend_port_isSet = false;
    m_frontend_port_isValid = false;

    m_idle_timeout_in_minutes_isSet = false;
    m_idle_timeout_in_minutes_isValid = false;

    m_load_distribution_isSet = false;
    m_load_distribution_isValid = false;

    m_probe_isSet = false;
    m_probe_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAILoadBalancingRulePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancingRulePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_backend_address_pool_isValid = ::OpenAPI::fromJsonValue(m_backend_address_pool, json[QString("backendAddressPool")]);
    m_backend_address_pool_isSet = !json[QString("backendAddressPool")].isNull() && m_backend_address_pool_isValid;

    m_backend_port_isValid = ::OpenAPI::fromJsonValue(m_backend_port, json[QString("backendPort")]);
    m_backend_port_isSet = !json[QString("backendPort")].isNull() && m_backend_port_isValid;

    m_enable_floating_ip_isValid = ::OpenAPI::fromJsonValue(m_enable_floating_ip, json[QString("enableFloatingIP")]);
    m_enable_floating_ip_isSet = !json[QString("enableFloatingIP")].isNull() && m_enable_floating_ip_isValid;

    m_frontend_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_frontend_ip_configuration, json[QString("frontendIPConfiguration")]);
    m_frontend_ip_configuration_isSet = !json[QString("frontendIPConfiguration")].isNull() && m_frontend_ip_configuration_isValid;

    m_frontend_port_isValid = ::OpenAPI::fromJsonValue(m_frontend_port, json[QString("frontendPort")]);
    m_frontend_port_isSet = !json[QString("frontendPort")].isNull() && m_frontend_port_isValid;

    m_idle_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout_in_minutes, json[QString("idleTimeoutInMinutes")]);
    m_idle_timeout_in_minutes_isSet = !json[QString("idleTimeoutInMinutes")].isNull() && m_idle_timeout_in_minutes_isValid;

    m_load_distribution_isValid = ::OpenAPI::fromJsonValue(m_load_distribution, json[QString("loadDistribution")]);
    m_load_distribution_isSet = !json[QString("loadDistribution")].isNull() && m_load_distribution_isValid;

    m_probe_isValid = ::OpenAPI::fromJsonValue(m_probe, json[QString("probe")]);
    m_probe_isSet = !json[QString("probe")].isNull() && m_probe_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAILoadBalancingRulePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancingRulePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_address_pool.isSet()) {
        obj.insert(QString("backendAddressPool"), ::OpenAPI::toJsonValue(m_backend_address_pool));
    }
    if (m_backend_port_isSet) {
        obj.insert(QString("backendPort"), ::OpenAPI::toJsonValue(m_backend_port));
    }
    if (m_enable_floating_ip_isSet) {
        obj.insert(QString("enableFloatingIP"), ::OpenAPI::toJsonValue(m_enable_floating_ip));
    }
    if (m_frontend_ip_configuration.isSet()) {
        obj.insert(QString("frontendIPConfiguration"), ::OpenAPI::toJsonValue(m_frontend_ip_configuration));
    }
    if (m_frontend_port_isSet) {
        obj.insert(QString("frontendPort"), ::OpenAPI::toJsonValue(m_frontend_port));
    }
    if (m_idle_timeout_in_minutes_isSet) {
        obj.insert(QString("idleTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_idle_timeout_in_minutes));
    }
    if (m_load_distribution_isSet) {
        obj.insert(QString("loadDistribution"), ::OpenAPI::toJsonValue(m_load_distribution));
    }
    if (m_probe.isSet()) {
        obj.insert(QString("probe"), ::OpenAPI::toJsonValue(m_probe));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

OAISubResource OAILoadBalancingRulePropertiesFormat::getBackendAddressPool() const {
    return m_backend_address_pool;
}
void OAILoadBalancingRulePropertiesFormat::setBackendAddressPool(const OAISubResource &backend_address_pool) {
    m_backend_address_pool = backend_address_pool;
    m_backend_address_pool_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_backend_address_pool_Set() const{
    return m_backend_address_pool_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_backend_address_pool_Valid() const{
    return m_backend_address_pool_isValid;
}

qint32 OAILoadBalancingRulePropertiesFormat::getBackendPort() const {
    return m_backend_port;
}
void OAILoadBalancingRulePropertiesFormat::setBackendPort(const qint32 &backend_port) {
    m_backend_port = backend_port;
    m_backend_port_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_backend_port_Set() const{
    return m_backend_port_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_backend_port_Valid() const{
    return m_backend_port_isValid;
}

bool OAILoadBalancingRulePropertiesFormat::isEnableFloatingIp() const {
    return m_enable_floating_ip;
}
void OAILoadBalancingRulePropertiesFormat::setEnableFloatingIp(const bool &enable_floating_ip) {
    m_enable_floating_ip = enable_floating_ip;
    m_enable_floating_ip_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_enable_floating_ip_Set() const{
    return m_enable_floating_ip_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_enable_floating_ip_Valid() const{
    return m_enable_floating_ip_isValid;
}

OAISubResource OAILoadBalancingRulePropertiesFormat::getFrontendIpConfiguration() const {
    return m_frontend_ip_configuration;
}
void OAILoadBalancingRulePropertiesFormat::setFrontendIpConfiguration(const OAISubResource &frontend_ip_configuration) {
    m_frontend_ip_configuration = frontend_ip_configuration;
    m_frontend_ip_configuration_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_frontend_ip_configuration_Set() const{
    return m_frontend_ip_configuration_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_frontend_ip_configuration_Valid() const{
    return m_frontend_ip_configuration_isValid;
}

qint32 OAILoadBalancingRulePropertiesFormat::getFrontendPort() const {
    return m_frontend_port;
}
void OAILoadBalancingRulePropertiesFormat::setFrontendPort(const qint32 &frontend_port) {
    m_frontend_port = frontend_port;
    m_frontend_port_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_frontend_port_Set() const{
    return m_frontend_port_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_frontend_port_Valid() const{
    return m_frontend_port_isValid;
}

qint32 OAILoadBalancingRulePropertiesFormat::getIdleTimeoutInMinutes() const {
    return m_idle_timeout_in_minutes;
}
void OAILoadBalancingRulePropertiesFormat::setIdleTimeoutInMinutes(const qint32 &idle_timeout_in_minutes) {
    m_idle_timeout_in_minutes = idle_timeout_in_minutes;
    m_idle_timeout_in_minutes_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_idle_timeout_in_minutes_Set() const{
    return m_idle_timeout_in_minutes_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_idle_timeout_in_minutes_Valid() const{
    return m_idle_timeout_in_minutes_isValid;
}

QString OAILoadBalancingRulePropertiesFormat::getLoadDistribution() const {
    return m_load_distribution;
}
void OAILoadBalancingRulePropertiesFormat::setLoadDistribution(const QString &load_distribution) {
    m_load_distribution = load_distribution;
    m_load_distribution_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_load_distribution_Set() const{
    return m_load_distribution_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_load_distribution_Valid() const{
    return m_load_distribution_isValid;
}

OAISubResource OAILoadBalancingRulePropertiesFormat::getProbe() const {
    return m_probe;
}
void OAILoadBalancingRulePropertiesFormat::setProbe(const OAISubResource &probe) {
    m_probe = probe;
    m_probe_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_probe_Set() const{
    return m_probe_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_probe_Valid() const{
    return m_probe_isValid;
}

QString OAILoadBalancingRulePropertiesFormat::getProtocol() const {
    return m_protocol;
}
void OAILoadBalancingRulePropertiesFormat::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAILoadBalancingRulePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILoadBalancingRulePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILoadBalancingRulePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILoadBalancingRulePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAILoadBalancingRulePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_address_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_floating_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ip_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_distribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancingRulePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_frontend_port_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
