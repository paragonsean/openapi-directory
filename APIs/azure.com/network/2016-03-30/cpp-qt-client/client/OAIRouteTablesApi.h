/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRouteTablesApi_H
#define OAI_OAIRouteTablesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRouteTable.h"
#include "OAIRouteTableListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRouteTablesApi : public QObject {
    Q_OBJECT

public:
    OAIRouteTablesApi(const int timeOut = 0);
    ~OAIRouteTablesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRouteTable [required]
    */
    virtual void routeTablesCreateOrUpdate(const QString &resource_group_name, const QString &route_table_name, const QString &api_version, const QString &subscription_id, const OAIRouteTable &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeTablesDelete(const QString &resource_group_name, const QString &route_table_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  route_table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void routeTablesGet(const QString &resource_group_name, const QString &route_table_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeTablesList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void routeTablesListAll(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void routeTablesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void routeTablesDeleteCallback(OAIHttpRequestWorker *worker);
    void routeTablesGetCallback(OAIHttpRequestWorker *worker);
    void routeTablesListCallback(OAIHttpRequestWorker *worker);
    void routeTablesListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void routeTablesCreateOrUpdateSignal(OAIRouteTable summary);
    void routeTablesDeleteSignal();
    void routeTablesGetSignal(OAIRouteTable summary);
    void routeTablesListSignal(OAIRouteTableListResult summary);
    void routeTablesListAllSignal(OAIRouteTableListResult summary);


    void routeTablesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteTable summary);
    void routeTablesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void routeTablesGetSignalFull(OAIHttpRequestWorker *worker, OAIRouteTable summary);
    void routeTablesListSignalFull(OAIHttpRequestWorker *worker, OAIRouteTableListResult summary);
    void routeTablesListAllSignalFull(OAIHttpRequestWorker *worker, OAIRouteTableListResult summary);

    Q_DECL_DEPRECATED_X("Use routeTablesCreateOrUpdateSignalError() instead")
    void routeTablesCreateOrUpdateSignalE(OAIRouteTable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesCreateOrUpdateSignalError(OAIRouteTable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeTablesDeleteSignalError() instead")
    void routeTablesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeTablesGetSignalError() instead")
    void routeTablesGetSignalE(OAIRouteTable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesGetSignalError(OAIRouteTable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeTablesListSignalError() instead")
    void routeTablesListSignalE(OAIRouteTableListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesListSignalError(OAIRouteTableListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeTablesListAllSignalError() instead")
    void routeTablesListAllSignalE(OAIRouteTableListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesListAllSignalError(OAIRouteTableListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use routeTablesCreateOrUpdateSignalErrorFull() instead")
    void routeTablesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeTablesDeleteSignalErrorFull() instead")
    void routeTablesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeTablesGetSignalErrorFull() instead")
    void routeTablesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeTablesListSignalErrorFull() instead")
    void routeTablesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeTablesListAllSignalErrorFull() instead")
    void routeTablesListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeTablesListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
