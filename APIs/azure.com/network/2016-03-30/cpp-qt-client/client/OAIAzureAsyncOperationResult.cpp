/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureAsyncOperationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureAsyncOperationResult::OAIAzureAsyncOperationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureAsyncOperationResult::OAIAzureAsyncOperationResult() {
    this->initializeModel();
}

OAIAzureAsyncOperationResult::~OAIAzureAsyncOperationResult() {}

void OAIAzureAsyncOperationResult::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAzureAsyncOperationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureAsyncOperationResult::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAzureAsyncOperationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureAsyncOperationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIError OAIAzureAsyncOperationResult::getError() const {
    return m_error;
}
void OAIAzureAsyncOperationResult::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIAzureAsyncOperationResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAIAzureAsyncOperationResult::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIAzureAsyncOperationResult::getStatus() const {
    return m_status;
}
void OAIAzureAsyncOperationResult::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAzureAsyncOperationResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAzureAsyncOperationResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAzureAsyncOperationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureAsyncOperationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
