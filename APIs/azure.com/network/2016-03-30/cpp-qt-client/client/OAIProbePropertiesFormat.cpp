/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProbePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProbePropertiesFormat::OAIProbePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProbePropertiesFormat::OAIProbePropertiesFormat() {
    this->initializeModel();
}

OAIProbePropertiesFormat::~OAIProbePropertiesFormat() {}

void OAIProbePropertiesFormat::initializeModel() {

    m_interval_in_seconds_isSet = false;
    m_interval_in_seconds_isValid = false;

    m_load_balancing_rules_isSet = false;
    m_load_balancing_rules_isValid = false;

    m_number_of_probes_isSet = false;
    m_number_of_probes_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_request_path_isSet = false;
    m_request_path_isValid = false;
}

void OAIProbePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProbePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_interval_in_seconds, json[QString("intervalInSeconds")]);
    m_interval_in_seconds_isSet = !json[QString("intervalInSeconds")].isNull() && m_interval_in_seconds_isValid;

    m_load_balancing_rules_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_rules, json[QString("loadBalancingRules")]);
    m_load_balancing_rules_isSet = !json[QString("loadBalancingRules")].isNull() && m_load_balancing_rules_isValid;

    m_number_of_probes_isValid = ::OpenAPI::fromJsonValue(m_number_of_probes, json[QString("numberOfProbes")]);
    m_number_of_probes_isSet = !json[QString("numberOfProbes")].isNull() && m_number_of_probes_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_request_path_isValid = ::OpenAPI::fromJsonValue(m_request_path, json[QString("requestPath")]);
    m_request_path_isSet = !json[QString("requestPath")].isNull() && m_request_path_isValid;
}

QString OAIProbePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProbePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_in_seconds_isSet) {
        obj.insert(QString("intervalInSeconds"), ::OpenAPI::toJsonValue(m_interval_in_seconds));
    }
    if (m_load_balancing_rules.size() > 0) {
        obj.insert(QString("loadBalancingRules"), ::OpenAPI::toJsonValue(m_load_balancing_rules));
    }
    if (m_number_of_probes_isSet) {
        obj.insert(QString("numberOfProbes"), ::OpenAPI::toJsonValue(m_number_of_probes));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_request_path_isSet) {
        obj.insert(QString("requestPath"), ::OpenAPI::toJsonValue(m_request_path));
    }
    return obj;
}

qint32 OAIProbePropertiesFormat::getIntervalInSeconds() const {
    return m_interval_in_seconds;
}
void OAIProbePropertiesFormat::setIntervalInSeconds(const qint32 &interval_in_seconds) {
    m_interval_in_seconds = interval_in_seconds;
    m_interval_in_seconds_isSet = true;
}

bool OAIProbePropertiesFormat::is_interval_in_seconds_Set() const{
    return m_interval_in_seconds_isSet;
}

bool OAIProbePropertiesFormat::is_interval_in_seconds_Valid() const{
    return m_interval_in_seconds_isValid;
}

QList<OAISubResource> OAIProbePropertiesFormat::getLoadBalancingRules() const {
    return m_load_balancing_rules;
}
void OAIProbePropertiesFormat::setLoadBalancingRules(const QList<OAISubResource> &load_balancing_rules) {
    m_load_balancing_rules = load_balancing_rules;
    m_load_balancing_rules_isSet = true;
}

bool OAIProbePropertiesFormat::is_load_balancing_rules_Set() const{
    return m_load_balancing_rules_isSet;
}

bool OAIProbePropertiesFormat::is_load_balancing_rules_Valid() const{
    return m_load_balancing_rules_isValid;
}

qint32 OAIProbePropertiesFormat::getNumberOfProbes() const {
    return m_number_of_probes;
}
void OAIProbePropertiesFormat::setNumberOfProbes(const qint32 &number_of_probes) {
    m_number_of_probes = number_of_probes;
    m_number_of_probes_isSet = true;
}

bool OAIProbePropertiesFormat::is_number_of_probes_Set() const{
    return m_number_of_probes_isSet;
}

bool OAIProbePropertiesFormat::is_number_of_probes_Valid() const{
    return m_number_of_probes_isValid;
}

qint32 OAIProbePropertiesFormat::getPort() const {
    return m_port;
}
void OAIProbePropertiesFormat::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIProbePropertiesFormat::is_port_Set() const{
    return m_port_isSet;
}

bool OAIProbePropertiesFormat::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIProbePropertiesFormat::getProtocol() const {
    return m_protocol;
}
void OAIProbePropertiesFormat::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIProbePropertiesFormat::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIProbePropertiesFormat::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIProbePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIProbePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIProbePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIProbePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIProbePropertiesFormat::getRequestPath() const {
    return m_request_path;
}
void OAIProbePropertiesFormat::setRequestPath(const QString &request_path) {
    m_request_path = request_path;
    m_request_path_isSet = true;
}

bool OAIProbePropertiesFormat::is_request_path_Set() const{
    return m_request_path_isSet;
}

bool OAIProbePropertiesFormat::is_request_path_Valid() const{
    return m_request_path_isValid;
}

bool OAIProbePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_probes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProbePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_port_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
