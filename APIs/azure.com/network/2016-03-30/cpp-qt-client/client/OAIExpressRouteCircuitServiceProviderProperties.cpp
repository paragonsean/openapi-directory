/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitServiceProviderProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitServiceProviderProperties::OAIExpressRouteCircuitServiceProviderProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitServiceProviderProperties::OAIExpressRouteCircuitServiceProviderProperties() {
    this->initializeModel();
}

OAIExpressRouteCircuitServiceProviderProperties::~OAIExpressRouteCircuitServiceProviderProperties() {}

void OAIExpressRouteCircuitServiceProviderProperties::initializeModel() {

    m_bandwidth_in_mbps_isSet = false;
    m_bandwidth_in_mbps_isValid = false;

    m_peering_location_isSet = false;
    m_peering_location_isValid = false;

    m_service_provider_name_isSet = false;
    m_service_provider_name_isValid = false;
}

void OAIExpressRouteCircuitServiceProviderProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitServiceProviderProperties::fromJsonObject(QJsonObject json) {

    m_bandwidth_in_mbps_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_in_mbps, json[QString("bandwidthInMbps")]);
    m_bandwidth_in_mbps_isSet = !json[QString("bandwidthInMbps")].isNull() && m_bandwidth_in_mbps_isValid;

    m_peering_location_isValid = ::OpenAPI::fromJsonValue(m_peering_location, json[QString("peeringLocation")]);
    m_peering_location_isSet = !json[QString("peeringLocation")].isNull() && m_peering_location_isValid;

    m_service_provider_name_isValid = ::OpenAPI::fromJsonValue(m_service_provider_name, json[QString("serviceProviderName")]);
    m_service_provider_name_isSet = !json[QString("serviceProviderName")].isNull() && m_service_provider_name_isValid;
}

QString OAIExpressRouteCircuitServiceProviderProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitServiceProviderProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_in_mbps_isSet) {
        obj.insert(QString("bandwidthInMbps"), ::OpenAPI::toJsonValue(m_bandwidth_in_mbps));
    }
    if (m_peering_location_isSet) {
        obj.insert(QString("peeringLocation"), ::OpenAPI::toJsonValue(m_peering_location));
    }
    if (m_service_provider_name_isSet) {
        obj.insert(QString("serviceProviderName"), ::OpenAPI::toJsonValue(m_service_provider_name));
    }
    return obj;
}

qint32 OAIExpressRouteCircuitServiceProviderProperties::getBandwidthInMbps() const {
    return m_bandwidth_in_mbps;
}
void OAIExpressRouteCircuitServiceProviderProperties::setBandwidthInMbps(const qint32 &bandwidth_in_mbps) {
    m_bandwidth_in_mbps = bandwidth_in_mbps;
    m_bandwidth_in_mbps_isSet = true;
}

bool OAIExpressRouteCircuitServiceProviderProperties::is_bandwidth_in_mbps_Set() const{
    return m_bandwidth_in_mbps_isSet;
}

bool OAIExpressRouteCircuitServiceProviderProperties::is_bandwidth_in_mbps_Valid() const{
    return m_bandwidth_in_mbps_isValid;
}

QString OAIExpressRouteCircuitServiceProviderProperties::getPeeringLocation() const {
    return m_peering_location;
}
void OAIExpressRouteCircuitServiceProviderProperties::setPeeringLocation(const QString &peering_location) {
    m_peering_location = peering_location;
    m_peering_location_isSet = true;
}

bool OAIExpressRouteCircuitServiceProviderProperties::is_peering_location_Set() const{
    return m_peering_location_isSet;
}

bool OAIExpressRouteCircuitServiceProviderProperties::is_peering_location_Valid() const{
    return m_peering_location_isValid;
}

QString OAIExpressRouteCircuitServiceProviderProperties::getServiceProviderName() const {
    return m_service_provider_name;
}
void OAIExpressRouteCircuitServiceProviderProperties::setServiceProviderName(const QString &service_provider_name) {
    m_service_provider_name = service_provider_name;
    m_service_provider_name_isSet = true;
}

bool OAIExpressRouteCircuitServiceProviderProperties::is_service_provider_name_Set() const{
    return m_service_provider_name_isSet;
}

bool OAIExpressRouteCircuitServiceProviderProperties::is_service_provider_name_Valid() const{
    return m_service_provider_name_isValid;
}

bool OAIExpressRouteCircuitServiceProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_in_mbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitServiceProviderProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
