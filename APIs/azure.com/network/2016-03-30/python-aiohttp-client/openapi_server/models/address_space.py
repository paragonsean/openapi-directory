# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddressSpace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefixes: List[str]=None):
        """AddressSpace - a model defined in OpenAPI

        :param address_prefixes: The address_prefixes of this AddressSpace.
        """
        self.openapi_types = {
            'address_prefixes': List[str]
        }

        self.attribute_map = {
            'address_prefixes': 'addressPrefixes'
        }

        self._address_prefixes = address_prefixes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressSpace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddressSpace of this AddressSpace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefixes(self):
        """Gets the address_prefixes of this AddressSpace.

        Gets or sets List of address blocks reserved for this virtual network in CIDR notation

        :return: The address_prefixes of this AddressSpace.
        :rtype: List[str]
        """
        return self._address_prefixes

    @address_prefixes.setter
    def address_prefixes(self, address_prefixes):
        """Sets the address_prefixes of this AddressSpace.

        Gets or sets List of address blocks reserved for this virtual network in CIDR notation

        :param address_prefixes: The address_prefixes of this AddressSpace.
        :type address_prefixes: List[str]
        """

        self._address_prefixes = address_prefixes
