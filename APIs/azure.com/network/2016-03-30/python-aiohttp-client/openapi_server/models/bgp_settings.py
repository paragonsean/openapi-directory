# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BgpSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: int=None, bgp_peering_address: str=None, peer_weight: int=None):
        """BgpSettings - a model defined in OpenAPI

        :param asn: The asn of this BgpSettings.
        :param bgp_peering_address: The bgp_peering_address of this BgpSettings.
        :param peer_weight: The peer_weight of this BgpSettings.
        """
        self.openapi_types = {
            'asn': int,
            'bgp_peering_address': str,
            'peer_weight': int
        }

        self.attribute_map = {
            'asn': 'asn',
            'bgp_peering_address': 'bgpPeeringAddress',
            'peer_weight': 'peerWeight'
        }

        self._asn = asn
        self._bgp_peering_address = bgp_peering_address
        self._peer_weight = peer_weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BgpSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BgpSettings of this BgpSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this BgpSettings.

        Gets or sets this BGP speaker's ASN

        :return: The asn of this BgpSettings.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this BgpSettings.

        Gets or sets this BGP speaker's ASN

        :param asn: The asn of this BgpSettings.
        :type asn: int
        """

        self._asn = asn

    @property
    def bgp_peering_address(self):
        """Gets the bgp_peering_address of this BgpSettings.

        Gets or sets the BGP peering address and BGP identifier of this BGP speaker

        :return: The bgp_peering_address of this BgpSettings.
        :rtype: str
        """
        return self._bgp_peering_address

    @bgp_peering_address.setter
    def bgp_peering_address(self, bgp_peering_address):
        """Sets the bgp_peering_address of this BgpSettings.

        Gets or sets the BGP peering address and BGP identifier of this BGP speaker

        :param bgp_peering_address: The bgp_peering_address of this BgpSettings.
        :type bgp_peering_address: str
        """

        self._bgp_peering_address = bgp_peering_address

    @property
    def peer_weight(self):
        """Gets the peer_weight of this BgpSettings.

        Gets or sets the weight added to routes learned from this BGP speaker

        :return: The peer_weight of this BgpSettings.
        :rtype: int
        """
        return self._peer_weight

    @peer_weight.setter
    def peer_weight(self, peer_weight):
        """Sets the peer_weight of this BgpSettings.

        Gets or sets the weight added to routes learned from this BGP speaker

        :param peer_weight: The peer_weight of this BgpSettings.
        :type peer_weight: int
        """

        self._peer_weight = peer_weight
