/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Subnet from '../model/Subnet';
import SubnetListResult from '../model/SubnetListResult';

/**
* Subnets service.
* @module api/SubnetsApi
* @version 2016-03-30
*/
export default class SubnetsApi {

    /**
    * Constructs a new SubnetsApi. 
    * @alias module:api/SubnetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subnetsCreateOrUpdate operation.
     * @callback module:api/SubnetsApi~subnetsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Put Subnet operation creates/updates a subnet in the specified virtual network
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} virtualNetworkName The name of the virtual network.
     * @param {String} subnetName The name of the subnet.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/Subnet} subnetParameters Parameters supplied to the create/update Subnet operation
     * @param {module:api/SubnetsApi~subnetsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subnet}
     */
    subnetsCreateOrUpdate(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, subnetParameters, callback) {
      let postBody = subnetParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling subnetsCreateOrUpdate");
      }
      // verify the required parameter 'virtualNetworkName' is set
      if (virtualNetworkName === undefined || virtualNetworkName === null) {
        throw new Error("Missing the required parameter 'virtualNetworkName' when calling subnetsCreateOrUpdate");
      }
      // verify the required parameter 'subnetName' is set
      if (subnetName === undefined || subnetName === null) {
        throw new Error("Missing the required parameter 'subnetName' when calling subnetsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subnetsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subnetsCreateOrUpdate");
      }
      // verify the required parameter 'subnetParameters' is set
      if (subnetParameters === undefined || subnetParameters === null) {
        throw new Error("Missing the required parameter 'subnetParameters' when calling subnetsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'virtualNetworkName': virtualNetworkName,
        'subnetName': subnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Subnet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subnetsDelete operation.
     * @callback module:api/SubnetsApi~subnetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The delete subnet operation deletes the specified subnet.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} virtualNetworkName The name of the virtual network.
     * @param {String} subnetName The name of the subnet.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/SubnetsApi~subnetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subnetsDelete(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling subnetsDelete");
      }
      // verify the required parameter 'virtualNetworkName' is set
      if (virtualNetworkName === undefined || virtualNetworkName === null) {
        throw new Error("Missing the required parameter 'virtualNetworkName' when calling subnetsDelete");
      }
      // verify the required parameter 'subnetName' is set
      if (subnetName === undefined || subnetName === null) {
        throw new Error("Missing the required parameter 'subnetName' when calling subnetsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subnetsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subnetsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'virtualNetworkName': virtualNetworkName,
        'subnetName': subnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subnetsGet operation.
     * @callback module:api/SubnetsApi~subnetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subnet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Get subnet operation retrieves information about the specified subnet.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} virtualNetworkName The name of the virtual network.
     * @param {String} subnetName The name of the subnet.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] expand references resources.
     * @param {module:api/SubnetsApi~subnetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subnet}
     */
    subnetsGet(resourceGroupName, virtualNetworkName, subnetName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling subnetsGet");
      }
      // verify the required parameter 'virtualNetworkName' is set
      if (virtualNetworkName === undefined || virtualNetworkName === null) {
        throw new Error("Missing the required parameter 'virtualNetworkName' when calling subnetsGet");
      }
      // verify the required parameter 'subnetName' is set
      if (subnetName === undefined || subnetName === null) {
        throw new Error("Missing the required parameter 'subnetName' when calling subnetsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subnetsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subnetsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'virtualNetworkName': virtualNetworkName,
        'subnetName': subnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Subnet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subnetsList operation.
     * @callback module:api/SubnetsApi~subnetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubnetListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The List subnets operation retrieves all the subnets in a virtual network.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} virtualNetworkName The name of the virtual network.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/SubnetsApi~subnetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubnetListResult}
     */
    subnetsList(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling subnetsList");
      }
      // verify the required parameter 'virtualNetworkName' is set
      if (virtualNetworkName === undefined || virtualNetworkName === null) {
        throw new Error("Missing the required parameter 'virtualNetworkName' when calling subnetsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subnetsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subnetsList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'virtualNetworkName': virtualNetworkName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SubnetListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
