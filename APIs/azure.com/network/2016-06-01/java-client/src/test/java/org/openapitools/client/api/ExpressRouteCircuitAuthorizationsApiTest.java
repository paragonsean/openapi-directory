/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthorizationListResult;
import org.openapitools.client.model.ExpressRouteCircuitAuthorization;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpressRouteCircuitAuthorizationsApi
 */
@Disabled
public class ExpressRouteCircuitAuthorizationsApiTest {

    private final ExpressRouteCircuitAuthorizationsApi api = new ExpressRouteCircuitAuthorizationsApi();

    /**
     * The Put Authorization operation creates/updates an authorization in the specified ExpressRouteCircuits
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRouteCircuitAuthorizationsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String circuitName = null;
        String authorizationName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ExpressRouteCircuitAuthorization authorizationParameters = null;
        ExpressRouteCircuitAuthorization response = api.expressRouteCircuitAuthorizationsCreateOrUpdate(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId, authorizationParameters);
        // TODO: test validations
    }

    /**
     * The delete authorization operation deletes the specified authorization from the specified ExpressRouteCircuit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRouteCircuitAuthorizationsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String circuitName = null;
        String authorizationName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.expressRouteCircuitAuthorizationsDelete(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The GET authorization operation retrieves the specified authorization from the specified ExpressRouteCircuit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRouteCircuitAuthorizationsGetTest() throws ApiException {
        String resourceGroupName = null;
        String circuitName = null;
        String authorizationName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ExpressRouteCircuitAuthorization response = api.expressRouteCircuitAuthorizationsGet(resourceGroupName, circuitName, authorizationName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The List authorization operation retrieves all the authorizations in an ExpressRouteCircuit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRouteCircuitAuthorizationsListTest() throws ApiException {
        String resourceGroupName = null;
        String circuitName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationListResult response = api.expressRouteCircuitAuthorizationsList(resourceGroupName, circuitName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
