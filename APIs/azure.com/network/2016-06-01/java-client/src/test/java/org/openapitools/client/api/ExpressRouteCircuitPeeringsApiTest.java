/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExpressRouteCircuitPeering;
import org.openapitools.client.model.ExpressRouteCircuitPeeringListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpressRouteCircuitPeeringsApi
 */
@Disabled
public class ExpressRouteCircuitPeeringsApiTest {

    private final ExpressRouteCircuitPeeringsApi api = new ExpressRouteCircuitPeeringsApi();

    /**
     * The Put Peering operation creates/updates an peering in the specified ExpressRouteCircuits
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRouteCircuitPeeringsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String circuitName = null;
        String peeringName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ExpressRouteCircuitPeering peeringParameters = null;
        ExpressRouteCircuitPeering response = api.expressRouteCircuitPeeringsCreateOrUpdate(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, peeringParameters);
        // TODO: test validations
    }

    /**
     * The delete peering operation deletes the specified peering from the ExpressRouteCircuit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRouteCircuitPeeringsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String circuitName = null;
        String peeringName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.expressRouteCircuitPeeringsDelete(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The GET peering operation retrieves the specified authorization from the ExpressRouteCircuit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRouteCircuitPeeringsGetTest() throws ApiException {
        String resourceGroupName = null;
        String circuitName = null;
        String peeringName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ExpressRouteCircuitPeering response = api.expressRouteCircuitPeeringsGet(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The List peering operation retrieves all the peerings in an ExpressRouteCircuit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRouteCircuitPeeringsListTest() throws ApiException {
        String resourceGroupName = null;
        String circuitName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ExpressRouteCircuitPeeringListResult response = api.expressRouteCircuitPeeringsList(resourceGroupName, circuitName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
