/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddressSpace;
import org.openapitools.client.model.DhcpOptions;
import org.openapitools.client.model.Subnet;
import org.openapitools.client.model.VirtualNetworkPeering;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualNetworkPropertiesFormat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNetworkPropertiesFormat {
  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_PEERINGS = "VirtualNetworkPeerings";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_PEERINGS)
  private List<VirtualNetworkPeering> virtualNetworkPeerings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_SPACE = "addressSpace";
  @SerializedName(SERIALIZED_NAME_ADDRESS_SPACE)
  private AddressSpace addressSpace;

  public static final String SERIALIZED_NAME_DHCP_OPTIONS = "dhcpOptions";
  @SerializedName(SERIALIZED_NAME_DHCP_OPTIONS)
  private DhcpOptions dhcpOptions;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List<Subnet> subnets = new ArrayList<>();

  public VirtualNetworkPropertiesFormat() {
  }

  public VirtualNetworkPropertiesFormat virtualNetworkPeerings(List<VirtualNetworkPeering> virtualNetworkPeerings) {
    this.virtualNetworkPeerings = virtualNetworkPeerings;
    return this;
  }

  public VirtualNetworkPropertiesFormat addVirtualNetworkPeeringsItem(VirtualNetworkPeering virtualNetworkPeeringsItem) {
    if (this.virtualNetworkPeerings == null) {
      this.virtualNetworkPeerings = new ArrayList<>();
    }
    this.virtualNetworkPeerings.add(virtualNetworkPeeringsItem);
    return this;
  }

  /**
   * Gets or sets list of peerings in a VirtualNetwork
   * @return virtualNetworkPeerings
   */
  @javax.annotation.Nullable
  public List<VirtualNetworkPeering> getVirtualNetworkPeerings() {
    return virtualNetworkPeerings;
  }

  public void setVirtualNetworkPeerings(List<VirtualNetworkPeering> virtualNetworkPeerings) {
    this.virtualNetworkPeerings = virtualNetworkPeerings;
  }


  public VirtualNetworkPropertiesFormat addressSpace(AddressSpace addressSpace) {
    this.addressSpace = addressSpace;
    return this;
  }

  /**
   * Get addressSpace
   * @return addressSpace
   */
  @javax.annotation.Nullable
  public AddressSpace getAddressSpace() {
    return addressSpace;
  }

  public void setAddressSpace(AddressSpace addressSpace) {
    this.addressSpace = addressSpace;
  }


  public VirtualNetworkPropertiesFormat dhcpOptions(DhcpOptions dhcpOptions) {
    this.dhcpOptions = dhcpOptions;
    return this;
  }

  /**
   * Get dhcpOptions
   * @return dhcpOptions
   */
  @javax.annotation.Nullable
  public DhcpOptions getDhcpOptions() {
    return dhcpOptions;
  }

  public void setDhcpOptions(DhcpOptions dhcpOptions) {
    this.dhcpOptions = dhcpOptions;
  }


  public VirtualNetworkPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public VirtualNetworkPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * Gets or sets resource guid property of the VirtualNetwork resource
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }


  public VirtualNetworkPropertiesFormat subnets(List<Subnet> subnets) {
    this.subnets = subnets;
    return this;
  }

  public VirtualNetworkPropertiesFormat addSubnetsItem(Subnet subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

  /**
   * Gets or sets list of subnets in a VirtualNetwork
   * @return subnets
   */
  @javax.annotation.Nullable
  public List<Subnet> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<Subnet> subnets) {
    this.subnets = subnets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNetworkPropertiesFormat virtualNetworkPropertiesFormat = (VirtualNetworkPropertiesFormat) o;
    return Objects.equals(this.virtualNetworkPeerings, virtualNetworkPropertiesFormat.virtualNetworkPeerings) &&
        Objects.equals(this.addressSpace, virtualNetworkPropertiesFormat.addressSpace) &&
        Objects.equals(this.dhcpOptions, virtualNetworkPropertiesFormat.dhcpOptions) &&
        Objects.equals(this.provisioningState, virtualNetworkPropertiesFormat.provisioningState) &&
        Objects.equals(this.resourceGuid, virtualNetworkPropertiesFormat.resourceGuid) &&
        Objects.equals(this.subnets, virtualNetworkPropertiesFormat.subnets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(virtualNetworkPeerings, addressSpace, dhcpOptions, provisioningState, resourceGuid, subnets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNetworkPropertiesFormat {\n");
    sb.append("    virtualNetworkPeerings: ").append(toIndentedString(virtualNetworkPeerings)).append("\n");
    sb.append("    addressSpace: ").append(toIndentedString(addressSpace)).append("\n");
    sb.append("    dhcpOptions: ").append(toIndentedString(dhcpOptions)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VirtualNetworkPeerings");
    openapiFields.add("addressSpace");
    openapiFields.add("dhcpOptions");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGuid");
    openapiFields.add("subnets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNetworkPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNetworkPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNetworkPropertiesFormat is not found in the empty JSON string", VirtualNetworkPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNetworkPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNetworkPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("VirtualNetworkPeerings") != null && !jsonObj.get("VirtualNetworkPeerings").isJsonNull()) {
        JsonArray jsonArrayvirtualNetworkPeerings = jsonObj.getAsJsonArray("VirtualNetworkPeerings");
        if (jsonArrayvirtualNetworkPeerings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("VirtualNetworkPeerings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `VirtualNetworkPeerings` to be an array in the JSON string but got `%s`", jsonObj.get("VirtualNetworkPeerings").toString()));
          }

          // validate the optional field `VirtualNetworkPeerings` (array)
          for (int i = 0; i < jsonArrayvirtualNetworkPeerings.size(); i++) {
            VirtualNetworkPeering.validateJsonElement(jsonArrayvirtualNetworkPeerings.get(i));
          };
        }
      }
      // validate the optional field `addressSpace`
      if (jsonObj.get("addressSpace") != null && !jsonObj.get("addressSpace").isJsonNull()) {
        AddressSpace.validateJsonElement(jsonObj.get("addressSpace"));
      }
      // validate the optional field `dhcpOptions`
      if (jsonObj.get("dhcpOptions") != null && !jsonObj.get("dhcpOptions").isJsonNull()) {
        DhcpOptions.validateJsonElement(jsonObj.get("dhcpOptions"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull()) {
        JsonArray jsonArraysubnets = jsonObj.getAsJsonArray("subnets");
        if (jsonArraysubnets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
          }

          // validate the optional field `subnets` (array)
          for (int i = 0; i < jsonArraysubnets.size(); i++) {
            Subnet.validateJsonElement(jsonArraysubnets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNetworkPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNetworkPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNetworkPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNetworkPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNetworkPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, VirtualNetworkPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNetworkPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNetworkPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNetworkPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to VirtualNetworkPropertiesFormat
   */
  public static VirtualNetworkPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNetworkPropertiesFormat.class);
  }

  /**
   * Convert an instance of VirtualNetworkPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

