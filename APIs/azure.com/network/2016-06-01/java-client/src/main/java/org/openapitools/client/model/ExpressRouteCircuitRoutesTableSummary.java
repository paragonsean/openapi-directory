/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The routes table associated with the ExpressRouteCircuit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteCircuitRoutesTableSummary {
  public static final String SERIALIZED_NAME_AS = "as";
  @SerializedName(SERIALIZED_NAME_AS)
  private Integer as;

  public static final String SERIALIZED_NAME_NEIGHBOR = "neighbor";
  @SerializedName(SERIALIZED_NAME_NEIGHBOR)
  private String neighbor;

  public static final String SERIALIZED_NAME_STATE_PFX_RCD = "statePfxRcd";
  @SerializedName(SERIALIZED_NAME_STATE_PFX_RCD)
  private String statePfxRcd;

  public static final String SERIALIZED_NAME_UP_DOWN = "upDown";
  @SerializedName(SERIALIZED_NAME_UP_DOWN)
  private String upDown;

  public static final String SERIALIZED_NAME_V = "v";
  @SerializedName(SERIALIZED_NAME_V)
  private Integer v;

  public ExpressRouteCircuitRoutesTableSummary() {
  }

  public ExpressRouteCircuitRoutesTableSummary as(Integer as) {
    this.as = as;
    return this;
  }

  /**
   * Autonomous system number.
   * @return as
   */
  @javax.annotation.Nullable
  public Integer getAs() {
    return as;
  }

  public void setAs(Integer as) {
    this.as = as;
  }


  public ExpressRouteCircuitRoutesTableSummary neighbor(String neighbor) {
    this.neighbor = neighbor;
    return this;
  }

  /**
   * Neighbor.
   * @return neighbor
   */
  @javax.annotation.Nullable
  public String getNeighbor() {
    return neighbor;
  }

  public void setNeighbor(String neighbor) {
    this.neighbor = neighbor;
  }


  public ExpressRouteCircuitRoutesTableSummary statePfxRcd(String statePfxRcd) {
    this.statePfxRcd = statePfxRcd;
    return this;
  }

  /**
   * Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
   * @return statePfxRcd
   */
  @javax.annotation.Nullable
  public String getStatePfxRcd() {
    return statePfxRcd;
  }

  public void setStatePfxRcd(String statePfxRcd) {
    this.statePfxRcd = statePfxRcd;
  }


  public ExpressRouteCircuitRoutesTableSummary upDown(String upDown) {
    this.upDown = upDown;
    return this;
  }

  /**
   * The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
   * @return upDown
   */
  @javax.annotation.Nullable
  public String getUpDown() {
    return upDown;
  }

  public void setUpDown(String upDown) {
    this.upDown = upDown;
  }


  public ExpressRouteCircuitRoutesTableSummary v(Integer v) {
    this.v = v;
    return this;
  }

  /**
   * BGP version number spoken to the neighbor.
   * @return v
   */
  @javax.annotation.Nullable
  public Integer getV() {
    return v;
  }

  public void setV(Integer v) {
    this.v = v;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteCircuitRoutesTableSummary expressRouteCircuitRoutesTableSummary = (ExpressRouteCircuitRoutesTableSummary) o;
    return Objects.equals(this.as, expressRouteCircuitRoutesTableSummary.as) &&
        Objects.equals(this.neighbor, expressRouteCircuitRoutesTableSummary.neighbor) &&
        Objects.equals(this.statePfxRcd, expressRouteCircuitRoutesTableSummary.statePfxRcd) &&
        Objects.equals(this.upDown, expressRouteCircuitRoutesTableSummary.upDown) &&
        Objects.equals(this.v, expressRouteCircuitRoutesTableSummary.v);
  }

  @Override
  public int hashCode() {
    return Objects.hash(as, neighbor, statePfxRcd, upDown, v);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteCircuitRoutesTableSummary {\n");
    sb.append("    as: ").append(toIndentedString(as)).append("\n");
    sb.append("    neighbor: ").append(toIndentedString(neighbor)).append("\n");
    sb.append("    statePfxRcd: ").append(toIndentedString(statePfxRcd)).append("\n");
    sb.append("    upDown: ").append(toIndentedString(upDown)).append("\n");
    sb.append("    v: ").append(toIndentedString(v)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("as");
    openapiFields.add("neighbor");
    openapiFields.add("statePfxRcd");
    openapiFields.add("upDown");
    openapiFields.add("v");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteCircuitRoutesTableSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteCircuitRoutesTableSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteCircuitRoutesTableSummary is not found in the empty JSON string", ExpressRouteCircuitRoutesTableSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteCircuitRoutesTableSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteCircuitRoutesTableSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("neighbor") != null && !jsonObj.get("neighbor").isJsonNull()) && !jsonObj.get("neighbor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighbor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighbor").toString()));
      }
      if ((jsonObj.get("statePfxRcd") != null && !jsonObj.get("statePfxRcd").isJsonNull()) && !jsonObj.get("statePfxRcd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statePfxRcd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statePfxRcd").toString()));
      }
      if ((jsonObj.get("upDown") != null && !jsonObj.get("upDown").isJsonNull()) && !jsonObj.get("upDown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upDown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upDown").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteCircuitRoutesTableSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteCircuitRoutesTableSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteCircuitRoutesTableSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteCircuitRoutesTableSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteCircuitRoutesTableSummary>() {
           @Override
           public void write(JsonWriter out, ExpressRouteCircuitRoutesTableSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteCircuitRoutesTableSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteCircuitRoutesTableSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteCircuitRoutesTableSummary
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteCircuitRoutesTableSummary
   */
  public static ExpressRouteCircuitRoutesTableSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteCircuitRoutesTableSummary.class);
  }

  /**
   * Convert an instance of ExpressRouteCircuitRoutesTableSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

