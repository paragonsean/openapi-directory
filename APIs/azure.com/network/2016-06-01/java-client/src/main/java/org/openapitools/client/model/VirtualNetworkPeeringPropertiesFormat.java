/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualNetworkPeeringPropertiesFormat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNetworkPeeringPropertiesFormat {
  public static final String SERIALIZED_NAME_ALLOW_FORWARDED_TRAFFIC = "allowForwardedTraffic";
  @SerializedName(SERIALIZED_NAME_ALLOW_FORWARDED_TRAFFIC)
  private Boolean allowForwardedTraffic;

  public static final String SERIALIZED_NAME_ALLOW_GATEWAY_TRANSIT = "allowGatewayTransit";
  @SerializedName(SERIALIZED_NAME_ALLOW_GATEWAY_TRANSIT)
  private Boolean allowGatewayTransit;

  public static final String SERIALIZED_NAME_ALLOW_VIRTUAL_NETWORK_ACCESS = "allowVirtualNetworkAccess";
  @SerializedName(SERIALIZED_NAME_ALLOW_VIRTUAL_NETWORK_ACCESS)
  private Boolean allowVirtualNetworkAccess;

  /**
   * Gets the status of the virtual network peering
   */
  @JsonAdapter(PeeringStateEnum.Adapter.class)
  public enum PeeringStateEnum {
    INITIATED("Initiated"),
    
    CONNECTED("Connected"),
    
    DISCONNECTED("Disconnected");

    private String value;

    PeeringStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeeringStateEnum fromValue(String value) {
      for (PeeringStateEnum b : PeeringStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeeringStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeeringStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeeringStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeeringStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeeringStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PEERING_STATE = "peeringState";
  @SerializedName(SERIALIZED_NAME_PEERING_STATE)
  private PeeringStateEnum peeringState;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_REMOTE_VIRTUAL_NETWORK = "remoteVirtualNetwork";
  @SerializedName(SERIALIZED_NAME_REMOTE_VIRTUAL_NETWORK)
  private SubResource remoteVirtualNetwork;

  public static final String SERIALIZED_NAME_USE_REMOTE_GATEWAYS = "useRemoteGateways";
  @SerializedName(SERIALIZED_NAME_USE_REMOTE_GATEWAYS)
  private Boolean useRemoteGateways;

  public VirtualNetworkPeeringPropertiesFormat() {
  }

  public VirtualNetworkPeeringPropertiesFormat allowForwardedTraffic(Boolean allowForwardedTraffic) {
    this.allowForwardedTraffic = allowForwardedTraffic;
    return this;
  }

  /**
   * Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed
   * @return allowForwardedTraffic
   */
  @javax.annotation.Nullable
  public Boolean getAllowForwardedTraffic() {
    return allowForwardedTraffic;
  }

  public void setAllowForwardedTraffic(Boolean allowForwardedTraffic) {
    this.allowForwardedTraffic = allowForwardedTraffic;
  }


  public VirtualNetworkPeeringPropertiesFormat allowGatewayTransit(Boolean allowGatewayTransit) {
    this.allowGatewayTransit = allowGatewayTransit;
    return this;
  }

  /**
   * Gets or sets if gatewayLinks can be used in remote virtual networkâ€™s link to this virtual network
   * @return allowGatewayTransit
   */
  @javax.annotation.Nullable
  public Boolean getAllowGatewayTransit() {
    return allowGatewayTransit;
  }

  public void setAllowGatewayTransit(Boolean allowGatewayTransit) {
    this.allowGatewayTransit = allowGatewayTransit;
  }


  public VirtualNetworkPeeringPropertiesFormat allowVirtualNetworkAccess(Boolean allowVirtualNetworkAccess) {
    this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
    return this;
  }

  /**
   * Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space
   * @return allowVirtualNetworkAccess
   */
  @javax.annotation.Nullable
  public Boolean getAllowVirtualNetworkAccess() {
    return allowVirtualNetworkAccess;
  }

  public void setAllowVirtualNetworkAccess(Boolean allowVirtualNetworkAccess) {
    this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
  }


  public VirtualNetworkPeeringPropertiesFormat peeringState(PeeringStateEnum peeringState) {
    this.peeringState = peeringState;
    return this;
  }

  /**
   * Gets the status of the virtual network peering
   * @return peeringState
   */
  @javax.annotation.Nullable
  public PeeringStateEnum getPeeringState() {
    return peeringState;
  }

  public void setPeeringState(PeeringStateEnum peeringState) {
    this.peeringState = peeringState;
  }


  public VirtualNetworkPeeringPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets provisioning state of the resource
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public VirtualNetworkPeeringPropertiesFormat remoteVirtualNetwork(SubResource remoteVirtualNetwork) {
    this.remoteVirtualNetwork = remoteVirtualNetwork;
    return this;
  }

  /**
   * Get remoteVirtualNetwork
   * @return remoteVirtualNetwork
   */
  @javax.annotation.Nullable
  public SubResource getRemoteVirtualNetwork() {
    return remoteVirtualNetwork;
  }

  public void setRemoteVirtualNetwork(SubResource remoteVirtualNetwork) {
    this.remoteVirtualNetwork = remoteVirtualNetwork;
  }


  public VirtualNetworkPeeringPropertiesFormat useRemoteGateways(Boolean useRemoteGateways) {
    this.useRemoteGateways = useRemoteGateways;
    return this;
  }

  /**
   * Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
   * @return useRemoteGateways
   */
  @javax.annotation.Nullable
  public Boolean getUseRemoteGateways() {
    return useRemoteGateways;
  }

  public void setUseRemoteGateways(Boolean useRemoteGateways) {
    this.useRemoteGateways = useRemoteGateways;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNetworkPeeringPropertiesFormat virtualNetworkPeeringPropertiesFormat = (VirtualNetworkPeeringPropertiesFormat) o;
    return Objects.equals(this.allowForwardedTraffic, virtualNetworkPeeringPropertiesFormat.allowForwardedTraffic) &&
        Objects.equals(this.allowGatewayTransit, virtualNetworkPeeringPropertiesFormat.allowGatewayTransit) &&
        Objects.equals(this.allowVirtualNetworkAccess, virtualNetworkPeeringPropertiesFormat.allowVirtualNetworkAccess) &&
        Objects.equals(this.peeringState, virtualNetworkPeeringPropertiesFormat.peeringState) &&
        Objects.equals(this.provisioningState, virtualNetworkPeeringPropertiesFormat.provisioningState) &&
        Objects.equals(this.remoteVirtualNetwork, virtualNetworkPeeringPropertiesFormat.remoteVirtualNetwork) &&
        Objects.equals(this.useRemoteGateways, virtualNetworkPeeringPropertiesFormat.useRemoteGateways);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowForwardedTraffic, allowGatewayTransit, allowVirtualNetworkAccess, peeringState, provisioningState, remoteVirtualNetwork, useRemoteGateways);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNetworkPeeringPropertiesFormat {\n");
    sb.append("    allowForwardedTraffic: ").append(toIndentedString(allowForwardedTraffic)).append("\n");
    sb.append("    allowGatewayTransit: ").append(toIndentedString(allowGatewayTransit)).append("\n");
    sb.append("    allowVirtualNetworkAccess: ").append(toIndentedString(allowVirtualNetworkAccess)).append("\n");
    sb.append("    peeringState: ").append(toIndentedString(peeringState)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    remoteVirtualNetwork: ").append(toIndentedString(remoteVirtualNetwork)).append("\n");
    sb.append("    useRemoteGateways: ").append(toIndentedString(useRemoteGateways)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowForwardedTraffic");
    openapiFields.add("allowGatewayTransit");
    openapiFields.add("allowVirtualNetworkAccess");
    openapiFields.add("peeringState");
    openapiFields.add("provisioningState");
    openapiFields.add("remoteVirtualNetwork");
    openapiFields.add("useRemoteGateways");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNetworkPeeringPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNetworkPeeringPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNetworkPeeringPropertiesFormat is not found in the empty JSON string", VirtualNetworkPeeringPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNetworkPeeringPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNetworkPeeringPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("peeringState") != null && !jsonObj.get("peeringState").isJsonNull()) && !jsonObj.get("peeringState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringState").toString()));
      }
      // validate the optional field `peeringState`
      if (jsonObj.get("peeringState") != null && !jsonObj.get("peeringState").isJsonNull()) {
        PeeringStateEnum.validateJsonElement(jsonObj.get("peeringState"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `remoteVirtualNetwork`
      if (jsonObj.get("remoteVirtualNetwork") != null && !jsonObj.get("remoteVirtualNetwork").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("remoteVirtualNetwork"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNetworkPeeringPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNetworkPeeringPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNetworkPeeringPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNetworkPeeringPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNetworkPeeringPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, VirtualNetworkPeeringPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNetworkPeeringPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNetworkPeeringPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNetworkPeeringPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to VirtualNetworkPeeringPropertiesFormat
   */
  public static VirtualNetworkPeeringPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNetworkPeeringPropertiesFormat.class);
  }

  /**
   * Convert an instance of VirtualNetworkPeeringPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

