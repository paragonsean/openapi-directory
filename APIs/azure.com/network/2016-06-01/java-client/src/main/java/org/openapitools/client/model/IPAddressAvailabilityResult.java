/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for CheckIPAddressAvailability Api service call
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPAddressAvailabilityResult {
  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Boolean available;

  public static final String SERIALIZED_NAME_AVAILABLE_I_P_ADDRESSES = "availableIPAddresses";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_I_P_ADDRESSES)
  private List<String> availableIPAddresses = new ArrayList<>();

  public IPAddressAvailabilityResult() {
  }

  public IPAddressAvailabilityResult available(Boolean available) {
    this.available = available;
    return this;
  }

  /**
   * Private IP address availability
   * @return available
   */
  @javax.annotation.Nullable
  public Boolean getAvailable() {
    return available;
  }

  public void setAvailable(Boolean available) {
    this.available = available;
  }


  public IPAddressAvailabilityResult availableIPAddresses(List<String> availableIPAddresses) {
    this.availableIPAddresses = availableIPAddresses;
    return this;
  }

  public IPAddressAvailabilityResult addAvailableIPAddressesItem(String availableIPAddressesItem) {
    if (this.availableIPAddresses == null) {
      this.availableIPAddresses = new ArrayList<>();
    }
    this.availableIPAddresses.add(availableIPAddressesItem);
    return this;
  }

  /**
   * Contains other available private IP addresses if the asked for address is taken
   * @return availableIPAddresses
   */
  @javax.annotation.Nullable
  public List<String> getAvailableIPAddresses() {
    return availableIPAddresses;
  }

  public void setAvailableIPAddresses(List<String> availableIPAddresses) {
    this.availableIPAddresses = availableIPAddresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPAddressAvailabilityResult ipAddressAvailabilityResult = (IPAddressAvailabilityResult) o;
    return Objects.equals(this.available, ipAddressAvailabilityResult.available) &&
        Objects.equals(this.availableIPAddresses, ipAddressAvailabilityResult.availableIPAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(available, availableIPAddresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPAddressAvailabilityResult {\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    availableIPAddresses: ").append(toIndentedString(availableIPAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available");
    openapiFields.add("availableIPAddresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPAddressAvailabilityResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPAddressAvailabilityResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPAddressAvailabilityResult is not found in the empty JSON string", IPAddressAvailabilityResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPAddressAvailabilityResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPAddressAvailabilityResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableIPAddresses") != null && !jsonObj.get("availableIPAddresses").isJsonNull() && !jsonObj.get("availableIPAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableIPAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("availableIPAddresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPAddressAvailabilityResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPAddressAvailabilityResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPAddressAvailabilityResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPAddressAvailabilityResult.class));

       return (TypeAdapter<T>) new TypeAdapter<IPAddressAvailabilityResult>() {
           @Override
           public void write(JsonWriter out, IPAddressAvailabilityResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPAddressAvailabilityResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPAddressAvailabilityResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPAddressAvailabilityResult
   * @throws IOException if the JSON string is invalid with respect to IPAddressAvailabilityResult
   */
  public static IPAddressAvailabilityResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPAddressAvailabilityResult.class);
  }

  /**
   * Convert an instance of IPAddressAvailabilityResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

