/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExpressRouteCircuitPeeringConfig;
import org.openapitools.client.model.ExpressRouteCircuitStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExpressRouteCircuitPeeringPropertiesFormat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteCircuitPeeringPropertiesFormat {
  public static final String SERIALIZED_NAME_AZURE_A_S_N = "azureASN";
  @SerializedName(SERIALIZED_NAME_AZURE_A_S_N)
  private Integer azureASN;

  public static final String SERIALIZED_NAME_GATEWAY_MANAGER_ETAG = "gatewayManagerEtag";
  @SerializedName(SERIALIZED_NAME_GATEWAY_MANAGER_ETAG)
  private String gatewayManagerEtag;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_MICROSOFT_PEERING_CONFIG = "microsoftPeeringConfig";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_PEERING_CONFIG)
  private ExpressRouteCircuitPeeringConfig microsoftPeeringConfig;

  public static final String SERIALIZED_NAME_PEER_A_S_N = "peerASN";
  @SerializedName(SERIALIZED_NAME_PEER_A_S_N)
  private Integer peerASN;

  /**
   * Gets or sets PeeringType
   */
  @JsonAdapter(PeeringTypeEnum.Adapter.class)
  public enum PeeringTypeEnum {
    AZURE_PUBLIC_PEERING("AzurePublicPeering"),
    
    AZURE_PRIVATE_PEERING("AzurePrivatePeering"),
    
    MICROSOFT_PEERING("MicrosoftPeering");

    private String value;

    PeeringTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeeringTypeEnum fromValue(String value) {
      for (PeeringTypeEnum b : PeeringTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeeringTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeeringTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeeringTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeeringTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeeringTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PEERING_TYPE = "peeringType";
  @SerializedName(SERIALIZED_NAME_PEERING_TYPE)
  private PeeringTypeEnum peeringType;

  public static final String SERIALIZED_NAME_PRIMARY_AZURE_PORT = "primaryAzurePort";
  @SerializedName(SERIALIZED_NAME_PRIMARY_AZURE_PORT)
  private String primaryAzurePort;

  public static final String SERIALIZED_NAME_PRIMARY_PEER_ADDRESS_PREFIX = "primaryPeerAddressPrefix";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PEER_ADDRESS_PREFIX)
  private String primaryPeerAddressPrefix;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SECONDARY_AZURE_PORT = "secondaryAzurePort";
  @SerializedName(SERIALIZED_NAME_SECONDARY_AZURE_PORT)
  private String secondaryAzurePort;

  public static final String SERIALIZED_NAME_SECONDARY_PEER_ADDRESS_PREFIX = "secondaryPeerAddressPrefix";
  @SerializedName(SERIALIZED_NAME_SECONDARY_PEER_ADDRESS_PREFIX)
  private String secondaryPeerAddressPrefix;

  public static final String SERIALIZED_NAME_SHARED_KEY = "sharedKey";
  @SerializedName(SERIALIZED_NAME_SHARED_KEY)
  private String sharedKey;

  /**
   * Gets or sets state of Peering
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private ExpressRouteCircuitStats stats;

  public static final String SERIALIZED_NAME_VLAN_ID = "vlanId";
  @SerializedName(SERIALIZED_NAME_VLAN_ID)
  private Integer vlanId;

  public ExpressRouteCircuitPeeringPropertiesFormat() {
  }

  public ExpressRouteCircuitPeeringPropertiesFormat azureASN(Integer azureASN) {
    this.azureASN = azureASN;
    return this;
  }

  /**
   * Gets or sets the azure ASN
   * @return azureASN
   */
  @javax.annotation.Nullable
  public Integer getAzureASN() {
    return azureASN;
  }

  public void setAzureASN(Integer azureASN) {
    this.azureASN = azureASN;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat gatewayManagerEtag(String gatewayManagerEtag) {
    this.gatewayManagerEtag = gatewayManagerEtag;
    return this;
  }

  /**
   * Gets or sets the GatewayManager Etag
   * @return gatewayManagerEtag
   */
  @javax.annotation.Nullable
  public String getGatewayManagerEtag() {
    return gatewayManagerEtag;
  }

  public void setGatewayManagerEtag(String gatewayManagerEtag) {
    this.gatewayManagerEtag = gatewayManagerEtag;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Gets whether the provider or the customer last modified the peering
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat microsoftPeeringConfig(ExpressRouteCircuitPeeringConfig microsoftPeeringConfig) {
    this.microsoftPeeringConfig = microsoftPeeringConfig;
    return this;
  }

  /**
   * Get microsoftPeeringConfig
   * @return microsoftPeeringConfig
   */
  @javax.annotation.Nullable
  public ExpressRouteCircuitPeeringConfig getMicrosoftPeeringConfig() {
    return microsoftPeeringConfig;
  }

  public void setMicrosoftPeeringConfig(ExpressRouteCircuitPeeringConfig microsoftPeeringConfig) {
    this.microsoftPeeringConfig = microsoftPeeringConfig;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat peerASN(Integer peerASN) {
    this.peerASN = peerASN;
    return this;
  }

  /**
   * Gets or sets the peer ASN
   * @return peerASN
   */
  @javax.annotation.Nullable
  public Integer getPeerASN() {
    return peerASN;
  }

  public void setPeerASN(Integer peerASN) {
    this.peerASN = peerASN;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat peeringType(PeeringTypeEnum peeringType) {
    this.peeringType = peeringType;
    return this;
  }

  /**
   * Gets or sets PeeringType
   * @return peeringType
   */
  @javax.annotation.Nullable
  public PeeringTypeEnum getPeeringType() {
    return peeringType;
  }

  public void setPeeringType(PeeringTypeEnum peeringType) {
    this.peeringType = peeringType;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat primaryAzurePort(String primaryAzurePort) {
    this.primaryAzurePort = primaryAzurePort;
    return this;
  }

  /**
   * Gets or sets the primary port
   * @return primaryAzurePort
   */
  @javax.annotation.Nullable
  public String getPrimaryAzurePort() {
    return primaryAzurePort;
  }

  public void setPrimaryAzurePort(String primaryAzurePort) {
    this.primaryAzurePort = primaryAzurePort;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat primaryPeerAddressPrefix(String primaryPeerAddressPrefix) {
    this.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
    return this;
  }

  /**
   * Gets or sets the primary address prefix
   * @return primaryPeerAddressPrefix
   */
  @javax.annotation.Nullable
  public String getPrimaryPeerAddressPrefix() {
    return primaryPeerAddressPrefix;
  }

  public void setPrimaryPeerAddressPrefix(String primaryPeerAddressPrefix) {
    this.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat secondaryAzurePort(String secondaryAzurePort) {
    this.secondaryAzurePort = secondaryAzurePort;
    return this;
  }

  /**
   * Gets or sets the secondary port
   * @return secondaryAzurePort
   */
  @javax.annotation.Nullable
  public String getSecondaryAzurePort() {
    return secondaryAzurePort;
  }

  public void setSecondaryAzurePort(String secondaryAzurePort) {
    this.secondaryAzurePort = secondaryAzurePort;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat secondaryPeerAddressPrefix(String secondaryPeerAddressPrefix) {
    this.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
    return this;
  }

  /**
   * Gets or sets the secondary address prefix
   * @return secondaryPeerAddressPrefix
   */
  @javax.annotation.Nullable
  public String getSecondaryPeerAddressPrefix() {
    return secondaryPeerAddressPrefix;
  }

  public void setSecondaryPeerAddressPrefix(String secondaryPeerAddressPrefix) {
    this.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat sharedKey(String sharedKey) {
    this.sharedKey = sharedKey;
    return this;
  }

  /**
   * Gets or sets the shared key
   * @return sharedKey
   */
  @javax.annotation.Nullable
  public String getSharedKey() {
    return sharedKey;
  }

  public void setSharedKey(String sharedKey) {
    this.sharedKey = sharedKey;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Gets or sets state of Peering
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat stats(ExpressRouteCircuitStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public ExpressRouteCircuitStats getStats() {
    return stats;
  }

  public void setStats(ExpressRouteCircuitStats stats) {
    this.stats = stats;
  }


  public ExpressRouteCircuitPeeringPropertiesFormat vlanId(Integer vlanId) {
    this.vlanId = vlanId;
    return this;
  }

  /**
   * Gets or sets the vlan id
   * @return vlanId
   */
  @javax.annotation.Nullable
  public Integer getVlanId() {
    return vlanId;
  }

  public void setVlanId(Integer vlanId) {
    this.vlanId = vlanId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteCircuitPeeringPropertiesFormat expressRouteCircuitPeeringPropertiesFormat = (ExpressRouteCircuitPeeringPropertiesFormat) o;
    return Objects.equals(this.azureASN, expressRouteCircuitPeeringPropertiesFormat.azureASN) &&
        Objects.equals(this.gatewayManagerEtag, expressRouteCircuitPeeringPropertiesFormat.gatewayManagerEtag) &&
        Objects.equals(this.lastModifiedBy, expressRouteCircuitPeeringPropertiesFormat.lastModifiedBy) &&
        Objects.equals(this.microsoftPeeringConfig, expressRouteCircuitPeeringPropertiesFormat.microsoftPeeringConfig) &&
        Objects.equals(this.peerASN, expressRouteCircuitPeeringPropertiesFormat.peerASN) &&
        Objects.equals(this.peeringType, expressRouteCircuitPeeringPropertiesFormat.peeringType) &&
        Objects.equals(this.primaryAzurePort, expressRouteCircuitPeeringPropertiesFormat.primaryAzurePort) &&
        Objects.equals(this.primaryPeerAddressPrefix, expressRouteCircuitPeeringPropertiesFormat.primaryPeerAddressPrefix) &&
        Objects.equals(this.provisioningState, expressRouteCircuitPeeringPropertiesFormat.provisioningState) &&
        Objects.equals(this.secondaryAzurePort, expressRouteCircuitPeeringPropertiesFormat.secondaryAzurePort) &&
        Objects.equals(this.secondaryPeerAddressPrefix, expressRouteCircuitPeeringPropertiesFormat.secondaryPeerAddressPrefix) &&
        Objects.equals(this.sharedKey, expressRouteCircuitPeeringPropertiesFormat.sharedKey) &&
        Objects.equals(this.state, expressRouteCircuitPeeringPropertiesFormat.state) &&
        Objects.equals(this.stats, expressRouteCircuitPeeringPropertiesFormat.stats) &&
        Objects.equals(this.vlanId, expressRouteCircuitPeeringPropertiesFormat.vlanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureASN, gatewayManagerEtag, lastModifiedBy, microsoftPeeringConfig, peerASN, peeringType, primaryAzurePort, primaryPeerAddressPrefix, provisioningState, secondaryAzurePort, secondaryPeerAddressPrefix, sharedKey, state, stats, vlanId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteCircuitPeeringPropertiesFormat {\n");
    sb.append("    azureASN: ").append(toIndentedString(azureASN)).append("\n");
    sb.append("    gatewayManagerEtag: ").append(toIndentedString(gatewayManagerEtag)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    microsoftPeeringConfig: ").append(toIndentedString(microsoftPeeringConfig)).append("\n");
    sb.append("    peerASN: ").append(toIndentedString(peerASN)).append("\n");
    sb.append("    peeringType: ").append(toIndentedString(peeringType)).append("\n");
    sb.append("    primaryAzurePort: ").append(toIndentedString(primaryAzurePort)).append("\n");
    sb.append("    primaryPeerAddressPrefix: ").append(toIndentedString(primaryPeerAddressPrefix)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    secondaryAzurePort: ").append(toIndentedString(secondaryAzurePort)).append("\n");
    sb.append("    secondaryPeerAddressPrefix: ").append(toIndentedString(secondaryPeerAddressPrefix)).append("\n");
    sb.append("    sharedKey: ").append(toIndentedString(sharedKey)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureASN");
    openapiFields.add("gatewayManagerEtag");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("microsoftPeeringConfig");
    openapiFields.add("peerASN");
    openapiFields.add("peeringType");
    openapiFields.add("primaryAzurePort");
    openapiFields.add("primaryPeerAddressPrefix");
    openapiFields.add("provisioningState");
    openapiFields.add("secondaryAzurePort");
    openapiFields.add("secondaryPeerAddressPrefix");
    openapiFields.add("sharedKey");
    openapiFields.add("state");
    openapiFields.add("stats");
    openapiFields.add("vlanId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteCircuitPeeringPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteCircuitPeeringPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteCircuitPeeringPropertiesFormat is not found in the empty JSON string", ExpressRouteCircuitPeeringPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteCircuitPeeringPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteCircuitPeeringPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gatewayManagerEtag") != null && !jsonObj.get("gatewayManagerEtag").isJsonNull()) && !jsonObj.get("gatewayManagerEtag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayManagerEtag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayManagerEtag").toString()));
      }
      if ((jsonObj.get("lastModifiedBy") != null && !jsonObj.get("lastModifiedBy").isJsonNull()) && !jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      // validate the optional field `microsoftPeeringConfig`
      if (jsonObj.get("microsoftPeeringConfig") != null && !jsonObj.get("microsoftPeeringConfig").isJsonNull()) {
        ExpressRouteCircuitPeeringConfig.validateJsonElement(jsonObj.get("microsoftPeeringConfig"));
      }
      if ((jsonObj.get("peeringType") != null && !jsonObj.get("peeringType").isJsonNull()) && !jsonObj.get("peeringType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringType").toString()));
      }
      // validate the optional field `peeringType`
      if (jsonObj.get("peeringType") != null && !jsonObj.get("peeringType").isJsonNull()) {
        PeeringTypeEnum.validateJsonElement(jsonObj.get("peeringType"));
      }
      if ((jsonObj.get("primaryAzurePort") != null && !jsonObj.get("primaryAzurePort").isJsonNull()) && !jsonObj.get("primaryAzurePort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAzurePort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAzurePort").toString()));
      }
      if ((jsonObj.get("primaryPeerAddressPrefix") != null && !jsonObj.get("primaryPeerAddressPrefix").isJsonNull()) && !jsonObj.get("primaryPeerAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryPeerAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryPeerAddressPrefix").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("secondaryAzurePort") != null && !jsonObj.get("secondaryAzurePort").isJsonNull()) && !jsonObj.get("secondaryAzurePort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryAzurePort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryAzurePort").toString()));
      }
      if ((jsonObj.get("secondaryPeerAddressPrefix") != null && !jsonObj.get("secondaryPeerAddressPrefix").isJsonNull()) && !jsonObj.get("secondaryPeerAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryPeerAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryPeerAddressPrefix").toString()));
      }
      if ((jsonObj.get("sharedKey") != null && !jsonObj.get("sharedKey").isJsonNull()) && !jsonObj.get("sharedKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedKey").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        ExpressRouteCircuitStats.validateJsonElement(jsonObj.get("stats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteCircuitPeeringPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteCircuitPeeringPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteCircuitPeeringPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteCircuitPeeringPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteCircuitPeeringPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ExpressRouteCircuitPeeringPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteCircuitPeeringPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteCircuitPeeringPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteCircuitPeeringPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteCircuitPeeringPropertiesFormat
   */
  public static ExpressRouteCircuitPeeringPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteCircuitPeeringPropertiesFormat.class);
  }

  /**
   * Convert an instance of ExpressRouteCircuitPeeringPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

