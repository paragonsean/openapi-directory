/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of ResourceNavigationLink
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceNavigationLinkFormat {
  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINKED_RESOURCE_TYPE = "linkedResourceType";
  @SerializedName(SERIALIZED_NAME_LINKED_RESOURCE_TYPE)
  private String linkedResourceType;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public ResourceNavigationLinkFormat() {
  }

  public ResourceNavigationLinkFormat(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public ResourceNavigationLinkFormat link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Link to the external resource
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ResourceNavigationLinkFormat linkedResourceType(String linkedResourceType) {
    this.linkedResourceType = linkedResourceType;
    return this;
  }

  /**
   * Resource type of the linked resource
   * @return linkedResourceType
   */
  @javax.annotation.Nullable
  public String getLinkedResourceType() {
    return linkedResourceType;
  }

  public void setLinkedResourceType(String linkedResourceType) {
    this.linkedResourceType = linkedResourceType;
  }


  /**
   * Provisioning state of the ResourceNavigationLink resource
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceNavigationLinkFormat resourceNavigationLinkFormat = (ResourceNavigationLinkFormat) o;
    return Objects.equals(this.link, resourceNavigationLinkFormat.link) &&
        Objects.equals(this.linkedResourceType, resourceNavigationLinkFormat.linkedResourceType) &&
        Objects.equals(this.provisioningState, resourceNavigationLinkFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(link, linkedResourceType, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceNavigationLinkFormat {\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkedResourceType: ").append(toIndentedString(linkedResourceType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("link");
    openapiFields.add("linkedResourceType");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceNavigationLinkFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceNavigationLinkFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceNavigationLinkFormat is not found in the empty JSON string", ResourceNavigationLinkFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceNavigationLinkFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceNavigationLinkFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("linkedResourceType") != null && !jsonObj.get("linkedResourceType").isJsonNull()) && !jsonObj.get("linkedResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedResourceType").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceNavigationLinkFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceNavigationLinkFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceNavigationLinkFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceNavigationLinkFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceNavigationLinkFormat>() {
           @Override
           public void write(JsonWriter out, ResourceNavigationLinkFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceNavigationLinkFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceNavigationLinkFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceNavigationLinkFormat
   * @throws IOException if the JSON string is invalid with respect to ResourceNavigationLinkFormat
   */
  public static ResourceNavigationLinkFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceNavigationLinkFormat.class);
  }

  /**
   * Convert an instance of ResourceNavigationLinkFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

