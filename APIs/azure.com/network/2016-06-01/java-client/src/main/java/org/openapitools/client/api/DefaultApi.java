/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DnsNameAvailabilityResult;
import org.openapitools.client.model.IPAddressAvailabilityResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkDnsNameAvailability
     * @param location The location of the domain name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDnsNameAvailabilityCall(String location, String apiVersion, String subscriptionId, String domainNameLabel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domainNameLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainNameLabel", domainNameLabel));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDnsNameAvailabilityValidateBeforeCall(String location, String apiVersion, String subscriptionId, String domainNameLabel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling checkDnsNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling checkDnsNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling checkDnsNameAvailability(Async)");
        }

        return checkDnsNameAvailabilityCall(location, apiVersion, subscriptionId, domainNameLabel, _callback);

    }

    /**
     * 
     * Checks whether a domain name in the cloudapp.net zone is available for use.
     * @param location The location of the domain name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$. (optional)
     * @return DnsNameAvailabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DnsNameAvailabilityResult checkDnsNameAvailability(String location, String apiVersion, String subscriptionId, String domainNameLabel) throws ApiException {
        ApiResponse<DnsNameAvailabilityResult> localVarResp = checkDnsNameAvailabilityWithHttpInfo(location, apiVersion, subscriptionId, domainNameLabel);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether a domain name in the cloudapp.net zone is available for use.
     * @param location The location of the domain name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$. (optional)
     * @return ApiResponse&lt;DnsNameAvailabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DnsNameAvailabilityResult> checkDnsNameAvailabilityWithHttpInfo(String location, String apiVersion, String subscriptionId, String domainNameLabel) throws ApiException {
        okhttp3.Call localVarCall = checkDnsNameAvailabilityValidateBeforeCall(location, apiVersion, subscriptionId, domainNameLabel, null);
        Type localVarReturnType = new TypeToken<DnsNameAvailabilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether a domain name in the cloudapp.net zone is available for use.
     * @param location The location of the domain name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param domainNameLabel The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDnsNameAvailabilityAsync(String location, String apiVersion, String subscriptionId, String domainNameLabel, final ApiCallback<DnsNameAvailabilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDnsNameAvailabilityValidateBeforeCall(location, apiVersion, subscriptionId, domainNameLabel, _callback);
        Type localVarReturnType = new TypeToken<DnsNameAvailabilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworksCheckIPAddressAvailability
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ipAddress The private IP address to be verified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> private IP address availability and list of other free addresses if the requested one is not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworksCheckIPAddressAvailabilityCall(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, String ipAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/CheckIPAddressAvailability"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ipAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ipAddress", ipAddress));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworksCheckIPAddressAvailabilityValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, String ipAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworksCheckIPAddressAvailability(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling virtualNetworksCheckIPAddressAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworksCheckIPAddressAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworksCheckIPAddressAvailability(Async)");
        }

        return virtualNetworksCheckIPAddressAvailabilityCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, ipAddress, _callback);

    }

    /**
     * 
     * Checks whether a private Ip address is available for use.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ipAddress The private IP address to be verified. (optional)
     * @return IPAddressAvailabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> private IP address availability and list of other free addresses if the requested one is not available </td><td>  -  </td></tr>
     </table>
     */
    public IPAddressAvailabilityResult virtualNetworksCheckIPAddressAvailability(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, String ipAddress) throws ApiException {
        ApiResponse<IPAddressAvailabilityResult> localVarResp = virtualNetworksCheckIPAddressAvailabilityWithHttpInfo(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, ipAddress);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether a private Ip address is available for use.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ipAddress The private IP address to be verified. (optional)
     * @return ApiResponse&lt;IPAddressAvailabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> private IP address availability and list of other free addresses if the requested one is not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IPAddressAvailabilityResult> virtualNetworksCheckIPAddressAvailabilityWithHttpInfo(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, String ipAddress) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworksCheckIPAddressAvailabilityValidateBeforeCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, ipAddress, null);
        Type localVarReturnType = new TypeToken<IPAddressAvailabilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether a private Ip address is available for use.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ipAddress The private IP address to be verified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> private IP address availability and list of other free addresses if the requested one is not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworksCheckIPAddressAvailabilityAsync(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, String ipAddress, final ApiCallback<IPAddressAvailabilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworksCheckIPAddressAvailabilityValidateBeforeCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, ipAddress, _callback);
        Type localVarReturnType = new TypeToken<IPAddressAvailabilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
