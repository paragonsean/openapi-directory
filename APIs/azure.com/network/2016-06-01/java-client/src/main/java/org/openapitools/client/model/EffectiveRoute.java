/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Effective Route
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EffectiveRoute {
  public static final String SERIALIZED_NAME_ADDRESS_PREFIX = "addressPrefix";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PREFIX)
  private List<String> addressPrefix = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_HOP_IP_ADDRESS = "nextHopIpAddress";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_IP_ADDRESS)
  private List<String> nextHopIpAddress = new ArrayList<>();

  /**
   * Gets or sets the type of Azure hop the packet should be sent to.
   */
  @JsonAdapter(NextHopTypeEnum.Adapter.class)
  public enum NextHopTypeEnum {
    VIRTUAL_NETWORK_GATEWAY("VirtualNetworkGateway"),
    
    VNET_LOCAL("VnetLocal"),
    
    INTERNET("Internet"),
    
    VIRTUAL_APPLIANCE("VirtualAppliance"),
    
    NONE("None");

    private String value;

    NextHopTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NextHopTypeEnum fromValue(String value) {
      for (NextHopTypeEnum b : NextHopTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NextHopTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NextHopTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NextHopTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NextHopTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NextHopTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEXT_HOP_TYPE = "nextHopType";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_TYPE)
  private NextHopTypeEnum nextHopType;

  /**
   * Gets who created the route
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    UNKNOWN("Unknown"),
    
    USER("User"),
    
    VIRTUAL_NETWORK_GATEWAY("VirtualNetworkGateway"),
    
    DEFAULT("Default");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  /**
   * Gets value of effective route
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("Active"),
    
    INVALID("Invalid");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public EffectiveRoute() {
  }

  public EffectiveRoute addressPrefix(List<String> addressPrefix) {
    this.addressPrefix = addressPrefix;
    return this;
  }

  public EffectiveRoute addAddressPrefixItem(String addressPrefixItem) {
    if (this.addressPrefix == null) {
      this.addressPrefix = new ArrayList<>();
    }
    this.addressPrefix.add(addressPrefixItem);
    return this;
  }

  /**
   * Gets address prefixes of the effective routes in CIDR notation.
   * @return addressPrefix
   */
  @javax.annotation.Nullable
  public List<String> getAddressPrefix() {
    return addressPrefix;
  }

  public void setAddressPrefix(List<String> addressPrefix) {
    this.addressPrefix = addressPrefix;
  }


  public EffectiveRoute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets the name of the user defined route. This is optional.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EffectiveRoute nextHopIpAddress(List<String> nextHopIpAddress) {
    this.nextHopIpAddress = nextHopIpAddress;
    return this;
  }

  public EffectiveRoute addNextHopIpAddressItem(String nextHopIpAddressItem) {
    if (this.nextHopIpAddress == null) {
      this.nextHopIpAddress = new ArrayList<>();
    }
    this.nextHopIpAddress.add(nextHopIpAddressItem);
    return this;
  }

  /**
   * Gets the IP address of the next hop of the effective route
   * @return nextHopIpAddress
   */
  @javax.annotation.Nullable
  public List<String> getNextHopIpAddress() {
    return nextHopIpAddress;
  }

  public void setNextHopIpAddress(List<String> nextHopIpAddress) {
    this.nextHopIpAddress = nextHopIpAddress;
  }


  public EffectiveRoute nextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
    return this;
  }

  /**
   * Gets or sets the type of Azure hop the packet should be sent to.
   * @return nextHopType
   */
  @javax.annotation.Nullable
  public NextHopTypeEnum getNextHopType() {
    return nextHopType;
  }

  public void setNextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
  }


  public EffectiveRoute source(SourceEnum source) {
    this.source = source;
    return this;
  }

  /**
   * Gets who created the route
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }


  public EffectiveRoute state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Gets value of effective route
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EffectiveRoute effectiveRoute = (EffectiveRoute) o;
    return Objects.equals(this.addressPrefix, effectiveRoute.addressPrefix) &&
        Objects.equals(this.name, effectiveRoute.name) &&
        Objects.equals(this.nextHopIpAddress, effectiveRoute.nextHopIpAddress) &&
        Objects.equals(this.nextHopType, effectiveRoute.nextHopType) &&
        Objects.equals(this.source, effectiveRoute.source) &&
        Objects.equals(this.state, effectiveRoute.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPrefix, name, nextHopIpAddress, nextHopType, source, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EffectiveRoute {\n");
    sb.append("    addressPrefix: ").append(toIndentedString(addressPrefix)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextHopIpAddress: ").append(toIndentedString(nextHopIpAddress)).append("\n");
    sb.append("    nextHopType: ").append(toIndentedString(nextHopType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressPrefix");
    openapiFields.add("name");
    openapiFields.add("nextHopIpAddress");
    openapiFields.add("nextHopType");
    openapiFields.add("source");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EffectiveRoute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EffectiveRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EffectiveRoute is not found in the empty JSON string", EffectiveRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EffectiveRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EffectiveRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("addressPrefix") != null && !jsonObj.get("addressPrefix").isJsonNull() && !jsonObj.get("addressPrefix").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPrefix` to be an array in the JSON string but got `%s`", jsonObj.get("addressPrefix").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nextHopIpAddress") != null && !jsonObj.get("nextHopIpAddress").isJsonNull() && !jsonObj.get("nextHopIpAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopIpAddress` to be an array in the JSON string but got `%s`", jsonObj.get("nextHopIpAddress").toString()));
      }
      if ((jsonObj.get("nextHopType") != null && !jsonObj.get("nextHopType").isJsonNull()) && !jsonObj.get("nextHopType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopType").toString()));
      }
      // validate the optional field `nextHopType`
      if (jsonObj.get("nextHopType") != null && !jsonObj.get("nextHopType").isJsonNull()) {
        NextHopTypeEnum.validateJsonElement(jsonObj.get("nextHopType"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EffectiveRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EffectiveRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EffectiveRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EffectiveRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<EffectiveRoute>() {
           @Override
           public void write(JsonWriter out, EffectiveRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EffectiveRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EffectiveRoute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EffectiveRoute
   * @throws IOException if the JSON string is invalid with respect to EffectiveRoute
   */
  public static EffectiveRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EffectiveRoute.class);
  }

  /**
   * Convert an instance of EffectiveRoute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

