/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SecurityRule;
import org.openapitools.client.model.SecurityRuleListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecurityRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for securityRulesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param securityRuleParameters Parameters supplied to the create/update network security rule operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRulesCreateOrUpdateCall(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, SecurityRule securityRuleParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityRuleParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkSecurityGroupName" + "}", localVarApiClient.escapeString(networkSecurityGroupName.toString()))
            .replace("{" + "securityRuleName" + "}", localVarApiClient.escapeString(securityRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRulesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, SecurityRule securityRuleParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling securityRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'networkSecurityGroupName' is set
        if (networkSecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'networkSecurityGroupName' when calling securityRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'securityRuleName' is set
        if (securityRuleName == null) {
            throw new ApiException("Missing the required parameter 'securityRuleName' when calling securityRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling securityRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling securityRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'securityRuleParameters' is set
        if (securityRuleParameters == null) {
            throw new ApiException("Missing the required parameter 'securityRuleParameters' when calling securityRulesCreateOrUpdate(Async)");
        }

        return securityRulesCreateOrUpdateCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, securityRuleParameters, _callback);

    }

    /**
     * 
     * The Put network security rule operation creates/updates a security rule in the specified network security group
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param securityRuleParameters Parameters supplied to the create/update network security rule operation (required)
     * @return SecurityRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SecurityRule securityRulesCreateOrUpdate(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, SecurityRule securityRuleParameters) throws ApiException {
        ApiResponse<SecurityRule> localVarResp = securityRulesCreateOrUpdateWithHttpInfo(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, securityRuleParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The Put network security rule operation creates/updates a security rule in the specified network security group
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param securityRuleParameters Parameters supplied to the create/update network security rule operation (required)
     * @return ApiResponse&lt;SecurityRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityRule> securityRulesCreateOrUpdateWithHttpInfo(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, SecurityRule securityRuleParameters) throws ApiException {
        okhttp3.Call localVarCall = securityRulesCreateOrUpdateValidateBeforeCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, securityRuleParameters, null);
        Type localVarReturnType = new TypeToken<SecurityRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Put network security rule operation creates/updates a security rule in the specified network security group
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param securityRuleParameters Parameters supplied to the create/update network security rule operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRulesCreateOrUpdateAsync(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, SecurityRule securityRuleParameters, final ApiCallback<SecurityRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRulesCreateOrUpdateValidateBeforeCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, securityRuleParameters, _callback);
        Type localVarReturnType = new TypeToken<SecurityRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRulesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRulesDeleteCall(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkSecurityGroupName" + "}", localVarApiClient.escapeString(networkSecurityGroupName.toString()))
            .replace("{" + "securityRuleName" + "}", localVarApiClient.escapeString(securityRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRulesDeleteValidateBeforeCall(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling securityRulesDelete(Async)");
        }

        // verify the required parameter 'networkSecurityGroupName' is set
        if (networkSecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'networkSecurityGroupName' when calling securityRulesDelete(Async)");
        }

        // verify the required parameter 'securityRuleName' is set
        if (securityRuleName == null) {
            throw new ApiException("Missing the required parameter 'securityRuleName' when calling securityRulesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling securityRulesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling securityRulesDelete(Async)");
        }

        return securityRulesDeleteCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The delete network security rule operation deletes the specified network security rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void securityRulesDelete(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId) throws ApiException {
        securityRulesDeleteWithHttpInfo(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * The delete network security rule operation deletes the specified network security rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> securityRulesDeleteWithHttpInfo(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = securityRulesDeleteValidateBeforeCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The delete network security rule operation deletes the specified network security rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRulesDeleteAsync(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRulesDeleteValidateBeforeCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRulesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRulesGetCall(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkSecurityGroupName" + "}", localVarApiClient.escapeString(networkSecurityGroupName.toString()))
            .replace("{" + "securityRuleName" + "}", localVarApiClient.escapeString(securityRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRulesGetValidateBeforeCall(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling securityRulesGet(Async)");
        }

        // verify the required parameter 'networkSecurityGroupName' is set
        if (networkSecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'networkSecurityGroupName' when calling securityRulesGet(Async)");
        }

        // verify the required parameter 'securityRuleName' is set
        if (securityRuleName == null) {
            throw new ApiException("Missing the required parameter 'securityRuleName' when calling securityRulesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling securityRulesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling securityRulesGet(Async)");
        }

        return securityRulesGetCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The Get NetworkSecurityRule operation retrieves information about the specified network security rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SecurityRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SecurityRule securityRulesGet(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SecurityRule> localVarResp = securityRulesGetWithHttpInfo(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * The Get NetworkSecurityRule operation retrieves information about the specified network security rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SecurityRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityRule> securityRulesGetWithHttpInfo(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = securityRulesGetValidateBeforeCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SecurityRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Get NetworkSecurityRule operation retrieves information about the specified network security rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param securityRuleName The name of the security rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRulesGetAsync(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, String apiVersion, String subscriptionId, final ApiCallback<SecurityRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRulesGetValidateBeforeCall(resourceGroupName, networkSecurityGroupName, securityRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SecurityRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityRulesList
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRulesListCall(String resourceGroupName, String networkSecurityGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkSecurityGroupName" + "}", localVarApiClient.escapeString(networkSecurityGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityRulesListValidateBeforeCall(String resourceGroupName, String networkSecurityGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling securityRulesList(Async)");
        }

        // verify the required parameter 'networkSecurityGroupName' is set
        if (networkSecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'networkSecurityGroupName' when calling securityRulesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling securityRulesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling securityRulesList(Async)");
        }

        return securityRulesListCall(resourceGroupName, networkSecurityGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The List network security rule operation retrieves all the security rules in a network security group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SecurityRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SecurityRuleListResult securityRulesList(String resourceGroupName, String networkSecurityGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SecurityRuleListResult> localVarResp = securityRulesListWithHttpInfo(resourceGroupName, networkSecurityGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * The List network security rule operation retrieves all the security rules in a network security group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SecurityRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityRuleListResult> securityRulesListWithHttpInfo(String resourceGroupName, String networkSecurityGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = securityRulesListValidateBeforeCall(resourceGroupName, networkSecurityGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SecurityRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The List network security rule operation retrieves all the security rules in a network security group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkSecurityGroupName The name of the network security group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityRulesListAsync(String resourceGroupName, String networkSecurityGroupName, String apiVersion, String subscriptionId, final ApiCallback<SecurityRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityRulesListValidateBeforeCall(resourceGroupName, networkSecurityGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SecurityRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
