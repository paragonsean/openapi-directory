/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Outbound NAT pool of the load balancer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutboundNatRulePropertiesFormat {
  public static final String SERIALIZED_NAME_ALLOCATED_OUTBOUND_PORTS = "allocatedOutboundPorts";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_OUTBOUND_PORTS)
  private Integer allocatedOutboundPorts;

  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOL = "backendAddressPool";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOL)
  private SubResource backendAddressPool;

  public static final String SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATIONS = "frontendIPConfigurations";
  @SerializedName(SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATIONS)
  private List<SubResource> frontendIPConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public OutboundNatRulePropertiesFormat() {
  }

  public OutboundNatRulePropertiesFormat allocatedOutboundPorts(Integer allocatedOutboundPorts) {
    this.allocatedOutboundPorts = allocatedOutboundPorts;
    return this;
  }

  /**
   * Gets or sets the number of outbound ports to be used for SNAT
   * @return allocatedOutboundPorts
   */
  @javax.annotation.Nullable
  public Integer getAllocatedOutboundPorts() {
    return allocatedOutboundPorts;
  }

  public void setAllocatedOutboundPorts(Integer allocatedOutboundPorts) {
    this.allocatedOutboundPorts = allocatedOutboundPorts;
  }


  public OutboundNatRulePropertiesFormat backendAddressPool(SubResource backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
    return this;
  }

  /**
   * Get backendAddressPool
   * @return backendAddressPool
   */
  @javax.annotation.Nonnull
  public SubResource getBackendAddressPool() {
    return backendAddressPool;
  }

  public void setBackendAddressPool(SubResource backendAddressPool) {
    this.backendAddressPool = backendAddressPool;
  }


  public OutboundNatRulePropertiesFormat frontendIPConfigurations(List<SubResource> frontendIPConfigurations) {
    this.frontendIPConfigurations = frontendIPConfigurations;
    return this;
  }

  public OutboundNatRulePropertiesFormat addFrontendIPConfigurationsItem(SubResource frontendIPConfigurationsItem) {
    if (this.frontendIPConfigurations == null) {
      this.frontendIPConfigurations = new ArrayList<>();
    }
    this.frontendIPConfigurations.add(frontendIPConfigurationsItem);
    return this;
  }

  /**
   * Gets or sets Frontend IP addresses of the load balancer
   * @return frontendIPConfigurations
   */
  @javax.annotation.Nullable
  public List<SubResource> getFrontendIPConfigurations() {
    return frontendIPConfigurations;
  }

  public void setFrontendIPConfigurations(List<SubResource> frontendIPConfigurations) {
    this.frontendIPConfigurations = frontendIPConfigurations;
  }


  public OutboundNatRulePropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutboundNatRulePropertiesFormat outboundNatRulePropertiesFormat = (OutboundNatRulePropertiesFormat) o;
    return Objects.equals(this.allocatedOutboundPorts, outboundNatRulePropertiesFormat.allocatedOutboundPorts) &&
        Objects.equals(this.backendAddressPool, outboundNatRulePropertiesFormat.backendAddressPool) &&
        Objects.equals(this.frontendIPConfigurations, outboundNatRulePropertiesFormat.frontendIPConfigurations) &&
        Objects.equals(this.provisioningState, outboundNatRulePropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedOutboundPorts, backendAddressPool, frontendIPConfigurations, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutboundNatRulePropertiesFormat {\n");
    sb.append("    allocatedOutboundPorts: ").append(toIndentedString(allocatedOutboundPorts)).append("\n");
    sb.append("    backendAddressPool: ").append(toIndentedString(backendAddressPool)).append("\n");
    sb.append("    frontendIPConfigurations: ").append(toIndentedString(frontendIPConfigurations)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatedOutboundPorts");
    openapiFields.add("backendAddressPool");
    openapiFields.add("frontendIPConfigurations");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backendAddressPool");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutboundNatRulePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutboundNatRulePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutboundNatRulePropertiesFormat is not found in the empty JSON string", OutboundNatRulePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutboundNatRulePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutboundNatRulePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutboundNatRulePropertiesFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `backendAddressPool`
      SubResource.validateJsonElement(jsonObj.get("backendAddressPool"));
      if (jsonObj.get("frontendIPConfigurations") != null && !jsonObj.get("frontendIPConfigurations").isJsonNull()) {
        JsonArray jsonArrayfrontendIPConfigurations = jsonObj.getAsJsonArray("frontendIPConfigurations");
        if (jsonArrayfrontendIPConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("frontendIPConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `frontendIPConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("frontendIPConfigurations").toString()));
          }

          // validate the optional field `frontendIPConfigurations` (array)
          for (int i = 0; i < jsonArrayfrontendIPConfigurations.size(); i++) {
            SubResource.validateJsonElement(jsonArrayfrontendIPConfigurations.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutboundNatRulePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutboundNatRulePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutboundNatRulePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutboundNatRulePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<OutboundNatRulePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, OutboundNatRulePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutboundNatRulePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutboundNatRulePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutboundNatRulePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to OutboundNatRulePropertiesFormat
   */
  public static OutboundNatRulePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutboundNatRulePropertiesFormat.class);
  }

  /**
   * Convert an instance of OutboundNatRulePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

