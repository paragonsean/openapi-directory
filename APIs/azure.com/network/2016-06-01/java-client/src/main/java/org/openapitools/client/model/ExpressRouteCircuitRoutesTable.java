/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The routes table associated with the ExpressRouteCircuit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:58.883742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteCircuitRoutesTable {
  public static final String SERIALIZED_NAME_LOC_PRF = "locPrf";
  @SerializedName(SERIALIZED_NAME_LOC_PRF)
  private String locPrf;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NEXT_HOP = "nextHop";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP)
  private String nextHop;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public ExpressRouteCircuitRoutesTable() {
  }

  public ExpressRouteCircuitRoutesTable locPrf(String locPrf) {
    this.locPrf = locPrf;
    return this;
  }

  /**
   * locPrf.
   * @return locPrf
   */
  @javax.annotation.Nullable
  public String getLocPrf() {
    return locPrf;
  }

  public void setLocPrf(String locPrf) {
    this.locPrf = locPrf;
  }


  public ExpressRouteCircuitRoutesTable network(String network) {
    this.network = network;
    return this;
  }

  /**
   * network.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public ExpressRouteCircuitRoutesTable nextHop(String nextHop) {
    this.nextHop = nextHop;
    return this;
  }

  /**
   * nextHop
   * @return nextHop
   */
  @javax.annotation.Nullable
  public String getNextHop() {
    return nextHop;
  }

  public void setNextHop(String nextHop) {
    this.nextHop = nextHop;
  }


  public ExpressRouteCircuitRoutesTable path(String path) {
    this.path = path;
    return this;
  }

  /**
   * path .
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ExpressRouteCircuitRoutesTable weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * weight.
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteCircuitRoutesTable expressRouteCircuitRoutesTable = (ExpressRouteCircuitRoutesTable) o;
    return Objects.equals(this.locPrf, expressRouteCircuitRoutesTable.locPrf) &&
        Objects.equals(this.network, expressRouteCircuitRoutesTable.network) &&
        Objects.equals(this.nextHop, expressRouteCircuitRoutesTable.nextHop) &&
        Objects.equals(this.path, expressRouteCircuitRoutesTable.path) &&
        Objects.equals(this.weight, expressRouteCircuitRoutesTable.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locPrf, network, nextHop, path, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteCircuitRoutesTable {\n");
    sb.append("    locPrf: ").append(toIndentedString(locPrf)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    nextHop: ").append(toIndentedString(nextHop)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locPrf");
    openapiFields.add("network");
    openapiFields.add("nextHop");
    openapiFields.add("path");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteCircuitRoutesTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteCircuitRoutesTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteCircuitRoutesTable is not found in the empty JSON string", ExpressRouteCircuitRoutesTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteCircuitRoutesTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteCircuitRoutesTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locPrf") != null && !jsonObj.get("locPrf").isJsonNull()) && !jsonObj.get("locPrf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locPrf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locPrf").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("nextHop") != null && !jsonObj.get("nextHop").isJsonNull()) && !jsonObj.get("nextHop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHop").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteCircuitRoutesTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteCircuitRoutesTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteCircuitRoutesTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteCircuitRoutesTable.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteCircuitRoutesTable>() {
           @Override
           public void write(JsonWriter out, ExpressRouteCircuitRoutesTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteCircuitRoutesTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteCircuitRoutesTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteCircuitRoutesTable
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteCircuitRoutesTable
   */
  public static ExpressRouteCircuitRoutesTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteCircuitRoutesTable.class);
  }

  /**
   * Convert an instance of ExpressRouteCircuitRoutesTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

