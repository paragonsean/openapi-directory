/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VirtualNetworkPeering;
import org.openapitools.client.model.VirtualNetworkPeeringListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualNetworkPeeringsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VirtualNetworkPeeringsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VirtualNetworkPeeringsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for virtualNetworkPeeringsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param virtualNetworkPeeringParameters Parameters supplied to the create/update virtual network peering operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkPeeringsCreateOrUpdateCall(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, VirtualNetworkPeering virtualNetworkPeeringParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = virtualNetworkPeeringParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "virtualNetworkPeeringName" + "}", localVarApiClient.escapeString(virtualNetworkPeeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkPeeringsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, VirtualNetworkPeering virtualNetworkPeeringParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling virtualNetworkPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualNetworkPeeringName' is set
        if (virtualNetworkPeeringName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkPeeringName' when calling virtualNetworkPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualNetworkPeeringParameters' is set
        if (virtualNetworkPeeringParameters == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkPeeringParameters' when calling virtualNetworkPeeringsCreateOrUpdate(Async)");
        }

        return virtualNetworkPeeringsCreateOrUpdateCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, virtualNetworkPeeringParameters, _callback);

    }

    /**
     * 
     * The Put virtual network peering operation creates/updates a peering in the specified virtual network
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param virtualNetworkPeeringParameters Parameters supplied to the create/update virtual network peering operation (required)
     * @return VirtualNetworkPeering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkPeering virtualNetworkPeeringsCreateOrUpdate(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, VirtualNetworkPeering virtualNetworkPeeringParameters) throws ApiException {
        ApiResponse<VirtualNetworkPeering> localVarResp = virtualNetworkPeeringsCreateOrUpdateWithHttpInfo(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, virtualNetworkPeeringParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The Put virtual network peering operation creates/updates a peering in the specified virtual network
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param virtualNetworkPeeringParameters Parameters supplied to the create/update virtual network peering operation (required)
     * @return ApiResponse&lt;VirtualNetworkPeering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkPeering> virtualNetworkPeeringsCreateOrUpdateWithHttpInfo(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, VirtualNetworkPeering virtualNetworkPeeringParameters) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkPeeringsCreateOrUpdateValidateBeforeCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, virtualNetworkPeeringParameters, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkPeering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Put virtual network peering operation creates/updates a peering in the specified virtual network
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param virtualNetworkPeeringParameters Parameters supplied to the create/update virtual network peering operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkPeeringsCreateOrUpdateAsync(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, VirtualNetworkPeering virtualNetworkPeeringParameters, final ApiCallback<VirtualNetworkPeering> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkPeeringsCreateOrUpdateValidateBeforeCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, virtualNetworkPeeringParameters, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkPeering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkPeeringsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the virtual network peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkPeeringsDeleteCall(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "virtualNetworkPeeringName" + "}", localVarApiClient.escapeString(virtualNetworkPeeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkPeeringsDeleteValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkPeeringsDelete(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling virtualNetworkPeeringsDelete(Async)");
        }

        // verify the required parameter 'virtualNetworkPeeringName' is set
        if (virtualNetworkPeeringName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkPeeringName' when calling virtualNetworkPeeringsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkPeeringsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkPeeringsDelete(Async)");
        }

        return virtualNetworkPeeringsDeleteCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The delete virtual network peering operation deletes the specified peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the virtual network peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void virtualNetworkPeeringsDelete(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId) throws ApiException {
        virtualNetworkPeeringsDeleteWithHttpInfo(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId);
    }

    /**
     * 
     * The delete virtual network peering operation deletes the specified peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the virtual network peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtualNetworkPeeringsDeleteWithHttpInfo(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkPeeringsDeleteValidateBeforeCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The delete virtual network peering operation deletes the specified peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the virtual network peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkPeeringsDeleteAsync(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkPeeringsDeleteValidateBeforeCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkPeeringsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the virtual network peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkPeeringsGetCall(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "virtualNetworkPeeringName" + "}", localVarApiClient.escapeString(virtualNetworkPeeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkPeeringsGetValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkPeeringsGet(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling virtualNetworkPeeringsGet(Async)");
        }

        // verify the required parameter 'virtualNetworkPeeringName' is set
        if (virtualNetworkPeeringName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkPeeringName' when calling virtualNetworkPeeringsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkPeeringsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkPeeringsGet(Async)");
        }

        return virtualNetworkPeeringsGetCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The Get virtual network peering operation retrieves information about the specified virtual network peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the virtual network peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VirtualNetworkPeering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkPeering virtualNetworkPeeringsGet(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VirtualNetworkPeering> localVarResp = virtualNetworkPeeringsGetWithHttpInfo(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * The Get virtual network peering operation retrieves information about the specified virtual network peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the virtual network peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VirtualNetworkPeering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkPeering> virtualNetworkPeeringsGetWithHttpInfo(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkPeeringsGetValidateBeforeCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkPeering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Get virtual network peering operation retrieves information about the specified virtual network peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param virtualNetworkPeeringName The name of the virtual network peering. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkPeeringsGetAsync(String resourceGroupName, String virtualNetworkName, String virtualNetworkPeeringName, String apiVersion, String subscriptionId, final ApiCallback<VirtualNetworkPeering> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkPeeringsGetValidateBeforeCall(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkPeering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkPeeringsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkPeeringsListCall(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkName" + "}", localVarApiClient.escapeString(virtualNetworkName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkPeeringsListValidateBeforeCall(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkPeeringsList(Async)");
        }

        // verify the required parameter 'virtualNetworkName' is set
        if (virtualNetworkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkName' when calling virtualNetworkPeeringsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkPeeringsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkPeeringsList(Async)");
        }

        return virtualNetworkPeeringsListCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The List virtual network peerings operation retrieves all the peerings in a virtual network.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VirtualNetworkPeeringListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkPeeringListResult virtualNetworkPeeringsList(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VirtualNetworkPeeringListResult> localVarResp = virtualNetworkPeeringsListWithHttpInfo(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * The List virtual network peerings operation retrieves all the peerings in a virtual network.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VirtualNetworkPeeringListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkPeeringListResult> virtualNetworkPeeringsListWithHttpInfo(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkPeeringsListValidateBeforeCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkPeeringListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The List virtual network peerings operation retrieves all the peerings in a virtual network.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkName The name of the virtual network. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkPeeringsListAsync(String resourceGroupName, String virtualNetworkName, String apiVersion, String subscriptionId, final ApiCallback<VirtualNetworkPeeringListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkPeeringsListValidateBeforeCall(resourceGroupName, virtualNetworkName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkPeeringListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
