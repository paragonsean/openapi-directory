/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundNatRulePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundNatRulePropertiesFormat::OAIInboundNatRulePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundNatRulePropertiesFormat::OAIInboundNatRulePropertiesFormat() {
    this->initializeModel();
}

OAIInboundNatRulePropertiesFormat::~OAIInboundNatRulePropertiesFormat() {}

void OAIInboundNatRulePropertiesFormat::initializeModel() {

    m_backend_ip_configuration_isSet = false;
    m_backend_ip_configuration_isValid = false;

    m_backend_port_isSet = false;
    m_backend_port_isValid = false;

    m_enable_floating_ip_isSet = false;
    m_enable_floating_ip_isValid = false;

    m_frontend_ip_configuration_isSet = false;
    m_frontend_ip_configuration_isValid = false;

    m_frontend_port_isSet = false;
    m_frontend_port_isValid = false;

    m_idle_timeout_in_minutes_isSet = false;
    m_idle_timeout_in_minutes_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIInboundNatRulePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundNatRulePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_backend_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_backend_ip_configuration, json[QString("backendIPConfiguration")]);
    m_backend_ip_configuration_isSet = !json[QString("backendIPConfiguration")].isNull() && m_backend_ip_configuration_isValid;

    m_backend_port_isValid = ::OpenAPI::fromJsonValue(m_backend_port, json[QString("backendPort")]);
    m_backend_port_isSet = !json[QString("backendPort")].isNull() && m_backend_port_isValid;

    m_enable_floating_ip_isValid = ::OpenAPI::fromJsonValue(m_enable_floating_ip, json[QString("enableFloatingIP")]);
    m_enable_floating_ip_isSet = !json[QString("enableFloatingIP")].isNull() && m_enable_floating_ip_isValid;

    m_frontend_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_frontend_ip_configuration, json[QString("frontendIPConfiguration")]);
    m_frontend_ip_configuration_isSet = !json[QString("frontendIPConfiguration")].isNull() && m_frontend_ip_configuration_isValid;

    m_frontend_port_isValid = ::OpenAPI::fromJsonValue(m_frontend_port, json[QString("frontendPort")]);
    m_frontend_port_isSet = !json[QString("frontendPort")].isNull() && m_frontend_port_isValid;

    m_idle_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout_in_minutes, json[QString("idleTimeoutInMinutes")]);
    m_idle_timeout_in_minutes_isSet = !json[QString("idleTimeoutInMinutes")].isNull() && m_idle_timeout_in_minutes_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIInboundNatRulePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundNatRulePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_ip_configuration.isSet()) {
        obj.insert(QString("backendIPConfiguration"), ::OpenAPI::toJsonValue(m_backend_ip_configuration));
    }
    if (m_backend_port_isSet) {
        obj.insert(QString("backendPort"), ::OpenAPI::toJsonValue(m_backend_port));
    }
    if (m_enable_floating_ip_isSet) {
        obj.insert(QString("enableFloatingIP"), ::OpenAPI::toJsonValue(m_enable_floating_ip));
    }
    if (m_frontend_ip_configuration.isSet()) {
        obj.insert(QString("frontendIPConfiguration"), ::OpenAPI::toJsonValue(m_frontend_ip_configuration));
    }
    if (m_frontend_port_isSet) {
        obj.insert(QString("frontendPort"), ::OpenAPI::toJsonValue(m_frontend_port));
    }
    if (m_idle_timeout_in_minutes_isSet) {
        obj.insert(QString("idleTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_idle_timeout_in_minutes));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

OAINetworkInterfaceIPConfiguration OAIInboundNatRulePropertiesFormat::getBackendIpConfiguration() const {
    return m_backend_ip_configuration;
}
void OAIInboundNatRulePropertiesFormat::setBackendIpConfiguration(const OAINetworkInterfaceIPConfiguration &backend_ip_configuration) {
    m_backend_ip_configuration = backend_ip_configuration;
    m_backend_ip_configuration_isSet = true;
}

bool OAIInboundNatRulePropertiesFormat::is_backend_ip_configuration_Set() const{
    return m_backend_ip_configuration_isSet;
}

bool OAIInboundNatRulePropertiesFormat::is_backend_ip_configuration_Valid() const{
    return m_backend_ip_configuration_isValid;
}

qint32 OAIInboundNatRulePropertiesFormat::getBackendPort() const {
    return m_backend_port;
}
void OAIInboundNatRulePropertiesFormat::setBackendPort(const qint32 &backend_port) {
    m_backend_port = backend_port;
    m_backend_port_isSet = true;
}

bool OAIInboundNatRulePropertiesFormat::is_backend_port_Set() const{
    return m_backend_port_isSet;
}

bool OAIInboundNatRulePropertiesFormat::is_backend_port_Valid() const{
    return m_backend_port_isValid;
}

bool OAIInboundNatRulePropertiesFormat::isEnableFloatingIp() const {
    return m_enable_floating_ip;
}
void OAIInboundNatRulePropertiesFormat::setEnableFloatingIp(const bool &enable_floating_ip) {
    m_enable_floating_ip = enable_floating_ip;
    m_enable_floating_ip_isSet = true;
}

bool OAIInboundNatRulePropertiesFormat::is_enable_floating_ip_Set() const{
    return m_enable_floating_ip_isSet;
}

bool OAIInboundNatRulePropertiesFormat::is_enable_floating_ip_Valid() const{
    return m_enable_floating_ip_isValid;
}

OAISubResource OAIInboundNatRulePropertiesFormat::getFrontendIpConfiguration() const {
    return m_frontend_ip_configuration;
}
void OAIInboundNatRulePropertiesFormat::setFrontendIpConfiguration(const OAISubResource &frontend_ip_configuration) {
    m_frontend_ip_configuration = frontend_ip_configuration;
    m_frontend_ip_configuration_isSet = true;
}

bool OAIInboundNatRulePropertiesFormat::is_frontend_ip_configuration_Set() const{
    return m_frontend_ip_configuration_isSet;
}

bool OAIInboundNatRulePropertiesFormat::is_frontend_ip_configuration_Valid() const{
    return m_frontend_ip_configuration_isValid;
}

qint32 OAIInboundNatRulePropertiesFormat::getFrontendPort() const {
    return m_frontend_port;
}
void OAIInboundNatRulePropertiesFormat::setFrontendPort(const qint32 &frontend_port) {
    m_frontend_port = frontend_port;
    m_frontend_port_isSet = true;
}

bool OAIInboundNatRulePropertiesFormat::is_frontend_port_Set() const{
    return m_frontend_port_isSet;
}

bool OAIInboundNatRulePropertiesFormat::is_frontend_port_Valid() const{
    return m_frontend_port_isValid;
}

qint32 OAIInboundNatRulePropertiesFormat::getIdleTimeoutInMinutes() const {
    return m_idle_timeout_in_minutes;
}
void OAIInboundNatRulePropertiesFormat::setIdleTimeoutInMinutes(const qint32 &idle_timeout_in_minutes) {
    m_idle_timeout_in_minutes = idle_timeout_in_minutes;
    m_idle_timeout_in_minutes_isSet = true;
}

bool OAIInboundNatRulePropertiesFormat::is_idle_timeout_in_minutes_Set() const{
    return m_idle_timeout_in_minutes_isSet;
}

bool OAIInboundNatRulePropertiesFormat::is_idle_timeout_in_minutes_Valid() const{
    return m_idle_timeout_in_minutes_isValid;
}

QString OAIInboundNatRulePropertiesFormat::getProtocol() const {
    return m_protocol;
}
void OAIInboundNatRulePropertiesFormat::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIInboundNatRulePropertiesFormat::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIInboundNatRulePropertiesFormat::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIInboundNatRulePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIInboundNatRulePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIInboundNatRulePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIInboundNatRulePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIInboundNatRulePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_ip_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_floating_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ip_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundNatRulePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
