/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitStats::OAIExpressRouteCircuitStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitStats::OAIExpressRouteCircuitStats() {
    this->initializeModel();
}

OAIExpressRouteCircuitStats::~OAIExpressRouteCircuitStats() {}

void OAIExpressRouteCircuitStats::initializeModel() {

    m_primarybytes_in_isSet = false;
    m_primarybytes_in_isValid = false;

    m_primarybytes_out_isSet = false;
    m_primarybytes_out_isValid = false;

    m_secondarybytes_in_isSet = false;
    m_secondarybytes_in_isValid = false;

    m_secondarybytes_out_isSet = false;
    m_secondarybytes_out_isValid = false;
}

void OAIExpressRouteCircuitStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitStats::fromJsonObject(QJsonObject json) {

    m_primarybytes_in_isValid = ::OpenAPI::fromJsonValue(m_primarybytes_in, json[QString("primarybytesIn")]);
    m_primarybytes_in_isSet = !json[QString("primarybytesIn")].isNull() && m_primarybytes_in_isValid;

    m_primarybytes_out_isValid = ::OpenAPI::fromJsonValue(m_primarybytes_out, json[QString("primarybytesOut")]);
    m_primarybytes_out_isSet = !json[QString("primarybytesOut")].isNull() && m_primarybytes_out_isValid;

    m_secondarybytes_in_isValid = ::OpenAPI::fromJsonValue(m_secondarybytes_in, json[QString("secondarybytesIn")]);
    m_secondarybytes_in_isSet = !json[QString("secondarybytesIn")].isNull() && m_secondarybytes_in_isValid;

    m_secondarybytes_out_isValid = ::OpenAPI::fromJsonValue(m_secondarybytes_out, json[QString("secondarybytesOut")]);
    m_secondarybytes_out_isSet = !json[QString("secondarybytesOut")].isNull() && m_secondarybytes_out_isValid;
}

QString OAIExpressRouteCircuitStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitStats::asJsonObject() const {
    QJsonObject obj;
    if (m_primarybytes_in_isSet) {
        obj.insert(QString("primarybytesIn"), ::OpenAPI::toJsonValue(m_primarybytes_in));
    }
    if (m_primarybytes_out_isSet) {
        obj.insert(QString("primarybytesOut"), ::OpenAPI::toJsonValue(m_primarybytes_out));
    }
    if (m_secondarybytes_in_isSet) {
        obj.insert(QString("secondarybytesIn"), ::OpenAPI::toJsonValue(m_secondarybytes_in));
    }
    if (m_secondarybytes_out_isSet) {
        obj.insert(QString("secondarybytesOut"), ::OpenAPI::toJsonValue(m_secondarybytes_out));
    }
    return obj;
}

qint64 OAIExpressRouteCircuitStats::getPrimarybytesIn() const {
    return m_primarybytes_in;
}
void OAIExpressRouteCircuitStats::setPrimarybytesIn(const qint64 &primarybytes_in) {
    m_primarybytes_in = primarybytes_in;
    m_primarybytes_in_isSet = true;
}

bool OAIExpressRouteCircuitStats::is_primarybytes_in_Set() const{
    return m_primarybytes_in_isSet;
}

bool OAIExpressRouteCircuitStats::is_primarybytes_in_Valid() const{
    return m_primarybytes_in_isValid;
}

qint64 OAIExpressRouteCircuitStats::getPrimarybytesOut() const {
    return m_primarybytes_out;
}
void OAIExpressRouteCircuitStats::setPrimarybytesOut(const qint64 &primarybytes_out) {
    m_primarybytes_out = primarybytes_out;
    m_primarybytes_out_isSet = true;
}

bool OAIExpressRouteCircuitStats::is_primarybytes_out_Set() const{
    return m_primarybytes_out_isSet;
}

bool OAIExpressRouteCircuitStats::is_primarybytes_out_Valid() const{
    return m_primarybytes_out_isValid;
}

qint64 OAIExpressRouteCircuitStats::getSecondarybytesIn() const {
    return m_secondarybytes_in;
}
void OAIExpressRouteCircuitStats::setSecondarybytesIn(const qint64 &secondarybytes_in) {
    m_secondarybytes_in = secondarybytes_in;
    m_secondarybytes_in_isSet = true;
}

bool OAIExpressRouteCircuitStats::is_secondarybytes_in_Set() const{
    return m_secondarybytes_in_isSet;
}

bool OAIExpressRouteCircuitStats::is_secondarybytes_in_Valid() const{
    return m_secondarybytes_in_isValid;
}

qint64 OAIExpressRouteCircuitStats::getSecondarybytesOut() const {
    return m_secondarybytes_out;
}
void OAIExpressRouteCircuitStats::setSecondarybytesOut(const qint64 &secondarybytes_out) {
    m_secondarybytes_out = secondarybytes_out;
    m_secondarybytes_out_isSet = true;
}

bool OAIExpressRouteCircuitStats::is_secondarybytes_out_Set() const{
    return m_secondarybytes_out_isSet;
}

bool OAIExpressRouteCircuitStats::is_secondarybytes_out_Valid() const{
    return m_secondarybytes_out_isValid;
}

bool OAIExpressRouteCircuitStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primarybytes_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primarybytes_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondarybytes_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondarybytes_out_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
