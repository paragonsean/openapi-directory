/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInboundNatPoolPropertiesFormat.h
 *
 * Properties of Inbound NAT pool
 */

#ifndef OAIInboundNatPoolPropertiesFormat_H
#define OAIInboundNatPoolPropertiesFormat_H

#include <QJsonObject>

#include "OAISubResource.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISubResource;

class OAIInboundNatPoolPropertiesFormat : public OAIObject {
public:
    OAIInboundNatPoolPropertiesFormat();
    OAIInboundNatPoolPropertiesFormat(QString json);
    ~OAIInboundNatPoolPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBackendPort() const;
    void setBackendPort(const qint32 &backend_port);
    bool is_backend_port_Set() const;
    bool is_backend_port_Valid() const;

    OAISubResource getFrontendIpConfiguration() const;
    void setFrontendIpConfiguration(const OAISubResource &frontend_ip_configuration);
    bool is_frontend_ip_configuration_Set() const;
    bool is_frontend_ip_configuration_Valid() const;

    qint32 getFrontendPortRangeEnd() const;
    void setFrontendPortRangeEnd(const qint32 &frontend_port_range_end);
    bool is_frontend_port_range_end_Set() const;
    bool is_frontend_port_range_end_Valid() const;

    qint32 getFrontendPortRangeStart() const;
    void setFrontendPortRangeStart(const qint32 &frontend_port_range_start);
    bool is_frontend_port_range_start_Set() const;
    bool is_frontend_port_range_start_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_backend_port;
    bool m_backend_port_isSet;
    bool m_backend_port_isValid;

    OAISubResource m_frontend_ip_configuration;
    bool m_frontend_ip_configuration_isSet;
    bool m_frontend_ip_configuration_isValid;

    qint32 m_frontend_port_range_end;
    bool m_frontend_port_range_end_isSet;
    bool m_frontend_port_range_end_isValid;

    qint32 m_frontend_port_range_start;
    bool m_frontend_port_range_start_isSet;
    bool m_frontend_port_range_start_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInboundNatPoolPropertiesFormat)

#endif // OAIInboundNatPoolPropertiesFormat_H
