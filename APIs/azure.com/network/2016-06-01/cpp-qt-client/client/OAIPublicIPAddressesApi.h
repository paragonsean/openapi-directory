/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicIPAddressesApi_H
#define OAI_OAIPublicIPAddressesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPublicIPAddress.h"
#include "OAIPublicIPAddressListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicIPAddressesApi : public QObject {
    Q_OBJECT

public:
    OAIPublicIPAddressesApi(const int timeOut = 0);
    ~OAIPublicIPAddressesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  public_ip_address_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPublicIPAddress [required]
    */
    virtual void publicIPAddressesCreateOrUpdate(const QString &resource_group_name, const QString &public_ip_address_name, const QString &api_version, const QString &subscription_id, const OAIPublicIPAddress &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  public_ip_address_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void publicIPAddressesDelete(const QString &resource_group_name, const QString &public_ip_address_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  public_ip_address_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void publicIPAddressesGet(const QString &resource_group_name, const QString &public_ip_address_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void publicIPAddressesList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void publicIPAddressesListAll(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void publicIPAddressesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void publicIPAddressesDeleteCallback(OAIHttpRequestWorker *worker);
    void publicIPAddressesGetCallback(OAIHttpRequestWorker *worker);
    void publicIPAddressesListCallback(OAIHttpRequestWorker *worker);
    void publicIPAddressesListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void publicIPAddressesCreateOrUpdateSignal(OAIPublicIPAddress summary);
    void publicIPAddressesDeleteSignal();
    void publicIPAddressesGetSignal(OAIPublicIPAddress summary);
    void publicIPAddressesListSignal(OAIPublicIPAddressListResult summary);
    void publicIPAddressesListAllSignal(OAIPublicIPAddressListResult summary);


    void publicIPAddressesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPAddress summary);
    void publicIPAddressesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void publicIPAddressesGetSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPAddress summary);
    void publicIPAddressesListSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPAddressListResult summary);
    void publicIPAddressesListAllSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPAddressListResult summary);

    Q_DECL_DEPRECATED_X("Use publicIPAddressesCreateOrUpdateSignalError() instead")
    void publicIPAddressesCreateOrUpdateSignalE(OAIPublicIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesCreateOrUpdateSignalError(OAIPublicIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesDeleteSignalError() instead")
    void publicIPAddressesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesGetSignalError() instead")
    void publicIPAddressesGetSignalE(OAIPublicIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesGetSignalError(OAIPublicIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesListSignalError() instead")
    void publicIPAddressesListSignalE(OAIPublicIPAddressListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesListSignalError(OAIPublicIPAddressListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesListAllSignalError() instead")
    void publicIPAddressesListAllSignalE(OAIPublicIPAddressListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesListAllSignalError(OAIPublicIPAddressListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use publicIPAddressesCreateOrUpdateSignalErrorFull() instead")
    void publicIPAddressesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesDeleteSignalErrorFull() instead")
    void publicIPAddressesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesGetSignalErrorFull() instead")
    void publicIPAddressesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesListSignalErrorFull() instead")
    void publicIPAddressesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesListAllSignalErrorFull() instead")
    void publicIPAddressesListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
