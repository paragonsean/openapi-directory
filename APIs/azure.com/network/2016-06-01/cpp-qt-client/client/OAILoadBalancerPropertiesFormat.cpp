/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancerPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancerPropertiesFormat::OAILoadBalancerPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancerPropertiesFormat::OAILoadBalancerPropertiesFormat() {
    this->initializeModel();
}

OAILoadBalancerPropertiesFormat::~OAILoadBalancerPropertiesFormat() {}

void OAILoadBalancerPropertiesFormat::initializeModel() {

    m_backend_address_pools_isSet = false;
    m_backend_address_pools_isValid = false;

    m_frontend_ip_configurations_isSet = false;
    m_frontend_ip_configurations_isValid = false;

    m_inbound_nat_pools_isSet = false;
    m_inbound_nat_pools_isValid = false;

    m_inbound_nat_rules_isSet = false;
    m_inbound_nat_rules_isValid = false;

    m_load_balancing_rules_isSet = false;
    m_load_balancing_rules_isValid = false;

    m_outbound_nat_rules_isSet = false;
    m_outbound_nat_rules_isValid = false;

    m_probes_isSet = false;
    m_probes_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;
}

void OAILoadBalancerPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancerPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_backend_address_pools_isValid = ::OpenAPI::fromJsonValue(m_backend_address_pools, json[QString("backendAddressPools")]);
    m_backend_address_pools_isSet = !json[QString("backendAddressPools")].isNull() && m_backend_address_pools_isValid;

    m_frontend_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_frontend_ip_configurations, json[QString("frontendIPConfigurations")]);
    m_frontend_ip_configurations_isSet = !json[QString("frontendIPConfigurations")].isNull() && m_frontend_ip_configurations_isValid;

    m_inbound_nat_pools_isValid = ::OpenAPI::fromJsonValue(m_inbound_nat_pools, json[QString("inboundNatPools")]);
    m_inbound_nat_pools_isSet = !json[QString("inboundNatPools")].isNull() && m_inbound_nat_pools_isValid;

    m_inbound_nat_rules_isValid = ::OpenAPI::fromJsonValue(m_inbound_nat_rules, json[QString("inboundNatRules")]);
    m_inbound_nat_rules_isSet = !json[QString("inboundNatRules")].isNull() && m_inbound_nat_rules_isValid;

    m_load_balancing_rules_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_rules, json[QString("loadBalancingRules")]);
    m_load_balancing_rules_isSet = !json[QString("loadBalancingRules")].isNull() && m_load_balancing_rules_isValid;

    m_outbound_nat_rules_isValid = ::OpenAPI::fromJsonValue(m_outbound_nat_rules, json[QString("outboundNatRules")]);
    m_outbound_nat_rules_isSet = !json[QString("outboundNatRules")].isNull() && m_outbound_nat_rules_isValid;

    m_probes_isValid = ::OpenAPI::fromJsonValue(m_probes, json[QString("probes")]);
    m_probes_isSet = !json[QString("probes")].isNull() && m_probes_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;
}

QString OAILoadBalancerPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancerPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_address_pools.size() > 0) {
        obj.insert(QString("backendAddressPools"), ::OpenAPI::toJsonValue(m_backend_address_pools));
    }
    if (m_frontend_ip_configurations.size() > 0) {
        obj.insert(QString("frontendIPConfigurations"), ::OpenAPI::toJsonValue(m_frontend_ip_configurations));
    }
    if (m_inbound_nat_pools.size() > 0) {
        obj.insert(QString("inboundNatPools"), ::OpenAPI::toJsonValue(m_inbound_nat_pools));
    }
    if (m_inbound_nat_rules.size() > 0) {
        obj.insert(QString("inboundNatRules"), ::OpenAPI::toJsonValue(m_inbound_nat_rules));
    }
    if (m_load_balancing_rules.size() > 0) {
        obj.insert(QString("loadBalancingRules"), ::OpenAPI::toJsonValue(m_load_balancing_rules));
    }
    if (m_outbound_nat_rules.size() > 0) {
        obj.insert(QString("outboundNatRules"), ::OpenAPI::toJsonValue(m_outbound_nat_rules));
    }
    if (m_probes.size() > 0) {
        obj.insert(QString("probes"), ::OpenAPI::toJsonValue(m_probes));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    return obj;
}

QList<OAIBackendAddressPool> OAILoadBalancerPropertiesFormat::getBackendAddressPools() const {
    return m_backend_address_pools;
}
void OAILoadBalancerPropertiesFormat::setBackendAddressPools(const QList<OAIBackendAddressPool> &backend_address_pools) {
    m_backend_address_pools = backend_address_pools;
    m_backend_address_pools_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_backend_address_pools_Set() const{
    return m_backend_address_pools_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_backend_address_pools_Valid() const{
    return m_backend_address_pools_isValid;
}

QList<OAIFrontendIPConfiguration> OAILoadBalancerPropertiesFormat::getFrontendIpConfigurations() const {
    return m_frontend_ip_configurations;
}
void OAILoadBalancerPropertiesFormat::setFrontendIpConfigurations(const QList<OAIFrontendIPConfiguration> &frontend_ip_configurations) {
    m_frontend_ip_configurations = frontend_ip_configurations;
    m_frontend_ip_configurations_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_frontend_ip_configurations_Set() const{
    return m_frontend_ip_configurations_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_frontend_ip_configurations_Valid() const{
    return m_frontend_ip_configurations_isValid;
}

QList<OAIInboundNatPool> OAILoadBalancerPropertiesFormat::getInboundNatPools() const {
    return m_inbound_nat_pools;
}
void OAILoadBalancerPropertiesFormat::setInboundNatPools(const QList<OAIInboundNatPool> &inbound_nat_pools) {
    m_inbound_nat_pools = inbound_nat_pools;
    m_inbound_nat_pools_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_inbound_nat_pools_Set() const{
    return m_inbound_nat_pools_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_inbound_nat_pools_Valid() const{
    return m_inbound_nat_pools_isValid;
}

QList<OAIInboundNatRule> OAILoadBalancerPropertiesFormat::getInboundNatRules() const {
    return m_inbound_nat_rules;
}
void OAILoadBalancerPropertiesFormat::setInboundNatRules(const QList<OAIInboundNatRule> &inbound_nat_rules) {
    m_inbound_nat_rules = inbound_nat_rules;
    m_inbound_nat_rules_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_inbound_nat_rules_Set() const{
    return m_inbound_nat_rules_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_inbound_nat_rules_Valid() const{
    return m_inbound_nat_rules_isValid;
}

QList<OAILoadBalancingRule> OAILoadBalancerPropertiesFormat::getLoadBalancingRules() const {
    return m_load_balancing_rules;
}
void OAILoadBalancerPropertiesFormat::setLoadBalancingRules(const QList<OAILoadBalancingRule> &load_balancing_rules) {
    m_load_balancing_rules = load_balancing_rules;
    m_load_balancing_rules_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_load_balancing_rules_Set() const{
    return m_load_balancing_rules_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_load_balancing_rules_Valid() const{
    return m_load_balancing_rules_isValid;
}

QList<OAIOutboundNatRule> OAILoadBalancerPropertiesFormat::getOutboundNatRules() const {
    return m_outbound_nat_rules;
}
void OAILoadBalancerPropertiesFormat::setOutboundNatRules(const QList<OAIOutboundNatRule> &outbound_nat_rules) {
    m_outbound_nat_rules = outbound_nat_rules;
    m_outbound_nat_rules_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_outbound_nat_rules_Set() const{
    return m_outbound_nat_rules_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_outbound_nat_rules_Valid() const{
    return m_outbound_nat_rules_isValid;
}

QList<OAIProbe> OAILoadBalancerPropertiesFormat::getProbes() const {
    return m_probes;
}
void OAILoadBalancerPropertiesFormat::setProbes(const QList<OAIProbe> &probes) {
    m_probes = probes;
    m_probes_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_probes_Set() const{
    return m_probes_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_probes_Valid() const{
    return m_probes_isValid;
}

QString OAILoadBalancerPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILoadBalancerPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAILoadBalancerPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAILoadBalancerPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAILoadBalancerPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAILoadBalancerPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

bool OAILoadBalancerPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_address_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_nat_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_nat_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_nat_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_probes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancerPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
