/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNetworksApi_H
#define OAI_OAIVirtualNetworksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVirtualNetwork.h"
#include "OAIVirtualNetworkListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNetworksApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNetworksApi(const int timeOut = 0);
    ~OAIVirtualNetworksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualNetwork [required]
    */
    virtual void virtualNetworksCreateOrUpdate(const QString &resource_group_name, const QString &virtual_network_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetwork &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworksDelete(const QString &resource_group_name, const QString &virtual_network_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualNetworksGet(const QString &resource_group_name, const QString &virtual_network_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworksList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworksListAll(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualNetworksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualNetworksDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualNetworksGetCallback(OAIHttpRequestWorker *worker);
    void virtualNetworksListCallback(OAIHttpRequestWorker *worker);
    void virtualNetworksListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualNetworksCreateOrUpdateSignal(OAIVirtualNetwork summary);
    void virtualNetworksDeleteSignal();
    void virtualNetworksGetSignal(OAIVirtualNetwork summary);
    void virtualNetworksListSignal(OAIVirtualNetworkListResult summary);
    void virtualNetworksListAllSignal(OAIVirtualNetworkListResult summary);


    void virtualNetworksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetwork summary);
    void virtualNetworksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworksGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetwork summary);
    void virtualNetworksListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkListResult summary);
    void virtualNetworksListAllSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkListResult summary);

    Q_DECL_DEPRECATED_X("Use virtualNetworksCreateOrUpdateSignalError() instead")
    void virtualNetworksCreateOrUpdateSignalE(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksCreateOrUpdateSignalError(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworksDeleteSignalError() instead")
    void virtualNetworksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworksGetSignalError() instead")
    void virtualNetworksGetSignalE(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksGetSignalError(OAIVirtualNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworksListSignalError() instead")
    void virtualNetworksListSignalE(OAIVirtualNetworkListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksListSignalError(OAIVirtualNetworkListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworksListAllSignalError() instead")
    void virtualNetworksListAllSignalE(OAIVirtualNetworkListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksListAllSignalError(OAIVirtualNetworkListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualNetworksCreateOrUpdateSignalErrorFull() instead")
    void virtualNetworksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworksDeleteSignalErrorFull() instead")
    void virtualNetworksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworksGetSignalErrorFull() instead")
    void virtualNetworksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworksListSignalErrorFull() instead")
    void virtualNetworksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworksListAllSignalErrorFull() instead")
    void virtualNetworksListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworksListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
