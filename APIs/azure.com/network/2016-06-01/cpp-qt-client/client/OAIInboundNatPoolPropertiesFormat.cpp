/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundNatPoolPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundNatPoolPropertiesFormat::OAIInboundNatPoolPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundNatPoolPropertiesFormat::OAIInboundNatPoolPropertiesFormat() {
    this->initializeModel();
}

OAIInboundNatPoolPropertiesFormat::~OAIInboundNatPoolPropertiesFormat() {}

void OAIInboundNatPoolPropertiesFormat::initializeModel() {

    m_backend_port_isSet = false;
    m_backend_port_isValid = false;

    m_frontend_ip_configuration_isSet = false;
    m_frontend_ip_configuration_isValid = false;

    m_frontend_port_range_end_isSet = false;
    m_frontend_port_range_end_isValid = false;

    m_frontend_port_range_start_isSet = false;
    m_frontend_port_range_start_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIInboundNatPoolPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundNatPoolPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_backend_port_isValid = ::OpenAPI::fromJsonValue(m_backend_port, json[QString("backendPort")]);
    m_backend_port_isSet = !json[QString("backendPort")].isNull() && m_backend_port_isValid;

    m_frontend_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_frontend_ip_configuration, json[QString("frontendIPConfiguration")]);
    m_frontend_ip_configuration_isSet = !json[QString("frontendIPConfiguration")].isNull() && m_frontend_ip_configuration_isValid;

    m_frontend_port_range_end_isValid = ::OpenAPI::fromJsonValue(m_frontend_port_range_end, json[QString("frontendPortRangeEnd")]);
    m_frontend_port_range_end_isSet = !json[QString("frontendPortRangeEnd")].isNull() && m_frontend_port_range_end_isValid;

    m_frontend_port_range_start_isValid = ::OpenAPI::fromJsonValue(m_frontend_port_range_start, json[QString("frontendPortRangeStart")]);
    m_frontend_port_range_start_isSet = !json[QString("frontendPortRangeStart")].isNull() && m_frontend_port_range_start_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIInboundNatPoolPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundNatPoolPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_port_isSet) {
        obj.insert(QString("backendPort"), ::OpenAPI::toJsonValue(m_backend_port));
    }
    if (m_frontend_ip_configuration.isSet()) {
        obj.insert(QString("frontendIPConfiguration"), ::OpenAPI::toJsonValue(m_frontend_ip_configuration));
    }
    if (m_frontend_port_range_end_isSet) {
        obj.insert(QString("frontendPortRangeEnd"), ::OpenAPI::toJsonValue(m_frontend_port_range_end));
    }
    if (m_frontend_port_range_start_isSet) {
        obj.insert(QString("frontendPortRangeStart"), ::OpenAPI::toJsonValue(m_frontend_port_range_start));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

qint32 OAIInboundNatPoolPropertiesFormat::getBackendPort() const {
    return m_backend_port;
}
void OAIInboundNatPoolPropertiesFormat::setBackendPort(const qint32 &backend_port) {
    m_backend_port = backend_port;
    m_backend_port_isSet = true;
}

bool OAIInboundNatPoolPropertiesFormat::is_backend_port_Set() const{
    return m_backend_port_isSet;
}

bool OAIInboundNatPoolPropertiesFormat::is_backend_port_Valid() const{
    return m_backend_port_isValid;
}

OAISubResource OAIInboundNatPoolPropertiesFormat::getFrontendIpConfiguration() const {
    return m_frontend_ip_configuration;
}
void OAIInboundNatPoolPropertiesFormat::setFrontendIpConfiguration(const OAISubResource &frontend_ip_configuration) {
    m_frontend_ip_configuration = frontend_ip_configuration;
    m_frontend_ip_configuration_isSet = true;
}

bool OAIInboundNatPoolPropertiesFormat::is_frontend_ip_configuration_Set() const{
    return m_frontend_ip_configuration_isSet;
}

bool OAIInboundNatPoolPropertiesFormat::is_frontend_ip_configuration_Valid() const{
    return m_frontend_ip_configuration_isValid;
}

qint32 OAIInboundNatPoolPropertiesFormat::getFrontendPortRangeEnd() const {
    return m_frontend_port_range_end;
}
void OAIInboundNatPoolPropertiesFormat::setFrontendPortRangeEnd(const qint32 &frontend_port_range_end) {
    m_frontend_port_range_end = frontend_port_range_end;
    m_frontend_port_range_end_isSet = true;
}

bool OAIInboundNatPoolPropertiesFormat::is_frontend_port_range_end_Set() const{
    return m_frontend_port_range_end_isSet;
}

bool OAIInboundNatPoolPropertiesFormat::is_frontend_port_range_end_Valid() const{
    return m_frontend_port_range_end_isValid;
}

qint32 OAIInboundNatPoolPropertiesFormat::getFrontendPortRangeStart() const {
    return m_frontend_port_range_start;
}
void OAIInboundNatPoolPropertiesFormat::setFrontendPortRangeStart(const qint32 &frontend_port_range_start) {
    m_frontend_port_range_start = frontend_port_range_start;
    m_frontend_port_range_start_isSet = true;
}

bool OAIInboundNatPoolPropertiesFormat::is_frontend_port_range_start_Set() const{
    return m_frontend_port_range_start_isSet;
}

bool OAIInboundNatPoolPropertiesFormat::is_frontend_port_range_start_Valid() const{
    return m_frontend_port_range_start_isValid;
}

QString OAIInboundNatPoolPropertiesFormat::getProtocol() const {
    return m_protocol;
}
void OAIInboundNatPoolPropertiesFormat::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIInboundNatPoolPropertiesFormat::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIInboundNatPoolPropertiesFormat::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIInboundNatPoolPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIInboundNatPoolPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIInboundNatPoolPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIInboundNatPoolPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIInboundNatPoolPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ip_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port_range_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port_range_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundNatPoolPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backend_port_isValid && m_frontend_port_range_end_isValid && m_frontend_port_range_start_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
