/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkSecurityGroupPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkSecurityGroupPropertiesFormat::OAINetworkSecurityGroupPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkSecurityGroupPropertiesFormat::OAINetworkSecurityGroupPropertiesFormat() {
    this->initializeModel();
}

OAINetworkSecurityGroupPropertiesFormat::~OAINetworkSecurityGroupPropertiesFormat() {}

void OAINetworkSecurityGroupPropertiesFormat::initializeModel() {

    m_default_security_rules_isSet = false;
    m_default_security_rules_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;

    m_security_rules_isSet = false;
    m_security_rules_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;
}

void OAINetworkSecurityGroupPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkSecurityGroupPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_default_security_rules_isValid = ::OpenAPI::fromJsonValue(m_default_security_rules, json[QString("defaultSecurityRules")]);
    m_default_security_rules_isSet = !json[QString("defaultSecurityRules")].isNull() && m_default_security_rules_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("networkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("networkInterfaces")].isNull() && m_network_interfaces_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;

    m_security_rules_isValid = ::OpenAPI::fromJsonValue(m_security_rules, json[QString("securityRules")]);
    m_security_rules_isSet = !json[QString("securityRules")].isNull() && m_security_rules_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;
}

QString OAINetworkSecurityGroupPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkSecurityGroupPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_default_security_rules.size() > 0) {
        obj.insert(QString("defaultSecurityRules"), ::OpenAPI::toJsonValue(m_default_security_rules));
    }
    if (m_network_interfaces.size() > 0) {
        obj.insert(QString("networkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    if (m_security_rules.size() > 0) {
        obj.insert(QString("securityRules"), ::OpenAPI::toJsonValue(m_security_rules));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    return obj;
}

QList<OAISecurityRule> OAINetworkSecurityGroupPropertiesFormat::getDefaultSecurityRules() const {
    return m_default_security_rules;
}
void OAINetworkSecurityGroupPropertiesFormat::setDefaultSecurityRules(const QList<OAISecurityRule> &default_security_rules) {
    m_default_security_rules = default_security_rules;
    m_default_security_rules_isSet = true;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_default_security_rules_Set() const{
    return m_default_security_rules_isSet;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_default_security_rules_Valid() const{
    return m_default_security_rules_isValid;
}

QList<OAINetworkInterface> OAINetworkSecurityGroupPropertiesFormat::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAINetworkSecurityGroupPropertiesFormat::setNetworkInterfaces(const QList<OAINetworkInterface> &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

QString OAINetworkSecurityGroupPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAINetworkSecurityGroupPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAINetworkSecurityGroupPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAINetworkSecurityGroupPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

QList<OAISecurityRule> OAINetworkSecurityGroupPropertiesFormat::getSecurityRules() const {
    return m_security_rules;
}
void OAINetworkSecurityGroupPropertiesFormat::setSecurityRules(const QList<OAISecurityRule> &security_rules) {
    m_security_rules = security_rules;
    m_security_rules_isSet = true;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_security_rules_Set() const{
    return m_security_rules_isSet;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_security_rules_Valid() const{
    return m_security_rules_isValid;
}

QList<OAISubnet> OAINetworkSecurityGroupPropertiesFormat::getSubnets() const {
    return m_subnets;
}
void OAINetworkSecurityGroupPropertiesFormat::setSubnets(const QList<OAISubnet> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAINetworkSecurityGroupPropertiesFormat::is_subnets_Valid() const{
    return m_subnets_isValid;
}

bool OAINetworkSecurityGroupPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_security_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkSecurityGroupPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
