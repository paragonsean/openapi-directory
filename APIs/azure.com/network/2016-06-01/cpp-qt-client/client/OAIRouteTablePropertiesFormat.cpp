/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteTablePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteTablePropertiesFormat::OAIRouteTablePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteTablePropertiesFormat::OAIRouteTablePropertiesFormat() {
    this->initializeModel();
}

OAIRouteTablePropertiesFormat::~OAIRouteTablePropertiesFormat() {}

void OAIRouteTablePropertiesFormat::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_routes_isSet = false;
    m_routes_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;
}

void OAIRouteTablePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteTablePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_routes_isValid = ::OpenAPI::fromJsonValue(m_routes, json[QString("routes")]);
    m_routes_isSet = !json[QString("routes")].isNull() && m_routes_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;
}

QString OAIRouteTablePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteTablePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_routes.size() > 0) {
        obj.insert(QString("routes"), ::OpenAPI::toJsonValue(m_routes));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    return obj;
}

QString OAIRouteTablePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRouteTablePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRouteTablePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRouteTablePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIRoute> OAIRouteTablePropertiesFormat::getRoutes() const {
    return m_routes;
}
void OAIRouteTablePropertiesFormat::setRoutes(const QList<OAIRoute> &routes) {
    m_routes = routes;
    m_routes_isSet = true;
}

bool OAIRouteTablePropertiesFormat::is_routes_Set() const{
    return m_routes_isSet;
}

bool OAIRouteTablePropertiesFormat::is_routes_Valid() const{
    return m_routes_isValid;
}

QList<OAISubnet> OAIRouteTablePropertiesFormat::getSubnets() const {
    return m_subnets;
}
void OAIRouteTablePropertiesFormat::setSubnets(const QList<OAISubnet> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIRouteTablePropertiesFormat::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIRouteTablePropertiesFormat::is_subnets_Valid() const{
    return m_subnets_isValid;
}

bool OAIRouteTablePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteTablePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
