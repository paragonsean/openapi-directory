/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNetworkPeeringsApi_H
#define OAI_OAIVirtualNetworkPeeringsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVirtualNetworkPeering.h"
#include "OAIVirtualNetworkPeeringListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNetworkPeeringsApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNetworkPeeringsApi(const int timeOut = 0);
    ~OAIVirtualNetworkPeeringsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  virtual_network_peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  virtual_network_peering_parameters OAIVirtualNetworkPeering [required]
    */
    virtual void virtualNetworkPeeringsCreateOrUpdate(const QString &resource_group_name, const QString &virtual_network_name, const QString &virtual_network_peering_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetworkPeering &virtual_network_peering_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  virtual_network_peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkPeeringsDelete(const QString &resource_group_name, const QString &virtual_network_name, const QString &virtual_network_peering_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  virtual_network_peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkPeeringsGet(const QString &resource_group_name, const QString &virtual_network_name, const QString &virtual_network_peering_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkPeeringsList(const QString &resource_group_name, const QString &virtual_network_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualNetworkPeeringsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkPeeringsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkPeeringsGetCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkPeeringsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualNetworkPeeringsCreateOrUpdateSignal(OAIVirtualNetworkPeering summary);
    void virtualNetworkPeeringsDeleteSignal();
    void virtualNetworkPeeringsGetSignal(OAIVirtualNetworkPeering summary);
    void virtualNetworkPeeringsListSignal(OAIVirtualNetworkPeeringListResult summary);


    void virtualNetworkPeeringsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkPeering summary);
    void virtualNetworkPeeringsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworkPeeringsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkPeering summary);
    void virtualNetworkPeeringsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkPeeringListResult summary);

    Q_DECL_DEPRECATED_X("Use virtualNetworkPeeringsCreateOrUpdateSignalError() instead")
    void virtualNetworkPeeringsCreateOrUpdateSignalE(OAIVirtualNetworkPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPeeringsCreateOrUpdateSignalError(OAIVirtualNetworkPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkPeeringsDeleteSignalError() instead")
    void virtualNetworkPeeringsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPeeringsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkPeeringsGetSignalError() instead")
    void virtualNetworkPeeringsGetSignalE(OAIVirtualNetworkPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPeeringsGetSignalError(OAIVirtualNetworkPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkPeeringsListSignalError() instead")
    void virtualNetworkPeeringsListSignalE(OAIVirtualNetworkPeeringListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPeeringsListSignalError(OAIVirtualNetworkPeeringListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualNetworkPeeringsCreateOrUpdateSignalErrorFull() instead")
    void virtualNetworkPeeringsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPeeringsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkPeeringsDeleteSignalErrorFull() instead")
    void virtualNetworkPeeringsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPeeringsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkPeeringsGetSignalErrorFull() instead")
    void virtualNetworkPeeringsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPeeringsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkPeeringsListSignalErrorFull() instead")
    void virtualNetworkPeeringsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkPeeringsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
