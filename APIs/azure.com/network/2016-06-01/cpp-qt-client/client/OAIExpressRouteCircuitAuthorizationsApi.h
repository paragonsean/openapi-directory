/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpressRouteCircuitAuthorizationsApi_H
#define OAI_OAIExpressRouteCircuitAuthorizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthorizationListResult.h"
#include "OAIExpressRouteCircuitAuthorization.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpressRouteCircuitAuthorizationsApi : public QObject {
    Q_OBJECT

public:
    OAIExpressRouteCircuitAuthorizationsApi(const int timeOut = 0);
    ~OAIExpressRouteCircuitAuthorizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  authorization_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  authorization_parameters OAIExpressRouteCircuitAuthorization [required]
    */
    virtual void expressRouteCircuitAuthorizationsCreateOrUpdate(const QString &resource_group_name, const QString &circuit_name, const QString &authorization_name, const QString &api_version, const QString &subscription_id, const OAIExpressRouteCircuitAuthorization &authorization_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  authorization_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitAuthorizationsDelete(const QString &resource_group_name, const QString &circuit_name, const QString &authorization_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  authorization_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitAuthorizationsGet(const QString &resource_group_name, const QString &circuit_name, const QString &authorization_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  circuit_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCircuitAuthorizationsList(const QString &resource_group_name, const QString &circuit_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expressRouteCircuitAuthorizationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitAuthorizationsDeleteCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitAuthorizationsGetCallback(OAIHttpRequestWorker *worker);
    void expressRouteCircuitAuthorizationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expressRouteCircuitAuthorizationsCreateOrUpdateSignal(OAIExpressRouteCircuitAuthorization summary);
    void expressRouteCircuitAuthorizationsDeleteSignal();
    void expressRouteCircuitAuthorizationsGetSignal(OAIExpressRouteCircuitAuthorization summary);
    void expressRouteCircuitAuthorizationsListSignal(OAIAuthorizationListResult summary);


    void expressRouteCircuitAuthorizationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuitAuthorization summary);
    void expressRouteCircuitAuthorizationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void expressRouteCircuitAuthorizationsGetSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCircuitAuthorization summary);
    void expressRouteCircuitAuthorizationsListSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationListResult summary);

    Q_DECL_DEPRECATED_X("Use expressRouteCircuitAuthorizationsCreateOrUpdateSignalError() instead")
    void expressRouteCircuitAuthorizationsCreateOrUpdateSignalE(OAIExpressRouteCircuitAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitAuthorizationsCreateOrUpdateSignalError(OAIExpressRouteCircuitAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitAuthorizationsDeleteSignalError() instead")
    void expressRouteCircuitAuthorizationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitAuthorizationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitAuthorizationsGetSignalError() instead")
    void expressRouteCircuitAuthorizationsGetSignalE(OAIExpressRouteCircuitAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitAuthorizationsGetSignalError(OAIExpressRouteCircuitAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitAuthorizationsListSignalError() instead")
    void expressRouteCircuitAuthorizationsListSignalE(OAIAuthorizationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitAuthorizationsListSignalError(OAIAuthorizationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expressRouteCircuitAuthorizationsCreateOrUpdateSignalErrorFull() instead")
    void expressRouteCircuitAuthorizationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitAuthorizationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitAuthorizationsDeleteSignalErrorFull() instead")
    void expressRouteCircuitAuthorizationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitAuthorizationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitAuthorizationsGetSignalErrorFull() instead")
    void expressRouteCircuitAuthorizationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitAuthorizationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCircuitAuthorizationsListSignalErrorFull() instead")
    void expressRouteCircuitAuthorizationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCircuitAuthorizationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
